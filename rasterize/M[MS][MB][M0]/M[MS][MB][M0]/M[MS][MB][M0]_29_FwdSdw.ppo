#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _981;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    float _242 = _241 * TEXCOORD.z;
    float _243 = _241 * TEXCOORD.w;
    vec4 _262 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _288 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _292 = _288.z;
    float _297 = (_288.x * 2.0) + (-1.0);
    float _299 = (_288.y * 2.0) + (-1.0);
    float _300 = dot(vec2(_297, _299), vec2(_297, _299));
    float _3574 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _306 = sqrt(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))));
    float _309 = fma(_306, _210, fma(_299, _217, _297 * _203));
    float _312 = fma(_306, _211, fma(_299, _218, _297 * _204));
    float _315 = fma(_306, _212, fma(_299, _219, _297 * _205));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _242) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _243) + cbTextureTilingScale._m0[11u].w));
    float _357 = _355.x;
    float _358 = 1.0 - _357;
    float _365 = ((_357 - _358) * cbMtdParam._m0[24u].z) + _358;
    float _367 = (cbMtdParam._m0[19u].x + dot(vec4(_319 * _309, _319 * _312, _319 * _315, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_365 * cbMtdParam._m0[21u].z);
    float _3585 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _383 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_365 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3596 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _388 = ((_368 * (cbMtdParam._m0[17u].x - _268)) * _384) + _268;
    float _389 = ((_368 * (cbMtdParam._m0[17u].y - _269)) * _384) + _269;
    float _390 = ((_368 * (cbMtdParam._m0[17u].z - _270)) * _384) + _270;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _242) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _243) + cbTextureTilingScale._m0[15u].w));
    float _410 = (_403.x * 2.0) + (-1.0);
    float _411 = (_403.y * 2.0) + (-1.0);
    float _412 = dot(vec2(_410, _411), vec2(_410, _411));
    float _3607 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _421 = (((_403.z - _292) * _368) * _384) + _292;
    float _436 = (((cbMtdParam._m0[21u].x * _297) + ((_410 - _297) * _368)) * _384) + _297;
    float _437 = (((cbMtdParam._m0[21u].x * _299) + ((_411 - _299) * _368)) * _384) + _299;
    float _438 = (((sqrt(1.0 - (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) - _306) * _368) * _384) + _306;
    float _443 = cbMtdParam._m0[22u].x + _288.w;
    float _446 = fma(_438, _210, fma(_437, _217, _436 * _203));
    float _449 = fma(_438, _211, fma(_437, _218, _436 * _204));
    float _452 = fma(_438, _212, fma(_437, _219, _436 * _205));
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    float _457 = _456 * _446;
    float _458 = _456 * _449;
    float _459 = _456 * _452;
    float _3618 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _460 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3640 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3651 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3662 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _478 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _529 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _519);
    float _530 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _519);
    float _531 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _519);
    float _535 = inversesqrt(dot(vec3(_529, _530, _531), vec3(_529, _530, _531)));
    float _536 = _529 * _535;
    float _537 = _530 * _535;
    float _538 = _531 * _535;
    float _544 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _545 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _566 = fma(_459, cbSceneParam._m0[5u].z, fma(_458, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _457));
    float _569 = fma(_459, cbSceneParam._m0[6u].z, fma(_458, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _457));
    float _572 = fma(_459, cbSceneParam._m0[7u].z, fma(_458, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _457));
    uint _586 = (_222 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _592 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_586].x;
    float _593 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_586].y;
    float _594 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_586].z;
    float _3673 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _3684 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _3695 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    vec4 _606 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _544, cbSceneParam._m0[86u].y * _545));
    float _610 = ((isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * TEXCOORD_5.w) * _606.x;
    float _611 = dot(vec3(_457, _458, _459), vec3(_536, _537, _538));
    float _614 = _611 * 2.0;
    float _618 = (_614 * _457) - _536;
    float _619 = (_614 * _458) - _537;
    float _620 = (_614 * _459) - _538;
    float _624 = abs(dot(vec3(_536, _537, _538), vec3(_457, _458, _459)));
    float _3706 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _626 = sqrt(_460);
    float _639 = exp2((_626 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_626 * 3.0));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _980;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _705 = fma(_679, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _671));
        float _709 = fma(_679, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _671));
        float _713 = fma(_679, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _671));
        float _738 = _671 + _457;
        float _739 = _675 + _458;
        float _740 = _679 + _459;
        float _750 = fma(_740, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738)) - _705;
        float _751 = fma(_740, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738)) - _709;
        float _752 = fma(_740, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738)) - _713;
        float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
        float _769 = ((_756 * _750) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_705 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _770 = ((_756 * _751) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_709 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_756 * _752) / cbModelParam._m0[34u].z) + ((((((_713 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        float _808 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_774.x + (-0.5));
        float _810 = _808 * (_774.y + (-0.5));
        float _811 = _808 * (_774.z + (-0.5));
        float _818 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_781.x + (-0.5));
        float _820 = _818 * (_781.y + (-0.5));
        float _821 = _818 * (_781.z + (-0.5));
        float _828 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_788.x + (-0.5));
        float _830 = _828 * (_788.y + (-0.5));
        float _831 = _828 * (_788.z + (-0.5));
        float _838 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_795.x + (-0.5));
        float _840 = _838 * (_795.y + (-0.5));
        float _841 = _838 * (_795.z + (-0.5));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = _809 * 0.5;
        float _846 = _819 * 0.5;
        float _847 = _829 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _862 = (dot(vec3(_457, _458, _459), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _872 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3754 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_874 + 1.0))) + _879) * _842;
        float _889 = _810 * 0.5;
        float _890 = _820 * 0.5;
        float _891 = _830 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _905 = (dot(vec3(_457, _458, _459), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _914 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3787 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_916 + 1.0))) + _921) * _843;
        float _931 = _811 * 0.5;
        float _932 = _821 * 0.5;
        float _933 = _831 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_457, _458, _459), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3820 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_958 + 1.0))) + _963) * _844;
        _980 = _811;
        _982 = _810;
        _983 = _809;
        _984 = _821;
        _985 = _820;
        _986 = _819;
        _987 = _831;
        _988 = _830;
        _989 = _829;
        _990 = _844;
        _991 = _843;
        _992 = _842;
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
    }
    else
    {
        _980 = _981;
        _982 = _981;
        _983 = _981;
        _984 = _981;
        _985 = _981;
        _986 = _981;
        _987 = _981;
        _988 = _981;
        _989 = _981;
        _990 = _981;
        _991 = _981;
        _992 = _981;
        _993 = 0.0;
        _994 = 0.0;
        _995 = 0.0;
    }
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1020 = fma(_679, cbModelParam._m0[30u].z, fma(_675, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _671));
        float _1024 = fma(_679, cbModelParam._m0[31u].z, fma(_675, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _671));
        float _1028 = fma(_679, cbModelParam._m0[32u].z, fma(_675, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _671));
        float _1051 = _671 + _457;
        float _1052 = _675 + _458;
        float _1053 = _679 + _459;
        float _1063 = fma(_1053, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051)) - _1020;
        float _1064 = fma(_1053, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051)) - _1024;
        float _1065 = fma(_1053, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051)) - _1028;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1020 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1024 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[35u].z) + ((((((_1028 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1119 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1086.x + (-0.5));
        float _1121 = _1119 * (_1086.y + (-0.5));
        float _1122 = _1119 * (_1086.z + (-0.5));
        float _1129 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1093.x + (-0.5));
        float _1131 = _1129 * (_1093.y + (-0.5));
        float _1132 = _1129 * (_1093.z + (-0.5));
        float _1139 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1100.x + (-0.5));
        float _1141 = _1139 * (_1100.y + (-0.5));
        float _1142 = _1139 * (_1100.z + (-0.5));
        float _1149 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1107.x + (-0.5));
        float _1151 = _1149 * (_1107.y + (-0.5));
        float _1152 = _1149 * (_1107.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_457, _458, _459), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3883 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1183 + 1.0))) + _1188) * _1153;
        float _1198 = _1121 * 0.5;
        float _1199 = _1131 * 0.5;
        float _1200 = _1141 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_457, _458, _459), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3916 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1225 + 1.0))) + _1230) * _1154;
        float _1240 = _1122 * 0.5;
        float _1241 = _1132 * 0.5;
        float _1242 = _1142 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_457, _458, _459), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3949 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1267 + 1.0))) + _1272) * _1155;
        _1289 = _1122;
        _1290 = _1121;
        _1291 = _1120;
        _1292 = _1132;
        _1293 = _1131;
        _1294 = _1130;
        _1295 = _1142;
        _1296 = _1141;
        _1297 = _1140;
        _1298 = _1155;
        _1299 = _1154;
        _1300 = _1153;
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _981;
        _1290 = _981;
        _1291 = _981;
        _1292 = _981;
        _1293 = _981;
        _1294 = _981;
        _1295 = _981;
        _1296 = _981;
        _1297 = _981;
        _1298 = _981;
        _1299 = _981;
        _1300 = _981;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _993)) + _993;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _994)) + _994;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _995)) + _995;
    float _1336 = fma(_1315, cbSceneParam._m0[89u].z, fma(_1314, cbSceneParam._m0[89u].y, _1313 * cbSceneParam._m0[89u].x));
    float _1339 = fma(_1315, cbSceneParam._m0[90u].z, fma(_1314, cbSceneParam._m0[90u].y, _1313 * cbSceneParam._m0[90u].x));
    float _1342 = fma(_1315, cbSceneParam._m0[91u].z, fma(_1314, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1313));
    float _1357 = _618 * 0.5;
    float _1358 = _619 * 0.5;
    float _1359 = _620 * 0.5;
    float _1360 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1363 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1366 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1400;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1373 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_980, _984, _987, _990));
        float _1377 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_982, _985, _988, _991));
        float _1381 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_983, _986, _989, _992));
        float _1388 = dot(vec4(cbModelParam._m0[39u]), vec4(_1357, _1358, _1359, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1411;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1402 = dot(vec4(cbModelParam._m0[40u]), vec4(_1357, _1358, _1359, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1415 = (_1411 * cbModelParam._m0[1u].x) + (_1400 * (1.0 - cbModelParam._m0[1u].x));
    float _1425 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _460);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1425 : min(cbModelParam._m0[25u].z, _1425));
    float _1507;
    float _1509;
    float _1511;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1474 = fma(_679, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671)) + cbModelParam._m0[13u].w;
        float _1478 = fma(_679, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671)) + cbModelParam._m0[14u].w;
        float _1482 = fma(_679, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671)) + cbModelParam._m0[15u].w;
        float _1485 = fma(_620, cbModelParam._m0[13u].z, fma(_619, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618));
        float _1488 = fma(_620, cbModelParam._m0[14u].z, fma(_619, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618));
        float _1491 = fma(_620, cbModelParam._m0[15u].z, fma(_619, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618));
        float _1519;
        if (_1485 > 0.0)
        {
            _1519 = abs((1.0 - _1474) / _1485);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1474 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1519 = frontier_phi_14_12_ladder;
        }
        float _1690;
        if (_1488 > 0.0)
        {
            _1690 = abs((1.0 - _1478) / _1488);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1478 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1690 = frontier_phi_23_19_ladder;
        }
        float _1986;
        if (_1491 > 0.0)
        {
            _1986 = abs((1.0 - _1482) / _1491);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1482 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1986 = frontier_phi_35_30_ladder;
        }
        float _1988 = isnan(_1690) ? _1519 : (isnan(_1519) ? _1690 : min(_1519, _1690));
        float _1989 = isnan(_1986) ? _1988 : (isnan(_1988) ? _1986 : min(_1988, _1986));
        float _1993 = (_1989 * _1485) + _1474;
        float _1994 = (_1989 * _1488) + _1478;
        float _1995 = (_1989 * _1491) + _1482;
        float _1996 = _1989 * 9.9999997473787516355514526367188e-05;
        float _1998 = (-1.0) - _1996;
        float _2000 = _1996 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1995 > _2000) || ((_1995 < _1998) || ((_1994 > _2000) || ((_1994 < _1998) || ((_1993 < _1998) || (_1993 > _2000))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2140 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1995, cbModelParam._m0[9u].z, fma(_1994, cbModelParam._m0[9u].y, _1993 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1995, cbModelParam._m0[10u].z, fma(_1994, cbModelParam._m0[10u].y, _1993 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1995, cbModelParam._m0[11u].z, fma(_1994, cbModelParam._m0[11u].y, _1993 * cbModelParam._m0[11u].x))), _1426);
            frontier_phi_13_35_ladder = _2140.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2140.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2140.x * cbModelParam._m0[1u].y;
        }
        _1507 = frontier_phi_13_35_ladder_2;
        _1509 = frontier_phi_13_35_ladder_1;
        _1511 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_618, _619, _620), _1426);
        _1507 = _1495.x * cbModelParam._m0[1u].y;
        _1509 = _1495.y * cbModelParam._m0[1u].y;
        _1511 = _1495.z * cbModelParam._m0[1u].y;
    }
    float _1515 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _460);
    float _1516 = isnan(_1515) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1515 : min(cbModelParam._m0[25u].w, _1515));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1570 = fma(_679, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671)) + cbModelParam._m0[21u].w;
        float _1574 = fma(_679, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671)) + cbModelParam._m0[22u].w;
        float _1578 = fma(_679, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671)) + cbModelParam._m0[23u].w;
        float _1581 = fma(_620, cbModelParam._m0[21u].z, fma(_619, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618));
        float _1584 = fma(_620, cbModelParam._m0[22u].z, fma(_619, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618));
        float _1587 = fma(_620, cbModelParam._m0[23u].z, fma(_619, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618));
        float _1695;
        if (_1581 > 0.0)
        {
            _1695 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1695 = frontier_phi_25_21_ladder;
        }
        float _2013;
        if (_1584 > 0.0)
        {
            _2013 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2013 = frontier_phi_37_32_ladder;
        }
        float _2340;
        if (_1587 > 0.0)
        {
            _2340 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2340 = frontier_phi_47_44_ladder;
        }
        float _2342 = isnan(_2013) ? _1695 : (isnan(_1695) ? _2013 : min(_1695, _2013));
        float _2343 = isnan(_2340) ? _2342 : (isnan(_2342) ? _2340 : min(_2342, _2340));
        float _2347 = (_2343 * _1581) + _1570;
        float _2348 = (_2343 * _1584) + _1574;
        float _2349 = (_2343 * _1587) + _1578;
        float _2350 = _2343 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2350;
        float _2353 = _2350 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2349 > _2353) || ((_2349 < _2351) || ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 < _2351) || (_2347 > _2353))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2349, cbModelParam._m0[17u].z, fma(_2348, cbModelParam._m0[17u].y, _2347 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2349, cbModelParam._m0[18u].z, fma(_2348, cbModelParam._m0[18u].y, _2347 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2349, cbModelParam._m0[19u].z, fma(_2348, cbModelParam._m0[19u].y, _2347 * cbModelParam._m0[19u].x))), _1516);
            frontier_phi_22_47_ladder = _2467.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2467.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2467.x * cbModelParam._m0[1u].z;
        }
        _1606 = frontier_phi_22_47_ladder_2;
        _1608 = frontier_phi_22_47_ladder_1;
        _1610 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_618, _619, _620), _1516);
        _1606 = _1590.x * cbModelParam._m0[1u].z;
        _1608 = _1590.y * cbModelParam._m0[1u].z;
        _1610 = _1590.z * cbModelParam._m0[1u].z;
    }
    float _1622 = ((((1.0 - _639) * ((_626 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_639 * _626)) * _610;
    float _1623 = _1622 * ((cbModelParam._m0[1u].w * (_1606 - _1507)) + _1507);
    float _1624 = _1622 * ((cbModelParam._m0[1u].w * (_1608 - _1509)) + _1509);
    float _1625 = _1622 * ((cbModelParam._m0[1u].w * (_1610 - _1511)) + _1511);
    float _1628 = fma(_1625, cbSceneParam._m0[89u].z, fma(_1624, cbSceneParam._m0[89u].y, _1623 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1625, cbSceneParam._m0[90u].z, fma(_1624, cbSceneParam._m0[90u].y, _1623 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1625, cbSceneParam._m0[91u].z, fma(_1624, cbSceneParam._m0[91u].y, _1623 * cbSceneParam._m0[91u].x));
    float _1669 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1673 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1677 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1681 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1682 = _1669 / _1681;
    float _1683 = _1673 / _1681;
    float _1684 = _1677 / _1681;
    float _1831;
    float _1832;
    float _1833;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1711 = ((uint(_1684 > cbSceneParam._m0[59u].y) + uint(_1684 > cbSceneParam._m0[59u].x)) + uint(_1684 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1712 = _1711 + 43u;
        uint _1720 = _1711 + 44u;
        uint _1728 = _1711 + 45u;
        uint _1736 = _1711 + 46u;
        float _1747 = fma(_1681, cbSceneParam._m0[_1712].w, fma(_1677, cbSceneParam._m0[_1712].z, fma(_1673, cbSceneParam._m0[_1712].y, _1669 * cbSceneParam._m0[_1712].x)));
        float _1751 = fma(_1681, cbSceneParam._m0[_1720].w, fma(_1677, cbSceneParam._m0[_1720].z, fma(_1673, cbSceneParam._m0[_1720].y, _1669 * cbSceneParam._m0[_1720].x)));
        float _1759 = fma(_1681, cbSceneParam._m0[_1736].w, fma(_1677, cbSceneParam._m0[_1736].z, fma(_1673, cbSceneParam._m0[_1736].y, _1669 * cbSceneParam._m0[_1736].x)));
        float _1764 = cbSceneParam._m0[33u].z * _1759;
        float _1766 = cbSceneParam._m0[33u].w * _1759;
        float _1769 = fma(_1681, cbSceneParam._m0[_1728].w, fma(_1677, cbSceneParam._m0[_1728].z, fma(_1673, cbSceneParam._m0[_1728].y, _1669 * cbSceneParam._m0[_1728].x))) / _1759;
        float _1817 = (cbSceneParam._m0[33u].x - sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684))) * cbSceneParam._m0[33u].y;
        float _4075 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1824 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1764 + _1747) / _1759, (_1766 + _1751) / _1759), _1769), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 + _1747) / _1759, (_1751 - _1764) / _1759), _1769), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1747 - _1764) / _1759, (_1751 - _1766) / _1759), _1769), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1747 - _1766) / _1759, (_1764 + _1751) / _1759), _1769), 0.0)).x), vec4(0.25)));
        _1831 = 1.0 - (_1824 * cbSceneParam._m0[34u].x);
        _1832 = 1.0 - (_1824 * cbSceneParam._m0[34u].y);
        _1833 = 1.0 - (_1824 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1831 = 1.0;
        _1832 = 1.0;
        _1833 = 1.0;
    }
    float _1897;
    float _1899;
    float _1901;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1885 = fma(_1681, cbSceneParam._m0[63u].w, fma(_1677, cbSceneParam._m0[63u].z, fma(_1673, cbSceneParam._m0[63u].y, _1669 * cbSceneParam._m0[63u].x)));
        float _1886 = fma(_1681, cbSceneParam._m0[60u].w, fma(_1677, cbSceneParam._m0[60u].z, fma(_1673, cbSceneParam._m0[60u].y, _1669 * cbSceneParam._m0[60u].x))) / _1885;
        float _1887 = fma(_1681, cbSceneParam._m0[61u].w, fma(_1677, cbSceneParam._m0[61u].z, fma(_1673, cbSceneParam._m0[61u].y, _1669 * cbSceneParam._m0[61u].x))) / _1885;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1886 >= cbSceneParam._m0[64u].x) && (_1887 >= cbSceneParam._m0[64u].y)) && (_1886 <= cbSceneParam._m0[64u].z)) && (_1887 <= cbSceneParam._m0[64u].w))
        {
            float _2026 = fma(_1681, cbSceneParam._m0[62u].w, fma(_1677, cbSceneParam._m0[62u].z, fma(_1673, cbSceneParam._m0[62u].y, _1669 * cbSceneParam._m0[62u].x))) / _1885;
            float _2030 = isnan(cbSceneParam._m0[41u].w) ? _2026 : (isnan(_2026) ? cbSceneParam._m0[41u].w : max(_2026, cbSceneParam._m0[41u].w));
            float _2073 = (cbSceneParam._m0[33u].x - sqrt(((_1683 * _1683) + (_1682 * _1682)) + (_1684 * _1684))) * cbSceneParam._m0[33u].y;
            float _4091 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
            float _2080 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1886, cbSceneParam._m0[33u].w + _1887), _2030), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1886, _1887 - cbSceneParam._m0[33u].z), _2030), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1886 - cbSceneParam._m0[33u].z, _1887 - cbSceneParam._m0[33u].w), _2030), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1886 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1887), _2030), 0.0)).x), vec4(0.25)));
            float _2084 = 1.0 - (_2080 * cbSceneParam._m0[34u].x);
            float _2085 = 1.0 - (_2080 * cbSceneParam._m0[34u].y);
            float _2086 = 1.0 - (_2080 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2086) ? _1833 : (isnan(_1833) ? _2086 : min(_1833, _2086));
            frontier_phi_34_33_ladder_1 = isnan(_2085) ? _1832 : (isnan(_1832) ? _2085 : min(_1832, _2085));
            frontier_phi_34_33_ladder_2 = isnan(_2084) ? _1831 : (isnan(_1831) ? _2084 : min(_1831, _2084));
        }
        else
        {
            frontier_phi_34_33_ladder = _1833;
            frontier_phi_34_33_ladder_1 = _1832;
            frontier_phi_34_33_ladder_2 = _1831;
        }
        _1897 = frontier_phi_34_33_ladder_2;
        _1899 = frontier_phi_34_33_ladder_1;
        _1901 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1897 = _1831;
        _1899 = _1832;
        _1901 = _1833;
    }
    uvec4 _1906 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1908 = _1906.x * 14u;
    uint _1909 = _1908 + 13u;
    float _1916 = _610 + (-1.0);
    float _1921 = (cbLight._m0[_1909].x * _1916) + 1.0;
    float _1922 = (cbLight._m0[_1909].y * _1916) + 1.0;
    float _1923 = (cbLight._m0[_1909].z * _1916) + 1.0;
    float _1924 = (cbLight._m0[_1909].w * _1916) + 1.0;
    uint _1925 = _1908 + 5u;
    float _1931 = isnan(1.0) ? _1922 : (isnan(_1922) ? 1.0 : min(_1922, 1.0));
    uint _1935 = _1908 + 4u;
    float _1945 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1949 = _1908 | 1u;
    float _1960 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_457, _458, _459));
    float _1963 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_457, _458, _459));
    float _4127 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _4138 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1968 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 0.3183098733425140380859375;
    float _1970 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * 0.3183098733425140380859375;
    float _1977 = ((cbLight._m0[_1925].x * _1931) * _1970) + (((cbLight._m0[_1935].x * _1897) * _1945) * _1968);
    float _1978 = ((_1931 * cbLight._m0[_1925].y) * _1970) + (((cbLight._m0[_1935].y * _1899) * _1945) * _1968);
    float _1979 = ((_1931 * cbLight._m0[_1925].z) * _1970) + (((cbLight._m0[_1935].z * _1901) * _1945) * _1968);
    uvec4 _1983 = floatBitsToUint(cbLight._m0[_1908 + 12u]);
    bool _1985 = _1983.x == 0u;
    float _2087;
    float _2089;
    float _2091;
    if (_1985)
    {
        _2087 = _1977;
        _2089 = _1978;
        _2091 = _1979;
    }
    else
    {
        uint _2095 = _1908 + 6u;
        float _2111 = (dot(vec3(cbLight._m0[_1908 + 2u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _2112 = _2111 * _2111;
        float _4149 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2113 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2114 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2087 = (((cbLight._m0[_2095].x * 0.3183098733425140380859375) * _2113) * _2114) + _1977;
        _2089 = (((cbLight._m0[_2095].y * 0.3183098733425140380859375) * _2113) * _2114) + _1978;
        _2091 = (((cbLight._m0[_2095].z * 0.3183098733425140380859375) * _2113) * _2114) + _1979;
    }
    bool _2094 = _1983.y == 0u;
    float _2149;
    float _2151;
    float _2153;
    if (_2094)
    {
        _2149 = _2087;
        _2151 = _2089;
        _2153 = _2091;
    }
    else
    {
        uint _2311 = _1908 + 7u;
        float _2327 = (dot(vec3(cbLight._m0[_1908 + 3u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _2328 = _2327 * _2327;
        float _4165 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2329 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _2330 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2149 = (((cbLight._m0[_2311].x * 0.3183098733425140380859375) * _2329) * _2330) + _2087;
        _2151 = (((cbLight._m0[_2311].y * 0.3183098733425140380859375) * _2329) * _2330) + _2089;
        _2153 = (((cbLight._m0[_2311].z * 0.3183098733425140380859375) * _2329) * _2330) + _2091;
    }
    uint _2156 = _1908 + 8u;
    float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _460) * 0.949999988079071044921875);
    float _2170 = _2169 * _2169;
    float _2171 = cbLight._m0[_1908].x + _536;
    float _2172 = cbLight._m0[_1908].y + _537;
    float _2173 = cbLight._m0[_1908].z + _538;
    float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
    float _2178 = _2177 * _2171;
    float _2179 = _2177 * _2172;
    float _2180 = _2177 * _2173;
    float _2181 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1908].xyz));
    float _4181 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _2185 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2186 = dot(vec3(_457, _458, _459), vec3(_2178, _2179, _2180));
    float _4203 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_2178, _2179, _2180));
    float _4214 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2170 * _2170;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2209 = (exp2(log2(1.0 - (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2210 = 1.0 - _2170;
    float _2221 = (0.5 / (((_2185 * ((_2184 * _2210) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2210) + _2170) * _2184))) * _2184;
    float _4225 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2223 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    uint _2237 = _1908 + 9u;
    float _2248 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1949].w)) * _460) * 0.949999988079071044921875);
    float _2249 = _2248 * _2248;
    float _2250 = cbLight._m0[_1949].x + _536;
    float _2251 = cbLight._m0[_1949].y + _537;
    float _2252 = cbLight._m0[_1949].z + _538;
    float _2256 = inversesqrt(dot(vec3(_2250, _2251, _2252), vec3(_2250, _2251, _2252)));
    float _2257 = _2256 * _2250;
    float _2258 = _2256 * _2251;
    float _2259 = _2256 * _2252;
    float _2260 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1949].xyz));
    float _4236 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2263 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2264 = dot(vec3(_457, _458, _459), vec3(_2257, _2258, _2259));
    float _4247 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2267 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2268 = dot(vec3(cbLight._m0[_1949].xyz), vec3(_2257, _2258, _2259));
    float _4258 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2272 = _2249 * _2249;
    float _2276 = ((_2267 * _2267) * (_2272 + (-1.0))) + 1.0;
    float _2285 = (exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2286 = 1.0 - _2249;
    float _2296 = (0.5 / (((_2185 * ((_2263 * _2286) + _2249)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2286) + _2249) * _2263))) * _2263;
    float _4269 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2298 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2272 / ((_2276 * _2276) * 3.141590118408203125));
    float _2308 = (((_2285 * cbLight._m0[_2237].x) * _2298) * _1931) + ((((cbLight._m0[_2156].x * _1897) * _2209) * _2223) * _1945);
    float _2309 = (((_2285 * cbLight._m0[_2237].y) * _2298) * _1931) + ((((cbLight._m0[_2156].y * _1899) * _2209) * _2223) * _1945);
    float _2310 = (((_2285 * cbLight._m0[_2237].z) * _2298) * _1931) + ((((cbLight._m0[_2156].z * _1901) * _2209) * _2223) * _1945);
    float _2366;
    float _2368;
    float _2370;
    if (_1985)
    {
        _2366 = _2308;
        _2368 = _2309;
        _2370 = _2310;
    }
    else
    {
        uint _2372 = _1908 + 2u;
        uint _2376 = _1908 + 10u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _460) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _536;
        float _2393 = cbLight._m0[_2372].y + _537;
        float _2394 = cbLight._m0[_2372].z + _538;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2372].xyz));
        float _4280 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2406 = dot(vec3(_457, _458, _459), vec3(_2399, _2400, _2401));
        float _4291 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4302 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2427 = (exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2428 = 1.0 - _2391;
        float _2438 = (0.5 / (((_2185 * ((_2405 * _2428) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2428) + _2391) * _2405))) * _2405;
        float _4313 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2440 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2441 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
        _2366 = (((_2427 * cbLight._m0[_2376].x) * _2440) * _2441) + _2308;
        _2368 = (((_2427 * cbLight._m0[_2376].y) * _2440) * _2441) + _2309;
        _2370 = (((_2427 * cbLight._m0[_2376].z) * _2440) * _2441) + _2310;
    }
    float _2472;
    float _2474;
    float _2476;
    if (_2094)
    {
        _2472 = _2366;
        _2474 = _2368;
        _2476 = _2370;
    }
    else
    {
        uint _2483 = _1908 + 3u;
        uint _2487 = _1908 + 11u;
        float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2483].w)) * _460) * 0.949999988079071044921875);
        float _2502 = _2501 * _2501;
        float _2503 = cbLight._m0[_2483].x + _536;
        float _2504 = cbLight._m0[_2483].y + _537;
        float _2505 = cbLight._m0[_2483].z + _538;
        float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
        float _2510 = _2509 * _2503;
        float _2511 = _2509 * _2504;
        float _2512 = _2509 * _2505;
        float _2513 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2483].xyz));
        float _4329 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2517 = dot(vec3(_457, _458, _459), vec3(_2510, _2511, _2512));
        float _4340 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2520 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2521 = dot(vec3(cbLight._m0[_2483].xyz), vec3(_2510, _2511, _2512));
        float _4351 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2525 = _2502 * _2502;
        float _2529 = ((_2520 * _2520) * (_2525 + (-1.0))) + 1.0;
        float _2538 = (exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2539 = 1.0 - _2502;
        float _2549 = (0.5 / (((_2185 * ((_2516 * _2539) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2185 * _2539) + _2502) * _2516))) * _2516;
        float _4362 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2551 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2525 / ((_2529 * _2529) * 3.141590118408203125));
        float _2552 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
        _2472 = (((_2538 * cbLight._m0[_2487].x) * _2551) * _2552) + _2366;
        _2474 = (((_2538 * cbLight._m0[_2487].y) * _2551) * _2552) + _2368;
        _2476 = (((_2538 * cbLight._m0[_2487].z) * _2551) * _2552) + _2370;
    }
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    if (_1906.y == 0u)
    {
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.x;
        uint _2585 = uint((float(_2573.y) * floor(float(uint(cbSceneParam._m0[85u].y * _545) / _2574))) + floor(float(uint(cbSceneParam._m0[85u].x * _544) / _2574)));
        float _2595 = (log2(_1684 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2596 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        uint _2599 = uint(isnan(14.0) ? _2596 : (isnan(_2596) ? 14.0 : min(_2596, 14.0)));
        uvec4 _2604 = texelFetch(g_lightClusterGridBuffer, int(((_2599 << 2u) + (_2585 << 6u)) >> 2u));
        uint _2605 = _2604.x;
        uint _2606 = _2573.z;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((((1u << ((_2606 >> 4u) & 15u)) + 4294967295u) & _2605) == 0u) || ((_2606 & 240u) == 0u))
        {
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
        }
        else
        {
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2830 = 0.0;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            uint _2836 = 0u;
            uint _2845;
            bool _2846;
            for (;;)
            {
                _2845 = texelFetch(g_lightClassification, int((((_2599 << 5u) + (_2585 << 9u)) + (_2836 << 2u)) >> 2u)).x;
                _2846 = _2845 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2846)
                {
                    frontier_phi_66_pred = _2835;
                    frontier_phi_66_pred_1 = _2834;
                    frontier_phi_66_pred_2 = _2833;
                    frontier_phi_66_pred_3 = _2832;
                    frontier_phi_66_pred_4 = _2831;
                    frontier_phi_66_pred_5 = _2830;
                }
                else
                {
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    uint _2960;
                    _2954 = _2830;
                    _2955 = _2831;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2845;
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    for (;;)
                    {
                        uint _2964 = uint(findLSB(_2960)) + (_2836 << 5u);
                        uint _2961 = (_2960 + 4294967295u) & _2960;
                        uint _2966 = _2964 * 48u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2966)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2966 + 3u)).x));
                        uint _2986 = (_2964 * 48u) + 4u;
                        vec4 _2999 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 3u)).x));
                        uint _3005 = (_2964 * 48u) + 8u;
                        vec3 _3016 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3005)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3005 + 2u)).x));
                        float _3020 = _2980.x - _1682;
                        float _3021 = _2980.y - _1683;
                        float _3022 = _2980.z - _1684;
                        float _3023 = dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022));
                        float _3026 = inversesqrt(_3023);
                        float _3027 = _3026 * _3020;
                        float _3028 = _3026 * _3021;
                        float _3029 = _3026 * _3022;
                        float _3030 = dot(vec3(_566, _569, _572), vec3(_3027, _3028, _3029));
                        float _3035 = 1.0 - (_3023 * _2980.w);
                        float _4388 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3036 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3037 = sqrt(_3023) * _2999.w;
                        float _3040 = 1.39999997615814208984375 / (_3037 + 1.39999997615814208984375);
                        float _3041 = _3040 * _3040;
                        float _3044 = ((1.0 - _3041) * _3030) + _3041;
                        float _3047 = _3037 * _3037;
                        float _3051 = ((isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0))) * _3036) / ((_3047 * 0.699999988079071044921875) + 1.0);
                        float _3055 = (-0.0) - _1682;
                        float _3056 = (-0.0) - _1683;
                        float _3057 = (-0.0) - _1684;
                        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
                        float _3062 = _3061 * _3055;
                        float _3063 = _3061 * _3056;
                        float _3064 = _3061 * _3057;
                        float _3071 = exp2(log2(1.0 / ((_3047 * 3.5) + 5.0)) * 0.25);
                        float _3072 = 1.0 - _626;
                        float _3079 = sqrt(1.0 - ((1.0 - (_3072 * _3072)) * (1.0 - (_3071 * _3071))));
                        float _3080 = _3079 * _3079;
                        float _3081 = _3080 * _3080;
                        float _3082 = _3062 + _3027;
                        float _3083 = _3063 + _3028;
                        float _3084 = _3064 + _3029;
                        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                        float _3092 = dot(vec3(_566, _569, _572), vec3(_3062, _3063, _3064));
                        float _4404 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3095 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                        float _3096 = dot(vec3(_566, _569, _572), vec3(_3088 * _3082, _3088 * _3083, _3088 * _3084));
                        float _4415 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3099 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                        float _3103 = ((_3099 * _3099) * (_3081 + (-1.0))) + 1.0;
                        float _3104 = _3040 * _3080;
                        float _3105 = _3104 * _3104;
                        float _3108 = ((1.0 - _3105) * _3030) + _3105;
                        float _4426 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3109 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3110 = 1.0 - _3080;
                        float _3120 = (0.5 / (((_3109 * ((_3095 * _3110) + _3080)) + 9.9999999392252902907785028219223e-09) + (((_3109 * _3110) + _3080) * _3095))) * _3109;
                        float _4437 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3131 = (((_3081 * 3.1415927410125732421875) * (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0)))) / ((_3103 * _3103) * ((_3047 * 2.1991131305694580078125) + 3.141590118408203125))) * _3036;
                        _2889 = (_3051 * _2999.x) + _2957;
                        _2890 = (_3051 * _2999.y) + _2958;
                        _2891 = (_3051 * _2999.z) + _2959;
                        _2886 = (_3131 * _3016.x) + _2954;
                        _2887 = (_3131 * _3016.y) + _2955;
                        _2888 = (_3131 * _3016.z) + _2956;
                        if (_2961 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2954 = _2886;
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2961;
                        }
                    }
                    frontier_phi_66_pred = _2891;
                    frontier_phi_66_pred_1 = _2890;
                    frontier_phi_66_pred_2 = _2889;
                    frontier_phi_66_pred_3 = _2888;
                    frontier_phi_66_pred_4 = _2887;
                    frontier_phi_66_pred_5 = _2886;
                }
                _2696 = frontier_phi_66_pred;
                _2694 = frontier_phi_66_pred_1;
                _2692 = frontier_phi_66_pred_2;
                _2690 = frontier_phi_66_pred_3;
                _2688 = frontier_phi_66_pred_4;
                _2686 = frontier_phi_66_pred_5;
                uint _2837 = _2836 + 1u;
                if (_2837 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2830 = _2686;
                    _2831 = _2688;
                    _2832 = _2690;
                    _2833 = _2692;
                    _2834 = _2694;
                    _2835 = _2696;
                    _2836 = _2837;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
        }
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.z;
        uint _2702 = (_2700 >> 8u) & 15u;
        float _2798;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        if (((4294967295u << _2702) & _2605) == 0u)
        {
            _2798 = _2685;
            _2800 = _2687;
            _2802 = _2689;
            _2804 = _2691;
            _2806 = _2693;
            _2808 = _2695;
        }
        else
        {
            float _2823 = inversesqrt(dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684)));
            float _2824 = _2823 * _1682;
            float _2825 = _2823 * _1683;
            float _2826 = _2823 * _1684;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2702 < ((_2700 >> 12u) & 15u))
            {
                float _2799;
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2937 = _2685;
                float _2938 = _2687;
                float _2939 = _2689;
                float _2940 = _2691;
                float _2941 = _2693;
                float _2942 = _2695;
                uint _2943 = _2702;
                uint _2952;
                bool _2953;
                for (;;)
                {
                    _2952 = texelFetch(g_lightClassification, int((((_2599 << 5u) + (_2585 << 9u)) + (_2943 << 2u)) >> 2u)).x;
                    _2953 = _2952 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2953)
                    {
                        frontier_phi_72_pred = _2942;
                        frontier_phi_72_pred_1 = _2941;
                        frontier_phi_72_pred_2 = _2940;
                        frontier_phi_72_pred_3 = _2939;
                        frontier_phi_72_pred_4 = _2938;
                        frontier_phi_72_pred_5 = _2937;
                    }
                    else
                    {
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3431;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3149 = _2937;
                        float _3150 = _2938;
                        float _3151 = _2939;
                        float _3152 = _2940;
                        float _3153 = _2941;
                        float _3154 = _2942;
                        uint _3155 = _2952;
                        uint _3156;
                        vec4 _3181;
                        float _3182;
                        vec4 _3197;
                        vec3 _3209;
                        vec4 _3225;
                        vec4 _3241;
                        float _3287;
                        bool _3288;
                        for (;;)
                        {
                            uint _3166 = ((_2943 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3155));
                            _3156 = (_3155 + 4294967295u) & _3155;
                            uint _3168 = _3166 * 40u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            _3182 = _3181.w;
                            uint _3184 = (_3166 * 40u) + 4u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3199 = (_3166 * 40u) + 8u;
                            _3209 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x));
                            uint _3212 = (_3166 * 40u) + 16u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            uint _3228 = (_3166 * 40u) + 20u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3243 = (_3166 * 40u) + 24u;
                            vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3262 = (_3166 * 40u) + 28u;
                            vec4 _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            _3287 = fma(_1684, _3275.z, fma(_1683, _3275.y, _3275.x * _1682)) + _3275.w;
                            _3288 = !((fma(_1684, _3256.z, fma(_1683, _3256.y, _3256.x * _1682)) + _3256.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3288)
                            {
                                float _3315 = _3181.x - _1682;
                                float _3316 = _3181.y - _1683;
                                float _3317 = _3181.z - _1684;
                                float _3318 = dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317));
                                float _3321 = inversesqrt(_3318);
                                float _3322 = _3321 * _3315;
                                float _3323 = _3321 * _3316;
                                float _3324 = _3321 * _3317;
                                float _3328 = 1.0 - (_3318 / (_3182 * _3182));
                                float _4448 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                                float _3329 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3333 = sqrt(_3318) * _3197.w;
                                float _3335 = 1.39999997615814208984375 / (_3333 + 1.39999997615814208984375);
                                float _3336 = _3335 * _3335;
                                float _3339 = ((1.0 - _3336) * dot(vec3(_3322, _3323, _3324), vec3(_566, _569, _572))) + _3336;
                                float _3342 = _3333 * _3333;
                                float _3346 = (fma(_1684, _3225.z, fma(_1683, _3225.y, _3225.x * _1682)) + _3225.w) / _3287;
                                float _3347 = (fma(_1684, _3241.z, fma(_1683, _3241.y, _3241.x * _1682)) + _3241.w) / _3287;
                                float _3351 = 1.0 - dot(vec2(_3346, _3347), vec2(_3346, _3347));
                                float _4464 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                                float _3353 = _3352 * (((isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0))) * _3329) / ((_3342 * 0.699999988079071044921875) + 1.0));
                                float _3365 = exp2(log2(1.0 / ((_3342 * 3.5) + 5.0)) * 0.25);
                                float _3366 = 1.0 - _626;
                                float _3373 = sqrt(1.0 - ((1.0 - (_3366 * _3366)) * (1.0 - (_3365 * _3365))));
                                float _3374 = _3373 * _3373;
                                float _3375 = _3374 * _3374;
                                float _3376 = _3322 - _2824;
                                float _3377 = _3323 - _2825;
                                float _3378 = _3324 - _2826;
                                float _3382 = inversesqrt(dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378)));
                                float _3386 = dot(vec3(_566, _569, _572), vec3((-0.0) - _2824, (-0.0) - _2825, (-0.0) - _2826));
                                float _4475 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3389 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                                float _3390 = dot(vec3(_566, _569, _572), vec3(_3382 * _3376, _3382 * _3377, _3382 * _3378));
                                float _4486 = isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0));
                                float _3393 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3397 = ((_3393 * _3393) * (_3375 + (-1.0))) + 1.0;
                                float _3398 = _3335 * _3374;
                                float _3399 = _3398 * _3398;
                                float _3405 = ((1.0 - _3399) * dot(vec3(_566, _569, _572), vec3(_3322, _3323, _3324))) + _3399;
                                float _4497 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                                float _3406 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3407 = 1.0 - _3374;
                                float _3417 = (0.5 / (((_3406 * ((_3389 * _3407) + _3374)) + 9.9999999392252902907785028219223e-09) + (((_3406 * _3407) + _3374) * _3389))) * _3406;
                                float _4508 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3427 = (_3352 * _3329) * (((_3375 * 3.1415927410125732421875) * (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0)))) / ((_3397 * _3397) * ((_3342 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3353 * _3197.y;
                                frontier_phi_78_pred_1 = _3353 * _3197.x;
                                frontier_phi_78_pred_2 = _3427 * _3209.z;
                                frontier_phi_78_pred_3 = _3427 * _3209.y;
                                frontier_phi_78_pred_4 = _3427 * _3209.x;
                                frontier_phi_78_pred_5 = _3353 * _3197.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3435 = frontier_phi_78_pred;
                            _3434 = frontier_phi_78_pred_1;
                            _3433 = frontier_phi_78_pred_2;
                            _3432 = frontier_phi_78_pred_3;
                            _3431 = frontier_phi_78_pred_4;
                            _3436 = frontier_phi_78_pred_5;
                            _3139 = _3434 + _3152;
                            _3140 = _3435 + _3153;
                            _3141 = _3436 + _3154;
                            _3136 = _3431 + _3149;
                            _3137 = _3432 + _3150;
                            _3138 = _3433 + _3151;
                            if (_3156 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3149 = _3136;
                                _3150 = _3137;
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3156;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3141;
                        frontier_phi_72_pred_1 = _3140;
                        frontier_phi_72_pred_2 = _3139;
                        frontier_phi_72_pred_3 = _3138;
                        frontier_phi_72_pred_4 = _3137;
                        frontier_phi_72_pred_5 = _3136;
                    }
                    _2809 = frontier_phi_72_pred;
                    _2807 = frontier_phi_72_pred_1;
                    _2805 = frontier_phi_72_pred_2;
                    _2803 = frontier_phi_72_pred_3;
                    _2801 = frontier_phi_72_pred_4;
                    _2799 = frontier_phi_72_pred_5;
                    uint _2944 = _2943 + 1u;
                    if (_2944 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2937 = _2799;
                        _2938 = _2801;
                        _2939 = _2803;
                        _2940 = _2805;
                        _2941 = _2807;
                        _2942 = _2809;
                        _2943 = _2944;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2809;
                frontier_phi_60_61_ladder_1 = _2807;
                frontier_phi_60_61_ladder_2 = _2803;
                frontier_phi_60_61_ladder_3 = _2801;
                frontier_phi_60_61_ladder_4 = _2799;
                frontier_phi_60_61_ladder_5 = _2805;
            }
            else
            {
                frontier_phi_60_61_ladder = _2695;
                frontier_phi_60_61_ladder_1 = _2693;
                frontier_phi_60_61_ladder_2 = _2689;
                frontier_phi_60_61_ladder_3 = _2687;
                frontier_phi_60_61_ladder_4 = _2685;
                frontier_phi_60_61_ladder_5 = _2691;
            }
            _2798 = frontier_phi_60_61_ladder_4;
            _2800 = frontier_phi_60_61_ladder_3;
            _2802 = frontier_phi_60_61_ladder_2;
            _2804 = frontier_phi_60_61_ladder_5;
            _2806 = frontier_phi_60_61_ladder_1;
            _2808 = frontier_phi_60_61_ladder;
        }
        float _2813 = isnan(1.0) ? _610 : (isnan(_610) ? 1.0 : min(_610, 1.0));
        _2618 = (_2813 * _2804) + _2149;
        _2620 = (_2813 * _2806) + _2151;
        _2622 = (_2813 * _2808) + _2153;
        _2624 = ((_2798 * 0.039999999105930328369140625) * _2813) + _2472;
        _2626 = ((_2800 * 0.039999999105930328369140625) * _2813) + _2474;
        _2628 = ((_2802 * 0.039999999105930328369140625) * _2813) + _2476;
    }
    else
    {
        _2618 = _2149;
        _2620 = _2151;
        _2622 = _2153;
        _2624 = _2472;
        _2626 = _2474;
        _2628 = _2476;
    }
    float _4524 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4535 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4546 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    uint _2648 = _222 + 6u;
    float _2656 = _544 / cbSceneParam._m0[86u].x;
    float _2657 = _545 / cbSceneParam._m0[86u].y;
    vec4 _2671 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2656, _2657, (log2((isnan(cbSceneParam._m0[77u].w) ? _478 : (isnan(_478) ? cbSceneParam._m0[77u].w : min(_478, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2673 = _2671.x;
    float _2674 = _2671.y;
    float _2675 = _2671.z;
    float _2676 = _2671.w;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_478 > cbSceneParam._m0[78u].w)
    {
        float _2710 = isnan(_478) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _478 : min(cbSceneParam._m0[80u].w, _478));
        float _2711 = _2710 / _478;
        float _2722 = _2711 * _529;
        float _2723 = _530 * _2711;
        float _2724 = (-0.0) - _2723;
        float _2726 = _2711 * _531;
        float _2728 = (cbSceneParam._m0[77u].w * _2724) / _2710;
        float _2729 = _2728 + cbSceneParam._m0[79u].w;
        float _2730 = cbSceneParam._m0[79u].w - _2723;
        float _2736 = sqrt(((_2722 * _2722) + (_2723 * _2723)) + (_2726 * _2726));
        float _2739 = (1.0 - (cbSceneParam._m0[77u].w / _2710)) * _2736;
        float _2744 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2746 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2899;
        if (abs((_2724 - _2728) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2899 = ((((_2729 > 0.0) ? exp2(_2744 * _2729) : (2.0 - exp2(_2746 * _2729))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2739;
        }
        else
        {
            float _2859 = 1.0 / cbSceneParam._m0[80u].x;
            float _2860 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : max(_2729, _2730));
            float _2861 = isnan(_2730) ? _2729 : (isnan(_2729) ? _2730 : min(_2729, _2730));
            float _2870 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : min(_2860, 0.0));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            _2899 = ((abs(_2736 / _2724) * cbSceneParam._m0[80u].y) * ((((_2870 - _2871) * 2.0) - ((exp2(_2744 * (isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0)))) - exp2(_2744 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0))))) * _2859)) - ((exp2(_2746 * _2870) - exp2(_2746 * _2871)) * _2859))) + (_2739 * cbSceneParam._m0[80u].z);
        }
        vec4 _2901 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2656, _2657, 1.0), 0.0);
        float _2910 = exp2((_2899 * (-1.44269502162933349609375)) * (1.0 - _2901.w));
        float _2911 = log2(_2910);
        float _2927 = log2(_2676);
        _2748 = (exp2(_2927 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].x)) * _2901.x) / cbSceneParam._m0[78u].x)) + _2673;
        _2750 = (exp2(_2927 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].y)) * _2901.y) / cbSceneParam._m0[78u].y)) + _2674;
        _2752 = (exp2(_2927 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2911 * cbSceneParam._m0[78u].z)) * _2901.z) / cbSceneParam._m0[78u].z)) + _2675;
        _2754 = _2910 * _2676;
    }
    else
    {
        _2748 = _2673;
        _2750 = _2674;
        _2752 = _2675;
        _2754 = _2676;
    }
    float _2766 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2767 = _2766 == 3.0;
    float _2768 = log2(_2754);
    float _2775 = exp2(_2768 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_2618 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _610))) + ((_2624 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1415)) * cbPerFrame._m0[3u].x));
    float _2776 = exp2(_2768 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2620 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _610))) + ((_2626 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1415)) * cbPerFrame._m0[3u].x));
    float _2777 = exp2(_2768 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2622 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _610))) + ((_2628 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1415)) * cbPerFrame._m0[3u].x));
    float _2786 = (_2766 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2786 * (_2767 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.y = _2786 * (_2767 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2750)));
    SV_Target.z = _2786 * (_2767 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2752)));
    SV_Target.w = cbInstanceData._m0[_2648].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2648].w;
}


