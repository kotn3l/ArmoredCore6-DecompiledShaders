#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1057;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _237 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _240 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3389 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3400 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3411 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _255 = _250 + 1u;
    uint _259 = _250 + 2u;
    float _268 = sqrt(((cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x));
    float _269 = _268 * TEXCOORD.z;
    float _270 = _268 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _269) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _270) + cbTextureTilingScale._m0[13u].w));
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _311 = _306.x * cbMtdParam._m0[9u].x;
    float _312 = _306.y * cbMtdParam._m0[9u].y;
    float _313 = _306.z * cbMtdParam._m0[9u].z;
    float _317 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _283.x) * _311;
    float _320 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _283.y) * _312;
    float _323 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _283.z) * _313;
    float _330 = ((_311 - _317) * (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0)))) + _317;
    float _331 = ((_312 - _320) * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) + _320;
    float _332 = ((_313 - _323) * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) + _323;
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _269) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _270) + cbTextureTilingScale._m0[20u].w));
    vec4 _376 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _380 = _376.z;
    float _384 = (_376.x * 2.0) + (-1.0);
    float _385 = (_376.y * 2.0) + (-1.0);
    float _386 = dot(vec2(_384, _385), vec2(_384, _385));
    float _3422 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _391 = sqrt(1.0 - (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))));
    float _396 = _384 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_350.x * 2.0) + (-1.0)));
    float _397 = _385 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_350.y * 2.0) + (-1.0)));
    float _400 = fma(_391, _217, fma(_397, _224, _396 * _210));
    float _403 = fma(_391, _218, fma(_397, _225, _396 * _211));
    float _406 = fma(_391, _219, fma(_397, _226, _396 * _212));
    float _410 = inversesqrt(dot(vec3(_400, _403, _406), vec3(_400, _403, _406)));
    vec4 _446 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _269) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _270) + cbTextureTilingScale._m0[11u].w));
    float _448 = _446.x;
    float _449 = 1.0 - _448;
    float _458 = (cbMtdParam._m0[19u].x + dot(vec4(_410 * _400, _410 * _403, _410 * _406, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_448 - _449) * cbMtdParam._m0[24u].z) + _449) * cbMtdParam._m0[21u].z);
    float _3433 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _466 = (_459 * (cbMtdParam._m0[17u].x - _330)) + _330;
    float _467 = (_459 * (cbMtdParam._m0[17u].y - _331)) + _331;
    float _468 = (_459 * (cbMtdParam._m0[17u].z - _332)) + _332;
    float _473 = (((_350.z - _380) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _380;
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _269) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _270) + cbTextureTilingScale._m0[15u].w));
    float _493 = (_486.x * 2.0) + (-1.0);
    float _494 = (_486.y * 2.0) + (-1.0);
    float _495 = dot(vec2(_493, _494), vec2(_493, _494));
    float _3444 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _503 = ((_486.z - _473) * _459) + _473;
    float _513 = ((sqrt(1.0 - (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) - _391) * _459) + _391;
    float _516 = (((_493 - _396) * _459) + _396) + (cbMtdParam._m0[21u].x * _396);
    float _517 = (((_494 - _397) * _459) + _397) + (cbMtdParam._m0[21u].x * _397);
    float _519 = cbMtdParam._m0[22u].x + _376.w;
    float _522 = fma(_513, _217, fma(_517, _224, _516 * _210));
    float _525 = fma(_513, _218, fma(_517, _225, _516 * _211));
    float _528 = fma(_513, _219, fma(_517, _226, _516 * _212));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    float _533 = _532 * _522;
    float _534 = _532 * _525;
    float _535 = _532 * _528;
    float _3455 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _536 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
    float _3466 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3477 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3488 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _3499 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _554 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _595 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _605 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _595);
    float _606 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _595);
    float _607 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _595);
    float _611 = inversesqrt(dot(vec3(_605, _606, _607), vec3(_605, _606, _607)));
    float _612 = _605 * _611;
    float _613 = _606 * _611;
    float _614 = _607 * _611;
    float _620 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _621 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _642 = fma(_535, cbSceneParam._m0[5u].z, fma(_534, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _533));
    float _645 = fma(_535, cbSceneParam._m0[6u].z, fma(_534, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _533));
    float _648 = fma(_535, cbSceneParam._m0[7u].z, fma(_534, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _533));
    uint _662 = (_250 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _668 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) * cbInstanceData._m0[_662].x;
    float _669 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0)))) * cbInstanceData._m0[_662].y;
    float _670 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * cbInstanceData._m0[_662].z;
    float _3510 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _3532 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
    vec4 _682 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _620, cbSceneParam._m0[86u].y * _621));
    float _686 = ((isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * TEXCOORD_5.w) * _682.x;
    float _687 = dot(vec3(_533, _534, _535), vec3(_612, _613, _614));
    float _690 = _687 * 2.0;
    float _694 = (_690 * _533) - _612;
    float _695 = (_690 * _534) - _613;
    float _696 = (_690 * _535) - _614;
    float _700 = abs(dot(vec3(_612, _613, _614), vec3(_533, _534, _535)));
    float _3543 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _702 = sqrt(_536);
    float _715 = exp2((_702 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_702 * 3.0));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1056;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _781 = fma(_755, cbModelParam._m0[26u].z, fma(_751, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747));
        float _785 = fma(_755, cbModelParam._m0[27u].z, fma(_751, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747));
        float _789 = fma(_755, cbModelParam._m0[28u].z, fma(_751, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747));
        float _814 = _747 + _533;
        float _815 = _751 + _534;
        float _816 = _755 + _535;
        float _826 = fma(_816, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814)) - _781;
        float _827 = fma(_816, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814)) - _785;
        float _828 = fma(_816, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814)) - _789;
        float _832 = inversesqrt(dot(vec3(_826, _827, _828), vec3(_826, _827, _828)));
        float _845 = ((_832 * _826) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_781 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_832 * _827) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_785 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_832 * _828) / cbModelParam._m0[34u].z) + ((((((_789 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_845, _846, _847), 0.0);
        float _884 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_850.x + (-0.5));
        float _886 = _884 * (_850.y + (-0.5));
        float _887 = _884 * (_850.z + (-0.5));
        float _894 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_857.x + (-0.5));
        float _896 = _894 * (_857.y + (-0.5));
        float _897 = _894 * (_857.z + (-0.5));
        float _904 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_864.x + (-0.5));
        float _906 = _904 * (_864.y + (-0.5));
        float _907 = _904 * (_864.z + (-0.5));
        float _914 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_871.x + (-0.5));
        float _916 = _914 * (_871.y + (-0.5));
        float _917 = _914 * (_871.z + (-0.5));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = _885 * 0.5;
        float _922 = _895 * 0.5;
        float _923 = _905 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _938 = (dot(vec3(_533, _534, _535), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _948 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3591 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_950 + 1.0))) + _955) * _918;
        float _965 = _886 * 0.5;
        float _966 = _896 * 0.5;
        float _967 = _906 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_533, _534, _535), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3624 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_992 + 1.0))) + _997) * _919;
        float _1007 = _887 * 0.5;
        float _1008 = _897 * 0.5;
        float _1009 = _907 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_533, _534, _535), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3657 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1034 + 1.0))) + _1039) * _920;
        _1056 = _887;
        _1058 = _886;
        _1059 = _885;
        _1060 = _897;
        _1061 = _896;
        _1062 = _895;
        _1063 = _907;
        _1064 = _906;
        _1065 = _905;
        _1066 = _920;
        _1067 = _919;
        _1068 = _918;
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
    }
    else
    {
        _1056 = _1057;
        _1058 = _1057;
        _1059 = _1057;
        _1060 = _1057;
        _1061 = _1057;
        _1062 = _1057;
        _1063 = _1057;
        _1064 = _1057;
        _1065 = _1057;
        _1066 = _1057;
        _1067 = _1057;
        _1068 = _1057;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
    }
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1096 = fma(_755, cbModelParam._m0[30u].z, fma(_751, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _747));
        float _1100 = fma(_755, cbModelParam._m0[31u].z, fma(_751, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _747));
        float _1104 = fma(_755, cbModelParam._m0[32u].z, fma(_751, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _747));
        float _1127 = _747 + _533;
        float _1128 = _751 + _534;
        float _1129 = _755 + _535;
        float _1139 = fma(_1129, cbModelParam._m0[30u].z, fma(_1128, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1127)) - _1096;
        float _1140 = fma(_1129, cbModelParam._m0[31u].z, fma(_1128, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1127)) - _1100;
        float _1141 = fma(_1129, cbModelParam._m0[32u].z, fma(_1128, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1127)) - _1104;
        float _1145 = inversesqrt(dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141)));
        float _1158 = ((_1145 * _1139) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1096 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1145 * _1140) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1100 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1145 * _1141) / cbModelParam._m0[35u].z) + ((((((_1104 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1158, _1159, _1160), 0.0);
        float _1195 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1162.x + (-0.5));
        float _1197 = _1195 * (_1162.y + (-0.5));
        float _1198 = _1195 * (_1162.z + (-0.5));
        float _1205 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1169.x + (-0.5));
        float _1207 = _1205 * (_1169.y + (-0.5));
        float _1208 = _1205 * (_1169.z + (-0.5));
        float _1215 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1176.x + (-0.5));
        float _1217 = _1215 * (_1176.y + (-0.5));
        float _1218 = _1215 * (_1176.z + (-0.5));
        float _1225 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1183.x + (-0.5));
        float _1227 = _1225 * (_1183.y + (-0.5));
        float _1228 = _1225 * (_1183.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_533, _534, _535), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3720 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1259 + 1.0))) + _1264) * _1229;
        float _1274 = _1197 * 0.5;
        float _1275 = _1207 * 0.5;
        float _1276 = _1217 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_533, _534, _535), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3753 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1301 + 1.0))) + _1306) * _1230;
        float _1316 = _1198 * 0.5;
        float _1317 = _1208 * 0.5;
        float _1318 = _1218 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_533, _534, _535), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3786 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1343 + 1.0))) + _1348) * _1231;
        _1365 = _1198;
        _1366 = _1197;
        _1367 = _1196;
        _1368 = _1208;
        _1369 = _1207;
        _1370 = _1206;
        _1371 = _1218;
        _1372 = _1217;
        _1373 = _1216;
        _1374 = _1231;
        _1375 = _1230;
        _1376 = _1229;
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1379 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1057;
        _1366 = _1057;
        _1367 = _1057;
        _1368 = _1057;
        _1369 = _1057;
        _1370 = _1057;
        _1371 = _1057;
        _1372 = _1057;
        _1373 = _1057;
        _1374 = _1057;
        _1375 = _1057;
        _1376 = _1057;
        _1377 = 0.0;
        _1378 = 0.0;
        _1379 = 0.0;
    }
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1069)) + _1069;
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1070)) + _1070;
    float _1391 = (cbModelParam._m0[1u].x * (_1379 - _1071)) + _1071;
    float _1412 = fma(_1391, cbSceneParam._m0[89u].z, fma(_1390, cbSceneParam._m0[89u].y, _1389 * cbSceneParam._m0[89u].x));
    float _1415 = fma(_1391, cbSceneParam._m0[90u].z, fma(_1390, cbSceneParam._m0[90u].y, _1389 * cbSceneParam._m0[90u].x));
    float _1418 = fma(_1391, cbSceneParam._m0[91u].z, fma(_1390, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1389));
    float _1433 = _694 * 0.5;
    float _1434 = _695 * 0.5;
    float _1435 = _696 * 0.5;
    float _1436 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1367, _1370, _1373, _1376));
    float _1439 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1442 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1476;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1449 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1056, _1060, _1063, _1066));
        float _1453 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1457 = dot(vec4(_1433, _1434, _1435, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1464 = dot(vec4(cbModelParam._m0[39u]), vec4(_1433, _1434, _1435, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1464) ? 0.0 : (isnan(0.0) ? _1464 : max(0.0, _1464))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1487;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1478 = dot(vec4(cbModelParam._m0[40u]), vec4(_1433, _1434, _1435, 1.0));
        _1487 = dot(vec3(isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1487 = 1.0;
    }
    float _1491 = (_1487 * cbModelParam._m0[1u].x) + (_1476 * (1.0 - cbModelParam._m0[1u].x));
    float _1501 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _536);
    float _1502 = isnan(_1501) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1501 : min(cbModelParam._m0[25u].z, _1501));
    float _1583;
    float _1585;
    float _1587;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1550 = fma(_755, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747)) + cbModelParam._m0[13u].w;
        float _1554 = fma(_755, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747)) + cbModelParam._m0[14u].w;
        float _1558 = fma(_755, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747)) + cbModelParam._m0[15u].w;
        float _1561 = fma(_696, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694));
        float _1564 = fma(_696, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694));
        float _1567 = fma(_696, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694));
        float _1595;
        if (_1561 > 0.0)
        {
            _1595 = abs((1.0 - _1550) / _1561);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1550 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1595 = frontier_phi_14_12_ladder;
        }
        float _1819;
        if (_1564 > 0.0)
        {
            _1819 = abs((1.0 - _1554) / _1564);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1554 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1819 = frontier_phi_23_19_ladder;
        }
        float _2065;
        if (_1567 > 0.0)
        {
            _2065 = abs((1.0 - _1558) / _1567);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1558 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2065 = frontier_phi_35_30_ladder;
        }
        float _2067 = isnan(_1819) ? _1595 : (isnan(_1595) ? _1819 : min(_1595, _1819));
        float _2068 = isnan(_2065) ? _2067 : (isnan(_2067) ? _2065 : min(_2067, _2065));
        float _2072 = (_2068 * _1561) + _1550;
        float _2073 = (_2068 * _1564) + _1554;
        float _2074 = (_2068 * _1567) + _1558;
        float _2075 = _2068 * 9.9999997473787516355514526367188e-05;
        float _2077 = (-1.0) - _2075;
        float _2079 = _2075 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2074 > _2079) || ((_2074 < _2077) || ((_2073 > _2079) || ((_2073 < _2077) || ((_2072 < _2077) || (_2072 > _2079))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2198 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2074, cbModelParam._m0[9u].z, fma(_2073, cbModelParam._m0[9u].y, _2072 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2074, cbModelParam._m0[10u].z, fma(_2073, cbModelParam._m0[10u].y, _2072 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2074, cbModelParam._m0[11u].z, fma(_2073, cbModelParam._m0[11u].y, _2072 * cbModelParam._m0[11u].x))), _1502);
            frontier_phi_13_35_ladder = _2198.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2198.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2198.x * cbModelParam._m0[1u].y;
        }
        _1583 = frontier_phi_13_35_ladder_2;
        _1585 = frontier_phi_13_35_ladder_1;
        _1587 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_694, _695, _696), _1502);
        _1583 = _1571.x * cbModelParam._m0[1u].y;
        _1585 = _1571.y * cbModelParam._m0[1u].y;
        _1587 = _1571.z * cbModelParam._m0[1u].y;
    }
    float _1591 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _536);
    float _1592 = isnan(_1591) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1591 : min(cbModelParam._m0[25u].w, _1591));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1646 = fma(_755, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747)) + cbModelParam._m0[21u].w;
        float _1650 = fma(_755, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747)) + cbModelParam._m0[22u].w;
        float _1654 = fma(_755, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747)) + cbModelParam._m0[23u].w;
        float _1657 = fma(_696, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694));
        float _1660 = fma(_696, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694));
        float _1663 = fma(_696, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694));
        float _1824;
        if (_1657 > 0.0)
        {
            _1824 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1824 = frontier_phi_25_21_ladder;
        }
        float _2092;
        if (_1660 > 0.0)
        {
            _2092 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2092 = frontier_phi_37_32_ladder;
        }
        float _2297;
        if (_1663 > 0.0)
        {
            _2297 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2297 = frontier_phi_46_43_ladder;
        }
        float _2299 = isnan(_2092) ? _1824 : (isnan(_1824) ? _2092 : min(_1824, _2092));
        float _2300 = isnan(_2297) ? _2299 : (isnan(_2299) ? _2297 : min(_2299, _2297));
        float _2304 = (_2300 * _1657) + _1646;
        float _2305 = (_2300 * _1660) + _1650;
        float _2306 = (_2300 * _1663) + _1654;
        float _2307 = _2300 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2307;
        float _2310 = _2307 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2306 > _2310) || ((_2306 < _2308) || ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 < _2308) || (_2304 > _2310))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2505 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2306, cbModelParam._m0[17u].z, fma(_2305, cbModelParam._m0[17u].y, _2304 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2306, cbModelParam._m0[18u].z, fma(_2305, cbModelParam._m0[18u].y, _2304 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2306, cbModelParam._m0[19u].z, fma(_2305, cbModelParam._m0[19u].y, _2304 * cbModelParam._m0[19u].x))), _1592);
            frontier_phi_22_46_ladder = _2505.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2505.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2505.x * cbModelParam._m0[1u].z;
        }
        _1682 = frontier_phi_22_46_ladder_2;
        _1684 = frontier_phi_22_46_ladder_1;
        _1686 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_694, _695, _696), _1592);
        _1682 = _1666.x * cbModelParam._m0[1u].z;
        _1684 = _1666.y * cbModelParam._m0[1u].z;
        _1686 = _1666.z * cbModelParam._m0[1u].z;
    }
    float _1698 = ((((1.0 - _715) * ((_702 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_715 * _702)) * _686;
    float _1699 = _1698 * ((cbModelParam._m0[1u].w * (_1682 - _1583)) + _1583);
    float _1700 = _1698 * ((cbModelParam._m0[1u].w * (_1684 - _1585)) + _1585);
    float _1701 = _1698 * ((cbModelParam._m0[1u].w * (_1686 - _1587)) + _1587);
    float _1704 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1700, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1707 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1700, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1710 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1700, cbSceneParam._m0[91u].y, _1699 * cbSceneParam._m0[91u].x));
    vec4 _1718 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_620, _621));
    float _1720 = _1718.w;
    float _1732 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1720);
    float _1733 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1720);
    float _1734 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1720);
    uvec4 _1738 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _1740 = _1738.x * 14u;
    uint _1741 = _1740 + 13u;
    float _1748 = _686 + (-1.0);
    float _1753 = (cbLight._m0[_1741].x * _1748) + 1.0;
    float _1754 = (cbLight._m0[_1741].y * _1748) + 1.0;
    float _1755 = (cbLight._m0[_1741].z * _1748) + 1.0;
    float _1756 = (cbLight._m0[_1741].w * _1748) + 1.0;
    uint _1757 = _1740 + 5u;
    float _1763 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    uint _1767 = _1740 + 4u;
    float _1777 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1781 = _1740 | 1u;
    float _1792 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_533, _534, _535));
    float _1795 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_533, _534, _535));
    float _3922 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _3933 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1800 = (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * 0.3183098733425140380859375;
    float _1802 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * 0.3183098733425140380859375;
    float _1809 = ((cbLight._m0[_1757].x * _1763) * _1802) + (((cbLight._m0[_1767].x * _1732) * _1777) * _1800);
    float _1810 = ((_1763 * cbLight._m0[_1757].y) * _1802) + (((cbLight._m0[_1767].y * _1733) * _1777) * _1800);
    float _1811 = ((_1763 * cbLight._m0[_1757].z) * _1802) + (((cbLight._m0[_1767].z * _1734) * _1777) * _1800);
    uvec4 _1816 = floatBitsToUint(cbLight._m0[_1740 + 12u]);
    bool _1818 = _1816.x == 0u;
    float _1829;
    float _1831;
    float _1833;
    if (_1818)
    {
        _1829 = _1809;
        _1831 = _1810;
        _1833 = _1811;
    }
    else
    {
        uint _1837 = _1740 + 6u;
        float _1853 = (dot(vec3(cbLight._m0[_1740 + 2u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _1854 = _1853 * _1853;
        float _3944 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1856 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _1829 = (((cbLight._m0[_1837].x * 0.3183098733425140380859375) * _1855) * _1856) + _1809;
        _1831 = (((cbLight._m0[_1837].y * 0.3183098733425140380859375) * _1855) * _1856) + _1810;
        _1833 = (((cbLight._m0[_1837].z * 0.3183098733425140380859375) * _1855) * _1856) + _1811;
    }
    bool _1836 = _1816.y == 0u;
    float _1874;
    float _1876;
    float _1878;
    if (_1836)
    {
        _1874 = _1829;
        _1876 = _1831;
        _1878 = _1833;
    }
    else
    {
        uint _2036 = _1740 + 7u;
        float _2052 = (dot(vec3(cbLight._m0[_1740 + 3u].xyz), vec3(_533, _534, _535)) * 0.5) + 0.5;
        float _2053 = _2052 * _2052;
        float _3960 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _2055 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _1874 = (((cbLight._m0[_2036].x * 0.3183098733425140380859375) * _2054) * _2055) + _1829;
        _1876 = (((cbLight._m0[_2036].y * 0.3183098733425140380859375) * _2054) * _2055) + _1831;
        _1878 = (((cbLight._m0[_2036].z * 0.3183098733425140380859375) * _2054) * _2055) + _1833;
    }
    uint _1881 = _1740 + 8u;
    float _1894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1740].w)) * _536) * 0.949999988079071044921875);
    float _1895 = _1894 * _1894;
    float _1896 = cbLight._m0[_1740].x + _612;
    float _1897 = cbLight._m0[_1740].y + _613;
    float _1898 = cbLight._m0[_1740].z + _614;
    float _1902 = inversesqrt(dot(vec3(_1896, _1897, _1898), vec3(_1896, _1897, _1898)));
    float _1903 = _1902 * _1896;
    float _1904 = _1902 * _1897;
    float _1905 = _1902 * _1898;
    float _1906 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_1740].xyz));
    float _3976 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _1910 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1911 = dot(vec3(_533, _534, _535), vec3(_1903, _1904, _1905));
    float _3998 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1915 = dot(vec3(cbLight._m0[_1740].xyz), vec3(_1903, _1904, _1905));
    float _4009 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1919 = _1895 * _1895;
    float _1923 = ((_1914 * _1914) * (_1919 + (-1.0))) + 1.0;
    float _1934 = (exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1935 = 1.0 - _1895;
    float _1946 = (0.5 / (((_1910 * ((_1909 * _1935) + _1895)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _1935) + _1895) * _1909))) * _1909;
    float _4020 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1948 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1919 / ((_1923 * _1923) * 3.141590118408203125));
    uint _1962 = _1740 + 9u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _536) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1781].x + _612;
    float _1976 = cbLight._m0[_1781].y + _613;
    float _1977 = cbLight._m0[_1781].z + _614;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_1781].xyz));
    float _4031 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _1989 = dot(vec3(_533, _534, _535), vec3(_1982, _1983, _1984));
    float _4042 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_1982, _1983, _1984));
    float _4053 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1974 * _1974;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2010 = (exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2011 = 1.0 - _1974;
    float _2021 = (0.5 / (((_1910 * ((_1988 * _2011) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _2011) + _1974) * _1988))) * _1988;
    float _4064 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2023 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    float _2033 = (((_2010 * cbLight._m0[_1962].x) * _2023) * _1763) + ((((cbLight._m0[_1881].x * _1732) * _1934) * _1948) * _1777);
    float _2034 = (((_2010 * cbLight._m0[_1962].y) * _2023) * _1763) + ((((cbLight._m0[_1881].y * _1733) * _1934) * _1948) * _1777);
    float _2035 = (((_2010 * cbLight._m0[_1962].z) * _2023) * _1763) + ((((cbLight._m0[_1881].z * _1734) * _1934) * _1948) * _1777);
    float _2097;
    float _2099;
    float _2101;
    if (_1818)
    {
        _2097 = _2033;
        _2099 = _2034;
        _2101 = _2035;
    }
    else
    {
        uint _2103 = _1740 + 2u;
        uint _2107 = _1740 + 10u;
        float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2103].w)) * _536) * 0.949999988079071044921875);
        float _2122 = _2121 * _2121;
        float _2123 = cbLight._m0[_2103].x + _612;
        float _2124 = cbLight._m0[_2103].y + _613;
        float _2125 = cbLight._m0[_2103].z + _614;
        float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
        float _2130 = _2129 * _2123;
        float _2131 = _2129 * _2124;
        float _2132 = _2129 * _2125;
        float _2133 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2103].xyz));
        float _4075 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2137 = dot(vec3(_533, _534, _535), vec3(_2130, _2131, _2132));
        float _4086 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2140 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _2141 = dot(vec3(cbLight._m0[_2103].xyz), vec3(_2130, _2131, _2132));
        float _4097 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
        float _2145 = _2122 * _2122;
        float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
        float _2158 = (exp2(log2(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2159 = 1.0 - _2122;
        float _2169 = (0.5 / (((_1910 * ((_2136 * _2159) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _2159) + _2122) * _2136))) * _2136;
        float _4108 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        float _2171 = (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
        float _2172 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _2097 = (((_2158 * cbLight._m0[_2107].x) * _2171) * _2172) + _2033;
        _2099 = (((_2158 * cbLight._m0[_2107].y) * _2171) * _2172) + _2034;
        _2101 = (((_2158 * cbLight._m0[_2107].z) * _2171) * _2172) + _2035;
    }
    float _2207;
    float _2209;
    float _2211;
    if (_1836)
    {
        _2207 = _2097;
        _2209 = _2099;
        _2211 = _2101;
    }
    else
    {
        uint _2218 = _1740 + 3u;
        uint _2222 = _1740 + 11u;
        float _2236 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _536) * 0.949999988079071044921875);
        float _2237 = _2236 * _2236;
        float _2238 = cbLight._m0[_2218].x + _612;
        float _2239 = cbLight._m0[_2218].y + _613;
        float _2240 = cbLight._m0[_2218].z + _614;
        float _2244 = inversesqrt(dot(vec3(_2238, _2239, _2240), vec3(_2238, _2239, _2240)));
        float _2245 = _2244 * _2238;
        float _2246 = _2244 * _2239;
        float _2247 = _2244 * _2240;
        float _2248 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_2218].xyz));
        float _4124 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2251 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2252 = dot(vec3(_533, _534, _535), vec3(_2245, _2246, _2247));
        float _4135 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _2256 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2245, _2246, _2247));
        float _4146 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2260 = _2237 * _2237;
        float _2264 = ((_2255 * _2255) * (_2260 + (-1.0))) + 1.0;
        float _2273 = (exp2(log2(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2274 = 1.0 - _2237;
        float _2284 = (0.5 / (((_1910 * ((_2251 * _2274) + _2237)) + 9.9999999392252902907785028219223e-09) + (((_1910 * _2274) + _2237) * _2251))) * _2251;
        float _4157 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2286 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2260 / ((_2264 * _2264) * 3.141590118408203125));
        float _2287 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _2207 = (((_2273 * cbLight._m0[_2222].x) * _2286) * _2287) + _2097;
        _2209 = (((_2273 * cbLight._m0[_2222].y) * _2286) * _2287) + _2099;
        _2211 = (((_2273 * cbLight._m0[_2222].z) * _2286) * _2287) + _2101;
    }
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    if (_1738.y == 0u)
    {
        float _2362 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2362;
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2362;
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2362;
        uvec4 _2377 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2378 = _2377.x;
        uint _2389 = uint((float(_2377.y) * floor(float(uint(cbSceneParam._m0[85u].y * _621) / _2378))) + floor(float(uint(cbSceneParam._m0[85u].x * _620) / _2378)));
        float _2399 = (log2(_2365 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2400 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        uint _2403 = uint(isnan(14.0) ? _2400 : (isnan(_2400) ? 14.0 : min(_2400, 14.0)));
        uvec4 _2408 = texelFetch(g_lightClusterGridBuffer, int(((_2403 << 2u) + (_2389 << 6u)) >> 2u));
        uint _2409 = _2408.x;
        uint _2410 = _2377.z;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        if (((((1u << ((_2410 >> 4u) & 15u)) + 4294967295u) & _2409) == 0u) || ((_2410 & 240u) == 0u))
        {
            _2510 = 0.0;
            _2512 = 0.0;
            _2514 = 0.0;
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
        }
        else
        {
            float _2511;
            float _2513;
            float _2515;
            float _2517;
            float _2519;
            float _2521;
            float _2655 = 0.0;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            uint _2661 = 0u;
            uint _2670;
            bool _2671;
            for (;;)
            {
                _2670 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2661 << 2u)) >> 2u)).x;
                _2671 = _2670 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2671)
                {
                    frontier_phi_61_pred = _2655;
                    frontier_phi_61_pred_1 = _2660;
                    frontier_phi_61_pred_2 = _2659;
                    frontier_phi_61_pred_3 = _2658;
                    frontier_phi_61_pred_4 = _2657;
                    frontier_phi_61_pred_5 = _2656;
                }
                else
                {
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    uint _2785;
                    _2779 = _2655;
                    _2780 = _2656;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2670;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    for (;;)
                    {
                        uint _2789 = uint(findLSB(_2785)) + (_2661 << 5u);
                        uint _2786 = (_2785 + 4294967295u) & _2785;
                        uint _2791 = _2789 * 48u;
                        vec4 _2805 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2791)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 3u)).x));
                        uint _2811 = (_2789 * 48u) + 4u;
                        vec4 _2824 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 3u)).x));
                        uint _2830 = (_2789 * 48u) + 8u;
                        vec3 _2841 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2830)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 2u)).x));
                        float _2845 = _2805.x - _2363;
                        float _2846 = _2805.y - _2364;
                        float _2847 = _2805.z - _2365;
                        float _2848 = dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847));
                        float _2851 = inversesqrt(_2848);
                        float _2852 = _2851 * _2845;
                        float _2853 = _2851 * _2846;
                        float _2854 = _2851 * _2847;
                        float _2855 = dot(vec3(_642, _645, _648), vec3(_2852, _2853, _2854));
                        float _2860 = 1.0 - (_2848 * _2805.w);
                        float _4183 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2861 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                        float _2862 = sqrt(_2848) * _2824.w;
                        float _2865 = 1.39999997615814208984375 / (_2862 + 1.39999997615814208984375);
                        float _2866 = _2865 * _2865;
                        float _2869 = ((1.0 - _2866) * _2855) + _2866;
                        float _2872 = _2862 * _2862;
                        float _2876 = ((isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0))) * _2861) / ((_2872 * 0.699999988079071044921875) + 1.0);
                        float _2880 = (-0.0) - _2363;
                        float _2881 = (-0.0) - _2364;
                        float _2882 = (-0.0) - _2365;
                        float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
                        float _2887 = _2886 * _2880;
                        float _2888 = _2886 * _2881;
                        float _2889 = _2886 * _2882;
                        float _2897 = exp2(log2(1.0 / ((_2872 * 3.5) + 5.0)) * 0.25);
                        float _2898 = 1.0 - _702;
                        float _2905 = sqrt(1.0 - ((1.0 - (_2898 * _2898)) * (1.0 - (_2897 * _2897))));
                        float _2906 = _2905 * _2905;
                        float _2907 = _2906 * _2906;
                        float _2908 = _2887 + _2852;
                        float _2909 = _2888 + _2853;
                        float _2910 = _2889 + _2854;
                        float _2914 = inversesqrt(dot(vec3(_2908, _2909, _2910), vec3(_2908, _2909, _2910)));
                        float _2918 = dot(vec3(_642, _645, _648), vec3(_2887, _2888, _2889));
                        float _4199 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2921 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                        float _2922 = dot(vec3(_642, _645, _648), vec3(_2914 * _2908, _2914 * _2909, _2914 * _2910));
                        float _4210 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2925 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2929 = ((_2925 * _2925) * (_2907 + (-1.0))) + 1.0;
                        float _2930 = _2865 * _2906;
                        float _2931 = _2930 * _2930;
                        float _2934 = ((1.0 - _2931) * _2855) + _2931;
                        float _4221 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2935 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
                        float _2936 = 1.0 - _2906;
                        float _2946 = (0.5 / (((_2935 * ((_2921 * _2936) + _2906)) + 9.9999999392252902907785028219223e-09) + (((_2935 * _2936) + _2906) * _2921))) * _2935;
                        float _4232 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2957 = (((_2907 * 3.1415927410125732421875) * (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) / ((_2929 * _2929) * ((_2872 * 2.1991131305694580078125) + 3.141590118408203125))) * _2861;
                        _2714 = (_2876 * _2824.x) + _2782;
                        _2715 = (_2876 * _2824.y) + _2783;
                        _2716 = (_2876 * _2824.z) + _2784;
                        _2711 = (_2957 * _2841.x) + _2779;
                        _2712 = (_2957 * _2841.y) + _2780;
                        _2713 = (_2957 * _2841.z) + _2781;
                        if (_2786 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2786;
                        }
                    }
                    frontier_phi_61_pred = _2711;
                    frontier_phi_61_pred_1 = _2716;
                    frontier_phi_61_pred_2 = _2715;
                    frontier_phi_61_pred_3 = _2714;
                    frontier_phi_61_pred_4 = _2713;
                    frontier_phi_61_pred_5 = _2712;
                }
                _2511 = frontier_phi_61_pred;
                _2521 = frontier_phi_61_pred_1;
                _2519 = frontier_phi_61_pred_2;
                _2517 = frontier_phi_61_pred_3;
                _2515 = frontier_phi_61_pred_4;
                _2513 = frontier_phi_61_pred_5;
                uint _2662 = _2661 + 1u;
                if (_2662 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2655 = _2511;
                    _2656 = _2513;
                    _2657 = _2515;
                    _2658 = _2517;
                    _2659 = _2519;
                    _2660 = _2521;
                    _2661 = _2662;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2510 = _2511;
            _2512 = _2513;
            _2514 = _2515;
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
        }
        uvec4 _2524 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2525 = _2524.z;
        uint _2527 = (_2525 >> 8u) & 15u;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        if (((4294967295u << _2527) & _2409) == 0u)
        {
            _2623 = _2510;
            _2625 = _2512;
            _2627 = _2514;
            _2629 = _2516;
            _2631 = _2518;
            _2633 = _2520;
        }
        else
        {
            float _2648 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
            float _2649 = _2648 * _2363;
            float _2650 = _2648 * _2364;
            float _2651 = _2648 * _2365;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2527 < ((_2525 >> 12u) & 15u))
            {
                float _2624;
                float _2626;
                float _2628;
                float _2630;
                float _2632;
                float _2634;
                float _2762 = _2510;
                float _2763 = _2512;
                float _2764 = _2514;
                float _2765 = _2516;
                float _2766 = _2518;
                float _2767 = _2520;
                uint _2768 = _2527;
                uint _2777;
                bool _2778;
                for (;;)
                {
                    _2777 = texelFetch(g_lightClassification, int((((_2403 << 5u) + (_2389 << 9u)) + (_2768 << 2u)) >> 2u)).x;
                    _2778 = _2777 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2778)
                    {
                        frontier_phi_67_pred = _2765;
                        frontier_phi_67_pred_1 = _2766;
                        frontier_phi_67_pred_2 = _2767;
                        frontier_phi_67_pred_3 = _2764;
                        frontier_phi_67_pred_4 = _2763;
                        frontier_phi_67_pred_5 = _2762;
                    }
                    else
                    {
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _2975 = _2762;
                        float _2976 = _2763;
                        float _2977 = _2764;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        float _2980 = _2767;
                        uint _2981 = _2777;
                        uint _2982;
                        vec4 _3007;
                        float _3008;
                        vec4 _3023;
                        vec3 _3035;
                        vec4 _3050;
                        vec4 _3065;
                        float _3111;
                        bool _3112;
                        for (;;)
                        {
                            uint _2992 = ((_2768 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2981));
                            _2982 = (_2981 + 4294967295u) & _2981;
                            uint _2994 = _2992 * 40u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            _3008 = _3007.w;
                            uint _3010 = (_2992 * 40u) + 4u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3025 = (_2992 * 40u) + 8u;
                            _3035 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x));
                            uint _3037 = (_2992 * 40u) + 16u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3052 = (_2992 * 40u) + 20u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3067 = (_2992 * 40u) + 24u;
                            vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3086 = (_2992 * 40u) + 28u;
                            vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            _3111 = fma(_2365, _3099.z, fma(_2364, _3099.y, _3099.x * _2363)) + _3099.w;
                            _3112 = !((fma(_2365, _3080.z, fma(_2364, _3080.y, _3080.x * _2363)) + _3080.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3112)
                            {
                                float _3139 = _3007.x - _2363;
                                float _3140 = _3007.y - _2364;
                                float _3141 = _3007.z - _2365;
                                float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                                float _3145 = inversesqrt(_3142);
                                float _3146 = _3145 * _3139;
                                float _3147 = _3145 * _3140;
                                float _3148 = _3145 * _3141;
                                float _3152 = 1.0 - (_3142 / (_3008 * _3008));
                                float _4243 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3153 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3157 = sqrt(_3142) * _3023.w;
                                float _3159 = 1.39999997615814208984375 / (_3157 + 1.39999997615814208984375);
                                float _3160 = _3159 * _3159;
                                float _3163 = ((1.0 - _3160) * dot(vec3(_3146, _3147, _3148), vec3(_642, _645, _648))) + _3160;
                                float _3166 = _3157 * _3157;
                                float _3170 = (fma(_2365, _3050.z, fma(_2364, _3050.y, _3050.x * _2363)) + _3050.w) / _3111;
                                float _3171 = (fma(_2365, _3065.z, fma(_2364, _3065.y, _3065.x * _2363)) + _3065.w) / _3111;
                                float _3175 = 1.0 - dot(vec2(_3170, _3171), vec2(_3170, _3171));
                                float _4259 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3177 = _3176 * (((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3153) / ((_3166 * 0.699999988079071044921875) + 1.0));
                                float _3189 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                                float _3190 = 1.0 - _702;
                                float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                                float _3198 = _3197 * _3197;
                                float _3199 = _3198 * _3198;
                                float _3200 = _3146 - _2649;
                                float _3201 = _3147 - _2650;
                                float _3202 = _3148 - _2651;
                                float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                                float _3210 = dot(vec3(_642, _645, _648), vec3((-0.0) - _2649, (-0.0) - _2650, (-0.0) - _2651));
                                float _4270 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                                float _3213 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3214 = dot(vec3(_642, _645, _648), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                                float _4281 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3217 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                                float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                                float _3222 = _3159 * _3198;
                                float _3223 = _3222 * _3222;
                                float _3229 = ((1.0 - _3223) * dot(vec3(_642, _645, _648), vec3(_3146, _3147, _3148))) + _3223;
                                float _4292 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                                float _3230 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                                float _3231 = 1.0 - _3198;
                                float _3241 = (0.5 / (((_3230 * ((_3213 * _3231) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3230 * _3231) + _3198) * _3213))) * _3230;
                                float _4303 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3251 = (_3176 * _3153) * (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) / ((_3221 * _3221) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3251 * _3035.x;
                                frontier_phi_73_pred_1 = _3251 * _3035.y;
                                frontier_phi_73_pred_2 = _3177 * _3023.z;
                                frontier_phi_73_pred_3 = _3177 * _3023.y;
                                frontier_phi_73_pred_4 = _3177 * _3023.x;
                                frontier_phi_73_pred_5 = _3251 * _3035.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3255 = frontier_phi_73_pred;
                            _3256 = frontier_phi_73_pred_1;
                            _3260 = frontier_phi_73_pred_2;
                            _3259 = frontier_phi_73_pred_3;
                            _3258 = frontier_phi_73_pred_4;
                            _3257 = frontier_phi_73_pred_5;
                            _2965 = _3258 + _2978;
                            _2966 = _3259 + _2979;
                            _2967 = _3260 + _2980;
                            _2962 = _3255 + _2975;
                            _2963 = _3256 + _2976;
                            _2964 = _3257 + _2977;
                            if (_2982 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2982;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2965;
                        frontier_phi_67_pred_1 = _2966;
                        frontier_phi_67_pred_2 = _2967;
                        frontier_phi_67_pred_3 = _2964;
                        frontier_phi_67_pred_4 = _2963;
                        frontier_phi_67_pred_5 = _2962;
                    }
                    _2630 = frontier_phi_67_pred;
                    _2632 = frontier_phi_67_pred_1;
                    _2634 = frontier_phi_67_pred_2;
                    _2628 = frontier_phi_67_pred_3;
                    _2626 = frontier_phi_67_pred_4;
                    _2624 = frontier_phi_67_pred_5;
                    uint _2769 = _2768 + 1u;
                    if (_2769 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2762 = _2624;
                        _2763 = _2626;
                        _2764 = _2628;
                        _2765 = _2630;
                        _2766 = _2632;
                        _2767 = _2634;
                        _2768 = _2769;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2632;
                frontier_phi_55_56_ladder_1 = _2634;
                frontier_phi_55_56_ladder_2 = _2630;
                frontier_phi_55_56_ladder_3 = _2628;
                frontier_phi_55_56_ladder_4 = _2626;
                frontier_phi_55_56_ladder_5 = _2624;
            }
            else
            {
                frontier_phi_55_56_ladder = _2518;
                frontier_phi_55_56_ladder_1 = _2520;
                frontier_phi_55_56_ladder_2 = _2516;
                frontier_phi_55_56_ladder_3 = _2514;
                frontier_phi_55_56_ladder_4 = _2512;
                frontier_phi_55_56_ladder_5 = _2510;
            }
            _2623 = frontier_phi_55_56_ladder_5;
            _2625 = frontier_phi_55_56_ladder_4;
            _2627 = frontier_phi_55_56_ladder_3;
            _2629 = frontier_phi_55_56_ladder_2;
            _2631 = frontier_phi_55_56_ladder;
            _2633 = frontier_phi_55_56_ladder_1;
        }
        float _2638 = isnan(1.0) ? _686 : (isnan(_686) ? 1.0 : min(_686, 1.0));
        _2422 = (_2638 * _2629) + _1874;
        _2424 = (_2638 * _2631) + _1876;
        _2426 = (_2638 * _2633) + _1878;
        _2428 = ((_2623 * 0.039999999105930328369140625) * _2638) + _2207;
        _2430 = ((_2625 * 0.039999999105930328369140625) * _2638) + _2209;
        _2432 = ((_2627 * 0.039999999105930328369140625) * _2638) + _2211;
    }
    else
    {
        _2422 = _1874;
        _2424 = _1876;
        _2426 = _1878;
        _2428 = _2207;
        _2430 = _2209;
        _2432 = _2211;
    }
    float _4319 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4330 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4341 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    uint _2452 = _250 + 6u;
    float _2460 = _620 / cbSceneParam._m0[86u].x;
    float _2461 = _621 / cbSceneParam._m0[86u].y;
    vec4 _2475 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2460, _2461, (log2((isnan(cbSceneParam._m0[77u].w) ? _554 : (isnan(_554) ? cbSceneParam._m0[77u].w : min(_554, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2477 = _2475.x;
    float _2478 = _2475.y;
    float _2479 = _2475.z;
    float _2480 = _2475.w;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    if (_554 > cbSceneParam._m0[78u].w)
    {
        float _2535 = isnan(_554) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _554 : min(cbSceneParam._m0[80u].w, _554));
        float _2536 = _2535 / _554;
        float _2547 = _2536 * _605;
        float _2548 = _606 * _2536;
        float _2549 = (-0.0) - _2548;
        float _2551 = _2536 * _607;
        float _2553 = (cbSceneParam._m0[77u].w * _2549) / _2535;
        float _2554 = _2553 + cbSceneParam._m0[79u].w;
        float _2555 = cbSceneParam._m0[79u].w - _2548;
        float _2561 = sqrt(((_2547 * _2547) + (_2548 * _2548)) + (_2551 * _2551));
        float _2564 = (1.0 - (cbSceneParam._m0[77u].w / _2535)) * _2561;
        float _2569 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2571 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2724;
        if (abs((_2549 - _2553) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2724 = ((((_2554 > 0.0) ? exp2(_2569 * _2554) : (2.0 - exp2(_2571 * _2554))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2564;
        }
        else
        {
            float _2684 = 1.0 / cbSceneParam._m0[80u].x;
            float _2685 = isnan(_2555) ? _2554 : (isnan(_2554) ? _2555 : max(_2554, _2555));
            float _2686 = isnan(_2555) ? _2554 : (isnan(_2554) ? _2555 : min(_2554, _2555));
            float _2695 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : min(_2685, 0.0));
            float _2696 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : min(_2686, 0.0));
            _2724 = ((abs(_2561 / _2549) * cbSceneParam._m0[80u].y) * ((((_2695 - _2696) * 2.0) - ((exp2(_2569 * (isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0)))) - exp2(_2569 * (isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0))))) * _2684)) - ((exp2(_2571 * _2695) - exp2(_2571 * _2696)) * _2684))) + (_2564 * cbSceneParam._m0[80u].z);
        }
        vec4 _2726 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2460, _2461, 1.0), 0.0);
        float _2735 = exp2((_2724 * (-1.44269502162933349609375)) * (1.0 - _2726.w));
        float _2736 = log2(_2735);
        float _2752 = log2(_2480);
        _2573 = (exp2(_2752 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].x)) * _2726.x) / cbSceneParam._m0[78u].x)) + _2477;
        _2575 = (exp2(_2752 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].y)) * _2726.y) / cbSceneParam._m0[78u].y)) + _2478;
        _2577 = (exp2(_2752 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2736 * cbSceneParam._m0[78u].z)) * _2726.z) / cbSceneParam._m0[78u].z)) + _2479;
        _2579 = _2735 * _2480;
    }
    else
    {
        _2573 = _2477;
        _2575 = _2478;
        _2577 = _2479;
        _2579 = _2480;
    }
    float _2591 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2592 = _2591 == 3.0;
    float _2593 = log2(_2579);
    float _2600 = exp2(_2593 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2422 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _686))) + ((_2428 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1491)) * cbPerFrame._m0[3u].x));
    float _2601 = exp2(_2593 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2424 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _686))) + ((_2430 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1491)) * cbPerFrame._m0[3u].x));
    float _2602 = exp2(_2593 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2426 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _686))) + ((_2432 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1491)) * cbPerFrame._m0[3u].x));
    float _2611 = (_2591 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2611 * (_2592 ? _2600 : (_2600 + (cbSceneParam._m0[72u].w * _2573)));
    SV_Target.y = _2611 * (_2592 ? _2601 : (_2601 + (cbSceneParam._m0[72u].w * _2575)));
    SV_Target.z = _2611 * (_2592 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2577)));
    SV_Target.w = cbInstanceData._m0[_2452].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2452].w;
}


