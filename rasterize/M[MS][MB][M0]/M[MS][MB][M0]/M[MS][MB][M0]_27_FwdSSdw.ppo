#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1186;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3517 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3528 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3539 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _282) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _283) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _324 = _319.x * cbMtdParam._m0[9u].x;
    float _325 = _319.y * cbMtdParam._m0[9u].y;
    float _326 = _319.z * cbMtdParam._m0[9u].z;
    float _330 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _296.x) * _324;
    float _333 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _296.y) * _325;
    float _336 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _296.z) * _326;
    float _343 = ((_324 - _330) * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) + _330;
    float _344 = ((_325 - _333) * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) + _333;
    float _345 = ((_326 - _336) * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) + _336;
    vec4 _363 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _389 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _393 = _389.z;
    float _397 = (_389.x * 2.0) + (-1.0);
    float _398 = (_389.y * 2.0) + (-1.0);
    float _399 = dot(vec2(_397, _398), vec2(_397, _398));
    float _3550 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _404 = sqrt(1.0 - (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))));
    float _409 = _397 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_363.x * 2.0) + (-1.0)));
    float _410 = _398 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_363.y * 2.0) + (-1.0)));
    float _413 = fma(_404, _232, fma(_410, _239, _409 * _225));
    float _416 = fma(_404, _233, fma(_410, _240, _409 * _226));
    float _419 = fma(_404, _234, fma(_410, _241, _409 * _227));
    float _423 = inversesqrt(dot(vec3(_413, _416, _419), vec3(_413, _416, _419)));
    vec4 _459 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _461 = _459.x;
    float _462 = 1.0 - _461;
    float _471 = (cbMtdParam._m0[19u].x + dot(vec4(_423 * _413, _423 * _416, _423 * _419, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_461 - _462) * cbMtdParam._m0[24u].z) + _462) * cbMtdParam._m0[21u].z);
    float _3561 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _474 = (-0.0) - cbMtdParam._m0[24u].y;
    float _476 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _476 : (isnan(_476) ? 1.0 : min(_476, 1.0));
    float _484 = _472 - ((_472 * TEXCOORD_8.x) * _477);
    float _485 = _472 - ((_472 * TEXCOORD_8.y) * _477);
    float _486 = _472 - ((_472 * TEXCOORD_8.z) * _477);
    float _493 = (_484 * (cbMtdParam._m0[17u].x - _343)) + _343;
    float _494 = (_485 * (cbMtdParam._m0[17u].y - _344)) + _344;
    float _495 = (_486 * (cbMtdParam._m0[17u].z - _345)) + _345;
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _509 = _507.x;
    float _510 = 1.0 - _509;
    float _538 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_509 - _510) * cbMtdParam._m0[24u].w) + _510) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3582 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _547 = ((((cbMtdParam._m0[10u].x - _493) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _539) + _493;
    float _548 = ((((cbMtdParam._m0[10u].y - _494) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _539) + _494;
    float _549 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _495)) * _539) + _495;
    float _554 = (((_363.z - _393) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _393;
    vec4 _568 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _575 = (_568.x * 2.0) + (-1.0);
    float _576 = (_568.y * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _3593 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _585 = ((_568.z - _554) * _484) + _554;
    float _588 = ((cbMtdParam._m0[23u].y - _585) * _539) + _585;
    vec4 _607 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _613 = (_607.x * 2.0) + (-1.0);
    float _614 = (_607.y * 2.0) + (-1.0);
    float _615 = dot(vec2(_613, _614), vec2(_613, _614));
    float _3604 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _630 = ((sqrt(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) - _404) * _486) + _404;
    float _633 = (((_575 - _409) * _484) + _409) + (cbMtdParam._m0[21u].x * _409);
    float _634 = (((_576 - _410) * _485) + _410) + (cbMtdParam._m0[21u].x * _410);
    float _645 = (((_613 - _633) + (_633 * cbMtdParam._m0[22u].z)) * _539) + _633;
    float _646 = (((_614 - _634) + (_634 * cbMtdParam._m0[22u].z)) * _539) + _634;
    float _647 = (_539 * (sqrt(1.0 - (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) - _630)) + _630;
    float _649 = cbMtdParam._m0[22u].x + _389.w;
    float _652 = fma(_647, _232, fma(_646, _239, _645 * _225));
    float _655 = fma(_647, _233, fma(_646, _240, _645 * _226));
    float _658 = fma(_647, _234, fma(_646, _241, _645 * _227));
    float _662 = inversesqrt(dot(vec3(_652, _655, _658), vec3(_652, _655, _658)));
    float _663 = _662 * _652;
    float _664 = _662 * _655;
    float _665 = _662 * _658;
    float _3615 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _666 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3637 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3648 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3659 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _684 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _734 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _724);
    float _735 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _724);
    float _736 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _724);
    float _740 = inversesqrt(dot(vec3(_734, _735, _736), vec3(_734, _735, _736)));
    float _741 = _734 * _740;
    float _742 = _735 * _740;
    float _743 = _736 * _740;
    float _749 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _750 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _771 = fma(_665, cbSceneParam._m0[5u].z, fma(_664, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _663));
    float _774 = fma(_665, cbSceneParam._m0[6u].z, fma(_664, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _663));
    float _777 = fma(_665, cbSceneParam._m0[7u].z, fma(_664, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _663));
    uint _791 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _797 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * cbInstanceData._m0[_791].x;
    float _798 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_791].y;
    float _799 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * cbInstanceData._m0[_791].z;
    float _3670 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _800 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _3692 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    vec4 _811 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _749, cbSceneParam._m0[86u].y * _750));
    float _815 = ((isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * TEXCOORD_5.w) * _811.x;
    float _816 = dot(vec3(_663, _664, _665), vec3(_741, _742, _743));
    float _819 = _816 * 2.0;
    float _823 = (_819 * _663) - _741;
    float _824 = (_819 * _664) - _742;
    float _825 = (_819 * _665) - _743;
    float _829 = abs(dot(vec3(_741, _742, _743), vec3(_663, _664, _665)));
    float _3703 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _831 = sqrt(_666);
    float _844 = exp2((_831 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_831 * 3.0));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1185;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _910 = fma(_884, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876));
        float _914 = fma(_884, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876));
        float _918 = fma(_884, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876));
        float _943 = _876 + _663;
        float _944 = _880 + _664;
        float _945 = _884 + _665;
        float _955 = fma(_945, cbModelParam._m0[26u].z, fma(_944, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943)) - _910;
        float _956 = fma(_945, cbModelParam._m0[27u].z, fma(_944, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943)) - _914;
        float _957 = fma(_945, cbModelParam._m0[28u].z, fma(_944, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943)) - _918;
        float _961 = inversesqrt(dot(vec3(_955, _956, _957), vec3(_955, _956, _957)));
        float _974 = ((_961 * _955) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_910 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_961 * _956) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_914 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_961 * _957) / cbModelParam._m0[34u].z) + ((((((_918 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        float _1013 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_979.x + (-0.5));
        float _1015 = _1013 * (_979.y + (-0.5));
        float _1016 = _1013 * (_979.z + (-0.5));
        float _1023 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_986.x + (-0.5));
        float _1025 = _1023 * (_986.y + (-0.5));
        float _1026 = _1023 * (_986.z + (-0.5));
        float _1033 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_993.x + (-0.5));
        float _1035 = _1033 * (_993.y + (-0.5));
        float _1036 = _1033 * (_993.z + (-0.5));
        float _1043 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1000.x + (-0.5));
        float _1045 = _1043 * (_1000.y + (-0.5));
        float _1046 = _1043 * (_1000.z + (-0.5));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = _1014 * 0.5;
        float _1051 = _1024 * 0.5;
        float _1052 = _1034 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1067 = (dot(vec3(_663, _664, _665), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1077 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3751 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1079 + 1.0))) + _1084) * _1047;
        float _1094 = _1015 * 0.5;
        float _1095 = _1025 * 0.5;
        float _1096 = _1035 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_663, _664, _665), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3762 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3773 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _3784 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_1121 + 1.0))) + _1126) * _1048;
        float _1136 = _1016 * 0.5;
        float _1137 = _1026 * 0.5;
        float _1138 = _1036 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_663, _664, _665), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3817 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1163 + 1.0))) + _1168) * _1049;
        _1185 = _1016;
        _1187 = _1015;
        _1188 = _1014;
        _1189 = _1026;
        _1190 = _1025;
        _1191 = _1024;
        _1192 = _1036;
        _1193 = _1035;
        _1194 = _1034;
        _1195 = _1049;
        _1196 = _1048;
        _1197 = _1047;
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
    }
    else
    {
        _1185 = _1186;
        _1187 = _1186;
        _1188 = _1186;
        _1189 = _1186;
        _1190 = _1186;
        _1191 = _1186;
        _1192 = _1186;
        _1193 = _1186;
        _1194 = _1186;
        _1195 = _1186;
        _1196 = _1186;
        _1197 = _1186;
        _1198 = 0.0;
        _1199 = 0.0;
        _1200 = 0.0;
    }
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1225 = fma(_884, cbModelParam._m0[30u].z, fma(_880, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _876));
        float _1229 = fma(_884, cbModelParam._m0[31u].z, fma(_880, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _876));
        float _1233 = fma(_884, cbModelParam._m0[32u].z, fma(_880, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _876));
        float _1256 = _876 + _663;
        float _1257 = _880 + _664;
        float _1258 = _884 + _665;
        float _1268 = fma(_1258, cbModelParam._m0[30u].z, fma(_1257, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1256)) - _1225;
        float _1269 = fma(_1258, cbModelParam._m0[31u].z, fma(_1257, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1256)) - _1229;
        float _1270 = fma(_1258, cbModelParam._m0[32u].z, fma(_1257, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1256)) - _1233;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1225 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1229 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[35u].z) + ((((((_1233 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1324 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1291.x + (-0.5));
        float _1326 = _1324 * (_1291.y + (-0.5));
        float _1327 = _1324 * (_1291.z + (-0.5));
        float _1334 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1298.x + (-0.5));
        float _1336 = _1334 * (_1298.y + (-0.5));
        float _1337 = _1334 * (_1298.z + (-0.5));
        float _1344 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1305.x + (-0.5));
        float _1346 = _1344 * (_1305.y + (-0.5));
        float _1347 = _1344 * (_1305.z + (-0.5));
        float _1354 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1312.x + (-0.5));
        float _1356 = _1354 * (_1312.y + (-0.5));
        float _1357 = _1354 * (_1312.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_663, _664, _665), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3880 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1388 + 1.0))) + _1393) * _1358;
        float _1403 = _1326 * 0.5;
        float _1404 = _1336 * 0.5;
        float _1405 = _1346 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_663, _664, _665), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3913 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1430 + 1.0))) + _1435) * _1359;
        float _1445 = _1327 * 0.5;
        float _1446 = _1337 * 0.5;
        float _1447 = _1347 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_663, _664, _665), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _3946 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1472 + 1.0))) + _1477) * _1360;
        _1494 = _1327;
        _1495 = _1326;
        _1496 = _1325;
        _1497 = _1337;
        _1498 = _1336;
        _1499 = _1335;
        _1500 = _1347;
        _1501 = _1346;
        _1502 = _1345;
        _1503 = _1360;
        _1504 = _1359;
        _1505 = _1358;
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1186;
        _1495 = _1186;
        _1496 = _1186;
        _1497 = _1186;
        _1498 = _1186;
        _1499 = _1186;
        _1500 = _1186;
        _1501 = _1186;
        _1502 = _1186;
        _1503 = _1186;
        _1504 = _1186;
        _1505 = _1186;
        _1506 = 0.0;
        _1507 = 0.0;
        _1508 = 0.0;
    }
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1198)) + _1198;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1199)) + _1199;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1200)) + _1200;
    float _1541 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1518));
    float _1562 = _823 * 0.5;
    float _1563 = _824 * 0.5;
    float _1564 = _825 * 0.5;
    float _1565 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1568 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1571 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1605;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1578 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1185, _1189, _1192, _1195));
        float _1582 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1187, _1190, _1193, _1196));
        float _1586 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1188, _1191, _1194, _1197));
        float _1593 = dot(vec4(cbModelParam._m0[39u]), vec4(_1562, _1563, _1564, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1616;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1607 = dot(vec4(cbModelParam._m0[40u]), vec4(_1562, _1563, _1564, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1620 = (_1616 * cbModelParam._m0[1u].x) + (_1605 * (1.0 - cbModelParam._m0[1u].x));
    float _1630 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _666);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1630 : min(cbModelParam._m0[25u].z, _1630));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1679 = fma(_884, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876)) + cbModelParam._m0[13u].w;
        float _1683 = fma(_884, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876)) + cbModelParam._m0[14u].w;
        float _1687 = fma(_884, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876)) + cbModelParam._m0[15u].w;
        float _1690 = fma(_825, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823));
        float _1693 = fma(_825, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823));
        float _1696 = fma(_825, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823));
        float _1724;
        if (_1690 > 0.0)
        {
            _1724 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1724 = frontier_phi_14_12_ladder;
        }
        float _1948;
        if (_1693 > 0.0)
        {
            _1948 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1948 = frontier_phi_23_19_ladder;
        }
        float _2194;
        if (_1696 > 0.0)
        {
            _2194 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2194 = frontier_phi_35_30_ladder;
        }
        float _2196 = isnan(_1948) ? _1724 : (isnan(_1724) ? _1948 : min(_1724, _1948));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1690) + _1679;
        float _2202 = (_2197 * _1693) + _1683;
        float _2203 = (_2197 * _1696) + _1687;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2204;
        float _2208 = _2204 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 > _2208) || ((_2202 < _2206) || ((_2201 < _2206) || (_2201 > _2208))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2327 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2203, cbModelParam._m0[9u].z, fma(_2202, cbModelParam._m0[9u].y, _2201 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2203, cbModelParam._m0[10u].z, fma(_2202, cbModelParam._m0[10u].y, _2201 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2203, cbModelParam._m0[11u].z, fma(_2202, cbModelParam._m0[11u].y, _2201 * cbModelParam._m0[11u].x))), _1631);
            frontier_phi_13_35_ladder = _2327.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2327.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2327.x * cbModelParam._m0[1u].y;
        }
        _1712 = frontier_phi_13_35_ladder_2;
        _1714 = frontier_phi_13_35_ladder_1;
        _1716 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1700 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_823, _824, _825), _1631);
        _1712 = _1700.x * cbModelParam._m0[1u].y;
        _1714 = _1700.y * cbModelParam._m0[1u].y;
        _1716 = _1700.z * cbModelParam._m0[1u].y;
    }
    float _1720 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _666);
    float _1721 = isnan(_1720) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1720 : min(cbModelParam._m0[25u].w, _1720));
    float _1811;
    float _1813;
    float _1815;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1775 = fma(_884, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876)) + cbModelParam._m0[21u].w;
        float _1779 = fma(_884, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876)) + cbModelParam._m0[22u].w;
        float _1783 = fma(_884, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876)) + cbModelParam._m0[23u].w;
        float _1786 = fma(_825, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823));
        float _1789 = fma(_825, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823));
        float _1792 = fma(_825, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823));
        float _1953;
        if (_1786 > 0.0)
        {
            _1953 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1953 = frontier_phi_25_21_ladder;
        }
        float _2221;
        if (_1789 > 0.0)
        {
            _2221 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2221 = frontier_phi_37_32_ladder;
        }
        float _2426;
        if (_1792 > 0.0)
        {
            _2426 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2426 = frontier_phi_46_43_ladder;
        }
        float _2428 = isnan(_2221) ? _1953 : (isnan(_1953) ? _2221 : min(_1953, _2221));
        float _2429 = isnan(_2426) ? _2428 : (isnan(_2428) ? _2426 : min(_2428, _2426));
        float _2433 = (_2429 * _1786) + _1775;
        float _2434 = (_2429 * _1789) + _1779;
        float _2435 = (_2429 * _1792) + _1783;
        float _2436 = _2429 * 9.9999997473787516355514526367188e-05;
        float _2437 = (-1.0) - _2436;
        float _2439 = _2436 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2435 > _2439) || ((_2435 < _2437) || ((_2434 > _2439) || ((_2434 < _2437) || ((_2433 < _2437) || (_2433 > _2439))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2435, cbModelParam._m0[17u].z, fma(_2434, cbModelParam._m0[17u].y, _2433 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2435, cbModelParam._m0[18u].z, fma(_2434, cbModelParam._m0[18u].y, _2433 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2435, cbModelParam._m0[19u].z, fma(_2434, cbModelParam._m0[19u].y, _2433 * cbModelParam._m0[19u].x))), _1721);
            frontier_phi_22_46_ladder = _2634.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2634.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2634.x * cbModelParam._m0[1u].z;
        }
        _1811 = frontier_phi_22_46_ladder_2;
        _1813 = frontier_phi_22_46_ladder_1;
        _1815 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1795 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_823, _824, _825), _1721);
        _1811 = _1795.x * cbModelParam._m0[1u].z;
        _1813 = _1795.y * cbModelParam._m0[1u].z;
        _1815 = _1795.z * cbModelParam._m0[1u].z;
    }
    float _1827 = ((((1.0 - _844) * ((_831 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_844 * _831)) * _815;
    float _1828 = _1827 * ((cbModelParam._m0[1u].w * (_1811 - _1712)) + _1712);
    float _1829 = _1827 * ((cbModelParam._m0[1u].w * (_1813 - _1714)) + _1714);
    float _1830 = _1827 * ((cbModelParam._m0[1u].w * (_1815 - _1716)) + _1716);
    float _1833 = fma(_1830, cbSceneParam._m0[89u].z, fma(_1829, cbSceneParam._m0[89u].y, _1828 * cbSceneParam._m0[89u].x));
    float _1836 = fma(_1830, cbSceneParam._m0[90u].z, fma(_1829, cbSceneParam._m0[90u].y, _1828 * cbSceneParam._m0[90u].x));
    float _1839 = fma(_1830, cbSceneParam._m0[91u].z, fma(_1829, cbSceneParam._m0[91u].y, _1828 * cbSceneParam._m0[91u].x));
    vec4 _1847 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_749, _750));
    float _1849 = _1847.w;
    float _1861 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1849);
    float _1862 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1849);
    float _1863 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1849);
    uvec4 _1867 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _1869 = _1867.x * 14u;
    uint _1870 = _1869 + 13u;
    float _1877 = _815 + (-1.0);
    float _1882 = (cbLight._m0[_1870].x * _1877) + 1.0;
    float _1883 = (cbLight._m0[_1870].y * _1877) + 1.0;
    float _1884 = (cbLight._m0[_1870].z * _1877) + 1.0;
    float _1885 = (cbLight._m0[_1870].w * _1877) + 1.0;
    uint _1886 = _1869 + 5u;
    float _1892 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
    uint _1896 = _1869 + 4u;
    float _1906 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
    uint _1910 = _1869 | 1u;
    float _1921 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_663, _664, _665));
    float _1924 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_663, _664, _665));
    float _4082 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _4093 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1929 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * 0.3183098733425140380859375;
    float _1931 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.3183098733425140380859375;
    float _1938 = ((cbLight._m0[_1886].x * _1892) * _1931) + (((cbLight._m0[_1896].x * _1861) * _1906) * _1929);
    float _1939 = ((_1892 * cbLight._m0[_1886].y) * _1931) + (((cbLight._m0[_1896].y * _1862) * _1906) * _1929);
    float _1940 = ((_1892 * cbLight._m0[_1886].z) * _1931) + (((cbLight._m0[_1896].z * _1863) * _1906) * _1929);
    uvec4 _1945 = floatBitsToUint(cbLight._m0[_1869 + 12u]);
    bool _1947 = _1945.x == 0u;
    float _1958;
    float _1960;
    float _1962;
    if (_1947)
    {
        _1958 = _1938;
        _1960 = _1939;
        _1962 = _1940;
    }
    else
    {
        uint _1966 = _1869 + 6u;
        float _1982 = (dot(vec3(cbLight._m0[_1869 + 2u].xyz), vec3(_663, _664, _665)) * 0.5) + 0.5;
        float _1983 = _1982 * _1982;
        float _4104 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1984 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1985 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _1958 = (((cbLight._m0[_1966].x * 0.3183098733425140380859375) * _1984) * _1985) + _1938;
        _1960 = (((cbLight._m0[_1966].y * 0.3183098733425140380859375) * _1984) * _1985) + _1939;
        _1962 = (((cbLight._m0[_1966].z * 0.3183098733425140380859375) * _1984) * _1985) + _1940;
    }
    bool _1965 = _1945.y == 0u;
    float _2003;
    float _2005;
    float _2007;
    if (_1965)
    {
        _2003 = _1958;
        _2005 = _1960;
        _2007 = _1962;
    }
    else
    {
        uint _2165 = _1869 + 7u;
        float _2181 = (dot(vec3(cbLight._m0[_1869 + 3u].xyz), vec3(_663, _664, _665)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4120 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2184 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2003 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _1958;
        _2005 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _1960;
        _2007 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _1962;
    }
    uint _2010 = _1869 + 8u;
    float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1869].w)) * _666) * 0.949999988079071044921875);
    float _2024 = _2023 * _2023;
    float _2025 = cbLight._m0[_1869].x + _741;
    float _2026 = cbLight._m0[_1869].y + _742;
    float _2027 = cbLight._m0[_1869].z + _743;
    float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
    float _2032 = _2031 * _2025;
    float _2033 = _2031 * _2026;
    float _2034 = _2031 * _2027;
    float _2035 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_1869].xyz));
    float _4136 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2039 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _2040 = dot(vec3(_663, _664, _665), vec3(_2032, _2033, _2034));
    float _4158 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2043 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _2044 = dot(vec3(cbLight._m0[_1869].xyz), vec3(_2032, _2033, _2034));
    float _4169 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2048 = _2024 * _2024;
    float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
    float _2063 = (exp2(log2(1.0 - (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2064 = 1.0 - _2024;
    float _2075 = (0.5 / (((_2039 * ((_2038 * _2064) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2064) + _2024) * _2038))) * _2038;
    float _4180 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2077 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
    uint _2091 = _1869 + 9u;
    float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _666) * 0.949999988079071044921875);
    float _2103 = _2102 * _2102;
    float _2104 = cbLight._m0[_1910].x + _741;
    float _2105 = cbLight._m0[_1910].y + _742;
    float _2106 = cbLight._m0[_1910].z + _743;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2111 = _2110 * _2104;
    float _2112 = _2110 * _2105;
    float _2113 = _2110 * _2106;
    float _2114 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_1910].xyz));
    float _4191 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
    float _2118 = dot(vec3(_663, _664, _665), vec3(_2111, _2112, _2113));
    float _4202 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _2122 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_2111, _2112, _2113));
    float _4213 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2126 = _2103 * _2103;
    float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
    float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2140 = 1.0 - _2103;
    float _2150 = (0.5 / (((_2039 * ((_2117 * _2140) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2140) + _2103) * _2117))) * _2117;
    float _4224 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
    float _2162 = (((_2139 * cbLight._m0[_2091].x) * _2152) * _1892) + ((((cbLight._m0[_2010].x * _1861) * _2063) * _2077) * _1906);
    float _2163 = (((_2139 * cbLight._m0[_2091].y) * _2152) * _1892) + ((((cbLight._m0[_2010].y * _1862) * _2063) * _2077) * _1906);
    float _2164 = (((_2139 * cbLight._m0[_2091].z) * _2152) * _1892) + ((((cbLight._m0[_2010].z * _1863) * _2063) * _2077) * _1906);
    float _2226;
    float _2228;
    float _2230;
    if (_1947)
    {
        _2226 = _2162;
        _2228 = _2163;
        _2230 = _2164;
    }
    else
    {
        uint _2232 = _1869 + 2u;
        uint _2236 = _1869 + 10u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _666) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _741;
        float _2253 = cbLight._m0[_2232].y + _742;
        float _2254 = cbLight._m0[_2232].z + _743;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_2232].xyz));
        float _4235 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2266 = dot(vec3(_663, _664, _665), vec3(_2259, _2260, _2261));
        float _4246 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4257 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2288 = 1.0 - _2251;
        float _2298 = (0.5 / (((_2039 * ((_2265 * _2288) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2288) + _2251) * _2265))) * _2265;
        float _4268 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2300 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2301 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
        _2226 = (((_2287 * cbLight._m0[_2236].x) * _2300) * _2301) + _2162;
        _2228 = (((_2287 * cbLight._m0[_2236].y) * _2300) * _2301) + _2163;
        _2230 = (((_2287 * cbLight._m0[_2236].z) * _2300) * _2301) + _2164;
    }
    float _2336;
    float _2338;
    float _2340;
    if (_1965)
    {
        _2336 = _2226;
        _2338 = _2228;
        _2340 = _2230;
    }
    else
    {
        uint _2347 = _1869 + 3u;
        uint _2351 = _1869 + 11u;
        float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _666) * 0.949999988079071044921875);
        float _2366 = _2365 * _2365;
        float _2367 = cbLight._m0[_2347].x + _741;
        float _2368 = cbLight._m0[_2347].y + _742;
        float _2369 = cbLight._m0[_2347].z + _743;
        float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
        float _2374 = _2373 * _2367;
        float _2375 = _2373 * _2368;
        float _2376 = _2373 * _2369;
        float _2377 = dot(vec3(_663, _664, _665), vec3(cbLight._m0[_2347].xyz));
        float _4284 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2381 = dot(vec3(_663, _664, _665), vec3(_2374, _2375, _2376));
        float _4295 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2385 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2374, _2375, _2376));
        float _4306 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2389 = _2366 * _2366;
        float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
        float _2402 = (exp2(log2(1.0 - (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2403 = 1.0 - _2366;
        float _2413 = (0.5 / (((_2039 * ((_2380 * _2403) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2039 * _2403) + _2366) * _2380))) * _2380;
        float _4317 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2415 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
        float _2416 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2336 = (((_2402 * cbLight._m0[_2351].x) * _2415) * _2416) + _2226;
        _2338 = (((_2402 * cbLight._m0[_2351].y) * _2415) * _2416) + _2228;
        _2340 = (((_2402 * cbLight._m0[_2351].z) * _2415) * _2416) + _2230;
    }
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    if (_1867.y == 0u)
    {
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2491;
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2491;
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2491;
        uvec4 _2506 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2507 = _2506.x;
        uint _2518 = uint((float(_2506.y) * floor(float(uint(cbSceneParam._m0[85u].y * _750) / _2507))) + floor(float(uint(cbSceneParam._m0[85u].x * _749) / _2507)));
        float _2528 = (log2(_2494 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2529 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        uint _2532 = uint(isnan(14.0) ? _2529 : (isnan(_2529) ? 14.0 : min(_2529, 14.0)));
        uvec4 _2537 = texelFetch(g_lightClusterGridBuffer, int(((_2532 << 2u) + (_2518 << 6u)) >> 2u));
        uint _2538 = _2537.x;
        uint _2539 = _2506.z;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        if (((((1u << ((_2539 >> 4u) & 15u)) + 4294967295u) & _2538) == 0u) || ((_2539 & 240u) == 0u))
        {
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
        }
        else
        {
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            uint _2789 = 0u;
            uint _2798;
            bool _2799;
            for (;;)
            {
                _2798 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                _2799 = _2798 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2799)
                {
                    frontier_phi_61_pred = _2783;
                    frontier_phi_61_pred_1 = _2788;
                    frontier_phi_61_pred_2 = _2787;
                    frontier_phi_61_pred_3 = _2786;
                    frontier_phi_61_pred_4 = _2785;
                    frontier_phi_61_pred_5 = _2784;
                }
                else
                {
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    uint _2913;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2798;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    for (;;)
                    {
                        uint _2917 = uint(findLSB(_2913)) + (_2789 << 5u);
                        uint _2914 = (_2913 + 4294967295u) & _2913;
                        uint _2919 = _2917 * 48u;
                        vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 3u)).x));
                        uint _2939 = (_2917 * 48u) + 4u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2939)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2939 + 3u)).x));
                        uint _2958 = (_2917 * 48u) + 8u;
                        vec3 _2969 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x));
                        float _2973 = _2933.x - _2492;
                        float _2974 = _2933.y - _2493;
                        float _2975 = _2933.z - _2494;
                        float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                        float _2979 = inversesqrt(_2976);
                        float _2980 = _2979 * _2973;
                        float _2981 = _2979 * _2974;
                        float _2982 = _2979 * _2975;
                        float _2983 = dot(vec3(_771, _774, _777), vec3(_2980, _2981, _2982));
                        float _2988 = 1.0 - (_2976 * _2933.w);
                        float _4343 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _2990 = sqrt(_2976) * _2952.w;
                        float _2993 = 1.39999997615814208984375 / (_2990 + 1.39999997615814208984375);
                        float _2994 = _2993 * _2993;
                        float _2997 = ((1.0 - _2994) * _2983) + _2994;
                        float _3000 = _2990 * _2990;
                        float _3004 = ((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2989) / ((_3000 * 0.699999988079071044921875) + 1.0);
                        float _3008 = (-0.0) - _2492;
                        float _3009 = (-0.0) - _2493;
                        float _3010 = (-0.0) - _2494;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3015 = _3014 * _3008;
                        float _3016 = _3014 * _3009;
                        float _3017 = _3014 * _3010;
                        float _3025 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                        float _3026 = 1.0 - _831;
                        float _3033 = sqrt(1.0 - ((1.0 - (_3026 * _3026)) * (1.0 - (_3025 * _3025))));
                        float _3034 = _3033 * _3033;
                        float _3035 = _3034 * _3034;
                        float _3036 = _3015 + _2980;
                        float _3037 = _3016 + _2981;
                        float _3038 = _3017 + _2982;
                        float _3042 = inversesqrt(dot(vec3(_3036, _3037, _3038), vec3(_3036, _3037, _3038)));
                        float _3046 = dot(vec3(_771, _774, _777), vec3(_3015, _3016, _3017));
                        float _4359 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3049 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3050 = dot(vec3(_771, _774, _777), vec3(_3042 * _3036, _3042 * _3037, _3042 * _3038));
                        float _4370 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3053 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3057 = ((_3053 * _3053) * (_3035 + (-1.0))) + 1.0;
                        float _3058 = _2993 * _3034;
                        float _3059 = _3058 * _3058;
                        float _3062 = ((1.0 - _3059) * _2983) + _3059;
                        float _4381 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3064 = 1.0 - _3034;
                        float _3074 = (0.5 / (((_3063 * ((_3049 * _3064) + _3034)) + 9.9999999392252902907785028219223e-09) + (((_3063 * _3064) + _3034) * _3049))) * _3063;
                        float _4392 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                        float _3085 = (((_3035 * 3.1415927410125732421875) * (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) / ((_3057 * _3057) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125))) * _2989;
                        _2842 = (_3004 * _2952.x) + _2910;
                        _2843 = (_3004 * _2952.y) + _2911;
                        _2844 = (_3004 * _2952.z) + _2912;
                        _2839 = (_3085 * _2969.x) + _2907;
                        _2840 = (_3085 * _2969.y) + _2908;
                        _2841 = (_3085 * _2969.z) + _2909;
                        if (_2914 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2914;
                        }
                    }
                    frontier_phi_61_pred = _2839;
                    frontier_phi_61_pred_1 = _2844;
                    frontier_phi_61_pred_2 = _2843;
                    frontier_phi_61_pred_3 = _2842;
                    frontier_phi_61_pred_4 = _2841;
                    frontier_phi_61_pred_5 = _2840;
                }
                _2640 = frontier_phi_61_pred;
                _2650 = frontier_phi_61_pred_1;
                _2648 = frontier_phi_61_pred_2;
                _2646 = frontier_phi_61_pred_3;
                _2644 = frontier_phi_61_pred_4;
                _2642 = frontier_phi_61_pred_5;
                uint _2790 = _2789 + 1u;
                if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2783 = _2640;
                    _2784 = _2642;
                    _2785 = _2644;
                    _2786 = _2646;
                    _2787 = _2648;
                    _2788 = _2650;
                    _2789 = _2790;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
        }
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.z;
        uint _2656 = (_2654 >> 8u) & 15u;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        if (((4294967295u << _2656) & _2538) == 0u)
        {
            _2751 = _2639;
            _2753 = _2641;
            _2755 = _2643;
            _2757 = _2645;
            _2759 = _2647;
            _2761 = _2649;
        }
        else
        {
            float _2776 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
            float _2777 = _2776 * _2492;
            float _2778 = _2776 * _2493;
            float _2779 = _2776 * _2494;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2656 < ((_2654 >> 12u) & 15u))
            {
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2890 = _2639;
                float _2891 = _2641;
                float _2892 = _2643;
                float _2893 = _2645;
                float _2894 = _2647;
                float _2895 = _2649;
                uint _2896 = _2656;
                uint _2905;
                bool _2906;
                for (;;)
                {
                    _2905 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2896 << 2u)) >> 2u)).x;
                    _2906 = _2905 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2906)
                    {
                        frontier_phi_67_pred = _2893;
                        frontier_phi_67_pred_1 = _2894;
                        frontier_phi_67_pred_2 = _2895;
                        frontier_phi_67_pred_3 = _2892;
                        frontier_phi_67_pred_4 = _2891;
                        frontier_phi_67_pred_5 = _2890;
                    }
                    else
                    {
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3103 = _2890;
                        float _3104 = _2891;
                        float _3105 = _2892;
                        float _3106 = _2893;
                        float _3107 = _2894;
                        float _3108 = _2895;
                        uint _3109 = _2905;
                        uint _3110;
                        vec4 _3135;
                        float _3136;
                        vec4 _3151;
                        vec3 _3163;
                        vec4 _3178;
                        vec4 _3193;
                        float _3239;
                        bool _3240;
                        for (;;)
                        {
                            uint _3120 = ((_2896 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3109));
                            _3110 = (_3109 + 4294967295u) & _3109;
                            uint _3122 = _3120 * 40u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            _3136 = _3135.w;
                            uint _3138 = (_3120 * 40u) + 4u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3120 * 40u) + 8u;
                            _3163 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x));
                            uint _3165 = (_3120 * 40u) + 16u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3120 * 40u) + 20u;
                            _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3195 = (_3120 * 40u) + 24u;
                            vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3214 = (_3120 * 40u) + 28u;
                            vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            _3239 = fma(_2494, _3227.z, fma(_2493, _3227.y, _3227.x * _2492)) + _3227.w;
                            _3240 = !((fma(_2494, _3208.z, fma(_2493, _3208.y, _3208.x * _2492)) + _3208.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3240)
                            {
                                float _3267 = _3135.x - _2492;
                                float _3268 = _3135.y - _2493;
                                float _3269 = _3135.z - _2494;
                                float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                                float _3273 = inversesqrt(_3270);
                                float _3274 = _3273 * _3267;
                                float _3275 = _3273 * _3268;
                                float _3276 = _3273 * _3269;
                                float _3280 = 1.0 - (_3270 / (_3136 * _3136));
                                float _4403 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3285 = sqrt(_3270) * _3151.w;
                                float _3287 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                                float _3288 = _3287 * _3287;
                                float _3291 = ((1.0 - _3288) * dot(vec3(_3274, _3275, _3276), vec3(_771, _774, _777))) + _3288;
                                float _3294 = _3285 * _3285;
                                float _3298 = (fma(_2494, _3178.z, fma(_2493, _3178.y, _3178.x * _2492)) + _3178.w) / _3239;
                                float _3299 = (fma(_2494, _3193.z, fma(_2493, _3193.y, _3193.x * _2492)) + _3193.w) / _3239;
                                float _3303 = 1.0 - dot(vec2(_3298, _3299), vec2(_3298, _3299));
                                float _4419 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3305 = _3304 * (((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3281) / ((_3294 * 0.699999988079071044921875) + 1.0));
                                float _3317 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                                float _3318 = 1.0 - _831;
                                float _3325 = sqrt(1.0 - ((1.0 - (_3318 * _3318)) * (1.0 - (_3317 * _3317))));
                                float _3326 = _3325 * _3325;
                                float _3327 = _3326 * _3326;
                                float _3328 = _3274 - _2777;
                                float _3329 = _3275 - _2778;
                                float _3330 = _3276 - _2779;
                                float _3334 = inversesqrt(dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330)));
                                float _3338 = dot(vec3(_771, _774, _777), vec3((-0.0) - _2777, (-0.0) - _2778, (-0.0) - _2779));
                                float _4430 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                                float _3341 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3342 = dot(vec3(_771, _774, _777), vec3(_3334 * _3328, _3334 * _3329, _3334 * _3330));
                                float _4441 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3349 = ((_3345 * _3345) * (_3327 + (-1.0))) + 1.0;
                                float _3350 = _3287 * _3326;
                                float _3351 = _3350 * _3350;
                                float _3357 = ((1.0 - _3351) * dot(vec3(_771, _774, _777), vec3(_3274, _3275, _3276))) + _3351;
                                float _4452 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0));
                                float _3358 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3359 = 1.0 - _3326;
                                float _3369 = (0.5 / (((_3358 * ((_3341 * _3359) + _3326)) + 9.9999999392252902907785028219223e-09) + (((_3358 * _3359) + _3326) * _3341))) * _3358;
                                float _4463 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3379 = (_3304 * _3281) * (((_3327 * 3.1415927410125732421875) * (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) / ((_3349 * _3349) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3379 * _3163.x;
                                frontier_phi_73_pred_1 = _3379 * _3163.y;
                                frontier_phi_73_pred_2 = _3305 * _3151.z;
                                frontier_phi_73_pred_3 = _3305 * _3151.y;
                                frontier_phi_73_pred_4 = _3305 * _3151.x;
                                frontier_phi_73_pred_5 = _3379 * _3163.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3383 = frontier_phi_73_pred;
                            _3384 = frontier_phi_73_pred_1;
                            _3388 = frontier_phi_73_pred_2;
                            _3387 = frontier_phi_73_pred_3;
                            _3386 = frontier_phi_73_pred_4;
                            _3385 = frontier_phi_73_pred_5;
                            _3093 = _3386 + _3106;
                            _3094 = _3387 + _3107;
                            _3095 = _3388 + _3108;
                            _3090 = _3383 + _3103;
                            _3091 = _3384 + _3104;
                            _3092 = _3385 + _3105;
                            if (_3110 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3110;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3093;
                        frontier_phi_67_pred_1 = _3094;
                        frontier_phi_67_pred_2 = _3095;
                        frontier_phi_67_pred_3 = _3092;
                        frontier_phi_67_pred_4 = _3091;
                        frontier_phi_67_pred_5 = _3090;
                    }
                    _2758 = frontier_phi_67_pred;
                    _2760 = frontier_phi_67_pred_1;
                    _2762 = frontier_phi_67_pred_2;
                    _2756 = frontier_phi_67_pred_3;
                    _2754 = frontier_phi_67_pred_4;
                    _2752 = frontier_phi_67_pred_5;
                    uint _2897 = _2896 + 1u;
                    if (_2897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2890 = _2752;
                        _2891 = _2754;
                        _2892 = _2756;
                        _2893 = _2758;
                        _2894 = _2760;
                        _2895 = _2762;
                        _2896 = _2897;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2760;
                frontier_phi_55_56_ladder_1 = _2762;
                frontier_phi_55_56_ladder_2 = _2758;
                frontier_phi_55_56_ladder_3 = _2756;
                frontier_phi_55_56_ladder_4 = _2754;
                frontier_phi_55_56_ladder_5 = _2752;
            }
            else
            {
                frontier_phi_55_56_ladder = _2647;
                frontier_phi_55_56_ladder_1 = _2649;
                frontier_phi_55_56_ladder_2 = _2645;
                frontier_phi_55_56_ladder_3 = _2643;
                frontier_phi_55_56_ladder_4 = _2641;
                frontier_phi_55_56_ladder_5 = _2639;
            }
            _2751 = frontier_phi_55_56_ladder_5;
            _2753 = frontier_phi_55_56_ladder_4;
            _2755 = frontier_phi_55_56_ladder_3;
            _2757 = frontier_phi_55_56_ladder_2;
            _2759 = frontier_phi_55_56_ladder;
            _2761 = frontier_phi_55_56_ladder_1;
        }
        float _2766 = isnan(1.0) ? _815 : (isnan(_815) ? 1.0 : min(_815, 1.0));
        _2551 = (_2766 * _2757) + _2003;
        _2553 = (_2766 * _2759) + _2005;
        _2555 = (_2766 * _2761) + _2007;
        _2557 = ((_2751 * 0.039999999105930328369140625) * _2766) + _2336;
        _2559 = ((_2753 * 0.039999999105930328369140625) * _2766) + _2338;
        _2561 = ((_2755 * 0.039999999105930328369140625) * _2766) + _2340;
    }
    else
    {
        _2551 = _2003;
        _2553 = _2005;
        _2555 = _2007;
        _2557 = _2336;
        _2559 = _2338;
        _2561 = _2340;
    }
    float _4479 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _4490 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4501 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    uint _2581 = _263 + 6u;
    float _2589 = _749 / cbSceneParam._m0[86u].x;
    float _2590 = _750 / cbSceneParam._m0[86u].y;
    vec4 _2604 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, (log2((isnan(cbSceneParam._m0[77u].w) ? _684 : (isnan(_684) ? cbSceneParam._m0[77u].w : min(_684, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2606 = _2604.x;
    float _2607 = _2604.y;
    float _2608 = _2604.z;
    float _2609 = _2604.w;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    if (_684 > cbSceneParam._m0[78u].w)
    {
        float _2664 = isnan(_684) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _684 : min(cbSceneParam._m0[80u].w, _684));
        float _2665 = _2664 / _684;
        float _2676 = _2665 * _734;
        float _2677 = _735 * _2665;
        float _2678 = (-0.0) - _2677;
        float _2679 = _2665 * _736;
        float _2681 = (cbSceneParam._m0[77u].w * _2678) / _2664;
        float _2682 = _2681 + cbSceneParam._m0[79u].w;
        float _2683 = cbSceneParam._m0[79u].w - _2677;
        float _2689 = sqrt(((_2676 * _2676) + (_2677 * _2677)) + (_2679 * _2679));
        float _2692 = (1.0 - (cbSceneParam._m0[77u].w / _2664)) * _2689;
        float _2697 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2699 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2852;
        if (abs((_2678 - _2681) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2852 = ((((_2682 > 0.0) ? exp2(_2697 * _2682) : (2.0 - exp2(_2699 * _2682))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2692;
        }
        else
        {
            float _2812 = 1.0 / cbSceneParam._m0[80u].x;
            float _2813 = isnan(_2683) ? _2682 : (isnan(_2682) ? _2683 : max(_2682, _2683));
            float _2814 = isnan(_2683) ? _2682 : (isnan(_2682) ? _2683 : min(_2682, _2683));
            float _2823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : min(_2813, 0.0));
            float _2824 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : min(_2814, 0.0));
            _2852 = ((abs(_2689 / _2678) * cbSceneParam._m0[80u].y) * ((((_2823 - _2824) * 2.0) - ((exp2(_2697 * (isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0)))) - exp2(_2697 * (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))))) * _2812)) - ((exp2(_2699 * _2823) - exp2(_2699 * _2824)) * _2812))) + (_2692 * cbSceneParam._m0[80u].z);
        }
        vec4 _2854 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, 1.0), 0.0);
        float _2863 = exp2((_2852 * (-1.44269502162933349609375)) * (1.0 - _2854.w));
        float _2864 = log2(_2863);
        float _2880 = log2(_2609);
        _2701 = (exp2(_2880 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].x)) * _2854.x) / cbSceneParam._m0[78u].x)) + _2606;
        _2703 = (exp2(_2880 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].y)) * _2854.y) / cbSceneParam._m0[78u].y)) + _2607;
        _2705 = (exp2(_2880 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2864 * cbSceneParam._m0[78u].z)) * _2854.z) / cbSceneParam._m0[78u].z)) + _2608;
        _2707 = _2863 * _2609;
    }
    else
    {
        _2701 = _2606;
        _2703 = _2607;
        _2705 = _2608;
        _2707 = _2609;
    }
    float _2719 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2720 = _2719 == 3.0;
    float _2721 = log2(_2707);
    float _2728 = exp2(_2721 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2551 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _815))) + ((_2557 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1620)) * cbPerFrame._m0[3u].x));
    float _2729 = exp2(_2721 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2553 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _815))) + ((_2559 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1620)) * cbPerFrame._m0[3u].x));
    float _2730 = exp2(_2721 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2555 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _815))) + ((_2561 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1620)) * cbPerFrame._m0[3u].x));
    float _2739 = (_2719 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2739 * (_2720 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2701)));
    SV_Target.y = _2739 * (_2720 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2703)));
    SV_Target.z = _2739 * (_2720 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2705)));
    SV_Target.w = cbInstanceData._m0[_2581].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2581].w;
}


