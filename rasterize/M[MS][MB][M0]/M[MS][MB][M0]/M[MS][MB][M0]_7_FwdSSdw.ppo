#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1056;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _248 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3390 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3401 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3412 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _278) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _279) + cbTextureTilingScale._m0[13u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _320 = _315.x * cbMtdParam._m0[9u].x;
    float _321 = _315.y * cbMtdParam._m0[9u].y;
    float _322 = _315.z * cbMtdParam._m0[9u].z;
    float _326 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _292.x) * _320;
    float _329 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _292.y) * _321;
    float _332 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _292.z) * _322;
    float _339 = ((_320 - _326) * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) + _326;
    float _340 = ((_321 - _329) * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) + _329;
    float _341 = ((_322 - _332) * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) + _332;
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _380 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _384 = _380.z;
    float _388 = (_380.x * 2.0) + (-1.0);
    float _389 = (_380.y * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3423 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _395 = sqrt(1.0 - (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))));
    float _400 = _388 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_354.x * 2.0) + (-1.0)));
    float _401 = _389 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_354.y * 2.0) + (-1.0)));
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _416 = _414.x;
    float _417 = 1.0 - _416;
    float _448 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_416 - _417) * cbMtdParam._m0[24u].w) + _417) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3434 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _457 = ((((cbMtdParam._m0[10u].x - _339) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _449) + _339;
    float _458 = ((((cbMtdParam._m0[10u].y - _340) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _449) + _340;
    float _459 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _341)) * _449) + _341;
    float _464 = (((_354.z - _384) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _384;
    float _468 = ((cbMtdParam._m0[23u].y - _464) * _449) + _464;
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _496 = (_490.x * 2.0) + (-1.0);
    float _497 = (_490.y * 2.0) + (-1.0);
    float _498 = dot(vec2(_496, _497), vec2(_496, _497));
    float _3445 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _514 = (_449 * (((cbMtdParam._m0[22u].z * _400) - _400) + _496)) + _400;
    float _515 = (_449 * (((cbMtdParam._m0[22u].z * _401) - _401) + _497)) + _401;
    float _516 = (_449 * (sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) - _395)) + _395;
    float _518 = cbMtdParam._m0[22u].x + _380.w;
    float _521 = fma(_516, _227 * NORMAL.x, fma(_515, _234 * TANGENT.x, (_220 * _212) * _514));
    float _524 = fma(_516, _227 * NORMAL.y, fma(_515, _234 * TANGENT.y, (_220 * _213) * _514));
    float _527 = fma(_516, _227 * NORMAL.z, fma(_515, _234 * TANGENT.z, (_220 * _214) * _514));
    float _531 = inversesqrt(dot(vec3(_521, _524, _527), vec3(_521, _524, _527)));
    float _532 = _531 * _521;
    float _533 = _531 * _524;
    float _534 = _531 * _527;
    float _3456 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _535 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _3467 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3478 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3489 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3500 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _553 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _594 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _604 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _594);
    float _605 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _594);
    float _606 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _594);
    float _610 = inversesqrt(dot(vec3(_604, _605, _606), vec3(_604, _605, _606)));
    float _611 = _604 * _610;
    float _612 = _605 * _610;
    float _613 = _606 * _610;
    float _619 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _620 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _641 = fma(_534, cbSceneParam._m0[5u].z, fma(_533, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _532));
    float _644 = fma(_534, cbSceneParam._m0[6u].z, fma(_533, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _532));
    float _647 = fma(_534, cbSceneParam._m0[7u].z, fma(_533, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _532));
    uint _661 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _667 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_661].x;
    float _668 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_661].y;
    float _669 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_661].z;
    float _3511 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _3522 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _672 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    vec4 _681 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _619, cbSceneParam._m0[86u].y * _620));
    float _685 = ((isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * TEXCOORD_5.w) * _681.x;
    float _686 = dot(vec3(_532, _533, _534), vec3(_611, _612, _613));
    float _689 = _686 * 2.0;
    float _693 = (_689 * _532) - _611;
    float _694 = (_689 * _533) - _612;
    float _695 = (_689 * _534) - _613;
    float _699 = abs(dot(vec3(_611, _612, _613), vec3(_532, _533, _534)));
    float _3544 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _701 = sqrt(_535);
    float _714 = exp2((_701 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_701 * 3.0));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1055;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _780 = fma(_754, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _746));
        float _784 = fma(_754, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _746));
        float _788 = fma(_754, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _746));
        float _813 = _746 + _532;
        float _814 = _750 + _533;
        float _815 = _754 + _534;
        float _825 = fma(_815, cbModelParam._m0[26u].z, fma(_814, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _813)) - _780;
        float _826 = fma(_815, cbModelParam._m0[27u].z, fma(_814, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _813)) - _784;
        float _827 = fma(_815, cbModelParam._m0[28u].z, fma(_814, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _813)) - _788;
        float _831 = inversesqrt(dot(vec3(_825, _826, _827), vec3(_825, _826, _827)));
        float _844 = ((_831 * _825) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_780 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _845 = ((_831 * _826) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_784 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _846 = ((_831 * _827) / cbModelParam._m0[34u].z) + ((((((_788 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_844, _845, _846), 0.0);
        float _883 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_849.x + (-0.5));
        float _885 = _883 * (_849.y + (-0.5));
        float _886 = _883 * (_849.z + (-0.5));
        float _893 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_856.x + (-0.5));
        float _895 = _893 * (_856.y + (-0.5));
        float _896 = _893 * (_856.z + (-0.5));
        float _903 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_863.x + (-0.5));
        float _905 = _903 * (_863.y + (-0.5));
        float _906 = _903 * (_863.z + (-0.5));
        float _913 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_870.x + (-0.5));
        float _915 = _913 * (_870.y + (-0.5));
        float _916 = _913 * (_870.z + (-0.5));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = _884 * 0.5;
        float _921 = _894 * 0.5;
        float _922 = _904 * 0.5;
        float _923 = dot(vec3(_920, _921, _922), vec3(_920, _921, _922));
        float _928 = (_923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_923);
        float _937 = (dot(vec3(_532, _533, _534), vec3(_928 * _920, _928 * _921, _928 * _922)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _947 = sqrt(((_921 * _921) + (_920 * _920)) + (_922 * _922)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3592 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_949 + 1.0))) + _954) * _917;
        float _964 = _885 * 0.5;
        float _965 = _895 * 0.5;
        float _966 = _905 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_532, _533, _534), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_918 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3625 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_991 + 1.0))) + _996) * _918;
        float _1006 = _886 * 0.5;
        float _1007 = _896 * 0.5;
        float _1008 = _906 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1022 = (dot(vec3(_532, _533, _534), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1031 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3658 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1033 + 1.0))) + _1038) * _919;
        _1055 = _886;
        _1057 = _885;
        _1058 = _884;
        _1059 = _896;
        _1060 = _895;
        _1061 = _894;
        _1062 = _906;
        _1063 = _905;
        _1064 = _904;
        _1065 = _919;
        _1066 = _918;
        _1067 = _917;
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
    }
    else
    {
        _1055 = _1056;
        _1057 = _1056;
        _1058 = _1056;
        _1059 = _1056;
        _1060 = _1056;
        _1061 = _1056;
        _1062 = _1056;
        _1063 = _1056;
        _1064 = _1056;
        _1065 = _1056;
        _1066 = _1056;
        _1067 = _1056;
        _1068 = 0.0;
        _1069 = 0.0;
        _1070 = 0.0;
    }
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1095 = fma(_754, cbModelParam._m0[30u].z, fma(_750, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _746));
        float _1099 = fma(_754, cbModelParam._m0[31u].z, fma(_750, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _746));
        float _1103 = fma(_754, cbModelParam._m0[32u].z, fma(_750, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _746));
        float _1126 = _746 + _532;
        float _1127 = _750 + _533;
        float _1128 = _754 + _534;
        float _1138 = fma(_1128, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1126)) - _1095;
        float _1139 = fma(_1128, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1126)) - _1099;
        float _1140 = fma(_1128, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1126)) - _1103;
        float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
        float _1157 = ((_1144 * _1138) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1095 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1144 * _1139) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1099 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1159 = ((_1144 * _1140) / cbModelParam._m0[35u].z) + ((((((_1103 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1157, _1158, _1159), 0.0);
        float _1194 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1161.x + (-0.5));
        float _1196 = _1194 * (_1161.y + (-0.5));
        float _1197 = _1194 * (_1161.z + (-0.5));
        float _1204 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1168.x + (-0.5));
        float _1206 = _1204 * (_1168.y + (-0.5));
        float _1207 = _1204 * (_1168.z + (-0.5));
        float _1214 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1175.x + (-0.5));
        float _1216 = _1214 * (_1175.y + (-0.5));
        float _1217 = _1214 * (_1175.z + (-0.5));
        float _1224 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1182.x + (-0.5));
        float _1226 = _1224 * (_1182.y + (-0.5));
        float _1227 = _1224 * (_1182.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_532, _533, _534), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3721 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1258 + 1.0))) + _1263) * _1228;
        float _1273 = _1196 * 0.5;
        float _1274 = _1206 * 0.5;
        float _1275 = _1216 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_532, _533, _534), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3754 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1300 + 1.0))) + _1305) * _1229;
        float _1315 = _1197 * 0.5;
        float _1316 = _1207 * 0.5;
        float _1317 = _1217 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_532, _533, _534), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3787 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1342 + 1.0))) + _1347) * _1230;
        _1364 = _1197;
        _1365 = _1196;
        _1366 = _1195;
        _1367 = _1207;
        _1368 = _1206;
        _1369 = _1205;
        _1370 = _1217;
        _1371 = _1216;
        _1372 = _1215;
        _1373 = _1230;
        _1374 = _1229;
        _1375 = _1228;
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1377 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1378 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    }
    else
    {
        _1364 = _1056;
        _1365 = _1056;
        _1366 = _1056;
        _1367 = _1056;
        _1368 = _1056;
        _1369 = _1056;
        _1370 = _1056;
        _1371 = _1056;
        _1372 = _1056;
        _1373 = _1056;
        _1374 = _1056;
        _1375 = _1056;
        _1376 = 0.0;
        _1377 = 0.0;
        _1378 = 0.0;
    }
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1068)) + _1068;
    float _1389 = (cbModelParam._m0[1u].x * (_1377 - _1069)) + _1069;
    float _1390 = (cbModelParam._m0[1u].x * (_1378 - _1070)) + _1070;
    float _1411 = fma(_1390, cbSceneParam._m0[89u].z, fma(_1389, cbSceneParam._m0[89u].y, _1388 * cbSceneParam._m0[89u].x));
    float _1414 = fma(_1390, cbSceneParam._m0[90u].z, fma(_1389, cbSceneParam._m0[90u].y, _1388 * cbSceneParam._m0[90u].x));
    float _1417 = fma(_1390, cbSceneParam._m0[91u].z, fma(_1389, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1388));
    float _1432 = _693 * 0.5;
    float _1433 = _694 * 0.5;
    float _1434 = _695 * 0.5;
    float _1435 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1366, _1369, _1372, _1375));
    float _1438 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1365, _1368, _1371, _1374));
    float _1441 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1475;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1448 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1055, _1059, _1062, _1065));
        float _1452 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1456 = dot(vec4(_1432, _1433, _1434, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1463 = dot(vec4(cbModelParam._m0[39u]), vec4(_1432, _1433, _1434, 1.0));
        _1475 = dot(vec3(isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1463) ? 0.0 : (isnan(0.0) ? _1463 : max(0.0, _1463))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1475 = 1.0;
    }
    float _1486;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1477 = dot(vec4(cbModelParam._m0[40u]), vec4(_1432, _1433, _1434, 1.0));
        _1486 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1477) ? 0.0 : (isnan(0.0) ? _1477 : max(0.0, _1477))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1486 = 1.0;
    }
    float _1490 = (_1486 * cbModelParam._m0[1u].x) + (_1475 * (1.0 - cbModelParam._m0[1u].x));
    float _1500 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _535);
    float _1501 = isnan(_1500) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1500 : min(cbModelParam._m0[25u].z, _1500));
    float _1583;
    float _1585;
    float _1587;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1550 = fma(_754, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746)) + cbModelParam._m0[13u].w;
        float _1554 = fma(_754, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746)) + cbModelParam._m0[14u].w;
        float _1558 = fma(_754, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746)) + cbModelParam._m0[15u].w;
        float _1561 = fma(_695, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693));
        float _1564 = fma(_695, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693));
        float _1567 = fma(_695, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693));
        float _1595;
        if (_1561 > 0.0)
        {
            _1595 = abs((1.0 - _1550) / _1561);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1550 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1595 = frontier_phi_14_12_ladder;
        }
        float _1820;
        if (_1564 > 0.0)
        {
            _1820 = abs((1.0 - _1554) / _1564);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1554 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1820 = frontier_phi_23_19_ladder;
        }
        float _2066;
        if (_1567 > 0.0)
        {
            _2066 = abs((1.0 - _1558) / _1567);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1558 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2066 = frontier_phi_35_30_ladder;
        }
        float _2068 = isnan(_1820) ? _1595 : (isnan(_1595) ? _1820 : min(_1595, _1820));
        float _2069 = isnan(_2066) ? _2068 : (isnan(_2068) ? _2066 : min(_2068, _2066));
        float _2073 = (_2069 * _1561) + _1550;
        float _2074 = (_2069 * _1564) + _1554;
        float _2075 = (_2069 * _1567) + _1558;
        float _2076 = _2069 * 9.9999997473787516355514526367188e-05;
        float _2078 = (-1.0) - _2076;
        float _2080 = _2076 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2075 > _2080) || ((_2075 < _2078) || ((_2074 > _2080) || ((_2074 < _2078) || ((_2073 < _2078) || (_2073 > _2080))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2199 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2075, cbModelParam._m0[9u].z, fma(_2074, cbModelParam._m0[9u].y, _2073 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2075, cbModelParam._m0[10u].z, fma(_2074, cbModelParam._m0[10u].y, _2073 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2075, cbModelParam._m0[11u].z, fma(_2074, cbModelParam._m0[11u].y, _2073 * cbModelParam._m0[11u].x))), _1501);
            frontier_phi_13_35_ladder = _2199.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2199.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2199.x * cbModelParam._m0[1u].y;
        }
        _1583 = frontier_phi_13_35_ladder_2;
        _1585 = frontier_phi_13_35_ladder_1;
        _1587 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1571 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_693, _694, _695), _1501);
        _1583 = _1571.x * cbModelParam._m0[1u].y;
        _1585 = _1571.y * cbModelParam._m0[1u].y;
        _1587 = _1571.z * cbModelParam._m0[1u].y;
    }
    float _1591 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _535);
    float _1592 = isnan(_1591) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1591 : min(cbModelParam._m0[25u].w, _1591));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1647 = fma(_754, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746)) + cbModelParam._m0[21u].w;
        float _1651 = fma(_754, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746)) + cbModelParam._m0[22u].w;
        float _1655 = fma(_754, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746)) + cbModelParam._m0[23u].w;
        float _1658 = fma(_695, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693));
        float _1661 = fma(_695, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693));
        float _1664 = fma(_695, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693));
        float _1825;
        if (_1658 > 0.0)
        {
            _1825 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1825 = frontier_phi_25_21_ladder;
        }
        float _2093;
        if (_1661 > 0.0)
        {
            _2093 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2093 = frontier_phi_37_32_ladder;
        }
        float _2298;
        if (_1664 > 0.0)
        {
            _2298 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2298 = frontier_phi_46_43_ladder;
        }
        float _2300 = isnan(_2093) ? _1825 : (isnan(_1825) ? _2093 : min(_1825, _2093));
        float _2301 = isnan(_2298) ? _2300 : (isnan(_2300) ? _2298 : min(_2300, _2298));
        float _2305 = (_2301 * _1658) + _1647;
        float _2306 = (_2301 * _1661) + _1651;
        float _2307 = (_2301 * _1664) + _1655;
        float _2308 = _2301 * 9.9999997473787516355514526367188e-05;
        float _2309 = (-1.0) - _2308;
        float _2311 = _2308 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2307 > _2311) || ((_2307 < _2309) || ((_2306 > _2311) || ((_2306 < _2309) || ((_2305 < _2309) || (_2305 > _2311))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2506 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2307, cbModelParam._m0[17u].z, fma(_2306, cbModelParam._m0[17u].y, _2305 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2307, cbModelParam._m0[18u].z, fma(_2306, cbModelParam._m0[18u].y, _2305 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2307, cbModelParam._m0[19u].z, fma(_2306, cbModelParam._m0[19u].y, _2305 * cbModelParam._m0[19u].x))), _1592);
            frontier_phi_22_46_ladder = _2506.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2506.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2506.x * cbModelParam._m0[1u].z;
        }
        _1683 = frontier_phi_22_46_ladder_2;
        _1685 = frontier_phi_22_46_ladder_1;
        _1687 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_693, _694, _695), _1592);
        _1683 = _1667.x * cbModelParam._m0[1u].z;
        _1685 = _1667.y * cbModelParam._m0[1u].z;
        _1687 = _1667.z * cbModelParam._m0[1u].z;
    }
    float _1699 = ((((1.0 - _714) * ((_701 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_714 * _701)) * _685;
    float _1700 = _1699 * ((cbModelParam._m0[1u].w * (_1683 - _1583)) + _1583);
    float _1701 = _1699 * ((cbModelParam._m0[1u].w * (_1685 - _1585)) + _1585);
    float _1702 = _1699 * ((cbModelParam._m0[1u].w * (_1687 - _1587)) + _1587);
    float _1705 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, _1700 * cbSceneParam._m0[91u].x));
    vec4 _1719 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_619, _620));
    float _1721 = _1719.w;
    float _1733 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1721);
    float _1734 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1721);
    float _1735 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1721);
    uvec4 _1739 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _1741 = _1739.x * 14u;
    uint _1742 = _1741 + 13u;
    float _1749 = _685 + (-1.0);
    float _1754 = (cbLight._m0[_1742].x * _1749) + 1.0;
    float _1755 = (cbLight._m0[_1742].y * _1749) + 1.0;
    float _1756 = (cbLight._m0[_1742].z * _1749) + 1.0;
    float _1757 = (cbLight._m0[_1742].w * _1749) + 1.0;
    uint _1758 = _1741 + 5u;
    float _1764 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
    uint _1768 = _1741 + 4u;
    float _1778 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
    uint _1782 = _1741 | 1u;
    float _1793 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_532, _533, _534));
    float _1796 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_532, _533, _534));
    float _3923 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _3934 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1801 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 0.3183098733425140380859375;
    float _1803 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _1810 = ((cbLight._m0[_1758].x * _1764) * _1803) + (((cbLight._m0[_1768].x * _1733) * _1778) * _1801);
    float _1811 = ((_1764 * cbLight._m0[_1758].y) * _1803) + (((cbLight._m0[_1768].y * _1734) * _1778) * _1801);
    float _1812 = ((_1764 * cbLight._m0[_1758].z) * _1803) + (((cbLight._m0[_1768].z * _1735) * _1778) * _1801);
    uvec4 _1817 = floatBitsToUint(cbLight._m0[_1741 + 12u]);
    bool _1819 = _1817.x == 0u;
    float _1830;
    float _1832;
    float _1834;
    if (_1819)
    {
        _1830 = _1810;
        _1832 = _1811;
        _1834 = _1812;
    }
    else
    {
        uint _1838 = _1741 + 6u;
        float _1854 = (dot(vec3(cbLight._m0[_1741 + 2u].xyz), vec3(_532, _533, _534)) * 0.5) + 0.5;
        float _1855 = _1854 * _1854;
        float _3945 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1857 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _1830 = (((cbLight._m0[_1838].x * 0.3183098733425140380859375) * _1856) * _1857) + _1810;
        _1832 = (((cbLight._m0[_1838].y * 0.3183098733425140380859375) * _1856) * _1857) + _1811;
        _1834 = (((cbLight._m0[_1838].z * 0.3183098733425140380859375) * _1856) * _1857) + _1812;
    }
    bool _1837 = _1817.y == 0u;
    float _1875;
    float _1877;
    float _1879;
    if (_1837)
    {
        _1875 = _1830;
        _1877 = _1832;
        _1879 = _1834;
    }
    else
    {
        uint _2037 = _1741 + 7u;
        float _2053 = (dot(vec3(cbLight._m0[_1741 + 3u].xyz), vec3(_532, _533, _534)) * 0.5) + 0.5;
        float _2054 = _2053 * _2053;
        float _3961 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2055 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _2056 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
        _1875 = (((cbLight._m0[_2037].x * 0.3183098733425140380859375) * _2055) * _2056) + _1830;
        _1877 = (((cbLight._m0[_2037].y * 0.3183098733425140380859375) * _2055) * _2056) + _1832;
        _1879 = (((cbLight._m0[_2037].z * 0.3183098733425140380859375) * _2055) * _2056) + _1834;
    }
    uint _1882 = _1741 + 8u;
    float _1895 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1741].w)) * _535) * 0.949999988079071044921875);
    float _1896 = _1895 * _1895;
    float _1897 = cbLight._m0[_1741].x + _611;
    float _1898 = cbLight._m0[_1741].y + _612;
    float _1899 = cbLight._m0[_1741].z + _613;
    float _1903 = inversesqrt(dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899)));
    float _1904 = _1903 * _1897;
    float _1905 = _1903 * _1898;
    float _1906 = _1903 * _1899;
    float _1907 = dot(vec3(_532, _533, _534), vec3(cbLight._m0[_1741].xyz));
    float _3977 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _1911 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1912 = dot(vec3(_532, _533, _534), vec3(_1904, _1905, _1906));
    float _3999 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1916 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_1904, _1905, _1906));
    float _4010 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1920 = _1896 * _1896;
    float _1924 = ((_1915 * _1915) * (_1920 + (-1.0))) + 1.0;
    float _1935 = (exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1936 = 1.0 - _1896;
    float _1947 = (0.5 / (((_1911 * ((_1910 * _1936) + _1896)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _1936) + _1896) * _1910))) * _1910;
    float _4021 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1949 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1920 / ((_1924 * _1924) * 3.141590118408203125));
    uint _1963 = _1741 + 9u;
    float _1974 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _535) * 0.949999988079071044921875);
    float _1975 = _1974 * _1974;
    float _1976 = cbLight._m0[_1782].x + _611;
    float _1977 = cbLight._m0[_1782].y + _612;
    float _1978 = cbLight._m0[_1782].z + _613;
    float _1982 = inversesqrt(dot(vec3(_1976, _1977, _1978), vec3(_1976, _1977, _1978)));
    float _1983 = _1982 * _1976;
    float _1984 = _1982 * _1977;
    float _1985 = _1982 * _1978;
    float _1986 = dot(vec3(_532, _533, _534), vec3(cbLight._m0[_1782].xyz));
    float _4032 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1989 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1990 = dot(vec3(_532, _533, _534), vec3(_1983, _1984, _1985));
    float _4043 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1994 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1983, _1984, _1985));
    float _4054 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1998 = _1975 * _1975;
    float _2002 = ((_1993 * _1993) * (_1998 + (-1.0))) + 1.0;
    float _2011 = (exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2012 = 1.0 - _1975;
    float _2022 = (0.5 / (((_1911 * ((_1989 * _2012) + _1975)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2012) + _1975) * _1989))) * _1989;
    float _4065 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2024 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1998 / ((_2002 * _2002) * 3.141590118408203125));
    float _2034 = (((_2011 * cbLight._m0[_1963].x) * _2024) * _1764) + ((((cbLight._m0[_1882].x * _1733) * _1935) * _1949) * _1778);
    float _2035 = (((_2011 * cbLight._m0[_1963].y) * _2024) * _1764) + ((((cbLight._m0[_1882].y * _1734) * _1935) * _1949) * _1778);
    float _2036 = (((_2011 * cbLight._m0[_1963].z) * _2024) * _1764) + ((((cbLight._m0[_1882].z * _1735) * _1935) * _1949) * _1778);
    float _2098;
    float _2100;
    float _2102;
    if (_1819)
    {
        _2098 = _2034;
        _2100 = _2035;
        _2102 = _2036;
    }
    else
    {
        uint _2104 = _1741 + 2u;
        uint _2108 = _1741 + 10u;
        float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _535) * 0.949999988079071044921875);
        float _2123 = _2122 * _2122;
        float _2124 = cbLight._m0[_2104].x + _611;
        float _2125 = cbLight._m0[_2104].y + _612;
        float _2126 = cbLight._m0[_2104].z + _613;
        float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
        float _2131 = _2130 * _2124;
        float _2132 = _2130 * _2125;
        float _2133 = _2130 * _2126;
        float _2134 = dot(vec3(_532, _533, _534), vec3(cbLight._m0[_2104].xyz));
        float _4076 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2138 = dot(vec3(_532, _533, _534), vec3(_2131, _2132, _2133));
        float _4087 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2142 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2131, _2132, _2133));
        float _4098 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2146 = _2123 * _2123;
        float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
        float _2159 = (exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2160 = 1.0 - _2123;
        float _2170 = (0.5 / (((_1911 * ((_2137 * _2160) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2160) + _2123) * _2137))) * _2137;
        float _4109 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2172 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
        float _2173 = isnan(1.0) ? _1756 : (isnan(_1756) ? 1.0 : min(_1756, 1.0));
        _2098 = (((_2159 * cbLight._m0[_2108].x) * _2172) * _2173) + _2034;
        _2100 = (((_2159 * cbLight._m0[_2108].y) * _2172) * _2173) + _2035;
        _2102 = (((_2159 * cbLight._m0[_2108].z) * _2172) * _2173) + _2036;
    }
    float _2208;
    float _2210;
    float _2212;
    if (_1837)
    {
        _2208 = _2098;
        _2210 = _2100;
        _2212 = _2102;
    }
    else
    {
        uint _2219 = _1741 + 3u;
        uint _2223 = _1741 + 11u;
        float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _535) * 0.949999988079071044921875);
        float _2238 = _2237 * _2237;
        float _2239 = cbLight._m0[_2219].x + _611;
        float _2240 = cbLight._m0[_2219].y + _612;
        float _2241 = cbLight._m0[_2219].z + _613;
        float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
        float _2246 = _2245 * _2239;
        float _2247 = _2245 * _2240;
        float _2248 = _2245 * _2241;
        float _2249 = dot(vec3(_532, _533, _534), vec3(cbLight._m0[_2219].xyz));
        float _4125 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2253 = dot(vec3(_532, _533, _534), vec3(_2246, _2247, _2248));
        float _4136 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2256 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2257 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2246, _2247, _2248));
        float _4147 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2261 = _2238 * _2238;
        float _2265 = ((_2256 * _2256) * (_2261 + (-1.0))) + 1.0;
        float _2274 = (exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2275 = 1.0 - _2238;
        float _2285 = (0.5 / (((_1911 * ((_2252 * _2275) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_1911 * _2275) + _2238) * _2252))) * _2252;
        float _4158 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2287 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2261 / ((_2265 * _2265) * 3.141590118408203125));
        float _2288 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
        _2208 = (((_2274 * cbLight._m0[_2223].x) * _2287) * _2288) + _2098;
        _2210 = (((_2274 * cbLight._m0[_2223].y) * _2287) * _2288) + _2100;
        _2212 = (((_2274 * cbLight._m0[_2223].z) * _2287) * _2288) + _2102;
    }
    float _2423;
    float _2425;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    if (_1739.y == 0u)
    {
        float _2363 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2364 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2363;
        float _2365 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2363;
        float _2366 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2363;
        uvec4 _2378 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2379 = _2378.x;
        uint _2390 = uint((float(_2378.y) * floor(float(uint(cbSceneParam._m0[85u].y * _620) / _2379))) + floor(float(uint(cbSceneParam._m0[85u].x * _619) / _2379)));
        float _2400 = (log2(_2366 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2401 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        uint _2404 = uint(isnan(14.0) ? _2401 : (isnan(_2401) ? 14.0 : min(_2401, 14.0)));
        uvec4 _2409 = texelFetch(g_lightClusterGridBuffer, int(((_2404 << 2u) + (_2390 << 6u)) >> 2u));
        uint _2410 = _2409.x;
        uint _2411 = _2378.z;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        if (((((1u << ((_2411 >> 4u) & 15u)) + 4294967295u) & _2410) == 0u) || ((_2411 & 240u) == 0u))
        {
            _2511 = 0.0;
            _2513 = 0.0;
            _2515 = 0.0;
            _2517 = 0.0;
            _2519 = 0.0;
            _2521 = 0.0;
        }
        else
        {
            float _2512;
            float _2514;
            float _2516;
            float _2518;
            float _2520;
            float _2522;
            float _2656 = 0.0;
            float _2657 = 0.0;
            float _2658 = 0.0;
            float _2659 = 0.0;
            float _2660 = 0.0;
            float _2661 = 0.0;
            uint _2662 = 0u;
            uint _2671;
            bool _2672;
            for (;;)
            {
                _2671 = texelFetch(g_lightClassification, int((((_2404 << 5u) + (_2390 << 9u)) + (_2662 << 2u)) >> 2u)).x;
                _2672 = _2671 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2672)
                {
                    frontier_phi_61_pred = _2656;
                    frontier_phi_61_pred_1 = _2661;
                    frontier_phi_61_pred_2 = _2660;
                    frontier_phi_61_pred_3 = _2659;
                    frontier_phi_61_pred_4 = _2658;
                    frontier_phi_61_pred_5 = _2657;
                }
                else
                {
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    uint _2786;
                    _2780 = _2656;
                    _2781 = _2657;
                    _2782 = _2658;
                    _2783 = _2659;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2671;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    for (;;)
                    {
                        uint _2790 = uint(findLSB(_2786)) + (_2662 << 5u);
                        uint _2787 = (_2786 + 4294967295u) & _2786;
                        uint _2792 = _2790 * 48u;
                        vec4 _2806 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2792)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2792 + 3u)).x));
                        uint _2812 = (_2790 * 48u) + 4u;
                        vec4 _2825 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2831 = (_2790 * 48u) + 8u;
                        vec3 _2842 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x));
                        float _2846 = _2806.x - _2364;
                        float _2847 = _2806.y - _2365;
                        float _2848 = _2806.z - _2366;
                        float _2849 = dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848));
                        float _2852 = inversesqrt(_2849);
                        float _2853 = _2852 * _2846;
                        float _2854 = _2852 * _2847;
                        float _2855 = _2852 * _2848;
                        float _2856 = dot(vec3(_641, _644, _647), vec3(_2853, _2854, _2855));
                        float _2861 = 1.0 - (_2849 * _2806.w);
                        float _4184 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2862 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2863 = sqrt(_2849) * _2825.w;
                        float _2866 = 1.39999997615814208984375 / (_2863 + 1.39999997615814208984375);
                        float _2867 = _2866 * _2866;
                        float _2870 = ((1.0 - _2867) * _2856) + _2867;
                        float _2873 = _2863 * _2863;
                        float _2877 = ((isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0))) * _2862) / ((_2873 * 0.699999988079071044921875) + 1.0);
                        float _2881 = (-0.0) - _2364;
                        float _2882 = (-0.0) - _2365;
                        float _2883 = (-0.0) - _2366;
                        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
                        float _2888 = _2887 * _2881;
                        float _2889 = _2887 * _2882;
                        float _2890 = _2887 * _2883;
                        float _2898 = exp2(log2(1.0 / ((_2873 * 3.5) + 5.0)) * 0.25);
                        float _2899 = 1.0 - _701;
                        float _2906 = sqrt(1.0 - ((1.0 - (_2899 * _2899)) * (1.0 - (_2898 * _2898))));
                        float _2907 = _2906 * _2906;
                        float _2908 = _2907 * _2907;
                        float _2909 = _2888 + _2853;
                        float _2910 = _2889 + _2854;
                        float _2911 = _2890 + _2855;
                        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
                        float _2919 = dot(vec3(_641, _644, _647), vec3(_2888, _2889, _2890));
                        float _4200 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2922 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2923 = dot(vec3(_641, _644, _647), vec3(_2915 * _2909, _2915 * _2910, _2915 * _2911));
                        float _4211 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2926 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2930 = ((_2926 * _2926) * (_2908 + (-1.0))) + 1.0;
                        float _2931 = _2866 * _2907;
                        float _2932 = _2931 * _2931;
                        float _2935 = ((1.0 - _2932) * _2856) + _2932;
                        float _4222 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2936 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2937 = 1.0 - _2907;
                        float _2947 = (0.5 / (((_2936 * ((_2922 * _2937) + _2907)) + 9.9999999392252902907785028219223e-09) + (((_2936 * _2937) + _2907) * _2922))) * _2936;
                        float _4233 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2958 = (((_2908 * 3.1415927410125732421875) * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) / ((_2930 * _2930) * ((_2873 * 2.1991131305694580078125) + 3.141590118408203125))) * _2862;
                        _2715 = (_2877 * _2825.x) + _2783;
                        _2716 = (_2877 * _2825.y) + _2784;
                        _2717 = (_2877 * _2825.z) + _2785;
                        _2712 = (_2958 * _2842.x) + _2780;
                        _2713 = (_2958 * _2842.y) + _2781;
                        _2714 = (_2958 * _2842.z) + _2782;
                        if (_2787 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2780 = _2712;
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2787;
                        }
                    }
                    frontier_phi_61_pred = _2712;
                    frontier_phi_61_pred_1 = _2717;
                    frontier_phi_61_pred_2 = _2716;
                    frontier_phi_61_pred_3 = _2715;
                    frontier_phi_61_pred_4 = _2714;
                    frontier_phi_61_pred_5 = _2713;
                }
                _2512 = frontier_phi_61_pred;
                _2522 = frontier_phi_61_pred_1;
                _2520 = frontier_phi_61_pred_2;
                _2518 = frontier_phi_61_pred_3;
                _2516 = frontier_phi_61_pred_4;
                _2514 = frontier_phi_61_pred_5;
                uint _2663 = _2662 + 1u;
                if (_2663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2656 = _2512;
                    _2657 = _2514;
                    _2658 = _2516;
                    _2659 = _2518;
                    _2660 = _2520;
                    _2661 = _2522;
                    _2662 = _2663;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2511 = _2512;
            _2513 = _2514;
            _2515 = _2516;
            _2517 = _2518;
            _2519 = _2520;
            _2521 = _2522;
        }
        uvec4 _2525 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2526 = _2525.z;
        uint _2528 = (_2526 >> 8u) & 15u;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        if (((4294967295u << _2528) & _2410) == 0u)
        {
            _2624 = _2511;
            _2626 = _2513;
            _2628 = _2515;
            _2630 = _2517;
            _2632 = _2519;
            _2634 = _2521;
        }
        else
        {
            float _2649 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
            float _2650 = _2649 * _2364;
            float _2651 = _2649 * _2365;
            float _2652 = _2649 * _2366;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2528 < ((_2526 >> 12u) & 15u))
            {
                float _2625;
                float _2627;
                float _2629;
                float _2631;
                float _2633;
                float _2635;
                float _2763 = _2511;
                float _2764 = _2513;
                float _2765 = _2515;
                float _2766 = _2517;
                float _2767 = _2519;
                float _2768 = _2521;
                uint _2769 = _2528;
                uint _2778;
                bool _2779;
                for (;;)
                {
                    _2778 = texelFetch(g_lightClassification, int((((_2404 << 5u) + (_2390 << 9u)) + (_2769 << 2u)) >> 2u)).x;
                    _2779 = _2778 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2779)
                    {
                        frontier_phi_67_pred = _2766;
                        frontier_phi_67_pred_1 = _2767;
                        frontier_phi_67_pred_2 = _2768;
                        frontier_phi_67_pred_3 = _2765;
                        frontier_phi_67_pred_4 = _2764;
                        frontier_phi_67_pred_5 = _2763;
                    }
                    else
                    {
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _2976 = _2763;
                        float _2977 = _2764;
                        float _2978 = _2765;
                        float _2979 = _2766;
                        float _2980 = _2767;
                        float _2981 = _2768;
                        uint _2982 = _2778;
                        uint _2983;
                        vec4 _3008;
                        float _3009;
                        vec4 _3024;
                        vec3 _3036;
                        vec4 _3051;
                        vec4 _3066;
                        float _3112;
                        bool _3113;
                        for (;;)
                        {
                            uint _2993 = ((_2769 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2982));
                            _2983 = (_2982 + 4294967295u) & _2982;
                            uint _2995 = _2993 * 40u;
                            _3008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2995 + 3u)).x));
                            _3009 = _3008.w;
                            uint _3011 = (_2993 * 40u) + 4u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            uint _3026 = (_2993 * 40u) + 8u;
                            _3036 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x));
                            uint _3038 = (_2993 * 40u) + 16u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3053 = (_2993 * 40u) + 20u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3068 = (_2993 * 40u) + 24u;
                            vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3087 = (_2993 * 40u) + 28u;
                            vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            _3112 = fma(_2366, _3100.z, fma(_2365, _3100.y, _3100.x * _2364)) + _3100.w;
                            _3113 = !((fma(_2366, _3081.z, fma(_2365, _3081.y, _3081.x * _2364)) + _3081.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3113)
                            {
                                float _3140 = _3008.x - _2364;
                                float _3141 = _3008.y - _2365;
                                float _3142 = _3008.z - _2366;
                                float _3143 = dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142));
                                float _3146 = inversesqrt(_3143);
                                float _3147 = _3146 * _3140;
                                float _3148 = _3146 * _3141;
                                float _3149 = _3146 * _3142;
                                float _3153 = 1.0 - (_3143 / (_3009 * _3009));
                                float _4244 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3158 = sqrt(_3143) * _3024.w;
                                float _3160 = 1.39999997615814208984375 / (_3158 + 1.39999997615814208984375);
                                float _3161 = _3160 * _3160;
                                float _3164 = ((1.0 - _3161) * dot(vec3(_3147, _3148, _3149), vec3(_641, _644, _647))) + _3161;
                                float _3167 = _3158 * _3158;
                                float _3171 = (fma(_2366, _3051.z, fma(_2365, _3051.y, _3051.x * _2364)) + _3051.w) / _3112;
                                float _3172 = (fma(_2366, _3066.z, fma(_2365, _3066.y, _3066.x * _2364)) + _3066.w) / _3112;
                                float _3176 = 1.0 - dot(vec2(_3171, _3172), vec2(_3171, _3172));
                                float _4260 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3178 = _3177 * (((isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))) * _3154) / ((_3167 * 0.699999988079071044921875) + 1.0));
                                float _3190 = exp2(log2(1.0 / ((_3167 * 3.5) + 5.0)) * 0.25);
                                float _3191 = 1.0 - _701;
                                float _3198 = sqrt(1.0 - ((1.0 - (_3191 * _3191)) * (1.0 - (_3190 * _3190))));
                                float _3199 = _3198 * _3198;
                                float _3200 = _3199 * _3199;
                                float _3201 = _3147 - _2650;
                                float _3202 = _3148 - _2651;
                                float _3203 = _3149 - _2652;
                                float _3207 = inversesqrt(dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203)));
                                float _3211 = dot(vec3(_641, _644, _647), vec3((-0.0) - _2650, (-0.0) - _2651, (-0.0) - _2652));
                                float _4271 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3214 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3215 = dot(vec3(_641, _644, _647), vec3(_3207 * _3201, _3207 * _3202, _3207 * _3203));
                                float _4282 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3218 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3222 = ((_3218 * _3218) * (_3200 + (-1.0))) + 1.0;
                                float _3223 = _3160 * _3199;
                                float _3224 = _3223 * _3223;
                                float _3230 = ((1.0 - _3224) * dot(vec3(_641, _644, _647), vec3(_3147, _3148, _3149))) + _3224;
                                float _4293 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3232 = 1.0 - _3199;
                                float _3242 = (0.5 / (((_3231 * ((_3214 * _3232) + _3199)) + 9.9999999392252902907785028219223e-09) + (((_3231 * _3232) + _3199) * _3214))) * _3231;
                                float _4304 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3252 = (_3177 * _3154) * (((_3200 * 3.1415927410125732421875) * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) / ((_3222 * _3222) * ((_3167 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3252 * _3036.x;
                                frontier_phi_73_pred_1 = _3252 * _3036.y;
                                frontier_phi_73_pred_2 = _3178 * _3024.z;
                                frontier_phi_73_pred_3 = _3178 * _3024.y;
                                frontier_phi_73_pred_4 = _3178 * _3024.x;
                                frontier_phi_73_pred_5 = _3252 * _3036.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3256 = frontier_phi_73_pred;
                            _3257 = frontier_phi_73_pred_1;
                            _3261 = frontier_phi_73_pred_2;
                            _3260 = frontier_phi_73_pred_3;
                            _3259 = frontier_phi_73_pred_4;
                            _3258 = frontier_phi_73_pred_5;
                            _2966 = _3259 + _2979;
                            _2967 = _3260 + _2980;
                            _2968 = _3261 + _2981;
                            _2963 = _3256 + _2976;
                            _2964 = _3257 + _2977;
                            _2965 = _3258 + _2978;
                            if (_2983 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2983;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2966;
                        frontier_phi_67_pred_1 = _2967;
                        frontier_phi_67_pred_2 = _2968;
                        frontier_phi_67_pred_3 = _2965;
                        frontier_phi_67_pred_4 = _2964;
                        frontier_phi_67_pred_5 = _2963;
                    }
                    _2631 = frontier_phi_67_pred;
                    _2633 = frontier_phi_67_pred_1;
                    _2635 = frontier_phi_67_pred_2;
                    _2629 = frontier_phi_67_pred_3;
                    _2627 = frontier_phi_67_pred_4;
                    _2625 = frontier_phi_67_pred_5;
                    uint _2770 = _2769 + 1u;
                    if (_2770 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2763 = _2625;
                        _2764 = _2627;
                        _2765 = _2629;
                        _2766 = _2631;
                        _2767 = _2633;
                        _2768 = _2635;
                        _2769 = _2770;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2633;
                frontier_phi_55_56_ladder_1 = _2635;
                frontier_phi_55_56_ladder_2 = _2631;
                frontier_phi_55_56_ladder_3 = _2629;
                frontier_phi_55_56_ladder_4 = _2627;
                frontier_phi_55_56_ladder_5 = _2625;
            }
            else
            {
                frontier_phi_55_56_ladder = _2519;
                frontier_phi_55_56_ladder_1 = _2521;
                frontier_phi_55_56_ladder_2 = _2517;
                frontier_phi_55_56_ladder_3 = _2515;
                frontier_phi_55_56_ladder_4 = _2513;
                frontier_phi_55_56_ladder_5 = _2511;
            }
            _2624 = frontier_phi_55_56_ladder_5;
            _2626 = frontier_phi_55_56_ladder_4;
            _2628 = frontier_phi_55_56_ladder_3;
            _2630 = frontier_phi_55_56_ladder_2;
            _2632 = frontier_phi_55_56_ladder;
            _2634 = frontier_phi_55_56_ladder_1;
        }
        float _2639 = isnan(1.0) ? _685 : (isnan(_685) ? 1.0 : min(_685, 1.0));
        _2423 = (_2639 * _2630) + _1875;
        _2425 = (_2639 * _2632) + _1877;
        _2427 = (_2639 * _2634) + _1879;
        _2429 = ((_2624 * 0.039999999105930328369140625) * _2639) + _2208;
        _2431 = ((_2626 * 0.039999999105930328369140625) * _2639) + _2210;
        _2433 = ((_2628 * 0.039999999105930328369140625) * _2639) + _2212;
    }
    else
    {
        _2423 = _1875;
        _2425 = _1877;
        _2427 = _1879;
        _2429 = _2208;
        _2431 = _2210;
        _2433 = _2212;
    }
    float _4320 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4331 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4342 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    uint _2453 = _259 + 6u;
    float _2461 = _619 / cbSceneParam._m0[86u].x;
    float _2462 = _620 / cbSceneParam._m0[86u].y;
    vec4 _2476 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2461, _2462, (log2((isnan(cbSceneParam._m0[77u].w) ? _553 : (isnan(_553) ? cbSceneParam._m0[77u].w : min(_553, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2478 = _2476.x;
    float _2479 = _2476.y;
    float _2480 = _2476.z;
    float _2481 = _2476.w;
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    if (_553 > cbSceneParam._m0[78u].w)
    {
        float _2536 = isnan(_553) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _553 : min(cbSceneParam._m0[80u].w, _553));
        float _2537 = _2536 / _553;
        float _2548 = _2537 * _604;
        float _2549 = _605 * _2537;
        float _2550 = (-0.0) - _2549;
        float _2552 = _2537 * _606;
        float _2554 = (cbSceneParam._m0[77u].w * _2550) / _2536;
        float _2555 = _2554 + cbSceneParam._m0[79u].w;
        float _2556 = cbSceneParam._m0[79u].w - _2549;
        float _2562 = sqrt(((_2548 * _2548) + (_2549 * _2549)) + (_2552 * _2552));
        float _2565 = (1.0 - (cbSceneParam._m0[77u].w / _2536)) * _2562;
        float _2570 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2572 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2725;
        if (abs((_2550 - _2554) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2725 = ((((_2555 > 0.0) ? exp2(_2570 * _2555) : (2.0 - exp2(_2572 * _2555))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2565;
        }
        else
        {
            float _2685 = 1.0 / cbSceneParam._m0[80u].x;
            float _2686 = isnan(_2556) ? _2555 : (isnan(_2555) ? _2556 : max(_2555, _2556));
            float _2687 = isnan(_2556) ? _2555 : (isnan(_2555) ? _2556 : min(_2555, _2556));
            float _2696 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : min(_2686, 0.0));
            float _2697 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : min(_2687, 0.0));
            _2725 = ((abs(_2562 / _2550) * cbSceneParam._m0[80u].y) * ((((_2696 - _2697) * 2.0) - ((exp2(_2570 * (isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0)))) - exp2(_2570 * (isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0))))) * _2685)) - ((exp2(_2572 * _2696) - exp2(_2572 * _2697)) * _2685))) + (_2565 * cbSceneParam._m0[80u].z);
        }
        vec4 _2727 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2461, _2462, 1.0), 0.0);
        float _2736 = exp2((_2725 * (-1.44269502162933349609375)) * (1.0 - _2727.w));
        float _2737 = log2(_2736);
        float _2753 = log2(_2481);
        _2574 = (exp2(_2753 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2737 * cbSceneParam._m0[78u].x)) * _2727.x) / cbSceneParam._m0[78u].x)) + _2478;
        _2576 = (exp2(_2753 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2737 * cbSceneParam._m0[78u].y)) * _2727.y) / cbSceneParam._m0[78u].y)) + _2479;
        _2578 = (exp2(_2753 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2737 * cbSceneParam._m0[78u].z)) * _2727.z) / cbSceneParam._m0[78u].z)) + _2480;
        _2580 = _2736 * _2481;
    }
    else
    {
        _2574 = _2478;
        _2576 = _2479;
        _2578 = _2480;
        _2580 = _2481;
    }
    float _2592 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2593 = _2592 == 3.0;
    float _2594 = log2(_2580);
    float _2601 = exp2(_2594 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2423 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _685))) + ((_2429 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1490)) * cbPerFrame._m0[3u].x));
    float _2602 = exp2(_2594 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2425 + ((isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))) * _685))) + ((_2431 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1490)) * cbPerFrame._m0[3u].x));
    float _2603 = exp2(_2594 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2427 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _685))) + ((_2433 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1490)) * cbPerFrame._m0[3u].x));
    float _2612 = (_2592 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2612 * (_2593 ? _2601 : (_2601 + (cbSceneParam._m0[72u].w * _2574)));
    SV_Target.y = _2612 * (_2593 ? _2602 : (_2602 + (cbSceneParam._m0[72u].w * _2576)));
    SV_Target.z = _2612 * (_2593 ? _2603 : (_2603 + (cbSceneParam._m0[72u].w * _2578)));
    SV_Target.w = cbInstanceData._m0[_2453].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2453].w;
}


