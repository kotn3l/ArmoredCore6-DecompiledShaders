#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1110;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    uint _233 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _233 + 1u;
    uint _242 = _233 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_233].x * cbInstanceData._m0[_233].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _252) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _323 = _319.z;
    float _328 = (_319.x * 2.0) + (-1.0);
    float _330 = (_319.y * 2.0) + (-1.0);
    float _331 = dot(vec2(_328, _330), vec2(_328, _330));
    float _3417 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _337 = sqrt(1.0 - (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))));
    float _340 = fma(_337, _221, fma(_330, _228, _328 * _214));
    float _343 = fma(_337, _222, fma(_330, _229, _328 * _215));
    float _346 = fma(_337, _223, fma(_330, _230, _328 * _216));
    float _350 = inversesqrt(dot(vec3(_340, _343, _346), vec3(_340, _343, _346)));
    vec4 _386 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _388 = _386.x;
    float _389 = 1.0 - _388;
    float _398 = (cbMtdParam._m0[19u].x + dot(vec4(_350 * _340, _350 * _343, _350 * _346, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_388 - _389) * cbMtdParam._m0[24u].z) + _389) * cbMtdParam._m0[21u].z);
    float _3428 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _401 = (-0.0) - cbMtdParam._m0[24u].y;
    float _403 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _404 = isnan(1.0) ? _403 : (isnan(_403) ? 1.0 : min(_403, 1.0));
    float _411 = _399 - ((_399 * TEXCOORD_8.x) * _404);
    float _412 = _399 - ((_399 * TEXCOORD_8.y) * _404);
    float _413 = _399 - ((_399 * TEXCOORD_8.z) * _404);
    float _420 = (_411 * ((_299.x * cbMtdParam._m0[18u].x) - _278)) + _278;
    float _421 = (_412 * ((_299.y * cbMtdParam._m0[18u].y) - _279)) + _279;
    float _422 = (_413 * ((_299.z * cbMtdParam._m0[18u].z) - _280)) + _280;
    vec4 _434 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _252) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _253) + cbTextureTilingScale._m0[19u].w));
    float _436 = _434.x;
    float _437 = 1.0 - _436;
    float _467 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_436 - _437) * cbMtdParam._m0[24u].w) + _437) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3449 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _476 = ((((cbMtdParam._m0[10u].x - _420) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _468) + _420;
    float _477 = ((((cbMtdParam._m0[10u].y - _421) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _468) + _421;
    float _478 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _422)) * _468) + _422;
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _499 = (_492.x * 2.0) + (-1.0);
    float _500 = (_492.y * 2.0) + (-1.0);
    float _501 = dot(vec2(_499, _500), vec2(_499, _500));
    float _3460 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _509 = ((_492.z - _323) * _411) + _323;
    float _512 = ((cbMtdParam._m0[23u].y - _509) * _468) + _509;
    vec4 _531 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _252) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _253) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _537 = (_531.x * 2.0) + (-1.0);
    float _538 = (_531.y * 2.0) + (-1.0);
    float _539 = dot(vec2(_537, _538), vec2(_537, _538));
    float _3471 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _554 = ((sqrt(1.0 - (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) - _337) * _413) + _337;
    float _557 = (((_499 - _328) * _411) + _328) + (cbMtdParam._m0[21u].x * _328);
    float _558 = (((_500 - _330) * _412) + _330) + (cbMtdParam._m0[21u].x * _330);
    float _569 = (((_537 - _557) + (_557 * cbMtdParam._m0[22u].z)) * _468) + _557;
    float _570 = (((_538 - _558) + (_558 * cbMtdParam._m0[22u].z)) * _468) + _558;
    float _571 = (_468 * (sqrt(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) - _554)) + _554;
    float _573 = cbMtdParam._m0[22u].x + _319.w;
    float _576 = fma(_571, _221, fma(_570, _228, _569 * _214));
    float _579 = fma(_571, _222, fma(_570, _229, _569 * _215));
    float _582 = fma(_571, _223, fma(_570, _230, _569 * _216));
    float _586 = inversesqrt(dot(vec3(_576, _579, _582), vec3(_576, _579, _582)));
    float _587 = _586 * _576;
    float _588 = _586 * _579;
    float _589 = _586 * _582;
    float _3482 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _590 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _3493 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3504 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3515 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3526 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _608 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _658 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _648);
    float _659 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _648);
    float _660 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _648);
    float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
    float _665 = _658 * _664;
    float _666 = _659 * _664;
    float _667 = _660 * _664;
    float _673 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _674 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _695 = fma(_589, cbSceneParam._m0[5u].z, fma(_588, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _587));
    float _698 = fma(_589, cbSceneParam._m0[6u].z, fma(_588, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _587));
    float _701 = fma(_589, cbSceneParam._m0[7u].z, fma(_588, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _587));
    uint _715 = (_233 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _721 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_715].x;
    float _722 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_715].y;
    float _723 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0)))) * cbInstanceData._m0[_715].z;
    float _3537 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    vec4 _735 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _673, cbSceneParam._m0[86u].y * _674));
    float _739 = ((isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * TEXCOORD_5.w) * _735.x;
    float _740 = dot(vec3(_587, _588, _589), vec3(_665, _666, _667));
    float _743 = _740 * 2.0;
    float _747 = (_743 * _587) - _665;
    float _748 = (_743 * _588) - _666;
    float _749 = (_743 * _589) - _667;
    float _753 = abs(dot(vec3(_665, _666, _667), vec3(_587, _588, _589)));
    float _3570 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _755 = sqrt(_590);
    float _768 = exp2((_755 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_755 * 3.0));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1109;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _834 = fma(_808, cbModelParam._m0[26u].z, fma(_804, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800));
        float _838 = fma(_808, cbModelParam._m0[27u].z, fma(_804, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800));
        float _842 = fma(_808, cbModelParam._m0[28u].z, fma(_804, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800));
        float _867 = _800 + _587;
        float _868 = _804 + _588;
        float _869 = _808 + _589;
        float _879 = fma(_869, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _867)) - _834;
        float _880 = fma(_869, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _867)) - _838;
        float _881 = fma(_869, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _867)) - _842;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_834 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_838 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[34u].z) + ((((((_842 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _937 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_903.x + (-0.5));
        float _939 = _937 * (_903.y + (-0.5));
        float _940 = _937 * (_903.z + (-0.5));
        float _947 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_910.x + (-0.5));
        float _949 = _947 * (_910.y + (-0.5));
        float _950 = _947 * (_910.z + (-0.5));
        float _957 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_917.x + (-0.5));
        float _959 = _957 * (_917.y + (-0.5));
        float _960 = _957 * (_917.z + (-0.5));
        float _967 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_924.x + (-0.5));
        float _969 = _967 * (_924.y + (-0.5));
        float _970 = _967 * (_924.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _991 = (dot(vec3(_587, _588, _589), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1001 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3618 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1003 + 1.0))) + _1008) * _971;
        float _1018 = _939 * 0.5;
        float _1019 = _949 * 0.5;
        float _1020 = _959 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_587, _588, _589), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3651 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1045 + 1.0))) + _1050) * _972;
        float _1060 = _940 * 0.5;
        float _1061 = _950 * 0.5;
        float _1062 = _960 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_587, _588, _589), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3684 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1087 + 1.0))) + _1092) * _973;
        _1109 = _940;
        _1111 = _939;
        _1112 = _938;
        _1113 = _950;
        _1114 = _949;
        _1115 = _948;
        _1116 = _960;
        _1117 = _959;
        _1118 = _958;
        _1119 = _973;
        _1120 = _972;
        _1121 = _971;
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _1110;
        _1111 = _1110;
        _1112 = _1110;
        _1113 = _1110;
        _1114 = _1110;
        _1115 = _1110;
        _1116 = _1110;
        _1117 = _1110;
        _1118 = _1110;
        _1119 = _1110;
        _1120 = _1110;
        _1121 = _1110;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1149 = fma(_808, cbModelParam._m0[30u].z, fma(_804, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _800));
        float _1153 = fma(_808, cbModelParam._m0[31u].z, fma(_804, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _800));
        float _1157 = fma(_808, cbModelParam._m0[32u].z, fma(_804, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _800));
        float _1180 = _800 + _587;
        float _1181 = _804 + _588;
        float _1182 = _808 + _589;
        float _1192 = fma(_1182, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1180)) - _1149;
        float _1193 = fma(_1182, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1180)) - _1153;
        float _1194 = fma(_1182, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1180)) - _1157;
        float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
        float _1211 = ((_1198 * _1192) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1149 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1198 * _1193) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1153 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1198 * _1194) / cbModelParam._m0[35u].z) + ((((((_1157 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        float _1248 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1215.x + (-0.5));
        float _1250 = _1248 * (_1215.y + (-0.5));
        float _1251 = _1248 * (_1215.z + (-0.5));
        float _1258 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1222.x + (-0.5));
        float _1260 = _1258 * (_1222.y + (-0.5));
        float _1261 = _1258 * (_1222.z + (-0.5));
        float _1268 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1229.x + (-0.5));
        float _1270 = _1268 * (_1229.y + (-0.5));
        float _1271 = _1268 * (_1229.z + (-0.5));
        float _1278 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1236.x + (-0.5));
        float _1280 = _1278 * (_1236.y + (-0.5));
        float _1281 = _1278 * (_1236.z + (-0.5));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1249 * 0.5;
        float _1286 = _1259 * 0.5;
        float _1287 = _1269 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_587, _588, _589), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3747 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1312 + 1.0))) + _1317) * _1282;
        float _1327 = _1250 * 0.5;
        float _1328 = _1260 * 0.5;
        float _1329 = _1270 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_587, _588, _589), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3780 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1354 + 1.0))) + _1359) * _1283;
        float _1369 = _1251 * 0.5;
        float _1370 = _1261 * 0.5;
        float _1371 = _1271 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_587, _588, _589), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3813 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1396 + 1.0))) + _1401) * _1284;
        _1418 = _1251;
        _1419 = _1250;
        _1420 = _1249;
        _1421 = _1261;
        _1422 = _1260;
        _1423 = _1259;
        _1424 = _1271;
        _1425 = _1270;
        _1426 = _1269;
        _1427 = _1284;
        _1428 = _1283;
        _1429 = _1282;
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
    }
    else
    {
        _1418 = _1110;
        _1419 = _1110;
        _1420 = _1110;
        _1421 = _1110;
        _1422 = _1110;
        _1423 = _1110;
        _1424 = _1110;
        _1425 = _1110;
        _1426 = _1110;
        _1427 = _1110;
        _1428 = _1110;
        _1429 = _1110;
        _1430 = 0.0;
        _1431 = 0.0;
        _1432 = 0.0;
    }
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1122)) + _1122;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1123)) + _1123;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1124)) + _1124;
    float _1465 = fma(_1444, cbSceneParam._m0[89u].z, fma(_1443, cbSceneParam._m0[89u].y, _1442 * cbSceneParam._m0[89u].x));
    float _1468 = fma(_1444, cbSceneParam._m0[90u].z, fma(_1443, cbSceneParam._m0[90u].y, _1442 * cbSceneParam._m0[90u].x));
    float _1471 = fma(_1444, cbSceneParam._m0[91u].z, fma(_1443, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1442));
    float _1486 = _747 * 0.5;
    float _1487 = _748 * 0.5;
    float _1488 = _749 * 0.5;
    float _1489 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1492 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1495 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1529;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1502 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1109, _1113, _1116, _1119));
        float _1506 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1510 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1517 = dot(vec4(cbModelParam._m0[39u]), vec4(_1486, _1487, _1488, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1540;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1531 = dot(vec4(cbModelParam._m0[40u]), vec4(_1486, _1487, _1488, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1531) ? 0.0 : (isnan(0.0) ? _1531 : max(0.0, _1531))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1544 = (_1540 * cbModelParam._m0[1u].x) + (_1529 * (1.0 - cbModelParam._m0[1u].x));
    float _1554 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _590);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1554 : min(cbModelParam._m0[25u].z, _1554));
    float _1635;
    float _1637;
    float _1639;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1602 = fma(_808, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _800)) + cbModelParam._m0[13u].w;
        float _1606 = fma(_808, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _800)) + cbModelParam._m0[14u].w;
        float _1610 = fma(_808, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _800)) + cbModelParam._m0[15u].w;
        float _1613 = fma(_749, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _747));
        float _1616 = fma(_749, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _747));
        float _1619 = fma(_749, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _747));
        float _1647;
        if (_1613 > 0.0)
        {
            _1647 = abs((1.0 - _1602) / _1613);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1602 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1647 = frontier_phi_14_12_ladder;
        }
        float _1849;
        if (_1616 > 0.0)
        {
            _1849 = abs((1.0 - _1606) / _1616);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1606 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1849 = frontier_phi_23_19_ladder;
        }
        float _2092;
        if (_1619 > 0.0)
        {
            _2092 = abs((1.0 - _1610) / _1619);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1610 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2092 = frontier_phi_35_30_ladder;
        }
        float _2094 = isnan(_1849) ? _1647 : (isnan(_1647) ? _1849 : min(_1647, _1849));
        float _2095 = isnan(_2092) ? _2094 : (isnan(_2094) ? _2092 : min(_2094, _2092));
        float _2099 = (_2095 * _1613) + _1602;
        float _2100 = (_2095 * _1616) + _1606;
        float _2101 = (_2095 * _1619) + _1610;
        float _2102 = _2095 * 9.9999997473787516355514526367188e-05;
        float _2104 = (-1.0) - _2102;
        float _2106 = _2102 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2101 > _2106) || ((_2101 < _2104) || ((_2100 > _2106) || ((_2100 < _2104) || ((_2099 < _2104) || (_2099 > _2106))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2225 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2101, cbModelParam._m0[9u].z, fma(_2100, cbModelParam._m0[9u].y, _2099 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2101, cbModelParam._m0[10u].z, fma(_2100, cbModelParam._m0[10u].y, _2099 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2101, cbModelParam._m0[11u].z, fma(_2100, cbModelParam._m0[11u].y, _2099 * cbModelParam._m0[11u].x))), _1555);
            frontier_phi_13_35_ladder = _2225.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2225.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2225.x * cbModelParam._m0[1u].y;
        }
        _1635 = frontier_phi_13_35_ladder_2;
        _1637 = frontier_phi_13_35_ladder_1;
        _1639 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1623 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_747, _748, _749), _1555);
        _1635 = _1623.x * cbModelParam._m0[1u].y;
        _1637 = _1623.y * cbModelParam._m0[1u].y;
        _1639 = _1623.z * cbModelParam._m0[1u].y;
    }
    float _1643 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _590);
    float _1644 = isnan(_1643) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1643 : min(cbModelParam._m0[25u].w, _1643));
    float _1733;
    float _1735;
    float _1737;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1697 = fma(_808, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _800)) + cbModelParam._m0[21u].w;
        float _1701 = fma(_808, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _800)) + cbModelParam._m0[22u].w;
        float _1705 = fma(_808, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _800)) + cbModelParam._m0[23u].w;
        float _1708 = fma(_749, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _747));
        float _1711 = fma(_749, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _747));
        float _1714 = fma(_749, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _747));
        float _1854;
        if (_1708 > 0.0)
        {
            _1854 = abs((1.0 - _1697) / _1708);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1697 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1854 = frontier_phi_25_21_ladder;
        }
        float _2119;
        if (_1711 > 0.0)
        {
            _2119 = abs((1.0 - _1701) / _1711);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1701 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2119 = frontier_phi_37_32_ladder;
        }
        float _2324;
        if (_1714 > 0.0)
        {
            _2324 = abs((1.0 - _1705) / _1714);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1705 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2324 = frontier_phi_46_43_ladder;
        }
        float _2326 = isnan(_2119) ? _1854 : (isnan(_1854) ? _2119 : min(_1854, _2119));
        float _2327 = isnan(_2324) ? _2326 : (isnan(_2326) ? _2324 : min(_2326, _2324));
        float _2331 = (_2327 * _1708) + _1697;
        float _2332 = (_2327 * _1711) + _1701;
        float _2333 = (_2327 * _1714) + _1705;
        float _2334 = _2327 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2334;
        float _2337 = _2334 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2333 > _2337) || ((_2333 < _2335) || ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 < _2335) || (_2331 > _2337))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2333, cbModelParam._m0[17u].z, fma(_2332, cbModelParam._m0[17u].y, _2331 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2333, cbModelParam._m0[18u].z, fma(_2332, cbModelParam._m0[18u].y, _2331 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2333, cbModelParam._m0[19u].z, fma(_2332, cbModelParam._m0[19u].y, _2331 * cbModelParam._m0[19u].x))), _1644);
            frontier_phi_22_46_ladder = _2532.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2532.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2532.x * cbModelParam._m0[1u].z;
        }
        _1733 = frontier_phi_22_46_ladder_2;
        _1735 = frontier_phi_22_46_ladder_1;
        _1737 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1717 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_747, _748, _749), _1644);
        _1733 = _1717.x * cbModelParam._m0[1u].z;
        _1735 = _1717.y * cbModelParam._m0[1u].z;
        _1737 = _1717.z * cbModelParam._m0[1u].z;
    }
    float _1749 = ((((1.0 - _768) * ((_755 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_768 * _755)) * _739;
    float _1750 = _1749 * ((cbModelParam._m0[1u].w * (_1733 - _1635)) + _1635);
    float _1751 = _1749 * ((cbModelParam._m0[1u].w * (_1735 - _1637)) + _1637);
    float _1752 = _1749 * ((cbModelParam._m0[1u].w * (_1737 - _1639)) + _1639);
    float _1755 = fma(_1752, cbSceneParam._m0[89u].z, fma(_1751, cbSceneParam._m0[89u].y, _1750 * cbSceneParam._m0[89u].x));
    float _1758 = fma(_1752, cbSceneParam._m0[90u].z, fma(_1751, cbSceneParam._m0[90u].y, _1750 * cbSceneParam._m0[90u].x));
    float _1761 = fma(_1752, cbSceneParam._m0[91u].z, fma(_1751, cbSceneParam._m0[91u].y, _1750 * cbSceneParam._m0[91u].x));
    uvec4 _1771 = floatBitsToUint(cbInstanceData._m0[_233 + 5u]);
    uint _1773 = _1771.x * 14u;
    uint _1774 = _1773 + 13u;
    float _1781 = _739 + (-1.0);
    float _1786 = (cbLight._m0[_1774].x * _1781) + 1.0;
    float _1787 = (cbLight._m0[_1774].y * _1781) + 1.0;
    float _1788 = (cbLight._m0[_1774].z * _1781) + 1.0;
    float _1789 = (cbLight._m0[_1774].w * _1781) + 1.0;
    uint _1790 = _1773 + 5u;
    float _1796 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1800 = _1773 + 4u;
    float _1807 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
    uint _1811 = _1773 | 1u;
    float _1822 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_587, _588, _589));
    float _1825 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_587, _588, _589));
    float _3949 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _3960 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1830 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.3183098733425140380859375;
    float _1832 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.3183098733425140380859375;
    float _1839 = ((cbLight._m0[_1790].x * _1796) * _1832) + ((cbLight._m0[_1800].x * _1807) * _1830);
    float _1840 = ((_1796 * cbLight._m0[_1790].y) * _1832) + ((_1807 * cbLight._m0[_1800].y) * _1830);
    float _1841 = ((_1796 * cbLight._m0[_1790].z) * _1832) + ((_1807 * cbLight._m0[_1800].z) * _1830);
    uvec4 _1846 = floatBitsToUint(cbLight._m0[_1773 + 12u]);
    bool _1848 = _1846.x == 0u;
    float _1859;
    float _1861;
    float _1863;
    if (_1848)
    {
        _1859 = _1839;
        _1861 = _1840;
        _1863 = _1841;
    }
    else
    {
        uint _1867 = _1773 + 6u;
        float _1883 = (dot(vec3(cbLight._m0[_1773 + 2u].xyz), vec3(_587, _588, _589)) * 0.5) + 0.5;
        float _1884 = _1883 * _1883;
        float _3971 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1885 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1886 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _1859 = (((cbLight._m0[_1867].x * 0.3183098733425140380859375) * _1885) * _1886) + _1839;
        _1861 = (((cbLight._m0[_1867].y * 0.3183098733425140380859375) * _1885) * _1886) + _1840;
        _1863 = (((cbLight._m0[_1867].z * 0.3183098733425140380859375) * _1885) * _1886) + _1841;
    }
    bool _1866 = _1846.y == 0u;
    float _1904;
    float _1906;
    float _1908;
    if (_1866)
    {
        _1904 = _1859;
        _1906 = _1861;
        _1908 = _1863;
    }
    else
    {
        uint _2063 = _1773 + 7u;
        float _2079 = (dot(vec3(cbLight._m0[_1773 + 3u].xyz), vec3(_587, _588, _589)) * 0.5) + 0.5;
        float _2080 = _2079 * _2079;
        float _3987 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2081 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _2082 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _1904 = (((cbLight._m0[_2063].x * 0.3183098733425140380859375) * _2081) * _2082) + _1859;
        _1906 = (((cbLight._m0[_2063].y * 0.3183098733425140380859375) * _2081) * _2082) + _1861;
        _1908 = (((cbLight._m0[_2063].z * 0.3183098733425140380859375) * _2081) * _2082) + _1863;
    }
    uint _1911 = _1773 + 8u;
    float _1924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1773].w)) * _590) * 0.949999988079071044921875);
    float _1925 = _1924 * _1924;
    float _1926 = cbLight._m0[_1773].x + _665;
    float _1927 = cbLight._m0[_1773].y + _666;
    float _1928 = cbLight._m0[_1773].z + _667;
    float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
    float _1933 = _1932 * _1926;
    float _1934 = _1932 * _1927;
    float _1935 = _1932 * _1928;
    float _1936 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_1773].xyz));
    float _4003 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _4014 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _1940 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1941 = dot(vec3(_587, _588, _589), vec3(_1933, _1934, _1935));
    float _4025 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _1945 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1933, _1934, _1935));
    float _4036 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1949 = _1925 * _1925;
    float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
    float _1964 = (exp2(log2(1.0 - (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1965 = 1.0 - _1925;
    float _1976 = (0.5 / (((_1940 * ((_1939 * _1965) + _1925)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _1965) + _1925) * _1939))) * _1939;
    float _4047 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1978 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
    uint _1989 = _1773 + 9u;
    float _2000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _590) * 0.949999988079071044921875);
    float _2001 = _2000 * _2000;
    float _2002 = cbLight._m0[_1811].x + _665;
    float _2003 = cbLight._m0[_1811].y + _666;
    float _2004 = cbLight._m0[_1811].z + _667;
    float _2008 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
    float _2009 = _2008 * _2002;
    float _2010 = _2008 * _2003;
    float _2011 = _2008 * _2004;
    float _2012 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_1811].xyz));
    float _4058 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _2016 = dot(vec3(_587, _588, _589), vec3(_2009, _2010, _2011));
    float _4069 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _2020 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_2009, _2010, _2011));
    float _4080 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2024 = _2001 * _2001;
    float _2028 = ((_2019 * _2019) * (_2024 + (-1.0))) + 1.0;
    float _2037 = (exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2038 = 1.0 - _2001;
    float _2048 = (0.5 / (((_1940 * ((_2015 * _2038) + _2001)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2038) + _2001) * _2015))) * _2015;
    float _4091 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2050 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2024 / ((_2028 * _2028) * 3.141590118408203125));
    float _2060 = (((_2037 * cbLight._m0[_1989].x) * _2050) * _1796) + (((_1964 * cbLight._m0[_1911].x) * _1978) * _1807);
    float _2061 = (((_2037 * cbLight._m0[_1989].y) * _2050) * _1796) + (((_1964 * cbLight._m0[_1911].y) * _1978) * _1807);
    float _2062 = (((_2037 * cbLight._m0[_1989].z) * _2050) * _1796) + (((_1964 * cbLight._m0[_1911].z) * _1978) * _1807);
    float _2124;
    float _2126;
    float _2128;
    if (_1848)
    {
        _2124 = _2060;
        _2126 = _2061;
        _2128 = _2062;
    }
    else
    {
        uint _2130 = _1773 + 2u;
        uint _2134 = _1773 + 10u;
        float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2130].w)) * _590) * 0.949999988079071044921875);
        float _2149 = _2148 * _2148;
        float _2150 = cbLight._m0[_2130].x + _665;
        float _2151 = cbLight._m0[_2130].y + _666;
        float _2152 = cbLight._m0[_2130].z + _667;
        float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
        float _2157 = _2156 * _2150;
        float _2158 = _2156 * _2151;
        float _2159 = _2156 * _2152;
        float _2160 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2130].xyz));
        float _4102 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2163 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2164 = dot(vec3(_587, _588, _589), vec3(_2157, _2158, _2159));
        float _4113 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _2168 = dot(vec3(cbLight._m0[_2130].xyz), vec3(_2157, _2158, _2159));
        float _4124 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2172 = _2149 * _2149;
        float _2176 = ((_2167 * _2167) * (_2172 + (-1.0))) + 1.0;
        float _2185 = (exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2186 = 1.0 - _2149;
        float _2196 = (0.5 / (((_1940 * ((_2163 * _2186) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2186) + _2149) * _2163))) * _2163;
        float _4135 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2198 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2172 / ((_2176 * _2176) * 3.141590118408203125));
        float _2199 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _2124 = (((_2185 * cbLight._m0[_2134].x) * _2198) * _2199) + _2060;
        _2126 = (((_2185 * cbLight._m0[_2134].y) * _2198) * _2199) + _2061;
        _2128 = (((_2185 * cbLight._m0[_2134].z) * _2198) * _2199) + _2062;
    }
    float _2234;
    float _2236;
    float _2238;
    if (_1866)
    {
        _2234 = _2124;
        _2236 = _2126;
        _2238 = _2128;
    }
    else
    {
        uint _2245 = _1773 + 3u;
        uint _2249 = _1773 + 11u;
        float _2263 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2245].w)) * _590) * 0.949999988079071044921875);
        float _2264 = _2263 * _2263;
        float _2265 = cbLight._m0[_2245].x + _665;
        float _2266 = cbLight._m0[_2245].y + _666;
        float _2267 = cbLight._m0[_2245].z + _667;
        float _2271 = inversesqrt(dot(vec3(_2265, _2266, _2267), vec3(_2265, _2266, _2267)));
        float _2272 = _2271 * _2265;
        float _2273 = _2271 * _2266;
        float _2274 = _2271 * _2267;
        float _2275 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2245].xyz));
        float _4151 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2278 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2279 = dot(vec3(_587, _588, _589), vec3(_2272, _2273, _2274));
        float _4162 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _2283 = dot(vec3(cbLight._m0[_2245].xyz), vec3(_2272, _2273, _2274));
        float _4173 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2287 = _2264 * _2264;
        float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
        float _2300 = (exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2301 = 1.0 - _2264;
        float _2311 = (0.5 / (((_1940 * ((_2278 * _2301) + _2264)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2301) + _2264) * _2278))) * _2278;
        float _4184 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2313 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
        float _2314 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2234 = (((_2300 * cbLight._m0[_2249].x) * _2313) * _2314) + _2124;
        _2236 = (((_2300 * cbLight._m0[_2249].y) * _2313) * _2314) + _2126;
        _2238 = (((_2300 * cbLight._m0[_2249].z) * _2313) * _2314) + _2128;
    }
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    if (_1771.y == 0u)
    {
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2389;
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2389;
        float _2392 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2389;
        uvec4 _2404 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2405 = _2404.x;
        uint _2416 = uint((float(_2404.y) * floor(float(uint(cbSceneParam._m0[85u].y * _674) / _2405))) + floor(float(uint(cbSceneParam._m0[85u].x * _673) / _2405)));
        float _2426 = (log2(_2392 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2427 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        uint _2430 = uint(isnan(14.0) ? _2427 : (isnan(_2427) ? 14.0 : min(_2427, 14.0)));
        uvec4 _2435 = texelFetch(g_lightClusterGridBuffer, int(((_2430 << 2u) + (_2416 << 6u)) >> 2u));
        uint _2436 = _2435.x;
        uint _2437 = _2404.z;
        float _2537;
        float _2539;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        if (((((1u << ((_2437 >> 4u) & 15u)) + 4294967295u) & _2436) == 0u) || ((_2437 & 240u) == 0u))
        {
            _2537 = 0.0;
            _2539 = 0.0;
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
        }
        else
        {
            float _2538;
            float _2540;
            float _2542;
            float _2544;
            float _2546;
            float _2548;
            float _2681 = 0.0;
            float _2682 = 0.0;
            float _2683 = 0.0;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            uint _2687 = 0u;
            uint _2696;
            bool _2697;
            for (;;)
            {
                _2696 = texelFetch(g_lightClassification, int((((_2430 << 5u) + (_2416 << 9u)) + (_2687 << 2u)) >> 2u)).x;
                _2697 = _2696 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2697)
                {
                    frontier_phi_61_pred = _2681;
                    frontier_phi_61_pred_1 = _2686;
                    frontier_phi_61_pred_2 = _2685;
                    frontier_phi_61_pred_3 = _2684;
                    frontier_phi_61_pred_4 = _2683;
                    frontier_phi_61_pred_5 = _2682;
                }
                else
                {
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    uint _2811;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2683;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2686;
                    _2811 = _2696;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    for (;;)
                    {
                        uint _2815 = uint(findLSB(_2811)) + (_2687 << 5u);
                        uint _2812 = (_2811 + 4294967295u) & _2811;
                        uint _2817 = _2815 * 48u;
                        vec4 _2831 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2817)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 3u)).x));
                        uint _2837 = (_2815 * 48u) + 4u;
                        vec4 _2850 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 3u)).x));
                        uint _2856 = (_2815 * 48u) + 8u;
                        vec3 _2867 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2856)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 2u)).x));
                        float _2871 = _2831.x - _2390;
                        float _2872 = _2831.y - _2391;
                        float _2873 = _2831.z - _2392;
                        float _2874 = dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873));
                        float _2877 = inversesqrt(_2874);
                        float _2878 = _2877 * _2871;
                        float _2879 = _2877 * _2872;
                        float _2880 = _2877 * _2873;
                        float _2881 = dot(vec3(_695, _698, _701), vec3(_2878, _2879, _2880));
                        float _2886 = 1.0 - (_2874 * _2831.w);
                        float _4210 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2887 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
                        float _2888 = sqrt(_2874) * _2850.w;
                        float _2891 = 1.39999997615814208984375 / (_2888 + 1.39999997615814208984375);
                        float _2892 = _2891 * _2891;
                        float _2895 = ((1.0 - _2892) * _2881) + _2892;
                        float _2898 = _2888 * _2888;
                        float _2902 = ((isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0))) * _2887) / ((_2898 * 0.699999988079071044921875) + 1.0);
                        float _2906 = (-0.0) - _2390;
                        float _2907 = (-0.0) - _2391;
                        float _2908 = (-0.0) - _2392;
                        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
                        float _2913 = _2912 * _2906;
                        float _2914 = _2912 * _2907;
                        float _2915 = _2912 * _2908;
                        float _2923 = exp2(log2(1.0 / ((_2898 * 3.5) + 5.0)) * 0.25);
                        float _2924 = 1.0 - _755;
                        float _2931 = sqrt(1.0 - ((1.0 - (_2924 * _2924)) * (1.0 - (_2923 * _2923))));
                        float _2932 = _2931 * _2931;
                        float _2933 = _2932 * _2932;
                        float _2934 = _2913 + _2878;
                        float _2935 = _2914 + _2879;
                        float _2936 = _2915 + _2880;
                        float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
                        float _2944 = dot(vec3(_695, _698, _701), vec3(_2913, _2914, _2915));
                        float _4226 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2947 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2948 = dot(vec3(_695, _698, _701), vec3(_2940 * _2934, _2940 * _2935, _2940 * _2936));
                        float _4237 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2951 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2955 = ((_2951 * _2951) * (_2933 + (-1.0))) + 1.0;
                        float _2956 = _2891 * _2932;
                        float _2957 = _2956 * _2956;
                        float _2960 = ((1.0 - _2957) * _2881) + _2957;
                        float _4248 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2961 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                        float _2962 = 1.0 - _2932;
                        float _2972 = (0.5 / (((_2961 * ((_2947 * _2962) + _2932)) + 9.9999999392252902907785028219223e-09) + (((_2961 * _2962) + _2932) * _2947))) * _2961;
                        float _4259 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2983 = (((_2933 * 3.1415927410125732421875) * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) / ((_2955 * _2955) * ((_2898 * 2.1991131305694580078125) + 3.141590118408203125))) * _2887;
                        _2740 = (_2902 * _2850.x) + _2808;
                        _2741 = (_2902 * _2850.y) + _2809;
                        _2742 = (_2902 * _2850.z) + _2810;
                        _2737 = (_2983 * _2867.x) + _2805;
                        _2738 = (_2983 * _2867.y) + _2806;
                        _2739 = (_2983 * _2867.z) + _2807;
                        if (_2812 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2742;
                            _2811 = _2812;
                        }
                    }
                    frontier_phi_61_pred = _2737;
                    frontier_phi_61_pred_1 = _2742;
                    frontier_phi_61_pred_2 = _2741;
                    frontier_phi_61_pred_3 = _2740;
                    frontier_phi_61_pred_4 = _2739;
                    frontier_phi_61_pred_5 = _2738;
                }
                _2538 = frontier_phi_61_pred;
                _2548 = frontier_phi_61_pred_1;
                _2546 = frontier_phi_61_pred_2;
                _2544 = frontier_phi_61_pred_3;
                _2542 = frontier_phi_61_pred_4;
                _2540 = frontier_phi_61_pred_5;
                uint _2688 = _2687 + 1u;
                if (_2688 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2681 = _2538;
                    _2682 = _2540;
                    _2683 = _2542;
                    _2684 = _2544;
                    _2685 = _2546;
                    _2686 = _2548;
                    _2687 = _2688;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2537 = _2538;
            _2539 = _2540;
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
        }
        uvec4 _2551 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2552 = _2551.z;
        uint _2554 = (_2552 >> 8u) & 15u;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        if (((4294967295u << _2554) & _2436) == 0u)
        {
            _2649 = _2537;
            _2651 = _2539;
            _2653 = _2541;
            _2655 = _2543;
            _2657 = _2545;
            _2659 = _2547;
        }
        else
        {
            float _2674 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
            float _2675 = _2674 * _2390;
            float _2676 = _2674 * _2391;
            float _2677 = _2674 * _2392;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2554 < ((_2552 >> 12u) & 15u))
            {
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2658;
                float _2660;
                float _2788 = _2537;
                float _2789 = _2539;
                float _2790 = _2541;
                float _2791 = _2543;
                float _2792 = _2545;
                float _2793 = _2547;
                uint _2794 = _2554;
                uint _2803;
                bool _2804;
                for (;;)
                {
                    _2803 = texelFetch(g_lightClassification, int((((_2430 << 5u) + (_2416 << 9u)) + (_2794 << 2u)) >> 2u)).x;
                    _2804 = _2803 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2804)
                    {
                        frontier_phi_67_pred = _2791;
                        frontier_phi_67_pred_1 = _2792;
                        frontier_phi_67_pred_2 = _2793;
                        frontier_phi_67_pred_3 = _2790;
                        frontier_phi_67_pred_4 = _2789;
                        frontier_phi_67_pred_5 = _2788;
                    }
                    else
                    {
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3001 = _2788;
                        float _3002 = _2789;
                        float _3003 = _2790;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        float _3006 = _2793;
                        uint _3007 = _2803;
                        uint _3008;
                        vec4 _3033;
                        float _3034;
                        vec4 _3049;
                        vec3 _3061;
                        vec4 _3077;
                        vec4 _3093;
                        float _3139;
                        bool _3140;
                        for (;;)
                        {
                            uint _3018 = ((_2794 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3007));
                            _3008 = (_3007 + 4294967295u) & _3007;
                            uint _3020 = _3018 * 40u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            _3034 = _3033.w;
                            uint _3036 = (_3018 * 40u) + 4u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3051 = (_3018 * 40u) + 8u;
                            _3061 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x));
                            uint _3064 = (_3018 * 40u) + 16u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3080 = (_3018 * 40u) + 20u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3095 = (_3018 * 40u) + 24u;
                            vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3114 = (_3018 * 40u) + 28u;
                            vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3139 = fma(_2392, _3127.z, fma(_2391, _3127.y, _3127.x * _2390)) + _3127.w;
                            _3140 = !((fma(_2392, _3108.z, fma(_2391, _3108.y, _3108.x * _2390)) + _3108.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3140)
                            {
                                float _3167 = _3033.x - _2390;
                                float _3168 = _3033.y - _2391;
                                float _3169 = _3033.z - _2392;
                                float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                                float _3173 = inversesqrt(_3170);
                                float _3174 = _3173 * _3167;
                                float _3175 = _3173 * _3168;
                                float _3176 = _3173 * _3169;
                                float _3180 = 1.0 - (_3170 / (_3034 * _3034));
                                float _4270 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                                float _3185 = sqrt(_3170) * _3049.w;
                                float _3187 = 1.39999997615814208984375 / (_3185 + 1.39999997615814208984375);
                                float _3188 = _3187 * _3187;
                                float _3191 = ((1.0 - _3188) * dot(vec3(_3174, _3175, _3176), vec3(_695, _698, _701))) + _3188;
                                float _3194 = _3185 * _3185;
                                float _3198 = (fma(_2392, _3077.z, fma(_2391, _3077.y, _3077.x * _2390)) + _3077.w) / _3139;
                                float _3199 = (fma(_2392, _3093.z, fma(_2391, _3093.y, _3093.x * _2390)) + _3093.w) / _3139;
                                float _3203 = 1.0 - dot(vec2(_3198, _3199), vec2(_3198, _3199));
                                float _4286 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3204 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3205 = _3204 * (((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3181) / ((_3194 * 0.699999988079071044921875) + 1.0));
                                float _3217 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                                float _3218 = 1.0 - _755;
                                float _3225 = sqrt(1.0 - ((1.0 - (_3218 * _3218)) * (1.0 - (_3217 * _3217))));
                                float _3226 = _3225 * _3225;
                                float _3227 = _3226 * _3226;
                                float _3228 = _3174 - _2675;
                                float _3229 = _3175 - _2676;
                                float _3230 = _3176 - _2677;
                                float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                                float _3238 = dot(vec3(_695, _698, _701), vec3((-0.0) - _2675, (-0.0) - _2676, (-0.0) - _2677));
                                float _4297 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3241 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3242 = dot(vec3(_695, _698, _701), vec3(_3234 * _3228, _3234 * _3229, _3234 * _3230));
                                float _4308 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3245 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3249 = ((_3245 * _3245) * (_3227 + (-1.0))) + 1.0;
                                float _3250 = _3187 * _3226;
                                float _3251 = _3250 * _3250;
                                float _3257 = ((1.0 - _3251) * dot(vec3(_695, _698, _701), vec3(_3174, _3175, _3176))) + _3251;
                                float _4319 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                                float _3259 = 1.0 - _3226;
                                float _3269 = (0.5 / (((_3258 * ((_3241 * _3259) + _3226)) + 9.9999999392252902907785028219223e-09) + (((_3258 * _3259) + _3226) * _3241))) * _3258;
                                float _4330 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3279 = (_3204 * _3181) * (((_3227 * 3.1415927410125732421875) * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) / ((_3249 * _3249) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3279 * _3061.x;
                                frontier_phi_73_pred_1 = _3279 * _3061.y;
                                frontier_phi_73_pred_2 = _3205 * _3049.z;
                                frontier_phi_73_pred_3 = _3205 * _3049.y;
                                frontier_phi_73_pred_4 = _3205 * _3049.x;
                                frontier_phi_73_pred_5 = _3279 * _3061.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3283 = frontier_phi_73_pred;
                            _3284 = frontier_phi_73_pred_1;
                            _3288 = frontier_phi_73_pred_2;
                            _3287 = frontier_phi_73_pred_3;
                            _3286 = frontier_phi_73_pred_4;
                            _3285 = frontier_phi_73_pred_5;
                            _2991 = _3286 + _3004;
                            _2992 = _3287 + _3005;
                            _2993 = _3288 + _3006;
                            _2988 = _3283 + _3001;
                            _2989 = _3284 + _3002;
                            _2990 = _3285 + _3003;
                            if (_3008 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _3008;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2991;
                        frontier_phi_67_pred_1 = _2992;
                        frontier_phi_67_pred_2 = _2993;
                        frontier_phi_67_pred_3 = _2990;
                        frontier_phi_67_pred_4 = _2989;
                        frontier_phi_67_pred_5 = _2988;
                    }
                    _2656 = frontier_phi_67_pred;
                    _2658 = frontier_phi_67_pred_1;
                    _2660 = frontier_phi_67_pred_2;
                    _2654 = frontier_phi_67_pred_3;
                    _2652 = frontier_phi_67_pred_4;
                    _2650 = frontier_phi_67_pred_5;
                    uint _2795 = _2794 + 1u;
                    if (_2795 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2788 = _2650;
                        _2789 = _2652;
                        _2790 = _2654;
                        _2791 = _2656;
                        _2792 = _2658;
                        _2793 = _2660;
                        _2794 = _2795;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2658;
                frontier_phi_55_56_ladder_1 = _2660;
                frontier_phi_55_56_ladder_2 = _2656;
                frontier_phi_55_56_ladder_3 = _2654;
                frontier_phi_55_56_ladder_4 = _2652;
                frontier_phi_55_56_ladder_5 = _2650;
            }
            else
            {
                frontier_phi_55_56_ladder = _2545;
                frontier_phi_55_56_ladder_1 = _2547;
                frontier_phi_55_56_ladder_2 = _2543;
                frontier_phi_55_56_ladder_3 = _2541;
                frontier_phi_55_56_ladder_4 = _2539;
                frontier_phi_55_56_ladder_5 = _2537;
            }
            _2649 = frontier_phi_55_56_ladder_5;
            _2651 = frontier_phi_55_56_ladder_4;
            _2653 = frontier_phi_55_56_ladder_3;
            _2655 = frontier_phi_55_56_ladder_2;
            _2657 = frontier_phi_55_56_ladder;
            _2659 = frontier_phi_55_56_ladder_1;
        }
        float _2664 = isnan(1.0) ? _739 : (isnan(_739) ? 1.0 : min(_739, 1.0));
        _2449 = (_2664 * _2655) + _1904;
        _2451 = (_2664 * _2657) + _1906;
        _2453 = (_2664 * _2659) + _1908;
        _2455 = ((_2649 * 0.039999999105930328369140625) * _2664) + _2234;
        _2457 = ((_2651 * 0.039999999105930328369140625) * _2664) + _2236;
        _2459 = ((_2653 * 0.039999999105930328369140625) * _2664) + _2238;
    }
    else
    {
        _2449 = _1904;
        _2451 = _1906;
        _2453 = _1908;
        _2455 = _2234;
        _2457 = _2236;
        _2459 = _2238;
    }
    float _4346 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4357 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4368 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    uint _2479 = _233 + 6u;
    float _2487 = _673 / cbSceneParam._m0[86u].x;
    float _2488 = _674 / cbSceneParam._m0[86u].y;
    vec4 _2502 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2487, _2488, (log2((isnan(cbSceneParam._m0[77u].w) ? _608 : (isnan(_608) ? cbSceneParam._m0[77u].w : min(_608, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2504 = _2502.x;
    float _2505 = _2502.y;
    float _2506 = _2502.z;
    float _2507 = _2502.w;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_608 > cbSceneParam._m0[78u].w)
    {
        float _2562 = isnan(_608) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _608 : min(cbSceneParam._m0[80u].w, _608));
        float _2563 = _2562 / _608;
        float _2574 = _2563 * _658;
        float _2575 = _659 * _2563;
        float _2576 = (-0.0) - _2575;
        float _2577 = _2563 * _660;
        float _2579 = (cbSceneParam._m0[77u].w * _2576) / _2562;
        float _2580 = _2579 + cbSceneParam._m0[79u].w;
        float _2581 = cbSceneParam._m0[79u].w - _2575;
        float _2587 = sqrt(((_2574 * _2574) + (_2575 * _2575)) + (_2577 * _2577));
        float _2590 = (1.0 - (cbSceneParam._m0[77u].w / _2562)) * _2587;
        float _2595 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2597 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2750;
        if (abs((_2576 - _2579) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2750 = ((((_2580 > 0.0) ? exp2(_2595 * _2580) : (2.0 - exp2(_2597 * _2580))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2590;
        }
        else
        {
            float _2710 = 1.0 / cbSceneParam._m0[80u].x;
            float _2711 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : max(_2580, _2581));
            float _2712 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : min(_2580, _2581));
            float _2721 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : min(_2711, 0.0));
            float _2722 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : min(_2712, 0.0));
            _2750 = ((abs(_2587 / _2576) * cbSceneParam._m0[80u].y) * ((((_2721 - _2722) * 2.0) - ((exp2(_2595 * (isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0)))) - exp2(_2595 * (isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0))))) * _2710)) - ((exp2(_2597 * _2721) - exp2(_2597 * _2722)) * _2710))) + (_2590 * cbSceneParam._m0[80u].z);
        }
        vec4 _2752 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2487, _2488, 1.0), 0.0);
        float _2761 = exp2((_2750 * (-1.44269502162933349609375)) * (1.0 - _2752.w));
        float _2762 = log2(_2761);
        float _2778 = log2(_2507);
        _2599 = (exp2(_2778 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].x)) * _2752.x) / cbSceneParam._m0[78u].x)) + _2504;
        _2601 = (exp2(_2778 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].y)) * _2752.y) / cbSceneParam._m0[78u].y)) + _2505;
        _2603 = (exp2(_2778 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].z)) * _2752.z) / cbSceneParam._m0[78u].z)) + _2506;
        _2605 = _2761 * _2507;
    }
    else
    {
        _2599 = _2504;
        _2601 = _2505;
        _2603 = _2506;
        _2605 = _2507;
    }
    float _2617 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2618 = _2617 == 3.0;
    float _2619 = log2(_2605);
    float _2626 = exp2(_2619 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2449 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _739))) + ((_2455 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1544)) * cbPerFrame._m0[3u].x));
    float _2627 = exp2(_2619 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2451 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _739))) + ((_2457 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1544)) * cbPerFrame._m0[3u].x));
    float _2628 = exp2(_2619 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2453 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _739))) + ((_2459 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1544)) * cbPerFrame._m0[3u].x));
    float _2637 = (_2617 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2637 * (_2618 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2599)));
    SV_Target.y = _2637 * (_2618 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2601)));
    SV_Target.z = _2637 * (_2618 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2603)));
    SV_Target.w = cbInstanceData._m0[_2479].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2479].w;
}


