#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1248;
float _3629;
float _3630;
float _3631;
float _3632;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _349 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _351 = _349.x;
    float _361 = dot(vec4(_351, _349.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _378 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_351 - _361) * cbMtdParam._m0[24u].x) + _361) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3641 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _386 = (_379 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _387 = (_379 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _388 = (_379 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _262) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _263) + cbTextureTilingScale._m0[3u].w));
    vec4 _425 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _437 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _451 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_427 - _437) * cbMtdParam._m0[24u].x) + _437) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3652 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _459 = (_452 * ((_405.x * cbMtdParam._m0[13u].x) - _386)) + _386;
    float _460 = (_452 * ((_405.y * cbMtdParam._m0[13u].y) - _387)) + _387;
    float _461 = (_452 * ((_405.z * cbMtdParam._m0[13u].z) - _388)) + _388;
    vec4 _480 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _500 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _517 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _519 = _517.x;
    float _520 = _517.y;
    float _521 = _517.z;
    float _528 = ((_500.x - _519) * _379) + _519;
    float _529 = ((_500.y - _520) * _379) + _520;
    float _530 = ((_500.z - _521) * _379) + _521;
    vec4 _542 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _262) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _555 = ((_542.z - _530) * _452) + _530;
    float _558 = ((((_542.x - _528) * _452) + _528) * 2.0) + (-1.0);
    float _560 = ((((_542.y - _529) * _452) + _529) * 2.0) + (-1.0);
    float _561 = dot(vec2(_558, _560), vec2(_558, _560));
    float _3663 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _566 = sqrt(1.0 - (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))));
    vec4 _579 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _597 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _599 = _597.x;
    float _600 = 1.0 - _599;
    float _613 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_599 - _600) * cbMtdParam._m0[24u].z) + _600) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3674 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _621 = (_614 * ((_480.x * cbMtdParam._m0[18u].x) - _459)) + _459;
    float _622 = (_614 * ((_480.y * cbMtdParam._m0[18u].y) - _460)) + _460;
    float _623 = (_614 * ((_480.z * cbMtdParam._m0[18u].z) - _461)) + _461;
    vec4 _636 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _643 = (_636.x * 2.0) + (-1.0);
    float _644 = (_636.y * 2.0) + (-1.0);
    float _645 = dot(vec2(_643, _644), vec2(_643, _644));
    float _3685 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _653 = (_614 * (_636.z - _555)) + _555;
    float _665 = (((_643 - _558) + (cbMtdParam._m0[21u].x * _558)) * _614) + _558;
    float _666 = (((_644 - _560) + (cbMtdParam._m0[21u].x * _560)) * _614) + _560;
    float _667 = (_614 * (sqrt(1.0 - (isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0)))) - _566)) + _566;
    float _672 = cbMtdParam._m0[22u].x + _579.w;
    float _675 = fma(_667, _229 * NORMAL.x, fma(_666, _236 * TANGENT.x, (_222 * _214) * _665));
    float _678 = fma(_667, _229 * NORMAL.y, fma(_666, _236 * TANGENT.y, (_222 * _215) * _665));
    float _681 = fma(_667, _229 * NORMAL.z, fma(_666, _236 * TANGENT.z, (_222 * _216) * _665));
    float _685 = inversesqrt(dot(vec3(_675, _678, _681), vec3(_675, _678, _681)));
    float _686 = _685 * _675;
    float _687 = _685 * _678;
    float _688 = _685 * _681;
    float _3696 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _689 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3718 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3729 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3740 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _707 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _759 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _749);
    float _760 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _749);
    float _761 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _749);
    float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
    float _766 = _759 * _765;
    float _767 = _760 * _765;
    float _768 = _761 * _765;
    vec4 _773 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _775 = _773.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _929 = sqrt(((_759 * _759) + (_760 * _760)) + (_761 * _761));
        float _935 = (cbMatDynParam._m0[5u].x * _929) + cbMatDynParam._m0[5u].y;
        float _3751 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _940 = (cbMatDynParam._m0[5u].z * _929) + cbMatDynParam._m0[5u].w;
        float _3762 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) - _936)) + _936) < ((_775 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _786 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _787 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _805 = fma(_688, cbSceneParam._m0[5u].z, fma(_687, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _686));
    float _808 = fma(_688, cbSceneParam._m0[6u].z, fma(_687, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _686));
    float _811 = fma(_688, cbSceneParam._m0[7u].z, fma(_687, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _686));
    uint _824 = _242 + 9u;
    uint _825 = _824 + uint(cbMatDynParam._m0[0u].w);
    float _831 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * cbInstanceData._m0[_825].x;
    float _832 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) * cbInstanceData._m0[_825].y;
    float _833 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_825].z;
    float _3773 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _3795 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    vec4 _845 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _786, cbSceneParam._m0[86u].y * _787));
    float _849 = ((isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * TEXCOORD_5.w) * _845.x;
    float _850 = dot(vec3(_686, _687, _688), vec3(_766, _767, _768));
    float _853 = _850 * 2.0;
    float _857 = (_853 * _686) - _766;
    float _858 = (_853 * _687) - _767;
    float _859 = (_853 * _688) - _768;
    float _863 = abs(dot(vec3(_766, _767, _768), vec3(_686, _687, _688)));
    float _3806 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _865 = sqrt(_689);
    float _878 = exp2((_865 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_865 * 3.0));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1247;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _972 = fma(_918, cbModelParam._m0[26u].z, fma(_914, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _910));
        float _976 = fma(_918, cbModelParam._m0[27u].z, fma(_914, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _910));
        float _980 = fma(_918, cbModelParam._m0[28u].z, fma(_914, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _910));
        float _1005 = _910 + _686;
        float _1006 = _914 + _687;
        float _1007 = _918 + _688;
        float _1017 = fma(_1007, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1005)) - _972;
        float _1018 = fma(_1007, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1005)) - _976;
        float _1019 = fma(_1007, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1005)) - _980;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_972 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_976 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[34u].z) + ((((((_980 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1075 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1041.x + (-0.5));
        float _1077 = _1075 * (_1041.y + (-0.5));
        float _1078 = _1075 * (_1041.z + (-0.5));
        float _1085 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1048.x + (-0.5));
        float _1087 = _1085 * (_1048.y + (-0.5));
        float _1088 = _1085 * (_1048.z + (-0.5));
        float _1095 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1055.x + (-0.5));
        float _1097 = _1095 * (_1055.y + (-0.5));
        float _1098 = _1095 * (_1055.z + (-0.5));
        float _1105 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1062.x + (-0.5));
        float _1107 = _1105 * (_1062.y + (-0.5));
        float _1108 = _1105 * (_1062.z + (-0.5));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = _1076 * 0.5;
        float _1113 = _1086 * 0.5;
        float _1114 = _1096 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1129 = (dot(vec3(_686, _687, _688), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1139 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3854 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1141 + 1.0))) + _1146) * _1109;
        float _1156 = _1077 * 0.5;
        float _1157 = _1087 * 0.5;
        float _1158 = _1097 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_686, _687, _688), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3887 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1183 + 1.0))) + _1188) * _1110;
        float _1198 = _1078 * 0.5;
        float _1199 = _1088 * 0.5;
        float _1200 = _1098 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_686, _687, _688), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3920 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1225 + 1.0))) + _1230) * _1111;
        _1247 = _1078;
        _1249 = _1077;
        _1250 = _1076;
        _1251 = _1088;
        _1252 = _1087;
        _1253 = _1086;
        _1254 = _1098;
        _1255 = _1097;
        _1256 = _1096;
        _1257 = _1111;
        _1258 = _1110;
        _1259 = _1109;
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
    }
    else
    {
        _1247 = _1248;
        _1249 = _1248;
        _1250 = _1248;
        _1251 = _1248;
        _1252 = _1248;
        _1253 = _1248;
        _1254 = _1248;
        _1255 = _1248;
        _1256 = _1248;
        _1257 = _1248;
        _1258 = _1248;
        _1259 = _1248;
        _1260 = 0.0;
        _1261 = 0.0;
        _1262 = 0.0;
    }
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1289 = fma(_918, cbModelParam._m0[30u].z, fma(_914, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _910));
        float _1293 = fma(_918, cbModelParam._m0[31u].z, fma(_914, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _910));
        float _1297 = fma(_918, cbModelParam._m0[32u].z, fma(_914, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _910));
        float _1320 = _910 + _686;
        float _1321 = _914 + _687;
        float _1322 = _918 + _688;
        float _1332 = fma(_1322, cbModelParam._m0[30u].z, fma(_1321, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1320)) - _1289;
        float _1333 = fma(_1322, cbModelParam._m0[31u].z, fma(_1321, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1320)) - _1293;
        float _1334 = fma(_1322, cbModelParam._m0[32u].z, fma(_1321, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1320)) - _1297;
        float _1338 = inversesqrt(dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334)));
        float _1351 = ((_1338 * _1332) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1289 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1338 * _1333) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1293 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1338 * _1334) / cbModelParam._m0[35u].z) + ((((((_1297 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        float _1388 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1355.x + (-0.5));
        float _1390 = _1388 * (_1355.y + (-0.5));
        float _1391 = _1388 * (_1355.z + (-0.5));
        float _1398 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1362.x + (-0.5));
        float _1400 = _1398 * (_1362.y + (-0.5));
        float _1401 = _1398 * (_1362.z + (-0.5));
        float _1408 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1369.x + (-0.5));
        float _1410 = _1408 * (_1369.y + (-0.5));
        float _1411 = _1408 * (_1369.z + (-0.5));
        float _1418 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1376.x + (-0.5));
        float _1420 = _1418 * (_1376.y + (-0.5));
        float _1421 = _1418 * (_1376.z + (-0.5));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = _1389 * 0.5;
        float _1426 = _1399 * 0.5;
        float _1427 = _1409 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_686, _687, _688), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3961 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _3972 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _3983 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_1452 + 1.0))) + _1457) * _1422;
        float _1467 = _1390 * 0.5;
        float _1468 = _1400 * 0.5;
        float _1469 = _1410 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_686, _687, _688), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4016 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1494 + 1.0))) + _1499) * _1423;
        float _1509 = _1391 * 0.5;
        float _1510 = _1401 * 0.5;
        float _1511 = _1411 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_686, _687, _688), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4049 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1536 + 1.0))) + _1541) * _1424;
        _1558 = _1391;
        _1559 = _1390;
        _1560 = _1389;
        _1561 = _1401;
        _1562 = _1400;
        _1563 = _1399;
        _1564 = _1411;
        _1565 = _1410;
        _1566 = _1409;
        _1567 = _1424;
        _1568 = _1423;
        _1569 = _1422;
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
    }
    else
    {
        _1558 = _1248;
        _1559 = _1248;
        _1560 = _1248;
        _1561 = _1248;
        _1562 = _1248;
        _1563 = _1248;
        _1564 = _1248;
        _1565 = _1248;
        _1566 = _1248;
        _1567 = _1248;
        _1568 = _1248;
        _1569 = _1248;
        _1570 = 0.0;
        _1571 = 0.0;
        _1572 = 0.0;
    }
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1260)) + _1260;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1261)) + _1261;
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1262)) + _1262;
    float _1605 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1608 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1611 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1582));
    float _1626 = _857 * 0.5;
    float _1627 = _858 * 0.5;
    float _1628 = _859 * 0.5;
    float _1629 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1632 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1635 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1669;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1642 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1247, _1251, _1254, _1257));
        float _1646 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1650 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1657 = dot(vec4(cbModelParam._m0[39u]), vec4(_1626, _1627, _1628, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1657) ? 0.0 : (isnan(0.0) ? _1657 : max(0.0, _1657))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1680;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1671 = dot(vec4(cbModelParam._m0[40u]), vec4(_1626, _1627, _1628, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1684 = (_1680 * cbModelParam._m0[1u].x) + (_1669 * (1.0 - cbModelParam._m0[1u].x));
    float _1694 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _689);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1694 : min(cbModelParam._m0[25u].z, _1694));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1742 = fma(_918, cbModelParam._m0[13u].z, fma(_914, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910)) + cbModelParam._m0[13u].w;
        float _1746 = fma(_918, cbModelParam._m0[14u].z, fma(_914, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910)) + cbModelParam._m0[14u].w;
        float _1750 = fma(_918, cbModelParam._m0[15u].z, fma(_914, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910)) + cbModelParam._m0[15u].w;
        float _1753 = fma(_859, cbModelParam._m0[13u].z, fma(_858, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857));
        float _1756 = fma(_859, cbModelParam._m0[14u].z, fma(_858, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857));
        float _1759 = fma(_859, cbModelParam._m0[15u].z, fma(_858, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857));
        float _1787;
        if (_1753 > 0.0)
        {
            _1787 = abs((1.0 - _1742) / _1753);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1742 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1787 = frontier_phi_17_15_ladder;
        }
        float _2008;
        if (_1756 > 0.0)
        {
            _2008 = abs((1.0 - _1746) / _1756);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1746 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2008 = frontier_phi_26_22_ladder;
        }
        float _2254;
        if (_1759 > 0.0)
        {
            _2254 = abs((1.0 - _1750) / _1759);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1750 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2254 = frontier_phi_38_33_ladder;
        }
        float _2256 = isnan(_2008) ? _1787 : (isnan(_1787) ? _2008 : min(_1787, _2008));
        float _2257 = isnan(_2254) ? _2256 : (isnan(_2256) ? _2254 : min(_2256, _2254));
        float _2261 = (_2257 * _1753) + _1742;
        float _2262 = (_2257 * _1756) + _1746;
        float _2263 = (_2257 * _1759) + _1750;
        float _2264 = _2257 * 9.9999997473787516355514526367188e-05;
        float _2266 = (-1.0) - _2264;
        float _2268 = _2264 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2263 > _2268) || ((_2263 < _2266) || ((_2262 > _2268) || ((_2262 < _2266) || ((_2261 < _2266) || (_2261 > _2268))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2387 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2263, cbModelParam._m0[9u].z, fma(_2262, cbModelParam._m0[9u].y, _2261 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2263, cbModelParam._m0[10u].z, fma(_2262, cbModelParam._m0[10u].y, _2261 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2263, cbModelParam._m0[11u].z, fma(_2262, cbModelParam._m0[11u].y, _2261 * cbModelParam._m0[11u].x))), _1695);
            frontier_phi_16_38_ladder = _2387.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2387.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2387.x * cbModelParam._m0[1u].y;
        }
        _1775 = frontier_phi_16_38_ladder_2;
        _1777 = frontier_phi_16_38_ladder_1;
        _1779 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1763 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_857, _858, _859), _1695);
        _1775 = _1763.x * cbModelParam._m0[1u].y;
        _1777 = _1763.y * cbModelParam._m0[1u].y;
        _1779 = _1763.z * cbModelParam._m0[1u].y;
    }
    float _1783 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _689);
    float _1784 = isnan(_1783) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1783 : min(cbModelParam._m0[25u].w, _1783));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1837 = fma(_918, cbModelParam._m0[21u].z, fma(_914, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910)) + cbModelParam._m0[21u].w;
        float _1841 = fma(_918, cbModelParam._m0[22u].z, fma(_914, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910)) + cbModelParam._m0[22u].w;
        float _1845 = fma(_918, cbModelParam._m0[23u].z, fma(_914, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910)) + cbModelParam._m0[23u].w;
        float _1848 = fma(_859, cbModelParam._m0[21u].z, fma(_858, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857));
        float _1851 = fma(_859, cbModelParam._m0[22u].z, fma(_858, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857));
        float _1854 = fma(_859, cbModelParam._m0[23u].z, fma(_858, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857));
        float _2013;
        if (_1848 > 0.0)
        {
            _2013 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2013 = frontier_phi_28_24_ladder;
        }
        float _2281;
        if (_1851 > 0.0)
        {
            _2281 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2281 = frontier_phi_40_35_ladder;
        }
        float _2486;
        if (_1854 > 0.0)
        {
            _2486 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2486 = frontier_phi_49_46_ladder;
        }
        float _2488 = isnan(_2281) ? _2013 : (isnan(_2013) ? _2281 : min(_2013, _2281));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1848) + _1837;
        float _2494 = (_2489 * _1851) + _1841;
        float _2495 = (_2489 * _1854) + _1845;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2496;
        float _2499 = _2496 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2495 > _2499) || ((_2495 < _2497) || ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 < _2497) || (_2493 > _2499))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2694 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2495, cbModelParam._m0[17u].z, fma(_2494, cbModelParam._m0[17u].y, _2493 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2495, cbModelParam._m0[18u].z, fma(_2494, cbModelParam._m0[18u].y, _2493 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2495, cbModelParam._m0[19u].z, fma(_2494, cbModelParam._m0[19u].y, _2493 * cbModelParam._m0[19u].x))), _1784);
            frontier_phi_25_49_ladder = _2694.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2694.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2694.x * cbModelParam._m0[1u].z;
        }
        _1873 = frontier_phi_25_49_ladder_2;
        _1875 = frontier_phi_25_49_ladder_1;
        _1877 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1857 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_857, _858, _859), _1784);
        _1873 = _1857.x * cbModelParam._m0[1u].z;
        _1875 = _1857.y * cbModelParam._m0[1u].z;
        _1877 = _1857.z * cbModelParam._m0[1u].z;
    }
    float _1889 = ((((1.0 - _878) * ((_865 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_878 * _865)) * _849;
    float _1890 = _1889 * ((cbModelParam._m0[1u].w * (_1873 - _1775)) + _1775);
    float _1891 = _1889 * ((cbModelParam._m0[1u].w * (_1875 - _1777)) + _1777);
    float _1892 = _1889 * ((cbModelParam._m0[1u].w * (_1877 - _1779)) + _1779);
    float _1895 = fma(_1892, cbSceneParam._m0[89u].z, fma(_1891, cbSceneParam._m0[89u].y, _1890 * cbSceneParam._m0[89u].x));
    float _1898 = fma(_1892, cbSceneParam._m0[90u].z, fma(_1891, cbSceneParam._m0[90u].y, _1890 * cbSceneParam._m0[90u].x));
    float _1901 = fma(_1892, cbSceneParam._m0[91u].z, fma(_1891, cbSceneParam._m0[91u].y, _1890 * cbSceneParam._m0[91u].x));
    vec4 _1909 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_786, _787));
    float _1911 = _1909.w;
    float _1923 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1911);
    float _1924 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1911);
    float _1925 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1911);
    uvec4 _1929 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1931 = _1929.x * 14u;
    uint _1932 = _1931 + 13u;
    float _1939 = _849 + (-1.0);
    float _1944 = (cbLight._m0[_1932].x * _1939) + 1.0;
    float _1945 = (cbLight._m0[_1932].y * _1939) + 1.0;
    float _1946 = (cbLight._m0[_1932].z * _1939) + 1.0;
    float _1947 = (cbLight._m0[_1932].w * _1939) + 1.0;
    uint _1948 = _1931 + 5u;
    float _1954 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
    uint _1958 = _1931 + 4u;
    float _1967 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1971 = _1931 | 1u;
    float _1982 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_686, _687, _688));
    float _1985 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_686, _687, _688));
    float _4185 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _4196 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1990 = (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.3183098733425140380859375;
    float _1992 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * 0.3183098733425140380859375;
    float _1999 = ((cbLight._m0[_1948].x * _1954) * _1992) + (((cbLight._m0[_1958].x * _1923) * _1967) * _1990);
    float _2000 = ((_1954 * cbLight._m0[_1948].y) * _1992) + (((cbLight._m0[_1958].y * _1924) * _1967) * _1990);
    float _2001 = ((_1954 * cbLight._m0[_1948].z) * _1992) + (((cbLight._m0[_1958].z * _1925) * _1967) * _1990);
    uvec4 _2005 = floatBitsToUint(cbLight._m0[_1931 + 12u]);
    bool _2007 = _2005.x == 0u;
    float _2018;
    float _2020;
    float _2022;
    if (_2007)
    {
        _2018 = _1999;
        _2020 = _2000;
        _2022 = _2001;
    }
    else
    {
        uint _2026 = _1931 + 6u;
        float _2042 = (dot(vec3(cbLight._m0[_1931 + 2u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2043 = _2042 * _2042;
        float _4207 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2044 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2045 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2018 = (((cbLight._m0[_2026].x * 0.3183098733425140380859375) * _2044) * _2045) + _1999;
        _2020 = (((cbLight._m0[_2026].y * 0.3183098733425140380859375) * _2044) * _2045) + _2000;
        _2022 = (((cbLight._m0[_2026].z * 0.3183098733425140380859375) * _2044) * _2045) + _2001;
    }
    bool _2025 = _2005.y == 0u;
    float _2063;
    float _2065;
    float _2067;
    if (_2025)
    {
        _2063 = _2018;
        _2065 = _2020;
        _2067 = _2022;
    }
    else
    {
        uint _2225 = _1931 + 7u;
        float _2241 = (dot(vec3(cbLight._m0[_1931 + 3u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2242 = _2241 * _2241;
        float _4223 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2243 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2244 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2063 = (((cbLight._m0[_2225].x * 0.3183098733425140380859375) * _2243) * _2244) + _2018;
        _2065 = (((cbLight._m0[_2225].y * 0.3183098733425140380859375) * _2243) * _2244) + _2020;
        _2067 = (((cbLight._m0[_2225].z * 0.3183098733425140380859375) * _2243) * _2244) + _2022;
    }
    uint _2070 = _1931 + 8u;
    float _2083 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _689) * 0.949999988079071044921875);
    float _2084 = _2083 * _2083;
    float _2085 = cbLight._m0[_1931].x + _766;
    float _2086 = cbLight._m0[_1931].y + _767;
    float _2087 = cbLight._m0[_1931].z + _768;
    float _2091 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
    float _2092 = _2091 * _2085;
    float _2093 = _2091 * _2086;
    float _2094 = _2091 * _2087;
    float _2095 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1931].xyz));
    float _4239 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _2099 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2100 = dot(vec3(_686, _687, _688), vec3(_2092, _2093, _2094));
    float _4261 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2103 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _2104 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_2092, _2093, _2094));
    float _4272 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2108 = _2084 * _2084;
    float _2112 = ((_2103 * _2103) * (_2108 + (-1.0))) + 1.0;
    float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2124 = 1.0 - _2084;
    float _2135 = (0.5 / (((_2099 * ((_2098 * _2124) + _2084)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2124) + _2084) * _2098))) * _2098;
    float _4283 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2137 = (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2108 / ((_2112 * _2112) * 3.141590118408203125));
    uint _2151 = _1931 + 9u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _689) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_1971].x + _766;
    float _2165 = cbLight._m0[_1971].y + _767;
    float _2166 = cbLight._m0[_1971].z + _768;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1971].xyz));
    float _4294 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2178 = dot(vec3(_686, _687, _688), vec3(_2171, _2172, _2173));
    float _4305 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2182 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2171, _2172, _2173));
    float _4316 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = _2163 * _2163;
    float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
    float _2199 = (exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2200 = 1.0 - _2163;
    float _2210 = (0.5 / (((_2099 * ((_2177 * _2200) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2200) + _2163) * _2177))) * _2177;
    float _4327 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2212 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
    float _2222 = (((_2199 * cbLight._m0[_2151].x) * _2212) * _1954) + ((((cbLight._m0[_2070].x * _1923) * _2123) * _2137) * _1967);
    float _2223 = (((_2199 * cbLight._m0[_2151].y) * _2212) * _1954) + ((((cbLight._m0[_2070].y * _1924) * _2123) * _2137) * _1967);
    float _2224 = (((_2199 * cbLight._m0[_2151].z) * _2212) * _1954) + ((((cbLight._m0[_2070].z * _1925) * _2123) * _2137) * _1967);
    float _2286;
    float _2288;
    float _2290;
    if (_2007)
    {
        _2286 = _2222;
        _2288 = _2223;
        _2290 = _2224;
    }
    else
    {
        uint _2292 = _1931 + 2u;
        uint _2296 = _1931 + 10u;
        float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _689) * 0.949999988079071044921875);
        float _2311 = _2310 * _2310;
        float _2312 = cbLight._m0[_2292].x + _766;
        float _2313 = cbLight._m0[_2292].y + _767;
        float _2314 = cbLight._m0[_2292].z + _768;
        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
        float _2319 = _2318 * _2312;
        float _2320 = _2318 * _2313;
        float _2321 = _2318 * _2314;
        float _2322 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2292].xyz));
        float _4338 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2326 = dot(vec3(_686, _687, _688), vec3(_2319, _2320, _2321));
        float _4349 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _2330 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2319, _2320, _2321));
        float _4360 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2334 = _2311 * _2311;
        float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
        float _2347 = (exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2348 = 1.0 - _2311;
        float _2358 = (0.5 / (((_2099 * ((_2325 * _2348) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2348) + _2311) * _2325))) * _2325;
        float _4371 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2360 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
        float _2361 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2286 = (((_2347 * cbLight._m0[_2296].x) * _2360) * _2361) + _2222;
        _2288 = (((_2347 * cbLight._m0[_2296].y) * _2360) * _2361) + _2223;
        _2290 = (((_2347 * cbLight._m0[_2296].z) * _2360) * _2361) + _2224;
    }
    float _2396;
    float _2398;
    float _2400;
    if (_2025)
    {
        _2396 = _2286;
        _2398 = _2288;
        _2400 = _2290;
    }
    else
    {
        uint _2407 = _1931 + 3u;
        uint _2411 = _1931 + 11u;
        float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2407].w)) * _689) * 0.949999988079071044921875);
        float _2426 = _2425 * _2425;
        float _2427 = cbLight._m0[_2407].x + _766;
        float _2428 = cbLight._m0[_2407].y + _767;
        float _2429 = cbLight._m0[_2407].z + _768;
        float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
        float _2434 = _2433 * _2427;
        float _2435 = _2433 * _2428;
        float _2436 = _2433 * _2429;
        float _2437 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2407].xyz));
        float _4387 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2440 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2441 = dot(vec3(_686, _687, _688), vec3(_2434, _2435, _2436));
        float _4398 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2445 = dot(vec3(cbLight._m0[_2407].xyz), vec3(_2434, _2435, _2436));
        float _4409 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2449 = _2426 * _2426;
        float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
        float _2462 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2463 = 1.0 - _2426;
        float _2473 = (0.5 / (((_2099 * ((_2440 * _2463) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2099 * _2463) + _2426) * _2440))) * _2440;
        float _4420 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2475 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
        float _2476 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
        _2396 = (((_2462 * cbLight._m0[_2411].x) * _2475) * _2476) + _2286;
        _2398 = (((_2462 * cbLight._m0[_2411].y) * _2475) * _2476) + _2288;
        _2400 = (((_2462 * cbLight._m0[_2411].z) * _2475) * _2476) + _2290;
    }
    float _2611;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    float _2621;
    if (_1929.y == 0u)
    {
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2551;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2551;
        float _2554 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2551;
        uvec4 _2566 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2567 = _2566.x;
        uint _2578 = uint((float(_2566.y) * floor(float(uint(cbSceneParam._m0[85u].y * _787) / _2567))) + floor(float(uint(cbSceneParam._m0[85u].x * _786) / _2567)));
        float _2588 = (log2(_2554 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2589 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        uint _2592 = uint(isnan(14.0) ? _2589 : (isnan(_2589) ? 14.0 : min(_2589, 14.0)));
        uvec4 _2597 = texelFetch(g_lightClusterGridBuffer, int(((_2592 << 2u) + (_2578 << 6u)) >> 2u));
        uint _2598 = _2597.x;
        uint _2599 = _2566.z;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        if (((((1u << ((_2599 >> 4u) & 15u)) + 4294967295u) & _2598) == 0u) || ((_2599 & 240u) == 0u))
        {
            _2699 = 0.0;
            _2701 = 0.0;
            _2703 = 0.0;
            _2705 = 0.0;
            _2707 = 0.0;
            _2709 = 0.0;
        }
        else
        {
            float _2700;
            float _2702;
            float _2704;
            float _2706;
            float _2708;
            float _2710;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            uint _2858 = 0u;
            uint _2867;
            bool _2868;
            for (;;)
            {
                _2867 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2858 << 2u)) >> 2u)).x;
                _2868 = _2867 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2868)
                {
                    frontier_phi_66_pred = _2852;
                    frontier_phi_66_pred_1 = _2857;
                    frontier_phi_66_pred_2 = _2856;
                    frontier_phi_66_pred_3 = _2855;
                    frontier_phi_66_pred_4 = _2854;
                    frontier_phi_66_pred_5 = _2853;
                }
                else
                {
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    uint _3003;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2867;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    for (;;)
                    {
                        uint _3007 = uint(findLSB(_3003)) + (_2858 << 5u);
                        uint _3004 = (_3003 + 4294967295u) & _3003;
                        uint _3009 = _3007 * 48u;
                        vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3009)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 3u)).x));
                        uint _3029 = (_3007 * 48u) + 4u;
                        vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 3u)).x));
                        uint _3048 = (_3007 * 48u) + 8u;
                        vec3 _3059 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x));
                        float _3063 = _3023.x - _2552;
                        float _3064 = _3023.y - _2553;
                        float _3065 = _3023.z - _2554;
                        float _3066 = dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065));
                        float _3069 = inversesqrt(_3066);
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3073 = dot(vec3(_805, _808, _811), vec3(_3070, _3071, _3072));
                        float _3078 = 1.0 - (_3066 * _3023.w);
                        float _4446 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
                        float _3080 = sqrt(_3066) * _3042.w;
                        float _3083 = 1.39999997615814208984375 / (_3080 + 1.39999997615814208984375);
                        float _3084 = _3083 * _3083;
                        float _3087 = ((1.0 - _3084) * _3073) + _3084;
                        float _3090 = _3080 * _3080;
                        float _3094 = ((isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))) * _3079) / ((_3090 * 0.699999988079071044921875) + 1.0);
                        float _3098 = (-0.0) - _2552;
                        float _3099 = (-0.0) - _2553;
                        float _3100 = (-0.0) - _2554;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3105 = _3104 * _3098;
                        float _3106 = _3104 * _3099;
                        float _3107 = _3104 * _3100;
                        float _3115 = exp2(log2(1.0 / ((_3090 * 3.5) + 5.0)) * 0.25);
                        float _3116 = 1.0 - _865;
                        float _3123 = sqrt(1.0 - ((1.0 - (_3116 * _3116)) * (1.0 - (_3115 * _3115))));
                        float _3124 = _3123 * _3123;
                        float _3125 = _3124 * _3124;
                        float _3126 = _3105 + _3070;
                        float _3127 = _3106 + _3071;
                        float _3128 = _3107 + _3072;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3136 = dot(vec3(_805, _808, _811), vec3(_3105, _3106, _3107));
                        float _4462 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                        float _3140 = dot(vec3(_805, _808, _811), vec3(_3132 * _3126, _3132 * _3127, _3132 * _3128));
                        float _4473 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                        float _3147 = ((_3143 * _3143) * (_3125 + (-1.0))) + 1.0;
                        float _3148 = _3083 * _3124;
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3073) + _3149;
                        float _4484 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3154 = 1.0 - _3124;
                        float _3164 = (0.5 / (((_3153 * ((_3139 * _3154) + _3124)) + 9.9999999392252902907785028219223e-09) + (((_3153 * _3154) + _3124) * _3139))) * _3153;
                        float _4495 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3175 = (((_3125 * 3.1415927410125732421875) * (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) / ((_3147 * _3147) * ((_3090 * 2.1991131305694580078125) + 3.141590118408203125))) * _3079;
                        _2927 = (_3094 * _3042.x) + _3000;
                        _2928 = (_3094 * _3042.y) + _3001;
                        _2929 = (_3094 * _3042.z) + _3002;
                        _2924 = (_3175 * _3059.x) + _2997;
                        _2925 = (_3175 * _3059.y) + _2998;
                        _2926 = (_3175 * _3059.z) + _2999;
                        if (_3004 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2997 = _2924;
                            _2998 = _2925;
                            _2999 = _2926;
                            _3000 = _2927;
                            _3001 = _2928;
                            _3002 = _2929;
                            _3003 = _3004;
                        }
                    }
                    frontier_phi_66_pred = _2924;
                    frontier_phi_66_pred_1 = _2929;
                    frontier_phi_66_pred_2 = _2928;
                    frontier_phi_66_pred_3 = _2927;
                    frontier_phi_66_pred_4 = _2926;
                    frontier_phi_66_pred_5 = _2925;
                }
                _2700 = frontier_phi_66_pred;
                _2710 = frontier_phi_66_pred_1;
                _2708 = frontier_phi_66_pred_2;
                _2706 = frontier_phi_66_pred_3;
                _2704 = frontier_phi_66_pred_4;
                _2702 = frontier_phi_66_pred_5;
                uint _2859 = _2858 + 1u;
                if (_2859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2852 = _2700;
                    _2853 = _2702;
                    _2854 = _2704;
                    _2855 = _2706;
                    _2856 = _2708;
                    _2857 = _2710;
                    _2858 = _2859;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2699 = _2700;
            _2701 = _2702;
            _2703 = _2704;
            _2705 = _2706;
            _2707 = _2708;
            _2709 = _2710;
        }
        uvec4 _2713 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2714 = _2713.z;
        uint _2716 = (_2714 >> 8u) & 15u;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((4294967295u << _2716) & _2598) == 0u)
        {
            _2820 = _2699;
            _2822 = _2701;
            _2824 = _2703;
            _2826 = _2705;
            _2828 = _2707;
            _2830 = _2709;
        }
        else
        {
            float _2845 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
            float _2846 = _2845 * _2552;
            float _2847 = _2845 * _2553;
            float _2848 = _2845 * _2554;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2716 < ((_2714 >> 12u) & 15u))
            {
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2980 = _2699;
                float _2981 = _2701;
                float _2982 = _2703;
                float _2983 = _2705;
                float _2984 = _2707;
                float _2985 = _2709;
                uint _2986 = _2716;
                uint _2995;
                bool _2996;
                for (;;)
                {
                    _2995 = texelFetch(g_lightClassification, int((((_2592 << 5u) + (_2578 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                    _2996 = _2995 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2996)
                    {
                        frontier_phi_77_pred = _2985;
                        frontier_phi_77_pred_1 = _2984;
                        frontier_phi_77_pred_2 = _2983;
                        frontier_phi_77_pred_3 = _2982;
                        frontier_phi_77_pred_4 = _2981;
                        frontier_phi_77_pred_5 = _2980;
                    }
                    else
                    {
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3202 = _2980;
                        float _3203 = _2981;
                        float _3204 = _2982;
                        float _3205 = _2983;
                        float _3206 = _2984;
                        float _3207 = _2985;
                        uint _3208 = _2995;
                        uint _3209;
                        vec4 _3234;
                        float _3235;
                        vec4 _3250;
                        vec3 _3262;
                        vec4 _3277;
                        vec4 _3292;
                        float _3338;
                        bool _3339;
                        for (;;)
                        {
                            uint _3219 = ((_2986 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3208));
                            _3209 = (_3208 + 4294967295u) & _3208;
                            uint _3221 = _3219 * 40u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3235 = _3234.w;
                            uint _3237 = (_3219 * 40u) + 4u;
                            _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            uint _3252 = (_3219 * 40u) + 8u;
                            _3262 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x));
                            uint _3264 = (_3219 * 40u) + 16u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3219 * 40u) + 20u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3219 * 40u) + 24u;
                            vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3313 = (_3219 * 40u) + 28u;
                            vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            _3338 = fma(_2554, _3326.z, fma(_2553, _3326.y, _3326.x * _2552)) + _3326.w;
                            _3339 = !((fma(_2554, _3307.z, fma(_2553, _3307.y, _3307.x * _2552)) + _3307.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3339)
                            {
                                float _3366 = _3234.x - _2552;
                                float _3367 = _3234.y - _2553;
                                float _3368 = _3234.z - _2554;
                                float _3369 = dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368));
                                float _3372 = inversesqrt(_3369);
                                float _3373 = _3372 * _3366;
                                float _3374 = _3372 * _3367;
                                float _3375 = _3372 * _3368;
                                float _3379 = 1.0 - (_3369 / (_3235 * _3235));
                                float _4506 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3380 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                                float _3384 = sqrt(_3369) * _3250.w;
                                float _3386 = 1.39999997615814208984375 / (_3384 + 1.39999997615814208984375);
                                float _3387 = _3386 * _3386;
                                float _3390 = ((1.0 - _3387) * dot(vec3(_3373, _3374, _3375), vec3(_805, _808, _811))) + _3387;
                                float _3393 = _3384 * _3384;
                                float _3397 = (fma(_2554, _3277.z, fma(_2553, _3277.y, _3277.x * _2552)) + _3277.w) / _3338;
                                float _3398 = (fma(_2554, _3292.z, fma(_2553, _3292.y, _3292.x * _2552)) + _3292.w) / _3338;
                                float _3402 = 1.0 - dot(vec2(_3397, _3398), vec2(_3397, _3398));
                                float _4522 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                                float _3403 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                                float _3404 = _3403 * (((isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))) * _3380) / ((_3393 * 0.699999988079071044921875) + 1.0));
                                float _3416 = exp2(log2(1.0 / ((_3393 * 3.5) + 5.0)) * 0.25);
                                float _3417 = 1.0 - _865;
                                float _3424 = sqrt(1.0 - ((1.0 - (_3417 * _3417)) * (1.0 - (_3416 * _3416))));
                                float _3425 = _3424 * _3424;
                                float _3426 = _3425 * _3425;
                                float _3427 = _3373 - _2846;
                                float _3428 = _3374 - _2847;
                                float _3429 = _3375 - _2848;
                                float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                                float _3437 = dot(vec3(_805, _808, _811), vec3((-0.0) - _2846, (-0.0) - _2847, (-0.0) - _2848));
                                float _4533 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3440 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                                float _3441 = dot(vec3(_805, _808, _811), vec3(_3433 * _3427, _3433 * _3428, _3433 * _3429));
                                float _4544 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3444 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3448 = ((_3444 * _3444) * (_3426 + (-1.0))) + 1.0;
                                float _3449 = _3386 * _3425;
                                float _3450 = _3449 * _3449;
                                float _3456 = ((1.0 - _3450) * dot(vec3(_805, _808, _811), vec3(_3373, _3374, _3375))) + _3450;
                                float _4555 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3458 = 1.0 - _3425;
                                float _3468 = (0.5 / (((_3457 * ((_3440 * _3458) + _3425)) + 9.9999999392252902907785028219223e-09) + (((_3457 * _3458) + _3425) * _3440))) * _3457;
                                float _4566 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3478 = (_3403 * _3380) * (((_3426 * 3.1415927410125732421875) * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) / ((_3448 * _3448) * ((_3393 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3404 * _3250.y;
                                frontier_phi_83_pred_1 = _3404 * _3250.x;
                                frontier_phi_83_pred_2 = _3478 * _3262.z;
                                frontier_phi_83_pred_3 = _3478 * _3262.y;
                                frontier_phi_83_pred_4 = _3478 * _3262.x;
                                frontier_phi_83_pred_5 = _3404 * _3250.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3486 = frontier_phi_83_pred;
                            _3485 = frontier_phi_83_pred_1;
                            _3484 = frontier_phi_83_pred_2;
                            _3483 = frontier_phi_83_pred_3;
                            _3482 = frontier_phi_83_pred_4;
                            _3487 = frontier_phi_83_pred_5;
                            _3192 = _3485 + _3205;
                            _3193 = _3486 + _3206;
                            _3194 = _3487 + _3207;
                            _3189 = _3482 + _3202;
                            _3190 = _3483 + _3203;
                            _3191 = _3484 + _3204;
                            if (_3209 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3202 = _3189;
                                _3203 = _3190;
                                _3204 = _3191;
                                _3205 = _3192;
                                _3206 = _3193;
                                _3207 = _3194;
                                _3208 = _3209;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3194;
                        frontier_phi_77_pred_1 = _3193;
                        frontier_phi_77_pred_2 = _3192;
                        frontier_phi_77_pred_3 = _3191;
                        frontier_phi_77_pred_4 = _3190;
                        frontier_phi_77_pred_5 = _3189;
                    }
                    _2831 = frontier_phi_77_pred;
                    _2829 = frontier_phi_77_pred_1;
                    _2827 = frontier_phi_77_pred_2;
                    _2825 = frontier_phi_77_pred_3;
                    _2823 = frontier_phi_77_pred_4;
                    _2821 = frontier_phi_77_pred_5;
                    uint _2987 = _2986 + 1u;
                    if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2980 = _2821;
                        _2981 = _2823;
                        _2982 = _2825;
                        _2983 = _2827;
                        _2984 = _2829;
                        _2985 = _2831;
                        _2986 = _2987;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2825;
                frontier_phi_58_59_ladder_1 = _2831;
                frontier_phi_58_59_ladder_2 = _2829;
                frontier_phi_58_59_ladder_3 = _2827;
                frontier_phi_58_59_ladder_4 = _2823;
                frontier_phi_58_59_ladder_5 = _2821;
            }
            else
            {
                frontier_phi_58_59_ladder = _2703;
                frontier_phi_58_59_ladder_1 = _2709;
                frontier_phi_58_59_ladder_2 = _2707;
                frontier_phi_58_59_ladder_3 = _2705;
                frontier_phi_58_59_ladder_4 = _2701;
                frontier_phi_58_59_ladder_5 = _2699;
            }
            _2820 = frontier_phi_58_59_ladder_5;
            _2822 = frontier_phi_58_59_ladder_4;
            _2824 = frontier_phi_58_59_ladder;
            _2826 = frontier_phi_58_59_ladder_3;
            _2828 = frontier_phi_58_59_ladder_2;
            _2830 = frontier_phi_58_59_ladder_1;
        }
        float _2835 = isnan(1.0) ? _849 : (isnan(_849) ? 1.0 : min(_849, 1.0));
        _2611 = (_2835 * _2826) + _2063;
        _2613 = (_2835 * _2828) + _2065;
        _2615 = (_2835 * _2830) + _2067;
        _2617 = ((_2820 * 0.039999999105930328369140625) * _2835) + _2396;
        _2619 = ((_2822 * 0.039999999105930328369140625) * _2835) + _2398;
        _2621 = ((_2824 * 0.039999999105930328369140625) * _2835) + _2400;
    }
    else
    {
        _2611 = _2063;
        _2613 = _2065;
        _2615 = _2067;
        _2617 = _2396;
        _2619 = _2398;
        _2621 = _2400;
    }
    float _4582 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4593 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4604 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2638 = ((isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2611 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _849))) + ((_2617 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1684)) * cbPerFrame._m0[3u].x);
    float _2639 = ((isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2613 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _849))) + ((_2619 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1684)) * cbPerFrame._m0[3u].x);
    float _2640 = ((isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2615 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _849))) + ((_2621 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1684)) * cbPerFrame._m0[3u].x);
    uint _2641 = _242 + 6u;
    float _2649 = _786 / cbSceneParam._m0[86u].x;
    float _2650 = _787 / cbSceneParam._m0[86u].y;
    vec4 _2664 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2649, _2650, (log2((isnan(cbSceneParam._m0[77u].w) ? _707 : (isnan(_707) ? cbSceneParam._m0[77u].w : min(_707, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2666 = _2664.x;
    float _2667 = _2664.y;
    float _2668 = _2664.z;
    float _2669 = _2664.w;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    if (_707 > cbSceneParam._m0[78u].w)
    {
        float _2724 = isnan(_707) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _707 : min(cbSceneParam._m0[80u].w, _707));
        float _2725 = _2724 / _707;
        float _2736 = _2725 * _759;
        float _2737 = _760 * _2725;
        float _2738 = (-0.0) - _2737;
        float _2740 = _2725 * _761;
        float _2742 = (cbSceneParam._m0[77u].w * _2738) / _2724;
        float _2743 = _2742 + cbSceneParam._m0[79u].w;
        float _2744 = cbSceneParam._m0[79u].w - _2737;
        float _2750 = sqrt(((_2736 * _2736) + (_2737 * _2737)) + (_2740 * _2740));
        float _2753 = (1.0 - (cbSceneParam._m0[77u].w / _2724)) * _2750;
        float _2758 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2760 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2937;
        if (abs((_2738 - _2742) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2937 = ((((_2743 > 0.0) ? exp2(_2758 * _2743) : (2.0 - exp2(_2760 * _2743))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2753;
        }
        else
        {
            float _2881 = 1.0 / cbSceneParam._m0[80u].x;
            float _2882 = isnan(_2744) ? _2743 : (isnan(_2743) ? _2744 : max(_2743, _2744));
            float _2883 = isnan(_2744) ? _2743 : (isnan(_2743) ? _2744 : min(_2743, _2744));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            _2937 = ((abs(_2750 / _2738) * cbSceneParam._m0[80u].y) * ((((_2892 - _2893) * 2.0) - ((exp2(_2758 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0)))) - exp2(_2758 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))))) * _2881)) - ((exp2(_2760 * _2892) - exp2(_2760 * _2893)) * _2881))) + (_2753 * cbSceneParam._m0[80u].z);
        }
        vec4 _2939 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2649, _2650, 1.0), 0.0);
        float _2948 = exp2((_2937 * (-1.44269502162933349609375)) * (1.0 - _2939.w));
        float _2949 = log2(_2948);
        float _2965 = log2(_2669);
        _2762 = (exp2(_2965 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].x)) * _2939.x) / cbSceneParam._m0[78u].x)) + _2666;
        _2764 = (exp2(_2965 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].y)) * _2939.y) / cbSceneParam._m0[78u].y)) + _2667;
        _2766 = (exp2(_2965 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2949 * cbSceneParam._m0[78u].z)) * _2939.z) / cbSceneParam._m0[78u].z)) + _2668;
        _2768 = _2948 * _2669;
    }
    else
    {
        _2762 = _2666;
        _2764 = _2667;
        _2766 = _2668;
        _2768 = _2669;
    }
    bool _2975;
    vec4 _2778;
    vec4 _2800;
    float _2802;
    float _2806;
    float _2807;
    float _2808;
    float _2809;
    bool _2819;
    for (;;)
    {
        _2778 = cbMatDynParam._m0[0u];
        float _2780 = roundEven(_2778.y);
        bool _2781 = _2780 == 3.0;
        float _2782 = log2(_2768);
        float _2789 = exp2(_2782 * cbSceneParam._m0[78u].x) * _2638;
        float _2790 = exp2(_2782 * cbSceneParam._m0[78u].y) * _2639;
        float _2791 = exp2(_2782 * cbSceneParam._m0[78u].z) * _2640;
        float _2798 = _775 + (-0.5);
        _2800 = cbMtdParam._m0[1u];
        _2802 = _2800.y * _2798;
        float _2805 = (_2780 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2806 = _2805 * (_2781 ? _2789 : (_2789 + (cbSceneParam._m0[72u].w * _2762)));
        _2807 = _2805 * (_2781 ? _2790 : (_2790 + (cbSceneParam._m0[72u].w * _2764)));
        _2808 = _2805 * (_2781 ? _2791 : (_2791 + (cbSceneParam._m0[72u].w * _2766)));
        _2809 = _2798 * 0.999000012874603271484375;
        _2819 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2819)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _2809) < 0.5)
            {
                _2975 = true;
                break;
            }
        }
        uint _2916 = _824 + uint(_2778.w);
        if ((cbInstanceData._m0[_2916].w < 1.0) && ((cbInstanceData._m0[_2916].w + _2809) < 0.5))
        {
            _2975 = true;
            break;
        }
        if ((_2802 + 1.0) < _2800.x)
        {
            _2975 = true;
            break;
        }
        _2975 = false;
        break;
    }
    float _3180;
    if (_2975)
    {
        discard_state = true;
        _3180 = 0.0;
    }
    else
    {
        _3180 = cbInstanceData._m0[_2641].w;
    }
    SV_Target.x = _2806;
    SV_Target.y = _2807;
    SV_Target.z = _2808;
    SV_Target.w = _3180;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2641].w;
    discard_exit();
}


