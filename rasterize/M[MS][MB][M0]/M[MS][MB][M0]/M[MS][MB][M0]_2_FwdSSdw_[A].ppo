#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _924;
float _3315;
float _3316;
float _3317;
float _3318;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    vec4 _264 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2(((_243 * TEXCOORD.z) * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, ((_243 * TEXCOORD.w) * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = _311.z;
    float _319 = (_311.x * 2.0) + (-1.0);
    float _320 = (_311.y * 2.0) + (-1.0);
    float _321 = dot(vec2(_319, _320), vec2(_319, _320));
    float _3327 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _327 = sqrt(1.0 - (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))));
    float _332 = _319 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_285.x * 2.0) + (-1.0)));
    float _333 = _320 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_285.y * 2.0) + (-1.0)));
    float _338 = (((_285.z - _315) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _315;
    float _343 = cbMtdParam._m0[22u].x + _311.w;
    float _346 = fma(_327, _211 * NORMAL.x, fma(_333, _218 * TANGENT.x, (_204 * _196) * _332));
    float _349 = fma(_327, _211 * NORMAL.y, fma(_333, _218 * TANGENT.y, (_204 * _197) * _332));
    float _352 = fma(_327, _211 * NORMAL.z, fma(_333, _218 * TANGENT.z, (_204 * _198) * _332));
    float _356 = inversesqrt(dot(vec3(_346, _349, _352), vec3(_346, _349, _352)));
    float _357 = _356 * _346;
    float _358 = _356 * _349;
    float _359 = _356 * _352;
    float _3338 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _360 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _3349 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _3360 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3371 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3382 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _378 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _420 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _430 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _420);
    float _431 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _420);
    float _432 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _420);
    float _436 = inversesqrt(dot(vec3(_430, _431, _432), vec3(_430, _431, _432)));
    float _437 = _430 * _436;
    float _438 = _431 * _436;
    float _439 = _432 * _436;
    vec4 _444 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _446 = _444.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _603 = sqrt(((_430 * _430) + (_431 * _431)) + (_432 * _432));
        float _609 = (cbMatDynParam._m0[5u].x * _603) + cbMatDynParam._m0[5u].y;
        float _3393 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _610 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _614 = (cbMatDynParam._m0[5u].z * _603) + cbMatDynParam._m0[5u].w;
        float _3404 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) - _610)) + _610) < ((_446 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _458 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _459 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _479 = fma(_359, cbSceneParam._m0[5u].z, fma(_358, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _357));
    float _482 = fma(_359, cbSceneParam._m0[6u].z, fma(_358, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _357));
    float _485 = fma(_359, cbSceneParam._m0[7u].z, fma(_358, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _357));
    uint _498 = _224 + 9u;
    uint _499 = _498 + uint(cbMatDynParam._m0[0u].w);
    float _505 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_499].x;
    float _506 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * cbInstanceData._m0[_499].y;
    float _507 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)))) * cbInstanceData._m0[_499].z;
    float _3415 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _3426 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _509 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _510 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    vec4 _519 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _458, cbSceneParam._m0[86u].y * _459));
    float _523 = ((isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * TEXCOORD_5.w) * _519.x;
    float _524 = dot(vec3(_357, _358, _359), vec3(_437, _438, _439));
    float _527 = _524 * 2.0;
    float _531 = (_527 * _357) - _437;
    float _532 = (_527 * _358) - _438;
    float _533 = (_527 * _359) - _439;
    float _537 = abs(dot(vec3(_437, _438, _439), vec3(_357, _358, _359)));
    float _3448 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _539 = sqrt(_360);
    float _552 = exp2((_539 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_539 * 3.0));
    float _584 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _588 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _923;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _648 = fma(_592, cbModelParam._m0[26u].z, fma(_588, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _584));
        float _652 = fma(_592, cbModelParam._m0[27u].z, fma(_588, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _584));
        float _656 = fma(_592, cbModelParam._m0[28u].z, fma(_588, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _584));
        float _681 = _584 + _357;
        float _682 = _588 + _358;
        float _683 = _592 + _359;
        float _693 = fma(_683, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _681)) - _648;
        float _694 = fma(_683, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _681)) - _652;
        float _695 = fma(_683, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _681)) - _656;
        float _699 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
        float _712 = ((_699 * _693) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_648 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _713 = ((_699 * _694) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_652 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _714 = ((_699 * _695) / cbModelParam._m0[34u].z) + ((((((_656 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_712, _713, _714), 0.0);
        float _751 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_717.x + (-0.5));
        float _753 = _751 * (_717.y + (-0.5));
        float _754 = _751 * (_717.z + (-0.5));
        float _761 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _762 = _761 * (_724.x + (-0.5));
        float _763 = _761 * (_724.y + (-0.5));
        float _764 = _761 * (_724.z + (-0.5));
        float _771 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _772 = _771 * (_731.x + (-0.5));
        float _773 = _771 * (_731.y + (-0.5));
        float _774 = _771 * (_731.z + (-0.5));
        float _781 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _782 = _781 * (_738.x + (-0.5));
        float _783 = _781 * (_738.y + (-0.5));
        float _784 = _781 * (_738.z + (-0.5));
        float _785 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _786 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _787 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _788 = _752 * 0.5;
        float _789 = _762 * 0.5;
        float _790 = _772 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _805 = (dot(vec3(_357, _358, _359), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _815 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_785 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3496 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_817 + 1.0))) + _822) * _785;
        float _832 = _753 * 0.5;
        float _833 = _763 * 0.5;
        float _834 = _773 * 0.5;
        float _835 = dot(vec3(_832, _833, _834), vec3(_832, _833, _834));
        float _840 = (_835 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_835);
        float _848 = (dot(vec3(_357, _358, _359), vec3(_840 * _832, _840 * _833, _840 * _834)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _857 = sqrt(((_833 * _833) + (_832 * _832)) + (_834 * _834)) / (_786 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3529 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_859 + 1.0))) + _864) * _786;
        float _874 = _754 * 0.5;
        float _875 = _764 * 0.5;
        float _876 = _774 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_357, _358, _359), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_787 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3562 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_901 + 1.0))) + _906) * _787;
        _923 = _754;
        _925 = _753;
        _926 = _752;
        _927 = _764;
        _928 = _763;
        _929 = _762;
        _930 = _774;
        _931 = _773;
        _932 = _772;
        _933 = _787;
        _934 = _786;
        _935 = _785;
        _936 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
        _937 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _938 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
    }
    else
    {
        _923 = _924;
        _925 = _924;
        _926 = _924;
        _927 = _924;
        _928 = _924;
        _929 = _924;
        _930 = _924;
        _931 = _924;
        _932 = _924;
        _933 = _924;
        _934 = _924;
        _935 = _924;
        _936 = 0.0;
        _937 = 0.0;
        _938 = 0.0;
    }
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _966 = fma(_592, cbModelParam._m0[30u].z, fma(_588, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _584));
        float _970 = fma(_592, cbModelParam._m0[31u].z, fma(_588, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _584));
        float _974 = fma(_592, cbModelParam._m0[32u].z, fma(_588, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _584));
        float _997 = _584 + _357;
        float _998 = _588 + _358;
        float _999 = _592 + _359;
        float _1009 = fma(_999, cbModelParam._m0[30u].z, fma(_998, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _997)) - _966;
        float _1010 = fma(_999, cbModelParam._m0[31u].z, fma(_998, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _997)) - _970;
        float _1011 = fma(_999, cbModelParam._m0[32u].z, fma(_998, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _997)) - _974;
        float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
        float _1028 = ((_1015 * _1009) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_966 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1029 = ((_1015 * _1010) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_970 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1030 = ((_1015 * _1011) / cbModelParam._m0[35u].z) + ((((((_974 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1028, _1029, _1030), 0.0);
        float _1065 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1032.x + (-0.5));
        float _1067 = _1065 * (_1032.y + (-0.5));
        float _1068 = _1065 * (_1032.z + (-0.5));
        float _1075 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1039.x + (-0.5));
        float _1077 = _1075 * (_1039.y + (-0.5));
        float _1078 = _1075 * (_1039.z + (-0.5));
        float _1085 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1046.x + (-0.5));
        float _1087 = _1085 * (_1046.y + (-0.5));
        float _1088 = _1085 * (_1046.z + (-0.5));
        float _1095 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1053.x + (-0.5));
        float _1097 = _1095 * (_1053.y + (-0.5));
        float _1098 = _1095 * (_1053.z + (-0.5));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = _1066 * 0.5;
        float _1103 = _1076 * 0.5;
        float _1104 = _1086 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1118 = (dot(vec3(_357, _358, _359), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1127 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3625 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1129 + 1.0))) + _1134) * _1099;
        float _1144 = _1067 * 0.5;
        float _1145 = _1077 * 0.5;
        float _1146 = _1087 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_357, _358, _359), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3658 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1171 + 1.0))) + _1176) * _1100;
        float _1186 = _1068 * 0.5;
        float _1187 = _1078 * 0.5;
        float _1188 = _1088 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_357, _358, _359), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3691 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1213 + 1.0))) + _1218) * _1101;
        _1235 = _1068;
        _1236 = _1067;
        _1237 = _1066;
        _1238 = _1078;
        _1239 = _1077;
        _1240 = _1076;
        _1241 = _1088;
        _1242 = _1087;
        _1243 = _1086;
        _1244 = _1101;
        _1245 = _1100;
        _1246 = _1099;
        _1247 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1248 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1249 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
    }
    else
    {
        _1235 = _924;
        _1236 = _924;
        _1237 = _924;
        _1238 = _924;
        _1239 = _924;
        _1240 = _924;
        _1241 = _924;
        _1242 = _924;
        _1243 = _924;
        _1244 = _924;
        _1245 = _924;
        _1246 = _924;
        _1247 = 0.0;
        _1248 = 0.0;
        _1249 = 0.0;
    }
    float _1259 = (cbModelParam._m0[1u].x * (_1247 - _936)) + _936;
    float _1260 = (cbModelParam._m0[1u].x * (_1248 - _937)) + _937;
    float _1261 = (cbModelParam._m0[1u].x * (_1249 - _938)) + _938;
    float _1282 = fma(_1261, cbSceneParam._m0[89u].z, fma(_1260, cbSceneParam._m0[89u].y, _1259 * cbSceneParam._m0[89u].x));
    float _1285 = fma(_1261, cbSceneParam._m0[90u].z, fma(_1260, cbSceneParam._m0[90u].y, _1259 * cbSceneParam._m0[90u].x));
    float _1288 = fma(_1261, cbSceneParam._m0[91u].z, fma(_1260, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1259));
    float _1303 = _531 * 0.5;
    float _1304 = _532 * 0.5;
    float _1305 = _533 * 0.5;
    float _1306 = dot(vec4(_1303, _1304, _1305, 1.0), vec4(_1237, _1240, _1243, _1246));
    float _1309 = dot(vec4(_1303, _1304, _1305, 1.0), vec4(_1236, _1239, _1242, _1245));
    float _1312 = dot(vec4(_1303, _1304, _1305, 1.0), vec4(_1235, _1238, _1241, _1244));
    float _1346;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1319 = dot(vec4(_1303, _1304, _1305, 1.0), vec4(_923, _927, _930, _933));
        float _1323 = dot(vec4(_1303, _1304, _1305, 1.0), vec4(_925, _928, _931, _934));
        float _1327 = dot(vec4(_1303, _1304, _1305, 1.0), vec4(_926, _929, _932, _935));
        float _1334 = dot(vec4(cbModelParam._m0[39u]), vec4(_1303, _1304, _1305, 1.0));
        _1346 = dot(vec3(isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1334) ? 0.0 : (isnan(0.0) ? _1334 : max(0.0, _1334))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1346 = 1.0;
    }
    float _1357;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1348 = dot(vec4(cbModelParam._m0[40u]), vec4(_1303, _1304, _1305, 1.0));
        _1357 = dot(vec3(isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1348) ? 0.0 : (isnan(0.0) ? _1348 : max(0.0, _1348))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1357 = 1.0;
    }
    float _1361 = (_1357 * cbModelParam._m0[1u].x) + (_1346 * (1.0 - cbModelParam._m0[1u].x));
    float _1371 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _360);
    float _1372 = isnan(_1371) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1371 : min(cbModelParam._m0[25u].z, _1371));
    float _1454;
    float _1456;
    float _1458;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1421 = fma(_592, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _584)) + cbModelParam._m0[13u].w;
        float _1425 = fma(_592, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _584)) + cbModelParam._m0[14u].w;
        float _1429 = fma(_592, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _584)) + cbModelParam._m0[15u].w;
        float _1432 = fma(_533, cbModelParam._m0[13u].z, fma(_532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _531));
        float _1435 = fma(_533, cbModelParam._m0[14u].z, fma(_532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _531));
        float _1438 = fma(_533, cbModelParam._m0[15u].z, fma(_532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _531));
        float _1466;
        if (_1432 > 0.0)
        {
            _1466 = abs((1.0 - _1421) / _1432);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1432 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1421 + 1.0) / _1432);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1466 = frontier_phi_17_15_ladder;
        }
        float _1692;
        if (_1435 > 0.0)
        {
            _1692 = abs((1.0 - _1425) / _1435);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1425 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1692 = frontier_phi_26_22_ladder;
        }
        float _1938;
        if (_1438 > 0.0)
        {
            _1938 = abs((1.0 - _1429) / _1438);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1429 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1938 = frontier_phi_38_33_ladder;
        }
        float _1940 = isnan(_1692) ? _1466 : (isnan(_1466) ? _1692 : min(_1466, _1692));
        float _1941 = isnan(_1938) ? _1940 : (isnan(_1940) ? _1938 : min(_1940, _1938));
        float _1945 = (_1941 * _1432) + _1421;
        float _1946 = (_1941 * _1435) + _1425;
        float _1947 = (_1941 * _1438) + _1429;
        float _1948 = _1941 * 9.9999997473787516355514526367188e-05;
        float _1950 = (-1.0) - _1948;
        float _1952 = _1948 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1947 > _1952) || ((_1947 < _1950) || ((_1946 > _1952) || ((_1946 < _1950) || ((_1945 < _1950) || (_1945 > _1952))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2071 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1947, cbModelParam._m0[9u].z, fma(_1946, cbModelParam._m0[9u].y, _1945 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1947, cbModelParam._m0[10u].z, fma(_1946, cbModelParam._m0[10u].y, _1945 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1947, cbModelParam._m0[11u].z, fma(_1946, cbModelParam._m0[11u].y, _1945 * cbModelParam._m0[11u].x))), _1372);
            frontier_phi_16_38_ladder = _2071.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2071.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2071.x * cbModelParam._m0[1u].y;
        }
        _1454 = frontier_phi_16_38_ladder_2;
        _1456 = frontier_phi_16_38_ladder_1;
        _1458 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1442 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_531, _532, _533), _1372);
        _1454 = _1442.x * cbModelParam._m0[1u].y;
        _1456 = _1442.y * cbModelParam._m0[1u].y;
        _1458 = _1442.z * cbModelParam._m0[1u].y;
    }
    float _1462 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _360);
    float _1463 = isnan(_1462) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1462 : min(cbModelParam._m0[25u].w, _1462));
    float _1555;
    float _1557;
    float _1559;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1519 = fma(_592, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _584)) + cbModelParam._m0[21u].w;
        float _1523 = fma(_592, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _584)) + cbModelParam._m0[22u].w;
        float _1527 = fma(_592, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _584)) + cbModelParam._m0[23u].w;
        float _1530 = fma(_533, cbModelParam._m0[21u].z, fma(_532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _531));
        float _1533 = fma(_533, cbModelParam._m0[22u].z, fma(_532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _531));
        float _1536 = fma(_533, cbModelParam._m0[23u].z, fma(_532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _531));
        float _1697;
        if (_1530 > 0.0)
        {
            _1697 = abs((1.0 - _1519) / _1530);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1519 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1697 = frontier_phi_28_24_ladder;
        }
        float _1965;
        if (_1533 > 0.0)
        {
            _1965 = abs((1.0 - _1523) / _1533);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1523 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1965 = frontier_phi_40_35_ladder;
        }
        float _2170;
        if (_1536 > 0.0)
        {
            _2170 = abs((1.0 - _1527) / _1536);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1527 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2170 = frontier_phi_49_46_ladder;
        }
        float _2172 = isnan(_1965) ? _1697 : (isnan(_1697) ? _1965 : min(_1697, _1965));
        float _2173 = isnan(_2170) ? _2172 : (isnan(_2172) ? _2170 : min(_2172, _2170));
        float _2177 = (_2173 * _1530) + _1519;
        float _2178 = (_2173 * _1533) + _1523;
        float _2179 = (_2173 * _1536) + _1527;
        float _2180 = _2173 * 9.9999997473787516355514526367188e-05;
        float _2181 = (-1.0) - _2180;
        float _2183 = _2180 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2179 > _2183) || ((_2179 < _2181) || ((_2178 > _2183) || ((_2178 < _2181) || ((_2177 < _2181) || (_2177 > _2183))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2179, cbModelParam._m0[17u].z, fma(_2178, cbModelParam._m0[17u].y, _2177 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2179, cbModelParam._m0[18u].z, fma(_2178, cbModelParam._m0[18u].y, _2177 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2179, cbModelParam._m0[19u].z, fma(_2178, cbModelParam._m0[19u].y, _2177 * cbModelParam._m0[19u].x))), _1463);
            frontier_phi_25_49_ladder = _2378.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2378.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2378.x * cbModelParam._m0[1u].z;
        }
        _1555 = frontier_phi_25_49_ladder_2;
        _1557 = frontier_phi_25_49_ladder_1;
        _1559 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1539 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_531, _532, _533), _1463);
        _1555 = _1539.x * cbModelParam._m0[1u].z;
        _1557 = _1539.y * cbModelParam._m0[1u].z;
        _1559 = _1539.z * cbModelParam._m0[1u].z;
    }
    float _1571 = ((((1.0 - _552) * ((_539 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_552 * _539)) * _523;
    float _1572 = _1571 * ((cbModelParam._m0[1u].w * (_1555 - _1454)) + _1454);
    float _1573 = _1571 * ((cbModelParam._m0[1u].w * (_1557 - _1456)) + _1456);
    float _1574 = _1571 * ((cbModelParam._m0[1u].w * (_1559 - _1458)) + _1458);
    float _1577 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1580 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1583 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, _1572 * cbSceneParam._m0[91u].x));
    vec4 _1591 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_458, _459));
    float _1593 = _1591.w;
    float _1605 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1593);
    float _1606 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1593);
    float _1607 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1593);
    uvec4 _1611 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1613 = _1611.x * 14u;
    uint _1614 = _1613 + 13u;
    float _1621 = _523 + (-1.0);
    float _1626 = (cbLight._m0[_1614].x * _1621) + 1.0;
    float _1627 = (cbLight._m0[_1614].y * _1621) + 1.0;
    float _1628 = (cbLight._m0[_1614].z * _1621) + 1.0;
    float _1629 = (cbLight._m0[_1614].w * _1621) + 1.0;
    uint _1630 = _1613 + 5u;
    float _1636 = isnan(1.0) ? _1627 : (isnan(_1627) ? 1.0 : min(_1627, 1.0));
    uint _1640 = _1613 + 4u;
    float _1650 = isnan(1.0) ? _1626 : (isnan(_1626) ? 1.0 : min(_1626, 1.0));
    uint _1654 = _1613 | 1u;
    float _1665 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_357, _358, _359));
    float _1668 = dot(vec3(cbLight._m0[_1654].xyz), vec3(_357, _358, _359));
    float _3827 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _3838 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1673 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * 0.3183098733425140380859375;
    float _1675 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.3183098733425140380859375;
    float _1682 = ((cbLight._m0[_1630].x * _1636) * _1675) + (((cbLight._m0[_1640].x * _1605) * _1650) * _1673);
    float _1683 = ((_1636 * cbLight._m0[_1630].y) * _1675) + (((cbLight._m0[_1640].y * _1606) * _1650) * _1673);
    float _1684 = ((_1636 * cbLight._m0[_1630].z) * _1675) + (((cbLight._m0[_1640].z * _1607) * _1650) * _1673);
    uvec4 _1689 = floatBitsToUint(cbLight._m0[_1613 + 12u]);
    bool _1691 = _1689.x == 0u;
    float _1702;
    float _1704;
    float _1706;
    if (_1691)
    {
        _1702 = _1682;
        _1704 = _1683;
        _1706 = _1684;
    }
    else
    {
        uint _1710 = _1613 + 6u;
        float _1726 = (dot(vec3(cbLight._m0[_1613 + 2u].xyz), vec3(_357, _358, _359)) * 0.5) + 0.5;
        float _1727 = _1726 * _1726;
        float _3849 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1729 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
        _1702 = (((cbLight._m0[_1710].x * 0.3183098733425140380859375) * _1728) * _1729) + _1682;
        _1704 = (((cbLight._m0[_1710].y * 0.3183098733425140380859375) * _1728) * _1729) + _1683;
        _1706 = (((cbLight._m0[_1710].z * 0.3183098733425140380859375) * _1728) * _1729) + _1684;
    }
    bool _1709 = _1689.y == 0u;
    float _1747;
    float _1749;
    float _1751;
    if (_1709)
    {
        _1747 = _1702;
        _1749 = _1704;
        _1751 = _1706;
    }
    else
    {
        uint _1909 = _1613 + 7u;
        float _1925 = (dot(vec3(cbLight._m0[_1613 + 3u].xyz), vec3(_357, _358, _359)) * 0.5) + 0.5;
        float _1926 = _1925 * _1925;
        float _3865 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1927 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1928 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
        _1747 = (((cbLight._m0[_1909].x * 0.3183098733425140380859375) * _1927) * _1928) + _1702;
        _1749 = (((cbLight._m0[_1909].y * 0.3183098733425140380859375) * _1927) * _1928) + _1704;
        _1751 = (((cbLight._m0[_1909].z * 0.3183098733425140380859375) * _1927) * _1928) + _1706;
    }
    uint _1754 = _1613 + 8u;
    float _1767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1613].w)) * _360) * 0.949999988079071044921875);
    float _1768 = _1767 * _1767;
    float _1769 = cbLight._m0[_1613].x + _437;
    float _1770 = cbLight._m0[_1613].y + _438;
    float _1771 = cbLight._m0[_1613].z + _439;
    float _1775 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
    float _1776 = _1775 * _1769;
    float _1777 = _1775 * _1770;
    float _1778 = _1775 * _1771;
    float _1779 = dot(vec3(_357, _358, _359), vec3(cbLight._m0[_1613].xyz));
    float _3881 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1782 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _3892 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _1783 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _1784 = dot(vec3(_357, _358, _359), vec3(_1776, _1777, _1778));
    float _3903 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1787 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1788 = dot(vec3(cbLight._m0[_1613].xyz), vec3(_1776, _1777, _1778));
    float _3914 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1792 = _1768 * _1768;
    float _1796 = ((_1787 * _1787) * (_1792 + (-1.0))) + 1.0;
    float _1807 = (exp2(log2(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1808 = 1.0 - _1768;
    float _1819 = (0.5 / (((_1783 * ((_1782 * _1808) + _1768)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _1808) + _1768) * _1782))) * _1782;
    float _3925 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1821 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1792 / ((_1796 * _1796) * 3.141590118408203125));
    uint _1835 = _1613 + 9u;
    float _1846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1654].w)) * _360) * 0.949999988079071044921875);
    float _1847 = _1846 * _1846;
    float _1848 = cbLight._m0[_1654].x + _437;
    float _1849 = cbLight._m0[_1654].y + _438;
    float _1850 = cbLight._m0[_1654].z + _439;
    float _1854 = inversesqrt(dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850)));
    float _1855 = _1854 * _1848;
    float _1856 = _1854 * _1849;
    float _1857 = _1854 * _1850;
    float _1858 = dot(vec3(_357, _358, _359), vec3(cbLight._m0[_1654].xyz));
    float _3936 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1862 = dot(vec3(_357, _358, _359), vec3(_1855, _1856, _1857));
    float _3947 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1865 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1866 = dot(vec3(cbLight._m0[_1654].xyz), vec3(_1855, _1856, _1857));
    float _3958 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1870 = _1847 * _1847;
    float _1874 = ((_1865 * _1865) * (_1870 + (-1.0))) + 1.0;
    float _1883 = (exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1884 = 1.0 - _1847;
    float _1894 = (0.5 / (((_1783 * ((_1861 * _1884) + _1847)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _1884) + _1847) * _1861))) * _1861;
    float _3969 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1896 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1870 / ((_1874 * _1874) * 3.141590118408203125));
    float _1906 = (((_1883 * cbLight._m0[_1835].x) * _1896) * _1636) + ((((cbLight._m0[_1754].x * _1605) * _1807) * _1821) * _1650);
    float _1907 = (((_1883 * cbLight._m0[_1835].y) * _1896) * _1636) + ((((cbLight._m0[_1754].y * _1606) * _1807) * _1821) * _1650);
    float _1908 = (((_1883 * cbLight._m0[_1835].z) * _1896) * _1636) + ((((cbLight._m0[_1754].z * _1607) * _1807) * _1821) * _1650);
    float _1970;
    float _1972;
    float _1974;
    if (_1691)
    {
        _1970 = _1906;
        _1972 = _1907;
        _1974 = _1908;
    }
    else
    {
        uint _1976 = _1613 + 2u;
        uint _1980 = _1613 + 10u;
        float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _360) * 0.949999988079071044921875);
        float _1995 = _1994 * _1994;
        float _1996 = cbLight._m0[_1976].x + _437;
        float _1997 = cbLight._m0[_1976].y + _438;
        float _1998 = cbLight._m0[_1976].z + _439;
        float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
        float _2003 = _2002 * _1996;
        float _2004 = _2002 * _1997;
        float _2005 = _2002 * _1998;
        float _2006 = dot(vec3(_357, _358, _359), vec3(cbLight._m0[_1976].xyz));
        float _3980 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2010 = dot(vec3(_357, _358, _359), vec3(_2003, _2004, _2005));
        float _3991 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2013 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2014 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2003, _2004, _2005));
        float _4002 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2018 = _1995 * _1995;
        float _2022 = ((_2013 * _2013) * (_2018 + (-1.0))) + 1.0;
        float _2031 = (exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2032 = 1.0 - _1995;
        float _2042 = (0.5 / (((_1783 * ((_2009 * _2032) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _2032) + _1995) * _2009))) * _2009;
        float _4013 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2044 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_2018 / ((_2022 * _2022) * 3.141590118408203125));
        float _2045 = isnan(1.0) ? _1628 : (isnan(_1628) ? 1.0 : min(_1628, 1.0));
        _1970 = (((_2031 * cbLight._m0[_1980].x) * _2044) * _2045) + _1906;
        _1972 = (((_2031 * cbLight._m0[_1980].y) * _2044) * _2045) + _1907;
        _1974 = (((_2031 * cbLight._m0[_1980].z) * _2044) * _2045) + _1908;
    }
    float _2080;
    float _2082;
    float _2084;
    if (_1709)
    {
        _2080 = _1970;
        _2082 = _1972;
        _2084 = _1974;
    }
    else
    {
        uint _2091 = _1613 + 3u;
        uint _2095 = _1613 + 11u;
        float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _360) * 0.949999988079071044921875);
        float _2110 = _2109 * _2109;
        float _2111 = cbLight._m0[_2091].x + _437;
        float _2112 = cbLight._m0[_2091].y + _438;
        float _2113 = cbLight._m0[_2091].z + _439;
        float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
        float _2118 = _2117 * _2111;
        float _2119 = _2117 * _2112;
        float _2120 = _2117 * _2113;
        float _2121 = dot(vec3(_357, _358, _359), vec3(cbLight._m0[_2091].xyz));
        float _4029 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        float _2124 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2125 = dot(vec3(_357, _358, _359), vec3(_2118, _2119, _2120));
        float _4040 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2128 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _2129 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2118, _2119, _2120));
        float _4051 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2133 = _2110 * _2110;
        float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
        float _2146 = (exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2147 = 1.0 - _2110;
        float _2157 = (0.5 / (((_1783 * ((_2124 * _2147) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_1783 * _2147) + _2110) * _2124))) * _2124;
        float _4062 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2159 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
        float _2160 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
        _2080 = (((_2146 * cbLight._m0[_2095].x) * _2159) * _2160) + _1970;
        _2082 = (((_2146 * cbLight._m0[_2095].y) * _2159) * _2160) + _1972;
        _2084 = (((_2146 * cbLight._m0[_2095].z) * _2159) * _2160) + _1974;
    }
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    if (_1611.y == 0u)
    {
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2235;
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2235;
        float _2238 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2235;
        uvec4 _2250 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2251 = _2250.x;
        uint _2262 = uint((float(_2250.y) * floor(float(uint(cbSceneParam._m0[85u].y * _459) / _2251))) + floor(float(uint(cbSceneParam._m0[85u].x * _458) / _2251)));
        float _2272 = (log2(_2238 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2273 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        uint _2276 = uint(isnan(14.0) ? _2273 : (isnan(_2273) ? 14.0 : min(_2273, 14.0)));
        uvec4 _2281 = texelFetch(g_lightClusterGridBuffer, int(((_2276 << 2u) + (_2262 << 6u)) >> 2u));
        uint _2282 = _2281.x;
        uint _2283 = _2250.z;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        if (((((1u << ((_2283 >> 4u) & 15u)) + 4294967295u) & _2282) == 0u) || ((_2283 & 240u) == 0u))
        {
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
        }
        else
        {
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2394;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            uint _2542 = 0u;
            uint _2551;
            bool _2552;
            for (;;)
            {
                _2551 = texelFetch(g_lightClassification, int((((_2276 << 5u) + (_2262 << 9u)) + (_2542 << 2u)) >> 2u)).x;
                _2552 = _2551 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2552)
                {
                    frontier_phi_66_pred = _2536;
                    frontier_phi_66_pred_1 = _2541;
                    frontier_phi_66_pred_2 = _2540;
                    frontier_phi_66_pred_3 = _2539;
                    frontier_phi_66_pred_4 = _2538;
                    frontier_phi_66_pred_5 = _2537;
                }
                else
                {
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    uint _2687;
                    _2681 = _2536;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2551;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    for (;;)
                    {
                        uint _2691 = uint(findLSB(_2687)) + (_2542 << 5u);
                        uint _2688 = (_2687 + 4294967295u) & _2687;
                        uint _2693 = _2691 * 48u;
                        vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 3u)).x));
                        uint _2713 = (_2691 * 48u) + 4u;
                        vec4 _2726 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 3u)).x));
                        uint _2732 = (_2691 * 48u) + 8u;
                        vec3 _2743 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x));
                        float _2747 = _2707.x - _2236;
                        float _2748 = _2707.y - _2237;
                        float _2749 = _2707.z - _2238;
                        float _2750 = dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749));
                        float _2753 = inversesqrt(_2750);
                        float _2754 = _2753 * _2747;
                        float _2755 = _2753 * _2748;
                        float _2756 = _2753 * _2749;
                        float _2757 = dot(vec3(_479, _482, _485), vec3(_2754, _2755, _2756));
                        float _2762 = 1.0 - (_2750 * _2707.w);
                        float _4088 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2763 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                        float _2764 = sqrt(_2750) * _2726.w;
                        float _2767 = 1.39999997615814208984375 / (_2764 + 1.39999997615814208984375);
                        float _2768 = _2767 * _2767;
                        float _2771 = ((1.0 - _2768) * _2757) + _2768;
                        float _2774 = _2764 * _2764;
                        float _2778 = ((isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0))) * _2763) / ((_2774 * 0.699999988079071044921875) + 1.0);
                        float _2782 = (-0.0) - _2236;
                        float _2783 = (-0.0) - _2237;
                        float _2784 = (-0.0) - _2238;
                        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
                        float _2789 = _2788 * _2782;
                        float _2790 = _2788 * _2783;
                        float _2791 = _2788 * _2784;
                        float _2799 = exp2(log2(1.0 / ((_2774 * 3.5) + 5.0)) * 0.25);
                        float _2800 = 1.0 - _539;
                        float _2807 = sqrt(1.0 - ((1.0 - (_2800 * _2800)) * (1.0 - (_2799 * _2799))));
                        float _2808 = _2807 * _2807;
                        float _2809 = _2808 * _2808;
                        float _2810 = _2789 + _2754;
                        float _2811 = _2790 + _2755;
                        float _2812 = _2791 + _2756;
                        float _2816 = inversesqrt(dot(vec3(_2810, _2811, _2812), vec3(_2810, _2811, _2812)));
                        float _2820 = dot(vec3(_479, _482, _485), vec3(_2789, _2790, _2791));
                        float _4104 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2823 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                        float _2824 = dot(vec3(_479, _482, _485), vec3(_2816 * _2810, _2816 * _2811, _2816 * _2812));
                        float _4115 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2827 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                        float _2831 = ((_2827 * _2827) * (_2809 + (-1.0))) + 1.0;
                        float _2832 = _2767 * _2808;
                        float _2833 = _2832 * _2832;
                        float _2836 = ((1.0 - _2833) * _2757) + _2833;
                        float _4126 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2837 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                        float _2838 = 1.0 - _2808;
                        float _2848 = (0.5 / (((_2837 * ((_2823 * _2838) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2837 * _2838) + _2808) * _2823))) * _2837;
                        float _4137 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2859 = (((_2809 * 3.1415927410125732421875) * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) / ((_2831 * _2831) * ((_2774 * 2.1991131305694580078125) + 3.141590118408203125))) * _2763;
                        _2611 = (_2778 * _2726.x) + _2684;
                        _2612 = (_2778 * _2726.y) + _2685;
                        _2613 = (_2778 * _2726.z) + _2686;
                        _2608 = (_2859 * _2743.x) + _2681;
                        _2609 = (_2859 * _2743.y) + _2682;
                        _2610 = (_2859 * _2743.z) + _2683;
                        if (_2688 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2681 = _2608;
                            _2682 = _2609;
                            _2683 = _2610;
                            _2684 = _2611;
                            _2685 = _2612;
                            _2686 = _2613;
                            _2687 = _2688;
                        }
                    }
                    frontier_phi_66_pred = _2608;
                    frontier_phi_66_pred_1 = _2613;
                    frontier_phi_66_pred_2 = _2612;
                    frontier_phi_66_pred_3 = _2611;
                    frontier_phi_66_pred_4 = _2610;
                    frontier_phi_66_pred_5 = _2609;
                }
                _2384 = frontier_phi_66_pred;
                _2394 = frontier_phi_66_pred_1;
                _2392 = frontier_phi_66_pred_2;
                _2390 = frontier_phi_66_pred_3;
                _2388 = frontier_phi_66_pred_4;
                _2386 = frontier_phi_66_pred_5;
                uint _2543 = _2542 + 1u;
                if (_2543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2536 = _2384;
                    _2537 = _2386;
                    _2538 = _2388;
                    _2539 = _2390;
                    _2540 = _2392;
                    _2541 = _2394;
                    _2542 = _2543;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
        }
        uvec4 _2397 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2398 = _2397.z;
        uint _2400 = (_2398 >> 8u) & 15u;
        float _2504;
        float _2506;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        if (((4294967295u << _2400) & _2282) == 0u)
        {
            _2504 = _2383;
            _2506 = _2385;
            _2508 = _2387;
            _2510 = _2389;
            _2512 = _2391;
            _2514 = _2393;
        }
        else
        {
            float _2529 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
            float _2530 = _2529 * _2236;
            float _2531 = _2529 * _2237;
            float _2532 = _2529 * _2238;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2400 < ((_2398 >> 12u) & 15u))
            {
                float _2505;
                float _2507;
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2664 = _2383;
                float _2665 = _2385;
                float _2666 = _2387;
                float _2667 = _2389;
                float _2668 = _2391;
                float _2669 = _2393;
                uint _2670 = _2400;
                uint _2679;
                bool _2680;
                for (;;)
                {
                    _2679 = texelFetch(g_lightClassification, int((((_2276 << 5u) + (_2262 << 9u)) + (_2670 << 2u)) >> 2u)).x;
                    _2680 = _2679 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2680)
                    {
                        frontier_phi_77_pred = _2669;
                        frontier_phi_77_pred_1 = _2668;
                        frontier_phi_77_pred_2 = _2667;
                        frontier_phi_77_pred_3 = _2666;
                        frontier_phi_77_pred_4 = _2665;
                        frontier_phi_77_pred_5 = _2664;
                    }
                    else
                    {
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _2886 = _2664;
                        float _2887 = _2665;
                        float _2888 = _2666;
                        float _2889 = _2667;
                        float _2890 = _2668;
                        float _2891 = _2669;
                        uint _2892 = _2679;
                        uint _2893;
                        vec4 _2918;
                        float _2919;
                        vec4 _2934;
                        vec3 _2946;
                        vec4 _2962;
                        vec4 _2977;
                        float _3024;
                        bool _3025;
                        for (;;)
                        {
                            uint _2903 = ((_2670 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2892));
                            _2893 = (_2892 + 4294967295u) & _2892;
                            uint _2905 = _2903 * 40u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            _2919 = _2918.w;
                            uint _2921 = (_2903 * 40u) + 4u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2936 = (_2903 * 40u) + 8u;
                            _2946 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x));
                            uint _2949 = (_2903 * 40u) + 16u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2964 = (_2903 * 40u) + 20u;
                            _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2980 = (_2903 * 40u) + 24u;
                            vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            uint _2999 = (_2903 * 40u) + 28u;
                            vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            _3024 = fma(_2238, _3012.z, fma(_2237, _3012.y, _3012.x * _2236)) + _3012.w;
                            _3025 = !((fma(_2238, _2993.z, fma(_2237, _2993.y, _2993.x * _2236)) + _2993.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3025)
                            {
                                float _3052 = _2918.x - _2236;
                                float _3053 = _2918.y - _2237;
                                float _3054 = _2918.z - _2238;
                                float _3055 = dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054));
                                float _3058 = inversesqrt(_3055);
                                float _3059 = _3058 * _3052;
                                float _3060 = _3058 * _3053;
                                float _3061 = _3058 * _3054;
                                float _3065 = 1.0 - (_3055 / (_2919 * _2919));
                                float _4148 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3066 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                                float _3070 = sqrt(_3055) * _2934.w;
                                float _3072 = 1.39999997615814208984375 / (_3070 + 1.39999997615814208984375);
                                float _3073 = _3072 * _3072;
                                float _3076 = ((1.0 - _3073) * dot(vec3(_3059, _3060, _3061), vec3(_479, _482, _485))) + _3073;
                                float _3079 = _3070 * _3070;
                                float _3083 = (fma(_2238, _2962.z, fma(_2237, _2962.y, _2962.x * _2236)) + _2962.w) / _3024;
                                float _3084 = (fma(_2238, _2977.z, fma(_2237, _2977.y, _2977.x * _2236)) + _2977.w) / _3024;
                                float _3088 = 1.0 - dot(vec2(_3083, _3084), vec2(_3083, _3084));
                                float _4164 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3089 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3090 = _3089 * (((isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))) * _3066) / ((_3079 * 0.699999988079071044921875) + 1.0));
                                float _3102 = exp2(log2(1.0 / ((_3079 * 3.5) + 5.0)) * 0.25);
                                float _3103 = 1.0 - _539;
                                float _3110 = sqrt(1.0 - ((1.0 - (_3103 * _3103)) * (1.0 - (_3102 * _3102))));
                                float _3111 = _3110 * _3110;
                                float _3112 = _3111 * _3111;
                                float _3113 = _3059 - _2530;
                                float _3114 = _3060 - _2531;
                                float _3115 = _3061 - _2532;
                                float _3119 = inversesqrt(dot(vec3(_3113, _3114, _3115), vec3(_3113, _3114, _3115)));
                                float _3123 = dot(vec3(_479, _482, _485), vec3((-0.0) - _2530, (-0.0) - _2531, (-0.0) - _2532));
                                float _4175 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3126 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                                float _3127 = dot(vec3(_479, _482, _485), vec3(_3119 * _3113, _3119 * _3114, _3119 * _3115));
                                float _4186 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3130 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                                float _3134 = ((_3130 * _3130) * (_3112 + (-1.0))) + 1.0;
                                float _3135 = _3072 * _3111;
                                float _3136 = _3135 * _3135;
                                float _3142 = ((1.0 - _3136) * dot(vec3(_479, _482, _485), vec3(_3059, _3060, _3061))) + _3136;
                                float _4197 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3143 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                                float _3144 = 1.0 - _3111;
                                float _3154 = (0.5 / (((_3143 * ((_3126 * _3144) + _3111)) + 9.9999999392252902907785028219223e-09) + (((_3143 * _3144) + _3111) * _3126))) * _3143;
                                float _4208 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3164 = (_3089 * _3066) * (((_3112 * 3.1415927410125732421875) * (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) / ((_3134 * _3134) * ((_3079 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3090 * _2934.y;
                                frontier_phi_83_pred_1 = _3090 * _2934.x;
                                frontier_phi_83_pred_2 = _3164 * _2946.z;
                                frontier_phi_83_pred_3 = _3164 * _2946.y;
                                frontier_phi_83_pred_4 = _3164 * _2946.x;
                                frontier_phi_83_pred_5 = _3090 * _2934.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3172 = frontier_phi_83_pred;
                            _3171 = frontier_phi_83_pred_1;
                            _3170 = frontier_phi_83_pred_2;
                            _3169 = frontier_phi_83_pred_3;
                            _3168 = frontier_phi_83_pred_4;
                            _3173 = frontier_phi_83_pred_5;
                            _2876 = _3171 + _2889;
                            _2877 = _3172 + _2890;
                            _2878 = _3173 + _2891;
                            _2873 = _3168 + _2886;
                            _2874 = _3169 + _2887;
                            _2875 = _3170 + _2888;
                            if (_2893 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2886 = _2873;
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2893;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2878;
                        frontier_phi_77_pred_1 = _2877;
                        frontier_phi_77_pred_2 = _2876;
                        frontier_phi_77_pred_3 = _2875;
                        frontier_phi_77_pred_4 = _2874;
                        frontier_phi_77_pred_5 = _2873;
                    }
                    _2515 = frontier_phi_77_pred;
                    _2513 = frontier_phi_77_pred_1;
                    _2511 = frontier_phi_77_pred_2;
                    _2509 = frontier_phi_77_pred_3;
                    _2507 = frontier_phi_77_pred_4;
                    _2505 = frontier_phi_77_pred_5;
                    uint _2671 = _2670 + 1u;
                    if (_2671 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2664 = _2505;
                        _2665 = _2507;
                        _2666 = _2509;
                        _2667 = _2511;
                        _2668 = _2513;
                        _2669 = _2515;
                        _2670 = _2671;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2509;
                frontier_phi_58_59_ladder_1 = _2515;
                frontier_phi_58_59_ladder_2 = _2513;
                frontier_phi_58_59_ladder_3 = _2511;
                frontier_phi_58_59_ladder_4 = _2507;
                frontier_phi_58_59_ladder_5 = _2505;
            }
            else
            {
                frontier_phi_58_59_ladder = _2387;
                frontier_phi_58_59_ladder_1 = _2393;
                frontier_phi_58_59_ladder_2 = _2391;
                frontier_phi_58_59_ladder_3 = _2389;
                frontier_phi_58_59_ladder_4 = _2385;
                frontier_phi_58_59_ladder_5 = _2383;
            }
            _2504 = frontier_phi_58_59_ladder_5;
            _2506 = frontier_phi_58_59_ladder_4;
            _2508 = frontier_phi_58_59_ladder;
            _2510 = frontier_phi_58_59_ladder_3;
            _2512 = frontier_phi_58_59_ladder_2;
            _2514 = frontier_phi_58_59_ladder_1;
        }
        float _2519 = isnan(1.0) ? _523 : (isnan(_523) ? 1.0 : min(_523, 1.0));
        _2295 = (_2519 * _2510) + _1747;
        _2297 = (_2519 * _2512) + _1749;
        _2299 = (_2519 * _2514) + _1751;
        _2301 = ((_2504 * 0.039999999105930328369140625) * _2519) + _2080;
        _2303 = ((_2506 * 0.039999999105930328369140625) * _2519) + _2082;
        _2305 = ((_2508 * 0.039999999105930328369140625) * _2519) + _2084;
    }
    else
    {
        _2295 = _1747;
        _2297 = _1749;
        _2299 = _1751;
        _2301 = _2080;
        _2303 = _2082;
        _2305 = _2084;
    }
    float _4224 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4235 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4246 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _2322 = ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) * (_2295 + ((isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))) * _523))) + ((_2301 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1361)) * cbPerFrame._m0[3u].x);
    float _2323 = ((isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2297 + ((isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))) * _523))) + ((_2303 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1361)) * cbPerFrame._m0[3u].x);
    float _2324 = ((isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2299 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _523))) + ((_2305 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1361)) * cbPerFrame._m0[3u].x);
    uint _2325 = _224 + 6u;
    float _2333 = _458 / cbSceneParam._m0[86u].x;
    float _2334 = _459 / cbSceneParam._m0[86u].y;
    vec4 _2348 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2333, _2334, (log2((isnan(cbSceneParam._m0[77u].w) ? _378 : (isnan(_378) ? cbSceneParam._m0[77u].w : min(_378, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2350 = _2348.x;
    float _2351 = _2348.y;
    float _2352 = _2348.z;
    float _2353 = _2348.w;
    float _2446;
    float _2448;
    float _2450;
    float _2452;
    if (_378 > cbSceneParam._m0[78u].w)
    {
        float _2408 = isnan(_378) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _378 : min(cbSceneParam._m0[80u].w, _378));
        float _2409 = _2408 / _378;
        float _2420 = _2409 * _430;
        float _2421 = _431 * _2409;
        float _2422 = (-0.0) - _2421;
        float _2424 = _2409 * _432;
        float _2426 = (cbSceneParam._m0[77u].w * _2422) / _2408;
        float _2427 = _2426 + cbSceneParam._m0[79u].w;
        float _2428 = cbSceneParam._m0[79u].w - _2421;
        float _2434 = sqrt(((_2420 * _2420) + (_2421 * _2421)) + (_2424 * _2424));
        float _2437 = (1.0 - (cbSceneParam._m0[77u].w / _2408)) * _2434;
        float _2442 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2444 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2621;
        if (abs((_2422 - _2426) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2621 = ((((_2427 > 0.0) ? exp2(_2442 * _2427) : (2.0 - exp2(_2444 * _2427))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2437;
        }
        else
        {
            float _2565 = 1.0 / cbSceneParam._m0[80u].x;
            float _2566 = isnan(_2428) ? _2427 : (isnan(_2427) ? _2428 : max(_2427, _2428));
            float _2567 = isnan(_2428) ? _2427 : (isnan(_2427) ? _2428 : min(_2427, _2428));
            float _2576 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : min(_2566, 0.0));
            float _2577 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : min(_2567, 0.0));
            _2621 = ((abs(_2434 / _2422) * cbSceneParam._m0[80u].y) * ((((_2576 - _2577) * 2.0) - ((exp2(_2442 * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0)))) - exp2(_2442 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0))))) * _2565)) - ((exp2(_2444 * _2576) - exp2(_2444 * _2577)) * _2565))) + (_2437 * cbSceneParam._m0[80u].z);
        }
        vec4 _2623 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2333, _2334, 1.0), 0.0);
        float _2632 = exp2((_2621 * (-1.44269502162933349609375)) * (1.0 - _2623.w));
        float _2633 = log2(_2632);
        float _2649 = log2(_2353);
        _2446 = (exp2(_2649 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2633 * cbSceneParam._m0[78u].x)) * _2623.x) / cbSceneParam._m0[78u].x)) + _2350;
        _2448 = (exp2(_2649 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2633 * cbSceneParam._m0[78u].y)) * _2623.y) / cbSceneParam._m0[78u].y)) + _2351;
        _2450 = (exp2(_2649 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2633 * cbSceneParam._m0[78u].z)) * _2623.z) / cbSceneParam._m0[78u].z)) + _2352;
        _2452 = _2632 * _2353;
    }
    else
    {
        _2446 = _2350;
        _2448 = _2351;
        _2450 = _2352;
        _2452 = _2353;
    }
    bool _2659;
    vec4 _2462;
    vec4 _2484;
    float _2486;
    float _2490;
    float _2491;
    float _2492;
    float _2493;
    bool _2503;
    for (;;)
    {
        _2462 = cbMatDynParam._m0[0u];
        float _2464 = roundEven(_2462.y);
        bool _2465 = _2464 == 3.0;
        float _2466 = log2(_2452);
        float _2473 = exp2(_2466 * cbSceneParam._m0[78u].x) * _2322;
        float _2474 = exp2(_2466 * cbSceneParam._m0[78u].y) * _2323;
        float _2475 = exp2(_2466 * cbSceneParam._m0[78u].z) * _2324;
        float _2482 = _446 + (-0.5);
        _2484 = cbMtdParam._m0[1u];
        _2486 = _2484.y * _2482;
        float _2489 = (_2464 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2490 = _2489 * (_2465 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2446)));
        _2491 = _2489 * (_2465 ? _2474 : (_2474 + (cbSceneParam._m0[72u].w * _2448)));
        _2492 = _2489 * (_2465 ? _2475 : (_2475 + (cbSceneParam._m0[72u].w * _2450)));
        _2493 = _2482 * 0.999000012874603271484375;
        _2503 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2503)
        {
            if ((cbInstanceData._m0[_224 + 7u].x + _2493) < 0.5)
            {
                _2659 = true;
                break;
            }
        }
        uint _2600 = _498 + uint(_2462.w);
        if ((cbInstanceData._m0[_2600].w < 1.0) && ((cbInstanceData._m0[_2600].w + _2493) < 0.5))
        {
            _2659 = true;
            break;
        }
        if ((_2486 + 1.0) < _2484.x)
        {
            _2659 = true;
            break;
        }
        _2659 = false;
        break;
    }
    float _2864;
    if (_2659)
    {
        discard_state = true;
        _2864 = 0.0;
    }
    else
    {
        _2864 = cbInstanceData._m0[_2325].w;
    }
    SV_Target.x = _2490;
    SV_Target.y = _2491;
    SV_Target.z = _2492;
    SV_Target.w = _2864;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2325].w;
    discard_exit();
}


