#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1157;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3489 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3500 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3511 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _284) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _285) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _326 = _321.x * cbMtdParam._m0[9u].x;
    float _327 = _321.y * cbMtdParam._m0[9u].y;
    float _328 = _321.z * cbMtdParam._m0[9u].z;
    float _332 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _298.x) * _326;
    float _335 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _298.y) * _327;
    float _338 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _298.z) * _328;
    float _345 = ((_326 - _332) * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) + _332;
    float _346 = ((_327 - _335) * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) + _335;
    float _347 = ((_328 - _338) * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) + _338;
    vec4 _365 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _395 = _391.z;
    float _399 = (_391.x * 2.0) + (-1.0);
    float _400 = (_391.y * 2.0) + (-1.0);
    float _401 = dot(vec2(_399, _400), vec2(_399, _400));
    float _3522 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _406 = sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))));
    float _411 = _399 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_365.x * 2.0) + (-1.0)));
    float _412 = _400 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_365.y * 2.0) + (-1.0)));
    vec4 _429 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _431 = _429.x;
    float _432 = 1.0 - _431;
    float _441 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _444 = ((isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : min(_441, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _453 = (_444 - ((((((_431 - _432) * cbMtdParam._m0[24u].z) + _432) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _444))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3543 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _454 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _461 = (_454 * (cbMtdParam._m0[17u].x - _345)) + _345;
    float _462 = (_454 * (cbMtdParam._m0[17u].y - _346)) + _346;
    float _463 = (_454 * (cbMtdParam._m0[17u].z - _347)) + _347;
    vec4 _476 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _478 = _476.x;
    float _479 = 1.0 - _478;
    float _506 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_478 - _479) * cbMtdParam._m0[24u].w) + _479) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3554 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _515 = ((((cbMtdParam._m0[10u].x - _461) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _507) + _461;
    float _516 = ((((cbMtdParam._m0[10u].y - _462) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _507) + _462;
    float _517 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _463)) * _507) + _463;
    float _522 = (((_365.z - _395) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _395;
    vec4 _536 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _543 = (_536.x * 2.0) + (-1.0);
    float _544 = (_536.y * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _3565 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _553 = (_454 * (_536.z - _522)) + _522;
    float _556 = ((cbMtdParam._m0[23u].y - _553) * _507) + _553;
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _584 = (_578.x * 2.0) + (-1.0);
    float _585 = (_578.y * 2.0) + (-1.0);
    float _586 = dot(vec2(_584, _585), vec2(_584, _585));
    float _3576 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _603 = (((_543 - _411) + (cbMtdParam._m0[21u].x * _411)) * _454) + _411;
    float _604 = (((_544 - _412) + (cbMtdParam._m0[21u].x * _412)) * _454) + _412;
    float _605 = (_454 * (sqrt(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0)))) - _406)) + _406;
    float _616 = (((_584 - _603) + (_603 * cbMtdParam._m0[22u].z)) * _507) + _603;
    float _617 = (((_585 - _604) + (_604 * cbMtdParam._m0[22u].z)) * _507) + _604;
    float _618 = ((sqrt(1.0 - (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0)))) - _605) * _507) + _605;
    float _620 = cbMtdParam._m0[22u].x + _391.w;
    float _623 = fma(_618, _233 * NORMAL.x, fma(_617, _240 * TANGENT.x, (_226 * _218) * _616));
    float _626 = fma(_618, _233 * NORMAL.y, fma(_617, _240 * TANGENT.y, (_226 * _219) * _616));
    float _629 = fma(_618, _233 * NORMAL.z, fma(_617, _240 * TANGENT.z, (_226 * _220) * _616));
    float _633 = inversesqrt(dot(vec3(_623, _626, _629), vec3(_623, _626, _629)));
    float _634 = _633 * _623;
    float _635 = _633 * _626;
    float _636 = _633 * _629;
    float _3587 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _637 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3609 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3620 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3631 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _655 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _705 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _695);
    float _706 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _695);
    float _707 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _695);
    float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
    float _712 = _705 * _711;
    float _713 = _706 * _711;
    float _714 = _707 * _711;
    float _720 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _721 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _742 = fma(_636, cbSceneParam._m0[5u].z, fma(_635, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _634));
    float _745 = fma(_636, cbSceneParam._m0[6u].z, fma(_635, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _634));
    float _748 = fma(_636, cbSceneParam._m0[7u].z, fma(_635, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _634));
    uint _762 = (_265 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _768 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_762].x;
    float _769 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_762].y;
    float _770 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_762].z;
    float _3642 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _3664 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    vec4 _782 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _720, cbSceneParam._m0[86u].y * _721));
    float _786 = ((isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * TEXCOORD_5.w) * _782.x;
    float _787 = dot(vec3(_634, _635, _636), vec3(_712, _713, _714));
    float _790 = _787 * 2.0;
    float _794 = (_790 * _634) - _712;
    float _795 = (_790 * _635) - _713;
    float _796 = (_790 * _636) - _714;
    float _800 = abs(dot(vec3(_712, _713, _714), vec3(_634, _635, _636)));
    float _3675 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _802 = sqrt(_637);
    float _815 = exp2((_802 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_802 * 3.0));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1156;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _881 = fma(_855, cbModelParam._m0[26u].z, fma(_851, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _847));
        float _885 = fma(_855, cbModelParam._m0[27u].z, fma(_851, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _847));
        float _889 = fma(_855, cbModelParam._m0[28u].z, fma(_851, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _847));
        float _914 = _847 + _634;
        float _915 = _851 + _635;
        float _916 = _855 + _636;
        float _926 = fma(_916, cbModelParam._m0[26u].z, fma(_915, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914)) - _881;
        float _927 = fma(_916, cbModelParam._m0[27u].z, fma(_915, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914)) - _885;
        float _928 = fma(_916, cbModelParam._m0[28u].z, fma(_915, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914)) - _889;
        float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
        float _945 = ((_932 * _926) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_881 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_932 * _927) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_885 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_932 * _928) / cbModelParam._m0[34u].z) + ((((((_889 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        float _984 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_950.x + (-0.5));
        float _986 = _984 * (_950.y + (-0.5));
        float _987 = _984 * (_950.z + (-0.5));
        float _994 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_957.x + (-0.5));
        float _996 = _994 * (_957.y + (-0.5));
        float _997 = _994 * (_957.z + (-0.5));
        float _1004 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_964.x + (-0.5));
        float _1006 = _1004 * (_964.y + (-0.5));
        float _1007 = _1004 * (_964.z + (-0.5));
        float _1014 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_971.x + (-0.5));
        float _1016 = _1014 * (_971.y + (-0.5));
        float _1017 = _1014 * (_971.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1038 = (dot(vec3(_634, _635, _636), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1048 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3723 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1050 + 1.0))) + _1055) * _1018;
        float _1065 = _986 * 0.5;
        float _1066 = _996 * 0.5;
        float _1067 = _1006 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_634, _635, _636), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3756 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1092 + 1.0))) + _1097) * _1019;
        float _1107 = _987 * 0.5;
        float _1108 = _997 * 0.5;
        float _1109 = _1007 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_634, _635, _636), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3789 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1134 + 1.0))) + _1139) * _1020;
        _1156 = _987;
        _1158 = _986;
        _1159 = _985;
        _1160 = _997;
        _1161 = _996;
        _1162 = _995;
        _1163 = _1007;
        _1164 = _1006;
        _1165 = _1005;
        _1166 = _1020;
        _1167 = _1019;
        _1168 = _1018;
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _1157;
        _1158 = _1157;
        _1159 = _1157;
        _1160 = _1157;
        _1161 = _1157;
        _1162 = _1157;
        _1163 = _1157;
        _1164 = _1157;
        _1165 = _1157;
        _1166 = _1157;
        _1167 = _1157;
        _1168 = _1157;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1196 = fma(_855, cbModelParam._m0[30u].z, fma(_851, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _847));
        float _1200 = fma(_855, cbModelParam._m0[31u].z, fma(_851, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _847));
        float _1204 = fma(_855, cbModelParam._m0[32u].z, fma(_851, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _847));
        float _1227 = _847 + _634;
        float _1228 = _851 + _635;
        float _1229 = _855 + _636;
        float _1239 = fma(_1229, cbModelParam._m0[30u].z, fma(_1228, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1227)) - _1196;
        float _1240 = fma(_1229, cbModelParam._m0[31u].z, fma(_1228, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1227)) - _1200;
        float _1241 = fma(_1229, cbModelParam._m0[32u].z, fma(_1228, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1227)) - _1204;
        float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
        float _1258 = ((_1245 * _1239) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1196 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1245 * _1240) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1200 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1245 * _1241) / cbModelParam._m0[35u].z) + ((((((_1204 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        float _1295 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1262.x + (-0.5));
        float _1297 = _1295 * (_1262.y + (-0.5));
        float _1298 = _1295 * (_1262.z + (-0.5));
        float _1305 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1269.x + (-0.5));
        float _1307 = _1305 * (_1269.y + (-0.5));
        float _1308 = _1305 * (_1269.z + (-0.5));
        float _1315 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1276.x + (-0.5));
        float _1317 = _1315 * (_1276.y + (-0.5));
        float _1318 = _1315 * (_1276.z + (-0.5));
        float _1325 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1283.x + (-0.5));
        float _1327 = _1325 * (_1283.y + (-0.5));
        float _1328 = _1325 * (_1283.z + (-0.5));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = _1296 * 0.5;
        float _1333 = _1306 * 0.5;
        float _1334 = _1316 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_634, _635, _636), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3852 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1359 + 1.0))) + _1364) * _1329;
        float _1374 = _1297 * 0.5;
        float _1375 = _1307 * 0.5;
        float _1376 = _1317 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_634, _635, _636), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3885 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1401 + 1.0))) + _1406) * _1330;
        float _1416 = _1298 * 0.5;
        float _1417 = _1308 * 0.5;
        float _1418 = _1318 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_634, _635, _636), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _3918 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_1443 + 1.0))) + _1448) * _1331;
        _1465 = _1298;
        _1466 = _1297;
        _1467 = _1296;
        _1468 = _1308;
        _1469 = _1307;
        _1470 = _1306;
        _1471 = _1318;
        _1472 = _1317;
        _1473 = _1316;
        _1474 = _1331;
        _1475 = _1330;
        _1476 = _1329;
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
    }
    else
    {
        _1465 = _1157;
        _1466 = _1157;
        _1467 = _1157;
        _1468 = _1157;
        _1469 = _1157;
        _1470 = _1157;
        _1471 = _1157;
        _1472 = _1157;
        _1473 = _1157;
        _1474 = _1157;
        _1475 = _1157;
        _1476 = _1157;
        _1477 = 0.0;
        _1478 = 0.0;
        _1479 = 0.0;
    }
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1169)) + _1169;
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1170)) + _1170;
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1171)) + _1171;
    float _1512 = fma(_1491, cbSceneParam._m0[89u].z, fma(_1490, cbSceneParam._m0[89u].y, _1489 * cbSceneParam._m0[89u].x));
    float _1515 = fma(_1491, cbSceneParam._m0[90u].z, fma(_1490, cbSceneParam._m0[90u].y, _1489 * cbSceneParam._m0[90u].x));
    float _1518 = fma(_1491, cbSceneParam._m0[91u].z, fma(_1490, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1489));
    float _1533 = _794 * 0.5;
    float _1534 = _795 * 0.5;
    float _1535 = _796 * 0.5;
    float _1536 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1539 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1542 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1576;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1549 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1156, _1160, _1163, _1166));
        float _1553 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1557 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1159, _1162, _1165, _1168));
        float _1564 = dot(vec4(cbModelParam._m0[39u]), vec4(_1533, _1534, _1535, 1.0));
        _1576 = dot(vec3(isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1576 = 1.0;
    }
    float _1587;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1578 = dot(vec4(cbModelParam._m0[40u]), vec4(_1533, _1534, _1535, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1591 = (_1587 * cbModelParam._m0[1u].x) + (_1576 * (1.0 - cbModelParam._m0[1u].x));
    float _1601 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _637);
    float _1602 = isnan(_1601) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1601 : min(cbModelParam._m0[25u].z, _1601));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1650 = fma(_855, cbModelParam._m0[13u].z, fma(_851, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _847)) + cbModelParam._m0[13u].w;
        float _1654 = fma(_855, cbModelParam._m0[14u].z, fma(_851, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _847)) + cbModelParam._m0[14u].w;
        float _1658 = fma(_855, cbModelParam._m0[15u].z, fma(_851, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _847)) + cbModelParam._m0[15u].w;
        float _1661 = fma(_796, cbModelParam._m0[13u].z, fma(_795, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _794));
        float _1664 = fma(_796, cbModelParam._m0[14u].z, fma(_795, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _794));
        float _1667 = fma(_796, cbModelParam._m0[15u].z, fma(_795, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _794));
        float _1695;
        if (_1661 > 0.0)
        {
            _1695 = abs((1.0 - _1650) / _1661);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1650 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1695 = frontier_phi_14_12_ladder;
        }
        float _1919;
        if (_1664 > 0.0)
        {
            _1919 = abs((1.0 - _1654) / _1664);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1654 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1919 = frontier_phi_23_19_ladder;
        }
        float _2165;
        if (_1667 > 0.0)
        {
            _2165 = abs((1.0 - _1658) / _1667);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1658 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2165 = frontier_phi_35_30_ladder;
        }
        float _2167 = isnan(_1919) ? _1695 : (isnan(_1695) ? _1919 : min(_1695, _1919));
        float _2168 = isnan(_2165) ? _2167 : (isnan(_2167) ? _2165 : min(_2167, _2165));
        float _2172 = (_2168 * _1661) + _1650;
        float _2173 = (_2168 * _1664) + _1654;
        float _2174 = (_2168 * _1667) + _1658;
        float _2175 = _2168 * 9.9999997473787516355514526367188e-05;
        float _2177 = (-1.0) - _2175;
        float _2179 = _2175 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2174 > _2179) || ((_2174 < _2177) || ((_2173 > _2179) || ((_2173 < _2177) || ((_2172 < _2177) || (_2172 > _2179))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2298 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2174, cbModelParam._m0[9u].z, fma(_2173, cbModelParam._m0[9u].y, _2172 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2174, cbModelParam._m0[10u].z, fma(_2173, cbModelParam._m0[10u].y, _2172 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2174, cbModelParam._m0[11u].z, fma(_2173, cbModelParam._m0[11u].y, _2172 * cbModelParam._m0[11u].x))), _1602);
            frontier_phi_13_35_ladder = _2298.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2298.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2298.x * cbModelParam._m0[1u].y;
        }
        _1683 = frontier_phi_13_35_ladder_2;
        _1685 = frontier_phi_13_35_ladder_1;
        _1687 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1671 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_794, _795, _796), _1602);
        _1683 = _1671.x * cbModelParam._m0[1u].y;
        _1685 = _1671.y * cbModelParam._m0[1u].y;
        _1687 = _1671.z * cbModelParam._m0[1u].y;
    }
    float _1691 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _637);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1691 : min(cbModelParam._m0[25u].w, _1691));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1746 = fma(_855, cbModelParam._m0[21u].z, fma(_851, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _847)) + cbModelParam._m0[21u].w;
        float _1750 = fma(_855, cbModelParam._m0[22u].z, fma(_851, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _847)) + cbModelParam._m0[22u].w;
        float _1754 = fma(_855, cbModelParam._m0[23u].z, fma(_851, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _847)) + cbModelParam._m0[23u].w;
        float _1757 = fma(_796, cbModelParam._m0[21u].z, fma(_795, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _794));
        float _1760 = fma(_796, cbModelParam._m0[22u].z, fma(_795, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _794));
        float _1763 = fma(_796, cbModelParam._m0[23u].z, fma(_795, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _794));
        float _1924;
        if (_1757 > 0.0)
        {
            _1924 = abs((1.0 - _1746) / _1757);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1746 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1924 = frontier_phi_25_21_ladder;
        }
        float _2192;
        if (_1760 > 0.0)
        {
            _2192 = abs((1.0 - _1750) / _1760);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1750 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2192 = frontier_phi_37_32_ladder;
        }
        float _2397;
        if (_1763 > 0.0)
        {
            _2397 = abs((1.0 - _1754) / _1763);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1754 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2397 = frontier_phi_46_43_ladder;
        }
        float _2399 = isnan(_2192) ? _1924 : (isnan(_1924) ? _2192 : min(_1924, _2192));
        float _2400 = isnan(_2397) ? _2399 : (isnan(_2399) ? _2397 : min(_2399, _2397));
        float _2404 = (_2400 * _1757) + _1746;
        float _2405 = (_2400 * _1760) + _1750;
        float _2406 = (_2400 * _1763) + _1754;
        float _2407 = _2400 * 9.9999997473787516355514526367188e-05;
        float _2408 = (-1.0) - _2407;
        float _2410 = _2407 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2406 > _2410) || ((_2406 < _2408) || ((_2405 > _2410) || ((_2405 < _2408) || ((_2404 < _2408) || (_2404 > _2410))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2605 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2406, cbModelParam._m0[17u].z, fma(_2405, cbModelParam._m0[17u].y, _2404 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2406, cbModelParam._m0[18u].z, fma(_2405, cbModelParam._m0[18u].y, _2404 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2406, cbModelParam._m0[19u].z, fma(_2405, cbModelParam._m0[19u].y, _2404 * cbModelParam._m0[19u].x))), _1692);
            frontier_phi_22_46_ladder = _2605.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2605.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2605.x * cbModelParam._m0[1u].z;
        }
        _1782 = frontier_phi_22_46_ladder_2;
        _1784 = frontier_phi_22_46_ladder_1;
        _1786 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_794, _795, _796), _1692);
        _1782 = _1766.x * cbModelParam._m0[1u].z;
        _1784 = _1766.y * cbModelParam._m0[1u].z;
        _1786 = _1766.z * cbModelParam._m0[1u].z;
    }
    float _1798 = ((((1.0 - _815) * ((_802 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_815 * _802)) * _786;
    float _1799 = _1798 * ((cbModelParam._m0[1u].w * (_1782 - _1683)) + _1683);
    float _1800 = _1798 * ((cbModelParam._m0[1u].w * (_1784 - _1685)) + _1685);
    float _1801 = _1798 * ((cbModelParam._m0[1u].w * (_1786 - _1687)) + _1687);
    float _1804 = fma(_1801, cbSceneParam._m0[89u].z, fma(_1800, cbSceneParam._m0[89u].y, _1799 * cbSceneParam._m0[89u].x));
    float _1807 = fma(_1801, cbSceneParam._m0[90u].z, fma(_1800, cbSceneParam._m0[90u].y, _1799 * cbSceneParam._m0[90u].x));
    float _1810 = fma(_1801, cbSceneParam._m0[91u].z, fma(_1800, cbSceneParam._m0[91u].y, _1799 * cbSceneParam._m0[91u].x));
    vec4 _1818 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_720, _721));
    float _1820 = _1818.w;
    float _1832 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1820);
    float _1833 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1820);
    float _1834 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1820);
    uvec4 _1838 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _1840 = _1838.x * 14u;
    uint _1841 = _1840 + 13u;
    float _1848 = _786 + (-1.0);
    float _1853 = (cbLight._m0[_1841].x * _1848) + 1.0;
    float _1854 = (cbLight._m0[_1841].y * _1848) + 1.0;
    float _1855 = (cbLight._m0[_1841].z * _1848) + 1.0;
    float _1856 = (cbLight._m0[_1841].w * _1848) + 1.0;
    uint _1857 = _1840 + 5u;
    float _1863 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1867 = _1840 + 4u;
    float _1877 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1881 = _1840 | 1u;
    float _1892 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_634, _635, _636));
    float _1895 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_634, _635, _636));
    float _4054 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _4065 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1900 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _1902 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 0.3183098733425140380859375;
    float _1909 = ((cbLight._m0[_1857].x * _1863) * _1902) + (((cbLight._m0[_1867].x * _1832) * _1877) * _1900);
    float _1910 = ((_1863 * cbLight._m0[_1857].y) * _1902) + (((cbLight._m0[_1867].y * _1833) * _1877) * _1900);
    float _1911 = ((_1863 * cbLight._m0[_1857].z) * _1902) + (((cbLight._m0[_1867].z * _1834) * _1877) * _1900);
    uvec4 _1916 = floatBitsToUint(cbLight._m0[_1840 + 12u]);
    bool _1918 = _1916.x == 0u;
    float _1929;
    float _1931;
    float _1933;
    if (_1918)
    {
        _1929 = _1909;
        _1931 = _1910;
        _1933 = _1911;
    }
    else
    {
        uint _1937 = _1840 + 6u;
        float _1953 = (dot(vec3(cbLight._m0[_1840 + 2u].xyz), vec3(_634, _635, _636)) * 0.5) + 0.5;
        float _1954 = _1953 * _1953;
        float _4076 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1955 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1956 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _1929 = (((cbLight._m0[_1937].x * 0.3183098733425140380859375) * _1955) * _1956) + _1909;
        _1931 = (((cbLight._m0[_1937].y * 0.3183098733425140380859375) * _1955) * _1956) + _1910;
        _1933 = (((cbLight._m0[_1937].z * 0.3183098733425140380859375) * _1955) * _1956) + _1911;
    }
    bool _1936 = _1916.y == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1936)
    {
        _1974 = _1929;
        _1976 = _1931;
        _1978 = _1933;
    }
    else
    {
        uint _2136 = _1840 + 7u;
        float _2152 = (dot(vec3(cbLight._m0[_1840 + 3u].xyz), vec3(_634, _635, _636)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4092 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2155 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _1974 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _1929;
        _1976 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _1931;
        _1978 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _1933;
    }
    uint _1981 = _1840 + 8u;
    float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1840].w)) * _637) * 0.949999988079071044921875);
    float _1995 = _1994 * _1994;
    float _1996 = cbLight._m0[_1840].x + _712;
    float _1997 = cbLight._m0[_1840].y + _713;
    float _1998 = cbLight._m0[_1840].z + _714;
    float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
    float _2003 = _2002 * _1996;
    float _2004 = _2002 * _1997;
    float _2005 = _2002 * _1998;
    float _2006 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_1840].xyz));
    float _4108 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2009 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _2010 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _2011 = dot(vec3(_634, _635, _636), vec3(_2003, _2004, _2005));
    float _4130 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _2015 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_2003, _2004, _2005));
    float _4141 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2019 = _1995 * _1995;
    float _2023 = ((_2014 * _2014) * (_2019 + (-1.0))) + 1.0;
    float _2034 = (exp2(log2(1.0 - (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2035 = 1.0 - _1995;
    float _2046 = (0.5 / (((_2010 * ((_2009 * _2035) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2035) + _1995) * _2009))) * _2009;
    float _4152 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2048 = (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2019 / ((_2023 * _2023) * 3.141590118408203125));
    uint _2062 = _1840 + 9u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1881].w)) * _637) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1881].x + _712;
    float _2076 = cbLight._m0[_1881].y + _713;
    float _2077 = cbLight._m0[_1881].z + _714;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_1881].xyz));
    float _4163 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _2089 = dot(vec3(_634, _635, _636), vec3(_2082, _2083, _2084));
    float _4174 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2092 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _2093 = dot(vec3(cbLight._m0[_1881].xyz), vec3(_2082, _2083, _2084));
    float _4185 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2097 = _2074 * _2074;
    float _2101 = ((_2092 * _2092) * (_2097 + (-1.0))) + 1.0;
    float _2110 = (exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2111 = 1.0 - _2074;
    float _2121 = (0.5 / (((_2010 * ((_2088 * _2111) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2111) + _2074) * _2088))) * _2088;
    float _4196 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2123 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2097 / ((_2101 * _2101) * 3.141590118408203125));
    float _2133 = (((_2110 * cbLight._m0[_2062].x) * _2123) * _1863) + ((((cbLight._m0[_1981].x * _1832) * _2034) * _2048) * _1877);
    float _2134 = (((_2110 * cbLight._m0[_2062].y) * _2123) * _1863) + ((((cbLight._m0[_1981].y * _1833) * _2034) * _2048) * _1877);
    float _2135 = (((_2110 * cbLight._m0[_2062].z) * _2123) * _1863) + ((((cbLight._m0[_1981].z * _1834) * _2034) * _2048) * _1877);
    float _2197;
    float _2199;
    float _2201;
    if (_1918)
    {
        _2197 = _2133;
        _2199 = _2134;
        _2201 = _2135;
    }
    else
    {
        uint _2203 = _1840 + 2u;
        uint _2207 = _1840 + 10u;
        float _2221 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2203].w)) * _637) * 0.949999988079071044921875);
        float _2222 = _2221 * _2221;
        float _2223 = cbLight._m0[_2203].x + _712;
        float _2224 = cbLight._m0[_2203].y + _713;
        float _2225 = cbLight._m0[_2203].z + _714;
        float _2229 = inversesqrt(dot(vec3(_2223, _2224, _2225), vec3(_2223, _2224, _2225)));
        float _2230 = _2229 * _2223;
        float _2231 = _2229 * _2224;
        float _2232 = _2229 * _2225;
        float _2233 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_2203].xyz));
        float _4207 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2236 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _2237 = dot(vec3(_634, _635, _636), vec3(_2230, _2231, _2232));
        float _4218 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2240 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _2241 = dot(vec3(cbLight._m0[_2203].xyz), vec3(_2230, _2231, _2232));
        float _4229 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2245 = _2222 * _2222;
        float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
        float _2258 = (exp2(log2(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2259 = 1.0 - _2222;
        float _2269 = (0.5 / (((_2010 * ((_2236 * _2259) + _2222)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2259) + _2222) * _2236))) * _2236;
        float _4240 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2271 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
        float _2272 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2197 = (((_2258 * cbLight._m0[_2207].x) * _2271) * _2272) + _2133;
        _2199 = (((_2258 * cbLight._m0[_2207].y) * _2271) * _2272) + _2134;
        _2201 = (((_2258 * cbLight._m0[_2207].z) * _2271) * _2272) + _2135;
    }
    float _2307;
    float _2309;
    float _2311;
    if (_1936)
    {
        _2307 = _2197;
        _2309 = _2199;
        _2311 = _2201;
    }
    else
    {
        uint _2318 = _1840 + 3u;
        uint _2322 = _1840 + 11u;
        float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _637) * 0.949999988079071044921875);
        float _2337 = _2336 * _2336;
        float _2338 = cbLight._m0[_2318].x + _712;
        float _2339 = cbLight._m0[_2318].y + _713;
        float _2340 = cbLight._m0[_2318].z + _714;
        float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
        float _2345 = _2344 * _2338;
        float _2346 = _2344 * _2339;
        float _2347 = _2344 * _2340;
        float _2348 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_2318].xyz));
        float _4256 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2351 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2352 = dot(vec3(_634, _635, _636), vec3(_2345, _2346, _2347));
        float _4267 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2356 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2345, _2346, _2347));
        float _4278 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2360 = _2337 * _2337;
        float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
        float _2373 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2374 = 1.0 - _2337;
        float _2384 = (0.5 / (((_2010 * ((_2351 * _2374) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2010 * _2374) + _2337) * _2351))) * _2351;
        float _4289 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2386 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
        float _2387 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2307 = (((_2373 * cbLight._m0[_2322].x) * _2386) * _2387) + _2197;
        _2309 = (((_2373 * cbLight._m0[_2322].y) * _2386) * _2387) + _2199;
        _2311 = (((_2373 * cbLight._m0[_2322].z) * _2386) * _2387) + _2201;
    }
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    if (_1838.y == 0u)
    {
        float _2462 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2462;
        float _2464 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2462;
        float _2465 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2462;
        uvec4 _2477 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2478 = _2477.x;
        uint _2489 = uint((float(_2477.y) * floor(float(uint(cbSceneParam._m0[85u].y * _721) / _2478))) + floor(float(uint(cbSceneParam._m0[85u].x * _720) / _2478)));
        float _2499 = (log2(_2465 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2500 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        uint _2503 = uint(isnan(14.0) ? _2500 : (isnan(_2500) ? 14.0 : min(_2500, 14.0)));
        uvec4 _2508 = texelFetch(g_lightClusterGridBuffer, int(((_2503 << 2u) + (_2489 << 6u)) >> 2u));
        uint _2509 = _2508.x;
        uint _2510 = _2477.z;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        if (((((1u << ((_2510 >> 4u) & 15u)) + 4294967295u) & _2509) == 0u) || ((_2510 & 240u) == 0u))
        {
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
            _2620 = 0.0;
        }
        else
        {
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2621;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            uint _2761 = 0u;
            uint _2770;
            bool _2771;
            for (;;)
            {
                _2770 = texelFetch(g_lightClassification, int((((_2503 << 5u) + (_2489 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                _2771 = _2770 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2771)
                {
                    frontier_phi_61_pred = _2755;
                    frontier_phi_61_pred_1 = _2760;
                    frontier_phi_61_pred_2 = _2759;
                    frontier_phi_61_pred_3 = _2758;
                    frontier_phi_61_pred_4 = _2757;
                    frontier_phi_61_pred_5 = _2756;
                }
                else
                {
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    uint _2885;
                    _2879 = _2755;
                    _2880 = _2756;
                    _2881 = _2757;
                    _2882 = _2758;
                    _2883 = _2759;
                    _2884 = _2760;
                    _2885 = _2770;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    for (;;)
                    {
                        uint _2889 = uint(findLSB(_2885)) + (_2761 << 5u);
                        uint _2886 = (_2885 + 4294967295u) & _2885;
                        uint _2891 = _2889 * 48u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 3u)).x));
                        uint _2911 = (_2889 * 48u) + 4u;
                        vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2930 = (_2889 * 48u) + 8u;
                        vec3 _2941 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x));
                        float _2945 = _2905.x - _2463;
                        float _2946 = _2905.y - _2464;
                        float _2947 = _2905.z - _2465;
                        float _2948 = dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947));
                        float _2951 = inversesqrt(_2948);
                        float _2952 = _2951 * _2945;
                        float _2953 = _2951 * _2946;
                        float _2954 = _2951 * _2947;
                        float _2955 = dot(vec3(_742, _745, _748), vec3(_2952, _2953, _2954));
                        float _2960 = 1.0 - (_2948 * _2905.w);
                        float _4315 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2961 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                        float _2962 = sqrt(_2948) * _2924.w;
                        float _2965 = 1.39999997615814208984375 / (_2962 + 1.39999997615814208984375);
                        float _2966 = _2965 * _2965;
                        float _2969 = ((1.0 - _2966) * _2955) + _2966;
                        float _2972 = _2962 * _2962;
                        float _2976 = ((isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))) * _2961) / ((_2972 * 0.699999988079071044921875) + 1.0);
                        float _2980 = (-0.0) - _2463;
                        float _2981 = (-0.0) - _2464;
                        float _2982 = (-0.0) - _2465;
                        float _2986 = inversesqrt(dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982)));
                        float _2987 = _2986 * _2980;
                        float _2988 = _2986 * _2981;
                        float _2989 = _2986 * _2982;
                        float _2997 = exp2(log2(1.0 / ((_2972 * 3.5) + 5.0)) * 0.25);
                        float _2998 = 1.0 - _802;
                        float _3005 = sqrt(1.0 - ((1.0 - (_2998 * _2998)) * (1.0 - (_2997 * _2997))));
                        float _3006 = _3005 * _3005;
                        float _3007 = _3006 * _3006;
                        float _3008 = _2987 + _2952;
                        float _3009 = _2988 + _2953;
                        float _3010 = _2989 + _2954;
                        float _3014 = inversesqrt(dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010)));
                        float _3018 = dot(vec3(_742, _745, _748), vec3(_2987, _2988, _2989));
                        float _4331 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3021 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                        float _3022 = dot(vec3(_742, _745, _748), vec3(_3014 * _3008, _3014 * _3009, _3014 * _3010));
                        float _4342 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3025 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
                        float _3029 = ((_3025 * _3025) * (_3007 + (-1.0))) + 1.0;
                        float _3030 = _2965 * _3006;
                        float _3031 = _3030 * _3030;
                        float _3034 = ((1.0 - _3031) * _2955) + _3031;
                        float _4353 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3035 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
                        float _3036 = 1.0 - _3006;
                        float _3046 = (0.5 / (((_3035 * ((_3021 * _3036) + _3006)) + 9.9999999392252902907785028219223e-09) + (((_3035 * _3036) + _3006) * _3021))) * _3035;
                        float _4364 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3057 = (((_3007 * 3.1415927410125732421875) * (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) / ((_3029 * _3029) * ((_2972 * 2.1991131305694580078125) + 3.141590118408203125))) * _2961;
                        _2814 = (_2976 * _2924.x) + _2882;
                        _2815 = (_2976 * _2924.y) + _2883;
                        _2816 = (_2976 * _2924.z) + _2884;
                        _2811 = (_3057 * _2941.x) + _2879;
                        _2812 = (_3057 * _2941.y) + _2880;
                        _2813 = (_3057 * _2941.z) + _2881;
                        if (_2886 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2879 = _2811;
                            _2880 = _2812;
                            _2881 = _2813;
                            _2882 = _2814;
                            _2883 = _2815;
                            _2884 = _2816;
                            _2885 = _2886;
                        }
                    }
                    frontier_phi_61_pred = _2811;
                    frontier_phi_61_pred_1 = _2816;
                    frontier_phi_61_pred_2 = _2815;
                    frontier_phi_61_pred_3 = _2814;
                    frontier_phi_61_pred_4 = _2813;
                    frontier_phi_61_pred_5 = _2812;
                }
                _2611 = frontier_phi_61_pred;
                _2621 = frontier_phi_61_pred_1;
                _2619 = frontier_phi_61_pred_2;
                _2617 = frontier_phi_61_pred_3;
                _2615 = frontier_phi_61_pred_4;
                _2613 = frontier_phi_61_pred_5;
                uint _2762 = _2761 + 1u;
                if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2755 = _2611;
                    _2756 = _2613;
                    _2757 = _2615;
                    _2758 = _2617;
                    _2759 = _2619;
                    _2760 = _2621;
                    _2761 = _2762;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
            _2620 = _2621;
        }
        uvec4 _2624 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2625 = _2624.z;
        uint _2627 = (_2625 >> 8u) & 15u;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        if (((4294967295u << _2627) & _2509) == 0u)
        {
            _2723 = _2610;
            _2725 = _2612;
            _2727 = _2614;
            _2729 = _2616;
            _2731 = _2618;
            _2733 = _2620;
        }
        else
        {
            float _2748 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
            float _2749 = _2748 * _2463;
            float _2750 = _2748 * _2464;
            float _2751 = _2748 * _2465;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2627 < ((_2625 >> 12u) & 15u))
            {
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2734;
                float _2862 = _2610;
                float _2863 = _2612;
                float _2864 = _2614;
                float _2865 = _2616;
                float _2866 = _2618;
                float _2867 = _2620;
                uint _2868 = _2627;
                uint _2877;
                bool _2878;
                for (;;)
                {
                    _2877 = texelFetch(g_lightClassification, int((((_2503 << 5u) + (_2489 << 9u)) + (_2868 << 2u)) >> 2u)).x;
                    _2878 = _2877 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2878)
                    {
                        frontier_phi_67_pred = _2865;
                        frontier_phi_67_pred_1 = _2866;
                        frontier_phi_67_pred_2 = _2867;
                        frontier_phi_67_pred_3 = _2864;
                        frontier_phi_67_pred_4 = _2863;
                        frontier_phi_67_pred_5 = _2862;
                    }
                    else
                    {
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3075 = _2862;
                        float _3076 = _2863;
                        float _3077 = _2864;
                        float _3078 = _2865;
                        float _3079 = _2866;
                        float _3080 = _2867;
                        uint _3081 = _2877;
                        uint _3082;
                        vec4 _3107;
                        float _3108;
                        vec4 _3123;
                        vec3 _3135;
                        vec4 _3150;
                        vec4 _3165;
                        float _3211;
                        bool _3212;
                        for (;;)
                        {
                            uint _3092 = ((_2868 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3081));
                            _3082 = (_3081 + 4294967295u) & _3081;
                            uint _3094 = _3092 * 40u;
                            _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            _3108 = _3107.w;
                            uint _3110 = (_3092 * 40u) + 4u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3125 = (_3092 * 40u) + 8u;
                            _3135 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x));
                            uint _3137 = (_3092 * 40u) + 16u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3152 = (_3092 * 40u) + 20u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            uint _3167 = (_3092 * 40u) + 24u;
                            vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3186 = (_3092 * 40u) + 28u;
                            vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            _3211 = fma(_2465, _3199.z, fma(_2464, _3199.y, _3199.x * _2463)) + _3199.w;
                            _3212 = !((fma(_2465, _3180.z, fma(_2464, _3180.y, _3180.x * _2463)) + _3180.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3212)
                            {
                                float _3239 = _3107.x - _2463;
                                float _3240 = _3107.y - _2464;
                                float _3241 = _3107.z - _2465;
                                float _3242 = dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241));
                                float _3245 = inversesqrt(_3242);
                                float _3246 = _3245 * _3239;
                                float _3247 = _3245 * _3240;
                                float _3248 = _3245 * _3241;
                                float _3252 = 1.0 - (_3242 / (_3108 * _3108));
                                float _4375 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3253 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                                float _3257 = sqrt(_3242) * _3123.w;
                                float _3259 = 1.39999997615814208984375 / (_3257 + 1.39999997615814208984375);
                                float _3260 = _3259 * _3259;
                                float _3263 = ((1.0 - _3260) * dot(vec3(_3246, _3247, _3248), vec3(_742, _745, _748))) + _3260;
                                float _3266 = _3257 * _3257;
                                float _3270 = (fma(_2465, _3150.z, fma(_2464, _3150.y, _3150.x * _2463)) + _3150.w) / _3211;
                                float _3271 = (fma(_2465, _3165.z, fma(_2464, _3165.y, _3165.x * _2463)) + _3165.w) / _3211;
                                float _3275 = 1.0 - dot(vec2(_3270, _3271), vec2(_3270, _3271));
                                float _4391 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                                float _3277 = _3276 * (((isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))) * _3253) / ((_3266 * 0.699999988079071044921875) + 1.0));
                                float _3289 = exp2(log2(1.0 / ((_3266 * 3.5) + 5.0)) * 0.25);
                                float _3290 = 1.0 - _802;
                                float _3297 = sqrt(1.0 - ((1.0 - (_3290 * _3290)) * (1.0 - (_3289 * _3289))));
                                float _3298 = _3297 * _3297;
                                float _3299 = _3298 * _3298;
                                float _3300 = _3246 - _2749;
                                float _3301 = _3247 - _2750;
                                float _3302 = _3248 - _2751;
                                float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                                float _3310 = dot(vec3(_742, _745, _748), vec3((-0.0) - _2749, (-0.0) - _2750, (-0.0) - _2751));
                                float _4402 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3313 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                                float _3314 = dot(vec3(_742, _745, _748), vec3(_3306 * _3300, _3306 * _3301, _3306 * _3302));
                                float _4413 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3317 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
                                float _3321 = ((_3317 * _3317) * (_3299 + (-1.0))) + 1.0;
                                float _3322 = _3259 * _3298;
                                float _3323 = _3322 * _3322;
                                float _3329 = ((1.0 - _3323) * dot(vec3(_742, _745, _748), vec3(_3246, _3247, _3248))) + _3323;
                                float _4424 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3331 = 1.0 - _3298;
                                float _3341 = (0.5 / (((_3330 * ((_3313 * _3331) + _3298)) + 9.9999999392252902907785028219223e-09) + (((_3330 * _3331) + _3298) * _3313))) * _3330;
                                float _4435 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3351 = (_3276 * _3253) * (((_3299 * 3.1415927410125732421875) * (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) / ((_3321 * _3321) * ((_3266 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3351 * _3135.x;
                                frontier_phi_73_pred_1 = _3351 * _3135.y;
                                frontier_phi_73_pred_2 = _3277 * _3123.z;
                                frontier_phi_73_pred_3 = _3277 * _3123.y;
                                frontier_phi_73_pred_4 = _3277 * _3123.x;
                                frontier_phi_73_pred_5 = _3351 * _3135.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3355 = frontier_phi_73_pred;
                            _3356 = frontier_phi_73_pred_1;
                            _3360 = frontier_phi_73_pred_2;
                            _3359 = frontier_phi_73_pred_3;
                            _3358 = frontier_phi_73_pred_4;
                            _3357 = frontier_phi_73_pred_5;
                            _3065 = _3358 + _3078;
                            _3066 = _3359 + _3079;
                            _3067 = _3360 + _3080;
                            _3062 = _3355 + _3075;
                            _3063 = _3356 + _3076;
                            _3064 = _3357 + _3077;
                            if (_3082 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3065;
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3082;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3065;
                        frontier_phi_67_pred_1 = _3066;
                        frontier_phi_67_pred_2 = _3067;
                        frontier_phi_67_pred_3 = _3064;
                        frontier_phi_67_pred_4 = _3063;
                        frontier_phi_67_pred_5 = _3062;
                    }
                    _2730 = frontier_phi_67_pred;
                    _2732 = frontier_phi_67_pred_1;
                    _2734 = frontier_phi_67_pred_2;
                    _2728 = frontier_phi_67_pred_3;
                    _2726 = frontier_phi_67_pred_4;
                    _2724 = frontier_phi_67_pred_5;
                    uint _2869 = _2868 + 1u;
                    if (_2869 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2862 = _2724;
                        _2863 = _2726;
                        _2864 = _2728;
                        _2865 = _2730;
                        _2866 = _2732;
                        _2867 = _2734;
                        _2868 = _2869;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2732;
                frontier_phi_55_56_ladder_1 = _2734;
                frontier_phi_55_56_ladder_2 = _2730;
                frontier_phi_55_56_ladder_3 = _2728;
                frontier_phi_55_56_ladder_4 = _2726;
                frontier_phi_55_56_ladder_5 = _2724;
            }
            else
            {
                frontier_phi_55_56_ladder = _2618;
                frontier_phi_55_56_ladder_1 = _2620;
                frontier_phi_55_56_ladder_2 = _2616;
                frontier_phi_55_56_ladder_3 = _2614;
                frontier_phi_55_56_ladder_4 = _2612;
                frontier_phi_55_56_ladder_5 = _2610;
            }
            _2723 = frontier_phi_55_56_ladder_5;
            _2725 = frontier_phi_55_56_ladder_4;
            _2727 = frontier_phi_55_56_ladder_3;
            _2729 = frontier_phi_55_56_ladder_2;
            _2731 = frontier_phi_55_56_ladder;
            _2733 = frontier_phi_55_56_ladder_1;
        }
        float _2738 = isnan(1.0) ? _786 : (isnan(_786) ? 1.0 : min(_786, 1.0));
        _2522 = (_2738 * _2729) + _1974;
        _2524 = (_2738 * _2731) + _1976;
        _2526 = (_2738 * _2733) + _1978;
        _2528 = ((_2723 * 0.039999999105930328369140625) * _2738) + _2307;
        _2530 = ((_2725 * 0.039999999105930328369140625) * _2738) + _2309;
        _2532 = ((_2727 * 0.039999999105930328369140625) * _2738) + _2311;
    }
    else
    {
        _2522 = _1974;
        _2524 = _1976;
        _2526 = _1978;
        _2528 = _2307;
        _2530 = _2309;
        _2532 = _2311;
    }
    float _4451 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4462 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4473 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    uint _2552 = _265 + 6u;
    float _2560 = _720 / cbSceneParam._m0[86u].x;
    float _2561 = _721 / cbSceneParam._m0[86u].y;
    vec4 _2575 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2560, _2561, (log2((isnan(cbSceneParam._m0[77u].w) ? _655 : (isnan(_655) ? cbSceneParam._m0[77u].w : min(_655, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2577 = _2575.x;
    float _2578 = _2575.y;
    float _2579 = _2575.z;
    float _2580 = _2575.w;
    float _2673;
    float _2675;
    float _2677;
    float _2679;
    if (_655 > cbSceneParam._m0[78u].w)
    {
        float _2635 = isnan(_655) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _655 : min(cbSceneParam._m0[80u].w, _655));
        float _2636 = _2635 / _655;
        float _2647 = _2636 * _705;
        float _2648 = _706 * _2636;
        float _2649 = (-0.0) - _2648;
        float _2651 = _2636 * _707;
        float _2653 = (cbSceneParam._m0[77u].w * _2649) / _2635;
        float _2654 = _2653 + cbSceneParam._m0[79u].w;
        float _2655 = cbSceneParam._m0[79u].w - _2648;
        float _2661 = sqrt(((_2647 * _2647) + (_2648 * _2648)) + (_2651 * _2651));
        float _2664 = (1.0 - (cbSceneParam._m0[77u].w / _2635)) * _2661;
        float _2669 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2671 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2824;
        if (abs((_2649 - _2653) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2824 = ((((_2654 > 0.0) ? exp2(_2669 * _2654) : (2.0 - exp2(_2671 * _2654))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2664;
        }
        else
        {
            float _2784 = 1.0 / cbSceneParam._m0[80u].x;
            float _2785 = isnan(_2655) ? _2654 : (isnan(_2654) ? _2655 : max(_2654, _2655));
            float _2786 = isnan(_2655) ? _2654 : (isnan(_2654) ? _2655 : min(_2654, _2655));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            float _2796 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : min(_2786, 0.0));
            _2824 = ((abs(_2661 / _2649) * cbSceneParam._m0[80u].y) * ((((_2795 - _2796) * 2.0) - ((exp2(_2669 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0)))) - exp2(_2669 * (isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))))) * _2784)) - ((exp2(_2671 * _2795) - exp2(_2671 * _2796)) * _2784))) + (_2664 * cbSceneParam._m0[80u].z);
        }
        vec4 _2826 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2560, _2561, 1.0), 0.0);
        float _2835 = exp2((_2824 * (-1.44269502162933349609375)) * (1.0 - _2826.w));
        float _2836 = log2(_2835);
        float _2852 = log2(_2580);
        _2673 = (exp2(_2852 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].x)) * _2826.x) / cbSceneParam._m0[78u].x)) + _2577;
        _2675 = (exp2(_2852 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].y)) * _2826.y) / cbSceneParam._m0[78u].y)) + _2578;
        _2677 = (exp2(_2852 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2836 * cbSceneParam._m0[78u].z)) * _2826.z) / cbSceneParam._m0[78u].z)) + _2579;
        _2679 = _2835 * _2580;
    }
    else
    {
        _2673 = _2577;
        _2675 = _2578;
        _2677 = _2579;
        _2679 = _2580;
    }
    float _2691 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2692 = _2691 == 3.0;
    float _2693 = log2(_2679);
    float _2700 = exp2(_2693 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2522 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _786))) + ((_2528 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1591)) * cbPerFrame._m0[3u].x));
    float _2701 = exp2(_2693 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_2524 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _786))) + ((_2530 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1591)) * cbPerFrame._m0[3u].x));
    float _2702 = exp2(_2693 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2526 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _786))) + ((_2532 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1591)) * cbPerFrame._m0[3u].x));
    float _2711 = (_2691 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2711 * (_2692 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2673)));
    SV_Target.y = _2711 * (_2692 ? _2701 : (_2701 + (cbSceneParam._m0[72u].w * _2675)));
    SV_Target.z = _2711 * (_2692 ? _2702 : (_2702 + (cbSceneParam._m0[72u].w * _2677)));
    SV_Target.w = cbInstanceData._m0[_2552].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2552].w;
}


