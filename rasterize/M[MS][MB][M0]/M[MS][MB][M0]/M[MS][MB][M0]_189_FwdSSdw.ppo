#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1314;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _369 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_359 - _369) * cbMtdParam._m0[24u].x) + _369) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3643 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _394 = (_387 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _395 = (_387 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _396 = (_387 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _445 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _459 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_435 - _445) * cbMtdParam._m0[24u].x) + _445) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3654 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _460 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _467 = (_460 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _468 = (_460 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _469 = (_460 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _487 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _504 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _506 = _504.x;
    float _507 = _504.y;
    float _508 = _504.z;
    float _515 = ((_487.x - _506) * _387) + _506;
    float _516 = ((_487.y - _507) * _387) + _507;
    float _517 = ((_487.z - _508) * _387) + _508;
    vec4 _529 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _542 = ((_529.z - _517) * _460) + _517;
    float _545 = ((((_529.x - _515) * _460) + _515) * 2.0) + (-1.0);
    float _547 = ((((_529.y - _516) * _460) + _516) * 2.0) + (-1.0);
    float _548 = dot(vec2(_545, _547), vec2(_545, _547));
    float _3665 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))));
    vec4 _567 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _592 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _594 = _592.x;
    float _595 = 1.0 - _594;
    float _601 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _604 = ((isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : min(_601, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _613 = (_604 - ((((((_594 - _595) * cbMtdParam._m0[24u].z) + _595) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _604))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3686 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _621 = (_614 * (cbMtdParam._m0[17u].x - _467)) + _467;
    float _622 = (_614 * (cbMtdParam._m0[17u].y - _468)) + _468;
    float _623 = (_614 * (cbMtdParam._m0[17u].z - _469)) + _469;
    vec4 _635 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _637 = _635.x;
    float _638 = 1.0 - _637;
    float _665 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_637 - _638) * cbMtdParam._m0[24u].w) + _638) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3697 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _666 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _674 = ((((cbMtdParam._m0[10u].x - _621) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _666) + _621;
    float _675 = ((((cbMtdParam._m0[10u].y - _622) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _666) + _622;
    float _676 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _623)) * _666) + _623;
    float _680 = (cbMtdParam._m0[19u].w * (_567.z - _542)) + _542;
    vec4 _694 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _701 = (_694.x * 2.0) + (-1.0);
    float _702 = (_694.y * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _3708 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _711 = (_614 * (_694.z - _680)) + _680;
    float _714 = ((cbMtdParam._m0[23u].y - _711) * _666) + _711;
    vec4 _733 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _739 = (_733.x * 2.0) + (-1.0);
    float _740 = (_733.y * 2.0) + (-1.0);
    float _741 = dot(vec2(_739, _740), vec2(_739, _740));
    float _3719 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _749 = (((_567.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _545;
    float _750 = (((_567.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _547;
    float _762 = (((_701 - _749) + (cbMtdParam._m0[21u].x * _749)) * _614) + _749;
    float _763 = (((_702 - _750) + (cbMtdParam._m0[21u].x * _750)) * _614) + _750;
    float _764 = (_614 * (sqrt(1.0 - (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0)))) - _553)) + _553;
    float _775 = (((_739 - _762) + (_762 * cbMtdParam._m0[22u].z)) * _666) + _762;
    float _776 = (((_740 - _763) + (_763 * cbMtdParam._m0[22u].z)) * _666) + _763;
    float _777 = ((sqrt(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) - _764) * _666) + _764;
    float _779 = cbMtdParam._m0[22u].x + _567.w;
    float _782 = fma(_777, _238 * NORMAL.x, fma(_776, _245 * TANGENT.x, (_231 * _223) * _775));
    float _785 = fma(_777, _238 * NORMAL.y, fma(_776, _245 * TANGENT.y, (_231 * _224) * _775));
    float _788 = fma(_777, _238 * NORMAL.z, fma(_776, _245 * TANGENT.z, (_231 * _225) * _775));
    float _792 = inversesqrt(dot(vec3(_782, _785, _788), vec3(_782, _785, _788)));
    float _793 = _792 * _782;
    float _794 = _792 * _785;
    float _795 = _792 * _788;
    float _3730 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _796 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _3752 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3763 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3774 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _865 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _855);
    float _866 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _855);
    float _867 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _855);
    float _871 = inversesqrt(dot(vec3(_865, _866, _867), vec3(_865, _866, _867)));
    float _872 = _865 * _871;
    float _873 = _866 * _871;
    float _874 = _867 * _871;
    float _880 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _881 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _899 = fma(_795, cbSceneParam._m0[5u].z, fma(_794, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _793));
    float _902 = fma(_795, cbSceneParam._m0[6u].z, fma(_794, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _793));
    float _905 = fma(_795, cbSceneParam._m0[7u].z, fma(_794, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _793));
    uint _919 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _925 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_919].x;
    float _926 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_919].y;
    float _927 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_919].z;
    float _3785 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    vec4 _939 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _880, cbSceneParam._m0[86u].y * _881));
    float _943 = ((isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * TEXCOORD_5.w) * _939.x;
    float _944 = dot(vec3(_793, _794, _795), vec3(_872, _873, _874));
    float _947 = _944 * 2.0;
    float _951 = (_947 * _793) - _872;
    float _952 = (_947 * _794) - _873;
    float _953 = (_947 * _795) - _874;
    float _957 = abs(dot(vec3(_872, _873, _874), vec3(_793, _794, _795)));
    float _3818 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _959 = sqrt(_796);
    float _972 = exp2((_959 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_959 * 3.0));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1313;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1038 = fma(_1012, cbModelParam._m0[26u].z, fma(_1008, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004));
        float _1042 = fma(_1012, cbModelParam._m0[27u].z, fma(_1008, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004));
        float _1046 = fma(_1012, cbModelParam._m0[28u].z, fma(_1008, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004));
        float _1071 = _1004 + _793;
        float _1072 = _1008 + _794;
        float _1073 = _1012 + _795;
        float _1083 = fma(_1073, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071)) - _1038;
        float _1084 = fma(_1073, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071)) - _1042;
        float _1085 = fma(_1073, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071)) - _1046;
        float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
        float _1102 = ((_1089 * _1083) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1038 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1089 * _1084) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1042 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1089 * _1085) / cbModelParam._m0[34u].z) + ((((((_1046 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        float _1141 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1107.x + (-0.5));
        float _1143 = _1141 * (_1107.y + (-0.5));
        float _1144 = _1141 * (_1107.z + (-0.5));
        float _1151 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1114.x + (-0.5));
        float _1153 = _1151 * (_1114.y + (-0.5));
        float _1154 = _1151 * (_1114.z + (-0.5));
        float _1161 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1121.x + (-0.5));
        float _1163 = _1161 * (_1121.y + (-0.5));
        float _1164 = _1161 * (_1121.z + (-0.5));
        float _1171 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1128.x + (-0.5));
        float _1173 = _1171 * (_1128.y + (-0.5));
        float _1174 = _1171 * (_1128.z + (-0.5));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = _1142 * 0.5;
        float _1179 = _1152 * 0.5;
        float _1180 = _1162 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1195 = (dot(vec3(_793, _794, _795), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1205 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3866 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1207 + 1.0))) + _1212) * _1175;
        float _1222 = _1143 * 0.5;
        float _1223 = _1153 * 0.5;
        float _1224 = _1163 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_793, _794, _795), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3899 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1249 + 1.0))) + _1254) * _1176;
        float _1264 = _1144 * 0.5;
        float _1265 = _1154 * 0.5;
        float _1266 = _1164 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_793, _794, _795), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3932 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1291 + 1.0))) + _1296) * _1177;
        _1313 = _1144;
        _1315 = _1143;
        _1316 = _1142;
        _1317 = _1154;
        _1318 = _1153;
        _1319 = _1152;
        _1320 = _1164;
        _1321 = _1163;
        _1322 = _1162;
        _1323 = _1177;
        _1324 = _1176;
        _1325 = _1175;
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
    }
    else
    {
        _1313 = _1314;
        _1315 = _1314;
        _1316 = _1314;
        _1317 = _1314;
        _1318 = _1314;
        _1319 = _1314;
        _1320 = _1314;
        _1321 = _1314;
        _1322 = _1314;
        _1323 = _1314;
        _1324 = _1314;
        _1325 = _1314;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1352 = fma(_1012, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1004));
        float _1356 = fma(_1012, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1004));
        float _1360 = fma(_1012, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1004));
        float _1383 = _1004 + _793;
        float _1384 = _1008 + _794;
        float _1385 = _1012 + _795;
        float _1395 = fma(_1385, cbModelParam._m0[30u].z, fma(_1384, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1383)) - _1352;
        float _1396 = fma(_1385, cbModelParam._m0[31u].z, fma(_1384, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1383)) - _1356;
        float _1397 = fma(_1385, cbModelParam._m0[32u].z, fma(_1384, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1383)) - _1360;
        float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
        float _1414 = ((_1401 * _1395) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1352 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1401 * _1396) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1356 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1401 * _1397) / cbModelParam._m0[35u].z) + ((((((_1360 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        float _1451 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1418.x + (-0.5));
        float _1453 = _1451 * (_1418.y + (-0.5));
        float _1454 = _1451 * (_1418.z + (-0.5));
        float _1461 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1425.x + (-0.5));
        float _1463 = _1461 * (_1425.y + (-0.5));
        float _1464 = _1461 * (_1425.z + (-0.5));
        float _1471 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1432.x + (-0.5));
        float _1473 = _1471 * (_1432.y + (-0.5));
        float _1474 = _1471 * (_1432.z + (-0.5));
        float _1481 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1439.x + (-0.5));
        float _1483 = _1481 * (_1439.y + (-0.5));
        float _1484 = _1481 * (_1439.z + (-0.5));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = _1452 * 0.5;
        float _1489 = _1462 * 0.5;
        float _1490 = _1472 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_793, _794, _795), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _3995 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1515 + 1.0))) + _1520) * _1485;
        float _1530 = _1453 * 0.5;
        float _1531 = _1463 * 0.5;
        float _1532 = _1473 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_793, _794, _795), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4028 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1557 + 1.0))) + _1562) * _1486;
        float _1572 = _1454 * 0.5;
        float _1573 = _1464 * 0.5;
        float _1574 = _1474 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_793, _794, _795), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4061 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1599 + 1.0))) + _1604) * _1487;
        _1621 = _1454;
        _1622 = _1453;
        _1623 = _1452;
        _1624 = _1464;
        _1625 = _1463;
        _1626 = _1462;
        _1627 = _1474;
        _1628 = _1473;
        _1629 = _1472;
        _1630 = _1487;
        _1631 = _1486;
        _1632 = _1485;
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
    }
    else
    {
        _1621 = _1314;
        _1622 = _1314;
        _1623 = _1314;
        _1624 = _1314;
        _1625 = _1314;
        _1626 = _1314;
        _1627 = _1314;
        _1628 = _1314;
        _1629 = _1314;
        _1630 = _1314;
        _1631 = _1314;
        _1632 = _1314;
        _1633 = 0.0;
        _1634 = 0.0;
        _1635 = 0.0;
    }
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1326)) + _1326;
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1327)) + _1327;
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1328)) + _1328;
    float _1668 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1671 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1674 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1645));
    float _1689 = _951 * 0.5;
    float _1690 = _952 * 0.5;
    float _1691 = _953 * 0.5;
    float _1692 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1695 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1698 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1732;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1705 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1313, _1317, _1320, _1323));
        float _1709 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1315, _1318, _1321, _1324));
        float _1713 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1720 = dot(vec4(cbModelParam._m0[39u]), vec4(_1689, _1690, _1691, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1743;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1734 = dot(vec4(cbModelParam._m0[40u]), vec4(_1689, _1690, _1691, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1747 = (_1743 * cbModelParam._m0[1u].x) + (_1732 * (1.0 - cbModelParam._m0[1u].x));
    float _1757 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _796);
    float _1758 = isnan(_1757) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1757 : min(cbModelParam._m0[25u].z, _1757));
    float _1839;
    float _1841;
    float _1843;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1806 = fma(_1012, cbModelParam._m0[13u].z, fma(_1008, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004)) + cbModelParam._m0[13u].w;
        float _1810 = fma(_1012, cbModelParam._m0[14u].z, fma(_1008, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004)) + cbModelParam._m0[14u].w;
        float _1814 = fma(_1012, cbModelParam._m0[15u].z, fma(_1008, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004)) + cbModelParam._m0[15u].w;
        float _1817 = fma(_953, cbModelParam._m0[13u].z, fma(_952, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _951));
        float _1820 = fma(_953, cbModelParam._m0[14u].z, fma(_952, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _951));
        float _1823 = fma(_953, cbModelParam._m0[15u].z, fma(_952, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _951));
        float _1851;
        if (_1817 > 0.0)
        {
            _1851 = abs((1.0 - _1806) / _1817);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1806 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1851 = frontier_phi_14_12_ladder;
        }
        float _2073;
        if (_1820 > 0.0)
        {
            _2073 = abs((1.0 - _1810) / _1820);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1810 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2073 = frontier_phi_23_19_ladder;
        }
        float _2319;
        if (_1823 > 0.0)
        {
            _2319 = abs((1.0 - _1814) / _1823);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1814 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2319 = frontier_phi_35_30_ladder;
        }
        float _2321 = isnan(_2073) ? _1851 : (isnan(_1851) ? _2073 : min(_1851, _2073));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1817) + _1806;
        float _2327 = (_2322 * _1820) + _1810;
        float _2328 = (_2322 * _1823) + _1814;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2329;
        float _2333 = _2329 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 > _2333) || ((_2327 < _2331) || ((_2326 < _2331) || (_2326 > _2333))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2328, cbModelParam._m0[9u].z, fma(_2327, cbModelParam._m0[9u].y, _2326 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2328, cbModelParam._m0[10u].z, fma(_2327, cbModelParam._m0[10u].y, _2326 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2328, cbModelParam._m0[11u].z, fma(_2327, cbModelParam._m0[11u].y, _2326 * cbModelParam._m0[11u].x))), _1758);
            frontier_phi_13_35_ladder = _2452.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2452.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2452.x * cbModelParam._m0[1u].y;
        }
        _1839 = frontier_phi_13_35_ladder_2;
        _1841 = frontier_phi_13_35_ladder_1;
        _1843 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_951, _952, _953), _1758);
        _1839 = _1827.x * cbModelParam._m0[1u].y;
        _1841 = _1827.y * cbModelParam._m0[1u].y;
        _1843 = _1827.z * cbModelParam._m0[1u].y;
    }
    float _1847 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _796);
    float _1848 = isnan(_1847) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1847 : min(cbModelParam._m0[25u].w, _1847));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1902 = fma(_1012, cbModelParam._m0[21u].z, fma(_1008, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004)) + cbModelParam._m0[21u].w;
        float _1906 = fma(_1012, cbModelParam._m0[22u].z, fma(_1008, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004)) + cbModelParam._m0[22u].w;
        float _1910 = fma(_1012, cbModelParam._m0[23u].z, fma(_1008, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004)) + cbModelParam._m0[23u].w;
        float _1913 = fma(_953, cbModelParam._m0[21u].z, fma(_952, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _951));
        float _1916 = fma(_953, cbModelParam._m0[22u].z, fma(_952, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _951));
        float _1919 = fma(_953, cbModelParam._m0[23u].z, fma(_952, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _951));
        float _2078;
        if (_1913 > 0.0)
        {
            _2078 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2078 = frontier_phi_25_21_ladder;
        }
        float _2346;
        if (_1916 > 0.0)
        {
            _2346 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2346 = frontier_phi_37_32_ladder;
        }
        float _2551;
        if (_1919 > 0.0)
        {
            _2551 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2551 = frontier_phi_46_43_ladder;
        }
        float _2553 = isnan(_2346) ? _2078 : (isnan(_2078) ? _2346 : min(_2078, _2346));
        float _2554 = isnan(_2551) ? _2553 : (isnan(_2553) ? _2551 : min(_2553, _2551));
        float _2558 = (_2554 * _1913) + _1902;
        float _2559 = (_2554 * _1916) + _1906;
        float _2560 = (_2554 * _1919) + _1910;
        float _2561 = _2554 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2561;
        float _2564 = _2561 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2560 > _2564) || ((_2560 < _2562) || ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 < _2562) || (_2558 > _2564))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2560, cbModelParam._m0[17u].z, fma(_2559, cbModelParam._m0[17u].y, _2558 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2560, cbModelParam._m0[18u].z, fma(_2559, cbModelParam._m0[18u].y, _2558 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2560, cbModelParam._m0[19u].z, fma(_2559, cbModelParam._m0[19u].y, _2558 * cbModelParam._m0[19u].x))), _1848);
            frontier_phi_22_46_ladder = _2759.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2759.x * cbModelParam._m0[1u].z;
        }
        _1938 = frontier_phi_22_46_ladder_2;
        _1940 = frontier_phi_22_46_ladder_1;
        _1942 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_951, _952, _953), _1848);
        _1938 = _1922.x * cbModelParam._m0[1u].z;
        _1940 = _1922.y * cbModelParam._m0[1u].z;
        _1942 = _1922.z * cbModelParam._m0[1u].z;
    }
    float _1954 = ((((1.0 - _972) * ((_959 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_972 * _959)) * _943;
    float _1955 = _1954 * ((cbModelParam._m0[1u].w * (_1938 - _1839)) + _1839);
    float _1956 = _1954 * ((cbModelParam._m0[1u].w * (_1940 - _1841)) + _1841);
    float _1957 = _1954 * ((cbModelParam._m0[1u].w * (_1942 - _1843)) + _1843);
    float _1960 = fma(_1957, cbSceneParam._m0[89u].z, fma(_1956, cbSceneParam._m0[89u].y, _1955 * cbSceneParam._m0[89u].x));
    float _1963 = fma(_1957, cbSceneParam._m0[90u].z, fma(_1956, cbSceneParam._m0[90u].y, _1955 * cbSceneParam._m0[90u].x));
    float _1966 = fma(_1957, cbSceneParam._m0[91u].z, fma(_1956, cbSceneParam._m0[91u].y, _1955 * cbSceneParam._m0[91u].x));
    vec4 _1974 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_880, _881));
    float _1976 = _1974.w;
    float _1988 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1976);
    float _1989 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1976);
    float _1990 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1976);
    uvec4 _1994 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1996 = _1994.x * 14u;
    uint _1997 = _1996 + 13u;
    float _2004 = _943 + (-1.0);
    float _2009 = (cbLight._m0[_1997].x * _2004) + 1.0;
    float _2010 = (cbLight._m0[_1997].y * _2004) + 1.0;
    float _2011 = (cbLight._m0[_1997].z * _2004) + 1.0;
    float _2012 = (cbLight._m0[_1997].w * _2004) + 1.0;
    uint _2013 = _1996 + 5u;
    float _2019 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2023 = _1996 + 4u;
    float _2032 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2036 = _1996 | 1u;
    float _2047 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_793, _794, _795));
    float _2050 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_793, _794, _795));
    float _4197 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _4208 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2055 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * 0.3183098733425140380859375;
    float _2057 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _2064 = ((cbLight._m0[_2013].x * _2019) * _2057) + (((cbLight._m0[_2023].x * _1988) * _2032) * _2055);
    float _2065 = ((_2019 * cbLight._m0[_2013].y) * _2057) + (((cbLight._m0[_2023].y * _1989) * _2032) * _2055);
    float _2066 = ((_2019 * cbLight._m0[_2013].z) * _2057) + (((cbLight._m0[_2023].z * _1990) * _2032) * _2055);
    uvec4 _2070 = floatBitsToUint(cbLight._m0[_1996 + 12u]);
    bool _2072 = _2070.x == 0u;
    float _2083;
    float _2085;
    float _2087;
    if (_2072)
    {
        _2083 = _2064;
        _2085 = _2065;
        _2087 = _2066;
    }
    else
    {
        uint _2091 = _1996 + 6u;
        float _2107 = (dot(vec3(cbLight._m0[_1996 + 2u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2108 = _2107 * _2107;
        float _4219 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2109 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2110 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2083 = (((cbLight._m0[_2091].x * 0.3183098733425140380859375) * _2109) * _2110) + _2064;
        _2085 = (((cbLight._m0[_2091].y * 0.3183098733425140380859375) * _2109) * _2110) + _2065;
        _2087 = (((cbLight._m0[_2091].z * 0.3183098733425140380859375) * _2109) * _2110) + _2066;
    }
    bool _2090 = _2070.y == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2090)
    {
        _2128 = _2083;
        _2130 = _2085;
        _2132 = _2087;
    }
    else
    {
        uint _2290 = _1996 + 7u;
        float _2306 = (dot(vec3(cbLight._m0[_1996 + 3u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4235 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2309 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2128 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2083;
        _2130 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2085;
        _2132 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2087;
    }
    uint _2135 = _1996 + 8u;
    float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _796) * 0.949999988079071044921875);
    float _2149 = _2148 * _2148;
    float _2150 = cbLight._m0[_1996].x + _872;
    float _2151 = cbLight._m0[_1996].y + _873;
    float _2152 = cbLight._m0[_1996].z + _874;
    float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
    float _2157 = _2156 * _2150;
    float _2158 = _2156 * _2151;
    float _2159 = _2156 * _2152;
    float _2160 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_1996].xyz));
    float _4251 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _2164 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2165 = dot(vec3(_793, _794, _795), vec3(_2157, _2158, _2159));
    float _4273 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2157, _2158, _2159));
    float _4284 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2149 * _2149;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2189 = 1.0 - _2149;
    float _2200 = (0.5 / (((_2164 * ((_2163 * _2189) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2189) + _2149) * _2163))) * _2163;
    float _4295 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2202 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    uint _2216 = _1996 + 9u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _796) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_2036].x + _872;
    float _2230 = cbLight._m0[_2036].y + _873;
    float _2231 = cbLight._m0[_2036].z + _874;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2036].xyz));
    float _4306 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2243 = dot(vec3(_793, _794, _795), vec3(_2236, _2237, _2238));
    float _4317 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2236, _2237, _2238));
    float _4328 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2228 * _2228;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2264 = (exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2265 = 1.0 - _2228;
    float _2275 = (0.5 / (((_2164 * ((_2242 * _2265) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2265) + _2228) * _2242))) * _2242;
    float _4339 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2277 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    float _2287 = (((_2264 * cbLight._m0[_2216].x) * _2277) * _2019) + ((((cbLight._m0[_2135].x * _1988) * _2188) * _2202) * _2032);
    float _2288 = (((_2264 * cbLight._m0[_2216].y) * _2277) * _2019) + ((((cbLight._m0[_2135].y * _1989) * _2188) * _2202) * _2032);
    float _2289 = (((_2264 * cbLight._m0[_2216].z) * _2277) * _2019) + ((((cbLight._m0[_2135].z * _1990) * _2188) * _2202) * _2032);
    float _2351;
    float _2353;
    float _2355;
    if (_2072)
    {
        _2351 = _2287;
        _2353 = _2288;
        _2355 = _2289;
    }
    else
    {
        uint _2357 = _1996 + 2u;
        uint _2361 = _1996 + 10u;
        float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _796) * 0.949999988079071044921875);
        float _2376 = _2375 * _2375;
        float _2377 = cbLight._m0[_2357].x + _872;
        float _2378 = cbLight._m0[_2357].y + _873;
        float _2379 = cbLight._m0[_2357].z + _874;
        float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
        float _2384 = _2383 * _2377;
        float _2385 = _2383 * _2378;
        float _2386 = _2383 * _2379;
        float _2387 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2357].xyz));
        float _4350 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2391 = dot(vec3(_793, _794, _795), vec3(_2384, _2385, _2386));
        float _4361 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2395 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2384, _2385, _2386));
        float _4372 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2399 = _2376 * _2376;
        float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
        float _2412 = (exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2413 = 1.0 - _2376;
        float _2423 = (0.5 / (((_2164 * ((_2390 * _2413) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2413) + _2376) * _2390))) * _2390;
        float _4383 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2425 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
        float _2426 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2351 = (((_2412 * cbLight._m0[_2361].x) * _2425) * _2426) + _2287;
        _2353 = (((_2412 * cbLight._m0[_2361].y) * _2425) * _2426) + _2288;
        _2355 = (((_2412 * cbLight._m0[_2361].z) * _2425) * _2426) + _2289;
    }
    float _2461;
    float _2463;
    float _2465;
    if (_2090)
    {
        _2461 = _2351;
        _2463 = _2353;
        _2465 = _2355;
    }
    else
    {
        uint _2472 = _1996 + 3u;
        uint _2476 = _1996 + 11u;
        float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _796) * 0.949999988079071044921875);
        float _2491 = _2490 * _2490;
        float _2492 = cbLight._m0[_2472].x + _872;
        float _2493 = cbLight._m0[_2472].y + _873;
        float _2494 = cbLight._m0[_2472].z + _874;
        float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
        float _2499 = _2498 * _2492;
        float _2500 = _2498 * _2493;
        float _2501 = _2498 * _2494;
        float _2502 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2472].xyz));
        float _4399 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2506 = dot(vec3(_793, _794, _795), vec3(_2499, _2500, _2501));
        float _4410 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2510 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2499, _2500, _2501));
        float _4421 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2514 = _2491 * _2491;
        float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
        float _2527 = (exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2528 = 1.0 - _2491;
        float _2538 = (0.5 / (((_2164 * ((_2505 * _2528) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2528) + _2491) * _2505))) * _2505;
        float _4432 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2540 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
        float _2541 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2461 = (((_2527 * cbLight._m0[_2476].x) * _2540) * _2541) + _2351;
        _2463 = (((_2527 * cbLight._m0[_2476].y) * _2540) * _2541) + _2353;
        _2465 = (((_2527 * cbLight._m0[_2476].z) * _2540) * _2541) + _2355;
    }
    float _2676;
    float _2678;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    if (_1994.y == 0u)
    {
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2617 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2616;
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2616;
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2616;
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.x;
        uint _2643 = uint((float(_2631.y) * floor(float(uint(cbSceneParam._m0[85u].y * _881) / _2632))) + floor(float(uint(cbSceneParam._m0[85u].x * _880) / _2632)));
        float _2653 = (log2(_2619 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2654 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        uint _2657 = uint(isnan(14.0) ? _2654 : (isnan(_2654) ? 14.0 : min(_2654, 14.0)));
        uvec4 _2662 = texelFetch(g_lightClusterGridBuffer, int(((_2657 << 2u) + (_2643 << 6u)) >> 2u));
        uint _2663 = _2662.x;
        uint _2664 = _2631.z;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        if (((((1u << ((_2664 >> 4u) & 15u)) + 4294967295u) & _2663) == 0u) || ((_2664 & 240u) == 0u))
        {
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
        }
        else
        {
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            uint _2915 = 0u;
            uint _2924;
            bool _2925;
            for (;;)
            {
                _2924 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                _2925 = _2924 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2925)
                {
                    frontier_phi_61_pred = _2909;
                    frontier_phi_61_pred_1 = _2914;
                    frontier_phi_61_pred_2 = _2913;
                    frontier_phi_61_pred_3 = _2912;
                    frontier_phi_61_pred_4 = _2911;
                    frontier_phi_61_pred_5 = _2910;
                }
                else
                {
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    uint _3039;
                    _3033 = _2909;
                    _3034 = _2910;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2914;
                    _3039 = _2924;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    for (;;)
                    {
                        uint _3043 = uint(findLSB(_3039)) + (_2915 << 5u);
                        uint _3040 = (_3039 + 4294967295u) & _3039;
                        uint _3045 = _3043 * 48u;
                        vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 3u)).x));
                        uint _3065 = (_3043 * 48u) + 4u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3084 = (_3043 * 48u) + 8u;
                        vec3 _3095 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x));
                        float _3099 = _3059.x - _2617;
                        float _3100 = _3059.y - _2618;
                        float _3101 = _3059.z - _2619;
                        float _3102 = dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101));
                        float _3105 = inversesqrt(_3102);
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3109 = dot(vec3(_899, _902, _905), vec3(_3106, _3107, _3108));
                        float _3114 = 1.0 - (_3102 * _3059.w);
                        float _4458 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3115 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3116 = sqrt(_3102) * _3078.w;
                        float _3119 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                        float _3120 = _3119 * _3119;
                        float _3123 = ((1.0 - _3120) * _3109) + _3120;
                        float _3126 = _3116 * _3116;
                        float _3130 = ((isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))) * _3115) / ((_3126 * 0.699999988079071044921875) + 1.0);
                        float _3134 = (-0.0) - _2617;
                        float _3135 = (-0.0) - _2618;
                        float _3136 = (-0.0) - _2619;
                        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                        float _3141 = _3140 * _3134;
                        float _3142 = _3140 * _3135;
                        float _3143 = _3140 * _3136;
                        float _3151 = exp2(log2(1.0 / ((_3126 * 3.5) + 5.0)) * 0.25);
                        float _3152 = 1.0 - _959;
                        float _3159 = sqrt(1.0 - ((1.0 - (_3152 * _3152)) * (1.0 - (_3151 * _3151))));
                        float _3160 = _3159 * _3159;
                        float _3161 = _3160 * _3160;
                        float _3162 = _3141 + _3106;
                        float _3163 = _3142 + _3107;
                        float _3164 = _3143 + _3108;
                        float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                        float _3172 = dot(vec3(_899, _902, _905), vec3(_3141, _3142, _3143));
                        float _4474 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3176 = dot(vec3(_899, _902, _905), vec3(_3168 * _3162, _3168 * _3163, _3168 * _3164));
                        float _4485 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3179 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3183 = ((_3179 * _3179) * (_3161 + (-1.0))) + 1.0;
                        float _3184 = _3119 * _3160;
                        float _3185 = _3184 * _3184;
                        float _3188 = ((1.0 - _3185) * _3109) + _3185;
                        float _4496 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3189 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3190 = 1.0 - _3160;
                        float _3200 = (0.5 / (((_3189 * ((_3175 * _3190) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3160) * _3175))) * _3189;
                        float _4507 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3211 = (((_3161 * 3.1415927410125732421875) * (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) / ((_3183 * _3183) * ((_3126 * 2.1991131305694580078125) + 3.141590118408203125))) * _3115;
                        _2968 = (_3130 * _3078.x) + _3036;
                        _2969 = (_3130 * _3078.y) + _3037;
                        _2970 = (_3130 * _3078.z) + _3038;
                        _2965 = (_3211 * _3095.x) + _3033;
                        _2966 = (_3211 * _3095.y) + _3034;
                        _2967 = (_3211 * _3095.z) + _3035;
                        if (_3040 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3033 = _2965;
                            _3034 = _2966;
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _2970;
                            _3039 = _3040;
                        }
                    }
                    frontier_phi_61_pred = _2965;
                    frontier_phi_61_pred_1 = _2970;
                    frontier_phi_61_pred_2 = _2969;
                    frontier_phi_61_pred_3 = _2968;
                    frontier_phi_61_pred_4 = _2967;
                    frontier_phi_61_pred_5 = _2966;
                }
                _2765 = frontier_phi_61_pred;
                _2775 = frontier_phi_61_pred_1;
                _2773 = frontier_phi_61_pred_2;
                _2771 = frontier_phi_61_pred_3;
                _2769 = frontier_phi_61_pred_4;
                _2767 = frontier_phi_61_pred_5;
                uint _2916 = _2915 + 1u;
                if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2909 = _2765;
                    _2910 = _2767;
                    _2911 = _2769;
                    _2912 = _2771;
                    _2913 = _2773;
                    _2914 = _2775;
                    _2915 = _2916;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
        }
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.z;
        uint _2781 = (_2779 >> 8u) & 15u;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        if (((4294967295u << _2781) & _2663) == 0u)
        {
            _2877 = _2764;
            _2879 = _2766;
            _2881 = _2768;
            _2883 = _2770;
            _2885 = _2772;
            _2887 = _2774;
        }
        else
        {
            float _2902 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
            float _2903 = _2902 * _2617;
            float _2904 = _2902 * _2618;
            float _2905 = _2902 * _2619;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2781 < ((_2779 >> 12u) & 15u))
            {
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _3016 = _2764;
                float _3017 = _2766;
                float _3018 = _2768;
                float _3019 = _2770;
                float _3020 = _2772;
                float _3021 = _2774;
                uint _3022 = _2781;
                uint _3031;
                bool _3032;
                for (;;)
                {
                    _3031 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                    _3032 = _3031 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3032)
                    {
                        frontier_phi_67_pred = _3019;
                        frontier_phi_67_pred_1 = _3020;
                        frontier_phi_67_pred_2 = _3021;
                        frontier_phi_67_pred_3 = _3018;
                        frontier_phi_67_pred_4 = _3017;
                        frontier_phi_67_pred_5 = _3016;
                    }
                    else
                    {
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3229 = _3016;
                        float _3230 = _3017;
                        float _3231 = _3018;
                        float _3232 = _3019;
                        float _3233 = _3020;
                        float _3234 = _3021;
                        uint _3235 = _3031;
                        uint _3236;
                        vec4 _3261;
                        float _3262;
                        vec4 _3277;
                        vec3 _3289;
                        vec4 _3304;
                        vec4 _3319;
                        float _3365;
                        bool _3366;
                        for (;;)
                        {
                            uint _3246 = ((_3022 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3235));
                            _3236 = (_3235 + 4294967295u) & _3235;
                            uint _3248 = _3246 * 40u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            _3262 = _3261.w;
                            uint _3264 = (_3246 * 40u) + 4u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            uint _3279 = (_3246 * 40u) + 8u;
                            _3289 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x));
                            uint _3291 = (_3246 * 40u) + 16u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3246 * 40u) + 20u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3246 * 40u) + 24u;
                            vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3340 = (_3246 * 40u) + 28u;
                            vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            _3365 = fma(_2619, _3353.z, fma(_2618, _3353.y, _3353.x * _2617)) + _3353.w;
                            _3366 = !((fma(_2619, _3334.z, fma(_2618, _3334.y, _3334.x * _2617)) + _3334.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3366)
                            {
                                float _3393 = _3261.x - _2617;
                                float _3394 = _3261.y - _2618;
                                float _3395 = _3261.z - _2619;
                                float _3396 = dot(vec3(_3393, _3394, _3395), vec3(_3393, _3394, _3395));
                                float _3399 = inversesqrt(_3396);
                                float _3400 = _3399 * _3393;
                                float _3401 = _3399 * _3394;
                                float _3402 = _3399 * _3395;
                                float _3406 = 1.0 - (_3396 / (_3262 * _3262));
                                float _4518 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3411 = sqrt(_3396) * _3277.w;
                                float _3413 = 1.39999997615814208984375 / (_3411 + 1.39999997615814208984375);
                                float _3414 = _3413 * _3413;
                                float _3417 = ((1.0 - _3414) * dot(vec3(_3400, _3401, _3402), vec3(_899, _902, _905))) + _3414;
                                float _3420 = _3411 * _3411;
                                float _3424 = (fma(_2619, _3304.z, fma(_2618, _3304.y, _3304.x * _2617)) + _3304.w) / _3365;
                                float _3425 = (fma(_2619, _3319.z, fma(_2618, _3319.y, _3319.x * _2617)) + _3319.w) / _3365;
                                float _3429 = 1.0 - dot(vec2(_3424, _3425), vec2(_3424, _3425));
                                float _4534 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                                float _3430 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3431 = _3430 * (((isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0))) * _3407) / ((_3420 * 0.699999988079071044921875) + 1.0));
                                float _3443 = exp2(log2(1.0 / ((_3420 * 3.5) + 5.0)) * 0.25);
                                float _3444 = 1.0 - _959;
                                float _3451 = sqrt(1.0 - ((1.0 - (_3444 * _3444)) * (1.0 - (_3443 * _3443))));
                                float _3452 = _3451 * _3451;
                                float _3453 = _3452 * _3452;
                                float _3454 = _3400 - _2903;
                                float _3455 = _3401 - _2904;
                                float _3456 = _3402 - _2905;
                                float _3460 = inversesqrt(dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456)));
                                float _3464 = dot(vec3(_899, _902, _905), vec3((-0.0) - _2903, (-0.0) - _2904, (-0.0) - _2905));
                                float _4545 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3467 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3468 = dot(vec3(_899, _902, _905), vec3(_3460 * _3454, _3460 * _3455, _3460 * _3456));
                                float _4556 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3471 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3475 = ((_3471 * _3471) * (_3453 + (-1.0))) + 1.0;
                                float _3476 = _3413 * _3452;
                                float _3477 = _3476 * _3476;
                                float _3483 = ((1.0 - _3477) * dot(vec3(_899, _902, _905), vec3(_3400, _3401, _3402))) + _3477;
                                float _4567 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3484 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3485 = 1.0 - _3452;
                                float _3495 = (0.5 / (((_3484 * ((_3467 * _3485) + _3452)) + 9.9999999392252902907785028219223e-09) + (((_3484 * _3485) + _3452) * _3467))) * _3484;
                                float _4578 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3505 = (_3430 * _3407) * (((_3453 * 3.1415927410125732421875) * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) / ((_3475 * _3475) * ((_3420 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3505 * _3289.x;
                                frontier_phi_73_pred_1 = _3505 * _3289.y;
                                frontier_phi_73_pred_2 = _3431 * _3277.z;
                                frontier_phi_73_pred_3 = _3431 * _3277.y;
                                frontier_phi_73_pred_4 = _3431 * _3277.x;
                                frontier_phi_73_pred_5 = _3505 * _3289.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3509 = frontier_phi_73_pred;
                            _3510 = frontier_phi_73_pred_1;
                            _3514 = frontier_phi_73_pred_2;
                            _3513 = frontier_phi_73_pred_3;
                            _3512 = frontier_phi_73_pred_4;
                            _3511 = frontier_phi_73_pred_5;
                            _3219 = _3512 + _3232;
                            _3220 = _3513 + _3233;
                            _3221 = _3514 + _3234;
                            _3216 = _3509 + _3229;
                            _3217 = _3510 + _3230;
                            _3218 = _3511 + _3231;
                            if (_3236 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3236;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3219;
                        frontier_phi_67_pred_1 = _3220;
                        frontier_phi_67_pred_2 = _3221;
                        frontier_phi_67_pred_3 = _3218;
                        frontier_phi_67_pred_4 = _3217;
                        frontier_phi_67_pred_5 = _3216;
                    }
                    _2884 = frontier_phi_67_pred;
                    _2886 = frontier_phi_67_pred_1;
                    _2888 = frontier_phi_67_pred_2;
                    _2882 = frontier_phi_67_pred_3;
                    _2880 = frontier_phi_67_pred_4;
                    _2878 = frontier_phi_67_pred_5;
                    uint _3023 = _3022 + 1u;
                    if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3016 = _2878;
                        _3017 = _2880;
                        _3018 = _2882;
                        _3019 = _2884;
                        _3020 = _2886;
                        _3021 = _2888;
                        _3022 = _3023;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2886;
                frontier_phi_55_56_ladder_1 = _2888;
                frontier_phi_55_56_ladder_2 = _2884;
                frontier_phi_55_56_ladder_3 = _2882;
                frontier_phi_55_56_ladder_4 = _2880;
                frontier_phi_55_56_ladder_5 = _2878;
            }
            else
            {
                frontier_phi_55_56_ladder = _2772;
                frontier_phi_55_56_ladder_1 = _2774;
                frontier_phi_55_56_ladder_2 = _2770;
                frontier_phi_55_56_ladder_3 = _2768;
                frontier_phi_55_56_ladder_4 = _2766;
                frontier_phi_55_56_ladder_5 = _2764;
            }
            _2877 = frontier_phi_55_56_ladder_5;
            _2879 = frontier_phi_55_56_ladder_4;
            _2881 = frontier_phi_55_56_ladder_3;
            _2883 = frontier_phi_55_56_ladder_2;
            _2885 = frontier_phi_55_56_ladder;
            _2887 = frontier_phi_55_56_ladder_1;
        }
        float _2892 = isnan(1.0) ? _943 : (isnan(_943) ? 1.0 : min(_943, 1.0));
        _2676 = (_2892 * _2883) + _2128;
        _2678 = (_2892 * _2885) + _2130;
        _2680 = (_2892 * _2887) + _2132;
        _2682 = ((_2877 * 0.039999999105930328369140625) * _2892) + _2461;
        _2684 = ((_2879 * 0.039999999105930328369140625) * _2892) + _2463;
        _2686 = ((_2881 * 0.039999999105930328369140625) * _2892) + _2465;
    }
    else
    {
        _2676 = _2128;
        _2678 = _2130;
        _2680 = _2132;
        _2682 = _2461;
        _2684 = _2463;
        _2686 = _2465;
    }
    float _4594 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4605 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _4616 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    uint _2706 = _251 + 6u;
    float _2714 = _880 / cbSceneParam._m0[86u].x;
    float _2715 = _881 / cbSceneParam._m0[86u].y;
    vec4 _2729 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2731 = _2729.x;
    float _2732 = _2729.y;
    float _2733 = _2729.z;
    float _2734 = _2729.w;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2789 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2790 = _2789 / _814;
        float _2801 = _2790 * _865;
        float _2802 = _866 * _2790;
        float _2803 = (-0.0) - _2802;
        float _2805 = _2790 * _867;
        float _2807 = (cbSceneParam._m0[77u].w * _2803) / _2789;
        float _2808 = _2807 + cbSceneParam._m0[79u].w;
        float _2809 = cbSceneParam._m0[79u].w - _2802;
        float _2815 = sqrt(((_2801 * _2801) + (_2802 * _2802)) + (_2805 * _2805));
        float _2818 = (1.0 - (cbSceneParam._m0[77u].w / _2789)) * _2815;
        float _2823 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2825 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2978;
        if (abs((_2803 - _2807) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2978 = ((((_2808 > 0.0) ? exp2(_2823 * _2808) : (2.0 - exp2(_2825 * _2808))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2818;
        }
        else
        {
            float _2938 = 1.0 / cbSceneParam._m0[80u].x;
            float _2939 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : max(_2808, _2809));
            float _2940 = isnan(_2809) ? _2808 : (isnan(_2808) ? _2809 : min(_2808, _2809));
            float _2949 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : min(_2939, 0.0));
            float _2950 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : min(_2940, 0.0));
            _2978 = ((abs(_2815 / _2803) * cbSceneParam._m0[80u].y) * ((((_2949 - _2950) * 2.0) - ((exp2(_2823 * (isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0)))) - exp2(_2823 * (isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0))))) * _2938)) - ((exp2(_2825 * _2949) - exp2(_2825 * _2950)) * _2938))) + (_2818 * cbSceneParam._m0[80u].z);
        }
        vec4 _2980 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, 1.0), 0.0);
        float _2989 = exp2((_2978 * (-1.44269502162933349609375)) * (1.0 - _2980.w));
        float _2990 = log2(_2989);
        float _3006 = log2(_2734);
        _2827 = (exp2(_3006 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2990 * cbSceneParam._m0[78u].x)) * _2980.x) / cbSceneParam._m0[78u].x)) + _2731;
        _2829 = (exp2(_3006 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2990 * cbSceneParam._m0[78u].y)) * _2980.y) / cbSceneParam._m0[78u].y)) + _2732;
        _2831 = (exp2(_3006 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2990 * cbSceneParam._m0[78u].z)) * _2980.z) / cbSceneParam._m0[78u].z)) + _2733;
        _2833 = _2989 * _2734;
    }
    else
    {
        _2827 = _2731;
        _2829 = _2732;
        _2831 = _2733;
        _2833 = _2734;
    }
    float _2845 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2846 = _2845 == 3.0;
    float _2847 = log2(_2833);
    float _2854 = exp2(_2847 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2676 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _943))) + ((_2682 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1747)) * cbPerFrame._m0[3u].x));
    float _2855 = exp2(_2847 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2678 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _943))) + ((_2684 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1747)) * cbPerFrame._m0[3u].x));
    float _2856 = exp2(_2847 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2680 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _943))) + ((_2686 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1747)) * cbPerFrame._m0[3u].x));
    float _2865 = (_2845 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2865 * (_2846 ? _2854 : (_2854 + (cbSceneParam._m0[72u].w * _2827)));
    SV_Target.y = _2865 * (_2846 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2829)));
    SV_Target.z = _2865 * (_2846 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2831)));
    SV_Target.w = cbInstanceData._m0[_2706].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2706].w;
}


