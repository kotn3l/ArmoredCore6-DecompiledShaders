#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1405;
float _3762;
float _3763;
float _3764;
float _3765;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3774 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3785 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3796 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _410 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _410) * cbMtdParam._m0[24u].x) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3807 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _435 = (_428 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _436 = (_428 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _437 = (_428 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) + _447;
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _298) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _299) + cbTextureTilingScale._m0[14u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _539 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _543 = _539.z;
    float _552 = ((_522.z - _543) * _428) + _543;
    float _555 = ((((_522.x - _541) * _428) + _541) * 2.0) + (-1.0);
    float _556 = ((((_522.y - _542) * _428) + _542) * 2.0) + (-1.0);
    float _557 = dot(vec2(_555, _556), vec2(_555, _556));
    float _3818 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _562 = sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))));
    float _565 = _555 + ((((_495.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _566 = _556 + ((((_495.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _569 = fma(_562, _248, fma(_566, _255, _565 * _241));
    float _572 = fma(_562, _249, fma(_566, _256, _565 * _242));
    float _575 = fma(_562, _250, fma(_566, _257, _565 * _243));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _623 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _625 = _623.x;
    float _626 = 1.0 - _625;
    float _630 = ((_625 - _626) * cbMtdParam._m0[24u].z) + _626;
    float _632 = (cbMtdParam._m0[19u].x + dot(vec4(_579 * _569, _579 * _572, _579 * _575, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_630 * cbMtdParam._m0[21u].z);
    float _3829 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _635 = (-0.0) - cbMtdParam._m0[24u].y;
    float _637 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _637 : (isnan(_637) ? 1.0 : min(_637, 1.0));
    float _645 = _633 - ((_633 * TEXCOORD_8.x) * _638);
    float _646 = _633 - ((_633 * TEXCOORD_8.y) * _638);
    float _647 = _633 - ((_633 * TEXCOORD_8.z) * _638);
    float _654 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _658 = ((isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : min(_654, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _666 = (_658 - (((_630 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _658))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3860 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _671 = ((_645 * ((_475.x * cbMtdParam._m0[18u].x) - _454)) * _667) + _454;
    float _672 = ((_646 * ((_475.y * cbMtdParam._m0[18u].y) - _455)) * _667) + _455;
    float _673 = ((_647 * ((_475.z * cbMtdParam._m0[18u].z) - _456)) * _667) + _456;
    vec4 _685 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _687 = _685.x;
    float _688 = 1.0 - _687;
    float _713 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_687 - _688) * cbMtdParam._m0[24u].w) + _688) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3871 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _714 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _722 = ((((cbMtdParam._m0[10u].x - _671) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _714) + _671;
    float _723 = ((((cbMtdParam._m0[10u].y - _672) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _714) + _672;
    float _724 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _673)) * _714) + _673;
    float _729 = (((_495.z - _552) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _552;
    vec4 _743 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _750 = (_743.x * 2.0) + (-1.0);
    float _751 = (_743.y * 2.0) + (-1.0);
    float _752 = dot(vec2(_750, _751), vec2(_750, _751));
    float _3882 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _761 = (((_743.z - _729) * _645) * _667) + _729;
    float _764 = ((cbMtdParam._m0[23u].y - _761) * _714) + _761;
    vec4 _783 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _789 = (_783.x * 2.0) + (-1.0);
    float _790 = (_783.y * 2.0) + (-1.0);
    float _791 = dot(vec2(_789, _790), vec2(_789, _790));
    float _3893 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _811 = (((cbMtdParam._m0[21u].x * _565) + ((_750 - _565) * _645)) * _667) + _565;
    float _812 = (((cbMtdParam._m0[21u].x * _566) + ((_751 - _566) * _646)) * _667) + _566;
    float _813 = (((sqrt(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) - _562) * _647) * _667) + _562;
    float _824 = (((_789 - _811) + (_811 * cbMtdParam._m0[22u].z)) * _714) + _811;
    float _825 = (((_790 - _812) + (_812 * cbMtdParam._m0[22u].z)) * _714) + _812;
    float _826 = ((sqrt(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) - _813) * _714) + _813;
    float _830 = cbMtdParam._m0[22u].x + _595.w;
    float _833 = fma(_826, _248, fma(_825, _255, _824 * _241));
    float _836 = fma(_826, _249, fma(_825, _256, _824 * _242));
    float _839 = fma(_826, _250, fma(_825, _257, _824 * _243));
    float _843 = inversesqrt(dot(vec3(_833, _836, _839), vec3(_833, _836, _839)));
    float _844 = _843 * _833;
    float _845 = _843 * _836;
    float _846 = _843 * _839;
    float _3904 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _847 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _3926 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _3937 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _3948 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _865 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _916 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _906);
    float _917 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _906);
    float _918 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _906);
    float _922 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
    float _923 = _916 * _922;
    float _924 = _917 * _922;
    float _925 = _918 * _922;
    vec4 _930 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _932 = _930.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1086 = sqrt(((_916 * _916) + (_917 * _917)) + (_918 * _918));
        float _1092 = (cbMatDynParam._m0[5u].x * _1086) + cbMatDynParam._m0[5u].y;
        float _3959 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1097 = (cbMatDynParam._m0[5u].z * _1086) + cbMatDynParam._m0[5u].w;
        float _3970 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) - _1093)) + _1093) < ((_932 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _943 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _944 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _962 = fma(_846, cbSceneParam._m0[5u].z, fma(_845, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _844));
    float _965 = fma(_846, cbSceneParam._m0[6u].z, fma(_845, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _844));
    float _968 = fma(_846, cbSceneParam._m0[7u].z, fma(_845, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _844));
    uint _981 = _279 + 9u;
    uint _982 = _981 + uint(cbMatDynParam._m0[0u].w);
    float _988 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_982].x;
    float _989 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * cbInstanceData._m0[_982].y;
    float _990 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * cbInstanceData._m0[_982].z;
    float _3981 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _991 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _992 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _993 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    vec4 _1002 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _943, cbSceneParam._m0[86u].y * _944));
    float _1006 = ((isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * TEXCOORD_5.w) * _1002.x;
    float _1007 = dot(vec3(_844, _845, _846), vec3(_923, _924, _925));
    float _1010 = _1007 * 2.0;
    float _1014 = (_1010 * _844) - _923;
    float _1015 = (_1010 * _845) - _924;
    float _1016 = (_1010 * _846) - _925;
    float _1020 = abs(dot(vec3(_923, _924, _925), vec3(_844, _845, _846)));
    float _4014 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1022 = sqrt(_847);
    float _1035 = exp2((_1022 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1022 * 3.0));
    float _1067 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1404;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1129 = fma(_1075, cbModelParam._m0[26u].z, fma(_1071, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1067));
        float _1133 = fma(_1075, cbModelParam._m0[27u].z, fma(_1071, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1067));
        float _1137 = fma(_1075, cbModelParam._m0[28u].z, fma(_1071, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1067));
        float _1162 = _1067 + _844;
        float _1163 = _1071 + _845;
        float _1164 = _1075 + _846;
        float _1174 = fma(_1164, cbModelParam._m0[26u].z, fma(_1163, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1162)) - _1129;
        float _1175 = fma(_1164, cbModelParam._m0[27u].z, fma(_1163, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1162)) - _1133;
        float _1176 = fma(_1164, cbModelParam._m0[28u].z, fma(_1163, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1162)) - _1137;
        float _1180 = inversesqrt(dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176)));
        float _1193 = ((_1180 * _1174) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1129 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1180 * _1175) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1133 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1180 * _1176) / cbModelParam._m0[34u].z) + ((((((_1137 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1193, _1194, _1195), 0.0);
        float _1232 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1198.x + (-0.5));
        float _1234 = _1232 * (_1198.y + (-0.5));
        float _1235 = _1232 * (_1198.z + (-0.5));
        float _1242 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1205.x + (-0.5));
        float _1244 = _1242 * (_1205.y + (-0.5));
        float _1245 = _1242 * (_1205.z + (-0.5));
        float _1252 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1212.x + (-0.5));
        float _1254 = _1252 * (_1212.y + (-0.5));
        float _1255 = _1252 * (_1212.z + (-0.5));
        float _1262 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1219.x + (-0.5));
        float _1264 = _1262 * (_1219.y + (-0.5));
        float _1265 = _1262 * (_1219.z + (-0.5));
        float _1266 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = _1233 * 0.5;
        float _1270 = _1243 * 0.5;
        float _1271 = _1253 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1286 = (dot(vec3(_844, _845, _846), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1296 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1266 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4062 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1298 + 1.0))) + _1303) * _1266;
        float _1313 = _1234 * 0.5;
        float _1314 = _1244 * 0.5;
        float _1315 = _1254 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_844, _845, _846), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4095 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1340 + 1.0))) + _1345) * _1267;
        float _1355 = _1235 * 0.5;
        float _1356 = _1245 * 0.5;
        float _1357 = _1255 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_844, _845, _846), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _4128 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1382 + 1.0))) + _1387) * _1268;
        _1404 = _1235;
        _1406 = _1234;
        _1407 = _1233;
        _1408 = _1245;
        _1409 = _1244;
        _1410 = _1243;
        _1411 = _1255;
        _1412 = _1254;
        _1413 = _1253;
        _1414 = _1268;
        _1415 = _1267;
        _1416 = _1266;
        _1417 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
    }
    else
    {
        _1404 = _1405;
        _1406 = _1405;
        _1407 = _1405;
        _1408 = _1405;
        _1409 = _1405;
        _1410 = _1405;
        _1411 = _1405;
        _1412 = _1405;
        _1413 = _1405;
        _1414 = _1405;
        _1415 = _1405;
        _1416 = _1405;
        _1417 = 0.0;
        _1418 = 0.0;
        _1419 = 0.0;
    }
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1447 = fma(_1075, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1067));
        float _1451 = fma(_1075, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1067));
        float _1455 = fma(_1075, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1067));
        float _1478 = _1067 + _844;
        float _1479 = _1071 + _845;
        float _1480 = _1075 + _846;
        float _1490 = fma(_1480, cbModelParam._m0[30u].z, fma(_1479, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1478)) - _1447;
        float _1491 = fma(_1480, cbModelParam._m0[31u].z, fma(_1479, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1478)) - _1451;
        float _1492 = fma(_1480, cbModelParam._m0[32u].z, fma(_1479, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1478)) - _1455;
        float _1496 = inversesqrt(dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492)));
        float _1509 = ((_1496 * _1490) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1447 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1510 = ((_1496 * _1491) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1451 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1496 * _1492) / cbModelParam._m0[35u].z) + ((((((_1455 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        float _1546 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1513.x + (-0.5));
        float _1548 = _1546 * (_1513.y + (-0.5));
        float _1549 = _1546 * (_1513.z + (-0.5));
        float _1556 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1520.x + (-0.5));
        float _1558 = _1556 * (_1520.y + (-0.5));
        float _1559 = _1556 * (_1520.z + (-0.5));
        float _1566 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1527.x + (-0.5));
        float _1568 = _1566 * (_1527.y + (-0.5));
        float _1569 = _1566 * (_1527.z + (-0.5));
        float _1576 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1534.x + (-0.5));
        float _1578 = _1576 * (_1534.y + (-0.5));
        float _1579 = _1576 * (_1534.z + (-0.5));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = _1547 * 0.5;
        float _1584 = _1557 * 0.5;
        float _1585 = _1567 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_844, _845, _846), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4191 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1610 + 1.0))) + _1615) * _1580;
        float _1625 = _1548 * 0.5;
        float _1626 = _1558 * 0.5;
        float _1627 = _1568 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_844, _845, _846), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4224 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1652 + 1.0))) + _1657) * _1581;
        float _1667 = _1549 * 0.5;
        float _1668 = _1559 * 0.5;
        float _1669 = _1569 * 0.5;
        float _1670 = dot(vec3(_1667, _1668, _1669), vec3(_1667, _1668, _1669));
        float _1675 = (_1670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1670);
        float _1683 = (dot(vec3(_844, _845, _846), vec3(_1675 * _1667, _1675 * _1668, _1675 * _1669)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1692 = sqrt(((_1668 * _1668) + (_1667 * _1667)) + (_1669 * _1669)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1694 = _1693 * 2.0;
        float _1698 = (1.0 - _1693) / (_1693 + 1.0);
        float _4257 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1708 = ((((1.0 - _1699) * (_1694 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1694 + 1.0))) + _1699) * _1582;
        _1716 = _1549;
        _1717 = _1548;
        _1718 = _1547;
        _1719 = _1559;
        _1720 = _1558;
        _1721 = _1557;
        _1722 = _1569;
        _1723 = _1568;
        _1724 = _1567;
        _1725 = _1582;
        _1726 = _1581;
        _1727 = _1580;
        _1728 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)));
    }
    else
    {
        _1716 = _1405;
        _1717 = _1405;
        _1718 = _1405;
        _1719 = _1405;
        _1720 = _1405;
        _1721 = _1405;
        _1722 = _1405;
        _1723 = _1405;
        _1724 = _1405;
        _1725 = _1405;
        _1726 = _1405;
        _1727 = _1405;
        _1728 = 0.0;
        _1729 = 0.0;
        _1730 = 0.0;
    }
    float _1740 = (cbModelParam._m0[1u].x * (_1728 - _1417)) + _1417;
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1418)) + _1418;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1419)) + _1419;
    float _1763 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1741, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1741, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1741, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1740));
    float _1784 = _1014 * 0.5;
    float _1785 = _1015 * 0.5;
    float _1786 = _1016 * 0.5;
    float _1787 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1790 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1793 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1716, _1719, _1722, _1725));
    float _1827;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1800 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1404, _1408, _1411, _1414));
        float _1804 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1406, _1409, _1412, _1415));
        float _1808 = dot(vec4(_1784, _1785, _1786, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1815 = dot(vec4(cbModelParam._m0[39u]), vec4(_1784, _1785, _1786, 1.0));
        _1827 = dot(vec3(isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1815) ? 0.0 : (isnan(0.0) ? _1815 : max(0.0, _1815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1827 = 1.0;
    }
    float _1838;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1829 = dot(vec4(cbModelParam._m0[40u]), vec4(_1784, _1785, _1786, 1.0));
        _1838 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1838 = 1.0;
    }
    float _1842 = (_1838 * cbModelParam._m0[1u].x) + (_1827 * (1.0 - cbModelParam._m0[1u].x));
    float _1852 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _847);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1852 : min(cbModelParam._m0[25u].z, _1852));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1900 = fma(_1075, cbModelParam._m0[13u].z, fma(_1071, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067)) + cbModelParam._m0[13u].w;
        float _1904 = fma(_1075, cbModelParam._m0[14u].z, fma(_1071, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067)) + cbModelParam._m0[14u].w;
        float _1908 = fma(_1075, cbModelParam._m0[15u].z, fma(_1071, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067)) + cbModelParam._m0[15u].w;
        float _1911 = fma(_1016, cbModelParam._m0[13u].z, fma(_1015, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014));
        float _1914 = fma(_1016, cbModelParam._m0[14u].z, fma(_1015, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014));
        float _1917 = fma(_1016, cbModelParam._m0[15u].z, fma(_1015, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014));
        float _1945;
        if (_1911 > 0.0)
        {
            _1945 = abs((1.0 - _1900) / _1911);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1900 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1945 = frontier_phi_17_15_ladder;
        }
        float _2145;
        if (_1914 > 0.0)
        {
            _2145 = abs((1.0 - _1904) / _1914);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1904 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2145 = frontier_phi_26_22_ladder;
        }
        float _2388;
        if (_1917 > 0.0)
        {
            _2388 = abs((1.0 - _1908) / _1917);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1908 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2388 = frontier_phi_38_33_ladder;
        }
        float _2390 = isnan(_2145) ? _1945 : (isnan(_1945) ? _2145 : min(_1945, _2145));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1911) + _1900;
        float _2396 = (_2391 * _1914) + _1904;
        float _2397 = (_2391 * _1917) + _1908;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2400 = (-1.0) - _2398;
        float _2402 = _2398 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2397 > _2402) || ((_2397 < _2400) || ((_2396 > _2402) || ((_2396 < _2400) || ((_2395 < _2400) || (_2395 > _2402))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2521 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2397, cbModelParam._m0[9u].z, fma(_2396, cbModelParam._m0[9u].y, _2395 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2397, cbModelParam._m0[10u].z, fma(_2396, cbModelParam._m0[10u].y, _2395 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2397, cbModelParam._m0[11u].z, fma(_2396, cbModelParam._m0[11u].y, _2395 * cbModelParam._m0[11u].x))), _1853);
            frontier_phi_16_38_ladder = _2521.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2521.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2521.x * cbModelParam._m0[1u].y;
        }
        _1933 = frontier_phi_16_38_ladder_2;
        _1935 = frontier_phi_16_38_ladder_1;
        _1937 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1921 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1014, _1015, _1016), _1853);
        _1933 = _1921.x * cbModelParam._m0[1u].y;
        _1935 = _1921.y * cbModelParam._m0[1u].y;
        _1937 = _1921.z * cbModelParam._m0[1u].y;
    }
    float _1941 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _847);
    float _1942 = isnan(_1941) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1941 : min(cbModelParam._m0[25u].w, _1941));
    float _2031;
    float _2033;
    float _2035;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1995 = fma(_1075, cbModelParam._m0[21u].z, fma(_1071, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067)) + cbModelParam._m0[21u].w;
        float _1999 = fma(_1075, cbModelParam._m0[22u].z, fma(_1071, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067)) + cbModelParam._m0[22u].w;
        float _2003 = fma(_1075, cbModelParam._m0[23u].z, fma(_1071, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067)) + cbModelParam._m0[23u].w;
        float _2006 = fma(_1016, cbModelParam._m0[21u].z, fma(_1015, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014));
        float _2009 = fma(_1016, cbModelParam._m0[22u].z, fma(_1015, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014));
        float _2012 = fma(_1016, cbModelParam._m0[23u].z, fma(_1015, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014));
        float _2150;
        if (_2006 > 0.0)
        {
            _2150 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2150 = frontier_phi_28_24_ladder;
        }
        float _2415;
        if (_2009 > 0.0)
        {
            _2415 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2415 = frontier_phi_40_35_ladder;
        }
        float _2620;
        if (_2012 > 0.0)
        {
            _2620 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2620 = frontier_phi_49_46_ladder;
        }
        float _2622 = isnan(_2415) ? _2150 : (isnan(_2150) ? _2415 : min(_2150, _2415));
        float _2623 = isnan(_2620) ? _2622 : (isnan(_2622) ? _2620 : min(_2622, _2620));
        float _2627 = (_2623 * _2006) + _1995;
        float _2628 = (_2623 * _2009) + _1999;
        float _2629 = (_2623 * _2012) + _2003;
        float _2630 = _2623 * 9.9999997473787516355514526367188e-05;
        float _2631 = (-1.0) - _2630;
        float _2633 = _2630 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2629 > _2633) || ((_2629 < _2631) || ((_2628 > _2633) || ((_2628 < _2631) || ((_2627 < _2631) || (_2627 > _2633))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2828 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2629, cbModelParam._m0[17u].z, fma(_2628, cbModelParam._m0[17u].y, _2627 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2629, cbModelParam._m0[18u].z, fma(_2628, cbModelParam._m0[18u].y, _2627 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2629, cbModelParam._m0[19u].z, fma(_2628, cbModelParam._m0[19u].y, _2627 * cbModelParam._m0[19u].x))), _1942);
            frontier_phi_25_49_ladder = _2828.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2828.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2828.x * cbModelParam._m0[1u].z;
        }
        _2031 = frontier_phi_25_49_ladder_2;
        _2033 = frontier_phi_25_49_ladder_1;
        _2035 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1014, _1015, _1016), _1942);
        _2031 = _2015.x * cbModelParam._m0[1u].z;
        _2033 = _2015.y * cbModelParam._m0[1u].z;
        _2035 = _2015.z * cbModelParam._m0[1u].z;
    }
    float _2047 = ((((1.0 - _1035) * ((_1022 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1035 * _1022)) * _1006;
    float _2048 = _2047 * ((cbModelParam._m0[1u].w * (_2031 - _1933)) + _1933);
    float _2049 = _2047 * ((cbModelParam._m0[1u].w * (_2033 - _1935)) + _1935);
    float _2050 = _2047 * ((cbModelParam._m0[1u].w * (_2035 - _1937)) + _1937);
    float _2053 = fma(_2050, cbSceneParam._m0[89u].z, fma(_2049, cbSceneParam._m0[89u].y, _2048 * cbSceneParam._m0[89u].x));
    float _2056 = fma(_2050, cbSceneParam._m0[90u].z, fma(_2049, cbSceneParam._m0[90u].y, _2048 * cbSceneParam._m0[90u].x));
    float _2059 = fma(_2050, cbSceneParam._m0[91u].z, fma(_2049, cbSceneParam._m0[91u].y, _2048 * cbSceneParam._m0[91u].x));
    uvec4 _2069 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2071 = _2069.x * 14u;
    uint _2072 = _2071 + 13u;
    float _2079 = _1006 + (-1.0);
    float _2084 = (cbLight._m0[_2072].x * _2079) + 1.0;
    float _2085 = (cbLight._m0[_2072].y * _2079) + 1.0;
    float _2086 = (cbLight._m0[_2072].z * _2079) + 1.0;
    float _2087 = (cbLight._m0[_2072].w * _2079) + 1.0;
    uint _2088 = _2071 + 5u;
    float _2094 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
    uint _2098 = _2071 + 4u;
    float _2104 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
    uint _2108 = _2071 | 1u;
    float _2119 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_844, _845, _846));
    float _2122 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_844, _845, _846));
    float _4393 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _4404 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2127 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * 0.3183098733425140380859375;
    float _2129 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * 0.3183098733425140380859375;
    float _2136 = ((cbLight._m0[_2088].x * _2094) * _2129) + ((cbLight._m0[_2098].x * _2104) * _2127);
    float _2137 = ((_2094 * cbLight._m0[_2088].y) * _2129) + ((_2104 * cbLight._m0[_2098].y) * _2127);
    float _2138 = ((_2094 * cbLight._m0[_2088].z) * _2129) + ((_2104 * cbLight._m0[_2098].z) * _2127);
    uvec4 _2142 = floatBitsToUint(cbLight._m0[_2071 + 12u]);
    bool _2144 = _2142.x == 0u;
    float _2155;
    float _2157;
    float _2159;
    if (_2144)
    {
        _2155 = _2136;
        _2157 = _2137;
        _2159 = _2138;
    }
    else
    {
        uint _2163 = _2071 + 6u;
        float _2179 = (dot(vec3(cbLight._m0[_2071 + 2u].xyz), vec3(_844, _845, _846)) * 0.5) + 0.5;
        float _2180 = _2179 * _2179;
        float _4415 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2181 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2182 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2155 = (((cbLight._m0[_2163].x * 0.3183098733425140380859375) * _2181) * _2182) + _2136;
        _2157 = (((cbLight._m0[_2163].y * 0.3183098733425140380859375) * _2181) * _2182) + _2137;
        _2159 = (((cbLight._m0[_2163].z * 0.3183098733425140380859375) * _2181) * _2182) + _2138;
    }
    bool _2162 = _2142.y == 0u;
    float _2200;
    float _2202;
    float _2204;
    if (_2162)
    {
        _2200 = _2155;
        _2202 = _2157;
        _2204 = _2159;
    }
    else
    {
        uint _2359 = _2071 + 7u;
        float _2375 = (dot(vec3(cbLight._m0[_2071 + 3u].xyz), vec3(_844, _845, _846)) * 0.5) + 0.5;
        float _2376 = _2375 * _2375;
        float _4431 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2377 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2378 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2200 = (((cbLight._m0[_2359].x * 0.3183098733425140380859375) * _2377) * _2378) + _2155;
        _2202 = (((cbLight._m0[_2359].y * 0.3183098733425140380859375) * _2377) * _2378) + _2157;
        _2204 = (((cbLight._m0[_2359].z * 0.3183098733425140380859375) * _2377) * _2378) + _2159;
    }
    uint _2207 = _2071 + 8u;
    float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2071].w)) * _847) * 0.949999988079071044921875);
    float _2221 = _2220 * _2220;
    float _2222 = cbLight._m0[_2071].x + _923;
    float _2223 = cbLight._m0[_2071].y + _924;
    float _2224 = cbLight._m0[_2071].z + _925;
    float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
    float _2229 = _2228 * _2222;
    float _2230 = _2228 * _2223;
    float _2231 = _2228 * _2224;
    float _2232 = dot(vec3(_844, _845, _846), vec3(cbLight._m0[_2071].xyz));
    float _4447 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _4458 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _2236 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
    float _2237 = dot(vec3(_844, _845, _846), vec3(_2229, _2230, _2231));
    float _4469 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2240 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2241 = dot(vec3(cbLight._m0[_2071].xyz), vec3(_2229, _2230, _2231));
    float _4480 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2245 = _2221 * _2221;
    float _2249 = ((_2240 * _2240) * (_2245 + (-1.0))) + 1.0;
    float _2260 = (exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2261 = 1.0 - _2221;
    float _2272 = (0.5 / (((_2236 * ((_2235 * _2261) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2236 * _2261) + _2221) * _2235))) * _2235;
    float _4491 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2245 / ((_2249 * _2249) * 3.141590118408203125));
    uint _2285 = _2071 + 9u;
    float _2296 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _847) * 0.949999988079071044921875);
    float _2297 = _2296 * _2296;
    float _2298 = cbLight._m0[_2108].x + _923;
    float _2299 = cbLight._m0[_2108].y + _924;
    float _2300 = cbLight._m0[_2108].z + _925;
    float _2304 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
    float _2305 = _2304 * _2298;
    float _2306 = _2304 * _2299;
    float _2307 = _2304 * _2300;
    float _2308 = dot(vec3(_844, _845, _846), vec3(cbLight._m0[_2108].xyz));
    float _4502 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2311 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
    float _2312 = dot(vec3(_844, _845, _846), vec3(_2305, _2306, _2307));
    float _4513 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2305, _2306, _2307));
    float _4524 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2297 * _2297;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2333 = (exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2334 = 1.0 - _2297;
    float _2344 = (0.5 / (((_2236 * ((_2311 * _2334) + _2297)) + 9.9999999392252902907785028219223e-09) + (((_2236 * _2334) + _2297) * _2311))) * _2311;
    float _4535 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2346 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    float _2356 = (((_2333 * cbLight._m0[_2285].x) * _2346) * _2094) + (((_2260 * cbLight._m0[_2207].x) * _2274) * _2104);
    float _2357 = (((_2333 * cbLight._m0[_2285].y) * _2346) * _2094) + (((_2260 * cbLight._m0[_2207].y) * _2274) * _2104);
    float _2358 = (((_2333 * cbLight._m0[_2285].z) * _2346) * _2094) + (((_2260 * cbLight._m0[_2207].z) * _2274) * _2104);
    float _2420;
    float _2422;
    float _2424;
    if (_2144)
    {
        _2420 = _2356;
        _2422 = _2357;
        _2424 = _2358;
    }
    else
    {
        uint _2426 = _2071 + 2u;
        uint _2430 = _2071 + 10u;
        float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2426].w)) * _847) * 0.949999988079071044921875);
        float _2445 = _2444 * _2444;
        float _2446 = cbLight._m0[_2426].x + _923;
        float _2447 = cbLight._m0[_2426].y + _924;
        float _2448 = cbLight._m0[_2426].z + _925;
        float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
        float _2453 = _2452 * _2446;
        float _2454 = _2452 * _2447;
        float _2455 = _2452 * _2448;
        float _2456 = dot(vec3(_844, _845, _846), vec3(cbLight._m0[_2426].xyz));
        float _4546 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2460 = dot(vec3(_844, _845, _846), vec3(_2453, _2454, _2455));
        float _4557 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2463 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2464 = dot(vec3(cbLight._m0[_2426].xyz), vec3(_2453, _2454, _2455));
        float _4568 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2468 = _2445 * _2445;
        float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
        float _2481 = (exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2482 = 1.0 - _2445;
        float _2492 = (0.5 / (((_2236 * ((_2459 * _2482) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2236 * _2482) + _2445) * _2459))) * _2459;
        float _4579 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2494 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
        float _2495 = isnan(1.0) ? _2086 : (isnan(_2086) ? 1.0 : min(_2086, 1.0));
        _2420 = (((_2481 * cbLight._m0[_2430].x) * _2494) * _2495) + _2356;
        _2422 = (((_2481 * cbLight._m0[_2430].y) * _2494) * _2495) + _2357;
        _2424 = (((_2481 * cbLight._m0[_2430].z) * _2494) * _2495) + _2358;
    }
    float _2530;
    float _2532;
    float _2534;
    if (_2162)
    {
        _2530 = _2420;
        _2532 = _2422;
        _2534 = _2424;
    }
    else
    {
        uint _2541 = _2071 + 3u;
        uint _2545 = _2071 + 11u;
        float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2541].w)) * _847) * 0.949999988079071044921875);
        float _2560 = _2559 * _2559;
        float _2561 = cbLight._m0[_2541].x + _923;
        float _2562 = cbLight._m0[_2541].y + _924;
        float _2563 = cbLight._m0[_2541].z + _925;
        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
        float _2568 = _2567 * _2561;
        float _2569 = _2567 * _2562;
        float _2570 = _2567 * _2563;
        float _2571 = dot(vec3(_844, _845, _846), vec3(cbLight._m0[_2541].xyz));
        float _4595 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2575 = dot(vec3(_844, _845, _846), vec3(_2568, _2569, _2570));
        float _4606 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2579 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_2568, _2569, _2570));
        float _4617 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2583 = _2560 * _2560;
        float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
        float _2596 = (exp2(log2(1.0 - (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2597 = 1.0 - _2560;
        float _2607 = (0.5 / (((_2236 * ((_2574 * _2597) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2236 * _2597) + _2560) * _2574))) * _2574;
        float _4628 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2609 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
        float _2610 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
        _2530 = (((_2596 * cbLight._m0[_2545].x) * _2609) * _2610) + _2420;
        _2532 = (((_2596 * cbLight._m0[_2545].y) * _2609) * _2610) + _2422;
        _2534 = (((_2596 * cbLight._m0[_2545].z) * _2609) * _2610) + _2424;
    }
    float _2745;
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    if (_2069.y == 0u)
    {
        float _2685 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2685;
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2685;
        float _2688 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2685;
        uvec4 _2700 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2701 = _2700.x;
        uint _2712 = uint((float(_2700.y) * floor(float(uint(cbSceneParam._m0[85u].y * _944) / _2701))) + floor(float(uint(cbSceneParam._m0[85u].x * _943) / _2701)));
        float _2722 = (log2(_2688 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2723 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        uint _2726 = uint(isnan(14.0) ? _2723 : (isnan(_2723) ? 14.0 : min(_2723, 14.0)));
        uvec4 _2731 = texelFetch(g_lightClusterGridBuffer, int(((_2726 << 2u) + (_2712 << 6u)) >> 2u));
        uint _2732 = _2731.x;
        uint _2733 = _2700.z;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        if (((((1u << ((_2733 >> 4u) & 15u)) + 4294967295u) & _2732) == 0u) || ((_2733 & 240u) == 0u))
        {
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
        }
        else
        {
            float _2834;
            float _2836;
            float _2838;
            float _2840;
            float _2842;
            float _2844;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            float _2990 = 0.0;
            uint _2991 = 0u;
            uint _3000;
            bool _3001;
            for (;;)
            {
                _3000 = texelFetch(g_lightClassification, int((((_2726 << 5u) + (_2712 << 9u)) + (_2991 << 2u)) >> 2u)).x;
                _3001 = _3000 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3001)
                {
                    frontier_phi_66_pred = _2985;
                    frontier_phi_66_pred_1 = _2990;
                    frontier_phi_66_pred_2 = _2989;
                    frontier_phi_66_pred_3 = _2988;
                    frontier_phi_66_pred_4 = _2987;
                    frontier_phi_66_pred_5 = _2986;
                }
                else
                {
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    uint _3136;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2990;
                    _3136 = _3000;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    for (;;)
                    {
                        uint _3140 = uint(findLSB(_3136)) + (_2991 << 5u);
                        uint _3137 = (_3136 + 4294967295u) & _3136;
                        uint _3142 = _3140 * 48u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3142)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3142 + 3u)).x));
                        uint _3162 = (_3140 * 48u) + 4u;
                        vec4 _3175 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 3u)).x));
                        uint _3181 = (_3140 * 48u) + 8u;
                        vec3 _3192 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x));
                        float _3196 = _3156.x - _2686;
                        float _3197 = _3156.y - _2687;
                        float _3198 = _3156.z - _2688;
                        float _3199 = dot(vec3(_3196, _3197, _3198), vec3(_3196, _3197, _3198));
                        float _3202 = inversesqrt(_3199);
                        float _3203 = _3202 * _3196;
                        float _3204 = _3202 * _3197;
                        float _3205 = _3202 * _3198;
                        float _3206 = dot(vec3(_962, _965, _968), vec3(_3203, _3204, _3205));
                        float _3211 = 1.0 - (_3199 * _3156.w);
                        float _4654 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3212 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3213 = sqrt(_3199) * _3175.w;
                        float _3216 = 1.39999997615814208984375 / (_3213 + 1.39999997615814208984375);
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3206) + _3217;
                        float _3223 = _3213 * _3213;
                        float _3227 = ((isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0))) * _3212) / ((_3223 * 0.699999988079071044921875) + 1.0);
                        float _3231 = (-0.0) - _2686;
                        float _3232 = (-0.0) - _2687;
                        float _3233 = (-0.0) - _2688;
                        float _3237 = inversesqrt(dot(vec3(_3231, _3232, _3233), vec3(_3231, _3232, _3233)));
                        float _3238 = _3237 * _3231;
                        float _3239 = _3237 * _3232;
                        float _3240 = _3237 * _3233;
                        float _3248 = exp2(log2(1.0 / ((_3223 * 3.5) + 5.0)) * 0.25);
                        float _3249 = 1.0 - _1022;
                        float _3256 = sqrt(1.0 - ((1.0 - (_3249 * _3249)) * (1.0 - (_3248 * _3248))));
                        float _3257 = _3256 * _3256;
                        float _3258 = _3257 * _3257;
                        float _3259 = _3238 + _3203;
                        float _3260 = _3239 + _3204;
                        float _3261 = _3240 + _3205;
                        float _3265 = inversesqrt(dot(vec3(_3259, _3260, _3261), vec3(_3259, _3260, _3261)));
                        float _3269 = dot(vec3(_962, _965, _968), vec3(_3238, _3239, _3240));
                        float _4670 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3272 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3273 = dot(vec3(_962, _965, _968), vec3(_3265 * _3259, _3265 * _3260, _3265 * _3261));
                        float _4681 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3276 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                        float _3280 = ((_3276 * _3276) * (_3258 + (-1.0))) + 1.0;
                        float _3281 = _3216 * _3257;
                        float _3282 = _3281 * _3281;
                        float _3285 = ((1.0 - _3282) * _3206) + _3282;
                        float _4692 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3286 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3287 = 1.0 - _3257;
                        float _3297 = (0.5 / (((_3286 * ((_3272 * _3287) + _3257)) + 9.9999999392252902907785028219223e-09) + (((_3286 * _3287) + _3257) * _3272))) * _3286;
                        float _4703 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3308 = (((_3258 * 3.1415927410125732421875) * (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0)))) / ((_3280 * _3280) * ((_3223 * 2.1991131305694580078125) + 3.141590118408203125))) * _3212;
                        _3060 = (_3227 * _3175.x) + _3133;
                        _3061 = (_3227 * _3175.y) + _3134;
                        _3062 = (_3227 * _3175.z) + _3135;
                        _3057 = (_3308 * _3192.x) + _3130;
                        _3058 = (_3308 * _3192.y) + _3131;
                        _3059 = (_3308 * _3192.z) + _3132;
                        if (_3137 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3062;
                            _3136 = _3137;
                        }
                    }
                    frontier_phi_66_pred = _3057;
                    frontier_phi_66_pred_1 = _3062;
                    frontier_phi_66_pred_2 = _3061;
                    frontier_phi_66_pred_3 = _3060;
                    frontier_phi_66_pred_4 = _3059;
                    frontier_phi_66_pred_5 = _3058;
                }
                _2834 = frontier_phi_66_pred;
                _2844 = frontier_phi_66_pred_1;
                _2842 = frontier_phi_66_pred_2;
                _2840 = frontier_phi_66_pred_3;
                _2838 = frontier_phi_66_pred_4;
                _2836 = frontier_phi_66_pred_5;
                uint _2992 = _2991 + 1u;
                if (_2992 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2985 = _2834;
                    _2986 = _2836;
                    _2987 = _2838;
                    _2988 = _2840;
                    _2989 = _2842;
                    _2990 = _2844;
                    _2991 = _2992;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
        }
        uvec4 _2847 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2848 = _2847.z;
        uint _2850 = (_2848 >> 8u) & 15u;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        if (((4294967295u << _2850) & _2732) == 0u)
        {
            _2953 = _2833;
            _2955 = _2835;
            _2957 = _2837;
            _2959 = _2839;
            _2961 = _2841;
            _2963 = _2843;
        }
        else
        {
            float _2978 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
            float _2979 = _2978 * _2686;
            float _2980 = _2978 * _2687;
            float _2981 = _2978 * _2688;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2850 < ((_2848 >> 12u) & 15u))
            {
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _2964;
                float _3113 = _2833;
                float _3114 = _2835;
                float _3115 = _2837;
                float _3116 = _2839;
                float _3117 = _2841;
                float _3118 = _2843;
                uint _3119 = _2850;
                uint _3128;
                bool _3129;
                for (;;)
                {
                    _3128 = texelFetch(g_lightClassification, int((((_2726 << 5u) + (_2712 << 9u)) + (_3119 << 2u)) >> 2u)).x;
                    _3129 = _3128 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3129)
                    {
                        frontier_phi_77_pred = _3118;
                        frontier_phi_77_pred_1 = _3117;
                        frontier_phi_77_pred_2 = _3116;
                        frontier_phi_77_pred_3 = _3115;
                        frontier_phi_77_pred_4 = _3114;
                        frontier_phi_77_pred_5 = _3113;
                    }
                    else
                    {
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3335 = _3113;
                        float _3336 = _3114;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        float _3339 = _3117;
                        float _3340 = _3118;
                        uint _3341 = _3128;
                        uint _3342;
                        vec4 _3367;
                        float _3368;
                        vec4 _3383;
                        vec3 _3395;
                        vec4 _3410;
                        vec4 _3425;
                        float _3471;
                        bool _3472;
                        for (;;)
                        {
                            uint _3352 = ((_3119 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3341));
                            _3342 = (_3341 + 4294967295u) & _3341;
                            uint _3354 = _3352 * 40u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            _3368 = _3367.w;
                            uint _3370 = (_3352 * 40u) + 4u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3352 * 40u) + 8u;
                            _3395 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x));
                            uint _3397 = (_3352 * 40u) + 16u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3352 * 40u) + 20u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3352 * 40u) + 24u;
                            vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3446 = (_3352 * 40u) + 28u;
                            vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3471 = fma(_2688, _3459.z, fma(_2687, _3459.y, _3459.x * _2686)) + _3459.w;
                            _3472 = !((fma(_2688, _3440.z, fma(_2687, _3440.y, _3440.x * _2686)) + _3440.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3472)
                            {
                                float _3499 = _3367.x - _2686;
                                float _3500 = _3367.y - _2687;
                                float _3501 = _3367.z - _2688;
                                float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                                float _3505 = inversesqrt(_3502);
                                float _3506 = _3505 * _3499;
                                float _3507 = _3505 * _3500;
                                float _3508 = _3505 * _3501;
                                float _3512 = 1.0 - (_3502 / (_3368 * _3368));
                                float _4714 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3517 = sqrt(_3502) * _3383.w;
                                float _3519 = 1.39999997615814208984375 / (_3517 + 1.39999997615814208984375);
                                float _3520 = _3519 * _3519;
                                float _3523 = ((1.0 - _3520) * dot(vec3(_3506, _3507, _3508), vec3(_962, _965, _968))) + _3520;
                                float _3526 = _3517 * _3517;
                                float _3530 = (fma(_2688, _3410.z, fma(_2687, _3410.y, _3410.x * _2686)) + _3410.w) / _3471;
                                float _3531 = (fma(_2688, _3425.z, fma(_2687, _3425.y, _3425.x * _2686)) + _3425.w) / _3471;
                                float _3535 = 1.0 - dot(vec2(_3530, _3531), vec2(_3530, _3531));
                                float _4730 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3537 = _3536 * (((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3513) / ((_3526 * 0.699999988079071044921875) + 1.0));
                                float _3549 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                                float _3550 = 1.0 - _1022;
                                float _3557 = sqrt(1.0 - ((1.0 - (_3550 * _3550)) * (1.0 - (_3549 * _3549))));
                                float _3558 = _3557 * _3557;
                                float _3559 = _3558 * _3558;
                                float _3560 = _3506 - _2979;
                                float _3561 = _3507 - _2980;
                                float _3562 = _3508 - _2981;
                                float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                                float _3570 = dot(vec3(_962, _965, _968), vec3((-0.0) - _2979, (-0.0) - _2980, (-0.0) - _2981));
                                float _4741 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3574 = dot(vec3(_962, _965, _968), vec3(_3566 * _3560, _3566 * _3561, _3566 * _3562));
                                float _4752 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3581 = ((_3577 * _3577) * (_3559 + (-1.0))) + 1.0;
                                float _3582 = _3519 * _3558;
                                float _3583 = _3582 * _3582;
                                float _3589 = ((1.0 - _3583) * dot(vec3(_962, _965, _968), vec3(_3506, _3507, _3508))) + _3583;
                                float _4763 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                                float _3591 = 1.0 - _3558;
                                float _3601 = (0.5 / (((_3590 * ((_3573 * _3591) + _3558)) + 9.9999999392252902907785028219223e-09) + (((_3590 * _3591) + _3558) * _3573))) * _3590;
                                float _4774 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3611 = (_3536 * _3513) * (((_3559 * 3.1415927410125732421875) * (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) / ((_3581 * _3581) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3537 * _3383.y;
                                frontier_phi_83_pred_1 = _3537 * _3383.x;
                                frontier_phi_83_pred_2 = _3611 * _3395.z;
                                frontier_phi_83_pred_3 = _3611 * _3395.y;
                                frontier_phi_83_pred_4 = _3611 * _3395.x;
                                frontier_phi_83_pred_5 = _3537 * _3383.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3619 = frontier_phi_83_pred;
                            _3618 = frontier_phi_83_pred_1;
                            _3617 = frontier_phi_83_pred_2;
                            _3616 = frontier_phi_83_pred_3;
                            _3615 = frontier_phi_83_pred_4;
                            _3620 = frontier_phi_83_pred_5;
                            _3325 = _3618 + _3338;
                            _3326 = _3619 + _3339;
                            _3327 = _3620 + _3340;
                            _3322 = _3615 + _3335;
                            _3323 = _3616 + _3336;
                            _3324 = _3617 + _3337;
                            if (_3342 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3342;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3327;
                        frontier_phi_77_pred_1 = _3326;
                        frontier_phi_77_pred_2 = _3325;
                        frontier_phi_77_pred_3 = _3324;
                        frontier_phi_77_pred_4 = _3323;
                        frontier_phi_77_pred_5 = _3322;
                    }
                    _2964 = frontier_phi_77_pred;
                    _2962 = frontier_phi_77_pred_1;
                    _2960 = frontier_phi_77_pred_2;
                    _2958 = frontier_phi_77_pred_3;
                    _2956 = frontier_phi_77_pred_4;
                    _2954 = frontier_phi_77_pred_5;
                    uint _3120 = _3119 + 1u;
                    if (_3120 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3113 = _2954;
                        _3114 = _2956;
                        _3115 = _2958;
                        _3116 = _2960;
                        _3117 = _2962;
                        _3118 = _2964;
                        _3119 = _3120;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2958;
                frontier_phi_58_59_ladder_1 = _2964;
                frontier_phi_58_59_ladder_2 = _2962;
                frontier_phi_58_59_ladder_3 = _2960;
                frontier_phi_58_59_ladder_4 = _2956;
                frontier_phi_58_59_ladder_5 = _2954;
            }
            else
            {
                frontier_phi_58_59_ladder = _2837;
                frontier_phi_58_59_ladder_1 = _2843;
                frontier_phi_58_59_ladder_2 = _2841;
                frontier_phi_58_59_ladder_3 = _2839;
                frontier_phi_58_59_ladder_4 = _2835;
                frontier_phi_58_59_ladder_5 = _2833;
            }
            _2953 = frontier_phi_58_59_ladder_5;
            _2955 = frontier_phi_58_59_ladder_4;
            _2957 = frontier_phi_58_59_ladder;
            _2959 = frontier_phi_58_59_ladder_3;
            _2961 = frontier_phi_58_59_ladder_2;
            _2963 = frontier_phi_58_59_ladder_1;
        }
        float _2968 = isnan(1.0) ? _1006 : (isnan(_1006) ? 1.0 : min(_1006, 1.0));
        _2745 = (_2968 * _2959) + _2200;
        _2747 = (_2968 * _2961) + _2202;
        _2749 = (_2968 * _2963) + _2204;
        _2751 = ((_2953 * 0.039999999105930328369140625) * _2968) + _2530;
        _2753 = ((_2955 * 0.039999999105930328369140625) * _2968) + _2532;
        _2755 = ((_2957 * 0.039999999105930328369140625) * _2968) + _2534;
    }
    else
    {
        _2745 = _2200;
        _2747 = _2202;
        _2749 = _2204;
        _2751 = _2530;
        _2753 = _2532;
        _2755 = _2534;
    }
    float _4790 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _4801 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _4812 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _2772 = ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2745 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1006))) + ((_2751 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1842)) * cbPerFrame._m0[3u].x);
    float _2773 = ((isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * (_2747 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1006))) + ((_2753 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1842)) * cbPerFrame._m0[3u].x);
    float _2774 = ((isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2749 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1006))) + ((_2755 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1842)) * cbPerFrame._m0[3u].x);
    uint _2775 = _279 + 6u;
    float _2783 = _943 / cbSceneParam._m0[86u].x;
    float _2784 = _944 / cbSceneParam._m0[86u].y;
    vec4 _2798 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2783, _2784, (log2((isnan(cbSceneParam._m0[77u].w) ? _865 : (isnan(_865) ? cbSceneParam._m0[77u].w : min(_865, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2800 = _2798.x;
    float _2801 = _2798.y;
    float _2802 = _2798.z;
    float _2803 = _2798.w;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_865 > cbSceneParam._m0[78u].w)
    {
        float _2858 = isnan(_865) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _865 : min(cbSceneParam._m0[80u].w, _865));
        float _2859 = _2858 / _865;
        float _2870 = _2859 * _916;
        float _2871 = _917 * _2859;
        float _2872 = (-0.0) - _2871;
        float _2873 = _2859 * _918;
        float _2875 = (cbSceneParam._m0[77u].w * _2872) / _2858;
        float _2876 = _2875 + cbSceneParam._m0[79u].w;
        float _2877 = cbSceneParam._m0[79u].w - _2871;
        float _2883 = sqrt(((_2870 * _2870) + (_2871 * _2871)) + (_2873 * _2873));
        float _2886 = (1.0 - (cbSceneParam._m0[77u].w / _2858)) * _2883;
        float _2891 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2893 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3070;
        if (abs((_2872 - _2875) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3070 = ((((_2876 > 0.0) ? exp2(_2891 * _2876) : (2.0 - exp2(_2893 * _2876))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2886;
        }
        else
        {
            float _3014 = 1.0 / cbSceneParam._m0[80u].x;
            float _3015 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : max(_2876, _2877));
            float _3016 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : min(_2876, _2877));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            float _3026 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : min(_3016, 0.0));
            _3070 = ((abs(_2883 / _2872) * cbSceneParam._m0[80u].y) * ((((_3025 - _3026) * 2.0) - ((exp2(_2891 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0)))) - exp2(_2891 * (isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))))) * _3014)) - ((exp2(_2893 * _3025) - exp2(_2893 * _3026)) * _3014))) + (_2886 * cbSceneParam._m0[80u].z);
        }
        vec4 _3072 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2783, _2784, 1.0), 0.0);
        float _3081 = exp2((_3070 * (-1.44269502162933349609375)) * (1.0 - _3072.w));
        float _3082 = log2(_3081);
        float _3098 = log2(_2803);
        _2895 = (exp2(_3098 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].x)) * _3072.x) / cbSceneParam._m0[78u].x)) + _2800;
        _2897 = (exp2(_3098 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].y)) * _3072.y) / cbSceneParam._m0[78u].y)) + _2801;
        _2899 = (exp2(_3098 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].z)) * _3072.z) / cbSceneParam._m0[78u].z)) + _2802;
        _2901 = _3081 * _2803;
    }
    else
    {
        _2895 = _2800;
        _2897 = _2801;
        _2899 = _2802;
        _2901 = _2803;
    }
    bool _3108;
    vec4 _2911;
    vec4 _2933;
    float _2935;
    float _2939;
    float _2940;
    float _2941;
    float _2942;
    bool _2952;
    for (;;)
    {
        _2911 = cbMatDynParam._m0[0u];
        float _2913 = roundEven(_2911.y);
        bool _2914 = _2913 == 3.0;
        float _2915 = log2(_2901);
        float _2922 = exp2(_2915 * cbSceneParam._m0[78u].x) * _2772;
        float _2923 = exp2(_2915 * cbSceneParam._m0[78u].y) * _2773;
        float _2924 = exp2(_2915 * cbSceneParam._m0[78u].z) * _2774;
        float _2931 = _932 + (-0.5);
        _2933 = cbMtdParam._m0[1u];
        _2935 = _2933.y * _2931;
        float _2938 = (_2913 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2939 = _2938 * (_2914 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2895)));
        _2940 = _2938 * (_2914 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2897)));
        _2941 = _2938 * (_2914 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2899)));
        _2942 = _2931 * 0.999000012874603271484375;
        _2952 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2952)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2942) < 0.5)
            {
                _3108 = true;
                break;
            }
        }
        uint _3049 = _981 + uint(_2911.w);
        if ((cbInstanceData._m0[_3049].w < 1.0) && ((cbInstanceData._m0[_3049].w + _2942) < 0.5))
        {
            _3108 = true;
            break;
        }
        if ((_2935 + 1.0) < _2933.x)
        {
            _3108 = true;
            break;
        }
        _3108 = false;
        break;
    }
    float _3313;
    if (_3108)
    {
        discard_state = true;
        _3313 = 0.0;
    }
    else
    {
        _3313 = cbInstanceData._m0[_2775].w;
    }
    SV_Target.x = _2939;
    SV_Target.y = _2940;
    SV_Target.z = _2941;
    SV_Target.w = _3313;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2775].w;
    discard_exit();
}


