#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1251;
float _3894;
float _3895;
float _3896;
float _3897;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _370 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3906 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _452 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _465 = ((_435.z - _456) * _388) + _456;
    float _468 = ((((_435.x - _454) * _388) + _454) * 2.0) + (-1.0);
    float _469 = ((((_435.y - _455) * _388) + _455) * 2.0) + (-1.0);
    float _470 = dot(vec2(_468, _469), vec2(_468, _469));
    float _3917 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _475 = sqrt(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))));
    float _480 = _468 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_410.x * 2.0) + (-1.0)));
    float _481 = _469 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_410.y * 2.0) + (-1.0)));
    vec4 _494 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _508 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _510 = _508.x;
    float _511 = 1.0 - _510;
    float _539 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_510 - _511) * cbMtdParam._m0[24u].w) + _511) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3928 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _548 = ((((cbMtdParam._m0[10u].x - _395) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _540) + _395;
    float _549 = ((((cbMtdParam._m0[10u].y - _396) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _540) + _396;
    float _550 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _397)) * _540) + _397;
    float _555 = (((_410.z - _465) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _465;
    float _559 = ((cbMtdParam._m0[23u].y - _555) * _540) + _555;
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _580 = _578.x;
    float _581 = _578.y;
    float _587 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_241, _242, _243, 0.0));
    vec4 _602 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _272) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _273) + cbTextureTilingScale._m0[18u].w));
    float _604 = _602.x;
    float _609 = fract(_602.w + cbPerFrame._m0[22u].x);
    float _611 = (1.0 - _609) * _604;
    float _616 = ((_609 + (-1.0)) + _604) * 9.0;
    float _618 = ((_604 + (-1.0)) + _609) * 9.0;
    float _619 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _620 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _634 = (_611 * ((_602.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _619 : (isnan(_619) ? 3.0 : min(_619, 3.0))) * 3.1415927410125732421875);
    float _636 = (_611 * ((_602.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _620 : (isnan(_620) ? 3.0 : min(_620, 3.0))) * 3.1415927410125732421875);
    float _640 = inversesqrt(dot(vec3(_634, _636, 1.0), vec3(_634, _636, 1.0)));
    float _656 = (((((0.5 - _580) + ((_634 * 0.5) * _640)) * _587) + _580) * 2.0) + (-1.0);
    float _657 = (((((0.5 - _581) + ((_640 * 0.5) * _636)) * _587) + _581) * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3959 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _674 = ((((cbMtdParam._m0[22u].z * _480) - _480) + _656) * _540) + _480;
    float _675 = ((((cbMtdParam._m0[22u].z * _481) - _481) + _657) * _540) + _481;
    float _676 = (_540 * (sqrt(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) - _475)) + _475;
    float _678 = cbMtdParam._m0[22u].x + _494.w;
    float _681 = fma(_676, _241, fma(_675, _247 * TANGENT.x, (_233 * _225) * _674));
    float _684 = fma(_676, _242, fma(_675, _247 * TANGENT.y, (_233 * _226) * _674));
    float _687 = fma(_676, _243, fma(_675, _247 * TANGENT.z, (_233 * _227) * _674));
    float _691 = inversesqrt(dot(vec3(_681, _684, _687), vec3(_681, _684, _687)));
    float _692 = _691 * _681;
    float _693 = _691 * _684;
    float _694 = _691 * _687;
    float _3970 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _695 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3992 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4003 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4014 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _713 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _764 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _754);
    float _765 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _754);
    float _766 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _754);
    float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
    float _771 = _764 * _770;
    float _772 = _765 * _770;
    float _773 = _766 * _770;
    vec4 _778 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _780 = _778.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _933 = sqrt(((_764 * _764) + (_765 * _765)) + (_766 * _766));
        float _939 = (cbMatDynParam._m0[5u].x * _933) + cbMatDynParam._m0[5u].y;
        float _4025 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _944 = (cbMatDynParam._m0[5u].z * _933) + cbMatDynParam._m0[5u].w;
        float _4036 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) - _940)) + _940) < ((_780 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _791 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _792 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _810 = fma(_694, cbSceneParam._m0[5u].z, fma(_693, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _692));
    float _813 = fma(_694, cbSceneParam._m0[6u].z, fma(_693, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _692));
    float _816 = fma(_694, cbSceneParam._m0[7u].z, fma(_693, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _692));
    uint _829 = _253 + 9u;
    uint _830 = _829 + uint(cbMatDynParam._m0[0u].w);
    float _836 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0)))) * cbInstanceData._m0[_830].x;
    float _837 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) * cbInstanceData._m0[_830].y;
    float _838 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_830].z;
    float _4047 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _4058 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    vec4 _850 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _791, cbSceneParam._m0[86u].y * _792));
    float _854 = ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * TEXCOORD_5.w) * _850.x;
    float _855 = dot(vec3(_692, _693, _694), vec3(_771, _772, _773));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _692) - _771;
    float _863 = (_858 * _693) - _772;
    float _864 = (_858 * _694) - _773;
    float _868 = abs(dot(vec3(_771, _772, _773), vec3(_692, _693, _694)));
    float _4080 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = sqrt(_695);
    float _882 = exp2((_870 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1250;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _976 = fma(_922, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914));
        float _980 = fma(_922, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914));
        float _984 = fma(_922, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914));
        float _1008 = _914 + _692;
        float _1009 = _918 + _693;
        float _1010 = _922 + _694;
        float _1020 = fma(_1010, cbModelParam._m0[26u].z, fma(_1009, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008)) - _976;
        float _1021 = fma(_1010, cbModelParam._m0[27u].z, fma(_1009, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008)) - _980;
        float _1022 = fma(_1010, cbModelParam._m0[28u].z, fma(_1009, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008)) - _984;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_976 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_980 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[34u].z) + ((((((_984 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1078 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1044.x + (-0.5));
        float _1080 = _1078 * (_1044.y + (-0.5));
        float _1081 = _1078 * (_1044.z + (-0.5));
        float _1088 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1051.x + (-0.5));
        float _1090 = _1088 * (_1051.y + (-0.5));
        float _1091 = _1088 * (_1051.z + (-0.5));
        float _1098 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1058.x + (-0.5));
        float _1100 = _1098 * (_1058.y + (-0.5));
        float _1101 = _1098 * (_1058.z + (-0.5));
        float _1108 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1065.x + (-0.5));
        float _1110 = _1108 * (_1065.y + (-0.5));
        float _1111 = _1108 * (_1065.z + (-0.5));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = _1079 * 0.5;
        float _1116 = _1089 * 0.5;
        float _1117 = _1099 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1132 = (dot(vec3(_692, _693, _694), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1142 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _4128 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1144 + 1.0))) + _1149) * _1112;
        float _1159 = _1080 * 0.5;
        float _1160 = _1090 * 0.5;
        float _1161 = _1100 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_692, _693, _694), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _4161 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1186 + 1.0))) + _1191) * _1113;
        float _1201 = _1081 * 0.5;
        float _1202 = _1091 * 0.5;
        float _1203 = _1101 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_692, _693, _694), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _4194 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1228 + 1.0))) + _1233) * _1114;
        _1250 = _1081;
        _1252 = _1080;
        _1253 = _1079;
        _1254 = _1091;
        _1255 = _1090;
        _1256 = _1089;
        _1257 = _1101;
        _1258 = _1100;
        _1259 = _1099;
        _1260 = _1114;
        _1261 = _1113;
        _1262 = _1112;
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
    }
    else
    {
        _1250 = _1251;
        _1252 = _1251;
        _1253 = _1251;
        _1254 = _1251;
        _1255 = _1251;
        _1256 = _1251;
        _1257 = _1251;
        _1258 = _1251;
        _1259 = _1251;
        _1260 = _1251;
        _1261 = _1251;
        _1262 = _1251;
        _1263 = 0.0;
        _1264 = 0.0;
        _1265 = 0.0;
    }
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1293 = fma(_922, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _914));
        float _1297 = fma(_922, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _914));
        float _1301 = fma(_922, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _914));
        float _1324 = _914 + _692;
        float _1325 = _918 + _693;
        float _1326 = _922 + _694;
        float _1336 = fma(_1326, cbModelParam._m0[30u].z, fma(_1325, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1324)) - _1293;
        float _1337 = fma(_1326, cbModelParam._m0[31u].z, fma(_1325, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1324)) - _1297;
        float _1338 = fma(_1326, cbModelParam._m0[32u].z, fma(_1325, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1324)) - _1301;
        float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
        float _1355 = ((_1342 * _1336) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1293 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1342 * _1337) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1297 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1342 * _1338) / cbModelParam._m0[35u].z) + ((((((_1301 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        float _1392 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1359.x + (-0.5));
        float _1394 = _1392 * (_1359.y + (-0.5));
        float _1395 = _1392 * (_1359.z + (-0.5));
        float _1402 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1366.x + (-0.5));
        float _1404 = _1402 * (_1366.y + (-0.5));
        float _1405 = _1402 * (_1366.z + (-0.5));
        float _1412 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1373.x + (-0.5));
        float _1414 = _1412 * (_1373.y + (-0.5));
        float _1415 = _1412 * (_1373.z + (-0.5));
        float _1422 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1380.x + (-0.5));
        float _1424 = _1422 * (_1380.y + (-0.5));
        float _1425 = _1422 * (_1380.z + (-0.5));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = _1393 * 0.5;
        float _1430 = _1403 * 0.5;
        float _1431 = _1413 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_692, _693, _694), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4257 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1456 + 1.0))) + _1461) * _1426;
        float _1471 = _1394 * 0.5;
        float _1472 = _1404 * 0.5;
        float _1473 = _1414 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_692, _693, _694), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4290 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1498 + 1.0))) + _1503) * _1427;
        float _1513 = _1395 * 0.5;
        float _1514 = _1405 * 0.5;
        float _1515 = _1415 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_692, _693, _694), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4323 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1540 + 1.0))) + _1545) * _1428;
        _1562 = _1395;
        _1563 = _1394;
        _1564 = _1393;
        _1565 = _1405;
        _1566 = _1404;
        _1567 = _1403;
        _1568 = _1415;
        _1569 = _1414;
        _1570 = _1413;
        _1571 = _1428;
        _1572 = _1427;
        _1573 = _1426;
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
    }
    else
    {
        _1562 = _1251;
        _1563 = _1251;
        _1564 = _1251;
        _1565 = _1251;
        _1566 = _1251;
        _1567 = _1251;
        _1568 = _1251;
        _1569 = _1251;
        _1570 = _1251;
        _1571 = _1251;
        _1572 = _1251;
        _1573 = _1251;
        _1574 = 0.0;
        _1575 = 0.0;
        _1576 = 0.0;
    }
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1263)) + _1263;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1264)) + _1264;
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1265)) + _1265;
    float _1609 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1587, cbSceneParam._m0[89u].y, _1586 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1587, cbSceneParam._m0[90u].y, _1586 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1587, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1586));
    float _1630 = _862 * 0.5;
    float _1631 = _863 * 0.5;
    float _1632 = _864 * 0.5;
    float _1633 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1636 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1639 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1673;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1646 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1250, _1254, _1257, _1260));
        float _1650 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1252, _1255, _1258, _1261));
        float _1654 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1661 = dot(vec4(cbModelParam._m0[39u]), vec4(_1630, _1631, _1632, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1684;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1675 = dot(vec4(cbModelParam._m0[40u]), vec4(_1630, _1631, _1632, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1675) ? 0.0 : (isnan(0.0) ? _1675 : max(0.0, _1675))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1688 = (_1684 * cbModelParam._m0[1u].x) + (_1673 * (1.0 - cbModelParam._m0[1u].x));
    float _1698 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _695);
    float _1699 = isnan(_1698) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1698 : min(cbModelParam._m0[25u].z, _1698));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1748 = fma(_922, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914)) + cbModelParam._m0[13u].w;
        float _1752 = fma(_922, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914)) + cbModelParam._m0[14u].w;
        float _1756 = fma(_922, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914)) + cbModelParam._m0[15u].w;
        float _1759 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1762 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1765 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1793;
        if (_1759 > 0.0)
        {
            _1793 = abs((1.0 - _1748) / _1759);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1748 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1793 = frontier_phi_17_15_ladder;
        }
        float _1963;
        if (_1762 > 0.0)
        {
            _1963 = abs((1.0 - _1752) / _1762);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1752 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1963 = frontier_phi_26_22_ladder;
        }
        float _2258;
        if (_1765 > 0.0)
        {
            _2258 = abs((1.0 - _1756) / _1765);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1756 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2258 = frontier_phi_38_33_ladder;
        }
        float _2260 = isnan(_1963) ? _1793 : (isnan(_1793) ? _1963 : min(_1793, _1963));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1759) + _1748;
        float _2266 = (_2261 * _1762) + _1752;
        float _2267 = (_2261 * _1765) + _1756;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2268;
        float _2272 = _2268 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 > _2272) || ((_2266 < _2270) || ((_2265 < _2270) || (_2265 > _2272))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2267, cbModelParam._m0[9u].z, fma(_2266, cbModelParam._m0[9u].y, _2265 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2267, cbModelParam._m0[10u].z, fma(_2266, cbModelParam._m0[10u].y, _2265 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2267, cbModelParam._m0[11u].z, fma(_2266, cbModelParam._m0[11u].y, _2265 * cbModelParam._m0[11u].x))), _1699);
            frontier_phi_16_38_ladder = _2412.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2412.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2412.x * cbModelParam._m0[1u].y;
        }
        _1781 = frontier_phi_16_38_ladder_2;
        _1783 = frontier_phi_16_38_ladder_1;
        _1785 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1699);
        _1781 = _1769.x * cbModelParam._m0[1u].y;
        _1783 = _1769.y * cbModelParam._m0[1u].y;
        _1785 = _1769.z * cbModelParam._m0[1u].y;
    }
    float _1789 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _695);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1789 : min(cbModelParam._m0[25u].w, _1789));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1844 = fma(_922, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914)) + cbModelParam._m0[21u].w;
        float _1848 = fma(_922, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914)) + cbModelParam._m0[22u].w;
        float _1852 = fma(_922, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914)) + cbModelParam._m0[23u].w;
        float _1855 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1858 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1861 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _1968;
        if (_1855 > 0.0)
        {
            _1968 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1968 = frontier_phi_28_24_ladder;
        }
        float _2285;
        if (_1858 > 0.0)
        {
            _2285 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2285 = frontier_phi_40_35_ladder;
        }
        float _2612;
        if (_1861 > 0.0)
        {
            _2612 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2612 = frontier_phi_50_47_ladder;
        }
        float _2614 = isnan(_2285) ? _1968 : (isnan(_1968) ? _2285 : min(_1968, _2285));
        float _2615 = isnan(_2612) ? _2614 : (isnan(_2614) ? _2612 : min(_2614, _2612));
        float _2619 = (_2615 * _1855) + _1844;
        float _2620 = (_2615 * _1858) + _1848;
        float _2621 = (_2615 * _1861) + _1852;
        float _2622 = _2615 * 9.9999997473787516355514526367188e-05;
        float _2623 = (-1.0) - _2622;
        float _2625 = _2622 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2621 > _2625) || ((_2621 < _2623) || ((_2620 > _2625) || ((_2620 < _2623) || ((_2619 < _2623) || (_2619 > _2625))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2621, cbModelParam._m0[17u].z, fma(_2620, cbModelParam._m0[17u].y, _2619 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2621, cbModelParam._m0[18u].z, fma(_2620, cbModelParam._m0[18u].y, _2619 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2621, cbModelParam._m0[19u].z, fma(_2620, cbModelParam._m0[19u].y, _2619 * cbModelParam._m0[19u].x))), _1790);
            frontier_phi_25_50_ladder = _2739.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2739.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2739.x * cbModelParam._m0[1u].z;
        }
        _1880 = frontier_phi_25_50_ladder_2;
        _1882 = frontier_phi_25_50_ladder_1;
        _1884 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1790);
        _1880 = _1864.x * cbModelParam._m0[1u].z;
        _1882 = _1864.y * cbModelParam._m0[1u].z;
        _1884 = _1864.z * cbModelParam._m0[1u].z;
    }
    float _1896 = ((((1.0 - _882) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_882 * _870)) * _854;
    float _1897 = _1896 * ((cbModelParam._m0[1u].w * (_1880 - _1781)) + _1781);
    float _1898 = _1896 * ((cbModelParam._m0[1u].w * (_1882 - _1783)) + _1783);
    float _1899 = _1896 * ((cbModelParam._m0[1u].w * (_1884 - _1785)) + _1785);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1898, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1898, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1898, cbSceneParam._m0[91u].y, _1897 * cbSceneParam._m0[91u].x));
    float _1942 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1946 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1950 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1955 = _1942 / _1954;
    float _1956 = _1946 / _1954;
    float _1957 = _1950 / _1954;
    float _2104;
    float _2105;
    float _2106;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1984 = ((uint(_1957 > cbSceneParam._m0[59u].y) + uint(_1957 > cbSceneParam._m0[59u].x)) + uint(_1957 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1985 = _1984 + 43u;
        uint _1993 = _1984 + 44u;
        uint _2001 = _1984 + 45u;
        uint _2009 = _1984 + 46u;
        float _2020 = fma(_1954, cbSceneParam._m0[_1985].w, fma(_1950, cbSceneParam._m0[_1985].z, fma(_1946, cbSceneParam._m0[_1985].y, _1942 * cbSceneParam._m0[_1985].x)));
        float _2024 = fma(_1954, cbSceneParam._m0[_1993].w, fma(_1950, cbSceneParam._m0[_1993].z, fma(_1946, cbSceneParam._m0[_1993].y, _1942 * cbSceneParam._m0[_1993].x)));
        float _2032 = fma(_1954, cbSceneParam._m0[_2009].w, fma(_1950, cbSceneParam._m0[_2009].z, fma(_1946, cbSceneParam._m0[_2009].y, _1942 * cbSceneParam._m0[_2009].x)));
        float _2037 = cbSceneParam._m0[33u].z * _2032;
        float _2039 = cbSceneParam._m0[33u].w * _2032;
        float _2042 = fma(_1954, cbSceneParam._m0[_2001].w, fma(_1950, cbSceneParam._m0[_2001].z, fma(_1946, cbSceneParam._m0[_2001].y, _1942 * cbSceneParam._m0[_2001].x))) / _2032;
        float _2090 = (cbSceneParam._m0[33u].x - sqrt(((_1956 * _1956) + (_1955 * _1955)) + (_1957 * _1957))) * cbSceneParam._m0[33u].y;
        float _4449 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2097 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2037 + _2020) / _2032, (_2039 + _2024) / _2032), _2042), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 + _2020) / _2032, (_2024 - _2037) / _2032), _2042), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 - _2037) / _2032, (_2024 - _2039) / _2032), _2042), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 - _2039) / _2032, (_2037 + _2024) / _2032), _2042), 0.0)).x), vec4(0.25)));
        _2104 = 1.0 - (_2097 * cbSceneParam._m0[34u].x);
        _2105 = 1.0 - (_2097 * cbSceneParam._m0[34u].y);
        _2106 = 1.0 - (_2097 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2104 = 1.0;
        _2105 = 1.0;
        _2106 = 1.0;
    }
    float _2170;
    float _2172;
    float _2174;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2158 = fma(_1954, cbSceneParam._m0[63u].w, fma(_1950, cbSceneParam._m0[63u].z, fma(_1946, cbSceneParam._m0[63u].y, _1942 * cbSceneParam._m0[63u].x)));
        float _2159 = fma(_1954, cbSceneParam._m0[60u].w, fma(_1950, cbSceneParam._m0[60u].z, fma(_1946, cbSceneParam._m0[60u].y, _1942 * cbSceneParam._m0[60u].x))) / _2158;
        float _2160 = fma(_1954, cbSceneParam._m0[61u].w, fma(_1950, cbSceneParam._m0[61u].z, fma(_1946, cbSceneParam._m0[61u].y, _1942 * cbSceneParam._m0[61u].x))) / _2158;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2159 >= cbSceneParam._m0[64u].x) && (_2160 >= cbSceneParam._m0[64u].y)) && (_2159 <= cbSceneParam._m0[64u].z)) && (_2160 <= cbSceneParam._m0[64u].w))
        {
            float _2298 = fma(_1954, cbSceneParam._m0[62u].w, fma(_1950, cbSceneParam._m0[62u].z, fma(_1946, cbSceneParam._m0[62u].y, _1942 * cbSceneParam._m0[62u].x))) / _2158;
            float _2302 = isnan(cbSceneParam._m0[41u].w) ? _2298 : (isnan(_2298) ? cbSceneParam._m0[41u].w : max(_2298, cbSceneParam._m0[41u].w));
            float _2345 = (cbSceneParam._m0[33u].x - sqrt(((_1956 * _1956) + (_1955 * _1955)) + (_1957 * _1957))) * cbSceneParam._m0[33u].y;
            float _4465 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
            float _2352 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2159, cbSceneParam._m0[33u].w + _2160), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2159, _2160 - cbSceneParam._m0[33u].z), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2159 - cbSceneParam._m0[33u].z, _2160 - cbSceneParam._m0[33u].w), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2159 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2160), _2302), 0.0)).x), vec4(0.25)));
            float _2356 = 1.0 - (_2352 * cbSceneParam._m0[34u].x);
            float _2357 = 1.0 - (_2352 * cbSceneParam._m0[34u].y);
            float _2358 = 1.0 - (_2352 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2358) ? _2106 : (isnan(_2106) ? _2358 : min(_2106, _2358));
            frontier_phi_37_36_ladder_1 = isnan(_2357) ? _2105 : (isnan(_2105) ? _2357 : min(_2105, _2357));
            frontier_phi_37_36_ladder_2 = isnan(_2356) ? _2104 : (isnan(_2104) ? _2356 : min(_2104, _2356));
        }
        else
        {
            frontier_phi_37_36_ladder = _2106;
            frontier_phi_37_36_ladder_1 = _2105;
            frontier_phi_37_36_ladder_2 = _2104;
        }
        _2170 = frontier_phi_37_36_ladder_2;
        _2172 = frontier_phi_37_36_ladder_1;
        _2174 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2170 = _2104;
        _2172 = _2105;
        _2174 = _2106;
    }
    uvec4 _2179 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2181 = _2179.x * 14u;
    uint _2182 = _2181 + 13u;
    float _2189 = _854 + (-1.0);
    float _2194 = (cbLight._m0[_2182].x * _2189) + 1.0;
    float _2195 = (cbLight._m0[_2182].y * _2189) + 1.0;
    float _2196 = (cbLight._m0[_2182].z * _2189) + 1.0;
    float _2197 = (cbLight._m0[_2182].w * _2189) + 1.0;
    uint _2198 = _2181 + 5u;
    float _2204 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
    uint _2208 = _2181 + 4u;
    float _2217 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
    uint _2221 = _2181 | 1u;
    float _2232 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_692, _693, _694));
    float _2235 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_692, _693, _694));
    float _4501 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _4512 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2240 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * 0.3183098733425140380859375;
    float _2242 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * 0.3183098733425140380859375;
    float _2249 = ((cbLight._m0[_2198].x * _2204) * _2242) + (((cbLight._m0[_2208].x * _2170) * _2217) * _2240);
    float _2250 = ((_2204 * cbLight._m0[_2198].y) * _2242) + (((cbLight._m0[_2208].y * _2172) * _2217) * _2240);
    float _2251 = ((_2204 * cbLight._m0[_2198].z) * _2242) + (((cbLight._m0[_2208].z * _2174) * _2217) * _2240);
    uvec4 _2255 = floatBitsToUint(cbLight._m0[_2181 + 12u]);
    bool _2257 = _2255.x == 0u;
    float _2359;
    float _2361;
    float _2363;
    if (_2257)
    {
        _2359 = _2249;
        _2361 = _2250;
        _2363 = _2251;
    }
    else
    {
        uint _2367 = _2181 + 6u;
        float _2383 = (dot(vec3(cbLight._m0[_2181 + 2u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2384 = _2383 * _2383;
        float _4523 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2385 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2386 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2359 = (((cbLight._m0[_2367].x * 0.3183098733425140380859375) * _2385) * _2386) + _2249;
        _2361 = (((cbLight._m0[_2367].y * 0.3183098733425140380859375) * _2385) * _2386) + _2250;
        _2363 = (((cbLight._m0[_2367].z * 0.3183098733425140380859375) * _2385) * _2386) + _2251;
    }
    bool _2366 = _2255.y == 0u;
    float _2421;
    float _2423;
    float _2425;
    if (_2366)
    {
        _2421 = _2359;
        _2423 = _2361;
        _2425 = _2363;
    }
    else
    {
        uint _2583 = _2181 + 7u;
        float _2599 = (dot(vec3(cbLight._m0[_2181 + 3u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2600 = _2599 * _2599;
        float _4539 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2601 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2602 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2421 = (((cbLight._m0[_2583].x * 0.3183098733425140380859375) * _2601) * _2602) + _2359;
        _2423 = (((cbLight._m0[_2583].y * 0.3183098733425140380859375) * _2601) * _2602) + _2361;
        _2425 = (((cbLight._m0[_2583].z * 0.3183098733425140380859375) * _2601) * _2602) + _2363;
    }
    uint _2428 = _2181 + 8u;
    float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _695) * 0.949999988079071044921875);
    float _2442 = _2441 * _2441;
    float _2443 = cbLight._m0[_2181].x + _771;
    float _2444 = cbLight._m0[_2181].y + _772;
    float _2445 = cbLight._m0[_2181].z + _773;
    float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
    float _2450 = _2449 * _2443;
    float _2451 = _2449 * _2444;
    float _2452 = _2449 * _2445;
    float _2453 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2181].xyz));
    float _4555 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2456 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _4566 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2457 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2458 = dot(vec3(_692, _693, _694), vec3(_2450, _2451, _2452));
    float _4577 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2462 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2450, _2451, _2452));
    float _4588 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2466 = _2442 * _2442;
    float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
    float _2481 = (exp2(log2(1.0 - (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2482 = 1.0 - _2442;
    float _2493 = (0.5 / (((_2457 * ((_2456 * _2482) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2482) + _2442) * _2456))) * _2456;
    float _4599 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2495 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
    uint _2509 = _2181 + 9u;
    float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _695) * 0.949999988079071044921875);
    float _2521 = _2520 * _2520;
    float _2522 = cbLight._m0[_2221].x + _771;
    float _2523 = cbLight._m0[_2221].y + _772;
    float _2524 = cbLight._m0[_2221].z + _773;
    float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
    float _2529 = _2528 * _2522;
    float _2530 = _2528 * _2523;
    float _2531 = _2528 * _2524;
    float _2532 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2221].xyz));
    float _4610 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2536 = dot(vec3(_692, _693, _694), vec3(_2529, _2530, _2531));
    float _4621 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _2540 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2529, _2530, _2531));
    float _4632 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2544 = _2521 * _2521;
    float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
    float _2557 = (exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2558 = 1.0 - _2521;
    float _2568 = (0.5 / (((_2457 * ((_2535 * _2558) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2558) + _2521) * _2535))) * _2535;
    float _4643 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2570 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
    float _2580 = (((_2557 * cbLight._m0[_2509].x) * _2570) * _2204) + ((((cbLight._m0[_2428].x * _2170) * _2481) * _2495) * _2217);
    float _2581 = (((_2557 * cbLight._m0[_2509].y) * _2570) * _2204) + ((((cbLight._m0[_2428].y * _2172) * _2481) * _2495) * _2217);
    float _2582 = (((_2557 * cbLight._m0[_2509].z) * _2570) * _2204) + ((((cbLight._m0[_2428].z * _2174) * _2481) * _2495) * _2217);
    float _2638;
    float _2640;
    float _2642;
    if (_2257)
    {
        _2638 = _2580;
        _2640 = _2581;
        _2642 = _2582;
    }
    else
    {
        uint _2644 = _2181 + 2u;
        uint _2648 = _2181 + 10u;
        float _2662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2644].w)) * _695) * 0.949999988079071044921875);
        float _2663 = _2662 * _2662;
        float _2664 = cbLight._m0[_2644].x + _771;
        float _2665 = cbLight._m0[_2644].y + _772;
        float _2666 = cbLight._m0[_2644].z + _773;
        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
        float _2671 = _2670 * _2664;
        float _2672 = _2670 * _2665;
        float _2673 = _2670 * _2666;
        float _2674 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2644].xyz));
        float _4654 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2677 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2678 = dot(vec3(_692, _693, _694), vec3(_2671, _2672, _2673));
        float _4665 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2682 = dot(vec3(cbLight._m0[_2644].xyz), vec3(_2671, _2672, _2673));
        float _4676 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2686 = _2663 * _2663;
        float _2690 = ((_2681 * _2681) * (_2686 + (-1.0))) + 1.0;
        float _2699 = (exp2(log2(1.0 - (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2700 = 1.0 - _2663;
        float _2710 = (0.5 / (((_2457 * ((_2677 * _2700) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2700) + _2663) * _2677))) * _2677;
        float _4687 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2712 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2686 / ((_2690 * _2690) * 3.141590118408203125));
        float _2713 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2638 = (((_2699 * cbLight._m0[_2648].x) * _2712) * _2713) + _2580;
        _2640 = (((_2699 * cbLight._m0[_2648].y) * _2712) * _2713) + _2581;
        _2642 = (((_2699 * cbLight._m0[_2648].z) * _2712) * _2713) + _2582;
    }
    float _2744;
    float _2746;
    float _2748;
    if (_2366)
    {
        _2744 = _2638;
        _2746 = _2640;
        _2748 = _2642;
    }
    else
    {
        uint _2755 = _2181 + 3u;
        uint _2759 = _2181 + 11u;
        float _2773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2755].w)) * _695) * 0.949999988079071044921875);
        float _2774 = _2773 * _2773;
        float _2775 = cbLight._m0[_2755].x + _771;
        float _2776 = cbLight._m0[_2755].y + _772;
        float _2777 = cbLight._m0[_2755].z + _773;
        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
        float _2782 = _2781 * _2775;
        float _2783 = _2781 * _2776;
        float _2784 = _2781 * _2777;
        float _2785 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2755].xyz));
        float _4703 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2788 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2789 = dot(vec3(_692, _693, _694), vec3(_2782, _2783, _2784));
        float _4714 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2793 = dot(vec3(cbLight._m0[_2755].xyz), vec3(_2782, _2783, _2784));
        float _4725 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2797 = _2774 * _2774;
        float _2801 = ((_2792 * _2792) * (_2797 + (-1.0))) + 1.0;
        float _2810 = (exp2(log2(1.0 - (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2811 = 1.0 - _2774;
        float _2821 = (0.5 / (((_2457 * ((_2788 * _2811) + _2774)) + 9.9999999392252902907785028219223e-09) + (((_2457 * _2811) + _2774) * _2788))) * _2788;
        float _4736 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
        float _2823 = (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2797 / ((_2801 * _2801) * 3.141590118408203125));
        float _2824 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2744 = (((_2810 * cbLight._m0[_2759].x) * _2823) * _2824) + _2638;
        _2746 = (((_2810 * cbLight._m0[_2759].y) * _2823) * _2824) + _2640;
        _2748 = (((_2810 * cbLight._m0[_2759].z) * _2823) * _2824) + _2642;
    }
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    if (_2179.y == 0u)
    {
        uvec4 _2845 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2846 = _2845.x;
        uint _2857 = uint((float(_2845.y) * floor(float(uint(cbSceneParam._m0[85u].y * _792) / _2846))) + floor(float(uint(cbSceneParam._m0[85u].x * _791) / _2846)));
        float _2867 = (log2(_1957 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2868 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        uint _2871 = uint(isnan(14.0) ? _2868 : (isnan(_2868) ? 14.0 : min(_2868, 14.0)));
        uvec4 _2876 = texelFetch(g_lightClusterGridBuffer, int(((_2871 << 2u) + (_2857 << 6u)) >> 2u));
        uint _2877 = _2876.x;
        uint _2878 = _2845.z;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        if (((((1u << ((_2878 >> 4u) & 15u)) + 4294967295u) & _2877) == 0u) || ((_2878 & 240u) == 0u))
        {
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
        }
        else
        {
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            uint _3116 = 0u;
            uint _3125;
            bool _3126;
            for (;;)
            {
                _3125 = texelFetch(g_lightClassification, int((((_2871 << 5u) + (_2857 << 9u)) + (_3116 << 2u)) >> 2u)).x;
                _3126 = _3125 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3126)
                {
                    frontier_phi_71_pred = _3115;
                    frontier_phi_71_pred_1 = _3114;
                    frontier_phi_71_pred_2 = _3113;
                    frontier_phi_71_pred_3 = _3112;
                    frontier_phi_71_pred_4 = _3111;
                    frontier_phi_71_pred_5 = _3110;
                }
                else
                {
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    uint _3261;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3125;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    for (;;)
                    {
                        uint _3265 = uint(findLSB(_3261)) + (_3116 << 5u);
                        uint _3262 = (_3261 + 4294967295u) & _3261;
                        uint _3267 = _3265 * 48u;
                        vec4 _3281 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3267)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3267 + 3u)).x));
                        uint _3287 = (_3265 * 48u) + 4u;
                        vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3287)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3287 + 3u)).x));
                        uint _3306 = (_3265 * 48u) + 8u;
                        vec3 _3317 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x));
                        float _3321 = _3281.x - _1955;
                        float _3322 = _3281.y - _1956;
                        float _3323 = _3281.z - _1957;
                        float _3324 = dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323));
                        float _3327 = inversesqrt(_3324);
                        float _3328 = _3327 * _3321;
                        float _3329 = _3327 * _3322;
                        float _3330 = _3327 * _3323;
                        float _3331 = dot(vec3(_810, _813, _816), vec3(_3328, _3329, _3330));
                        float _3336 = 1.0 - (_3324 * _3281.w);
                        float _4762 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3337 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3338 = sqrt(_3324) * _3300.w;
                        float _3341 = 1.39999997615814208984375 / (_3338 + 1.39999997615814208984375);
                        float _3342 = _3341 * _3341;
                        float _3345 = ((1.0 - _3342) * _3331) + _3342;
                        float _3348 = _3338 * _3338;
                        float _3352 = ((isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0))) * _3337) / ((_3348 * 0.699999988079071044921875) + 1.0);
                        float _3356 = (-0.0) - _1955;
                        float _3357 = (-0.0) - _1956;
                        float _3358 = (-0.0) - _1957;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3363 = _3362 * _3356;
                        float _3364 = _3362 * _3357;
                        float _3365 = _3362 * _3358;
                        float _3372 = exp2(log2(1.0 / ((_3348 * 3.5) + 5.0)) * 0.25);
                        float _3373 = 1.0 - _870;
                        float _3380 = sqrt(1.0 - ((1.0 - (_3373 * _3373)) * (1.0 - (_3372 * _3372))));
                        float _3381 = _3380 * _3380;
                        float _3382 = _3381 * _3381;
                        float _3383 = _3363 + _3328;
                        float _3384 = _3364 + _3329;
                        float _3385 = _3365 + _3330;
                        float _3389 = inversesqrt(dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385)));
                        float _3393 = dot(vec3(_810, _813, _816), vec3(_3363, _3364, _3365));
                        float _4778 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3396 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3397 = dot(vec3(_810, _813, _816), vec3(_3389 * _3383, _3389 * _3384, _3389 * _3385));
                        float _4789 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3400 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3404 = ((_3400 * _3400) * (_3382 + (-1.0))) + 1.0;
                        float _3405 = _3341 * _3381;
                        float _3406 = _3405 * _3405;
                        float _3409 = ((1.0 - _3406) * _3331) + _3406;
                        float _4800 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3410 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3411 = 1.0 - _3381;
                        float _3421 = (0.5 / (((_3410 * ((_3396 * _3411) + _3381)) + 9.9999999392252902907785028219223e-09) + (((_3410 * _3411) + _3381) * _3396))) * _3410;
                        float _4811 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3431 = (((_3382 * 3.1415927410125732421875) * (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) / ((_3404 * _3404) * ((_3348 * 2.1991131305694580078125) + 3.141590118408203125))) * _3337;
                        _3185 = (_3352 * _3300.x) + _3258;
                        _3186 = (_3352 * _3300.y) + _3259;
                        _3187 = (_3352 * _3300.z) + _3260;
                        _3182 = (_3431 * _3317.x) + _3255;
                        _3183 = (_3431 * _3317.y) + _3256;
                        _3184 = (_3431 * _3317.z) + _3257;
                        if (_3262 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3262;
                        }
                    }
                    frontier_phi_71_pred = _3187;
                    frontier_phi_71_pred_1 = _3186;
                    frontier_phi_71_pred_2 = _3185;
                    frontier_phi_71_pred_3 = _3184;
                    frontier_phi_71_pred_4 = _3183;
                    frontier_phi_71_pred_5 = _3182;
                }
                _2968 = frontier_phi_71_pred;
                _2966 = frontier_phi_71_pred_1;
                _2964 = frontier_phi_71_pred_2;
                _2962 = frontier_phi_71_pred_3;
                _2960 = frontier_phi_71_pred_4;
                _2958 = frontier_phi_71_pred_5;
                uint _3117 = _3116 + 1u;
                if (_3117 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3110 = _2958;
                    _3111 = _2960;
                    _3112 = _2962;
                    _3113 = _2964;
                    _3114 = _2966;
                    _3115 = _2968;
                    _3116 = _3117;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
        }
        uvec4 _2971 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2972 = _2971.z;
        uint _2974 = (_2972 >> 8u) & 15u;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        float _3088;
        if (((4294967295u << _2974) & _2877) == 0u)
        {
            _3078 = _2957;
            _3080 = _2959;
            _3082 = _2961;
            _3084 = _2963;
            _3086 = _2965;
            _3088 = _2967;
        }
        else
        {
            float _3103 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
            float _3104 = _3103 * _1955;
            float _3105 = _3103 * _1956;
            float _3106 = _3103 * _1957;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2974 < ((_2972 >> 12u) & 15u))
            {
                float _3079;
                float _3081;
                float _3083;
                float _3085;
                float _3087;
                float _3089;
                float _3238 = _2957;
                float _3239 = _2959;
                float _3240 = _2961;
                float _3241 = _2963;
                float _3242 = _2965;
                float _3243 = _2967;
                uint _3244 = _2974;
                uint _3253;
                bool _3254;
                for (;;)
                {
                    _3253 = texelFetch(g_lightClassification, int((((_2871 << 5u) + (_2857 << 9u)) + (_3244 << 2u)) >> 2u)).x;
                    _3254 = _3253 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3254)
                    {
                        frontier_phi_82_pred = _3243;
                        frontier_phi_82_pred_1 = _3242;
                        frontier_phi_82_pred_2 = _3241;
                        frontier_phi_82_pred_3 = _3240;
                        frontier_phi_82_pred_4 = _3239;
                        frontier_phi_82_pred_5 = _3238;
                    }
                    else
                    {
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3458 = _3238;
                        float _3459 = _3239;
                        float _3460 = _3240;
                        float _3461 = _3241;
                        float _3462 = _3242;
                        float _3463 = _3243;
                        uint _3464 = _3253;
                        uint _3465;
                        vec4 _3490;
                        float _3491;
                        vec4 _3506;
                        vec3 _3518;
                        vec4 _3533;
                        vec4 _3548;
                        float _3594;
                        bool _3595;
                        for (;;)
                        {
                            uint _3475 = ((_3244 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3464));
                            _3465 = (_3464 + 4294967295u) & _3464;
                            uint _3477 = _3475 * 40u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3491 = _3490.w;
                            uint _3493 = (_3475 * 40u) + 4u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3508 = (_3475 * 40u) + 8u;
                            _3518 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x));
                            uint _3520 = (_3475 * 40u) + 16u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3475 * 40u) + 20u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3550 = (_3475 * 40u) + 24u;
                            vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3569 = (_3475 * 40u) + 28u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            _3594 = fma(_1957, _3582.z, fma(_1956, _3582.y, _3582.x * _1955)) + _3582.w;
                            _3595 = !((fma(_1957, _3563.z, fma(_1956, _3563.y, _3563.x * _1955)) + _3563.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3595)
                            {
                                float _3622 = _3490.x - _1955;
                                float _3623 = _3490.y - _1956;
                                float _3624 = _3490.z - _1957;
                                float _3625 = dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624));
                                float _3628 = inversesqrt(_3625);
                                float _3629 = _3628 * _3622;
                                float _3630 = _3628 * _3623;
                                float _3631 = _3628 * _3624;
                                float _3635 = 1.0 - (_3625 / (_3491 * _3491));
                                float _4822 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3640 = sqrt(_3625) * _3506.w;
                                float _3642 = 1.39999997615814208984375 / (_3640 + 1.39999997615814208984375);
                                float _3643 = _3642 * _3642;
                                float _3646 = ((1.0 - _3643) * dot(vec3(_3629, _3630, _3631), vec3(_810, _813, _816))) + _3643;
                                float _3649 = _3640 * _3640;
                                float _3653 = (fma(_1957, _3533.z, fma(_1956, _3533.y, _3533.x * _1955)) + _3533.w) / _3594;
                                float _3654 = (fma(_1957, _3548.z, fma(_1956, _3548.y, _3548.x * _1955)) + _3548.w) / _3594;
                                float _3658 = 1.0 - dot(vec2(_3653, _3654), vec2(_3653, _3654));
                                float _4838 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3660 = _3659 * (((isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0))) * _3636) / ((_3649 * 0.699999988079071044921875) + 1.0));
                                float _3672 = exp2(log2(1.0 / ((_3649 * 3.5) + 5.0)) * 0.25);
                                float _3673 = 1.0 - _870;
                                float _3680 = sqrt(1.0 - ((1.0 - (_3673 * _3673)) * (1.0 - (_3672 * _3672))));
                                float _3681 = _3680 * _3680;
                                float _3682 = _3681 * _3681;
                                float _3683 = _3629 - _3104;
                                float _3684 = _3630 - _3105;
                                float _3685 = _3631 - _3106;
                                float _3689 = inversesqrt(dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685)));
                                float _3693 = dot(vec3(_810, _813, _816), vec3((-0.0) - _3104, (-0.0) - _3105, (-0.0) - _3106));
                                float _4849 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3696 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3697 = dot(vec3(_810, _813, _816), vec3(_3689 * _3683, _3689 * _3684, _3689 * _3685));
                                float _4860 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3700 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3704 = ((_3700 * _3700) * (_3682 + (-1.0))) + 1.0;
                                float _3705 = _3642 * _3681;
                                float _3706 = _3705 * _3705;
                                float _3712 = ((1.0 - _3706) * dot(vec3(_810, _813, _816), vec3(_3629, _3630, _3631))) + _3706;
                                float _4871 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3713 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3714 = 1.0 - _3681;
                                float _3724 = (0.5 / (((_3713 * ((_3696 * _3714) + _3681)) + 9.9999999392252902907785028219223e-09) + (((_3713 * _3714) + _3681) * _3696))) * _3713;
                                float _4882 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3734 = (_3659 * _3636) * (((_3682 * 3.1415927410125732421875) * (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) / ((_3704 * _3704) * ((_3649 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3660 * _3506.z;
                                frontier_phi_88_pred_1 = _3660 * _3506.y;
                                frontier_phi_88_pred_2 = _3660 * _3506.x;
                                frontier_phi_88_pred_3 = _3734 * _3518.z;
                                frontier_phi_88_pred_4 = _3734 * _3518.y;
                                frontier_phi_88_pred_5 = _3734 * _3518.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3743 = frontier_phi_88_pred;
                            _3742 = frontier_phi_88_pred_1;
                            _3741 = frontier_phi_88_pred_2;
                            _3740 = frontier_phi_88_pred_3;
                            _3739 = frontier_phi_88_pred_4;
                            _3738 = frontier_phi_88_pred_5;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            if (_3465 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3465;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3450;
                        frontier_phi_82_pred_1 = _3449;
                        frontier_phi_82_pred_2 = _3448;
                        frontier_phi_82_pred_3 = _3447;
                        frontier_phi_82_pred_4 = _3446;
                        frontier_phi_82_pred_5 = _3445;
                    }
                    _3089 = frontier_phi_82_pred;
                    _3087 = frontier_phi_82_pred_1;
                    _3085 = frontier_phi_82_pred_2;
                    _3083 = frontier_phi_82_pred_3;
                    _3081 = frontier_phi_82_pred_4;
                    _3079 = frontier_phi_82_pred_5;
                    uint _3245 = _3244 + 1u;
                    if (_3245 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3238 = _3079;
                        _3239 = _3081;
                        _3240 = _3083;
                        _3241 = _3085;
                        _3242 = _3087;
                        _3243 = _3089;
                        _3244 = _3245;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3085;
                frontier_phi_63_64_ladder_1 = _3089;
                frontier_phi_63_64_ladder_2 = _3087;
                frontier_phi_63_64_ladder_3 = _3083;
                frontier_phi_63_64_ladder_4 = _3081;
                frontier_phi_63_64_ladder_5 = _3079;
            }
            else
            {
                frontier_phi_63_64_ladder = _2963;
                frontier_phi_63_64_ladder_1 = _2967;
                frontier_phi_63_64_ladder_2 = _2965;
                frontier_phi_63_64_ladder_3 = _2961;
                frontier_phi_63_64_ladder_4 = _2959;
                frontier_phi_63_64_ladder_5 = _2957;
            }
            _3078 = frontier_phi_63_64_ladder_5;
            _3080 = frontier_phi_63_64_ladder_4;
            _3082 = frontier_phi_63_64_ladder_3;
            _3084 = frontier_phi_63_64_ladder;
            _3086 = frontier_phi_63_64_ladder_2;
            _3088 = frontier_phi_63_64_ladder_1;
        }
        float _3093 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2890 = (_3093 * _3084) + _2421;
        _2892 = (_3093 * _3086) + _2423;
        _2894 = (_3093 * _3088) + _2425;
        _2896 = ((_3078 * 0.039999999105930328369140625) * _3093) + _2744;
        _2898 = ((_3080 * 0.039999999105930328369140625) * _3093) + _2746;
        _2900 = ((_3082 * 0.039999999105930328369140625) * _3093) + _2748;
    }
    else
    {
        _2890 = _2421;
        _2892 = _2423;
        _2894 = _2425;
        _2896 = _2744;
        _2898 = _2746;
        _2900 = _2748;
    }
    float _4898 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4909 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4920 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _2917 = ((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2890 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _854))) + ((_2896 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1688)) * cbPerFrame._m0[3u].x);
    float _2918 = ((isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2892 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _854))) + ((_2898 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1688)) * cbPerFrame._m0[3u].x);
    float _2919 = ((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2894 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _854))) + ((_2900 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1688)) * cbPerFrame._m0[3u].x);
    uint _2920 = _253 + 6u;
    float _2928 = _791 / cbSceneParam._m0[86u].x;
    float _2929 = _792 / cbSceneParam._m0[86u].y;
    vec4 _2943 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2928, _2929, (log2((isnan(cbSceneParam._m0[77u].w) ? _713 : (isnan(_713) ? cbSceneParam._m0[77u].w : min(_713, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2945 = _2943.x;
    float _2946 = _2943.y;
    float _2947 = _2943.z;
    float _2948 = _2943.w;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    if (_713 > cbSceneParam._m0[78u].w)
    {
        float _2982 = isnan(_713) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _713 : min(cbSceneParam._m0[80u].w, _713));
        float _2983 = _2982 / _713;
        float _2994 = _2983 * _764;
        float _2995 = _765 * _2983;
        float _2996 = (-0.0) - _2995;
        float _2998 = _2983 * _766;
        float _3000 = (cbSceneParam._m0[77u].w * _2996) / _2982;
        float _3001 = _3000 + cbSceneParam._m0[79u].w;
        float _3002 = cbSceneParam._m0[79u].w - _2995;
        float _3008 = sqrt(((_2994 * _2994) + (_2995 * _2995)) + (_2998 * _2998));
        float _3011 = (1.0 - (cbSceneParam._m0[77u].w / _2982)) * _3008;
        float _3016 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3018 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3195;
        if (abs((_2996 - _3000) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3195 = ((((_3001 > 0.0) ? exp2(_3016 * _3001) : (2.0 - exp2(_3018 * _3001))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3011;
        }
        else
        {
            float _3139 = 1.0 / cbSceneParam._m0[80u].x;
            float _3140 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : max(_3001, _3002));
            float _3141 = isnan(_3002) ? _3001 : (isnan(_3001) ? _3002 : min(_3001, _3002));
            float _3150 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : min(_3140, 0.0));
            float _3151 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : min(_3141, 0.0));
            _3195 = ((abs(_3008 / _2996) * cbSceneParam._m0[80u].y) * ((((_3150 - _3151) * 2.0) - ((exp2(_3016 * (isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0)))) - exp2(_3016 * (isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))))) * _3139)) - ((exp2(_3018 * _3150) - exp2(_3018 * _3151)) * _3139))) + (_3011 * cbSceneParam._m0[80u].z);
        }
        vec4 _3197 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2928, _2929, 1.0), 0.0);
        float _3206 = exp2((_3195 * (-1.44269502162933349609375)) * (1.0 - _3197.w));
        float _3207 = log2(_3206);
        float _3223 = log2(_2948);
        _3020 = (exp2(_3223 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].x)) * _3197.x) / cbSceneParam._m0[78u].x)) + _2945;
        _3022 = (exp2(_3223 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].y)) * _3197.y) / cbSceneParam._m0[78u].y)) + _2946;
        _3024 = (exp2(_3223 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3207 * cbSceneParam._m0[78u].z)) * _3197.z) / cbSceneParam._m0[78u].z)) + _2947;
        _3026 = _3206 * _2948;
    }
    else
    {
        _3020 = _2945;
        _3022 = _2946;
        _3024 = _2947;
        _3026 = _2948;
    }
    bool _3233;
    vec4 _3036;
    vec4 _3058;
    float _3060;
    float _3064;
    float _3065;
    float _3066;
    float _3067;
    bool _3077;
    for (;;)
    {
        _3036 = cbMatDynParam._m0[0u];
        float _3038 = roundEven(_3036.y);
        bool _3039 = _3038 == 3.0;
        float _3040 = log2(_3026);
        float _3047 = exp2(_3040 * cbSceneParam._m0[78u].x) * _2917;
        float _3048 = exp2(_3040 * cbSceneParam._m0[78u].y) * _2918;
        float _3049 = exp2(_3040 * cbSceneParam._m0[78u].z) * _2919;
        float _3056 = _780 + (-0.5);
        _3058 = cbMtdParam._m0[1u];
        _3060 = _3058.y * _3056;
        float _3063 = (_3038 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3064 = _3063 * (_3039 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3020)));
        _3065 = _3063 * (_3039 ? _3048 : (_3048 + (cbSceneParam._m0[72u].w * _3022)));
        _3066 = _3063 * (_3039 ? _3049 : (_3049 + (cbSceneParam._m0[72u].w * _3024)));
        _3067 = _3056 * 0.999000012874603271484375;
        _3077 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3077)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _3067) < 0.5)
            {
                _3233 = true;
                break;
            }
        }
        uint _3174 = _829 + uint(_3036.w);
        if ((cbInstanceData._m0[_3174].w < 1.0) && ((cbInstanceData._m0[_3174].w + _3067) < 0.5))
        {
            _3233 = true;
            break;
        }
        if ((_3060 + 1.0) < _3058.x)
        {
            _3233 = true;
            break;
        }
        _3233 = false;
        break;
    }
    float _3436;
    if (_3233)
    {
        discard_state = true;
        _3436 = 0.0;
    }
    else
    {
        _3436 = cbInstanceData._m0[_2920].w;
    }
    SV_Target.x = _3064;
    SV_Target.y = _3065;
    SV_Target.z = _3066;
    SV_Target.w = _3436;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2920].w;
    discard_exit();
}


