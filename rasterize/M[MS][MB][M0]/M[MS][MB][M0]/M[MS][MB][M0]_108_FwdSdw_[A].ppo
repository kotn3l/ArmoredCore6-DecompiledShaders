#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1380;
float _4022;
float _4023;
float _4024;
float _4025;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4034 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _4045 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _4056 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _410 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _410) * cbMtdParam._m0[24u].x) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4067 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _435 = (_428 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _436 = (_428 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _437 = (_428 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) + _447;
    vec4 _474 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _518 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _520 = _518.x;
    float _521 = _518.y;
    float _522 = _518.z;
    float _531 = ((_501.z - _522) * _428) + _522;
    float _534 = ((((_501.x - _520) * _428) + _520) * 2.0) + (-1.0);
    float _535 = ((((_501.y - _521) * _428) + _521) * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _4078 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))));
    vec4 _561 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _573 = (_534 + ((((_474.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_561.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _574 = (_535 + ((((_474.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_561.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _577 = fma(_541, _248, fma(_574, _255, _573 * _241));
    float _580 = fma(_541, _249, fma(_574, _256, _573 * _242));
    float _583 = fma(_541, _250, fma(_574, _257, _573 * _243));
    float _587 = inversesqrt(dot(vec3(_577, _580, _583), vec3(_577, _580, _583)));
    vec4 _616 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _618 = _616.x;
    float _619 = 1.0 - _618;
    float _625 = (cbMtdParam._m0[19u].x + dot(vec4(_587 * _577, _587 * _580, _587 * _583, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_618 - _619) * cbMtdParam._m0[24u].z) + _619) * cbMtdParam._m0[21u].z);
    float _4089 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _628 = (-0.0) - cbMtdParam._m0[24u].y;
    float _630 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _630 : (isnan(_630) ? 1.0 : min(_630, 1.0));
    float _638 = _626 - ((_626 * TEXCOORD_8.x) * _631);
    float _639 = _626 - ((_626 * TEXCOORD_8.y) * _631);
    float _640 = _626 - ((_626 * TEXCOORD_8.z) * _631);
    float _647 = (_638 * (cbMtdParam._m0[17u].x - _454)) + _454;
    float _648 = (_639 * (cbMtdParam._m0[17u].y - _455)) + _455;
    float _649 = (_640 * (cbMtdParam._m0[17u].z - _456)) + _456;
    vec4 _661 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _663 = _661.x;
    float _664 = 1.0 - _663;
    float _690 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_663 - _664) * cbMtdParam._m0[24u].w) + _664) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4110 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _691 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _699 = ((((cbMtdParam._m0[10u].x - _647) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _691) + _647;
    float _700 = ((((cbMtdParam._m0[10u].y - _648) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _691) + _648;
    float _701 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _649)) * _691) + _649;
    float _706 = (((_474.z - _531) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _531;
    float _710 = ((_561.z - _706) * cbMtdParam._m0[19u].w) + _706;
    vec4 _724 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _731 = (_724.x * 2.0) + (-1.0);
    float _732 = (_724.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _4121 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _741 = ((_724.z - _710) * _638) + _710;
    float _744 = ((cbMtdParam._m0[23u].y - _741) * _691) + _741;
    vec4 _763 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _769 = (_763.x * 2.0) + (-1.0);
    float _770 = (_763.y * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _4132 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _786 = ((sqrt(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) - _541) * _640) + _541;
    float _789 = (((_731 - _573) * _638) + _573) + (cbMtdParam._m0[21u].x * _573);
    float _790 = (((_732 - _574) * _639) + _574) + (cbMtdParam._m0[21u].x * _574);
    float _801 = (((_769 - _789) + (_789 * cbMtdParam._m0[22u].z)) * _691) + _789;
    float _802 = (((_770 - _790) + (_790 * cbMtdParam._m0[22u].z)) * _691) + _790;
    float _803 = (_691 * (sqrt(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) - _786)) + _786;
    float _805 = cbMtdParam._m0[22u].x + _561.w;
    float _808 = fma(_803, _248, fma(_802, _255, _801 * _241));
    float _811 = fma(_803, _249, fma(_802, _256, _801 * _242));
    float _814 = fma(_803, _250, fma(_802, _257, _801 * _243));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    float _819 = _818 * _808;
    float _820 = _818 * _811;
    float _821 = _818 * _814;
    float _4143 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _822 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4165 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _4176 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _4187 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _840 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _891 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _881);
    float _892 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _881);
    float _893 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _881);
    float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
    float _898 = _891 * _897;
    float _899 = _892 * _897;
    float _900 = _893 * _897;
    vec4 _905 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _907 = _905.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1061 = sqrt(((_891 * _891) + (_892 * _892)) + (_893 * _893));
        float _1067 = (cbMatDynParam._m0[5u].x * _1061) + cbMatDynParam._m0[5u].y;
        float _4198 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1072 = (cbMatDynParam._m0[5u].z * _1061) + cbMatDynParam._m0[5u].w;
        float _4209 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) - _1068)) + _1068) < ((_907 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _918 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _919 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _937 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _819));
    float _940 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _819));
    float _943 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _819));
    uint _956 = _279 + 9u;
    uint _957 = _956 + uint(cbMatDynParam._m0[0u].w);
    float _963 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * cbInstanceData._m0[_957].x;
    float _964 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * cbInstanceData._m0[_957].y;
    float _965 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * cbInstanceData._m0[_957].z;
    float _4220 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _4242 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    vec4 _977 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _918, cbSceneParam._m0[86u].y * _919));
    float _981 = ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * TEXCOORD_5.w) * _977.x;
    float _982 = dot(vec3(_819, _820, _821), vec3(_898, _899, _900));
    float _985 = _982 * 2.0;
    float _989 = (_985 * _819) - _898;
    float _990 = (_985 * _820) - _899;
    float _991 = (_985 * _821) - _900;
    float _995 = abs(dot(vec3(_898, _899, _900), vec3(_819, _820, _821)));
    float _4253 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _997 = sqrt(_822);
    float _1010 = exp2((_997 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_997 * 3.0));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1379;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1104 = fma(_1050, cbModelParam._m0[26u].z, fma(_1046, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042));
        float _1108 = fma(_1050, cbModelParam._m0[27u].z, fma(_1046, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042));
        float _1112 = fma(_1050, cbModelParam._m0[28u].z, fma(_1046, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042));
        float _1137 = _1042 + _819;
        float _1138 = _1046 + _820;
        float _1139 = _1050 + _821;
        float _1149 = fma(_1139, cbModelParam._m0[26u].z, fma(_1138, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137)) - _1104;
        float _1150 = fma(_1139, cbModelParam._m0[27u].z, fma(_1138, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137)) - _1108;
        float _1151 = fma(_1139, cbModelParam._m0[28u].z, fma(_1138, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137)) - _1112;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1104 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1108 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[34u].z) + ((((((_1112 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1207 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1173.x + (-0.5));
        float _1209 = _1207 * (_1173.y + (-0.5));
        float _1210 = _1207 * (_1173.z + (-0.5));
        float _1217 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1180.x + (-0.5));
        float _1219 = _1217 * (_1180.y + (-0.5));
        float _1220 = _1217 * (_1180.z + (-0.5));
        float _1227 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1187.x + (-0.5));
        float _1229 = _1227 * (_1187.y + (-0.5));
        float _1230 = _1227 * (_1187.z + (-0.5));
        float _1237 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1194.x + (-0.5));
        float _1239 = _1237 * (_1194.y + (-0.5));
        float _1240 = _1237 * (_1194.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1261 = (dot(vec3(_819, _820, _821), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1271 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _4301 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1273 + 1.0))) + _1278) * _1241;
        float _1288 = _1209 * 0.5;
        float _1289 = _1219 * 0.5;
        float _1290 = _1229 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_819, _820, _821), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _4334 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1315 + 1.0))) + _1320) * _1242;
        float _1330 = _1210 * 0.5;
        float _1331 = _1220 * 0.5;
        float _1332 = _1230 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_819, _820, _821), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4367 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1357 + 1.0))) + _1362) * _1243;
        _1379 = _1210;
        _1381 = _1209;
        _1382 = _1208;
        _1383 = _1220;
        _1384 = _1219;
        _1385 = _1218;
        _1386 = _1230;
        _1387 = _1229;
        _1388 = _1228;
        _1389 = _1243;
        _1390 = _1242;
        _1391 = _1241;
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _1380;
        _1381 = _1380;
        _1382 = _1380;
        _1383 = _1380;
        _1384 = _1380;
        _1385 = _1380;
        _1386 = _1380;
        _1387 = _1380;
        _1388 = _1380;
        _1389 = _1380;
        _1390 = _1380;
        _1391 = _1380;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1422 = fma(_1050, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1042));
        float _1426 = fma(_1050, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1042));
        float _1430 = fma(_1050, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1042));
        float _1453 = _1042 + _819;
        float _1454 = _1046 + _820;
        float _1455 = _1050 + _821;
        float _1465 = fma(_1455, cbModelParam._m0[30u].z, fma(_1454, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1453)) - _1422;
        float _1466 = fma(_1455, cbModelParam._m0[31u].z, fma(_1454, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1453)) - _1426;
        float _1467 = fma(_1455, cbModelParam._m0[32u].z, fma(_1454, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1453)) - _1430;
        float _1471 = inversesqrt(dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467)));
        float _1484 = ((_1471 * _1465) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1422 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1471 * _1466) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1426 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1471 * _1467) / cbModelParam._m0[35u].z) + ((((((_1430 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        float _1521 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1488.x + (-0.5));
        float _1523 = _1521 * (_1488.y + (-0.5));
        float _1524 = _1521 * (_1488.z + (-0.5));
        float _1531 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1495.x + (-0.5));
        float _1533 = _1531 * (_1495.y + (-0.5));
        float _1534 = _1531 * (_1495.z + (-0.5));
        float _1541 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1502.x + (-0.5));
        float _1543 = _1541 * (_1502.y + (-0.5));
        float _1544 = _1541 * (_1502.z + (-0.5));
        float _1551 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1509.x + (-0.5));
        float _1553 = _1551 * (_1509.y + (-0.5));
        float _1554 = _1551 * (_1509.z + (-0.5));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = _1522 * 0.5;
        float _1559 = _1532 * 0.5;
        float _1560 = _1542 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_819, _820, _821), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4408 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4419 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4430 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_1585 + 1.0))) + _1590) * _1555;
        float _1600 = _1523 * 0.5;
        float _1601 = _1533 * 0.5;
        float _1602 = _1543 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_819, _820, _821), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4463 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1627 + 1.0))) + _1632) * _1556;
        float _1642 = _1524 * 0.5;
        float _1643 = _1534 * 0.5;
        float _1644 = _1544 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_819, _820, _821), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4496 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1669 + 1.0))) + _1674) * _1557;
        _1691 = _1524;
        _1692 = _1523;
        _1693 = _1522;
        _1694 = _1534;
        _1695 = _1533;
        _1696 = _1532;
        _1697 = _1544;
        _1698 = _1543;
        _1699 = _1542;
        _1700 = _1557;
        _1701 = _1556;
        _1702 = _1555;
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
    }
    else
    {
        _1691 = _1380;
        _1692 = _1380;
        _1693 = _1380;
        _1694 = _1380;
        _1695 = _1380;
        _1696 = _1380;
        _1697 = _1380;
        _1698 = _1380;
        _1699 = _1380;
        _1700 = _1380;
        _1701 = _1380;
        _1702 = _1380;
        _1703 = 0.0;
        _1704 = 0.0;
        _1705 = 0.0;
    }
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1392)) + _1392;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1393)) + _1393;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1394)) + _1394;
    float _1738 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1715));
    float _1759 = _989 * 0.5;
    float _1760 = _990 * 0.5;
    float _1761 = _991 * 0.5;
    float _1762 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1765 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1768 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1802;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1775 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1379, _1383, _1386, _1389));
        float _1779 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1783 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1382, _1385, _1388, _1391));
        float _1790 = dot(vec4(cbModelParam._m0[39u]), vec4(_1759, _1760, _1761, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1813;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1804 = dot(vec4(cbModelParam._m0[40u]), vec4(_1759, _1760, _1761, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1817 = (_1813 * cbModelParam._m0[1u].x) + (_1802 * (1.0 - cbModelParam._m0[1u].x));
    float _1827 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1827 : min(cbModelParam._m0[25u].z, _1827));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1876 = fma(_1050, cbModelParam._m0[13u].z, fma(_1046, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1042)) + cbModelParam._m0[13u].w;
        float _1880 = fma(_1050, cbModelParam._m0[14u].z, fma(_1046, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1042)) + cbModelParam._m0[14u].w;
        float _1884 = fma(_1050, cbModelParam._m0[15u].z, fma(_1046, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1042)) + cbModelParam._m0[15u].w;
        float _1887 = fma(_991, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989));
        float _1890 = fma(_991, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989));
        float _1893 = fma(_991, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989));
        float _1921;
        if (_1887 > 0.0)
        {
            _1921 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1921 = frontier_phi_17_15_ladder;
        }
        float _2091;
        if (_1890 > 0.0)
        {
            _2091 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2091 = frontier_phi_26_22_ladder;
        }
        float _2386;
        if (_1893 > 0.0)
        {
            _2386 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2386 = frontier_phi_38_33_ladder;
        }
        float _2388 = isnan(_2091) ? _1921 : (isnan(_1921) ? _2091 : min(_1921, _2091));
        float _2389 = isnan(_2386) ? _2388 : (isnan(_2388) ? _2386 : min(_2388, _2386));
        float _2393 = (_2389 * _1887) + _1876;
        float _2394 = (_2389 * _1890) + _1880;
        float _2395 = (_2389 * _1893) + _1884;
        float _2396 = _2389 * 9.9999997473787516355514526367188e-05;
        float _2398 = (-1.0) - _2396;
        float _2400 = _2396 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2395 > _2400) || ((_2395 < _2398) || ((_2394 > _2400) || ((_2394 < _2398) || ((_2393 < _2398) || (_2393 > _2400))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2395, cbModelParam._m0[9u].z, fma(_2394, cbModelParam._m0[9u].y, _2393 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2395, cbModelParam._m0[10u].z, fma(_2394, cbModelParam._m0[10u].y, _2393 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2395, cbModelParam._m0[11u].z, fma(_2394, cbModelParam._m0[11u].y, _2393 * cbModelParam._m0[11u].x))), _1828);
            frontier_phi_16_38_ladder = _2540.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2540.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2540.x * cbModelParam._m0[1u].y;
        }
        _1909 = frontier_phi_16_38_ladder_2;
        _1911 = frontier_phi_16_38_ladder_1;
        _1913 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_989, _990, _991), _1828);
        _1909 = _1897.x * cbModelParam._m0[1u].y;
        _1911 = _1897.y * cbModelParam._m0[1u].y;
        _1913 = _1897.z * cbModelParam._m0[1u].y;
    }
    float _1917 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1918 = isnan(_1917) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1917 : min(cbModelParam._m0[25u].w, _1917));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1972 = fma(_1050, cbModelParam._m0[21u].z, fma(_1046, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1042)) + cbModelParam._m0[21u].w;
        float _1976 = fma(_1050, cbModelParam._m0[22u].z, fma(_1046, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1042)) + cbModelParam._m0[22u].w;
        float _1980 = fma(_1050, cbModelParam._m0[23u].z, fma(_1046, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1042)) + cbModelParam._m0[23u].w;
        float _1983 = fma(_991, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989));
        float _1986 = fma(_991, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989));
        float _1989 = fma(_991, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989));
        float _2096;
        if (_1983 > 0.0)
        {
            _2096 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2096 = frontier_phi_28_24_ladder;
        }
        float _2413;
        if (_1986 > 0.0)
        {
            _2413 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2413 = frontier_phi_40_35_ladder;
        }
        float _2740;
        if (_1989 > 0.0)
        {
            _2740 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2740 = frontier_phi_50_47_ladder;
        }
        float _2742 = isnan(_2413) ? _2096 : (isnan(_2096) ? _2413 : min(_2096, _2413));
        float _2743 = isnan(_2740) ? _2742 : (isnan(_2742) ? _2740 : min(_2742, _2740));
        float _2747 = (_2743 * _1983) + _1972;
        float _2748 = (_2743 * _1986) + _1976;
        float _2749 = (_2743 * _1989) + _1980;
        float _2750 = _2743 * 9.9999997473787516355514526367188e-05;
        float _2751 = (-1.0) - _2750;
        float _2753 = _2750 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2749 > _2753) || ((_2749 < _2751) || ((_2748 > _2753) || ((_2748 < _2751) || ((_2747 < _2751) || (_2747 > _2753))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2749, cbModelParam._m0[17u].z, fma(_2748, cbModelParam._m0[17u].y, _2747 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2749, cbModelParam._m0[18u].z, fma(_2748, cbModelParam._m0[18u].y, _2747 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2749, cbModelParam._m0[19u].z, fma(_2748, cbModelParam._m0[19u].y, _2747 * cbModelParam._m0[19u].x))), _1918);
            frontier_phi_25_50_ladder = _2867.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2867.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2867.x * cbModelParam._m0[1u].z;
        }
        _2008 = frontier_phi_25_50_ladder_2;
        _2010 = frontier_phi_25_50_ladder_1;
        _2012 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_989, _990, _991), _1918);
        _2008 = _1992.x * cbModelParam._m0[1u].z;
        _2010 = _1992.y * cbModelParam._m0[1u].z;
        _2012 = _1992.z * cbModelParam._m0[1u].z;
    }
    float _2024 = ((((1.0 - _1010) * ((_997 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1010 * _997)) * _981;
    float _2025 = _2024 * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2026 = _2024 * ((cbModelParam._m0[1u].w * (_2010 - _1911)) + _1911);
    float _2027 = _2024 * ((cbModelParam._m0[1u].w * (_2012 - _1913)) + _1913);
    float _2030 = fma(_2027, cbSceneParam._m0[89u].z, fma(_2026, cbSceneParam._m0[89u].y, _2025 * cbSceneParam._m0[89u].x));
    float _2033 = fma(_2027, cbSceneParam._m0[90u].z, fma(_2026, cbSceneParam._m0[90u].y, _2025 * cbSceneParam._m0[90u].x));
    float _2036 = fma(_2027, cbSceneParam._m0[91u].z, fma(_2026, cbSceneParam._m0[91u].y, _2025 * cbSceneParam._m0[91u].x));
    float _2070 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2074 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2078 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2082 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2083 = _2070 / _2082;
    float _2084 = _2074 / _2082;
    float _2085 = _2078 / _2082;
    float _2232;
    float _2233;
    float _2234;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2112 = ((uint(_2085 > cbSceneParam._m0[59u].y) + uint(_2085 > cbSceneParam._m0[59u].x)) + uint(_2085 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2113 = _2112 + 43u;
        uint _2121 = _2112 + 44u;
        uint _2129 = _2112 + 45u;
        uint _2137 = _2112 + 46u;
        float _2148 = fma(_2082, cbSceneParam._m0[_2113].w, fma(_2078, cbSceneParam._m0[_2113].z, fma(_2074, cbSceneParam._m0[_2113].y, _2070 * cbSceneParam._m0[_2113].x)));
        float _2152 = fma(_2082, cbSceneParam._m0[_2121].w, fma(_2078, cbSceneParam._m0[_2121].z, fma(_2074, cbSceneParam._m0[_2121].y, _2070 * cbSceneParam._m0[_2121].x)));
        float _2160 = fma(_2082, cbSceneParam._m0[_2137].w, fma(_2078, cbSceneParam._m0[_2137].z, fma(_2074, cbSceneParam._m0[_2137].y, _2070 * cbSceneParam._m0[_2137].x)));
        float _2165 = cbSceneParam._m0[33u].z * _2160;
        float _2167 = cbSceneParam._m0[33u].w * _2160;
        float _2170 = fma(_2082, cbSceneParam._m0[_2129].w, fma(_2078, cbSceneParam._m0[_2129].z, fma(_2074, cbSceneParam._m0[_2129].y, _2070 * cbSceneParam._m0[_2129].x))) / _2160;
        float _2218 = (cbSceneParam._m0[33u].x - sqrt(((_2084 * _2084) + (_2083 * _2083)) + (_2085 * _2085))) * cbSceneParam._m0[33u].y;
        float _4622 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2225 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 + _2148) / _2160, (_2167 + _2152) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2167 + _2148) / _2160, (_2152 - _2165) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 - _2165) / _2160, (_2152 - _2167) / _2160), _2170), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 - _2167) / _2160, (_2165 + _2152) / _2160), _2170), 0.0)).x), vec4(0.25)));
        _2232 = 1.0 - (_2225 * cbSceneParam._m0[34u].x);
        _2233 = 1.0 - (_2225 * cbSceneParam._m0[34u].y);
        _2234 = 1.0 - (_2225 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2232 = 1.0;
        _2233 = 1.0;
        _2234 = 1.0;
    }
    float _2298;
    float _2300;
    float _2302;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2286 = fma(_2082, cbSceneParam._m0[63u].w, fma(_2078, cbSceneParam._m0[63u].z, fma(_2074, cbSceneParam._m0[63u].y, _2070 * cbSceneParam._m0[63u].x)));
        float _2287 = fma(_2082, cbSceneParam._m0[60u].w, fma(_2078, cbSceneParam._m0[60u].z, fma(_2074, cbSceneParam._m0[60u].y, _2070 * cbSceneParam._m0[60u].x))) / _2286;
        float _2288 = fma(_2082, cbSceneParam._m0[61u].w, fma(_2078, cbSceneParam._m0[61u].z, fma(_2074, cbSceneParam._m0[61u].y, _2070 * cbSceneParam._m0[61u].x))) / _2286;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2287 >= cbSceneParam._m0[64u].x) && (_2288 >= cbSceneParam._m0[64u].y)) && (_2287 <= cbSceneParam._m0[64u].z)) && (_2288 <= cbSceneParam._m0[64u].w))
        {
            float _2426 = fma(_2082, cbSceneParam._m0[62u].w, fma(_2078, cbSceneParam._m0[62u].z, fma(_2074, cbSceneParam._m0[62u].y, _2070 * cbSceneParam._m0[62u].x))) / _2286;
            float _2430 = isnan(cbSceneParam._m0[41u].w) ? _2426 : (isnan(_2426) ? cbSceneParam._m0[41u].w : max(_2426, cbSceneParam._m0[41u].w));
            float _2473 = (cbSceneParam._m0[33u].x - sqrt(((_2084 * _2084) + (_2083 * _2083)) + (_2085 * _2085))) * cbSceneParam._m0[33u].y;
            float _4638 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
            float _2480 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2287, cbSceneParam._m0[33u].w + _2288), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2287, _2288 - cbSceneParam._m0[33u].z), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2287 - cbSceneParam._m0[33u].z, _2288 - cbSceneParam._m0[33u].w), _2430), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2287 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2288), _2430), 0.0)).x), vec4(0.25)));
            float _2484 = 1.0 - (_2480 * cbSceneParam._m0[34u].x);
            float _2485 = 1.0 - (_2480 * cbSceneParam._m0[34u].y);
            float _2486 = 1.0 - (_2480 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
            frontier_phi_37_36_ladder_1 = isnan(_2485) ? _2233 : (isnan(_2233) ? _2485 : min(_2233, _2485));
            frontier_phi_37_36_ladder_2 = isnan(_2484) ? _2232 : (isnan(_2232) ? _2484 : min(_2232, _2484));
        }
        else
        {
            frontier_phi_37_36_ladder = _2234;
            frontier_phi_37_36_ladder_1 = _2233;
            frontier_phi_37_36_ladder_2 = _2232;
        }
        _2298 = frontier_phi_37_36_ladder_2;
        _2300 = frontier_phi_37_36_ladder_1;
        _2302 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2298 = _2232;
        _2300 = _2233;
        _2302 = _2234;
    }
    uvec4 _2307 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2309 = _2307.x * 14u;
    uint _2310 = _2309 + 13u;
    float _2317 = _981 + (-1.0);
    float _2322 = (cbLight._m0[_2310].x * _2317) + 1.0;
    float _2323 = (cbLight._m0[_2310].y * _2317) + 1.0;
    float _2324 = (cbLight._m0[_2310].z * _2317) + 1.0;
    float _2325 = (cbLight._m0[_2310].w * _2317) + 1.0;
    uint _2326 = _2309 + 5u;
    float _2332 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
    uint _2336 = _2309 + 4u;
    float _2345 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
    uint _2349 = _2309 | 1u;
    float _2360 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_819, _820, _821));
    float _2363 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_819, _820, _821));
    float _4674 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _4685 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2368 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * 0.3183098733425140380859375;
    float _2370 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * 0.3183098733425140380859375;
    float _2377 = ((cbLight._m0[_2326].x * _2332) * _2370) + (((cbLight._m0[_2336].x * _2298) * _2345) * _2368);
    float _2378 = ((_2332 * cbLight._m0[_2326].y) * _2370) + (((cbLight._m0[_2336].y * _2300) * _2345) * _2368);
    float _2379 = ((_2332 * cbLight._m0[_2326].z) * _2370) + (((cbLight._m0[_2336].z * _2302) * _2345) * _2368);
    uvec4 _2383 = floatBitsToUint(cbLight._m0[_2309 + 12u]);
    bool _2385 = _2383.x == 0u;
    float _2487;
    float _2489;
    float _2491;
    if (_2385)
    {
        _2487 = _2377;
        _2489 = _2378;
        _2491 = _2379;
    }
    else
    {
        uint _2495 = _2309 + 6u;
        float _2511 = (dot(vec3(cbLight._m0[_2309 + 2u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2512 = _2511 * _2511;
        float _4696 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2513 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2514 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2487 = (((cbLight._m0[_2495].x * 0.3183098733425140380859375) * _2513) * _2514) + _2377;
        _2489 = (((cbLight._m0[_2495].y * 0.3183098733425140380859375) * _2513) * _2514) + _2378;
        _2491 = (((cbLight._m0[_2495].z * 0.3183098733425140380859375) * _2513) * _2514) + _2379;
    }
    bool _2494 = _2383.y == 0u;
    float _2549;
    float _2551;
    float _2553;
    if (_2494)
    {
        _2549 = _2487;
        _2551 = _2489;
        _2553 = _2491;
    }
    else
    {
        uint _2711 = _2309 + 7u;
        float _2727 = (dot(vec3(cbLight._m0[_2309 + 3u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2728 = _2727 * _2727;
        float _4712 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2729 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2730 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2549 = (((cbLight._m0[_2711].x * 0.3183098733425140380859375) * _2729) * _2730) + _2487;
        _2551 = (((cbLight._m0[_2711].y * 0.3183098733425140380859375) * _2729) * _2730) + _2489;
        _2553 = (((cbLight._m0[_2711].z * 0.3183098733425140380859375) * _2729) * _2730) + _2491;
    }
    uint _2556 = _2309 + 8u;
    float _2569 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _822) * 0.949999988079071044921875);
    float _2570 = _2569 * _2569;
    float _2571 = cbLight._m0[_2309].x + _898;
    float _2572 = cbLight._m0[_2309].y + _899;
    float _2573 = cbLight._m0[_2309].z + _900;
    float _2577 = inversesqrt(dot(vec3(_2571, _2572, _2573), vec3(_2571, _2572, _2573)));
    float _2578 = _2577 * _2571;
    float _2579 = _2577 * _2572;
    float _2580 = _2577 * _2573;
    float _2581 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2309].xyz));
    float _4728 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2584 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _4739 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _2585 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2586 = dot(vec3(_819, _820, _821), vec3(_2578, _2579, _2580));
    float _4750 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2589 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2590 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2578, _2579, _2580));
    float _4761 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2594 = _2570 * _2570;
    float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
    float _2609 = (exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2610 = 1.0 - _2570;
    float _2621 = (0.5 / (((_2585 * ((_2584 * _2610) + _2570)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2610) + _2570) * _2584))) * _2584;
    float _4772 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2623 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
    uint _2637 = _2309 + 9u;
    float _2648 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2349].w)) * _822) * 0.949999988079071044921875);
    float _2649 = _2648 * _2648;
    float _2650 = cbLight._m0[_2349].x + _898;
    float _2651 = cbLight._m0[_2349].y + _899;
    float _2652 = cbLight._m0[_2349].z + _900;
    float _2656 = inversesqrt(dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652)));
    float _2657 = _2656 * _2650;
    float _2658 = _2656 * _2651;
    float _2659 = _2656 * _2652;
    float _2660 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2349].xyz));
    float _4783 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2663 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
    float _2664 = dot(vec3(_819, _820, _821), vec3(_2657, _2658, _2659));
    float _4794 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
    float _2668 = dot(vec3(cbLight._m0[_2349].xyz), vec3(_2657, _2658, _2659));
    float _4805 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2672 = _2649 * _2649;
    float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
    float _2685 = (exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2686 = 1.0 - _2649;
    float _2696 = (0.5 / (((_2585 * ((_2663 * _2686) + _2649)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2686) + _2649) * _2663))) * _2663;
    float _4816 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    float _2698 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
    float _2708 = (((_2685 * cbLight._m0[_2637].x) * _2698) * _2332) + ((((cbLight._m0[_2556].x * _2298) * _2609) * _2623) * _2345);
    float _2709 = (((_2685 * cbLight._m0[_2637].y) * _2698) * _2332) + ((((cbLight._m0[_2556].y * _2300) * _2609) * _2623) * _2345);
    float _2710 = (((_2685 * cbLight._m0[_2637].z) * _2698) * _2332) + ((((cbLight._m0[_2556].z * _2302) * _2609) * _2623) * _2345);
    float _2766;
    float _2768;
    float _2770;
    if (_2385)
    {
        _2766 = _2708;
        _2768 = _2709;
        _2770 = _2710;
    }
    else
    {
        uint _2772 = _2309 + 2u;
        uint _2776 = _2309 + 10u;
        float _2790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2772].w)) * _822) * 0.949999988079071044921875);
        float _2791 = _2790 * _2790;
        float _2792 = cbLight._m0[_2772].x + _898;
        float _2793 = cbLight._m0[_2772].y + _899;
        float _2794 = cbLight._m0[_2772].z + _900;
        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
        float _2799 = _2798 * _2792;
        float _2800 = _2798 * _2793;
        float _2801 = _2798 * _2794;
        float _2802 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2772].xyz));
        float _4827 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2805 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2806 = dot(vec3(_819, _820, _821), vec3(_2799, _2800, _2801));
        float _4838 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2810 = dot(vec3(cbLight._m0[_2772].xyz), vec3(_2799, _2800, _2801));
        float _4849 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2814 = _2791 * _2791;
        float _2818 = ((_2809 * _2809) * (_2814 + (-1.0))) + 1.0;
        float _2827 = (exp2(log2(1.0 - (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2828 = 1.0 - _2791;
        float _2838 = (0.5 / (((_2585 * ((_2805 * _2828) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2828) + _2791) * _2805))) * _2805;
        float _4860 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2840 = (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2814 / ((_2818 * _2818) * 3.141590118408203125));
        float _2841 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
        _2766 = (((_2827 * cbLight._m0[_2776].x) * _2840) * _2841) + _2708;
        _2768 = (((_2827 * cbLight._m0[_2776].y) * _2840) * _2841) + _2709;
        _2770 = (((_2827 * cbLight._m0[_2776].z) * _2840) * _2841) + _2710;
    }
    float _2872;
    float _2874;
    float _2876;
    if (_2494)
    {
        _2872 = _2766;
        _2874 = _2768;
        _2876 = _2770;
    }
    else
    {
        uint _2883 = _2309 + 3u;
        uint _2887 = _2309 + 11u;
        float _2901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2883].w)) * _822) * 0.949999988079071044921875);
        float _2902 = _2901 * _2901;
        float _2903 = cbLight._m0[_2883].x + _898;
        float _2904 = cbLight._m0[_2883].y + _899;
        float _2905 = cbLight._m0[_2883].z + _900;
        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
        float _2910 = _2909 * _2903;
        float _2911 = _2909 * _2904;
        float _2912 = _2909 * _2905;
        float _2913 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2883].xyz));
        float _4876 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2916 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _2917 = dot(vec3(_819, _820, _821), vec3(_2910, _2911, _2912));
        float _4887 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2920 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
        float _2921 = dot(vec3(cbLight._m0[_2883].xyz), vec3(_2910, _2911, _2912));
        float _4898 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2925 = _2902 * _2902;
        float _2929 = ((_2920 * _2920) * (_2925 + (-1.0))) + 1.0;
        float _2938 = (exp2(log2(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2939 = 1.0 - _2902;
        float _2949 = (0.5 / (((_2585 * ((_2916 * _2939) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2585 * _2939) + _2902) * _2916))) * _2916;
        float _4909 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2951 = (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2925 / ((_2929 * _2929) * 3.141590118408203125));
        float _2952 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2872 = (((_2938 * cbLight._m0[_2887].x) * _2951) * _2952) + _2766;
        _2874 = (((_2938 * cbLight._m0[_2887].y) * _2951) * _2952) + _2768;
        _2876 = (((_2938 * cbLight._m0[_2887].z) * _2951) * _2952) + _2770;
    }
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    if (_2307.y == 0u)
    {
        uvec4 _2973 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2974 = _2973.x;
        uint _2985 = uint((float(_2973.y) * floor(float(uint(cbSceneParam._m0[85u].y * _919) / _2974))) + floor(float(uint(cbSceneParam._m0[85u].x * _918) / _2974)));
        float _2995 = (log2(_2085 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2996 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        uint _2999 = uint(isnan(14.0) ? _2996 : (isnan(_2996) ? 14.0 : min(_2996, 14.0)));
        uvec4 _3004 = texelFetch(g_lightClusterGridBuffer, int(((_2999 << 2u) + (_2985 << 6u)) >> 2u));
        uint _3005 = _3004.x;
        uint _3006 = _2973.z;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        if (((((1u << ((_3006 >> 4u) & 15u)) + 4294967295u) & _3005) == 0u) || ((_3006 & 240u) == 0u))
        {
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
        }
        else
        {
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            uint _3243 = 0u;
            uint _3252;
            bool _3253;
            for (;;)
            {
                _3252 = texelFetch(g_lightClassification, int((((_2999 << 5u) + (_2985 << 9u)) + (_3243 << 2u)) >> 2u)).x;
                _3253 = _3252 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3253)
                {
                    frontier_phi_71_pred = _3242;
                    frontier_phi_71_pred_1 = _3241;
                    frontier_phi_71_pred_2 = _3240;
                    frontier_phi_71_pred_3 = _3239;
                    frontier_phi_71_pred_4 = _3238;
                    frontier_phi_71_pred_5 = _3237;
                }
                else
                {
                    float _3382;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    uint _3388;
                    _3382 = _3237;
                    _3383 = _3238;
                    _3384 = _3239;
                    _3385 = _3240;
                    _3386 = _3241;
                    _3387 = _3242;
                    _3388 = _3252;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    for (;;)
                    {
                        uint _3392 = uint(findLSB(_3388)) + (_3243 << 5u);
                        uint _3389 = (_3388 + 4294967295u) & _3388;
                        uint _3394 = _3392 * 48u;
                        vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 3u)).x));
                        uint _3414 = (_3392 * 48u) + 4u;
                        vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3414)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3414 + 3u)).x));
                        uint _3433 = (_3392 * 48u) + 8u;
                        vec3 _3444 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3433)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3433 + 2u)).x));
                        float _3448 = _3408.x - _2083;
                        float _3449 = _3408.y - _2084;
                        float _3450 = _3408.z - _2085;
                        float _3451 = dot(vec3(_3448, _3449, _3450), vec3(_3448, _3449, _3450));
                        float _3454 = inversesqrt(_3451);
                        float _3455 = _3454 * _3448;
                        float _3456 = _3454 * _3449;
                        float _3457 = _3454 * _3450;
                        float _3458 = dot(vec3(_937, _940, _943), vec3(_3455, _3456, _3457));
                        float _3463 = 1.0 - (_3451 * _3408.w);
                        float _4935 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                        float _3464 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3465 = sqrt(_3451) * _3427.w;
                        float _3468 = 1.39999997615814208984375 / (_3465 + 1.39999997615814208984375);
                        float _3469 = _3468 * _3468;
                        float _3472 = ((1.0 - _3469) * _3458) + _3469;
                        float _3475 = _3465 * _3465;
                        float _3479 = ((isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0))) * _3464) / ((_3475 * 0.699999988079071044921875) + 1.0);
                        float _3483 = (-0.0) - _2083;
                        float _3484 = (-0.0) - _2084;
                        float _3485 = (-0.0) - _2085;
                        float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                        float _3490 = _3489 * _3483;
                        float _3491 = _3489 * _3484;
                        float _3492 = _3489 * _3485;
                        float _3499 = exp2(log2(1.0 / ((_3475 * 3.5) + 5.0)) * 0.25);
                        float _3500 = 1.0 - _997;
                        float _3507 = sqrt(1.0 - ((1.0 - (_3500 * _3500)) * (1.0 - (_3499 * _3499))));
                        float _3508 = _3507 * _3507;
                        float _3509 = _3508 * _3508;
                        float _3510 = _3490 + _3455;
                        float _3511 = _3491 + _3456;
                        float _3512 = _3492 + _3457;
                        float _3516 = inversesqrt(dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512)));
                        float _3520 = dot(vec3(_937, _940, _943), vec3(_3490, _3491, _3492));
                        float _4951 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                        float _3523 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3524 = dot(vec3(_937, _940, _943), vec3(_3516 * _3510, _3516 * _3511, _3516 * _3512));
                        float _4962 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                        float _3527 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3531 = ((_3527 * _3527) * (_3509 + (-1.0))) + 1.0;
                        float _3532 = _3468 * _3508;
                        float _3533 = _3532 * _3532;
                        float _3536 = ((1.0 - _3533) * _3458) + _3533;
                        float _4973 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3537 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                        float _3538 = 1.0 - _3508;
                        float _3548 = (0.5 / (((_3537 * ((_3523 * _3538) + _3508)) + 9.9999999392252902907785028219223e-09) + (((_3537 * _3538) + _3508) * _3523))) * _3537;
                        float _4984 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3559 = (((_3509 * 3.1415927410125732421875) * (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0)))) / ((_3531 * _3531) * ((_3475 * 2.1991131305694580078125) + 3.141590118408203125))) * _3464;
                        _3312 = (_3479 * _3427.x) + _3385;
                        _3313 = (_3479 * _3427.y) + _3386;
                        _3314 = (_3479 * _3427.z) + _3387;
                        _3309 = (_3559 * _3444.x) + _3382;
                        _3310 = (_3559 * _3444.y) + _3383;
                        _3311 = (_3559 * _3444.z) + _3384;
                        if (_3389 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3382 = _3309;
                            _3383 = _3310;
                            _3384 = _3311;
                            _3385 = _3312;
                            _3386 = _3313;
                            _3387 = _3314;
                            _3388 = _3389;
                        }
                    }
                    frontier_phi_71_pred = _3314;
                    frontier_phi_71_pred_1 = _3313;
                    frontier_phi_71_pred_2 = _3312;
                    frontier_phi_71_pred_3 = _3311;
                    frontier_phi_71_pred_4 = _3310;
                    frontier_phi_71_pred_5 = _3309;
                }
                _3096 = frontier_phi_71_pred;
                _3094 = frontier_phi_71_pred_1;
                _3092 = frontier_phi_71_pred_2;
                _3090 = frontier_phi_71_pred_3;
                _3088 = frontier_phi_71_pred_4;
                _3086 = frontier_phi_71_pred_5;
                uint _3244 = _3243 + 1u;
                if (_3244 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3237 = _3086;
                    _3238 = _3088;
                    _3239 = _3090;
                    _3240 = _3092;
                    _3241 = _3094;
                    _3242 = _3096;
                    _3243 = _3244;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
        }
        uvec4 _3099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3100 = _3099.z;
        uint _3102 = (_3100 >> 8u) & 15u;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        if (((4294967295u << _3102) & _3005) == 0u)
        {
            _3205 = _3085;
            _3207 = _3087;
            _3209 = _3089;
            _3211 = _3091;
            _3213 = _3093;
            _3215 = _3095;
        }
        else
        {
            float _3230 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
            float _3231 = _3230 * _2083;
            float _3232 = _3230 * _2084;
            float _3233 = _3230 * _2085;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3102 < ((_3100 >> 12u) & 15u))
            {
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3216;
                float _3365 = _3085;
                float _3366 = _3087;
                float _3367 = _3089;
                float _3368 = _3091;
                float _3369 = _3093;
                float _3370 = _3095;
                uint _3371 = _3102;
                uint _3380;
                bool _3381;
                for (;;)
                {
                    _3380 = texelFetch(g_lightClassification, int((((_2999 << 5u) + (_2985 << 9u)) + (_3371 << 2u)) >> 2u)).x;
                    _3381 = _3380 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3381)
                    {
                        frontier_phi_82_pred = _3370;
                        frontier_phi_82_pred_1 = _3369;
                        frontier_phi_82_pred_2 = _3368;
                        frontier_phi_82_pred_3 = _3367;
                        frontier_phi_82_pred_4 = _3366;
                        frontier_phi_82_pred_5 = _3365;
                    }
                    else
                    {
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3870;
                        float _3871;
                        float _3586 = _3365;
                        float _3587 = _3366;
                        float _3588 = _3367;
                        float _3589 = _3368;
                        float _3590 = _3369;
                        float _3591 = _3370;
                        uint _3592 = _3380;
                        uint _3593;
                        vec4 _3618;
                        float _3619;
                        vec4 _3634;
                        vec3 _3646;
                        vec4 _3661;
                        vec4 _3676;
                        float _3722;
                        bool _3723;
                        for (;;)
                        {
                            uint _3603 = ((_3371 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3592));
                            _3593 = (_3592 + 4294967295u) & _3592;
                            uint _3605 = _3603 * 40u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            _3619 = _3618.w;
                            uint _3621 = (_3603 * 40u) + 4u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            uint _3636 = (_3603 * 40u) + 8u;
                            _3646 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x));
                            uint _3648 = (_3603 * 40u) + 16u;
                            _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3663 = (_3603 * 40u) + 20u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3678 = (_3603 * 40u) + 24u;
                            vec4 _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3697 = (_3603 * 40u) + 28u;
                            vec4 _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            _3722 = fma(_2085, _3710.z, fma(_2084, _3710.y, _3710.x * _2083)) + _3710.w;
                            _3723 = !((fma(_2085, _3691.z, fma(_2084, _3691.y, _3691.x * _2083)) + _3691.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3723)
                            {
                                float _3750 = _3618.x - _2083;
                                float _3751 = _3618.y - _2084;
                                float _3752 = _3618.z - _2085;
                                float _3753 = dot(vec3(_3750, _3751, _3752), vec3(_3750, _3751, _3752));
                                float _3756 = inversesqrt(_3753);
                                float _3757 = _3756 * _3750;
                                float _3758 = _3756 * _3751;
                                float _3759 = _3756 * _3752;
                                float _3763 = 1.0 - (_3753 / (_3619 * _3619));
                                float _4995 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3768 = sqrt(_3753) * _3634.w;
                                float _3770 = 1.39999997615814208984375 / (_3768 + 1.39999997615814208984375);
                                float _3771 = _3770 * _3770;
                                float _3774 = ((1.0 - _3771) * dot(vec3(_3757, _3758, _3759), vec3(_937, _940, _943))) + _3771;
                                float _3777 = _3768 * _3768;
                                float _3781 = (fma(_2085, _3661.z, fma(_2084, _3661.y, _3661.x * _2083)) + _3661.w) / _3722;
                                float _3782 = (fma(_2085, _3676.z, fma(_2084, _3676.y, _3676.x * _2083)) + _3676.w) / _3722;
                                float _3786 = 1.0 - dot(vec2(_3781, _3782), vec2(_3781, _3782));
                                float _5011 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3787 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3788 = _3787 * (((isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0))) * _3764) / ((_3777 * 0.699999988079071044921875) + 1.0));
                                float _3800 = exp2(log2(1.0 / ((_3777 * 3.5) + 5.0)) * 0.25);
                                float _3801 = 1.0 - _997;
                                float _3808 = sqrt(1.0 - ((1.0 - (_3801 * _3801)) * (1.0 - (_3800 * _3800))));
                                float _3809 = _3808 * _3808;
                                float _3810 = _3809 * _3809;
                                float _3811 = _3757 - _3231;
                                float _3812 = _3758 - _3232;
                                float _3813 = _3759 - _3233;
                                float _3817 = inversesqrt(dot(vec3(_3811, _3812, _3813), vec3(_3811, _3812, _3813)));
                                float _3821 = dot(vec3(_937, _940, _943), vec3((-0.0) - _3231, (-0.0) - _3232, (-0.0) - _3233));
                                float _5022 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3824 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3825 = dot(vec3(_937, _940, _943), vec3(_3817 * _3811, _3817 * _3812, _3817 * _3813));
                                float _5033 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3828 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3832 = ((_3828 * _3828) * (_3810 + (-1.0))) + 1.0;
                                float _3833 = _3770 * _3809;
                                float _3834 = _3833 * _3833;
                                float _3840 = ((1.0 - _3834) * dot(vec3(_937, _940, _943), vec3(_3757, _3758, _3759))) + _3834;
                                float _5044 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3841 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3842 = 1.0 - _3809;
                                float _3852 = (0.5 / (((_3841 * ((_3824 * _3842) + _3809)) + 9.9999999392252902907785028219223e-09) + (((_3841 * _3842) + _3809) * _3824))) * _3841;
                                float _5055 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3862 = (_3787 * _3764) * (((_3810 * 3.1415927410125732421875) * (isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0)))) / ((_3832 * _3832) * ((_3777 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3788 * _3634.z;
                                frontier_phi_88_pred_1 = _3788 * _3634.y;
                                frontier_phi_88_pred_2 = _3788 * _3634.x;
                                frontier_phi_88_pred_3 = _3862 * _3646.z;
                                frontier_phi_88_pred_4 = _3862 * _3646.y;
                                frontier_phi_88_pred_5 = _3862 * _3646.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3871 = frontier_phi_88_pred;
                            _3870 = frontier_phi_88_pred_1;
                            _3869 = frontier_phi_88_pred_2;
                            _3868 = frontier_phi_88_pred_3;
                            _3867 = frontier_phi_88_pred_4;
                            _3866 = frontier_phi_88_pred_5;
                            _3576 = _3869 + _3589;
                            _3577 = _3870 + _3590;
                            _3578 = _3871 + _3591;
                            _3573 = _3866 + _3586;
                            _3574 = _3867 + _3587;
                            _3575 = _3868 + _3588;
                            if (_3593 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3577;
                                _3591 = _3578;
                                _3592 = _3593;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3578;
                        frontier_phi_82_pred_1 = _3577;
                        frontier_phi_82_pred_2 = _3576;
                        frontier_phi_82_pred_3 = _3575;
                        frontier_phi_82_pred_4 = _3574;
                        frontier_phi_82_pred_5 = _3573;
                    }
                    _3216 = frontier_phi_82_pred;
                    _3214 = frontier_phi_82_pred_1;
                    _3212 = frontier_phi_82_pred_2;
                    _3210 = frontier_phi_82_pred_3;
                    _3208 = frontier_phi_82_pred_4;
                    _3206 = frontier_phi_82_pred_5;
                    uint _3372 = _3371 + 1u;
                    if (_3372 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3365 = _3206;
                        _3366 = _3208;
                        _3367 = _3210;
                        _3368 = _3212;
                        _3369 = _3214;
                        _3370 = _3216;
                        _3371 = _3372;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3212;
                frontier_phi_63_64_ladder_1 = _3216;
                frontier_phi_63_64_ladder_2 = _3214;
                frontier_phi_63_64_ladder_3 = _3210;
                frontier_phi_63_64_ladder_4 = _3208;
                frontier_phi_63_64_ladder_5 = _3206;
            }
            else
            {
                frontier_phi_63_64_ladder = _3091;
                frontier_phi_63_64_ladder_1 = _3095;
                frontier_phi_63_64_ladder_2 = _3093;
                frontier_phi_63_64_ladder_3 = _3089;
                frontier_phi_63_64_ladder_4 = _3087;
                frontier_phi_63_64_ladder_5 = _3085;
            }
            _3205 = frontier_phi_63_64_ladder_5;
            _3207 = frontier_phi_63_64_ladder_4;
            _3209 = frontier_phi_63_64_ladder_3;
            _3211 = frontier_phi_63_64_ladder;
            _3213 = frontier_phi_63_64_ladder_2;
            _3215 = frontier_phi_63_64_ladder_1;
        }
        float _3220 = isnan(1.0) ? _981 : (isnan(_981) ? 1.0 : min(_981, 1.0));
        _3018 = (_3220 * _3211) + _2549;
        _3020 = (_3220 * _3213) + _2551;
        _3022 = (_3220 * _3215) + _2553;
        _3024 = ((_3205 * 0.039999999105930328369140625) * _3220) + _2872;
        _3026 = ((_3207 * 0.039999999105930328369140625) * _3220) + _2874;
        _3028 = ((_3209 * 0.039999999105930328369140625) * _3220) + _2876;
    }
    else
    {
        _3018 = _2549;
        _3020 = _2551;
        _3022 = _2553;
        _3024 = _2872;
        _3026 = _2874;
        _3028 = _2876;
    }
    float _5071 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _5082 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _5093 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _3045 = ((isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_3018 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _981))) + ((_3024 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    float _3046 = ((isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_3020 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _981))) + ((_3026 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    float _3047 = ((isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0))) * (_3022 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _981))) + ((_3028 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    uint _3048 = _279 + 6u;
    float _3056 = _918 / cbSceneParam._m0[86u].x;
    float _3057 = _919 / cbSceneParam._m0[86u].y;
    vec4 _3071 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3056, _3057, (log2((isnan(cbSceneParam._m0[77u].w) ? _840 : (isnan(_840) ? cbSceneParam._m0[77u].w : min(_840, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3073 = _3071.x;
    float _3074 = _3071.y;
    float _3075 = _3071.z;
    float _3076 = _3071.w;
    float _3147;
    float _3149;
    float _3151;
    float _3153;
    if (_840 > cbSceneParam._m0[78u].w)
    {
        float _3110 = isnan(_840) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _840 : min(cbSceneParam._m0[80u].w, _840));
        float _3111 = _3110 / _840;
        float _3122 = _3111 * _891;
        float _3123 = _892 * _3111;
        float _3124 = (-0.0) - _3123;
        float _3125 = _3111 * _893;
        float _3127 = (cbSceneParam._m0[77u].w * _3124) / _3110;
        float _3128 = _3127 + cbSceneParam._m0[79u].w;
        float _3129 = cbSceneParam._m0[79u].w - _3123;
        float _3135 = sqrt(((_3122 * _3122) + (_3123 * _3123)) + (_3125 * _3125));
        float _3138 = (1.0 - (cbSceneParam._m0[77u].w / _3110)) * _3135;
        float _3143 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3145 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3322;
        if (abs((_3124 - _3127) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3322 = ((((_3128 > 0.0) ? exp2(_3143 * _3128) : (2.0 - exp2(_3145 * _3128))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3138;
        }
        else
        {
            float _3266 = 1.0 / cbSceneParam._m0[80u].x;
            float _3267 = isnan(_3129) ? _3128 : (isnan(_3128) ? _3129 : max(_3128, _3129));
            float _3268 = isnan(_3129) ? _3128 : (isnan(_3128) ? _3129 : min(_3128, _3129));
            float _3277 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : min(_3267, 0.0));
            float _3278 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : min(_3268, 0.0));
            _3322 = ((abs(_3135 / _3124) * cbSceneParam._m0[80u].y) * ((((_3277 - _3278) * 2.0) - ((exp2(_3143 * (isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0)))) - exp2(_3143 * (isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))))) * _3266)) - ((exp2(_3145 * _3277) - exp2(_3145 * _3278)) * _3266))) + (_3138 * cbSceneParam._m0[80u].z);
        }
        vec4 _3324 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3056, _3057, 1.0), 0.0);
        float _3333 = exp2((_3322 * (-1.44269502162933349609375)) * (1.0 - _3324.w));
        float _3334 = log2(_3333);
        float _3350 = log2(_3076);
        _3147 = (exp2(_3350 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3334 * cbSceneParam._m0[78u].x)) * _3324.x) / cbSceneParam._m0[78u].x)) + _3073;
        _3149 = (exp2(_3350 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3334 * cbSceneParam._m0[78u].y)) * _3324.y) / cbSceneParam._m0[78u].y)) + _3074;
        _3151 = (exp2(_3350 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3334 * cbSceneParam._m0[78u].z)) * _3324.z) / cbSceneParam._m0[78u].z)) + _3075;
        _3153 = _3333 * _3076;
    }
    else
    {
        _3147 = _3073;
        _3149 = _3074;
        _3151 = _3075;
        _3153 = _3076;
    }
    bool _3360;
    vec4 _3163;
    vec4 _3185;
    float _3187;
    float _3191;
    float _3192;
    float _3193;
    float _3194;
    bool _3204;
    for (;;)
    {
        _3163 = cbMatDynParam._m0[0u];
        float _3165 = roundEven(_3163.y);
        bool _3166 = _3165 == 3.0;
        float _3167 = log2(_3153);
        float _3174 = exp2(_3167 * cbSceneParam._m0[78u].x) * _3045;
        float _3175 = exp2(_3167 * cbSceneParam._m0[78u].y) * _3046;
        float _3176 = exp2(_3167 * cbSceneParam._m0[78u].z) * _3047;
        float _3183 = _907 + (-0.5);
        _3185 = cbMtdParam._m0[1u];
        _3187 = _3185.y * _3183;
        float _3190 = (_3165 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3191 = _3190 * (_3166 ? _3174 : (_3174 + (cbSceneParam._m0[72u].w * _3147)));
        _3192 = _3190 * (_3166 ? _3175 : (_3175 + (cbSceneParam._m0[72u].w * _3149)));
        _3193 = _3190 * (_3166 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3151)));
        _3194 = _3183 * 0.999000012874603271484375;
        _3204 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3204)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _3194) < 0.5)
            {
                _3360 = true;
                break;
            }
        }
        uint _3301 = _956 + uint(_3163.w);
        if ((cbInstanceData._m0[_3301].w < 1.0) && ((cbInstanceData._m0[_3301].w + _3194) < 0.5))
        {
            _3360 = true;
            break;
        }
        if ((_3187 + 1.0) < _3185.x)
        {
            _3360 = true;
            break;
        }
        _3360 = false;
        break;
    }
    float _3564;
    if (_3360)
    {
        discard_state = true;
        _3564 = 0.0;
    }
    else
    {
        _3564 = cbInstanceData._m0[_3048].w;
    }
    SV_Target.x = _3191;
    SV_Target.y = _3192;
    SV_Target.z = _3193;
    SV_Target.w = _3564;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3048].w;
    discard_exit();
}


