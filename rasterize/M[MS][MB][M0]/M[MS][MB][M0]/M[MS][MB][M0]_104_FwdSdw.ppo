#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1263;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _368 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _368) * cbMtdParam._m0[24u].x) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3851 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _393 = (_386 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _394 = (_386 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _395 = (_386 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _459 = _457.x;
    float _460 = _457.y;
    float _461 = _457.z;
    float _470 = ((_440.z - _461) * _386) + _461;
    float _473 = ((((_440.x - _459) * _386) + _459) * 2.0) + (-1.0);
    float _474 = ((((_440.y - _460) * _386) + _460) * 2.0) + (-1.0);
    float _475 = dot(vec2(_473, _474), vec2(_473, _474));
    float _3862 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _480 = sqrt(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))));
    float _483 = _473 + ((((_413.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _484 = _474 + ((((_413.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _487 = fma(_480, _239, fma(_484, _246, _483 * _232));
    float _490 = fma(_480, _240, fma(_484, _247, _483 * _233));
    float _493 = fma(_480, _241, fma(_484, _248, _483 * _234));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    vec4 _513 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _543 = _541.x;
    float _544 = 1.0 - _543;
    float _550 = (cbMtdParam._m0[19u].x + dot(vec4(_497 * _487, _497 * _490, _497 * _493, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_543 - _544) * cbMtdParam._m0[24u].z) + _544) * cbMtdParam._m0[21u].z);
    float _3873 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _553 = (-0.0) - cbMtdParam._m0[24u].y;
    float _555 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _556 = isnan(1.0) ? _555 : (isnan(_555) ? 1.0 : min(_555, 1.0));
    float _563 = _551 - ((_551 * TEXCOORD_8.x) * _556);
    float _564 = _551 - ((_551 * TEXCOORD_8.y) * _556);
    float _565 = _551 - ((_551 * TEXCOORD_8.z) * _556);
    float _572 = (_563 * (cbMtdParam._m0[17u].x - _393)) + _393;
    float _573 = (_564 * (cbMtdParam._m0[17u].y - _394)) + _394;
    float _574 = (_565 * (cbMtdParam._m0[17u].z - _395)) + _395;
    vec4 _586 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _588 = _586.x;
    float _589 = 1.0 - _588;
    float _617 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_588 - _589) * cbMtdParam._m0[24u].w) + _589) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3894 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _618 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _626 = ((((cbMtdParam._m0[10u].x - _572) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _618) + _572;
    float _627 = ((((cbMtdParam._m0[10u].y - _573) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _618) + _573;
    float _628 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _574)) * _618) + _574;
    float _633 = (((_413.z - _470) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _470;
    vec4 _647 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _654 = (_647.x * 2.0) + (-1.0);
    float _655 = (_647.y * 2.0) + (-1.0);
    float _656 = dot(vec2(_654, _655), vec2(_654, _655));
    float _3905 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _664 = ((_647.z - _633) * _563) + _633;
    float _667 = ((cbMtdParam._m0[23u].y - _664) * _618) + _664;
    vec4 _686 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _692 = (_686.x * 2.0) + (-1.0);
    float _693 = (_686.y * 2.0) + (-1.0);
    float _694 = dot(vec2(_692, _693), vec2(_692, _693));
    float _3916 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _709 = ((sqrt(1.0 - (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) - _480) * _565) + _480;
    float _712 = (((_654 - _483) * _563) + _483) + (cbMtdParam._m0[21u].x * _483);
    float _713 = (((_655 - _484) * _564) + _484) + (cbMtdParam._m0[21u].x * _484);
    float _724 = (((_692 - _712) + (_712 * cbMtdParam._m0[22u].z)) * _618) + _712;
    float _725 = (((_693 - _713) + (_713 * cbMtdParam._m0[22u].z)) * _618) + _713;
    float _726 = (_618 * (sqrt(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) - _709)) + _709;
    float _728 = cbMtdParam._m0[22u].x + _513.w;
    float _731 = fma(_726, _239, fma(_725, _246, _724 * _232));
    float _734 = fma(_726, _240, fma(_725, _247, _724 * _233));
    float _737 = fma(_726, _241, fma(_725, _248, _724 * _234));
    float _741 = inversesqrt(dot(vec3(_731, _734, _737), vec3(_731, _734, _737)));
    float _742 = _741 * _731;
    float _743 = _741 * _734;
    float _744 = _741 * _737;
    float _3927 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _745 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _3949 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3960 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3971 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _763 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _814 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _804);
    float _815 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _804);
    float _816 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _804);
    float _820 = inversesqrt(dot(vec3(_814, _815, _816), vec3(_814, _815, _816)));
    float _821 = _814 * _820;
    float _822 = _815 * _820;
    float _823 = _816 * _820;
    float _829 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _830 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _848 = fma(_744, cbSceneParam._m0[5u].z, fma(_743, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _742));
    float _851 = fma(_744, cbSceneParam._m0[6u].z, fma(_743, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _742));
    float _854 = fma(_744, cbSceneParam._m0[7u].z, fma(_743, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _742));
    uint _868 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _874 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) * cbInstanceData._m0[_868].x;
    float _875 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * cbInstanceData._m0[_868].y;
    float _876 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))) * cbInstanceData._m0[_868].z;
    float _3982 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _4004 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    vec4 _888 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _829, cbSceneParam._m0[86u].y * _830));
    float _892 = ((isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * TEXCOORD_5.w) * _888.x;
    float _893 = dot(vec3(_742, _743, _744), vec3(_821, _822, _823));
    float _896 = _893 * 2.0;
    float _900 = (_896 * _742) - _821;
    float _901 = (_896 * _743) - _822;
    float _902 = (_896 * _744) - _823;
    float _906 = abs(dot(vec3(_821, _822, _823), vec3(_742, _743, _744)));
    float _4015 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _908 = sqrt(_745);
    float _921 = exp2((_908 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_908 * 3.0));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1262;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _987 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _991 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _995 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1020 = _953 + _742;
        float _1021 = _957 + _743;
        float _1022 = _961 + _744;
        float _1032 = fma(_1022, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020)) - _987;
        float _1033 = fma(_1022, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020)) - _991;
        float _1034 = fma(_1022, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020)) - _995;
        float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
        float _1051 = ((_1038 * _1032) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_987 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1038 * _1033) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_991 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1038 * _1034) / cbModelParam._m0[34u].z) + ((((((_995 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        float _1090 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1056.x + (-0.5));
        float _1092 = _1090 * (_1056.y + (-0.5));
        float _1093 = _1090 * (_1056.z + (-0.5));
        float _1100 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1063.x + (-0.5));
        float _1102 = _1100 * (_1063.y + (-0.5));
        float _1103 = _1100 * (_1063.z + (-0.5));
        float _1110 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1070.x + (-0.5));
        float _1112 = _1110 * (_1070.y + (-0.5));
        float _1113 = _1110 * (_1070.z + (-0.5));
        float _1120 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1077.x + (-0.5));
        float _1122 = _1120 * (_1077.y + (-0.5));
        float _1123 = _1120 * (_1077.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1144 = (dot(vec3(_742, _743, _744), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _4041 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1154 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _4052 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _4063 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_1156 + 1.0))) + _1161) * _1124;
        float _1171 = _1092 * 0.5;
        float _1172 = _1102 * 0.5;
        float _1173 = _1112 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_742, _743, _744), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _4074 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _4085 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _4096 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1198 + 1.0))) + _1203) * _1125;
        float _1213 = _1093 * 0.5;
        float _1214 = _1103 * 0.5;
        float _1215 = _1113 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_742, _743, _744), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _4107 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _4118 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _4129 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_1240 + 1.0))) + _1245) * _1126;
        _1262 = _1093;
        _1264 = _1092;
        _1265 = _1091;
        _1266 = _1103;
        _1267 = _1102;
        _1268 = _1101;
        _1269 = _1113;
        _1270 = _1112;
        _1271 = _1111;
        _1272 = _1126;
        _1273 = _1125;
        _1274 = _1124;
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _1263;
        _1264 = _1263;
        _1265 = _1263;
        _1266 = _1263;
        _1267 = _1263;
        _1268 = _1263;
        _1269 = _1263;
        _1270 = _1263;
        _1271 = _1263;
        _1272 = _1263;
        _1273 = _1263;
        _1274 = _1263;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1302 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1306 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1310 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1333 = _953 + _742;
        float _1334 = _957 + _743;
        float _1335 = _961 + _744;
        float _1345 = fma(_1335, cbModelParam._m0[30u].z, fma(_1334, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1333)) - _1302;
        float _1346 = fma(_1335, cbModelParam._m0[31u].z, fma(_1334, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1333)) - _1306;
        float _1347 = fma(_1335, cbModelParam._m0[32u].z, fma(_1334, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1333)) - _1310;
        float _1351 = inversesqrt(dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347)));
        float _1364 = ((_1351 * _1345) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1302 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1351 * _1346) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1306 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1351 * _1347) / cbModelParam._m0[35u].z) + ((((((_1310 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1364, _1365, _1366), 0.0);
        float _1401 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1368.x + (-0.5));
        float _1403 = _1401 * (_1368.y + (-0.5));
        float _1404 = _1401 * (_1368.z + (-0.5));
        float _1411 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1375.x + (-0.5));
        float _1413 = _1411 * (_1375.y + (-0.5));
        float _1414 = _1411 * (_1375.z + (-0.5));
        float _1421 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1382.x + (-0.5));
        float _1423 = _1421 * (_1382.y + (-0.5));
        float _1424 = _1421 * (_1382.z + (-0.5));
        float _1431 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1389.x + (-0.5));
        float _1433 = _1431 * (_1389.y + (-0.5));
        float _1434 = _1431 * (_1389.z + (-0.5));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = _1402 * 0.5;
        float _1439 = _1412 * 0.5;
        float _1440 = _1422 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_742, _743, _744), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4192 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1465 + 1.0))) + _1470) * _1435;
        float _1480 = _1403 * 0.5;
        float _1481 = _1413 * 0.5;
        float _1482 = _1423 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_742, _743, _744), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4225 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1507 + 1.0))) + _1512) * _1436;
        float _1522 = _1404 * 0.5;
        float _1523 = _1414 * 0.5;
        float _1524 = _1424 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_742, _743, _744), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4258 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1549 + 1.0))) + _1554) * _1437;
        _1571 = _1404;
        _1572 = _1403;
        _1573 = _1402;
        _1574 = _1414;
        _1575 = _1413;
        _1576 = _1412;
        _1577 = _1424;
        _1578 = _1423;
        _1579 = _1422;
        _1580 = _1437;
        _1581 = _1436;
        _1582 = _1435;
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
    }
    else
    {
        _1571 = _1263;
        _1572 = _1263;
        _1573 = _1263;
        _1574 = _1263;
        _1575 = _1263;
        _1576 = _1263;
        _1577 = _1263;
        _1578 = _1263;
        _1579 = _1263;
        _1580 = _1263;
        _1581 = _1263;
        _1582 = _1263;
        _1583 = 0.0;
        _1584 = 0.0;
        _1585 = 0.0;
    }
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1275)) + _1275;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1276)) + _1276;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1277)) + _1277;
    float _1618 = fma(_1597, cbSceneParam._m0[89u].z, fma(_1596, cbSceneParam._m0[89u].y, _1595 * cbSceneParam._m0[89u].x));
    float _1621 = fma(_1597, cbSceneParam._m0[90u].z, fma(_1596, cbSceneParam._m0[90u].y, _1595 * cbSceneParam._m0[90u].x));
    float _1624 = fma(_1597, cbSceneParam._m0[91u].z, fma(_1596, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1595));
    float _1639 = _900 * 0.5;
    float _1640 = _901 * 0.5;
    float _1641 = _902 * 0.5;
    float _1642 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1645 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1648 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1682;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1655 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1262, _1266, _1269, _1272));
        float _1659 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1663 = dot(vec4(_1639, _1640, _1641, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1670 = dot(vec4(cbModelParam._m0[39u]), vec4(_1639, _1640, _1641, 1.0));
        _1682 = dot(vec3(isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1682 = 1.0;
    }
    float _1693;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1684 = dot(vec4(cbModelParam._m0[40u]), vec4(_1639, _1640, _1641, 1.0));
        _1693 = dot(vec3(isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1684) ? 0.0 : (isnan(0.0) ? _1684 : max(0.0, _1684))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1693 = 1.0;
    }
    float _1697 = (_1693 * cbModelParam._m0[1u].x) + (_1682 * (1.0 - cbModelParam._m0[1u].x));
    float _1707 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _745);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1707 : min(cbModelParam._m0[25u].z, _1707));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1756 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1760 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1764 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1767 = fma(_902, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900));
        float _1770 = fma(_902, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900));
        float _1773 = fma(_902, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900));
        float _1801;
        if (_1767 > 0.0)
        {
            _1801 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1801 = frontier_phi_14_12_ladder;
        }
        float _1971;
        if (_1770 > 0.0)
        {
            _1971 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1971 = frontier_phi_23_19_ladder;
        }
        float _2266;
        if (_1773 > 0.0)
        {
            _2266 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2266 = frontier_phi_35_30_ladder;
        }
        float _2268 = isnan(_1971) ? _1801 : (isnan(_1801) ? _1971 : min(_1801, _1971));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1767) + _1756;
        float _2274 = (_2269 * _1770) + _1760;
        float _2275 = (_2269 * _1773) + _1764;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2278 = (-1.0) - _2276;
        float _2280 = _2276 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2275 > _2280) || ((_2275 < _2278) || ((_2274 > _2280) || ((_2274 < _2278) || ((_2273 < _2278) || (_2273 > _2280))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2275, cbModelParam._m0[9u].z, fma(_2274, cbModelParam._m0[9u].y, _2273 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2275, cbModelParam._m0[10u].z, fma(_2274, cbModelParam._m0[10u].y, _2273 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2275, cbModelParam._m0[11u].z, fma(_2274, cbModelParam._m0[11u].y, _2273 * cbModelParam._m0[11u].x))), _1708);
            frontier_phi_13_35_ladder = _2420.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2420.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2420.x * cbModelParam._m0[1u].y;
        }
        _1789 = frontier_phi_13_35_ladder_2;
        _1791 = frontier_phi_13_35_ladder_1;
        _1793 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1777 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_900, _901, _902), _1708);
        _1789 = _1777.x * cbModelParam._m0[1u].y;
        _1791 = _1777.y * cbModelParam._m0[1u].y;
        _1793 = _1777.z * cbModelParam._m0[1u].y;
    }
    float _1797 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _745);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1797 : min(cbModelParam._m0[25u].w, _1797));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_902, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900));
        float _1866 = fma(_902, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900));
        float _1869 = fma(_902, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900));
        float _1976;
        if (_1863 > 0.0)
        {
            _1976 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1976 = frontier_phi_25_21_ladder;
        }
        float _2293;
        if (_1866 > 0.0)
        {
            _2293 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2293 = frontier_phi_37_32_ladder;
        }
        float _2620;
        if (_1869 > 0.0)
        {
            _2620 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2620 = frontier_phi_47_44_ladder;
        }
        float _2622 = isnan(_2293) ? _1976 : (isnan(_1976) ? _2293 : min(_1976, _2293));
        float _2623 = isnan(_2620) ? _2622 : (isnan(_2622) ? _2620 : min(_2622, _2620));
        float _2627 = (_2623 * _1863) + _1852;
        float _2628 = (_2623 * _1866) + _1856;
        float _2629 = (_2623 * _1869) + _1860;
        float _2630 = _2623 * 9.9999997473787516355514526367188e-05;
        float _2631 = (-1.0) - _2630;
        float _2633 = _2630 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2629 > _2633) || ((_2629 < _2631) || ((_2628 > _2633) || ((_2628 < _2631) || ((_2627 < _2631) || (_2627 > _2633))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2747 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2629, cbModelParam._m0[17u].z, fma(_2628, cbModelParam._m0[17u].y, _2627 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2629, cbModelParam._m0[18u].z, fma(_2628, cbModelParam._m0[18u].y, _2627 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2629, cbModelParam._m0[19u].z, fma(_2628, cbModelParam._m0[19u].y, _2627 * cbModelParam._m0[19u].x))), _1798);
            frontier_phi_22_47_ladder = _2747.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2747.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2747.x * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_22_47_ladder_2;
        _1890 = frontier_phi_22_47_ladder_1;
        _1892 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_900, _901, _902), _1798);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1904 = ((((1.0 - _921) * ((_908 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_921 * _908)) * _892;
    float _1905 = _1904 * ((cbModelParam._m0[1u].w * (_1888 - _1789)) + _1789);
    float _1906 = _1904 * ((cbModelParam._m0[1u].w * (_1890 - _1791)) + _1791);
    float _1907 = _1904 * ((cbModelParam._m0[1u].w * (_1892 - _1793)) + _1793);
    float _1910 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    float _1950 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1958 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1962 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1963 = _1950 / _1962;
    float _1964 = _1954 / _1962;
    float _1965 = _1958 / _1962;
    float _2112;
    float _2113;
    float _2114;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1992 = ((uint(_1965 > cbSceneParam._m0[59u].y) + uint(_1965 > cbSceneParam._m0[59u].x)) + uint(_1965 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1993 = _1992 + 43u;
        uint _2001 = _1992 + 44u;
        uint _2009 = _1992 + 45u;
        uint _2017 = _1992 + 46u;
        float _2028 = fma(_1962, cbSceneParam._m0[_1993].w, fma(_1958, cbSceneParam._m0[_1993].z, fma(_1954, cbSceneParam._m0[_1993].y, _1950 * cbSceneParam._m0[_1993].x)));
        float _2032 = fma(_1962, cbSceneParam._m0[_2001].w, fma(_1958, cbSceneParam._m0[_2001].z, fma(_1954, cbSceneParam._m0[_2001].y, _1950 * cbSceneParam._m0[_2001].x)));
        float _2040 = fma(_1962, cbSceneParam._m0[_2017].w, fma(_1958, cbSceneParam._m0[_2017].z, fma(_1954, cbSceneParam._m0[_2017].y, _1950 * cbSceneParam._m0[_2017].x)));
        float _2045 = cbSceneParam._m0[33u].z * _2040;
        float _2047 = cbSceneParam._m0[33u].w * _2040;
        float _2050 = fma(_1962, cbSceneParam._m0[_2009].w, fma(_1958, cbSceneParam._m0[_2009].z, fma(_1954, cbSceneParam._m0[_2009].y, _1950 * cbSceneParam._m0[_2009].x))) / _2040;
        float _2098 = (cbSceneParam._m0[33u].x - sqrt(((_1964 * _1964) + (_1963 * _1963)) + (_1965 * _1965))) * cbSceneParam._m0[33u].y;
        float _4384 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2105 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2045 + _2028) / _2040, (_2047 + _2032) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2047 + _2028) / _2040, (_2032 - _2045) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 - _2045) / _2040, (_2032 - _2047) / _2040), _2050), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2028 - _2047) / _2040, (_2045 + _2032) / _2040), _2050), 0.0)).x), vec4(0.25)));
        _2112 = 1.0 - (_2105 * cbSceneParam._m0[34u].x);
        _2113 = 1.0 - (_2105 * cbSceneParam._m0[34u].y);
        _2114 = 1.0 - (_2105 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2112 = 1.0;
        _2113 = 1.0;
        _2114 = 1.0;
    }
    float _2178;
    float _2180;
    float _2182;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2166 = fma(_1962, cbSceneParam._m0[63u].w, fma(_1958, cbSceneParam._m0[63u].z, fma(_1954, cbSceneParam._m0[63u].y, _1950 * cbSceneParam._m0[63u].x)));
        float _2167 = fma(_1962, cbSceneParam._m0[60u].w, fma(_1958, cbSceneParam._m0[60u].z, fma(_1954, cbSceneParam._m0[60u].y, _1950 * cbSceneParam._m0[60u].x))) / _2166;
        float _2168 = fma(_1962, cbSceneParam._m0[61u].w, fma(_1958, cbSceneParam._m0[61u].z, fma(_1954, cbSceneParam._m0[61u].y, _1950 * cbSceneParam._m0[61u].x))) / _2166;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2167 >= cbSceneParam._m0[64u].x) && (_2168 >= cbSceneParam._m0[64u].y)) && (_2167 <= cbSceneParam._m0[64u].z)) && (_2168 <= cbSceneParam._m0[64u].w))
        {
            float _2306 = fma(_1962, cbSceneParam._m0[62u].w, fma(_1958, cbSceneParam._m0[62u].z, fma(_1954, cbSceneParam._m0[62u].y, _1950 * cbSceneParam._m0[62u].x))) / _2166;
            float _2310 = isnan(cbSceneParam._m0[41u].w) ? _2306 : (isnan(_2306) ? cbSceneParam._m0[41u].w : max(_2306, cbSceneParam._m0[41u].w));
            float _2353 = (cbSceneParam._m0[33u].x - sqrt(((_1964 * _1964) + (_1963 * _1963)) + (_1965 * _1965))) * cbSceneParam._m0[33u].y;
            float _4400 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
            float _2360 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2167, cbSceneParam._m0[33u].w + _2168), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2167, _2168 - cbSceneParam._m0[33u].z), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2167 - cbSceneParam._m0[33u].z, _2168 - cbSceneParam._m0[33u].w), _2310), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2167 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2168), _2310), 0.0)).x), vec4(0.25)));
            float _2364 = 1.0 - (_2360 * cbSceneParam._m0[34u].x);
            float _2365 = 1.0 - (_2360 * cbSceneParam._m0[34u].y);
            float _2366 = 1.0 - (_2360 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2366) ? _2114 : (isnan(_2114) ? _2366 : min(_2114, _2366));
            frontier_phi_34_33_ladder_1 = isnan(_2365) ? _2113 : (isnan(_2113) ? _2365 : min(_2113, _2365));
            frontier_phi_34_33_ladder_2 = isnan(_2364) ? _2112 : (isnan(_2112) ? _2364 : min(_2112, _2364));
        }
        else
        {
            frontier_phi_34_33_ladder = _2114;
            frontier_phi_34_33_ladder_1 = _2113;
            frontier_phi_34_33_ladder_2 = _2112;
        }
        _2178 = frontier_phi_34_33_ladder_2;
        _2180 = frontier_phi_34_33_ladder_1;
        _2182 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2178 = _2112;
        _2180 = _2113;
        _2182 = _2114;
    }
    uvec4 _2187 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _2189 = _2187.x * 14u;
    uint _2190 = _2189 + 13u;
    float _2197 = _892 + (-1.0);
    float _2202 = (cbLight._m0[_2190].x * _2197) + 1.0;
    float _2203 = (cbLight._m0[_2190].y * _2197) + 1.0;
    float _2204 = (cbLight._m0[_2190].z * _2197) + 1.0;
    float _2205 = (cbLight._m0[_2190].w * _2197) + 1.0;
    uint _2206 = _2189 + 5u;
    float _2212 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2216 = _2189 + 4u;
    float _2225 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
    uint _2229 = _2189 | 1u;
    float _2240 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_742, _743, _744));
    float _2243 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_742, _743, _744));
    float _4436 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _4447 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2248 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * 0.3183098733425140380859375;
    float _2250 = (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * 0.3183098733425140380859375;
    float _2257 = ((cbLight._m0[_2206].x * _2212) * _2250) + (((cbLight._m0[_2216].x * _2178) * _2225) * _2248);
    float _2258 = ((_2212 * cbLight._m0[_2206].y) * _2250) + (((cbLight._m0[_2216].y * _2180) * _2225) * _2248);
    float _2259 = ((_2212 * cbLight._m0[_2206].z) * _2250) + (((cbLight._m0[_2216].z * _2182) * _2225) * _2248);
    uvec4 _2263 = floatBitsToUint(cbLight._m0[_2189 + 12u]);
    bool _2265 = _2263.x == 0u;
    float _2367;
    float _2369;
    float _2371;
    if (_2265)
    {
        _2367 = _2257;
        _2369 = _2258;
        _2371 = _2259;
    }
    else
    {
        uint _2375 = _2189 + 6u;
        float _2391 = (dot(vec3(cbLight._m0[_2189 + 2u].xyz), vec3(_742, _743, _744)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4458 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2394 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2367 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2257;
        _2369 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2258;
        _2371 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2259;
    }
    bool _2374 = _2263.y == 0u;
    float _2429;
    float _2431;
    float _2433;
    if (_2374)
    {
        _2429 = _2367;
        _2431 = _2369;
        _2433 = _2371;
    }
    else
    {
        uint _2591 = _2189 + 7u;
        float _2607 = (dot(vec3(cbLight._m0[_2189 + 3u].xyz), vec3(_742, _743, _744)) * 0.5) + 0.5;
        float _2608 = _2607 * _2607;
        float _4474 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2609 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2610 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2429 = (((cbLight._m0[_2591].x * 0.3183098733425140380859375) * _2609) * _2610) + _2367;
        _2431 = (((cbLight._m0[_2591].y * 0.3183098733425140380859375) * _2609) * _2610) + _2369;
        _2433 = (((cbLight._m0[_2591].z * 0.3183098733425140380859375) * _2609) * _2610) + _2371;
    }
    uint _2436 = _2189 + 8u;
    float _2449 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _745) * 0.949999988079071044921875);
    float _2450 = _2449 * _2449;
    float _2451 = cbLight._m0[_2189].x + _821;
    float _2452 = cbLight._m0[_2189].y + _822;
    float _2453 = cbLight._m0[_2189].z + _823;
    float _2457 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
    float _2458 = _2457 * _2451;
    float _2459 = _2457 * _2452;
    float _2460 = _2457 * _2453;
    float _2461 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2189].xyz));
    float _4490 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _4501 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2465 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2466 = dot(vec3(_742, _743, _744), vec3(_2458, _2459, _2460));
    float _4512 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _2470 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2458, _2459, _2460));
    float _4523 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2474 = _2450 * _2450;
    float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
    float _2489 = (exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2490 = 1.0 - _2450;
    float _2501 = (0.5 / (((_2465 * ((_2464 * _2490) + _2450)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2490) + _2450) * _2464))) * _2464;
    float _4534 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2503 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
    uint _2517 = _2189 + 9u;
    float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _745) * 0.949999988079071044921875);
    float _2529 = _2528 * _2528;
    float _2530 = cbLight._m0[_2229].x + _821;
    float _2531 = cbLight._m0[_2229].y + _822;
    float _2532 = cbLight._m0[_2229].z + _823;
    float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
    float _2537 = _2536 * _2530;
    float _2538 = _2536 * _2531;
    float _2539 = _2536 * _2532;
    float _2540 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2229].xyz));
    float _4545 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
    float _2544 = dot(vec3(_742, _743, _744), vec3(_2537, _2538, _2539));
    float _4556 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2547 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
    float _2548 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2537, _2538, _2539));
    float _4567 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2552 = _2529 * _2529;
    float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
    float _2565 = (exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2566 = 1.0 - _2529;
    float _2576 = (0.5 / (((_2465 * ((_2543 * _2566) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2566) + _2529) * _2543))) * _2543;
    float _4578 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2578 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
    float _2588 = (((_2565 * cbLight._m0[_2517].x) * _2578) * _2212) + ((((cbLight._m0[_2436].x * _2178) * _2489) * _2503) * _2225);
    float _2589 = (((_2565 * cbLight._m0[_2517].y) * _2578) * _2212) + ((((cbLight._m0[_2436].y * _2180) * _2489) * _2503) * _2225);
    float _2590 = (((_2565 * cbLight._m0[_2517].z) * _2578) * _2212) + ((((cbLight._m0[_2436].z * _2182) * _2489) * _2503) * _2225);
    float _2646;
    float _2648;
    float _2650;
    if (_2265)
    {
        _2646 = _2588;
        _2648 = _2589;
        _2650 = _2590;
    }
    else
    {
        uint _2652 = _2189 + 2u;
        uint _2656 = _2189 + 10u;
        float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2652].w)) * _745) * 0.949999988079071044921875);
        float _2671 = _2670 * _2670;
        float _2672 = cbLight._m0[_2652].x + _821;
        float _2673 = cbLight._m0[_2652].y + _822;
        float _2674 = cbLight._m0[_2652].z + _823;
        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
        float _2679 = _2678 * _2672;
        float _2680 = _2678 * _2673;
        float _2681 = _2678 * _2674;
        float _2682 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2652].xyz));
        float _4589 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2686 = dot(vec3(_742, _743, _744), vec3(_2679, _2680, _2681));
        float _4600 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2690 = dot(vec3(cbLight._m0[_2652].xyz), vec3(_2679, _2680, _2681));
        float _4611 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2694 = _2671 * _2671;
        float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
        float _2707 = (exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2708 = 1.0 - _2671;
        float _2718 = (0.5 / (((_2465 * ((_2685 * _2708) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2708) + _2671) * _2685))) * _2685;
        float _4622 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2720 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
        float _2721 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2646 = (((_2707 * cbLight._m0[_2656].x) * _2720) * _2721) + _2588;
        _2648 = (((_2707 * cbLight._m0[_2656].y) * _2720) * _2721) + _2589;
        _2650 = (((_2707 * cbLight._m0[_2656].z) * _2720) * _2721) + _2590;
    }
    float _2752;
    float _2754;
    float _2756;
    if (_2374)
    {
        _2752 = _2646;
        _2754 = _2648;
        _2756 = _2650;
    }
    else
    {
        uint _2763 = _2189 + 3u;
        uint _2767 = _2189 + 11u;
        float _2781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2763].w)) * _745) * 0.949999988079071044921875);
        float _2782 = _2781 * _2781;
        float _2783 = cbLight._m0[_2763].x + _821;
        float _2784 = cbLight._m0[_2763].y + _822;
        float _2785 = cbLight._m0[_2763].z + _823;
        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
        float _2790 = _2789 * _2783;
        float _2791 = _2789 * _2784;
        float _2792 = _2789 * _2785;
        float _2793 = dot(vec3(_742, _743, _744), vec3(cbLight._m0[_2763].xyz));
        float _4638 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2797 = dot(vec3(_742, _743, _744), vec3(_2790, _2791, _2792));
        float _4649 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
        float _2801 = dot(vec3(cbLight._m0[_2763].xyz), vec3(_2790, _2791, _2792));
        float _4660 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2805 = _2782 * _2782;
        float _2809 = ((_2800 * _2800) * (_2805 + (-1.0))) + 1.0;
        float _2818 = (exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2819 = 1.0 - _2782;
        float _2829 = (0.5 / (((_2465 * ((_2796 * _2819) + _2782)) + 9.9999999392252902907785028219223e-09) + (((_2465 * _2819) + _2782) * _2796))) * _2796;
        float _4671 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2831 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2805 / ((_2809 * _2809) * 3.141590118408203125));
        float _2832 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2752 = (((_2818 * cbLight._m0[_2767].x) * _2831) * _2832) + _2646;
        _2754 = (((_2818 * cbLight._m0[_2767].y) * _2831) * _2832) + _2648;
        _2756 = (((_2818 * cbLight._m0[_2767].z) * _2831) * _2832) + _2650;
    }
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    float _2908;
    if (_2187.y == 0u)
    {
        uvec4 _2853 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2854 = _2853.x;
        uint _2865 = uint((float(_2853.y) * floor(float(uint(cbSceneParam._m0[85u].y * _830) / _2854))) + floor(float(uint(cbSceneParam._m0[85u].x * _829) / _2854)));
        float _2875 = (log2(_1965 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2876 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        uint _2879 = uint(isnan(14.0) ? _2876 : (isnan(_2876) ? 14.0 : min(_2876, 14.0)));
        uvec4 _2884 = texelFetch(g_lightClusterGridBuffer, int(((_2879 << 2u) + (_2865 << 6u)) >> 2u));
        uint _2885 = _2884.x;
        uint _2886 = _2853.z;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        if (((((1u << ((_2886 >> 4u) & 15u)) + 4294967295u) & _2885) == 0u) || ((_2886 & 240u) == 0u))
        {
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
        }
        else
        {
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            uint _3115 = 0u;
            uint _3124;
            bool _3125;
            for (;;)
            {
                _3124 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3115 << 2u)) >> 2u)).x;
                _3125 = _3124 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3125)
                {
                    frontier_phi_66_pred = _3114;
                    frontier_phi_66_pred_1 = _3113;
                    frontier_phi_66_pred_2 = _3112;
                    frontier_phi_66_pred_3 = _3111;
                    frontier_phi_66_pred_4 = _3110;
                    frontier_phi_66_pred_5 = _3109;
                }
                else
                {
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    uint _3239;
                    _3233 = _3109;
                    _3234 = _3110;
                    _3235 = _3111;
                    _3236 = _3112;
                    _3237 = _3113;
                    _3238 = _3114;
                    _3239 = _3124;
                    float _3165;
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    for (;;)
                    {
                        uint _3243 = uint(findLSB(_3239)) + (_3115 << 5u);
                        uint _3240 = (_3239 + 4294967295u) & _3239;
                        uint _3245 = _3243 * 48u;
                        vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3245)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3245 + 3u)).x));
                        uint _3265 = (_3243 * 48u) + 4u;
                        vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3265)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3265 + 3u)).x));
                        uint _3284 = (_3243 * 48u) + 8u;
                        vec3 _3295 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x));
                        float _3299 = _3259.x - _1963;
                        float _3300 = _3259.y - _1964;
                        float _3301 = _3259.z - _1965;
                        float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                        float _3305 = inversesqrt(_3302);
                        float _3306 = _3305 * _3299;
                        float _3307 = _3305 * _3300;
                        float _3308 = _3305 * _3301;
                        float _3309 = dot(vec3(_848, _851, _854), vec3(_3306, _3307, _3308));
                        float _3314 = 1.0 - (_3302 * _3259.w);
                        float _4697 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3315 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3316 = sqrt(_3302) * _3278.w;
                        float _3319 = 1.39999997615814208984375 / (_3316 + 1.39999997615814208984375);
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3309) + _3320;
                        float _3326 = _3316 * _3316;
                        float _3330 = ((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3315) / ((_3326 * 0.699999988079071044921875) + 1.0);
                        float _3334 = (-0.0) - _1963;
                        float _3335 = (-0.0) - _1964;
                        float _3336 = (-0.0) - _1965;
                        float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                        float _3341 = _3340 * _3334;
                        float _3342 = _3340 * _3335;
                        float _3343 = _3340 * _3336;
                        float _3350 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                        float _3351 = 1.0 - _908;
                        float _3358 = sqrt(1.0 - ((1.0 - (_3351 * _3351)) * (1.0 - (_3350 * _3350))));
                        float _3359 = _3358 * _3358;
                        float _3360 = _3359 * _3359;
                        float _3361 = _3341 + _3306;
                        float _3362 = _3342 + _3307;
                        float _3363 = _3343 + _3308;
                        float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                        float _3371 = dot(vec3(_848, _851, _854), vec3(_3341, _3342, _3343));
                        float _4713 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                        float _3374 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3375 = dot(vec3(_848, _851, _854), vec3(_3367 * _3361, _3367 * _3362, _3367 * _3363));
                        float _4724 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3378 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                        float _3382 = ((_3378 * _3378) * (_3360 + (-1.0))) + 1.0;
                        float _3383 = _3319 * _3359;
                        float _3384 = _3383 * _3383;
                        float _3387 = ((1.0 - _3384) * _3309) + _3384;
                        float _4735 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3388 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3389 = 1.0 - _3359;
                        float _3399 = (0.5 / (((_3388 * ((_3374 * _3389) + _3359)) + 9.9999999392252902907785028219223e-09) + (((_3388 * _3389) + _3359) * _3374))) * _3388;
                        float _4746 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3410 = (((_3360 * 3.1415927410125732421875) * (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) / ((_3382 * _3382) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125))) * _3315;
                        _3168 = (_3330 * _3278.x) + _3236;
                        _3169 = (_3330 * _3278.y) + _3237;
                        _3170 = (_3330 * _3278.z) + _3238;
                        _3165 = (_3410 * _3295.x) + _3233;
                        _3166 = (_3410 * _3295.y) + _3234;
                        _3167 = (_3410 * _3295.z) + _3235;
                        if (_3240 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3233 = _3165;
                            _3234 = _3166;
                            _3235 = _3167;
                            _3236 = _3168;
                            _3237 = _3169;
                            _3238 = _3170;
                            _3239 = _3240;
                        }
                    }
                    frontier_phi_66_pred = _3170;
                    frontier_phi_66_pred_1 = _3169;
                    frontier_phi_66_pred_2 = _3168;
                    frontier_phi_66_pred_3 = _3167;
                    frontier_phi_66_pred_4 = _3166;
                    frontier_phi_66_pred_5 = _3165;
                }
                _2976 = frontier_phi_66_pred;
                _2974 = frontier_phi_66_pred_1;
                _2972 = frontier_phi_66_pred_2;
                _2970 = frontier_phi_66_pred_3;
                _2968 = frontier_phi_66_pred_4;
                _2966 = frontier_phi_66_pred_5;
                uint _3116 = _3115 + 1u;
                if (_3116 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3109 = _2966;
                    _3110 = _2968;
                    _3111 = _2970;
                    _3112 = _2972;
                    _3113 = _2974;
                    _3114 = _2976;
                    _3115 = _3116;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
        }
        uvec4 _2979 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2980 = _2979.z;
        uint _2982 = (_2980 >> 8u) & 15u;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        if (((4294967295u << _2982) & _2885) == 0u)
        {
            _3077 = _2965;
            _3079 = _2967;
            _3081 = _2969;
            _3083 = _2971;
            _3085 = _2973;
            _3087 = _2975;
        }
        else
        {
            float _3102 = inversesqrt(dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965)));
            float _3103 = _3102 * _1963;
            float _3104 = _3102 * _1964;
            float _3105 = _3102 * _1965;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2982 < ((_2980 >> 12u) & 15u))
            {
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3086;
                float _3088;
                float _3216 = _2965;
                float _3217 = _2967;
                float _3218 = _2969;
                float _3219 = _2971;
                float _3220 = _2973;
                float _3221 = _2975;
                uint _3222 = _2982;
                uint _3231;
                bool _3232;
                for (;;)
                {
                    _3231 = texelFetch(g_lightClassification, int((((_2879 << 5u) + (_2865 << 9u)) + (_3222 << 2u)) >> 2u)).x;
                    _3232 = _3231 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3232)
                    {
                        frontier_phi_72_pred = _3221;
                        frontier_phi_72_pred_1 = _3220;
                        frontier_phi_72_pred_2 = _3219;
                        frontier_phi_72_pred_3 = _3218;
                        frontier_phi_72_pred_4 = _3217;
                        frontier_phi_72_pred_5 = _3216;
                    }
                    else
                    {
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3708;
                        float _3709;
                        float _3710;
                        float _3711;
                        float _3712;
                        float _3713;
                        float _3428 = _3216;
                        float _3429 = _3217;
                        float _3430 = _3218;
                        float _3431 = _3219;
                        float _3432 = _3220;
                        float _3433 = _3221;
                        uint _3434 = _3231;
                        uint _3435;
                        vec4 _3460;
                        float _3461;
                        vec4 _3476;
                        vec3 _3488;
                        vec4 _3503;
                        vec4 _3518;
                        float _3564;
                        bool _3565;
                        for (;;)
                        {
                            uint _3445 = ((_3222 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3434));
                            _3435 = (_3434 + 4294967295u) & _3434;
                            uint _3447 = _3445 * 40u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            _3461 = _3460.w;
                            uint _3463 = (_3445 * 40u) + 4u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3478 = (_3445 * 40u) + 8u;
                            _3488 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x));
                            uint _3490 = (_3445 * 40u) + 16u;
                            _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3505 = (_3445 * 40u) + 20u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3445 * 40u) + 24u;
                            vec4 _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3539 = (_3445 * 40u) + 28u;
                            vec4 _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            _3564 = fma(_1965, _3552.z, fma(_1964, _3552.y, _3552.x * _1963)) + _3552.w;
                            _3565 = !((fma(_1965, _3533.z, fma(_1964, _3533.y, _3533.x * _1963)) + _3533.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3565)
                            {
                                float _3592 = _3460.x - _1963;
                                float _3593 = _3460.y - _1964;
                                float _3594 = _3460.z - _1965;
                                float _3595 = dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594));
                                float _3598 = inversesqrt(_3595);
                                float _3599 = _3598 * _3592;
                                float _3600 = _3598 * _3593;
                                float _3601 = _3598 * _3594;
                                float _3605 = 1.0 - (_3595 / (_3461 * _3461));
                                float _4757 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3606 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3610 = sqrt(_3595) * _3476.w;
                                float _3612 = 1.39999997615814208984375 / (_3610 + 1.39999997615814208984375);
                                float _3613 = _3612 * _3612;
                                float _3616 = ((1.0 - _3613) * dot(vec3(_3599, _3600, _3601), vec3(_848, _851, _854))) + _3613;
                                float _3619 = _3610 * _3610;
                                float _3623 = (fma(_1965, _3503.z, fma(_1964, _3503.y, _3503.x * _1963)) + _3503.w) / _3564;
                                float _3624 = (fma(_1965, _3518.z, fma(_1964, _3518.y, _3518.x * _1963)) + _3518.w) / _3564;
                                float _3628 = 1.0 - dot(vec2(_3623, _3624), vec2(_3623, _3624));
                                float _4773 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                                float _3629 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3630 = _3629 * (((isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0))) * _3606) / ((_3619 * 0.699999988079071044921875) + 1.0));
                                float _3642 = exp2(log2(1.0 / ((_3619 * 3.5) + 5.0)) * 0.25);
                                float _3643 = 1.0 - _908;
                                float _3650 = sqrt(1.0 - ((1.0 - (_3643 * _3643)) * (1.0 - (_3642 * _3642))));
                                float _3651 = _3650 * _3650;
                                float _3652 = _3651 * _3651;
                                float _3653 = _3599 - _3103;
                                float _3654 = _3600 - _3104;
                                float _3655 = _3601 - _3105;
                                float _3659 = inversesqrt(dot(vec3(_3653, _3654, _3655), vec3(_3653, _3654, _3655)));
                                float _3663 = dot(vec3(_848, _851, _854), vec3((-0.0) - _3103, (-0.0) - _3104, (-0.0) - _3105));
                                float _4784 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3666 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3667 = dot(vec3(_848, _851, _854), vec3(_3659 * _3653, _3659 * _3654, _3659 * _3655));
                                float _4795 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                                float _3670 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3674 = ((_3670 * _3670) * (_3652 + (-1.0))) + 1.0;
                                float _3675 = _3612 * _3651;
                                float _3676 = _3675 * _3675;
                                float _3682 = ((1.0 - _3676) * dot(vec3(_848, _851, _854), vec3(_3599, _3600, _3601))) + _3676;
                                float _4806 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                                float _3684 = 1.0 - _3651;
                                float _3694 = (0.5 / (((_3683 * ((_3666 * _3684) + _3651)) + 9.9999999392252902907785028219223e-09) + (((_3683 * _3684) + _3651) * _3666))) * _3683;
                                float _4817 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                                float _3704 = (_3629 * _3606) * (((_3652 * 3.1415927410125732421875) * (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) / ((_3674 * _3674) * ((_3619 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3630 * _3476.y;
                                frontier_phi_78_pred_1 = _3630 * _3476.x;
                                frontier_phi_78_pred_2 = _3704 * _3488.z;
                                frontier_phi_78_pred_3 = _3704 * _3488.y;
                                frontier_phi_78_pred_4 = _3704 * _3488.x;
                                frontier_phi_78_pred_5 = _3630 * _3476.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3712 = frontier_phi_78_pred;
                            _3711 = frontier_phi_78_pred_1;
                            _3710 = frontier_phi_78_pred_2;
                            _3709 = frontier_phi_78_pred_3;
                            _3708 = frontier_phi_78_pred_4;
                            _3713 = frontier_phi_78_pred_5;
                            _3418 = _3711 + _3431;
                            _3419 = _3712 + _3432;
                            _3420 = _3713 + _3433;
                            _3415 = _3708 + _3428;
                            _3416 = _3709 + _3429;
                            _3417 = _3710 + _3430;
                            if (_3435 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3428 = _3415;
                                _3429 = _3416;
                                _3430 = _3417;
                                _3431 = _3418;
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3435;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3420;
                        frontier_phi_72_pred_1 = _3419;
                        frontier_phi_72_pred_2 = _3418;
                        frontier_phi_72_pred_3 = _3417;
                        frontier_phi_72_pred_4 = _3416;
                        frontier_phi_72_pred_5 = _3415;
                    }
                    _3088 = frontier_phi_72_pred;
                    _3086 = frontier_phi_72_pred_1;
                    _3084 = frontier_phi_72_pred_2;
                    _3082 = frontier_phi_72_pred_3;
                    _3080 = frontier_phi_72_pred_4;
                    _3078 = frontier_phi_72_pred_5;
                    uint _3223 = _3222 + 1u;
                    if (_3223 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3216 = _3078;
                        _3217 = _3080;
                        _3218 = _3082;
                        _3219 = _3084;
                        _3220 = _3086;
                        _3221 = _3088;
                        _3222 = _3223;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3088;
                frontier_phi_60_61_ladder_1 = _3086;
                frontier_phi_60_61_ladder_2 = _3082;
                frontier_phi_60_61_ladder_3 = _3080;
                frontier_phi_60_61_ladder_4 = _3078;
                frontier_phi_60_61_ladder_5 = _3084;
            }
            else
            {
                frontier_phi_60_61_ladder = _2975;
                frontier_phi_60_61_ladder_1 = _2973;
                frontier_phi_60_61_ladder_2 = _2969;
                frontier_phi_60_61_ladder_3 = _2967;
                frontier_phi_60_61_ladder_4 = _2965;
                frontier_phi_60_61_ladder_5 = _2971;
            }
            _3077 = frontier_phi_60_61_ladder_4;
            _3079 = frontier_phi_60_61_ladder_3;
            _3081 = frontier_phi_60_61_ladder_2;
            _3083 = frontier_phi_60_61_ladder_5;
            _3085 = frontier_phi_60_61_ladder_1;
            _3087 = frontier_phi_60_61_ladder;
        }
        float _3092 = isnan(1.0) ? _892 : (isnan(_892) ? 1.0 : min(_892, 1.0));
        _2898 = (_3092 * _3083) + _2429;
        _2900 = (_3092 * _3085) + _2431;
        _2902 = (_3092 * _3087) + _2433;
        _2904 = ((_3077 * 0.039999999105930328369140625) * _3092) + _2752;
        _2906 = ((_3079 * 0.039999999105930328369140625) * _3092) + _2754;
        _2908 = ((_3081 * 0.039999999105930328369140625) * _3092) + _2756;
    }
    else
    {
        _2898 = _2429;
        _2900 = _2431;
        _2902 = _2433;
        _2904 = _2752;
        _2906 = _2754;
        _2908 = _2756;
    }
    float _4833 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4844 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4855 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    uint _2928 = _251 + 6u;
    float _2936 = _829 / cbSceneParam._m0[86u].x;
    float _2937 = _830 / cbSceneParam._m0[86u].y;
    vec4 _2951 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2936, _2937, (log2((isnan(cbSceneParam._m0[77u].w) ? _763 : (isnan(_763) ? cbSceneParam._m0[77u].w : min(_763, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2953 = _2951.x;
    float _2954 = _2951.y;
    float _2955 = _2951.z;
    float _2956 = _2951.w;
    float _3027;
    float _3029;
    float _3031;
    float _3033;
    if (_763 > cbSceneParam._m0[78u].w)
    {
        float _2990 = isnan(_763) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _763 : min(cbSceneParam._m0[80u].w, _763));
        float _2991 = _2990 / _763;
        float _3002 = _2991 * _814;
        float _3003 = _815 * _2991;
        float _3004 = (-0.0) - _3003;
        float _3005 = _2991 * _816;
        float _3007 = (cbSceneParam._m0[77u].w * _3004) / _2990;
        float _3008 = _3007 + cbSceneParam._m0[79u].w;
        float _3009 = cbSceneParam._m0[79u].w - _3003;
        float _3015 = sqrt(((_3002 * _3002) + (_3003 * _3003)) + (_3005 * _3005));
        float _3018 = (1.0 - (cbSceneParam._m0[77u].w / _2990)) * _3015;
        float _3023 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3025 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3178;
        if (abs((_3004 - _3007) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3178 = ((((_3008 > 0.0) ? exp2(_3023 * _3008) : (2.0 - exp2(_3025 * _3008))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3018;
        }
        else
        {
            float _3138 = 1.0 / cbSceneParam._m0[80u].x;
            float _3139 = isnan(_3009) ? _3008 : (isnan(_3008) ? _3009 : max(_3008, _3009));
            float _3140 = isnan(_3009) ? _3008 : (isnan(_3008) ? _3009 : min(_3008, _3009));
            float _3149 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : min(_3139, 0.0));
            float _3150 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : min(_3140, 0.0));
            _3178 = ((abs(_3015 / _3004) * cbSceneParam._m0[80u].y) * ((((_3149 - _3150) * 2.0) - ((exp2(_3023 * (isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0)))) - exp2(_3023 * (isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0))))) * _3138)) - ((exp2(_3025 * _3149) - exp2(_3025 * _3150)) * _3138))) + (_3018 * cbSceneParam._m0[80u].z);
        }
        vec4 _3180 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2936, _2937, 1.0), 0.0);
        float _3189 = exp2((_3178 * (-1.44269502162933349609375)) * (1.0 - _3180.w));
        float _3190 = log2(_3189);
        float _3206 = log2(_2956);
        _3027 = (exp2(_3206 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].x)) * _3180.x) / cbSceneParam._m0[78u].x)) + _2953;
        _3029 = (exp2(_3206 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].y)) * _3180.y) / cbSceneParam._m0[78u].y)) + _2954;
        _3031 = (exp2(_3206 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3190 * cbSceneParam._m0[78u].z)) * _3180.z) / cbSceneParam._m0[78u].z)) + _2955;
        _3033 = _3189 * _2956;
    }
    else
    {
        _3027 = _2953;
        _3029 = _2954;
        _3031 = _2955;
        _3033 = _2956;
    }
    float _3045 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3046 = _3045 == 3.0;
    float _3047 = log2(_3033);
    float _3054 = exp2(_3047 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2898 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _892))) + ((_2904 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _3055 = exp2(_3047 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2900 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _892))) + ((_2906 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _3056 = exp2(_3047 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * (_2902 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _892))) + ((_2908 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1697)) * cbPerFrame._m0[3u].x));
    float _3065 = (_3045 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3065 * (_3046 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3027)));
    SV_Target.y = _3065 * (_3046 ? _3055 : (_3055 + (cbSceneParam._m0[72u].w * _3029)));
    SV_Target.z = _3065 * (_3046 ? _3056 : (_3056 + (cbSceneParam._m0[72u].w * _3031)));
    SV_Target.w = cbInstanceData._m0[_2928].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2928].w;
}


