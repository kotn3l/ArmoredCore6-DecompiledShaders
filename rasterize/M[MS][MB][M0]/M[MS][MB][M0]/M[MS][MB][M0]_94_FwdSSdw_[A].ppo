#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1351;
float _3735;
float _3736;
float _3737;
float _3738;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3747 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3758 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3769 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _410 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _410) * cbMtdParam._m0[24u].x) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3780 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _435 = (_428 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _436 = (_428 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _437 = (_428 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) + _447;
    vec4 _474 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _516 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = _516.x;
    float _519 = _516.y;
    float _520 = _516.z;
    float _529 = ((_499.z - _520) * _428) + _520;
    float _532 = ((((_499.x - _518) * _428) + _518) * 2.0) + (-1.0);
    float _533 = ((((_499.y - _519) * _428) + _519) * 2.0) + (-1.0);
    float _534 = dot(vec2(_532, _533), vec2(_532, _533));
    float _3791 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _539 = sqrt(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))));
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _582 = _580.x;
    float _583 = 1.0 - _582;
    float _589 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _592 = ((isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : min(_589, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _601 = (_592 - ((((((_582 - _583) * cbMtdParam._m0[24u].z) + _583) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _592))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3812 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _602 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    float _609 = (_602 * (cbMtdParam._m0[17u].x - _454)) + _454;
    float _610 = (_602 * (cbMtdParam._m0[17u].y - _455)) + _455;
    float _611 = (_602 * (cbMtdParam._m0[17u].z - _456)) + _456;
    vec4 _623 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _625 = _623.x;
    float _626 = 1.0 - _625;
    float _651 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_625 - _626) * cbMtdParam._m0[24u].w) + _626) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3823 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _652 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _660 = ((((cbMtdParam._m0[10u].x - _609) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _652) + _609;
    float _661 = ((((cbMtdParam._m0[10u].y - _610) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _652) + _610;
    float _662 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _611)) * _652) + _611;
    float _667 = (((_474.z - _529) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _529;
    float _671 = ((_555.z - _667) * cbMtdParam._m0[19u].w) + _667;
    vec4 _685 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _692 = (_685.x * 2.0) + (-1.0);
    float _693 = (_685.y * 2.0) + (-1.0);
    float _694 = dot(vec2(_692, _693), vec2(_692, _693));
    float _3834 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _702 = (_602 * (_685.z - _671)) + _671;
    float _705 = ((cbMtdParam._m0[23u].y - _702) * _652) + _702;
    vec4 _724 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _730 = (_724.x * 2.0) + (-1.0);
    float _731 = (_724.y * 2.0) + (-1.0);
    float _732 = dot(vec2(_730, _731), vec2(_730, _731));
    float _3845 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _746 = (_532 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_474.x * 2.0) + (-1.0)))) + (((_555.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _747 = (_533 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_474.y * 2.0) + (-1.0)))) + (((_555.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _759 = (((_692 - _746) + (cbMtdParam._m0[21u].x * _746)) * _602) + _746;
    float _760 = (((_693 - _747) + (cbMtdParam._m0[21u].x * _747)) * _602) + _747;
    float _761 = (_602 * (sqrt(1.0 - (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) - _539)) + _539;
    float _772 = (((_730 - _759) + (_759 * cbMtdParam._m0[22u].z)) * _652) + _759;
    float _773 = (((_731 - _760) + (_760 * cbMtdParam._m0[22u].z)) * _652) + _760;
    float _774 = ((sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) - _761) * _652) + _761;
    float _776 = cbMtdParam._m0[22u].x + _555.w;
    float _779 = fma(_774, _247 * NORMAL.x, fma(_773, _254 * TANGENT.x, (_240 * _232) * _772));
    float _782 = fma(_774, _247 * NORMAL.y, fma(_773, _254 * TANGENT.y, (_240 * _233) * _772));
    float _785 = fma(_774, _247 * NORMAL.z, fma(_773, _254 * TANGENT.z, (_240 * _234) * _772));
    float _789 = inversesqrt(dot(vec3(_779, _782, _785), vec3(_779, _782, _785)));
    float _790 = _789 * _779;
    float _791 = _789 * _782;
    float _792 = _789 * _785;
    float _3856 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _793 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _3878 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3889 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _3900 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _811 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _862 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _852);
    float _863 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _852);
    float _864 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _852);
    float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
    float _869 = _862 * _868;
    float _870 = _863 * _868;
    float _871 = _864 * _868;
    vec4 _876 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _878 = _876.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1032 = sqrt(((_862 * _862) + (_863 * _863)) + (_864 * _864));
        float _1038 = (cbMatDynParam._m0[5u].x * _1032) + cbMatDynParam._m0[5u].y;
        float _3911 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1043 = (cbMatDynParam._m0[5u].z * _1032) + cbMatDynParam._m0[5u].w;
        float _3922 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) - _1039)) + _1039) < ((_878 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _889 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _890 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _908 = fma(_792, cbSceneParam._m0[5u].z, fma(_791, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _790));
    float _911 = fma(_792, cbSceneParam._m0[6u].z, fma(_791, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _790));
    float _914 = fma(_792, cbSceneParam._m0[7u].z, fma(_791, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _790));
    uint _927 = _279 + 9u;
    uint _928 = _927 + uint(cbMatDynParam._m0[0u].w);
    float _934 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) * cbInstanceData._m0[_928].x;
    float _935 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_928].y;
    float _936 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_928].z;
    float _3933 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    vec4 _948 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _889, cbSceneParam._m0[86u].y * _890));
    float _952 = ((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * TEXCOORD_5.w) * _948.x;
    float _953 = dot(vec3(_790, _791, _792), vec3(_869, _870, _871));
    float _956 = _953 * 2.0;
    float _960 = (_956 * _790) - _869;
    float _961 = (_956 * _791) - _870;
    float _962 = (_956 * _792) - _871;
    float _966 = abs(dot(vec3(_869, _870, _871), vec3(_790, _791, _792)));
    float _3966 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _968 = sqrt(_793);
    float _981 = exp2((_968 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_968 * 3.0));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1350;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1075 = fma(_1021, cbModelParam._m0[26u].z, fma(_1017, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013));
        float _1079 = fma(_1021, cbModelParam._m0[27u].z, fma(_1017, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013));
        float _1083 = fma(_1021, cbModelParam._m0[28u].z, fma(_1017, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013));
        float _1108 = _1013 + _790;
        float _1109 = _1017 + _791;
        float _1110 = _1021 + _792;
        float _1120 = fma(_1110, cbModelParam._m0[26u].z, fma(_1109, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1108)) - _1075;
        float _1121 = fma(_1110, cbModelParam._m0[27u].z, fma(_1109, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1108)) - _1079;
        float _1122 = fma(_1110, cbModelParam._m0[28u].z, fma(_1109, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1108)) - _1083;
        float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
        float _1139 = ((_1126 * _1120) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1075 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1126 * _1121) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1079 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1126 * _1122) / cbModelParam._m0[34u].z) + ((((((_1083 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        float _1178 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1144.x + (-0.5));
        float _1180 = _1178 * (_1144.y + (-0.5));
        float _1181 = _1178 * (_1144.z + (-0.5));
        float _1188 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1151.x + (-0.5));
        float _1190 = _1188 * (_1151.y + (-0.5));
        float _1191 = _1188 * (_1151.z + (-0.5));
        float _1198 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1158.x + (-0.5));
        float _1200 = _1198 * (_1158.y + (-0.5));
        float _1201 = _1198 * (_1158.z + (-0.5));
        float _1208 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1165.x + (-0.5));
        float _1210 = _1208 * (_1165.y + (-0.5));
        float _1211 = _1208 * (_1165.z + (-0.5));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = _1179 * 0.5;
        float _1216 = _1189 * 0.5;
        float _1217 = _1199 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1232 = (dot(vec3(_790, _791, _792), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1242 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _4014 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1244 + 1.0))) + _1249) * _1212;
        float _1259 = _1180 * 0.5;
        float _1260 = _1190 * 0.5;
        float _1261 = _1200 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_790, _791, _792), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _4047 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1286 + 1.0))) + _1291) * _1213;
        float _1301 = _1181 * 0.5;
        float _1302 = _1191 * 0.5;
        float _1303 = _1201 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_790, _791, _792), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _4080 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1328 + 1.0))) + _1333) * _1214;
        _1350 = _1181;
        _1352 = _1180;
        _1353 = _1179;
        _1354 = _1191;
        _1355 = _1190;
        _1356 = _1189;
        _1357 = _1201;
        _1358 = _1200;
        _1359 = _1199;
        _1360 = _1214;
        _1361 = _1213;
        _1362 = _1212;
        _1363 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
    }
    else
    {
        _1350 = _1351;
        _1352 = _1351;
        _1353 = _1351;
        _1354 = _1351;
        _1355 = _1351;
        _1356 = _1351;
        _1357 = _1351;
        _1358 = _1351;
        _1359 = _1351;
        _1360 = _1351;
        _1361 = _1351;
        _1362 = _1351;
        _1363 = 0.0;
        _1364 = 0.0;
        _1365 = 0.0;
    }
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1393 = fma(_1021, cbModelParam._m0[30u].z, fma(_1017, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1013));
        float _1397 = fma(_1021, cbModelParam._m0[31u].z, fma(_1017, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1013));
        float _1401 = fma(_1021, cbModelParam._m0[32u].z, fma(_1017, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1013));
        float _1424 = _1013 + _790;
        float _1425 = _1017 + _791;
        float _1426 = _1021 + _792;
        float _1436 = fma(_1426, cbModelParam._m0[30u].z, fma(_1425, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1424)) - _1393;
        float _1437 = fma(_1426, cbModelParam._m0[31u].z, fma(_1425, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1424)) - _1397;
        float _1438 = fma(_1426, cbModelParam._m0[32u].z, fma(_1425, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1424)) - _1401;
        float _1442 = inversesqrt(dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438)));
        float _1455 = ((_1442 * _1436) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1393 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1442 * _1437) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1397 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1442 * _1438) / cbModelParam._m0[35u].z) + ((((((_1401 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        float _1492 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1459.x + (-0.5));
        float _1494 = _1492 * (_1459.y + (-0.5));
        float _1495 = _1492 * (_1459.z + (-0.5));
        float _1502 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1466.x + (-0.5));
        float _1504 = _1502 * (_1466.y + (-0.5));
        float _1505 = _1502 * (_1466.z + (-0.5));
        float _1512 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1473.x + (-0.5));
        float _1514 = _1512 * (_1473.y + (-0.5));
        float _1515 = _1512 * (_1473.z + (-0.5));
        float _1522 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1480.x + (-0.5));
        float _1524 = _1522 * (_1480.y + (-0.5));
        float _1525 = _1522 * (_1480.z + (-0.5));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = _1493 * 0.5;
        float _1530 = _1503 * 0.5;
        float _1531 = _1513 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_790, _791, _792), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4143 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1556 + 1.0))) + _1561) * _1526;
        float _1571 = _1494 * 0.5;
        float _1572 = _1504 * 0.5;
        float _1573 = _1514 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_790, _791, _792), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4176 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1598 + 1.0))) + _1603) * _1527;
        float _1613 = _1495 * 0.5;
        float _1614 = _1505 * 0.5;
        float _1615 = _1515 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_790, _791, _792), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4209 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1640 + 1.0))) + _1645) * _1528;
        _1662 = _1495;
        _1663 = _1494;
        _1664 = _1493;
        _1665 = _1505;
        _1666 = _1504;
        _1667 = _1503;
        _1668 = _1515;
        _1669 = _1514;
        _1670 = _1513;
        _1671 = _1528;
        _1672 = _1527;
        _1673 = _1526;
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
    }
    else
    {
        _1662 = _1351;
        _1663 = _1351;
        _1664 = _1351;
        _1665 = _1351;
        _1666 = _1351;
        _1667 = _1351;
        _1668 = _1351;
        _1669 = _1351;
        _1670 = _1351;
        _1671 = _1351;
        _1672 = _1351;
        _1673 = _1351;
        _1674 = 0.0;
        _1675 = 0.0;
        _1676 = 0.0;
    }
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1363)) + _1363;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1364)) + _1364;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1365)) + _1365;
    float _1709 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1686));
    float _1730 = _960 * 0.5;
    float _1731 = _961 * 0.5;
    float _1732 = _962 * 0.5;
    float _1733 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1736 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1739 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1773;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1746 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1350, _1354, _1357, _1360));
        float _1750 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1352, _1355, _1358, _1361));
        float _1754 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1761 = dot(vec4(cbModelParam._m0[39u]), vec4(_1730, _1731, _1732, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1784;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1775 = dot(vec4(cbModelParam._m0[40u]), vec4(_1730, _1731, _1732, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1788 = (_1784 * cbModelParam._m0[1u].x) + (_1773 * (1.0 - cbModelParam._m0[1u].x));
    float _1798 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _793);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1798 : min(cbModelParam._m0[25u].z, _1798));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1847 = fma(_1021, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1013)) + cbModelParam._m0[13u].w;
        float _1851 = fma(_1021, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1013)) + cbModelParam._m0[14u].w;
        float _1855 = fma(_1021, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1013)) + cbModelParam._m0[15u].w;
        float _1858 = fma(_962, cbModelParam._m0[13u].z, fma(_961, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960));
        float _1861 = fma(_962, cbModelParam._m0[14u].z, fma(_961, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960));
        float _1864 = fma(_962, cbModelParam._m0[15u].z, fma(_961, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960));
        float _1892;
        if (_1858 > 0.0)
        {
            _1892 = abs((1.0 - _1847) / _1858);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1847 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1892 = frontier_phi_17_15_ladder;
        }
        float _2114;
        if (_1861 > 0.0)
        {
            _2114 = abs((1.0 - _1851) / _1861);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1851 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2114 = frontier_phi_26_22_ladder;
        }
        float _2360;
        if (_1864 > 0.0)
        {
            _2360 = abs((1.0 - _1855) / _1864);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1855 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2360 = frontier_phi_38_33_ladder;
        }
        float _2362 = isnan(_2114) ? _1892 : (isnan(_1892) ? _2114 : min(_1892, _2114));
        float _2363 = isnan(_2360) ? _2362 : (isnan(_2362) ? _2360 : min(_2362, _2360));
        float _2367 = (_2363 * _1858) + _1847;
        float _2368 = (_2363 * _1861) + _1851;
        float _2369 = (_2363 * _1864) + _1855;
        float _2370 = _2363 * 9.9999997473787516355514526367188e-05;
        float _2372 = (-1.0) - _2370;
        float _2374 = _2370 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2369 > _2374) || ((_2369 < _2372) || ((_2368 > _2374) || ((_2368 < _2372) || ((_2367 < _2372) || (_2367 > _2374))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2369, cbModelParam._m0[9u].z, fma(_2368, cbModelParam._m0[9u].y, _2367 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2369, cbModelParam._m0[10u].z, fma(_2368, cbModelParam._m0[10u].y, _2367 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2369, cbModelParam._m0[11u].z, fma(_2368, cbModelParam._m0[11u].y, _2367 * cbModelParam._m0[11u].x))), _1799);
            frontier_phi_16_38_ladder = _2493.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2493.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2493.x * cbModelParam._m0[1u].y;
        }
        _1880 = frontier_phi_16_38_ladder_2;
        _1882 = frontier_phi_16_38_ladder_1;
        _1884 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_960, _961, _962), _1799);
        _1880 = _1868.x * cbModelParam._m0[1u].y;
        _1882 = _1868.y * cbModelParam._m0[1u].y;
        _1884 = _1868.z * cbModelParam._m0[1u].y;
    }
    float _1888 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _793);
    float _1889 = isnan(_1888) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1888 : min(cbModelParam._m0[25u].w, _1888));
    float _1979;
    float _1981;
    float _1983;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1943 = fma(_1021, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1013)) + cbModelParam._m0[21u].w;
        float _1947 = fma(_1021, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1013)) + cbModelParam._m0[22u].w;
        float _1951 = fma(_1021, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1013)) + cbModelParam._m0[23u].w;
        float _1954 = fma(_962, cbModelParam._m0[21u].z, fma(_961, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960));
        float _1957 = fma(_962, cbModelParam._m0[22u].z, fma(_961, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960));
        float _1960 = fma(_962, cbModelParam._m0[23u].z, fma(_961, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960));
        float _2119;
        if (_1954 > 0.0)
        {
            _2119 = abs((1.0 - _1943) / _1954);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1943 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2119 = frontier_phi_28_24_ladder;
        }
        float _2387;
        if (_1957 > 0.0)
        {
            _2387 = abs((1.0 - _1947) / _1957);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1947 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2387 = frontier_phi_40_35_ladder;
        }
        float _2592;
        if (_1960 > 0.0)
        {
            _2592 = abs((1.0 - _1951) / _1960);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1951 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2592 = frontier_phi_49_46_ladder;
        }
        float _2594 = isnan(_2387) ? _2119 : (isnan(_2119) ? _2387 : min(_2119, _2387));
        float _2595 = isnan(_2592) ? _2594 : (isnan(_2594) ? _2592 : min(_2594, _2592));
        float _2599 = (_2595 * _1954) + _1943;
        float _2600 = (_2595 * _1957) + _1947;
        float _2601 = (_2595 * _1960) + _1951;
        float _2602 = _2595 * 9.9999997473787516355514526367188e-05;
        float _2603 = (-1.0) - _2602;
        float _2605 = _2602 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2601 > _2605) || ((_2601 < _2603) || ((_2600 > _2605) || ((_2600 < _2603) || ((_2599 < _2603) || (_2599 > _2605))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2601, cbModelParam._m0[17u].z, fma(_2600, cbModelParam._m0[17u].y, _2599 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2601, cbModelParam._m0[18u].z, fma(_2600, cbModelParam._m0[18u].y, _2599 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2601, cbModelParam._m0[19u].z, fma(_2600, cbModelParam._m0[19u].y, _2599 * cbModelParam._m0[19u].x))), _1889);
            frontier_phi_25_49_ladder = _2800.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2800.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2800.x * cbModelParam._m0[1u].z;
        }
        _1979 = frontier_phi_25_49_ladder_2;
        _1981 = frontier_phi_25_49_ladder_1;
        _1983 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1963 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_960, _961, _962), _1889);
        _1979 = _1963.x * cbModelParam._m0[1u].z;
        _1981 = _1963.y * cbModelParam._m0[1u].z;
        _1983 = _1963.z * cbModelParam._m0[1u].z;
    }
    float _1995 = ((((1.0 - _981) * ((_968 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_981 * _968)) * _952;
    float _1996 = _1995 * ((cbModelParam._m0[1u].w * (_1979 - _1880)) + _1880);
    float _1997 = _1995 * ((cbModelParam._m0[1u].w * (_1981 - _1882)) + _1882);
    float _1998 = _1995 * ((cbModelParam._m0[1u].w * (_1983 - _1884)) + _1884);
    float _2001 = fma(_1998, cbSceneParam._m0[89u].z, fma(_1997, cbSceneParam._m0[89u].y, _1996 * cbSceneParam._m0[89u].x));
    float _2004 = fma(_1998, cbSceneParam._m0[90u].z, fma(_1997, cbSceneParam._m0[90u].y, _1996 * cbSceneParam._m0[90u].x));
    float _2007 = fma(_1998, cbSceneParam._m0[91u].z, fma(_1997, cbSceneParam._m0[91u].y, _1996 * cbSceneParam._m0[91u].x));
    vec4 _2015 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_889, _890));
    float _2017 = _2015.w;
    float _2029 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2017);
    float _2030 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2017);
    float _2031 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2017);
    uvec4 _2035 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2037 = _2035.x * 14u;
    uint _2038 = _2037 + 13u;
    float _2045 = _952 + (-1.0);
    float _2050 = (cbLight._m0[_2038].x * _2045) + 1.0;
    float _2051 = (cbLight._m0[_2038].y * _2045) + 1.0;
    float _2052 = (cbLight._m0[_2038].z * _2045) + 1.0;
    float _2053 = (cbLight._m0[_2038].w * _2045) + 1.0;
    uint _2054 = _2037 + 5u;
    float _2060 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2064 = _2037 + 4u;
    float _2073 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2077 = _2037 | 1u;
    float _2088 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_790, _791, _792));
    float _2091 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_790, _791, _792));
    float _4345 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _4356 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2096 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * 0.3183098733425140380859375;
    float _2098 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * 0.3183098733425140380859375;
    float _2105 = ((cbLight._m0[_2054].x * _2060) * _2098) + (((cbLight._m0[_2064].x * _2029) * _2073) * _2096);
    float _2106 = ((_2060 * cbLight._m0[_2054].y) * _2098) + (((cbLight._m0[_2064].y * _2030) * _2073) * _2096);
    float _2107 = ((_2060 * cbLight._m0[_2054].z) * _2098) + (((cbLight._m0[_2064].z * _2031) * _2073) * _2096);
    uvec4 _2111 = floatBitsToUint(cbLight._m0[_2037 + 12u]);
    bool _2113 = _2111.x == 0u;
    float _2124;
    float _2126;
    float _2128;
    if (_2113)
    {
        _2124 = _2105;
        _2126 = _2106;
        _2128 = _2107;
    }
    else
    {
        uint _2132 = _2037 + 6u;
        float _2148 = (dot(vec3(cbLight._m0[_2037 + 2u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2149 = _2148 * _2148;
        float _4367 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2150 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2151 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2124 = (((cbLight._m0[_2132].x * 0.3183098733425140380859375) * _2150) * _2151) + _2105;
        _2126 = (((cbLight._m0[_2132].y * 0.3183098733425140380859375) * _2150) * _2151) + _2106;
        _2128 = (((cbLight._m0[_2132].z * 0.3183098733425140380859375) * _2150) * _2151) + _2107;
    }
    bool _2131 = _2111.y == 0u;
    float _2169;
    float _2171;
    float _2173;
    if (_2131)
    {
        _2169 = _2124;
        _2171 = _2126;
        _2173 = _2128;
    }
    else
    {
        uint _2331 = _2037 + 7u;
        float _2347 = (dot(vec3(cbLight._m0[_2037 + 3u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2348 = _2347 * _2347;
        float _4383 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2349 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2350 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2169 = (((cbLight._m0[_2331].x * 0.3183098733425140380859375) * _2349) * _2350) + _2124;
        _2171 = (((cbLight._m0[_2331].y * 0.3183098733425140380859375) * _2349) * _2350) + _2126;
        _2173 = (((cbLight._m0[_2331].z * 0.3183098733425140380859375) * _2349) * _2350) + _2128;
    }
    uint _2176 = _2037 + 8u;
    float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _793) * 0.949999988079071044921875);
    float _2190 = _2189 * _2189;
    float _2191 = cbLight._m0[_2037].x + _869;
    float _2192 = cbLight._m0[_2037].y + _870;
    float _2193 = cbLight._m0[_2037].z + _871;
    float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
    float _2198 = _2197 * _2191;
    float _2199 = _2197 * _2192;
    float _2200 = _2197 * _2193;
    float _2201 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2037].xyz));
    float _4399 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _4410 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _2205 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2206 = dot(vec3(_790, _791, _792), vec3(_2198, _2199, _2200));
    float _4421 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2210 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2198, _2199, _2200));
    float _4432 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2214 = _2190 * _2190;
    float _2218 = ((_2209 * _2209) * (_2214 + (-1.0))) + 1.0;
    float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2230 = 1.0 - _2190;
    float _2241 = (0.5 / (((_2205 * ((_2204 * _2230) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2230) + _2190) * _2204))) * _2204;
    float _4443 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2243 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2214 / ((_2218 * _2218) * 3.141590118408203125));
    uint _2257 = _2037 + 9u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _793) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2077].x + _869;
    float _2271 = cbLight._m0[_2077].y + _870;
    float _2272 = cbLight._m0[_2077].z + _871;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2077].xyz));
    float _4454 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2284 = dot(vec3(_790, _791, _792), vec3(_2277, _2278, _2279));
    float _4465 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2277, _2278, _2279));
    float _4476 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2269 * _2269;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2305 = (exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2306 = 1.0 - _2269;
    float _2316 = (0.5 / (((_2205 * ((_2283 * _2306) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2306) + _2269) * _2283))) * _2283;
    float _4487 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2318 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    float _2328 = (((_2305 * cbLight._m0[_2257].x) * _2318) * _2060) + ((((cbLight._m0[_2176].x * _2029) * _2229) * _2243) * _2073);
    float _2329 = (((_2305 * cbLight._m0[_2257].y) * _2318) * _2060) + ((((cbLight._m0[_2176].y * _2030) * _2229) * _2243) * _2073);
    float _2330 = (((_2305 * cbLight._m0[_2257].z) * _2318) * _2060) + ((((cbLight._m0[_2176].z * _2031) * _2229) * _2243) * _2073);
    float _2392;
    float _2394;
    float _2396;
    if (_2113)
    {
        _2392 = _2328;
        _2394 = _2329;
        _2396 = _2330;
    }
    else
    {
        uint _2398 = _2037 + 2u;
        uint _2402 = _2037 + 10u;
        float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2398].w)) * _793) * 0.949999988079071044921875);
        float _2417 = _2416 * _2416;
        float _2418 = cbLight._m0[_2398].x + _869;
        float _2419 = cbLight._m0[_2398].y + _870;
        float _2420 = cbLight._m0[_2398].z + _871;
        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
        float _2425 = _2424 * _2418;
        float _2426 = _2424 * _2419;
        float _2427 = _2424 * _2420;
        float _2428 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2398].xyz));
        float _4498 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2432 = dot(vec3(_790, _791, _792), vec3(_2425, _2426, _2427));
        float _4509 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2436 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_2425, _2426, _2427));
        float _4520 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2440 = _2417 * _2417;
        float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
        float _2453 = (exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2454 = 1.0 - _2417;
        float _2464 = (0.5 / (((_2205 * ((_2431 * _2454) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2454) + _2417) * _2431))) * _2431;
        float _4531 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2466 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
        float _2467 = isnan(1.0) ? _2052 : (isnan(_2052) ? 1.0 : min(_2052, 1.0));
        _2392 = (((_2453 * cbLight._m0[_2402].x) * _2466) * _2467) + _2328;
        _2394 = (((_2453 * cbLight._m0[_2402].y) * _2466) * _2467) + _2329;
        _2396 = (((_2453 * cbLight._m0[_2402].z) * _2466) * _2467) + _2330;
    }
    float _2502;
    float _2504;
    float _2506;
    if (_2131)
    {
        _2502 = _2392;
        _2504 = _2394;
        _2506 = _2396;
    }
    else
    {
        uint _2513 = _2037 + 3u;
        uint _2517 = _2037 + 11u;
        float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2513].w)) * _793) * 0.949999988079071044921875);
        float _2532 = _2531 * _2531;
        float _2533 = cbLight._m0[_2513].x + _869;
        float _2534 = cbLight._m0[_2513].y + _870;
        float _2535 = cbLight._m0[_2513].z + _871;
        float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
        float _2540 = _2539 * _2533;
        float _2541 = _2539 * _2534;
        float _2542 = _2539 * _2535;
        float _2543 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2513].xyz));
        float _4547 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _2547 = dot(vec3(_790, _791, _792), vec3(_2540, _2541, _2542));
        float _4558 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _2551 = dot(vec3(cbLight._m0[_2513].xyz), vec3(_2540, _2541, _2542));
        float _4569 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2555 = _2532 * _2532;
        float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
        float _2568 = (exp2(log2(1.0 - (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2569 = 1.0 - _2532;
        float _2579 = (0.5 / (((_2205 * ((_2546 * _2569) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2205 * _2569) + _2532) * _2546))) * _2546;
        float _4580 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2053 : (isnan(_2053) ? 1.0 : min(_2053, 1.0));
        _2502 = (((_2568 * cbLight._m0[_2517].x) * _2581) * _2582) + _2392;
        _2504 = (((_2568 * cbLight._m0[_2517].y) * _2581) * _2582) + _2394;
        _2506 = (((_2568 * cbLight._m0[_2517].z) * _2581) * _2582) + _2396;
    }
    float _2717;
    float _2719;
    float _2721;
    float _2723;
    float _2725;
    float _2727;
    if (_2035.y == 0u)
    {
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2657;
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2657;
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2657;
        uvec4 _2672 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2673 = _2672.x;
        uint _2684 = uint((float(_2672.y) * floor(float(uint(cbSceneParam._m0[85u].y * _890) / _2673))) + floor(float(uint(cbSceneParam._m0[85u].x * _889) / _2673)));
        float _2694 = (log2(_2660 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2695 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        uint _2698 = uint(isnan(14.0) ? _2695 : (isnan(_2695) ? 14.0 : min(_2695, 14.0)));
        uvec4 _2703 = texelFetch(g_lightClusterGridBuffer, int(((_2698 << 2u) + (_2684 << 6u)) >> 2u));
        uint _2704 = _2703.x;
        uint _2705 = _2672.z;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        float _2813;
        float _2815;
        if (((((1u << ((_2705 >> 4u) & 15u)) + 4294967295u) & _2704) == 0u) || ((_2705 & 240u) == 0u))
        {
            _2805 = 0.0;
            _2807 = 0.0;
            _2809 = 0.0;
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
        }
        else
        {
            float _2806;
            float _2808;
            float _2810;
            float _2812;
            float _2814;
            float _2816;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            uint _2964 = 0u;
            uint _2973;
            bool _2974;
            for (;;)
            {
                _2973 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                _2974 = _2973 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2974)
                {
                    frontier_phi_66_pred = _2958;
                    frontier_phi_66_pred_1 = _2963;
                    frontier_phi_66_pred_2 = _2962;
                    frontier_phi_66_pred_3 = _2961;
                    frontier_phi_66_pred_4 = _2960;
                    frontier_phi_66_pred_5 = _2959;
                }
                else
                {
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    uint _3109;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2973;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    for (;;)
                    {
                        uint _3113 = uint(findLSB(_3109)) + (_2964 << 5u);
                        uint _3110 = (_3109 + 4294967295u) & _3109;
                        uint _3115 = _3113 * 48u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3135 = (_3113 * 48u) + 4u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3154 = (_3113 * 48u) + 8u;
                        vec3 _3165 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x));
                        float _3169 = _3129.x - _2658;
                        float _3170 = _3129.y - _2659;
                        float _3171 = _3129.z - _2660;
                        float _3172 = dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171));
                        float _3175 = inversesqrt(_3172);
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3179 = dot(vec3(_908, _911, _914), vec3(_3176, _3177, _3178));
                        float _3184 = 1.0 - (_3172 * _3129.w);
                        float _4606 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3186 = sqrt(_3172) * _3148.w;
                        float _3189 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3179) + _3190;
                        float _3196 = _3186 * _3186;
                        float _3200 = ((isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))) * _3185) / ((_3196 * 0.699999988079071044921875) + 1.0);
                        float _3204 = (-0.0) - _2658;
                        float _3205 = (-0.0) - _2659;
                        float _3206 = (-0.0) - _2660;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3221 = exp2(log2(1.0 / ((_3196 * 3.5) + 5.0)) * 0.25);
                        float _3222 = 1.0 - _968;
                        float _3229 = sqrt(1.0 - ((1.0 - (_3222 * _3222)) * (1.0 - (_3221 * _3221))));
                        float _3230 = _3229 * _3229;
                        float _3231 = _3230 * _3230;
                        float _3232 = _3211 + _3176;
                        float _3233 = _3212 + _3177;
                        float _3234 = _3213 + _3178;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3242 = dot(vec3(_908, _911, _914), vec3(_3211, _3212, _3213));
                        float _4622 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3245 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3246 = dot(vec3(_908, _911, _914), vec3(_3238 * _3232, _3238 * _3233, _3238 * _3234));
                        float _4633 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3249 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3253 = ((_3249 * _3249) * (_3231 + (-1.0))) + 1.0;
                        float _3254 = _3189 * _3230;
                        float _3255 = _3254 * _3254;
                        float _3258 = ((1.0 - _3255) * _3179) + _3255;
                        float _4644 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                        float _3260 = 1.0 - _3230;
                        float _3270 = (0.5 / (((_3259 * ((_3245 * _3260) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3230) * _3245))) * _3259;
                        float _4655 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3281 = (((_3231 * 3.1415927410125732421875) * (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) / ((_3253 * _3253) * ((_3196 * 2.1991131305694580078125) + 3.141590118408203125))) * _3185;
                        _3033 = (_3200 * _3148.x) + _3106;
                        _3034 = (_3200 * _3148.y) + _3107;
                        _3035 = (_3200 * _3148.z) + _3108;
                        _3030 = (_3281 * _3165.x) + _3103;
                        _3031 = (_3281 * _3165.y) + _3104;
                        _3032 = (_3281 * _3165.z) + _3105;
                        if (_3110 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3110;
                        }
                    }
                    frontier_phi_66_pred = _3030;
                    frontier_phi_66_pred_1 = _3035;
                    frontier_phi_66_pred_2 = _3034;
                    frontier_phi_66_pred_3 = _3033;
                    frontier_phi_66_pred_4 = _3032;
                    frontier_phi_66_pred_5 = _3031;
                }
                _2806 = frontier_phi_66_pred;
                _2816 = frontier_phi_66_pred_1;
                _2814 = frontier_phi_66_pred_2;
                _2812 = frontier_phi_66_pred_3;
                _2810 = frontier_phi_66_pred_4;
                _2808 = frontier_phi_66_pred_5;
                uint _2965 = _2964 + 1u;
                if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2958 = _2806;
                    _2959 = _2808;
                    _2960 = _2810;
                    _2961 = _2812;
                    _2962 = _2814;
                    _2963 = _2816;
                    _2964 = _2965;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2805 = _2806;
            _2807 = _2808;
            _2809 = _2810;
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
        }
        uvec4 _2819 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2820 = _2819.z;
        uint _2822 = (_2820 >> 8u) & 15u;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((4294967295u << _2822) & _2704) == 0u)
        {
            _2926 = _2805;
            _2928 = _2807;
            _2930 = _2809;
            _2932 = _2811;
            _2934 = _2813;
            _2936 = _2815;
        }
        else
        {
            float _2951 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
            float _2952 = _2951 * _2658;
            float _2953 = _2951 * _2659;
            float _2954 = _2951 * _2660;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2822 < ((_2820 >> 12u) & 15u))
            {
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _3086 = _2805;
                float _3087 = _2807;
                float _3088 = _2809;
                float _3089 = _2811;
                float _3090 = _2813;
                float _3091 = _2815;
                uint _3092 = _2822;
                uint _3101;
                bool _3102;
                for (;;)
                {
                    _3101 = texelFetch(g_lightClassification, int((((_2698 << 5u) + (_2684 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                    _3102 = _3101 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3102)
                    {
                        frontier_phi_77_pred = _3091;
                        frontier_phi_77_pred_1 = _3090;
                        frontier_phi_77_pred_2 = _3089;
                        frontier_phi_77_pred_3 = _3088;
                        frontier_phi_77_pred_4 = _3087;
                        frontier_phi_77_pred_5 = _3086;
                    }
                    else
                    {
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3308 = _3086;
                        float _3309 = _3087;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        float _3312 = _3090;
                        float _3313 = _3091;
                        uint _3314 = _3101;
                        uint _3315;
                        vec4 _3340;
                        float _3341;
                        vec4 _3356;
                        vec3 _3368;
                        vec4 _3383;
                        vec4 _3398;
                        float _3444;
                        bool _3445;
                        for (;;)
                        {
                            uint _3325 = ((_3092 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3314));
                            _3315 = (_3314 + 4294967295u) & _3314;
                            uint _3327 = _3325 * 40u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            _3341 = _3340.w;
                            uint _3343 = (_3325 * 40u) + 4u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3358 = (_3325 * 40u) + 8u;
                            _3368 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x));
                            uint _3370 = (_3325 * 40u) + 16u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3325 * 40u) + 20u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3325 * 40u) + 24u;
                            vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3419 = (_3325 * 40u) + 28u;
                            vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            _3444 = fma(_2660, _3432.z, fma(_2659, _3432.y, _3432.x * _2658)) + _3432.w;
                            _3445 = !((fma(_2660, _3413.z, fma(_2659, _3413.y, _3413.x * _2658)) + _3413.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3445)
                            {
                                float _3472 = _3340.x - _2658;
                                float _3473 = _3340.y - _2659;
                                float _3474 = _3340.z - _2660;
                                float _3475 = dot(vec3(_3472, _3473, _3474), vec3(_3472, _3473, _3474));
                                float _3478 = inversesqrt(_3475);
                                float _3479 = _3478 * _3472;
                                float _3480 = _3478 * _3473;
                                float _3481 = _3478 * _3474;
                                float _3485 = 1.0 - (_3475 / (_3341 * _3341));
                                float _4666 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3486 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3490 = sqrt(_3475) * _3356.w;
                                float _3492 = 1.39999997615814208984375 / (_3490 + 1.39999997615814208984375);
                                float _3493 = _3492 * _3492;
                                float _3496 = ((1.0 - _3493) * dot(vec3(_3479, _3480, _3481), vec3(_908, _911, _914))) + _3493;
                                float _3499 = _3490 * _3490;
                                float _3503 = (fma(_2660, _3383.z, fma(_2659, _3383.y, _3383.x * _2658)) + _3383.w) / _3444;
                                float _3504 = (fma(_2660, _3398.z, fma(_2659, _3398.y, _3398.x * _2658)) + _3398.w) / _3444;
                                float _3508 = 1.0 - dot(vec2(_3503, _3504), vec2(_3503, _3504));
                                float _4682 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3509 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3510 = _3509 * (((isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0))) * _3486) / ((_3499 * 0.699999988079071044921875) + 1.0));
                                float _3522 = exp2(log2(1.0 / ((_3499 * 3.5) + 5.0)) * 0.25);
                                float _3523 = 1.0 - _968;
                                float _3530 = sqrt(1.0 - ((1.0 - (_3523 * _3523)) * (1.0 - (_3522 * _3522))));
                                float _3531 = _3530 * _3530;
                                float _3532 = _3531 * _3531;
                                float _3533 = _3479 - _2952;
                                float _3534 = _3480 - _2953;
                                float _3535 = _3481 - _2954;
                                float _3539 = inversesqrt(dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535)));
                                float _3543 = dot(vec3(_908, _911, _914), vec3((-0.0) - _2952, (-0.0) - _2953, (-0.0) - _2954));
                                float _4693 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3546 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3547 = dot(vec3(_908, _911, _914), vec3(_3539 * _3533, _3539 * _3534, _3539 * _3535));
                                float _4704 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                                float _3550 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
                                float _3554 = ((_3550 * _3550) * (_3532 + (-1.0))) + 1.0;
                                float _3555 = _3492 * _3531;
                                float _3556 = _3555 * _3555;
                                float _3562 = ((1.0 - _3556) * dot(vec3(_908, _911, _914), vec3(_3479, _3480, _3481))) + _3556;
                                float _4715 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3564 = 1.0 - _3531;
                                float _3574 = (0.5 / (((_3563 * ((_3546 * _3564) + _3531)) + 9.9999999392252902907785028219223e-09) + (((_3563 * _3564) + _3531) * _3546))) * _3563;
                                float _4726 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3584 = (_3509 * _3486) * (((_3532 * 3.1415927410125732421875) * (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) / ((_3554 * _3554) * ((_3499 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3510 * _3356.y;
                                frontier_phi_83_pred_1 = _3510 * _3356.x;
                                frontier_phi_83_pred_2 = _3584 * _3368.z;
                                frontier_phi_83_pred_3 = _3584 * _3368.y;
                                frontier_phi_83_pred_4 = _3584 * _3368.x;
                                frontier_phi_83_pred_5 = _3510 * _3356.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3592 = frontier_phi_83_pred;
                            _3591 = frontier_phi_83_pred_1;
                            _3590 = frontier_phi_83_pred_2;
                            _3589 = frontier_phi_83_pred_3;
                            _3588 = frontier_phi_83_pred_4;
                            _3593 = frontier_phi_83_pred_5;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            _3300 = _3593 + _3313;
                            _3295 = _3588 + _3308;
                            _3296 = _3589 + _3309;
                            _3297 = _3590 + _3310;
                            if (_3315 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3315;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3300;
                        frontier_phi_77_pred_1 = _3299;
                        frontier_phi_77_pred_2 = _3298;
                        frontier_phi_77_pred_3 = _3297;
                        frontier_phi_77_pred_4 = _3296;
                        frontier_phi_77_pred_5 = _3295;
                    }
                    _2937 = frontier_phi_77_pred;
                    _2935 = frontier_phi_77_pred_1;
                    _2933 = frontier_phi_77_pred_2;
                    _2931 = frontier_phi_77_pred_3;
                    _2929 = frontier_phi_77_pred_4;
                    _2927 = frontier_phi_77_pred_5;
                    uint _3093 = _3092 + 1u;
                    if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3086 = _2927;
                        _3087 = _2929;
                        _3088 = _2931;
                        _3089 = _2933;
                        _3090 = _2935;
                        _3091 = _2937;
                        _3092 = _3093;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2931;
                frontier_phi_58_59_ladder_1 = _2937;
                frontier_phi_58_59_ladder_2 = _2935;
                frontier_phi_58_59_ladder_3 = _2933;
                frontier_phi_58_59_ladder_4 = _2929;
                frontier_phi_58_59_ladder_5 = _2927;
            }
            else
            {
                frontier_phi_58_59_ladder = _2809;
                frontier_phi_58_59_ladder_1 = _2815;
                frontier_phi_58_59_ladder_2 = _2813;
                frontier_phi_58_59_ladder_3 = _2811;
                frontier_phi_58_59_ladder_4 = _2807;
                frontier_phi_58_59_ladder_5 = _2805;
            }
            _2926 = frontier_phi_58_59_ladder_5;
            _2928 = frontier_phi_58_59_ladder_4;
            _2930 = frontier_phi_58_59_ladder;
            _2932 = frontier_phi_58_59_ladder_3;
            _2934 = frontier_phi_58_59_ladder_2;
            _2936 = frontier_phi_58_59_ladder_1;
        }
        float _2941 = isnan(1.0) ? _952 : (isnan(_952) ? 1.0 : min(_952, 1.0));
        _2717 = (_2941 * _2932) + _2169;
        _2719 = (_2941 * _2934) + _2171;
        _2721 = (_2941 * _2936) + _2173;
        _2723 = ((_2926 * 0.039999999105930328369140625) * _2941) + _2502;
        _2725 = ((_2928 * 0.039999999105930328369140625) * _2941) + _2504;
        _2727 = ((_2930 * 0.039999999105930328369140625) * _2941) + _2506;
    }
    else
    {
        _2717 = _2169;
        _2719 = _2171;
        _2721 = _2173;
        _2723 = _2502;
        _2725 = _2504;
        _2727 = _2506;
    }
    float _4742 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4753 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4764 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _2744 = ((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2717 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _952))) + ((_2723 + ((isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) * _1788)) * cbPerFrame._m0[3u].x);
    float _2745 = ((isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0))) * (_2719 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _952))) + ((_2725 + ((isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))) * _1788)) * cbPerFrame._m0[3u].x);
    float _2746 = ((isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2721 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _952))) + ((_2727 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1788)) * cbPerFrame._m0[3u].x);
    uint _2747 = _279 + 6u;
    float _2755 = _889 / cbSceneParam._m0[86u].x;
    float _2756 = _890 / cbSceneParam._m0[86u].y;
    vec4 _2770 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, (log2((isnan(cbSceneParam._m0[77u].w) ? _811 : (isnan(_811) ? cbSceneParam._m0[77u].w : min(_811, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2772 = _2770.x;
    float _2773 = _2770.y;
    float _2774 = _2770.z;
    float _2775 = _2770.w;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    if (_811 > cbSceneParam._m0[78u].w)
    {
        float _2830 = isnan(_811) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _811 : min(cbSceneParam._m0[80u].w, _811));
        float _2831 = _2830 / _811;
        float _2842 = _2831 * _862;
        float _2843 = _863 * _2831;
        float _2844 = (-0.0) - _2843;
        float _2846 = _2831 * _864;
        float _2848 = (cbSceneParam._m0[77u].w * _2844) / _2830;
        float _2849 = _2848 + cbSceneParam._m0[79u].w;
        float _2850 = cbSceneParam._m0[79u].w - _2843;
        float _2856 = sqrt(((_2842 * _2842) + (_2843 * _2843)) + (_2846 * _2846));
        float _2859 = (1.0 - (cbSceneParam._m0[77u].w / _2830)) * _2856;
        float _2864 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2866 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3043;
        if (abs((_2844 - _2848) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3043 = ((((_2849 > 0.0) ? exp2(_2864 * _2849) : (2.0 - exp2(_2866 * _2849))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2859;
        }
        else
        {
            float _2987 = 1.0 / cbSceneParam._m0[80u].x;
            float _2988 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : max(_2849, _2850));
            float _2989 = isnan(_2850) ? _2849 : (isnan(_2849) ? _2850 : min(_2849, _2850));
            float _2998 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : min(_2988, 0.0));
            float _2999 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : min(_2989, 0.0));
            _3043 = ((abs(_2856 / _2844) * cbSceneParam._m0[80u].y) * ((((_2998 - _2999) * 2.0) - ((exp2(_2864 * (isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0)))) - exp2(_2864 * (isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))))) * _2987)) - ((exp2(_2866 * _2998) - exp2(_2866 * _2999)) * _2987))) + (_2859 * cbSceneParam._m0[80u].z);
        }
        vec4 _3045 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2755, _2756, 1.0), 0.0);
        float _3054 = exp2((_3043 * (-1.44269502162933349609375)) * (1.0 - _3045.w));
        float _3055 = log2(_3054);
        float _3071 = log2(_2775);
        _2868 = (exp2(_3071 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].x)) * _3045.x) / cbSceneParam._m0[78u].x)) + _2772;
        _2870 = (exp2(_3071 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].y)) * _3045.y) / cbSceneParam._m0[78u].y)) + _2773;
        _2872 = (exp2(_3071 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].z)) * _3045.z) / cbSceneParam._m0[78u].z)) + _2774;
        _2874 = _3054 * _2775;
    }
    else
    {
        _2868 = _2772;
        _2870 = _2773;
        _2872 = _2774;
        _2874 = _2775;
    }
    bool _3081;
    vec4 _2884;
    vec4 _2906;
    float _2908;
    float _2912;
    float _2913;
    float _2914;
    float _2915;
    bool _2925;
    for (;;)
    {
        _2884 = cbMatDynParam._m0[0u];
        float _2886 = roundEven(_2884.y);
        bool _2887 = _2886 == 3.0;
        float _2888 = log2(_2874);
        float _2895 = exp2(_2888 * cbSceneParam._m0[78u].x) * _2744;
        float _2896 = exp2(_2888 * cbSceneParam._m0[78u].y) * _2745;
        float _2897 = exp2(_2888 * cbSceneParam._m0[78u].z) * _2746;
        float _2904 = _878 + (-0.5);
        _2906 = cbMtdParam._m0[1u];
        _2908 = _2906.y * _2904;
        float _2911 = (_2886 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2912 = _2911 * (_2887 ? _2895 : (_2895 + (cbSceneParam._m0[72u].w * _2868)));
        _2913 = _2911 * (_2887 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2870)));
        _2914 = _2911 * (_2887 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2872)));
        _2915 = _2904 * 0.999000012874603271484375;
        _2925 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2925)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2915) < 0.5)
            {
                _3081 = true;
                break;
            }
        }
        uint _3022 = _927 + uint(_2884.w);
        if ((cbInstanceData._m0[_3022].w < 1.0) && ((cbInstanceData._m0[_3022].w + _2915) < 0.5))
        {
            _3081 = true;
            break;
        }
        if ((_2908 + 1.0) < _2906.x)
        {
            _3081 = true;
            break;
        }
        _3081 = false;
        break;
    }
    float _3286;
    if (_3081)
    {
        discard_state = true;
        _3286 = 0.0;
    }
    else
    {
        _3286 = cbInstanceData._m0[_2747].w;
    }
    SV_Target.x = _2912;
    SV_Target.y = _2913;
    SV_Target.z = _2914;
    SV_Target.w = _3286;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2747].w;
    discard_exit();
}


