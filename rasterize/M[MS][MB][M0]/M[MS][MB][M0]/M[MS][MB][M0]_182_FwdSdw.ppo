#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1199;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _347 = _345.x;
    float _357 = dot(vec4(_347, _345.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _374 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_347 - _357) * cbMtdParam._m0[24u].x) + _357) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3787 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _382 = (_375 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _383 = (_375 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _384 = (_375 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _433 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _447 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_423 - _433) * cbMtdParam._m0[24u].x) + _433) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3798 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _455 = (_448 * ((_401.x * cbMtdParam._m0[13u].x) - _382)) + _382;
    float _456 = (_448 * ((_401.y * cbMtdParam._m0[13u].y) - _383)) + _383;
    float _457 = (_448 * ((_401.z * cbMtdParam._m0[13u].z) - _384)) + _384;
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _494 = _492.x;
    float _495 = _492.y;
    float _496 = _492.z;
    float _503 = ((_475.x - _494) * _375) + _494;
    float _504 = ((_475.y - _495) * _375) + _495;
    float _505 = ((_475.z - _496) * _375) + _496;
    vec4 _517 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _530 = ((_517.z - _505) * _448) + _505;
    float _533 = ((((_517.x - _503) * _448) + _503) * 2.0) + (-1.0);
    float _535 = ((((_517.y - _504) * _448) + _504) * 2.0) + (-1.0);
    float _536 = dot(vec2(_533, _535), vec2(_533, _535));
    float _3809 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))));
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _582 = _580.x;
    float _583 = 1.0 - _582;
    float _596 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_582 - _583) * cbMtdParam._m0[24u].z) + _583) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3820 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _604 = (_597 * (cbMtdParam._m0[17u].x - _455)) + _455;
    float _605 = (_597 * (cbMtdParam._m0[17u].y - _456)) + _456;
    float _606 = (_597 * (cbMtdParam._m0[17u].z - _457)) + _457;
    float _610 = (cbMtdParam._m0[19u].w * (_555.z - _530)) + _530;
    vec4 _623 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _630 = (_623.x * 2.0) + (-1.0);
    float _631 = (_623.y * 2.0) + (-1.0);
    float _632 = dot(vec2(_630, _631), vec2(_630, _631));
    float _3831 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _640 = (_597 * (_623.z - _610)) + _610;
    float _643 = (((_555.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _533;
    float _644 = (((_555.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _535;
    float _656 = (((_630 - _643) + (cbMtdParam._m0[21u].x * _643)) * _597) + _643;
    float _657 = (((_631 - _644) + (cbMtdParam._m0[21u].x * _644)) * _597) + _644;
    float _658 = (_597 * (sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) - _541)) + _541;
    float _663 = cbMtdParam._m0[22u].x + _555.w;
    float _666 = fma(_658, _225 * NORMAL.x, fma(_657, _232 * TANGENT.x, (_218 * _210) * _656));
    float _669 = fma(_658, _225 * NORMAL.y, fma(_657, _232 * TANGENT.y, (_218 * _211) * _656));
    float _672 = fma(_658, _225 * NORMAL.z, fma(_657, _232 * TANGENT.z, (_218 * _212) * _656));
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    float _677 = _676 * _666;
    float _678 = _676 * _669;
    float _679 = _676 * _672;
    float _3842 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _680 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3864 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3875 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3886 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _698 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _750 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _740);
    float _751 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _740);
    float _752 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _740);
    float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
    float _757 = _750 * _756;
    float _758 = _751 * _756;
    float _759 = _752 * _756;
    float _765 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _766 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _784 = fma(_679, cbSceneParam._m0[5u].z, fma(_678, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _677));
    float _787 = fma(_679, cbSceneParam._m0[6u].z, fma(_678, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _677));
    float _790 = fma(_679, cbSceneParam._m0[7u].z, fma(_678, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _677));
    uint _804 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _810 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_804].x;
    float _811 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * cbInstanceData._m0[_804].y;
    float _812 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) * cbInstanceData._m0[_804].z;
    float _3897 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _3908 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    vec4 _824 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _765, cbSceneParam._m0[86u].y * _766));
    float _828 = ((isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * TEXCOORD_5.w) * _824.x;
    float _829 = dot(vec3(_677, _678, _679), vec3(_757, _758, _759));
    float _832 = _829 * 2.0;
    float _836 = (_832 * _677) - _757;
    float _837 = (_832 * _678) - _758;
    float _838 = (_832 * _679) - _759;
    float _842 = abs(dot(vec3(_757, _758, _759), vec3(_677, _678, _679)));
    float _3930 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _844 = sqrt(_680);
    float _857 = exp2((_844 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_844 * 3.0));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1198;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _923 = fma(_897, cbModelParam._m0[26u].z, fma(_893, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _889));
        float _927 = fma(_897, cbModelParam._m0[27u].z, fma(_893, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _889));
        float _931 = fma(_897, cbModelParam._m0[28u].z, fma(_893, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _889));
        float _956 = _889 + _677;
        float _957 = _893 + _678;
        float _958 = _897 + _679;
        float _968 = fma(_958, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _956)) - _923;
        float _969 = fma(_958, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _956)) - _927;
        float _970 = fma(_958, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _956)) - _931;
        float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
        float _987 = ((_974 * _968) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_923 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_974 * _969) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_927 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_974 * _970) / cbModelParam._m0[34u].z) + ((((((_931 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        float _1026 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_992.x + (-0.5));
        float _1028 = _1026 * (_992.y + (-0.5));
        float _1029 = _1026 * (_992.z + (-0.5));
        float _1036 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_999.x + (-0.5));
        float _1038 = _1036 * (_999.y + (-0.5));
        float _1039 = _1036 * (_999.z + (-0.5));
        float _1046 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1006.x + (-0.5));
        float _1048 = _1046 * (_1006.y + (-0.5));
        float _1049 = _1046 * (_1006.z + (-0.5));
        float _1056 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1013.x + (-0.5));
        float _1058 = _1056 * (_1013.y + (-0.5));
        float _1059 = _1056 * (_1013.z + (-0.5));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = _1027 * 0.5;
        float _1064 = _1037 * 0.5;
        float _1065 = _1047 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1080 = (dot(vec3(_677, _678, _679), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1090 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3978 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1092 + 1.0))) + _1097) * _1060;
        float _1107 = _1028 * 0.5;
        float _1108 = _1038 * 0.5;
        float _1109 = _1048 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_677, _678, _679), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _4011 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1134 + 1.0))) + _1139) * _1061;
        float _1149 = _1029 * 0.5;
        float _1150 = _1039 * 0.5;
        float _1151 = _1049 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_677, _678, _679), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4044 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1176 + 1.0))) + _1181) * _1062;
        _1198 = _1029;
        _1200 = _1028;
        _1201 = _1027;
        _1202 = _1039;
        _1203 = _1038;
        _1204 = _1037;
        _1205 = _1049;
        _1206 = _1048;
        _1207 = _1047;
        _1208 = _1062;
        _1209 = _1061;
        _1210 = _1060;
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
    }
    else
    {
        _1198 = _1199;
        _1200 = _1199;
        _1201 = _1199;
        _1202 = _1199;
        _1203 = _1199;
        _1204 = _1199;
        _1205 = _1199;
        _1206 = _1199;
        _1207 = _1199;
        _1208 = _1199;
        _1209 = _1199;
        _1210 = _1199;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1237 = fma(_897, cbModelParam._m0[30u].z, fma(_893, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _889));
        float _1241 = fma(_897, cbModelParam._m0[31u].z, fma(_893, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _889));
        float _1245 = fma(_897, cbModelParam._m0[32u].z, fma(_893, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _889));
        float _1268 = _889 + _677;
        float _1269 = _893 + _678;
        float _1270 = _897 + _679;
        float _1280 = fma(_1270, cbModelParam._m0[30u].z, fma(_1269, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1268)) - _1237;
        float _1281 = fma(_1270, cbModelParam._m0[31u].z, fma(_1269, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1268)) - _1241;
        float _1282 = fma(_1270, cbModelParam._m0[32u].z, fma(_1269, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1268)) - _1245;
        float _1286 = inversesqrt(dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282)));
        float _1299 = ((_1286 * _1280) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1237 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1286 * _1281) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1241 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1286 * _1282) / cbModelParam._m0[35u].z) + ((((((_1245 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        float _1336 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1303.x + (-0.5));
        float _1338 = _1336 * (_1303.y + (-0.5));
        float _1339 = _1336 * (_1303.z + (-0.5));
        float _1346 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1310.x + (-0.5));
        float _1348 = _1346 * (_1310.y + (-0.5));
        float _1349 = _1346 * (_1310.z + (-0.5));
        float _1356 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1317.x + (-0.5));
        float _1358 = _1356 * (_1317.y + (-0.5));
        float _1359 = _1356 * (_1317.z + (-0.5));
        float _1366 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1324.x + (-0.5));
        float _1368 = _1366 * (_1324.y + (-0.5));
        float _1369 = _1366 * (_1324.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_677, _678, _679), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4107 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1400 + 1.0))) + _1405) * _1370;
        float _1415 = _1338 * 0.5;
        float _1416 = _1348 * 0.5;
        float _1417 = _1358 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_677, _678, _679), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4140 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1442 + 1.0))) + _1447) * _1371;
        float _1457 = _1339 * 0.5;
        float _1458 = _1349 * 0.5;
        float _1459 = _1359 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_677, _678, _679), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4173 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1484 + 1.0))) + _1489) * _1372;
        _1506 = _1339;
        _1507 = _1338;
        _1508 = _1337;
        _1509 = _1349;
        _1510 = _1348;
        _1511 = _1347;
        _1512 = _1359;
        _1513 = _1358;
        _1514 = _1357;
        _1515 = _1372;
        _1516 = _1371;
        _1517 = _1370;
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    }
    else
    {
        _1506 = _1199;
        _1507 = _1199;
        _1508 = _1199;
        _1509 = _1199;
        _1510 = _1199;
        _1511 = _1199;
        _1512 = _1199;
        _1513 = _1199;
        _1514 = _1199;
        _1515 = _1199;
        _1516 = _1199;
        _1517 = _1199;
        _1518 = 0.0;
        _1519 = 0.0;
        _1520 = 0.0;
    }
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1211)) + _1211;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1212)) + _1212;
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1213)) + _1213;
    float _1553 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1531, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1556 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1531, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1559 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1531, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1530));
    float _1574 = _836 * 0.5;
    float _1575 = _837 * 0.5;
    float _1576 = _838 * 0.5;
    float _1577 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1580 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1583 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1617;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1590 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1198, _1202, _1205, _1208));
        float _1594 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1598 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1605 = dot(vec4(cbModelParam._m0[39u]), vec4(_1574, _1575, _1576, 1.0));
        _1617 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1617 = 1.0;
    }
    float _1628;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1619 = dot(vec4(cbModelParam._m0[40u]), vec4(_1574, _1575, _1576, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1619) ? 0.0 : (isnan(0.0) ? _1619 : max(0.0, _1619))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1632 = (_1628 * cbModelParam._m0[1u].x) + (_1617 * (1.0 - cbModelParam._m0[1u].x));
    float _1642 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _680);
    float _1643 = isnan(_1642) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1642 : min(cbModelParam._m0[25u].z, _1642));
    float _1724;
    float _1726;
    float _1728;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1691 = fma(_897, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889)) + cbModelParam._m0[13u].w;
        float _1695 = fma(_897, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889)) + cbModelParam._m0[14u].w;
        float _1699 = fma(_897, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889)) + cbModelParam._m0[15u].w;
        float _1702 = fma(_838, cbModelParam._m0[13u].z, fma(_837, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _836));
        float _1705 = fma(_838, cbModelParam._m0[14u].z, fma(_837, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _836));
        float _1708 = fma(_838, cbModelParam._m0[15u].z, fma(_837, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _836));
        float _1736;
        if (_1702 > 0.0)
        {
            _1736 = abs((1.0 - _1691) / _1702);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1691 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1736 = frontier_phi_14_12_ladder;
        }
        float _1906;
        if (_1705 > 0.0)
        {
            _1906 = abs((1.0 - _1695) / _1705);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1695 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1906 = frontier_phi_23_19_ladder;
        }
        float _2201;
        if (_1708 > 0.0)
        {
            _2201 = abs((1.0 - _1699) / _1708);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1708 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1699 + 1.0) / _1708);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2201 = frontier_phi_35_30_ladder;
        }
        float _2203 = isnan(_1906) ? _1736 : (isnan(_1736) ? _1906 : min(_1736, _1906));
        float _2204 = isnan(_2201) ? _2203 : (isnan(_2203) ? _2201 : min(_2203, _2201));
        float _2208 = (_2204 * _1702) + _1691;
        float _2209 = (_2204 * _1705) + _1695;
        float _2210 = (_2204 * _1708) + _1699;
        float _2211 = _2204 * 9.9999997473787516355514526367188e-05;
        float _2213 = (-1.0) - _2211;
        float _2215 = _2211 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2210 > _2215) || ((_2210 < _2213) || ((_2209 > _2215) || ((_2209 < _2213) || ((_2208 < _2213) || (_2208 > _2215))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2355 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2210, cbModelParam._m0[9u].z, fma(_2209, cbModelParam._m0[9u].y, _2208 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2210, cbModelParam._m0[10u].z, fma(_2209, cbModelParam._m0[10u].y, _2208 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2210, cbModelParam._m0[11u].z, fma(_2209, cbModelParam._m0[11u].y, _2208 * cbModelParam._m0[11u].x))), _1643);
            frontier_phi_13_35_ladder = _2355.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2355.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2355.x * cbModelParam._m0[1u].y;
        }
        _1724 = frontier_phi_13_35_ladder_2;
        _1726 = frontier_phi_13_35_ladder_1;
        _1728 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1712 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_836, _837, _838), _1643);
        _1724 = _1712.x * cbModelParam._m0[1u].y;
        _1726 = _1712.y * cbModelParam._m0[1u].y;
        _1728 = _1712.z * cbModelParam._m0[1u].y;
    }
    float _1732 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _680);
    float _1733 = isnan(_1732) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1732 : min(cbModelParam._m0[25u].w, _1732));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1787 = fma(_897, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889)) + cbModelParam._m0[21u].w;
        float _1791 = fma(_897, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889)) + cbModelParam._m0[22u].w;
        float _1795 = fma(_897, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889)) + cbModelParam._m0[23u].w;
        float _1798 = fma(_838, cbModelParam._m0[21u].z, fma(_837, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _836));
        float _1801 = fma(_838, cbModelParam._m0[22u].z, fma(_837, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _836));
        float _1804 = fma(_838, cbModelParam._m0[23u].z, fma(_837, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _836));
        float _1911;
        if (_1798 > 0.0)
        {
            _1911 = abs((1.0 - _1787) / _1798);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1787 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1911 = frontier_phi_25_21_ladder;
        }
        float _2228;
        if (_1801 > 0.0)
        {
            _2228 = abs((1.0 - _1791) / _1801);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1791 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2228 = frontier_phi_37_32_ladder;
        }
        float _2555;
        if (_1804 > 0.0)
        {
            _2555 = abs((1.0 - _1795) / _1804);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1795 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2555 = frontier_phi_47_44_ladder;
        }
        float _2557 = isnan(_2228) ? _1911 : (isnan(_1911) ? _2228 : min(_1911, _2228));
        float _2558 = isnan(_2555) ? _2557 : (isnan(_2557) ? _2555 : min(_2557, _2555));
        float _2562 = (_2558 * _1798) + _1787;
        float _2563 = (_2558 * _1801) + _1791;
        float _2564 = (_2558 * _1804) + _1795;
        float _2565 = _2558 * 9.9999997473787516355514526367188e-05;
        float _2566 = (-1.0) - _2565;
        float _2568 = _2565 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2564 > _2568) || ((_2564 < _2566) || ((_2563 > _2568) || ((_2563 < _2566) || ((_2562 < _2566) || (_2562 > _2568))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2682 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2564, cbModelParam._m0[17u].z, fma(_2563, cbModelParam._m0[17u].y, _2562 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2564, cbModelParam._m0[18u].z, fma(_2563, cbModelParam._m0[18u].y, _2562 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2564, cbModelParam._m0[19u].z, fma(_2563, cbModelParam._m0[19u].y, _2562 * cbModelParam._m0[19u].x))), _1733);
            frontier_phi_22_47_ladder = _2682.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2682.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2682.x * cbModelParam._m0[1u].z;
        }
        _1823 = frontier_phi_22_47_ladder_2;
        _1825 = frontier_phi_22_47_ladder_1;
        _1827 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_836, _837, _838), _1733);
        _1823 = _1807.x * cbModelParam._m0[1u].z;
        _1825 = _1807.y * cbModelParam._m0[1u].z;
        _1827 = _1807.z * cbModelParam._m0[1u].z;
    }
    float _1839 = ((((1.0 - _857) * ((_844 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_857 * _844)) * _828;
    float _1840 = _1839 * ((cbModelParam._m0[1u].w * (_1823 - _1724)) + _1724);
    float _1841 = _1839 * ((cbModelParam._m0[1u].w * (_1825 - _1726)) + _1726);
    float _1842 = _1839 * ((cbModelParam._m0[1u].w * (_1827 - _1728)) + _1728);
    float _1845 = fma(_1842, cbSceneParam._m0[89u].z, fma(_1841, cbSceneParam._m0[89u].y, _1840 * cbSceneParam._m0[89u].x));
    float _1848 = fma(_1842, cbSceneParam._m0[90u].z, fma(_1841, cbSceneParam._m0[90u].y, _1840 * cbSceneParam._m0[90u].x));
    float _1851 = fma(_1842, cbSceneParam._m0[91u].z, fma(_1841, cbSceneParam._m0[91u].y, _1840 * cbSceneParam._m0[91u].x));
    float _1885 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1889 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1893 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1897 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1898 = _1885 / _1897;
    float _1899 = _1889 / _1897;
    float _1900 = _1893 / _1897;
    float _2047;
    float _2048;
    float _2049;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1927 = ((uint(_1900 > cbSceneParam._m0[59u].y) + uint(_1900 > cbSceneParam._m0[59u].x)) + uint(_1900 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1928 = _1927 + 43u;
        uint _1936 = _1927 + 44u;
        uint _1944 = _1927 + 45u;
        uint _1952 = _1927 + 46u;
        float _1963 = fma(_1897, cbSceneParam._m0[_1928].w, fma(_1893, cbSceneParam._m0[_1928].z, fma(_1889, cbSceneParam._m0[_1928].y, _1885 * cbSceneParam._m0[_1928].x)));
        float _1967 = fma(_1897, cbSceneParam._m0[_1936].w, fma(_1893, cbSceneParam._m0[_1936].z, fma(_1889, cbSceneParam._m0[_1936].y, _1885 * cbSceneParam._m0[_1936].x)));
        float _1975 = fma(_1897, cbSceneParam._m0[_1952].w, fma(_1893, cbSceneParam._m0[_1952].z, fma(_1889, cbSceneParam._m0[_1952].y, _1885 * cbSceneParam._m0[_1952].x)));
        float _1980 = cbSceneParam._m0[33u].z * _1975;
        float _1982 = cbSceneParam._m0[33u].w * _1975;
        float _1985 = fma(_1897, cbSceneParam._m0[_1944].w, fma(_1893, cbSceneParam._m0[_1944].z, fma(_1889, cbSceneParam._m0[_1944].y, _1885 * cbSceneParam._m0[_1944].x))) / _1975;
        float _2033 = (cbSceneParam._m0[33u].x - sqrt(((_1899 * _1899) + (_1898 * _1898)) + (_1900 * _1900))) * cbSceneParam._m0[33u].y;
        float _4299 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2040 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1980 + _1963) / _1975, (_1982 + _1967) / _1975), _1985), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1982 + _1963) / _1975, (_1967 - _1980) / _1975), _1985), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1963 - _1980) / _1975, (_1967 - _1982) / _1975), _1985), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1963 - _1982) / _1975, (_1980 + _1967) / _1975), _1985), 0.0)).x), vec4(0.25)));
        _2047 = 1.0 - (_2040 * cbSceneParam._m0[34u].x);
        _2048 = 1.0 - (_2040 * cbSceneParam._m0[34u].y);
        _2049 = 1.0 - (_2040 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2047 = 1.0;
        _2048 = 1.0;
        _2049 = 1.0;
    }
    float _2113;
    float _2115;
    float _2117;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2101 = fma(_1897, cbSceneParam._m0[63u].w, fma(_1893, cbSceneParam._m0[63u].z, fma(_1889, cbSceneParam._m0[63u].y, _1885 * cbSceneParam._m0[63u].x)));
        float _2102 = fma(_1897, cbSceneParam._m0[60u].w, fma(_1893, cbSceneParam._m0[60u].z, fma(_1889, cbSceneParam._m0[60u].y, _1885 * cbSceneParam._m0[60u].x))) / _2101;
        float _2103 = fma(_1897, cbSceneParam._m0[61u].w, fma(_1893, cbSceneParam._m0[61u].z, fma(_1889, cbSceneParam._m0[61u].y, _1885 * cbSceneParam._m0[61u].x))) / _2101;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2102 >= cbSceneParam._m0[64u].x) && (_2103 >= cbSceneParam._m0[64u].y)) && (_2102 <= cbSceneParam._m0[64u].z)) && (_2103 <= cbSceneParam._m0[64u].w))
        {
            float _2241 = fma(_1897, cbSceneParam._m0[62u].w, fma(_1893, cbSceneParam._m0[62u].z, fma(_1889, cbSceneParam._m0[62u].y, _1885 * cbSceneParam._m0[62u].x))) / _2101;
            float _2245 = isnan(cbSceneParam._m0[41u].w) ? _2241 : (isnan(_2241) ? cbSceneParam._m0[41u].w : max(_2241, cbSceneParam._m0[41u].w));
            float _2288 = (cbSceneParam._m0[33u].x - sqrt(((_1899 * _1899) + (_1898 * _1898)) + (_1900 * _1900))) * cbSceneParam._m0[33u].y;
            float _4315 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
            float _2295 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2102, cbSceneParam._m0[33u].w + _2103), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2102, _2103 - cbSceneParam._m0[33u].z), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2102 - cbSceneParam._m0[33u].z, _2103 - cbSceneParam._m0[33u].w), _2245), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2102 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2103), _2245), 0.0)).x), vec4(0.25)));
            float _2299 = 1.0 - (_2295 * cbSceneParam._m0[34u].x);
            float _2300 = 1.0 - (_2295 * cbSceneParam._m0[34u].y);
            float _2301 = 1.0 - (_2295 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2301) ? _2049 : (isnan(_2049) ? _2301 : min(_2049, _2301));
            frontier_phi_34_33_ladder_1 = isnan(_2300) ? _2048 : (isnan(_2048) ? _2300 : min(_2048, _2300));
            frontier_phi_34_33_ladder_2 = isnan(_2299) ? _2047 : (isnan(_2047) ? _2299 : min(_2047, _2299));
        }
        else
        {
            frontier_phi_34_33_ladder = _2049;
            frontier_phi_34_33_ladder_1 = _2048;
            frontier_phi_34_33_ladder_2 = _2047;
        }
        _2113 = frontier_phi_34_33_ladder_2;
        _2115 = frontier_phi_34_33_ladder_1;
        _2117 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2113 = _2047;
        _2115 = _2048;
        _2117 = _2049;
    }
    uvec4 _2122 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2124 = _2122.x * 14u;
    uint _2125 = _2124 + 13u;
    float _2132 = _828 + (-1.0);
    float _2137 = (cbLight._m0[_2125].x * _2132) + 1.0;
    float _2138 = (cbLight._m0[_2125].y * _2132) + 1.0;
    float _2139 = (cbLight._m0[_2125].z * _2132) + 1.0;
    float _2140 = (cbLight._m0[_2125].w * _2132) + 1.0;
    uint _2141 = _2124 + 5u;
    float _2147 = isnan(1.0) ? _2138 : (isnan(_2138) ? 1.0 : min(_2138, 1.0));
    uint _2151 = _2124 + 4u;
    float _2160 = isnan(1.0) ? _2137 : (isnan(_2137) ? 1.0 : min(_2137, 1.0));
    uint _2164 = _2124 | 1u;
    float _2175 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_677, _678, _679));
    float _2178 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_677, _678, _679));
    float _4351 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _4362 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2183 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * 0.3183098733425140380859375;
    float _2185 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
    float _2192 = ((cbLight._m0[_2141].x * _2147) * _2185) + (((cbLight._m0[_2151].x * _2113) * _2160) * _2183);
    float _2193 = ((_2147 * cbLight._m0[_2141].y) * _2185) + (((cbLight._m0[_2151].y * _2115) * _2160) * _2183);
    float _2194 = ((_2147 * cbLight._m0[_2141].z) * _2185) + (((cbLight._m0[_2151].z * _2117) * _2160) * _2183);
    uvec4 _2198 = floatBitsToUint(cbLight._m0[_2124 + 12u]);
    bool _2200 = _2198.x == 0u;
    float _2302;
    float _2304;
    float _2306;
    if (_2200)
    {
        _2302 = _2192;
        _2304 = _2193;
        _2306 = _2194;
    }
    else
    {
        uint _2310 = _2124 + 6u;
        float _2326 = (dot(vec3(cbLight._m0[_2124 + 2u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2327 = _2326 * _2326;
        float _4373 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2328 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2329 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2302 = (((cbLight._m0[_2310].x * 0.3183098733425140380859375) * _2328) * _2329) + _2192;
        _2304 = (((cbLight._m0[_2310].y * 0.3183098733425140380859375) * _2328) * _2329) + _2193;
        _2306 = (((cbLight._m0[_2310].z * 0.3183098733425140380859375) * _2328) * _2329) + _2194;
    }
    bool _2309 = _2198.y == 0u;
    float _2364;
    float _2366;
    float _2368;
    if (_2309)
    {
        _2364 = _2302;
        _2366 = _2304;
        _2368 = _2306;
    }
    else
    {
        uint _2526 = _2124 + 7u;
        float _2542 = (dot(vec3(cbLight._m0[_2124 + 3u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2543 = _2542 * _2542;
        float _4389 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2544 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2545 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2364 = (((cbLight._m0[_2526].x * 0.3183098733425140380859375) * _2544) * _2545) + _2302;
        _2366 = (((cbLight._m0[_2526].y * 0.3183098733425140380859375) * _2544) * _2545) + _2304;
        _2368 = (((cbLight._m0[_2526].z * 0.3183098733425140380859375) * _2544) * _2545) + _2306;
    }
    uint _2371 = _2124 + 8u;
    float _2384 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _680) * 0.949999988079071044921875);
    float _2385 = _2384 * _2384;
    float _2386 = cbLight._m0[_2124].x + _757;
    float _2387 = cbLight._m0[_2124].y + _758;
    float _2388 = cbLight._m0[_2124].z + _759;
    float _2392 = inversesqrt(dot(vec3(_2386, _2387, _2388), vec3(_2386, _2387, _2388)));
    float _2393 = _2392 * _2386;
    float _2394 = _2392 * _2387;
    float _2395 = _2392 * _2388;
    float _2396 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2124].xyz));
    float _4405 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _4416 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _2400 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2401 = dot(vec3(_677, _678, _679), vec3(_2393, _2394, _2395));
    float _4427 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2404 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2405 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2393, _2394, _2395));
    float _4438 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2409 = _2385 * _2385;
    float _2413 = ((_2404 * _2404) * (_2409 + (-1.0))) + 1.0;
    float _2424 = (exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2425 = 1.0 - _2385;
    float _2436 = (0.5 / (((_2400 * ((_2399 * _2425) + _2385)) + 9.9999999392252902907785028219223e-09) + (((_2400 * _2425) + _2385) * _2399))) * _2399;
    float _4449 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2438 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2409 / ((_2413 * _2413) * 3.141590118408203125));
    uint _2452 = _2124 + 9u;
    float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _680) * 0.949999988079071044921875);
    float _2464 = _2463 * _2463;
    float _2465 = cbLight._m0[_2164].x + _757;
    float _2466 = cbLight._m0[_2164].y + _758;
    float _2467 = cbLight._m0[_2164].z + _759;
    float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
    float _2472 = _2471 * _2465;
    float _2473 = _2471 * _2466;
    float _2474 = _2471 * _2467;
    float _2475 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2164].xyz));
    float _4460 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2478 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
    float _2479 = dot(vec3(_677, _678, _679), vec3(_2472, _2473, _2474));
    float _4471 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2482 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2483 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2472, _2473, _2474));
    float _4482 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2487 = _2464 * _2464;
    float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
    float _2500 = (exp2(log2(1.0 - (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2501 = 1.0 - _2464;
    float _2511 = (0.5 / (((_2400 * ((_2478 * _2501) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2400 * _2501) + _2464) * _2478))) * _2478;
    float _4493 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2513 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
    float _2523 = (((_2500 * cbLight._m0[_2452].x) * _2513) * _2147) + ((((cbLight._m0[_2371].x * _2113) * _2424) * _2438) * _2160);
    float _2524 = (((_2500 * cbLight._m0[_2452].y) * _2513) * _2147) + ((((cbLight._m0[_2371].y * _2115) * _2424) * _2438) * _2160);
    float _2525 = (((_2500 * cbLight._m0[_2452].z) * _2513) * _2147) + ((((cbLight._m0[_2371].z * _2117) * _2424) * _2438) * _2160);
    float _2581;
    float _2583;
    float _2585;
    if (_2200)
    {
        _2581 = _2523;
        _2583 = _2524;
        _2585 = _2525;
    }
    else
    {
        uint _2587 = _2124 + 2u;
        uint _2591 = _2124 + 10u;
        float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2587].w)) * _680) * 0.949999988079071044921875);
        float _2606 = _2605 * _2605;
        float _2607 = cbLight._m0[_2587].x + _757;
        float _2608 = cbLight._m0[_2587].y + _758;
        float _2609 = cbLight._m0[_2587].z + _759;
        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
        float _2614 = _2613 * _2607;
        float _2615 = _2613 * _2608;
        float _2616 = _2613 * _2609;
        float _2617 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2587].xyz));
        float _4504 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2621 = dot(vec3(_677, _678, _679), vec3(_2614, _2615, _2616));
        float _4515 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2625 = dot(vec3(cbLight._m0[_2587].xyz), vec3(_2614, _2615, _2616));
        float _4526 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2629 = _2606 * _2606;
        float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
        float _2642 = (exp2(log2(1.0 - (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2643 = 1.0 - _2606;
        float _2653 = (0.5 / (((_2400 * ((_2620 * _2643) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2400 * _2643) + _2606) * _2620))) * _2620;
        float _4537 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2655 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
        float _2656 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
        _2581 = (((_2642 * cbLight._m0[_2591].x) * _2655) * _2656) + _2523;
        _2583 = (((_2642 * cbLight._m0[_2591].y) * _2655) * _2656) + _2524;
        _2585 = (((_2642 * cbLight._m0[_2591].z) * _2655) * _2656) + _2525;
    }
    float _2687;
    float _2689;
    float _2691;
    if (_2309)
    {
        _2687 = _2581;
        _2689 = _2583;
        _2691 = _2585;
    }
    else
    {
        uint _2698 = _2124 + 3u;
        uint _2702 = _2124 + 11u;
        float _2716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2698].w)) * _680) * 0.949999988079071044921875);
        float _2717 = _2716 * _2716;
        float _2718 = cbLight._m0[_2698].x + _757;
        float _2719 = cbLight._m0[_2698].y + _758;
        float _2720 = cbLight._m0[_2698].z + _759;
        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
        float _2725 = _2724 * _2718;
        float _2726 = _2724 * _2719;
        float _2727 = _2724 * _2720;
        float _2728 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2698].xyz));
        float _4553 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2731 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2732 = dot(vec3(_677, _678, _679), vec3(_2725, _2726, _2727));
        float _4564 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2736 = dot(vec3(cbLight._m0[_2698].xyz), vec3(_2725, _2726, _2727));
        float _4575 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2740 = _2717 * _2717;
        float _2744 = ((_2735 * _2735) * (_2740 + (-1.0))) + 1.0;
        float _2753 = (exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2754 = 1.0 - _2717;
        float _2764 = (0.5 / (((_2400 * ((_2731 * _2754) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2400 * _2754) + _2717) * _2731))) * _2731;
        float _4586 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2766 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2740 / ((_2744 * _2744) * 3.141590118408203125));
        float _2767 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
        _2687 = (((_2753 * cbLight._m0[_2702].x) * _2766) * _2767) + _2581;
        _2689 = (((_2753 * cbLight._m0[_2702].y) * _2766) * _2767) + _2583;
        _2691 = (((_2753 * cbLight._m0[_2702].z) * _2766) * _2767) + _2585;
    }
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    if (_2122.y == 0u)
    {
        uvec4 _2788 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2789 = _2788.x;
        uint _2800 = uint((float(_2788.y) * floor(float(uint(cbSceneParam._m0[85u].y * _766) / _2789))) + floor(float(uint(cbSceneParam._m0[85u].x * _765) / _2789)));
        float _2810 = (log2(_1900 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2811 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        uint _2814 = uint(isnan(14.0) ? _2811 : (isnan(_2811) ? 14.0 : min(_2811, 14.0)));
        uvec4 _2819 = texelFetch(g_lightClusterGridBuffer, int(((_2814 << 2u) + (_2800 << 6u)) >> 2u));
        uint _2820 = _2819.x;
        uint _2821 = _2788.z;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((((1u << ((_2821 >> 4u) & 15u)) + 4294967295u) & _2820) == 0u) || ((_2821 & 240u) == 0u))
        {
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
        }
        else
        {
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            uint _3051 = 0u;
            uint _3060;
            bool _3061;
            for (;;)
            {
                _3060 = texelFetch(g_lightClassification, int((((_2814 << 5u) + (_2800 << 9u)) + (_3051 << 2u)) >> 2u)).x;
                _3061 = _3060 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3061)
                {
                    frontier_phi_66_pred = _3050;
                    frontier_phi_66_pred_1 = _3049;
                    frontier_phi_66_pred_2 = _3048;
                    frontier_phi_66_pred_3 = _3047;
                    frontier_phi_66_pred_4 = _3046;
                    frontier_phi_66_pred_5 = _3045;
                }
                else
                {
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    uint _3175;
                    _3169 = _3045;
                    _3170 = _3046;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3060;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    for (;;)
                    {
                        uint _3179 = uint(findLSB(_3175)) + (_3051 << 5u);
                        uint _3176 = (_3175 + 4294967295u) & _3175;
                        uint _3181 = _3179 * 48u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3181)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3181 + 3u)).x));
                        uint _3201 = (_3179 * 48u) + 4u;
                        vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 3u)).x));
                        uint _3220 = (_3179 * 48u) + 8u;
                        vec3 _3231 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3220)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3220 + 2u)).x));
                        float _3235 = _3195.x - _1898;
                        float _3236 = _3195.y - _1899;
                        float _3237 = _3195.z - _1900;
                        float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                        float _3241 = inversesqrt(_3238);
                        float _3242 = _3241 * _3235;
                        float _3243 = _3241 * _3236;
                        float _3244 = _3241 * _3237;
                        float _3245 = dot(vec3(_784, _787, _790), vec3(_3242, _3243, _3244));
                        float _3250 = 1.0 - (_3238 * _3195.w);
                        float _4612 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3252 = sqrt(_3238) * _3214.w;
                        float _3255 = 1.39999997615814208984375 / (_3252 + 1.39999997615814208984375);
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3245) + _3256;
                        float _3262 = _3252 * _3252;
                        float _3266 = ((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3251) / ((_3262 * 0.699999988079071044921875) + 1.0);
                        float _3270 = (-0.0) - _1898;
                        float _3271 = (-0.0) - _1899;
                        float _3272 = (-0.0) - _1900;
                        float _3276 = inversesqrt(dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272)));
                        float _3277 = _3276 * _3270;
                        float _3278 = _3276 * _3271;
                        float _3279 = _3276 * _3272;
                        float _3286 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                        float _3287 = 1.0 - _844;
                        float _3294 = sqrt(1.0 - ((1.0 - (_3287 * _3287)) * (1.0 - (_3286 * _3286))));
                        float _3295 = _3294 * _3294;
                        float _3296 = _3295 * _3295;
                        float _3297 = _3277 + _3242;
                        float _3298 = _3278 + _3243;
                        float _3299 = _3279 + _3244;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3307 = dot(vec3(_784, _787, _790), vec3(_3277, _3278, _3279));
                        float _4628 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3310 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3311 = dot(vec3(_784, _787, _790), vec3(_3303 * _3297, _3303 * _3298, _3303 * _3299));
                        float _4639 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3318 = ((_3314 * _3314) * (_3296 + (-1.0))) + 1.0;
                        float _3319 = _3255 * _3295;
                        float _3320 = _3319 * _3319;
                        float _3323 = ((1.0 - _3320) * _3245) + _3320;
                        float _4650 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3325 = 1.0 - _3295;
                        float _3335 = (0.5 / (((_3324 * ((_3310 * _3325) + _3295)) + 9.9999999392252902907785028219223e-09) + (((_3324 * _3325) + _3295) * _3310))) * _3324;
                        float _4661 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3346 = (((_3296 * 3.1415927410125732421875) * (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0)))) / ((_3318 * _3318) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125))) * _3251;
                        _3104 = (_3266 * _3214.x) + _3172;
                        _3105 = (_3266 * _3214.y) + _3173;
                        _3106 = (_3266 * _3214.z) + _3174;
                        _3101 = (_3346 * _3231.x) + _3169;
                        _3102 = (_3346 * _3231.y) + _3170;
                        _3103 = (_3346 * _3231.z) + _3171;
                        if (_3176 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3169 = _3101;
                            _3170 = _3102;
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3176;
                        }
                    }
                    frontier_phi_66_pred = _3106;
                    frontier_phi_66_pred_1 = _3105;
                    frontier_phi_66_pred_2 = _3104;
                    frontier_phi_66_pred_3 = _3103;
                    frontier_phi_66_pred_4 = _3102;
                    frontier_phi_66_pred_5 = _3101;
                }
                _2911 = frontier_phi_66_pred;
                _2909 = frontier_phi_66_pred_1;
                _2907 = frontier_phi_66_pred_2;
                _2905 = frontier_phi_66_pred_3;
                _2903 = frontier_phi_66_pred_4;
                _2901 = frontier_phi_66_pred_5;
                uint _3052 = _3051 + 1u;
                if (_3052 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3045 = _2901;
                    _3046 = _2903;
                    _3047 = _2905;
                    _3048 = _2907;
                    _3049 = _2909;
                    _3050 = _2911;
                    _3051 = _3052;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
        }
        uvec4 _2914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2915 = _2914.z;
        uint _2917 = (_2915 >> 8u) & 15u;
        float _3013;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        if (((4294967295u << _2917) & _2820) == 0u)
        {
            _3013 = _2900;
            _3015 = _2902;
            _3017 = _2904;
            _3019 = _2906;
            _3021 = _2908;
            _3023 = _2910;
        }
        else
        {
            float _3038 = inversesqrt(dot(vec3(_1898, _1899, _1900), vec3(_1898, _1899, _1900)));
            float _3039 = _3038 * _1898;
            float _3040 = _3038 * _1899;
            float _3041 = _3038 * _1900;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2917 < ((_2915 >> 12u) & 15u))
            {
                float _3014;
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3152 = _2900;
                float _3153 = _2902;
                float _3154 = _2904;
                float _3155 = _2906;
                float _3156 = _2908;
                float _3157 = _2910;
                uint _3158 = _2917;
                uint _3167;
                bool _3168;
                for (;;)
                {
                    _3167 = texelFetch(g_lightClassification, int((((_2814 << 5u) + (_2800 << 9u)) + (_3158 << 2u)) >> 2u)).x;
                    _3168 = _3167 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3168)
                    {
                        frontier_phi_72_pred = _3157;
                        frontier_phi_72_pred_1 = _3156;
                        frontier_phi_72_pred_2 = _3155;
                        frontier_phi_72_pred_3 = _3154;
                        frontier_phi_72_pred_4 = _3153;
                        frontier_phi_72_pred_5 = _3152;
                    }
                    else
                    {
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3364 = _3152;
                        float _3365 = _3153;
                        float _3366 = _3154;
                        float _3367 = _3155;
                        float _3368 = _3156;
                        float _3369 = _3157;
                        uint _3370 = _3167;
                        uint _3371;
                        vec4 _3396;
                        float _3397;
                        vec4 _3412;
                        vec3 _3424;
                        vec4 _3439;
                        vec4 _3454;
                        float _3500;
                        bool _3501;
                        for (;;)
                        {
                            uint _3381 = ((_3158 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3370));
                            _3371 = (_3370 + 4294967295u) & _3370;
                            uint _3383 = _3381 * 40u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3397 = _3396.w;
                            uint _3399 = (_3381 * 40u) + 4u;
                            _3412 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3399)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3399 + 3u)).x));
                            uint _3414 = (_3381 * 40u) + 8u;
                            _3424 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x));
                            uint _3426 = (_3381 * 40u) + 16u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3381 * 40u) + 20u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3381 * 40u) + 24u;
                            vec4 _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            uint _3475 = (_3381 * 40u) + 28u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            _3500 = fma(_1900, _3488.z, fma(_1899, _3488.y, _3488.x * _1898)) + _3488.w;
                            _3501 = !((fma(_1900, _3469.z, fma(_1899, _3469.y, _3469.x * _1898)) + _3469.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3501)
                            {
                                float _3528 = _3396.x - _1898;
                                float _3529 = _3396.y - _1899;
                                float _3530 = _3396.z - _1900;
                                float _3531 = dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530));
                                float _3534 = inversesqrt(_3531);
                                float _3535 = _3534 * _3528;
                                float _3536 = _3534 * _3529;
                                float _3537 = _3534 * _3530;
                                float _3541 = 1.0 - (_3531 / (_3397 * _3397));
                                float _4672 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3546 = sqrt(_3531) * _3412.w;
                                float _3548 = 1.39999997615814208984375 / (_3546 + 1.39999997615814208984375);
                                float _3549 = _3548 * _3548;
                                float _3552 = ((1.0 - _3549) * dot(vec3(_3535, _3536, _3537), vec3(_784, _787, _790))) + _3549;
                                float _3555 = _3546 * _3546;
                                float _3559 = (fma(_1900, _3439.z, fma(_1899, _3439.y, _3439.x * _1898)) + _3439.w) / _3500;
                                float _3560 = (fma(_1900, _3454.z, fma(_1899, _3454.y, _3454.x * _1898)) + _3454.w) / _3500;
                                float _3564 = 1.0 - dot(vec2(_3559, _3560), vec2(_3559, _3560));
                                float _4688 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3566 = _3565 * (((isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0))) * _3542) / ((_3555 * 0.699999988079071044921875) + 1.0));
                                float _3578 = exp2(log2(1.0 / ((_3555 * 3.5) + 5.0)) * 0.25);
                                float _3579 = 1.0 - _844;
                                float _3586 = sqrt(1.0 - ((1.0 - (_3579 * _3579)) * (1.0 - (_3578 * _3578))));
                                float _3587 = _3586 * _3586;
                                float _3588 = _3587 * _3587;
                                float _3589 = _3535 - _3039;
                                float _3590 = _3536 - _3040;
                                float _3591 = _3537 - _3041;
                                float _3595 = inversesqrt(dot(vec3(_3589, _3590, _3591), vec3(_3589, _3590, _3591)));
                                float _3599 = dot(vec3(_784, _787, _790), vec3((-0.0) - _3039, (-0.0) - _3040, (-0.0) - _3041));
                                float _4699 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3602 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3603 = dot(vec3(_784, _787, _790), vec3(_3595 * _3589, _3595 * _3590, _3595 * _3591));
                                float _4710 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3606 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3610 = ((_3606 * _3606) * (_3588 + (-1.0))) + 1.0;
                                float _3611 = _3548 * _3587;
                                float _3612 = _3611 * _3611;
                                float _3618 = ((1.0 - _3612) * dot(vec3(_784, _787, _790), vec3(_3535, _3536, _3537))) + _3612;
                                float _4721 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3619 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3620 = 1.0 - _3587;
                                float _3630 = (0.5 / (((_3619 * ((_3602 * _3620) + _3587)) + 9.9999999392252902907785028219223e-09) + (((_3619 * _3620) + _3587) * _3602))) * _3619;
                                float _4732 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3640 = (_3565 * _3542) * (((_3588 * 3.1415927410125732421875) * (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) / ((_3610 * _3610) * ((_3555 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3566 * _3412.y;
                                frontier_phi_78_pred_1 = _3566 * _3412.x;
                                frontier_phi_78_pred_2 = _3640 * _3424.z;
                                frontier_phi_78_pred_3 = _3640 * _3424.y;
                                frontier_phi_78_pred_4 = _3640 * _3424.x;
                                frontier_phi_78_pred_5 = _3566 * _3412.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3648 = frontier_phi_78_pred;
                            _3647 = frontier_phi_78_pred_1;
                            _3646 = frontier_phi_78_pred_2;
                            _3645 = frontier_phi_78_pred_3;
                            _3644 = frontier_phi_78_pred_4;
                            _3649 = frontier_phi_78_pred_5;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            _3356 = _3649 + _3369;
                            _3351 = _3644 + _3364;
                            _3352 = _3645 + _3365;
                            _3353 = _3646 + _3366;
                            if (_3371 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3364 = _3351;
                                _3365 = _3352;
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3371;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3356;
                        frontier_phi_72_pred_1 = _3355;
                        frontier_phi_72_pred_2 = _3354;
                        frontier_phi_72_pred_3 = _3353;
                        frontier_phi_72_pred_4 = _3352;
                        frontier_phi_72_pred_5 = _3351;
                    }
                    _3024 = frontier_phi_72_pred;
                    _3022 = frontier_phi_72_pred_1;
                    _3020 = frontier_phi_72_pred_2;
                    _3018 = frontier_phi_72_pred_3;
                    _3016 = frontier_phi_72_pred_4;
                    _3014 = frontier_phi_72_pred_5;
                    uint _3159 = _3158 + 1u;
                    if (_3159 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3152 = _3014;
                        _3153 = _3016;
                        _3154 = _3018;
                        _3155 = _3020;
                        _3156 = _3022;
                        _3157 = _3024;
                        _3158 = _3159;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3024;
                frontier_phi_60_61_ladder_1 = _3022;
                frontier_phi_60_61_ladder_2 = _3018;
                frontier_phi_60_61_ladder_3 = _3016;
                frontier_phi_60_61_ladder_4 = _3014;
                frontier_phi_60_61_ladder_5 = _3020;
            }
            else
            {
                frontier_phi_60_61_ladder = _2910;
                frontier_phi_60_61_ladder_1 = _2908;
                frontier_phi_60_61_ladder_2 = _2904;
                frontier_phi_60_61_ladder_3 = _2902;
                frontier_phi_60_61_ladder_4 = _2900;
                frontier_phi_60_61_ladder_5 = _2906;
            }
            _3013 = frontier_phi_60_61_ladder_4;
            _3015 = frontier_phi_60_61_ladder_3;
            _3017 = frontier_phi_60_61_ladder_2;
            _3019 = frontier_phi_60_61_ladder_5;
            _3021 = frontier_phi_60_61_ladder_1;
            _3023 = frontier_phi_60_61_ladder;
        }
        float _3028 = isnan(1.0) ? _828 : (isnan(_828) ? 1.0 : min(_828, 1.0));
        _2833 = (_3028 * _3019) + _2364;
        _2835 = (_3028 * _3021) + _2366;
        _2837 = (_3028 * _3023) + _2368;
        _2839 = ((_3013 * 0.039999999105930328369140625) * _3028) + _2687;
        _2841 = ((_3015 * 0.039999999105930328369140625) * _3028) + _2689;
        _2843 = ((_3017 * 0.039999999105930328369140625) * _3028) + _2691;
    }
    else
    {
        _2833 = _2364;
        _2835 = _2366;
        _2837 = _2368;
        _2839 = _2687;
        _2841 = _2689;
        _2843 = _2691;
    }
    float _4748 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4759 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4770 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    uint _2863 = _238 + 6u;
    float _2871 = _765 / cbSceneParam._m0[86u].x;
    float _2872 = _766 / cbSceneParam._m0[86u].y;
    vec4 _2886 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2871, _2872, (log2((isnan(cbSceneParam._m0[77u].w) ? _698 : (isnan(_698) ? cbSceneParam._m0[77u].w : min(_698, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2888 = _2886.x;
    float _2889 = _2886.y;
    float _2890 = _2886.z;
    float _2891 = _2886.w;
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    if (_698 > cbSceneParam._m0[78u].w)
    {
        float _2925 = isnan(_698) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _698 : min(cbSceneParam._m0[80u].w, _698));
        float _2926 = _2925 / _698;
        float _2937 = _2926 * _750;
        float _2938 = _751 * _2926;
        float _2939 = (-0.0) - _2938;
        float _2941 = _2926 * _752;
        float _2943 = (cbSceneParam._m0[77u].w * _2939) / _2925;
        float _2944 = _2943 + cbSceneParam._m0[79u].w;
        float _2945 = cbSceneParam._m0[79u].w - _2938;
        float _2951 = sqrt(((_2937 * _2937) + (_2938 * _2938)) + (_2941 * _2941));
        float _2954 = (1.0 - (cbSceneParam._m0[77u].w / _2925)) * _2951;
        float _2959 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2961 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3114;
        if (abs((_2939 - _2943) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3114 = ((((_2944 > 0.0) ? exp2(_2959 * _2944) : (2.0 - exp2(_2961 * _2944))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2954;
        }
        else
        {
            float _3074 = 1.0 / cbSceneParam._m0[80u].x;
            float _3075 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : max(_2944, _2945));
            float _3076 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : min(_2944, _2945));
            float _3085 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : min(_3075, 0.0));
            float _3086 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : min(_3076, 0.0));
            _3114 = ((abs(_2951 / _2939) * cbSceneParam._m0[80u].y) * ((((_3085 - _3086) * 2.0) - ((exp2(_2959 * (isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0)))) - exp2(_2959 * (isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0))))) * _3074)) - ((exp2(_2961 * _3085) - exp2(_2961 * _3086)) * _3074))) + (_2954 * cbSceneParam._m0[80u].z);
        }
        vec4 _3116 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2871, _2872, 1.0), 0.0);
        float _3125 = exp2((_3114 * (-1.44269502162933349609375)) * (1.0 - _3116.w));
        float _3126 = log2(_3125);
        float _3142 = log2(_2891);
        _2963 = (exp2(_3142 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].x)) * _3116.x) / cbSceneParam._m0[78u].x)) + _2888;
        _2965 = (exp2(_3142 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].y)) * _3116.y) / cbSceneParam._m0[78u].y)) + _2889;
        _2967 = (exp2(_3142 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3126 * cbSceneParam._m0[78u].z)) * _3116.z) / cbSceneParam._m0[78u].z)) + _2890;
        _2969 = _3125 * _2891;
    }
    else
    {
        _2963 = _2888;
        _2965 = _2889;
        _2967 = _2890;
        _2969 = _2891;
    }
    float _2981 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2982 = _2981 == 3.0;
    float _2983 = log2(_2969);
    float _2990 = exp2(_2983 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2833 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _828))) + ((_2839 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1632)) * cbPerFrame._m0[3u].x));
    float _2991 = exp2(_2983 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2835 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _828))) + ((_2841 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1632)) * cbPerFrame._m0[3u].x));
    float _2992 = exp2(_2983 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2837 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _828))) + ((_2843 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1632)) * cbPerFrame._m0[3u].x));
    float _3001 = (_2981 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3001 * (_2982 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2963)));
    SV_Target.y = _3001 * (_2982 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2965)));
    SV_Target.z = _3001 * (_2982 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2967)));
    SV_Target.w = cbInstanceData._m0[_2863].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2863].w;
}


