#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1254;
float _3898;
float _3899;
float _3900;
float _3901;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _233 = _232 * _224;
    float _234 = _232 * _225;
    float _235 = _232 * _226;
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = _239 * NORMAL.x;
    float _241 = _239 * NORMAL.y;
    float _242 = _239 * NORMAL.z;
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = _246 * TANGENT.x;
    float _248 = _246 * TANGENT.y;
    float _249 = _246 * TANGENT.z;
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3910 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3921 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3932 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _290) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _291) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _332 = _327.x * cbMtdParam._m0[9u].x;
    float _333 = _327.y * cbMtdParam._m0[9u].y;
    float _334 = _327.z * cbMtdParam._m0[9u].z;
    float _338 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _304.x) * _332;
    float _341 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _304.y) * _333;
    float _344 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _304.z) * _334;
    float _351 = ((_332 - _338) * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) + _338;
    float _352 = ((_333 - _341) * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) + _341;
    float _353 = ((_334 - _344) * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) + _344;
    vec4 _371 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _290) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _291) + cbTextureTilingScale._m0[20u].w));
    vec4 _397 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _401 = _397.z;
    float _405 = (_397.x * 2.0) + (-1.0);
    float _406 = (_397.y * 2.0) + (-1.0);
    float _407 = dot(vec2(_405, _406), vec2(_405, _406));
    float _3943 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _412 = sqrt(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))));
    float _417 = _405 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_371.x * 2.0) + (-1.0)));
    float _418 = _406 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_371.y * 2.0) + (-1.0)));
    float _421 = fma(_412, _240, fma(_418, _247, _417 * _233));
    float _424 = fma(_412, _241, fma(_418, _248, _417 * _234));
    float _427 = fma(_412, _242, fma(_418, _249, _417 * _235));
    float _431 = inversesqrt(dot(vec3(_421, _424, _427), vec3(_421, _424, _427)));
    vec4 _467 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _469 = _467.x;
    float _470 = 1.0 - _469;
    float _477 = ((_469 - _470) * cbMtdParam._m0[24u].z) + _470;
    float _479 = (cbMtdParam._m0[19u].x + dot(vec4(_431 * _421, _431 * _424, _431 * _427, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_477 * cbMtdParam._m0[21u].z);
    float _3954 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _482 = (-0.0) - cbMtdParam._m0[24u].y;
    float _484 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _485 = isnan(1.0) ? _484 : (isnan(_484) ? 1.0 : min(_484, 1.0));
    float _492 = _480 - ((_480 * TEXCOORD_8.x) * _485);
    float _493 = _480 - ((_480 * TEXCOORD_8.y) * _485);
    float _494 = _480 - ((_480 * TEXCOORD_8.z) * _485);
    float _501 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _505 = ((isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : min(_501, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _513 = (_505 - (((_477 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _505))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3985 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _518 = ((_492 * (cbMtdParam._m0[17u].x - _351)) * _514) + _351;
    float _519 = ((_493 * (cbMtdParam._m0[17u].y - _352)) * _514) + _352;
    float _520 = ((_494 * (cbMtdParam._m0[17u].z - _353)) * _514) + _353;
    vec4 _532 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _534 = _532.x;
    float _535 = 1.0 - _534;
    float _562 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_534 - _535) * cbMtdParam._m0[24u].w) + _535) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3996 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _571 = ((((cbMtdParam._m0[10u].x - _518) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _563) + _518;
    float _572 = ((((cbMtdParam._m0[10u].y - _519) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _563) + _519;
    float _573 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _520)) * _563) + _520;
    float _578 = (((_371.z - _401) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _401;
    vec4 _592 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _599 = (_592.x * 2.0) + (-1.0);
    float _600 = (_592.y * 2.0) + (-1.0);
    float _601 = dot(vec2(_599, _600), vec2(_599, _600));
    float _4007 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _610 = (((_592.z - _578) * _492) * _514) + _578;
    float _613 = ((cbMtdParam._m0[23u].y - _610) * _563) + _610;
    vec4 _632 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _638 = (_632.x * 2.0) + (-1.0);
    float _639 = (_632.y * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _4018 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _660 = (((cbMtdParam._m0[21u].x * _417) + ((_599 - _417) * _492)) * _514) + _417;
    float _661 = (((cbMtdParam._m0[21u].x * _418) + ((_600 - _418) * _493)) * _514) + _418;
    float _662 = (((sqrt(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) - _412) * _494) * _514) + _412;
    float _673 = (((_638 - _660) + (_660 * cbMtdParam._m0[22u].z)) * _563) + _660;
    float _674 = (((_639 - _661) + (_661 * cbMtdParam._m0[22u].z)) * _563) + _661;
    float _675 = ((sqrt(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) - _662) * _563) + _662;
    float _677 = cbMtdParam._m0[22u].x + _397.w;
    float _680 = fma(_675, _240, fma(_674, _247, _673 * _233));
    float _683 = fma(_675, _241, fma(_674, _248, _673 * _234));
    float _686 = fma(_675, _242, fma(_674, _249, _673 * _235));
    float _690 = inversesqrt(dot(vec3(_680, _683, _686), vec3(_680, _683, _686)));
    float _691 = _690 * _680;
    float _692 = _690 * _683;
    float _693 = _690 * _686;
    float _4029 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _694 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4051 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4062 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4073 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _712 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _762 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _752);
    float _763 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _752);
    float _764 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _752);
    float _768 = inversesqrt(dot(vec3(_762, _763, _764), vec3(_762, _763, _764)));
    float _769 = _762 * _768;
    float _770 = _763 * _768;
    float _771 = _764 * _768;
    vec4 _776 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _778 = _776.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _935 = sqrt(((_762 * _762) + (_763 * _763)) + (_764 * _764));
        float _941 = (cbMatDynParam._m0[5u].x * _935) + cbMatDynParam._m0[5u].y;
        float _4084 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _946 = (cbMatDynParam._m0[5u].z * _935) + cbMatDynParam._m0[5u].w;
        float _4095 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) - _942)) + _942) < ((_778 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _790 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _791 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _811 = fma(_693, cbSceneParam._m0[5u].z, fma(_692, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _691));
    float _814 = fma(_693, cbSceneParam._m0[6u].z, fma(_692, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _691));
    float _817 = fma(_693, cbSceneParam._m0[7u].z, fma(_692, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _691));
    uint _830 = _271 + 9u;
    uint _831 = _830 + uint(cbMatDynParam._m0[0u].w);
    float _837 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_831].x;
    float _838 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * cbInstanceData._m0[_831].y;
    float _839 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * cbInstanceData._m0[_831].z;
    float _4106 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    vec4 _851 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _790, cbSceneParam._m0[86u].y * _791));
    float _855 = ((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * TEXCOORD_5.w) * _851.x;
    float _856 = dot(vec3(_691, _692, _693), vec3(_769, _770, _771));
    float _859 = _856 * 2.0;
    float _863 = (_859 * _691) - _769;
    float _864 = (_859 * _692) - _770;
    float _865 = (_859 * _693) - _771;
    float _869 = abs(dot(vec3(_769, _770, _771), vec3(_691, _692, _693)));
    float _4139 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _871 = sqrt(_694);
    float _884 = exp2((_871 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_871 * 3.0));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1253;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _978 = fma(_924, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916));
        float _982 = fma(_924, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916));
        float _986 = fma(_924, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916));
        float _1011 = _916 + _691;
        float _1012 = _920 + _692;
        float _1013 = _924 + _693;
        float _1023 = fma(_1013, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1011)) - _978;
        float _1024 = fma(_1013, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1011)) - _982;
        float _1025 = fma(_1013, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1011)) - _986;
        float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
        float _1042 = ((_1029 * _1023) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_978 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1043 = ((_1029 * _1024) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_982 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1029 * _1025) / cbModelParam._m0[34u].z) + ((((((_986 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1042, _1043, _1044), 0.0);
        float _1081 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1047.x + (-0.5));
        float _1083 = _1081 * (_1047.y + (-0.5));
        float _1084 = _1081 * (_1047.z + (-0.5));
        float _1091 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1054.x + (-0.5));
        float _1093 = _1091 * (_1054.y + (-0.5));
        float _1094 = _1091 * (_1054.z + (-0.5));
        float _1101 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1061.x + (-0.5));
        float _1103 = _1101 * (_1061.y + (-0.5));
        float _1104 = _1101 * (_1061.z + (-0.5));
        float _1111 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1068.x + (-0.5));
        float _1113 = _1111 * (_1068.y + (-0.5));
        float _1114 = _1111 * (_1068.z + (-0.5));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = _1082 * 0.5;
        float _1119 = _1092 * 0.5;
        float _1120 = _1102 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1135 = (dot(vec3(_691, _692, _693), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1145 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _4187 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1147 + 1.0))) + _1152) * _1115;
        float _1162 = _1083 * 0.5;
        float _1163 = _1093 * 0.5;
        float _1164 = _1103 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_691, _692, _693), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _4220 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1189 + 1.0))) + _1194) * _1116;
        float _1204 = _1084 * 0.5;
        float _1205 = _1094 * 0.5;
        float _1206 = _1104 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_691, _692, _693), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _4253 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1231 + 1.0))) + _1236) * _1117;
        _1253 = _1084;
        _1255 = _1083;
        _1256 = _1082;
        _1257 = _1094;
        _1258 = _1093;
        _1259 = _1092;
        _1260 = _1104;
        _1261 = _1103;
        _1262 = _1102;
        _1263 = _1117;
        _1264 = _1116;
        _1265 = _1115;
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
    }
    else
    {
        _1253 = _1254;
        _1255 = _1254;
        _1256 = _1254;
        _1257 = _1254;
        _1258 = _1254;
        _1259 = _1254;
        _1260 = _1254;
        _1261 = _1254;
        _1262 = _1254;
        _1263 = _1254;
        _1264 = _1254;
        _1265 = _1254;
        _1266 = 0.0;
        _1267 = 0.0;
        _1268 = 0.0;
    }
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1296 = fma(_924, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916));
        float _1300 = fma(_924, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916));
        float _1304 = fma(_924, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916));
        float _1327 = _916 + _691;
        float _1328 = _920 + _692;
        float _1329 = _924 + _693;
        float _1339 = fma(_1329, cbModelParam._m0[30u].z, fma(_1328, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1327)) - _1296;
        float _1340 = fma(_1329, cbModelParam._m0[31u].z, fma(_1328, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1327)) - _1300;
        float _1341 = fma(_1329, cbModelParam._m0[32u].z, fma(_1328, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1327)) - _1304;
        float _1345 = inversesqrt(dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341)));
        float _1358 = ((_1345 * _1339) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1296 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1345 * _1340) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1300 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1345 * _1341) / cbModelParam._m0[35u].z) + ((((((_1304 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        float _1395 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1362.x + (-0.5));
        float _1397 = _1395 * (_1362.y + (-0.5));
        float _1398 = _1395 * (_1362.z + (-0.5));
        float _1405 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1369.x + (-0.5));
        float _1407 = _1405 * (_1369.y + (-0.5));
        float _1408 = _1405 * (_1369.z + (-0.5));
        float _1415 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1376.x + (-0.5));
        float _1417 = _1415 * (_1376.y + (-0.5));
        float _1418 = _1415 * (_1376.z + (-0.5));
        float _1425 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1383.x + (-0.5));
        float _1427 = _1425 * (_1383.y + (-0.5));
        float _1428 = _1425 * (_1383.z + (-0.5));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = _1396 * 0.5;
        float _1433 = _1406 * 0.5;
        float _1434 = _1416 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_691, _692, _693), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4316 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1459 + 1.0))) + _1464) * _1429;
        float _1474 = _1397 * 0.5;
        float _1475 = _1407 * 0.5;
        float _1476 = _1417 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_691, _692, _693), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4349 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1501 + 1.0))) + _1506) * _1430;
        float _1516 = _1398 * 0.5;
        float _1517 = _1408 * 0.5;
        float _1518 = _1418 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_691, _692, _693), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4382 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1543 + 1.0))) + _1548) * _1431;
        _1565 = _1398;
        _1566 = _1397;
        _1567 = _1396;
        _1568 = _1408;
        _1569 = _1407;
        _1570 = _1406;
        _1571 = _1418;
        _1572 = _1417;
        _1573 = _1416;
        _1574 = _1431;
        _1575 = _1430;
        _1576 = _1429;
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
    }
    else
    {
        _1565 = _1254;
        _1566 = _1254;
        _1567 = _1254;
        _1568 = _1254;
        _1569 = _1254;
        _1570 = _1254;
        _1571 = _1254;
        _1572 = _1254;
        _1573 = _1254;
        _1574 = _1254;
        _1575 = _1254;
        _1576 = _1254;
        _1577 = 0.0;
        _1578 = 0.0;
        _1579 = 0.0;
    }
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1266)) + _1266;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1267)) + _1267;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1268)) + _1268;
    float _1612 = fma(_1591, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1589 * cbSceneParam._m0[89u].x));
    float _1615 = fma(_1591, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1589 * cbSceneParam._m0[90u].x));
    float _1618 = fma(_1591, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1589));
    float _1633 = _863 * 0.5;
    float _1634 = _864 * 0.5;
    float _1635 = _865 * 0.5;
    float _1636 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1639 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1642 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1676;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1649 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1253, _1257, _1260, _1263));
        float _1653 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1255, _1258, _1261, _1264));
        float _1657 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1664 = dot(vec4(cbModelParam._m0[39u]), vec4(_1633, _1634, _1635, 1.0));
        _1676 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1676 = 1.0;
    }
    float _1687;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1678 = dot(vec4(cbModelParam._m0[40u]), vec4(_1633, _1634, _1635, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1691 = (_1687 * cbModelParam._m0[1u].x) + (_1676 * (1.0 - cbModelParam._m0[1u].x));
    float _1701 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _694);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1701 : min(cbModelParam._m0[25u].z, _1701));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1750 = fma(_924, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _916)) + cbModelParam._m0[13u].w;
        float _1754 = fma(_924, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _916)) + cbModelParam._m0[14u].w;
        float _1758 = fma(_924, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _916)) + cbModelParam._m0[15u].w;
        float _1761 = fma(_865, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863));
        float _1764 = fma(_865, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863));
        float _1767 = fma(_865, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863));
        float _1795;
        if (_1761 > 0.0)
        {
            _1795 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1795 = frontier_phi_17_15_ladder;
        }
        float _1966;
        if (_1764 > 0.0)
        {
            _1966 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1966 = frontier_phi_26_22_ladder;
        }
        float _2262;
        if (_1767 > 0.0)
        {
            _2262 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2262 = frontier_phi_38_33_ladder;
        }
        float _2264 = isnan(_1966) ? _1795 : (isnan(_1795) ? _1966 : min(_1795, _1966));
        float _2265 = isnan(_2262) ? _2264 : (isnan(_2264) ? _2262 : min(_2264, _2262));
        float _2269 = (_2265 * _1761) + _1750;
        float _2270 = (_2265 * _1764) + _1754;
        float _2271 = (_2265 * _1767) + _1758;
        float _2272 = _2265 * 9.9999997473787516355514526367188e-05;
        float _2274 = (-1.0) - _2272;
        float _2276 = _2272 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2271 > _2276) || ((_2271 < _2274) || ((_2270 > _2276) || ((_2270 < _2274) || ((_2269 < _2274) || (_2269 > _2276))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2416 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2271, cbModelParam._m0[9u].z, fma(_2270, cbModelParam._m0[9u].y, _2269 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2271, cbModelParam._m0[10u].z, fma(_2270, cbModelParam._m0[10u].y, _2269 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2271, cbModelParam._m0[11u].z, fma(_2270, cbModelParam._m0[11u].y, _2269 * cbModelParam._m0[11u].x))), _1702);
            frontier_phi_16_38_ladder = _2416.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2416.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2416.x * cbModelParam._m0[1u].y;
        }
        _1783 = frontier_phi_16_38_ladder_2;
        _1785 = frontier_phi_16_38_ladder_1;
        _1787 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_863, _864, _865), _1702);
        _1783 = _1771.x * cbModelParam._m0[1u].y;
        _1785 = _1771.y * cbModelParam._m0[1u].y;
        _1787 = _1771.z * cbModelParam._m0[1u].y;
    }
    float _1791 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _694);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1791 : min(cbModelParam._m0[25u].w, _1791));
    float _1882;
    float _1884;
    float _1886;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1846 = fma(_924, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _916)) + cbModelParam._m0[21u].w;
        float _1850 = fma(_924, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _916)) + cbModelParam._m0[22u].w;
        float _1854 = fma(_924, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _916)) + cbModelParam._m0[23u].w;
        float _1857 = fma(_865, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863));
        float _1860 = fma(_865, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863));
        float _1863 = fma(_865, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863));
        float _1971;
        if (_1857 > 0.0)
        {
            _1971 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1971 = frontier_phi_28_24_ladder;
        }
        float _2289;
        if (_1860 > 0.0)
        {
            _2289 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2289 = frontier_phi_40_35_ladder;
        }
        float _2616;
        if (_1863 > 0.0)
        {
            _2616 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2616 = frontier_phi_50_47_ladder;
        }
        float _2618 = isnan(_2289) ? _1971 : (isnan(_1971) ? _2289 : min(_1971, _2289));
        float _2619 = isnan(_2616) ? _2618 : (isnan(_2618) ? _2616 : min(_2618, _2616));
        float _2623 = (_2619 * _1857) + _1846;
        float _2624 = (_2619 * _1860) + _1850;
        float _2625 = (_2619 * _1863) + _1854;
        float _2626 = _2619 * 9.9999997473787516355514526367188e-05;
        float _2627 = (-1.0) - _2626;
        float _2629 = _2626 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2625 > _2629) || ((_2625 < _2627) || ((_2624 > _2629) || ((_2624 < _2627) || ((_2623 < _2627) || (_2623 > _2629))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2625, cbModelParam._m0[17u].z, fma(_2624, cbModelParam._m0[17u].y, _2623 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2625, cbModelParam._m0[18u].z, fma(_2624, cbModelParam._m0[18u].y, _2623 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2625, cbModelParam._m0[19u].z, fma(_2624, cbModelParam._m0[19u].y, _2623 * cbModelParam._m0[19u].x))), _1792);
            frontier_phi_25_50_ladder = _2743.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2743.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2743.x * cbModelParam._m0[1u].z;
        }
        _1882 = frontier_phi_25_50_ladder_2;
        _1884 = frontier_phi_25_50_ladder_1;
        _1886 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1866 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_863, _864, _865), _1792);
        _1882 = _1866.x * cbModelParam._m0[1u].z;
        _1884 = _1866.y * cbModelParam._m0[1u].z;
        _1886 = _1866.z * cbModelParam._m0[1u].z;
    }
    float _1898 = ((((1.0 - _884) * ((_871 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_884 * _871)) * _855;
    float _1899 = _1898 * ((cbModelParam._m0[1u].w * (_1882 - _1783)) + _1783);
    float _1900 = _1898 * ((cbModelParam._m0[1u].w * (_1884 - _1785)) + _1785);
    float _1901 = _1898 * ((cbModelParam._m0[1u].w * (_1886 - _1787)) + _1787);
    float _1904 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1900, cbSceneParam._m0[89u].y, _1899 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1900, cbSceneParam._m0[90u].y, _1899 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1900, cbSceneParam._m0[91u].y, _1899 * cbSceneParam._m0[91u].x));
    float _1945 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1949 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1953 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1957 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1958 = _1945 / _1957;
    float _1959 = _1949 / _1957;
    float _1960 = _1953 / _1957;
    float _2107;
    float _2108;
    float _2109;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1987 = ((uint(_1960 > cbSceneParam._m0[59u].y) + uint(_1960 > cbSceneParam._m0[59u].x)) + uint(_1960 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1988 = _1987 + 43u;
        uint _1996 = _1987 + 44u;
        uint _2004 = _1987 + 45u;
        uint _2012 = _1987 + 46u;
        float _2023 = fma(_1957, cbSceneParam._m0[_1988].w, fma(_1953, cbSceneParam._m0[_1988].z, fma(_1949, cbSceneParam._m0[_1988].y, _1945 * cbSceneParam._m0[_1988].x)));
        float _2027 = fma(_1957, cbSceneParam._m0[_1996].w, fma(_1953, cbSceneParam._m0[_1996].z, fma(_1949, cbSceneParam._m0[_1996].y, _1945 * cbSceneParam._m0[_1996].x)));
        float _2035 = fma(_1957, cbSceneParam._m0[_2012].w, fma(_1953, cbSceneParam._m0[_2012].z, fma(_1949, cbSceneParam._m0[_2012].y, _1945 * cbSceneParam._m0[_2012].x)));
        float _2040 = cbSceneParam._m0[33u].z * _2035;
        float _2042 = cbSceneParam._m0[33u].w * _2035;
        float _2045 = fma(_1957, cbSceneParam._m0[_2004].w, fma(_1953, cbSceneParam._m0[_2004].z, fma(_1949, cbSceneParam._m0[_2004].y, _1945 * cbSceneParam._m0[_2004].x))) / _2035;
        float _2093 = (cbSceneParam._m0[33u].x - sqrt(((_1959 * _1959) + (_1958 * _1958)) + (_1960 * _1960))) * cbSceneParam._m0[33u].y;
        float _4508 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2100 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2040 + _2023) / _2035, (_2042 + _2027) / _2035), _2045), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2042 + _2023) / _2035, (_2027 - _2040) / _2035), _2045), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 - _2040) / _2035, (_2027 - _2042) / _2035), _2045), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2023 - _2042) / _2035, (_2040 + _2027) / _2035), _2045), 0.0)).x), vec4(0.25)));
        _2107 = 1.0 - (_2100 * cbSceneParam._m0[34u].x);
        _2108 = 1.0 - (_2100 * cbSceneParam._m0[34u].y);
        _2109 = 1.0 - (_2100 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2107 = 1.0;
        _2108 = 1.0;
        _2109 = 1.0;
    }
    float _2173;
    float _2175;
    float _2177;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2161 = fma(_1957, cbSceneParam._m0[63u].w, fma(_1953, cbSceneParam._m0[63u].z, fma(_1949, cbSceneParam._m0[63u].y, _1945 * cbSceneParam._m0[63u].x)));
        float _2162 = fma(_1957, cbSceneParam._m0[60u].w, fma(_1953, cbSceneParam._m0[60u].z, fma(_1949, cbSceneParam._m0[60u].y, _1945 * cbSceneParam._m0[60u].x))) / _2161;
        float _2163 = fma(_1957, cbSceneParam._m0[61u].w, fma(_1953, cbSceneParam._m0[61u].z, fma(_1949, cbSceneParam._m0[61u].y, _1945 * cbSceneParam._m0[61u].x))) / _2161;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2162 >= cbSceneParam._m0[64u].x) && (_2163 >= cbSceneParam._m0[64u].y)) && (_2162 <= cbSceneParam._m0[64u].z)) && (_2163 <= cbSceneParam._m0[64u].w))
        {
            float _2302 = fma(_1957, cbSceneParam._m0[62u].w, fma(_1953, cbSceneParam._m0[62u].z, fma(_1949, cbSceneParam._m0[62u].y, _1945 * cbSceneParam._m0[62u].x))) / _2161;
            float _2306 = isnan(cbSceneParam._m0[41u].w) ? _2302 : (isnan(_2302) ? cbSceneParam._m0[41u].w : max(_2302, cbSceneParam._m0[41u].w));
            float _2349 = (cbSceneParam._m0[33u].x - sqrt(((_1959 * _1959) + (_1958 * _1958)) + (_1960 * _1960))) * cbSceneParam._m0[33u].y;
            float _4524 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
            float _2356 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2162, cbSceneParam._m0[33u].w + _2163), _2306), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2162, _2163 - cbSceneParam._m0[33u].z), _2306), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2162 - cbSceneParam._m0[33u].z, _2163 - cbSceneParam._m0[33u].w), _2306), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2162 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2163), _2306), 0.0)).x), vec4(0.25)));
            float _2360 = 1.0 - (_2356 * cbSceneParam._m0[34u].x);
            float _2361 = 1.0 - (_2356 * cbSceneParam._m0[34u].y);
            float _2362 = 1.0 - (_2356 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2362) ? _2109 : (isnan(_2109) ? _2362 : min(_2109, _2362));
            frontier_phi_37_36_ladder_1 = isnan(_2361) ? _2108 : (isnan(_2108) ? _2361 : min(_2108, _2361));
            frontier_phi_37_36_ladder_2 = isnan(_2360) ? _2107 : (isnan(_2107) ? _2360 : min(_2107, _2360));
        }
        else
        {
            frontier_phi_37_36_ladder = _2109;
            frontier_phi_37_36_ladder_1 = _2108;
            frontier_phi_37_36_ladder_2 = _2107;
        }
        _2173 = frontier_phi_37_36_ladder_2;
        _2175 = frontier_phi_37_36_ladder_1;
        _2177 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2173 = _2107;
        _2175 = _2108;
        _2177 = _2109;
    }
    uvec4 _2182 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2184 = _2182.x * 14u;
    uint _2185 = _2184 + 13u;
    float _2192 = _855 + (-1.0);
    float _2197 = (cbLight._m0[_2185].x * _2192) + 1.0;
    float _2198 = (cbLight._m0[_2185].y * _2192) + 1.0;
    float _2199 = (cbLight._m0[_2185].z * _2192) + 1.0;
    float _2200 = (cbLight._m0[_2185].w * _2192) + 1.0;
    uint _2201 = _2184 + 5u;
    float _2207 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
    uint _2211 = _2184 + 4u;
    float _2221 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
    uint _2225 = _2184 | 1u;
    float _2236 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_691, _692, _693));
    float _2239 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_691, _692, _693));
    float _4560 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _4571 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2244 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * 0.3183098733425140380859375;
    float _2246 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * 0.3183098733425140380859375;
    float _2253 = ((cbLight._m0[_2201].x * _2207) * _2246) + (((cbLight._m0[_2211].x * _2173) * _2221) * _2244);
    float _2254 = ((_2207 * cbLight._m0[_2201].y) * _2246) + (((cbLight._m0[_2211].y * _2175) * _2221) * _2244);
    float _2255 = ((_2207 * cbLight._m0[_2201].z) * _2246) + (((cbLight._m0[_2211].z * _2177) * _2221) * _2244);
    uvec4 _2259 = floatBitsToUint(cbLight._m0[_2184 + 12u]);
    bool _2261 = _2259.x == 0u;
    float _2363;
    float _2365;
    float _2367;
    if (_2261)
    {
        _2363 = _2253;
        _2365 = _2254;
        _2367 = _2255;
    }
    else
    {
        uint _2371 = _2184 + 6u;
        float _2387 = (dot(vec3(cbLight._m0[_2184 + 2u].xyz), vec3(_691, _692, _693)) * 0.5) + 0.5;
        float _2388 = _2387 * _2387;
        float _4582 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2389 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2390 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2363 = (((cbLight._m0[_2371].x * 0.3183098733425140380859375) * _2389) * _2390) + _2253;
        _2365 = (((cbLight._m0[_2371].y * 0.3183098733425140380859375) * _2389) * _2390) + _2254;
        _2367 = (((cbLight._m0[_2371].z * 0.3183098733425140380859375) * _2389) * _2390) + _2255;
    }
    bool _2370 = _2259.y == 0u;
    float _2425;
    float _2427;
    float _2429;
    if (_2370)
    {
        _2425 = _2363;
        _2427 = _2365;
        _2429 = _2367;
    }
    else
    {
        uint _2587 = _2184 + 7u;
        float _2603 = (dot(vec3(cbLight._m0[_2184 + 3u].xyz), vec3(_691, _692, _693)) * 0.5) + 0.5;
        float _2604 = _2603 * _2603;
        float _4598 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2605 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2606 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2425 = (((cbLight._m0[_2587].x * 0.3183098733425140380859375) * _2605) * _2606) + _2363;
        _2427 = (((cbLight._m0[_2587].y * 0.3183098733425140380859375) * _2605) * _2606) + _2365;
        _2429 = (((cbLight._m0[_2587].z * 0.3183098733425140380859375) * _2605) * _2606) + _2367;
    }
    uint _2432 = _2184 + 8u;
    float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2184].w)) * _694) * 0.949999988079071044921875);
    float _2446 = _2445 * _2445;
    float _2447 = cbLight._m0[_2184].x + _769;
    float _2448 = cbLight._m0[_2184].y + _770;
    float _2449 = cbLight._m0[_2184].z + _771;
    float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
    float _2454 = _2453 * _2447;
    float _2455 = _2453 * _2448;
    float _2456 = _2453 * _2449;
    float _2457 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2184].xyz));
    float _4614 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _4625 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _2461 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2462 = dot(vec3(_691, _692, _693), vec3(_2454, _2455, _2456));
    float _4636 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2465 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2466 = dot(vec3(cbLight._m0[_2184].xyz), vec3(_2454, _2455, _2456));
    float _4647 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2470 = _2446 * _2446;
    float _2474 = ((_2465 * _2465) * (_2470 + (-1.0))) + 1.0;
    float _2485 = (exp2(log2(1.0 - (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2486 = 1.0 - _2446;
    float _2497 = (0.5 / (((_2461 * ((_2460 * _2486) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2461 * _2486) + _2446) * _2460))) * _2460;
    float _4658 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2499 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2470 / ((_2474 * _2474) * 3.141590118408203125));
    uint _2513 = _2184 + 9u;
    float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _694) * 0.949999988079071044921875);
    float _2525 = _2524 * _2524;
    float _2526 = cbLight._m0[_2225].x + _769;
    float _2527 = cbLight._m0[_2225].y + _770;
    float _2528 = cbLight._m0[_2225].z + _771;
    float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
    float _2533 = _2532 * _2526;
    float _2534 = _2532 * _2527;
    float _2535 = _2532 * _2528;
    float _2536 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2225].xyz));
    float _4669 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2540 = dot(vec3(_691, _692, _693), vec3(_2533, _2534, _2535));
    float _4680 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _2544 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2533, _2534, _2535));
    float _4691 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2548 = _2525 * _2525;
    float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
    float _2561 = (exp2(log2(1.0 - (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2562 = 1.0 - _2525;
    float _2572 = (0.5 / (((_2461 * ((_2539 * _2562) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2461 * _2562) + _2525) * _2539))) * _2539;
    float _4702 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2574 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
    float _2584 = (((_2561 * cbLight._m0[_2513].x) * _2574) * _2207) + ((((cbLight._m0[_2432].x * _2173) * _2485) * _2499) * _2221);
    float _2585 = (((_2561 * cbLight._m0[_2513].y) * _2574) * _2207) + ((((cbLight._m0[_2432].y * _2175) * _2485) * _2499) * _2221);
    float _2586 = (((_2561 * cbLight._m0[_2513].z) * _2574) * _2207) + ((((cbLight._m0[_2432].z * _2177) * _2485) * _2499) * _2221);
    float _2642;
    float _2644;
    float _2646;
    if (_2261)
    {
        _2642 = _2584;
        _2644 = _2585;
        _2646 = _2586;
    }
    else
    {
        uint _2648 = _2184 + 2u;
        uint _2652 = _2184 + 10u;
        float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2648].w)) * _694) * 0.949999988079071044921875);
        float _2667 = _2666 * _2666;
        float _2668 = cbLight._m0[_2648].x + _769;
        float _2669 = cbLight._m0[_2648].y + _770;
        float _2670 = cbLight._m0[_2648].z + _771;
        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
        float _2675 = _2674 * _2668;
        float _2676 = _2674 * _2669;
        float _2677 = _2674 * _2670;
        float _2678 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2648].xyz));
        float _4713 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2682 = dot(vec3(_691, _692, _693), vec3(_2675, _2676, _2677));
        float _4724 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2686 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_2675, _2676, _2677));
        float _4735 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2690 = _2667 * _2667;
        float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
        float _2703 = (exp2(log2(1.0 - (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2704 = 1.0 - _2667;
        float _2714 = (0.5 / (((_2461 * ((_2681 * _2704) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2461 * _2704) + _2667) * _2681))) * _2681;
        float _4746 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2716 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
        float _2717 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
        _2642 = (((_2703 * cbLight._m0[_2652].x) * _2716) * _2717) + _2584;
        _2644 = (((_2703 * cbLight._m0[_2652].y) * _2716) * _2717) + _2585;
        _2646 = (((_2703 * cbLight._m0[_2652].z) * _2716) * _2717) + _2586;
    }
    float _2748;
    float _2750;
    float _2752;
    if (_2370)
    {
        _2748 = _2642;
        _2750 = _2644;
        _2752 = _2646;
    }
    else
    {
        uint _2759 = _2184 + 3u;
        uint _2763 = _2184 + 11u;
        float _2777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2759].w)) * _694) * 0.949999988079071044921875);
        float _2778 = _2777 * _2777;
        float _2779 = cbLight._m0[_2759].x + _769;
        float _2780 = cbLight._m0[_2759].y + _770;
        float _2781 = cbLight._m0[_2759].z + _771;
        float _2785 = inversesqrt(dot(vec3(_2779, _2780, _2781), vec3(_2779, _2780, _2781)));
        float _2786 = _2785 * _2779;
        float _2787 = _2785 * _2780;
        float _2788 = _2785 * _2781;
        float _2789 = dot(vec3(_691, _692, _693), vec3(cbLight._m0[_2759].xyz));
        float _4762 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2792 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2793 = dot(vec3(_691, _692, _693), vec3(_2786, _2787, _2788));
        float _4773 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2796 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2797 = dot(vec3(cbLight._m0[_2759].xyz), vec3(_2786, _2787, _2788));
        float _4784 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2801 = _2778 * _2778;
        float _2805 = ((_2796 * _2796) * (_2801 + (-1.0))) + 1.0;
        float _2814 = (exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2815 = 1.0 - _2778;
        float _2825 = (0.5 / (((_2461 * ((_2792 * _2815) + _2778)) + 9.9999999392252902907785028219223e-09) + (((_2461 * _2815) + _2778) * _2792))) * _2792;
        float _4795 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2827 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2801 / ((_2805 * _2805) * 3.141590118408203125));
        float _2828 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
        _2748 = (((_2814 * cbLight._m0[_2763].x) * _2827) * _2828) + _2642;
        _2750 = (((_2814 * cbLight._m0[_2763].y) * _2827) * _2828) + _2644;
        _2752 = (((_2814 * cbLight._m0[_2763].z) * _2827) * _2828) + _2646;
    }
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    if (_2182.y == 0u)
    {
        uvec4 _2849 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2850 = _2849.x;
        uint _2861 = uint((float(_2849.y) * floor(float(uint(cbSceneParam._m0[85u].y * _791) / _2850))) + floor(float(uint(cbSceneParam._m0[85u].x * _790) / _2850)));
        float _2871 = (log2(_1960 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2872 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        uint _2875 = uint(isnan(14.0) ? _2872 : (isnan(_2872) ? 14.0 : min(_2872, 14.0)));
        uvec4 _2880 = texelFetch(g_lightClusterGridBuffer, int(((_2875 << 2u) + (_2861 << 6u)) >> 2u));
        uint _2881 = _2880.x;
        uint _2882 = _2849.z;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        if (((((1u << ((_2882 >> 4u) & 15u)) + 4294967295u) & _2881) == 0u) || ((_2882 & 240u) == 0u))
        {
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
        }
        else
        {
            float _2962;
            float _2964;
            float _2966;
            float _2968;
            float _2970;
            float _2972;
            float _3113 = 0.0;
            float _3114 = 0.0;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            uint _3119 = 0u;
            uint _3128;
            bool _3129;
            for (;;)
            {
                _3128 = texelFetch(g_lightClassification, int((((_2875 << 5u) + (_2861 << 9u)) + (_3119 << 2u)) >> 2u)).x;
                _3129 = _3128 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3129)
                {
                    frontier_phi_71_pred = _3118;
                    frontier_phi_71_pred_1 = _3117;
                    frontier_phi_71_pred_2 = _3116;
                    frontier_phi_71_pred_3 = _3115;
                    frontier_phi_71_pred_4 = _3114;
                    frontier_phi_71_pred_5 = _3113;
                }
                else
                {
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    uint _3264;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3128;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    for (;;)
                    {
                        uint _3268 = uint(findLSB(_3264)) + (_3119 << 5u);
                        uint _3265 = (_3264 + 4294967295u) & _3264;
                        uint _3270 = _3268 * 48u;
                        vec4 _3284 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3270)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3270 + 3u)).x));
                        uint _3290 = (_3268 * 48u) + 4u;
                        vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 3u)).x));
                        uint _3309 = (_3268 * 48u) + 8u;
                        vec3 _3320 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3309)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3309 + 2u)).x));
                        float _3324 = _3284.x - _1958;
                        float _3325 = _3284.y - _1959;
                        float _3326 = _3284.z - _1960;
                        float _3327 = dot(vec3(_3324, _3325, _3326), vec3(_3324, _3325, _3326));
                        float _3330 = inversesqrt(_3327);
                        float _3331 = _3330 * _3324;
                        float _3332 = _3330 * _3325;
                        float _3333 = _3330 * _3326;
                        float _3334 = dot(vec3(_811, _814, _817), vec3(_3331, _3332, _3333));
                        float _3339 = 1.0 - (_3327 * _3284.w);
                        float _4821 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3340 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3341 = sqrt(_3327) * _3303.w;
                        float _3344 = 1.39999997615814208984375 / (_3341 + 1.39999997615814208984375);
                        float _3345 = _3344 * _3344;
                        float _3348 = ((1.0 - _3345) * _3334) + _3345;
                        float _3351 = _3341 * _3341;
                        float _3355 = ((isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))) * _3340) / ((_3351 * 0.699999988079071044921875) + 1.0);
                        float _3359 = (-0.0) - _1958;
                        float _3360 = (-0.0) - _1959;
                        float _3361 = (-0.0) - _1960;
                        float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                        float _3366 = _3365 * _3359;
                        float _3367 = _3365 * _3360;
                        float _3368 = _3365 * _3361;
                        float _3375 = exp2(log2(1.0 / ((_3351 * 3.5) + 5.0)) * 0.25);
                        float _3376 = 1.0 - _871;
                        float _3383 = sqrt(1.0 - ((1.0 - (_3376 * _3376)) * (1.0 - (_3375 * _3375))));
                        float _3384 = _3383 * _3383;
                        float _3385 = _3384 * _3384;
                        float _3386 = _3366 + _3331;
                        float _3387 = _3367 + _3332;
                        float _3388 = _3368 + _3333;
                        float _3392 = inversesqrt(dot(vec3(_3386, _3387, _3388), vec3(_3386, _3387, _3388)));
                        float _3396 = dot(vec3(_811, _814, _817), vec3(_3366, _3367, _3368));
                        float _4837 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3399 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3400 = dot(vec3(_811, _814, _817), vec3(_3392 * _3386, _3392 * _3387, _3392 * _3388));
                        float _4848 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3403 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3407 = ((_3403 * _3403) * (_3385 + (-1.0))) + 1.0;
                        float _3408 = _3344 * _3384;
                        float _3409 = _3408 * _3408;
                        float _3412 = ((1.0 - _3409) * _3334) + _3409;
                        float _4859 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                        float _3413 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3414 = 1.0 - _3384;
                        float _3424 = (0.5 / (((_3413 * ((_3399 * _3414) + _3384)) + 9.9999999392252902907785028219223e-09) + (((_3413 * _3414) + _3384) * _3399))) * _3413;
                        float _4870 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3435 = (((_3385 * 3.1415927410125732421875) * (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0)))) / ((_3407 * _3407) * ((_3351 * 2.1991131305694580078125) + 3.141590118408203125))) * _3340;
                        _3188 = (_3355 * _3303.x) + _3261;
                        _3189 = (_3355 * _3303.y) + _3262;
                        _3190 = (_3355 * _3303.z) + _3263;
                        _3185 = (_3435 * _3320.x) + _3258;
                        _3186 = (_3435 * _3320.y) + _3259;
                        _3187 = (_3435 * _3320.z) + _3260;
                        if (_3265 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3265;
                        }
                    }
                    frontier_phi_71_pred = _3190;
                    frontier_phi_71_pred_1 = _3189;
                    frontier_phi_71_pred_2 = _3188;
                    frontier_phi_71_pred_3 = _3187;
                    frontier_phi_71_pred_4 = _3186;
                    frontier_phi_71_pred_5 = _3185;
                }
                _2972 = frontier_phi_71_pred;
                _2970 = frontier_phi_71_pred_1;
                _2968 = frontier_phi_71_pred_2;
                _2966 = frontier_phi_71_pred_3;
                _2964 = frontier_phi_71_pred_4;
                _2962 = frontier_phi_71_pred_5;
                uint _3120 = _3119 + 1u;
                if (_3120 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3113 = _2962;
                    _3114 = _2964;
                    _3115 = _2966;
                    _3116 = _2968;
                    _3117 = _2970;
                    _3118 = _2972;
                    _3119 = _3120;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
        }
        uvec4 _2975 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2976 = _2975.z;
        uint _2978 = (_2976 >> 8u) & 15u;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        if (((4294967295u << _2978) & _2881) == 0u)
        {
            _3081 = _2961;
            _3083 = _2963;
            _3085 = _2965;
            _3087 = _2967;
            _3089 = _2969;
            _3091 = _2971;
        }
        else
        {
            float _3106 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
            float _3107 = _3106 * _1958;
            float _3108 = _3106 * _1959;
            float _3109 = _3106 * _1960;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2978 < ((_2976 >> 12u) & 15u))
            {
                float _3082;
                float _3084;
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3241 = _2961;
                float _3242 = _2963;
                float _3243 = _2965;
                float _3244 = _2967;
                float _3245 = _2969;
                float _3246 = _2971;
                uint _3247 = _2978;
                uint _3256;
                bool _3257;
                for (;;)
                {
                    _3256 = texelFetch(g_lightClassification, int((((_2875 << 5u) + (_2861 << 9u)) + (_3247 << 2u)) >> 2u)).x;
                    _3257 = _3256 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3257)
                    {
                        frontier_phi_82_pred = _3246;
                        frontier_phi_82_pred_1 = _3245;
                        frontier_phi_82_pred_2 = _3244;
                        frontier_phi_82_pred_3 = _3243;
                        frontier_phi_82_pred_4 = _3242;
                        frontier_phi_82_pred_5 = _3241;
                    }
                    else
                    {
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3462 = _3241;
                        float _3463 = _3242;
                        float _3464 = _3243;
                        float _3465 = _3244;
                        float _3466 = _3245;
                        float _3467 = _3246;
                        uint _3468 = _3256;
                        uint _3469;
                        vec4 _3494;
                        float _3495;
                        vec4 _3510;
                        vec3 _3522;
                        vec4 _3537;
                        vec4 _3552;
                        float _3598;
                        bool _3599;
                        for (;;)
                        {
                            uint _3479 = ((_3247 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3468));
                            _3469 = (_3468 + 4294967295u) & _3468;
                            uint _3481 = _3479 * 40u;
                            _3494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3481 + 3u)).x));
                            _3495 = _3494.w;
                            uint _3497 = (_3479 * 40u) + 4u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3479 * 40u) + 8u;
                            _3522 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x));
                            uint _3524 = (_3479 * 40u) + 16u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3539 = (_3479 * 40u) + 20u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3479 * 40u) + 24u;
                            vec4 _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3573 = (_3479 * 40u) + 28u;
                            vec4 _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            _3598 = fma(_1960, _3586.z, fma(_1959, _3586.y, _3586.x * _1958)) + _3586.w;
                            _3599 = !((fma(_1960, _3567.z, fma(_1959, _3567.y, _3567.x * _1958)) + _3567.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3599)
                            {
                                float _3626 = _3494.x - _1958;
                                float _3627 = _3494.y - _1959;
                                float _3628 = _3494.z - _1960;
                                float _3629 = dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628));
                                float _3632 = inversesqrt(_3629);
                                float _3633 = _3632 * _3626;
                                float _3634 = _3632 * _3627;
                                float _3635 = _3632 * _3628;
                                float _3639 = 1.0 - (_3629 / (_3495 * _3495));
                                float _4881 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3644 = sqrt(_3629) * _3510.w;
                                float _3646 = 1.39999997615814208984375 / (_3644 + 1.39999997615814208984375);
                                float _3647 = _3646 * _3646;
                                float _3650 = ((1.0 - _3647) * dot(vec3(_3633, _3634, _3635), vec3(_811, _814, _817))) + _3647;
                                float _3653 = _3644 * _3644;
                                float _3657 = (fma(_1960, _3537.z, fma(_1959, _3537.y, _3537.x * _1958)) + _3537.w) / _3598;
                                float _3658 = (fma(_1960, _3552.z, fma(_1959, _3552.y, _3552.x * _1958)) + _3552.w) / _3598;
                                float _3662 = 1.0 - dot(vec2(_3657, _3658), vec2(_3657, _3658));
                                float _4897 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3663 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3664 = _3663 * (((isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0))) * _3640) / ((_3653 * 0.699999988079071044921875) + 1.0));
                                float _3676 = exp2(log2(1.0 / ((_3653 * 3.5) + 5.0)) * 0.25);
                                float _3677 = 1.0 - _871;
                                float _3684 = sqrt(1.0 - ((1.0 - (_3677 * _3677)) * (1.0 - (_3676 * _3676))));
                                float _3685 = _3684 * _3684;
                                float _3686 = _3685 * _3685;
                                float _3687 = _3633 - _3107;
                                float _3688 = _3634 - _3108;
                                float _3689 = _3635 - _3109;
                                float _3693 = inversesqrt(dot(vec3(_3687, _3688, _3689), vec3(_3687, _3688, _3689)));
                                float _3697 = dot(vec3(_811, _814, _817), vec3((-0.0) - _3107, (-0.0) - _3108, (-0.0) - _3109));
                                float _4908 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3700 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3701 = dot(vec3(_811, _814, _817), vec3(_3693 * _3687, _3693 * _3688, _3693 * _3689));
                                float _4919 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3704 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3708 = ((_3704 * _3704) * (_3686 + (-1.0))) + 1.0;
                                float _3709 = _3646 * _3685;
                                float _3710 = _3709 * _3709;
                                float _3716 = ((1.0 - _3710) * dot(vec3(_811, _814, _817), vec3(_3633, _3634, _3635))) + _3710;
                                float _4930 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3717 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3718 = 1.0 - _3685;
                                float _3728 = (0.5 / (((_3717 * ((_3700 * _3718) + _3685)) + 9.9999999392252902907785028219223e-09) + (((_3717 * _3718) + _3685) * _3700))) * _3717;
                                float _4941 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3738 = (_3663 * _3640) * (((_3686 * 3.1415927410125732421875) * (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0)))) / ((_3708 * _3708) * ((_3653 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3664 * _3510.z;
                                frontier_phi_88_pred_1 = _3664 * _3510.y;
                                frontier_phi_88_pred_2 = _3664 * _3510.x;
                                frontier_phi_88_pred_3 = _3738 * _3522.z;
                                frontier_phi_88_pred_4 = _3738 * _3522.y;
                                frontier_phi_88_pred_5 = _3738 * _3522.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3747 = frontier_phi_88_pred;
                            _3746 = frontier_phi_88_pred_1;
                            _3745 = frontier_phi_88_pred_2;
                            _3744 = frontier_phi_88_pred_3;
                            _3743 = frontier_phi_88_pred_4;
                            _3742 = frontier_phi_88_pred_5;
                            _3452 = _3745 + _3465;
                            _3453 = _3746 + _3466;
                            _3454 = _3747 + _3467;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            _3451 = _3744 + _3464;
                            if (_3469 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3469;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3454;
                        frontier_phi_82_pred_1 = _3453;
                        frontier_phi_82_pred_2 = _3452;
                        frontier_phi_82_pred_3 = _3451;
                        frontier_phi_82_pred_4 = _3450;
                        frontier_phi_82_pred_5 = _3449;
                    }
                    _3092 = frontier_phi_82_pred;
                    _3090 = frontier_phi_82_pred_1;
                    _3088 = frontier_phi_82_pred_2;
                    _3086 = frontier_phi_82_pred_3;
                    _3084 = frontier_phi_82_pred_4;
                    _3082 = frontier_phi_82_pred_5;
                    uint _3248 = _3247 + 1u;
                    if (_3248 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3241 = _3082;
                        _3242 = _3084;
                        _3243 = _3086;
                        _3244 = _3088;
                        _3245 = _3090;
                        _3246 = _3092;
                        _3247 = _3248;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3088;
                frontier_phi_63_64_ladder_1 = _3092;
                frontier_phi_63_64_ladder_2 = _3090;
                frontier_phi_63_64_ladder_3 = _3086;
                frontier_phi_63_64_ladder_4 = _3084;
                frontier_phi_63_64_ladder_5 = _3082;
            }
            else
            {
                frontier_phi_63_64_ladder = _2967;
                frontier_phi_63_64_ladder_1 = _2971;
                frontier_phi_63_64_ladder_2 = _2969;
                frontier_phi_63_64_ladder_3 = _2965;
                frontier_phi_63_64_ladder_4 = _2963;
                frontier_phi_63_64_ladder_5 = _2961;
            }
            _3081 = frontier_phi_63_64_ladder_5;
            _3083 = frontier_phi_63_64_ladder_4;
            _3085 = frontier_phi_63_64_ladder_3;
            _3087 = frontier_phi_63_64_ladder;
            _3089 = frontier_phi_63_64_ladder_2;
            _3091 = frontier_phi_63_64_ladder_1;
        }
        float _3096 = isnan(1.0) ? _855 : (isnan(_855) ? 1.0 : min(_855, 1.0));
        _2894 = (_3096 * _3087) + _2425;
        _2896 = (_3096 * _3089) + _2427;
        _2898 = (_3096 * _3091) + _2429;
        _2900 = ((_3081 * 0.039999999105930328369140625) * _3096) + _2748;
        _2902 = ((_3083 * 0.039999999105930328369140625) * _3096) + _2750;
        _2904 = ((_3085 * 0.039999999105930328369140625) * _3096) + _2752;
    }
    else
    {
        _2894 = _2425;
        _2896 = _2427;
        _2898 = _2429;
        _2900 = _2748;
        _2902 = _2750;
        _2904 = _2752;
    }
    float _4957 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4968 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4979 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _2921 = ((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2894 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _855))) + ((_2900 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1691)) * cbPerFrame._m0[3u].x);
    float _2922 = ((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2896 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _855))) + ((_2902 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1691)) * cbPerFrame._m0[3u].x);
    float _2923 = ((isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_2898 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _855))) + ((_2904 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1691)) * cbPerFrame._m0[3u].x);
    uint _2924 = _271 + 6u;
    float _2932 = _790 / cbSceneParam._m0[86u].x;
    float _2933 = _791 / cbSceneParam._m0[86u].y;
    vec4 _2947 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2932, _2933, (log2((isnan(cbSceneParam._m0[77u].w) ? _712 : (isnan(_712) ? cbSceneParam._m0[77u].w : min(_712, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2949 = _2947.x;
    float _2950 = _2947.y;
    float _2951 = _2947.z;
    float _2952 = _2947.w;
    float _3023;
    float _3025;
    float _3027;
    float _3029;
    if (_712 > cbSceneParam._m0[78u].w)
    {
        float _2986 = isnan(_712) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _712 : min(cbSceneParam._m0[80u].w, _712));
        float _2987 = _2986 / _712;
        float _2998 = _2987 * _762;
        float _2999 = _763 * _2987;
        float _3000 = (-0.0) - _2999;
        float _3001 = _2987 * _764;
        float _3003 = (cbSceneParam._m0[77u].w * _3000) / _2986;
        float _3004 = _3003 + cbSceneParam._m0[79u].w;
        float _3005 = cbSceneParam._m0[79u].w - _2999;
        float _3011 = sqrt(((_2998 * _2998) + (_2999 * _2999)) + (_3001 * _3001));
        float _3014 = (1.0 - (cbSceneParam._m0[77u].w / _2986)) * _3011;
        float _3019 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3021 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3198;
        if (abs((_3000 - _3003) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3198 = ((((_3004 > 0.0) ? exp2(_3019 * _3004) : (2.0 - exp2(_3021 * _3004))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3014;
        }
        else
        {
            float _3142 = 1.0 / cbSceneParam._m0[80u].x;
            float _3143 = isnan(_3005) ? _3004 : (isnan(_3004) ? _3005 : max(_3004, _3005));
            float _3144 = isnan(_3005) ? _3004 : (isnan(_3004) ? _3005 : min(_3004, _3005));
            float _3153 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : min(_3143, 0.0));
            float _3154 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : min(_3144, 0.0));
            _3198 = ((abs(_3011 / _3000) * cbSceneParam._m0[80u].y) * ((((_3153 - _3154) * 2.0) - ((exp2(_3019 * (isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0)))) - exp2(_3019 * (isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0))))) * _3142)) - ((exp2(_3021 * _3153) - exp2(_3021 * _3154)) * _3142))) + (_3014 * cbSceneParam._m0[80u].z);
        }
        vec4 _3200 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2932, _2933, 1.0), 0.0);
        float _3209 = exp2((_3198 * (-1.44269502162933349609375)) * (1.0 - _3200.w));
        float _3210 = log2(_3209);
        float _3226 = log2(_2952);
        _3023 = (exp2(_3226 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].x)) * _3200.x) / cbSceneParam._m0[78u].x)) + _2949;
        _3025 = (exp2(_3226 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].y)) * _3200.y) / cbSceneParam._m0[78u].y)) + _2950;
        _3027 = (exp2(_3226 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3210 * cbSceneParam._m0[78u].z)) * _3200.z) / cbSceneParam._m0[78u].z)) + _2951;
        _3029 = _3209 * _2952;
    }
    else
    {
        _3023 = _2949;
        _3025 = _2950;
        _3027 = _2951;
        _3029 = _2952;
    }
    bool _3236;
    vec4 _3039;
    vec4 _3061;
    float _3063;
    float _3067;
    float _3068;
    float _3069;
    float _3070;
    bool _3080;
    for (;;)
    {
        _3039 = cbMatDynParam._m0[0u];
        float _3041 = roundEven(_3039.y);
        bool _3042 = _3041 == 3.0;
        float _3043 = log2(_3029);
        float _3050 = exp2(_3043 * cbSceneParam._m0[78u].x) * _2921;
        float _3051 = exp2(_3043 * cbSceneParam._m0[78u].y) * _2922;
        float _3052 = exp2(_3043 * cbSceneParam._m0[78u].z) * _2923;
        float _3059 = _778 + (-0.5);
        _3061 = cbMtdParam._m0[1u];
        _3063 = _3061.y * _3059;
        float _3066 = (_3041 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3067 = _3066 * (_3042 ? _3050 : (_3050 + (cbSceneParam._m0[72u].w * _3023)));
        _3068 = _3066 * (_3042 ? _3051 : (_3051 + (cbSceneParam._m0[72u].w * _3025)));
        _3069 = _3066 * (_3042 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3027)));
        _3070 = _3059 * 0.999000012874603271484375;
        _3080 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3080)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _3070) < 0.5)
            {
                _3236 = true;
                break;
            }
        }
        uint _3177 = _830 + uint(_3039.w);
        if ((cbInstanceData._m0[_3177].w < 1.0) && ((cbInstanceData._m0[_3177].w + _3070) < 0.5))
        {
            _3236 = true;
            break;
        }
        if ((_3063 + 1.0) < _3061.x)
        {
            _3236 = true;
            break;
        }
        _3236 = false;
        break;
    }
    float _3440;
    if (_3236)
    {
        discard_state = true;
        _3440 = 0.0;
    }
    else
    {
        _3440 = cbInstanceData._m0[_2924].w;
    }
    SV_Target.x = _3067;
    SV_Target.y = _3068;
    SV_Target.z = _3069;
    SV_Target.w = _3440;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2924].w;
    discard_exit();
}


