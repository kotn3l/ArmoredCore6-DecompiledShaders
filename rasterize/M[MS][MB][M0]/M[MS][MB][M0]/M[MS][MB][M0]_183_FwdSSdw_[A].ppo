#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1318;
float _3701;
float _3702;
float _3703;
float _3704;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3713 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3724 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3735 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    uint _272 = uint(roundEven(NORMAL.w)) * 13u;
    uint _277 = _272 + 1u;
    uint _281 = _272 + 2u;
    float _290 = sqrt(((cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x)) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x));
    float _291 = _290 * TEXCOORD.z;
    float _292 = _290 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _291) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _292) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _334 = _329.x * cbMtdParam._m0[11u].x;
    float _335 = _329.y * cbMtdParam._m0[11u].y;
    float _336 = _329.z * cbMtdParam._m0[11u].z;
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _291) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _292) + cbTextureTilingScale._m0[5u].w));
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _404 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_394 - _404) * cbMtdParam._m0[24u].x) + _404) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3746 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _429 = (_422 * ((_355.x * cbMtdParam._m0[12u].x) - _334)) + _334;
    float _430 = (_422 * ((_355.y * cbMtdParam._m0[12u].y) - _335)) + _335;
    float _431 = (_422 * ((_355.z * cbMtdParam._m0[12u].z) - _336)) + _336;
    vec4 _448 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _291) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _292) + cbTextureTilingScale._m0[3u].w));
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _470 = _468.x;
    float _480 = dot(vec4(_470, _468.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _494 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_470 - _480) * cbMtdParam._m0[24u].x) + _480) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3757 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _502 = (_495 * ((_448.x * cbMtdParam._m0[13u].x) - _429)) + _429;
    float _503 = (_495 * ((_448.y * cbMtdParam._m0[13u].y) - _430)) + _430;
    float _504 = (_495 * ((_448.z * cbMtdParam._m0[13u].z) - _431)) + _431;
    float _508 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _305.x) * _502;
    float _511 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _305.y) * _503;
    float _514 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _305.z) * _504;
    float _521 = ((_502 - _508) * (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0)))) + _508;
    float _522 = ((_503 - _511) * (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) + _511;
    float _523 = ((_504 - _514) * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) + _514;
    vec4 _540 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _291) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _292) + cbTextureTilingScale._m0[20u].w));
    vec4 _563 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _291) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _292) + cbTextureTilingScale._m0[4u].w));
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _582 = _580.x;
    float _583 = _580.y;
    float _584 = _580.z;
    float _591 = ((_563.x - _582) * _422) + _582;
    float _592 = ((_563.y - _583) * _422) + _583;
    float _593 = ((_563.z - _584) * _422) + _584;
    vec4 _605 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _291) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _292) + cbTextureTilingScale._m0[2u].w));
    float _618 = ((_605.z - _593) * _495) + _593;
    float _621 = ((((_605.x - _591) * _495) + _591) * 2.0) + (-1.0);
    float _622 = ((((_605.y - _592) * _495) + _592) * 2.0) + (-1.0);
    float _623 = dot(vec2(_621, _622), vec2(_621, _622));
    float _3768 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _628 = sqrt(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))));
    vec4 _641 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _659 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _291) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _292) + cbTextureTilingScale._m0[11u].w));
    float _661 = _659.x;
    float _662 = 1.0 - _661;
    float _675 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_661 - _662) * cbMtdParam._m0[24u].z) + _662) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3779 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _676 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _683 = (_676 * (cbMtdParam._m0[17u].x - _521)) + _521;
    float _684 = (_676 * (cbMtdParam._m0[17u].y - _522)) + _522;
    float _685 = (_676 * (cbMtdParam._m0[17u].z - _523)) + _523;
    float _690 = (((_540.z - _618) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _618;
    vec4 _703 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _291) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _292) + cbTextureTilingScale._m0[15u].w));
    float _710 = (_703.x * 2.0) + (-1.0);
    float _711 = (_703.y * 2.0) + (-1.0);
    float _712 = dot(vec2(_710, _711), vec2(_710, _711));
    float _3790 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _720 = (_676 * (_703.z - _690)) + _690;
    float _725 = _621 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_540.x * 2.0) + (-1.0)));
    float _726 = _622 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_540.y * 2.0) + (-1.0)));
    float _738 = (((_710 - _725) + (cbMtdParam._m0[21u].x * _725)) * _676) + _725;
    float _739 = (((_711 - _726) + (cbMtdParam._m0[21u].x * _726)) * _676) + _726;
    float _740 = (_676 * (sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) - _628)) + _628;
    float _742 = cbMtdParam._m0[22u].x + _641.w;
    float _745 = fma(_740, _238 * NORMAL.x, fma(_739, _245 * TANGENT.x, (_231 * _223) * _738));
    float _748 = fma(_740, _238 * NORMAL.y, fma(_739, _245 * TANGENT.y, (_231 * _224) * _738));
    float _751 = fma(_740, _238 * NORMAL.z, fma(_739, _245 * TANGENT.z, (_231 * _225) * _738));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _3801 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _759 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _3812 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3823 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _3834 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3845 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _777 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _829 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _819);
    float _830 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _819);
    float _831 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _819);
    float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
    float _836 = _829 * _835;
    float _837 = _830 * _835;
    float _838 = _831 * _835;
    vec4 _843 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _845 = _843.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _999 = sqrt(((_829 * _829) + (_830 * _830)) + (_831 * _831));
        float _1005 = (cbMatDynParam._m0[5u].x * _999) + cbMatDynParam._m0[5u].y;
        float _3856 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1010 = (cbMatDynParam._m0[5u].z * _999) + cbMatDynParam._m0[5u].w;
        float _3867 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) - _1006)) + _1006) < ((_845 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _856 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _857 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _875 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _878 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _881 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    uint _894 = _272 + 9u;
    uint _895 = _894 + uint(cbMatDynParam._m0[0u].w);
    float _901 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_895].x;
    float _902 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_895].y;
    float _903 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_895].z;
    float _3878 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    vec4 _915 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _856, cbSceneParam._m0[86u].y * _857));
    float _919 = ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * TEXCOORD_5.w) * _915.x;
    float _920 = dot(vec3(_756, _757, _758), vec3(_836, _837, _838));
    float _923 = _920 * 2.0;
    float _927 = (_923 * _756) - _836;
    float _928 = (_923 * _757) - _837;
    float _929 = (_923 * _758) - _838;
    float _933 = abs(dot(vec3(_836, _837, _838), vec3(_756, _757, _758)));
    float _3911 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _935 = sqrt(_759);
    float _948 = exp2((_935 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_935 * 3.0));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _988 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1317;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1042 = fma(_988, cbModelParam._m0[26u].z, fma(_984, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _980));
        float _1046 = fma(_988, cbModelParam._m0[27u].z, fma(_984, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _980));
        float _1050 = fma(_988, cbModelParam._m0[28u].z, fma(_984, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _980));
        float _1075 = _980 + _756;
        float _1076 = _984 + _757;
        float _1077 = _988 + _758;
        float _1087 = fma(_1077, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075)) - _1042;
        float _1088 = fma(_1077, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075)) - _1046;
        float _1089 = fma(_1077, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075)) - _1050;
        float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
        float _1106 = ((_1093 * _1087) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1042 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1093 * _1088) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1046 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1093 * _1089) / cbModelParam._m0[34u].z) + ((((((_1050 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        float _1145 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1111.x + (-0.5));
        float _1147 = _1145 * (_1111.y + (-0.5));
        float _1148 = _1145 * (_1111.z + (-0.5));
        float _1155 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1118.x + (-0.5));
        float _1157 = _1155 * (_1118.y + (-0.5));
        float _1158 = _1155 * (_1118.z + (-0.5));
        float _1165 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1125.x + (-0.5));
        float _1167 = _1165 * (_1125.y + (-0.5));
        float _1168 = _1165 * (_1125.z + (-0.5));
        float _1175 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1132.x + (-0.5));
        float _1177 = _1175 * (_1132.y + (-0.5));
        float _1178 = _1175 * (_1132.z + (-0.5));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = _1146 * 0.5;
        float _1183 = _1156 * 0.5;
        float _1184 = _1166 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1199 = (dot(vec3(_756, _757, _758), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1209 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3959 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1211 + 1.0))) + _1216) * _1179;
        float _1226 = _1147 * 0.5;
        float _1227 = _1157 * 0.5;
        float _1228 = _1167 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_756, _757, _758), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3992 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1253 + 1.0))) + _1258) * _1180;
        float _1268 = _1148 * 0.5;
        float _1269 = _1158 * 0.5;
        float _1270 = _1168 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_756, _757, _758), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4025 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1295 + 1.0))) + _1300) * _1181;
        _1317 = _1148;
        _1319 = _1147;
        _1320 = _1146;
        _1321 = _1158;
        _1322 = _1157;
        _1323 = _1156;
        _1324 = _1168;
        _1325 = _1167;
        _1326 = _1166;
        _1327 = _1181;
        _1328 = _1180;
        _1329 = _1179;
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
    }
    else
    {
        _1317 = _1318;
        _1319 = _1318;
        _1320 = _1318;
        _1321 = _1318;
        _1322 = _1318;
        _1323 = _1318;
        _1324 = _1318;
        _1325 = _1318;
        _1326 = _1318;
        _1327 = _1318;
        _1328 = _1318;
        _1329 = _1318;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1359 = fma(_988, cbModelParam._m0[30u].z, fma(_984, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980));
        float _1363 = fma(_988, cbModelParam._m0[31u].z, fma(_984, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980));
        float _1367 = fma(_988, cbModelParam._m0[32u].z, fma(_984, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980));
        float _1390 = _980 + _756;
        float _1391 = _984 + _757;
        float _1392 = _988 + _758;
        float _1402 = fma(_1392, cbModelParam._m0[30u].z, fma(_1391, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1390)) - _1359;
        float _1403 = fma(_1392, cbModelParam._m0[31u].z, fma(_1391, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1390)) - _1363;
        float _1404 = fma(_1392, cbModelParam._m0[32u].z, fma(_1391, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1390)) - _1367;
        float _1408 = inversesqrt(dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404)));
        float _1421 = ((_1408 * _1402) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1359 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1408 * _1403) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1363 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1408 * _1404) / cbModelParam._m0[35u].z) + ((((((_1367 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        float _1458 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1425.x + (-0.5));
        float _1460 = _1458 * (_1425.y + (-0.5));
        float _1461 = _1458 * (_1425.z + (-0.5));
        float _1468 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1432.x + (-0.5));
        float _1470 = _1468 * (_1432.y + (-0.5));
        float _1471 = _1468 * (_1432.z + (-0.5));
        float _1478 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1439.x + (-0.5));
        float _1480 = _1478 * (_1439.y + (-0.5));
        float _1481 = _1478 * (_1439.z + (-0.5));
        float _1488 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1446.x + (-0.5));
        float _1490 = _1488 * (_1446.y + (-0.5));
        float _1491 = _1488 * (_1446.z + (-0.5));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = _1459 * 0.5;
        float _1496 = _1469 * 0.5;
        float _1497 = _1479 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_756, _757, _758), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _4088 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1522 + 1.0))) + _1527) * _1492;
        float _1537 = _1460 * 0.5;
        float _1538 = _1470 * 0.5;
        float _1539 = _1480 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_756, _757, _758), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4121 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1564 + 1.0))) + _1569) * _1493;
        float _1579 = _1461 * 0.5;
        float _1580 = _1471 * 0.5;
        float _1581 = _1481 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_756, _757, _758), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4154 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1606 + 1.0))) + _1611) * _1494;
        _1628 = _1461;
        _1629 = _1460;
        _1630 = _1459;
        _1631 = _1471;
        _1632 = _1470;
        _1633 = _1469;
        _1634 = _1481;
        _1635 = _1480;
        _1636 = _1479;
        _1637 = _1494;
        _1638 = _1493;
        _1639 = _1492;
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
    }
    else
    {
        _1628 = _1318;
        _1629 = _1318;
        _1630 = _1318;
        _1631 = _1318;
        _1632 = _1318;
        _1633 = _1318;
        _1634 = _1318;
        _1635 = _1318;
        _1636 = _1318;
        _1637 = _1318;
        _1638 = _1318;
        _1639 = _1318;
        _1640 = 0.0;
        _1641 = 0.0;
        _1642 = 0.0;
    }
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1330)) + _1330;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1331)) + _1331;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1332)) + _1332;
    float _1675 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1652));
    float _1696 = _927 * 0.5;
    float _1697 = _928 * 0.5;
    float _1698 = _929 * 0.5;
    float _1699 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1702 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1705 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1739;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1712 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1317, _1321, _1324, _1327));
        float _1716 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1720 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1727 = dot(vec4(cbModelParam._m0[39u]), vec4(_1696, _1697, _1698, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1750;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1741 = dot(vec4(cbModelParam._m0[40u]), vec4(_1696, _1697, _1698, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1754 = (_1750 * cbModelParam._m0[1u].x) + (_1739 * (1.0 - cbModelParam._m0[1u].x));
    float _1764 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _759);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1764 : min(cbModelParam._m0[25u].z, _1764));
    float _1846;
    float _1848;
    float _1850;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1813 = fma(_988, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980)) + cbModelParam._m0[13u].w;
        float _1817 = fma(_988, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980)) + cbModelParam._m0[14u].w;
        float _1821 = fma(_988, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980)) + cbModelParam._m0[15u].w;
        float _1824 = fma(_929, cbModelParam._m0[13u].z, fma(_928, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _927));
        float _1827 = fma(_929, cbModelParam._m0[14u].z, fma(_928, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _927));
        float _1830 = fma(_929, cbModelParam._m0[15u].z, fma(_928, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _927));
        float _1858;
        if (_1824 > 0.0)
        {
            _1858 = abs((1.0 - _1813) / _1824);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1813 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1858 = frontier_phi_17_15_ladder;
        }
        float _2080;
        if (_1827 > 0.0)
        {
            _2080 = abs((1.0 - _1817) / _1827);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1817 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2080 = frontier_phi_26_22_ladder;
        }
        float _2326;
        if (_1830 > 0.0)
        {
            _2326 = abs((1.0 - _1821) / _1830);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1821 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2326 = frontier_phi_38_33_ladder;
        }
        float _2328 = isnan(_2080) ? _1858 : (isnan(_1858) ? _2080 : min(_1858, _2080));
        float _2329 = isnan(_2326) ? _2328 : (isnan(_2328) ? _2326 : min(_2328, _2326));
        float _2333 = (_2329 * _1824) + _1813;
        float _2334 = (_2329 * _1827) + _1817;
        float _2335 = (_2329 * _1830) + _1821;
        float _2336 = _2329 * 9.9999997473787516355514526367188e-05;
        float _2338 = (-1.0) - _2336;
        float _2340 = _2336 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2335 > _2340) || ((_2335 < _2338) || ((_2334 > _2340) || ((_2334 < _2338) || ((_2333 < _2338) || (_2333 > _2340))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2459 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2335, cbModelParam._m0[9u].z, fma(_2334, cbModelParam._m0[9u].y, _2333 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2335, cbModelParam._m0[10u].z, fma(_2334, cbModelParam._m0[10u].y, _2333 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2335, cbModelParam._m0[11u].z, fma(_2334, cbModelParam._m0[11u].y, _2333 * cbModelParam._m0[11u].x))), _1765);
            frontier_phi_16_38_ladder = _2459.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2459.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2459.x * cbModelParam._m0[1u].y;
        }
        _1846 = frontier_phi_16_38_ladder_2;
        _1848 = frontier_phi_16_38_ladder_1;
        _1850 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1834 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_927, _928, _929), _1765);
        _1846 = _1834.x * cbModelParam._m0[1u].y;
        _1848 = _1834.y * cbModelParam._m0[1u].y;
        _1850 = _1834.z * cbModelParam._m0[1u].y;
    }
    float _1854 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _759);
    float _1855 = isnan(_1854) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1854 : min(cbModelParam._m0[25u].w, _1854));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1909 = fma(_988, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980)) + cbModelParam._m0[21u].w;
        float _1913 = fma(_988, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980)) + cbModelParam._m0[22u].w;
        float _1917 = fma(_988, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980)) + cbModelParam._m0[23u].w;
        float _1920 = fma(_929, cbModelParam._m0[21u].z, fma(_928, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _927));
        float _1923 = fma(_929, cbModelParam._m0[22u].z, fma(_928, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _927));
        float _1926 = fma(_929, cbModelParam._m0[23u].z, fma(_928, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _927));
        float _2085;
        if (_1920 > 0.0)
        {
            _2085 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2085 = frontier_phi_28_24_ladder;
        }
        float _2353;
        if (_1923 > 0.0)
        {
            _2353 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2353 = frontier_phi_40_35_ladder;
        }
        float _2558;
        if (_1926 > 0.0)
        {
            _2558 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2558 = frontier_phi_49_46_ladder;
        }
        float _2560 = isnan(_2353) ? _2085 : (isnan(_2085) ? _2353 : min(_2085, _2353));
        float _2561 = isnan(_2558) ? _2560 : (isnan(_2560) ? _2558 : min(_2560, _2558));
        float _2565 = (_2561 * _1920) + _1909;
        float _2566 = (_2561 * _1923) + _1913;
        float _2567 = (_2561 * _1926) + _1917;
        float _2568 = _2561 * 9.9999997473787516355514526367188e-05;
        float _2569 = (-1.0) - _2568;
        float _2571 = _2568 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2567 > _2571) || ((_2567 < _2569) || ((_2566 > _2571) || ((_2566 < _2569) || ((_2565 < _2569) || (_2565 > _2571))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2567, cbModelParam._m0[17u].z, fma(_2566, cbModelParam._m0[17u].y, _2565 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2567, cbModelParam._m0[18u].z, fma(_2566, cbModelParam._m0[18u].y, _2565 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2567, cbModelParam._m0[19u].z, fma(_2566, cbModelParam._m0[19u].y, _2565 * cbModelParam._m0[19u].x))), _1855);
            frontier_phi_25_49_ladder = _2766.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2766.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2766.x * cbModelParam._m0[1u].z;
        }
        _1945 = frontier_phi_25_49_ladder_2;
        _1947 = frontier_phi_25_49_ladder_1;
        _1949 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_927, _928, _929), _1855);
        _1945 = _1929.x * cbModelParam._m0[1u].z;
        _1947 = _1929.y * cbModelParam._m0[1u].z;
        _1949 = _1929.z * cbModelParam._m0[1u].z;
    }
    float _1961 = ((((1.0 - _948) * ((_935 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_948 * _935)) * _919;
    float _1962 = _1961 * ((cbModelParam._m0[1u].w * (_1945 - _1846)) + _1846);
    float _1963 = _1961 * ((cbModelParam._m0[1u].w * (_1947 - _1848)) + _1848);
    float _1964 = _1961 * ((cbModelParam._m0[1u].w * (_1949 - _1850)) + _1850);
    float _1967 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1962 * cbSceneParam._m0[89u].x));
    float _1970 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1962 * cbSceneParam._m0[90u].x));
    float _1973 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, _1962 * cbSceneParam._m0[91u].x));
    vec4 _1981 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_856, _857));
    float _1983 = _1981.w;
    float _1995 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1983);
    float _1996 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1983);
    float _1997 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1983);
    uvec4 _2001 = floatBitsToUint(cbInstanceData._m0[_272 + 5u]);
    uint _2003 = _2001.x * 14u;
    uint _2004 = _2003 + 13u;
    float _2011 = _919 + (-1.0);
    float _2016 = (cbLight._m0[_2004].x * _2011) + 1.0;
    float _2017 = (cbLight._m0[_2004].y * _2011) + 1.0;
    float _2018 = (cbLight._m0[_2004].z * _2011) + 1.0;
    float _2019 = (cbLight._m0[_2004].w * _2011) + 1.0;
    uint _2020 = _2003 + 5u;
    float _2026 = isnan(1.0) ? _2017 : (isnan(_2017) ? 1.0 : min(_2017, 1.0));
    uint _2030 = _2003 + 4u;
    float _2039 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2043 = _2003 | 1u;
    float _2054 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_756, _757, _758));
    float _2057 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_756, _757, _758));
    float _4290 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _4301 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2062 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * 0.3183098733425140380859375;
    float _2064 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * 0.3183098733425140380859375;
    float _2071 = ((cbLight._m0[_2020].x * _2026) * _2064) + (((cbLight._m0[_2030].x * _1995) * _2039) * _2062);
    float _2072 = ((_2026 * cbLight._m0[_2020].y) * _2064) + (((cbLight._m0[_2030].y * _1996) * _2039) * _2062);
    float _2073 = ((_2026 * cbLight._m0[_2020].z) * _2064) + (((cbLight._m0[_2030].z * _1997) * _2039) * _2062);
    uvec4 _2077 = floatBitsToUint(cbLight._m0[_2003 + 12u]);
    bool _2079 = _2077.x == 0u;
    float _2090;
    float _2092;
    float _2094;
    if (_2079)
    {
        _2090 = _2071;
        _2092 = _2072;
        _2094 = _2073;
    }
    else
    {
        uint _2098 = _2003 + 6u;
        float _2114 = (dot(vec3(cbLight._m0[_2003 + 2u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2115 = _2114 * _2114;
        float _4312 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2116 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2117 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2090 = (((cbLight._m0[_2098].x * 0.3183098733425140380859375) * _2116) * _2117) + _2071;
        _2092 = (((cbLight._m0[_2098].y * 0.3183098733425140380859375) * _2116) * _2117) + _2072;
        _2094 = (((cbLight._m0[_2098].z * 0.3183098733425140380859375) * _2116) * _2117) + _2073;
    }
    bool _2097 = _2077.y == 0u;
    float _2135;
    float _2137;
    float _2139;
    if (_2097)
    {
        _2135 = _2090;
        _2137 = _2092;
        _2139 = _2094;
    }
    else
    {
        uint _2297 = _2003 + 7u;
        float _2313 = (dot(vec3(cbLight._m0[_2003 + 3u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2314 = _2313 * _2313;
        float _4328 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2315 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2316 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2135 = (((cbLight._m0[_2297].x * 0.3183098733425140380859375) * _2315) * _2316) + _2090;
        _2137 = (((cbLight._m0[_2297].y * 0.3183098733425140380859375) * _2315) * _2316) + _2092;
        _2139 = (((cbLight._m0[_2297].z * 0.3183098733425140380859375) * _2315) * _2316) + _2094;
    }
    uint _2142 = _2003 + 8u;
    float _2155 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2003].w)) * _759) * 0.949999988079071044921875);
    float _2156 = _2155 * _2155;
    float _2157 = cbLight._m0[_2003].x + _836;
    float _2158 = cbLight._m0[_2003].y + _837;
    float _2159 = cbLight._m0[_2003].z + _838;
    float _2163 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
    float _2164 = _2163 * _2157;
    float _2165 = _2163 * _2158;
    float _2166 = _2163 * _2159;
    float _2167 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2003].xyz));
    float _4344 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2170 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
    float _4355 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _2171 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2172 = dot(vec3(_756, _757, _758), vec3(_2164, _2165, _2166));
    float _4366 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_2003].xyz), vec3(_2164, _2165, _2166));
    float _4377 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2156 * _2156;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2195 = (exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2196 = 1.0 - _2156;
    float _2207 = (0.5 / (((_2171 * ((_2170 * _2196) + _2156)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2196) + _2156) * _2170))) * _2170;
    float _4388 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2209 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    uint _2223 = _2003 + 9u;
    float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _759) * 0.949999988079071044921875);
    float _2235 = _2234 * _2234;
    float _2236 = cbLight._m0[_2043].x + _836;
    float _2237 = cbLight._m0[_2043].y + _837;
    float _2238 = cbLight._m0[_2043].z + _838;
    float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
    float _2243 = _2242 * _2236;
    float _2244 = _2242 * _2237;
    float _2245 = _2242 * _2238;
    float _2246 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2043].xyz));
    float _4399 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2249 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2250 = dot(vec3(_756, _757, _758), vec3(_2243, _2244, _2245));
    float _4410 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2243, _2244, _2245));
    float _4421 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2235 * _2235;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2272 = 1.0 - _2235;
    float _2282 = (0.5 / (((_2171 * ((_2249 * _2272) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2272) + _2235) * _2249))) * _2249;
    float _4432 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2284 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    float _2294 = (((_2271 * cbLight._m0[_2223].x) * _2284) * _2026) + ((((cbLight._m0[_2142].x * _1995) * _2195) * _2209) * _2039);
    float _2295 = (((_2271 * cbLight._m0[_2223].y) * _2284) * _2026) + ((((cbLight._m0[_2142].y * _1996) * _2195) * _2209) * _2039);
    float _2296 = (((_2271 * cbLight._m0[_2223].z) * _2284) * _2026) + ((((cbLight._m0[_2142].z * _1997) * _2195) * _2209) * _2039);
    float _2358;
    float _2360;
    float _2362;
    if (_2079)
    {
        _2358 = _2294;
        _2360 = _2295;
        _2362 = _2296;
    }
    else
    {
        uint _2364 = _2003 + 2u;
        uint _2368 = _2003 + 10u;
        float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _759) * 0.949999988079071044921875);
        float _2383 = _2382 * _2382;
        float _2384 = cbLight._m0[_2364].x + _836;
        float _2385 = cbLight._m0[_2364].y + _837;
        float _2386 = cbLight._m0[_2364].z + _838;
        float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
        float _2391 = _2390 * _2384;
        float _2392 = _2390 * _2385;
        float _2393 = _2390 * _2386;
        float _2394 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2364].xyz));
        float _4443 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2398 = dot(vec3(_756, _757, _758), vec3(_2391, _2392, _2393));
        float _4454 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2402 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2391, _2392, _2393));
        float _4465 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2406 = _2383 * _2383;
        float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
        float _2419 = (exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2420 = 1.0 - _2383;
        float _2430 = (0.5 / (((_2171 * ((_2397 * _2420) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2420) + _2383) * _2397))) * _2397;
        float _4476 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2432 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
        float _2433 = isnan(1.0) ? _2018 : (isnan(_2018) ? 1.0 : min(_2018, 1.0));
        _2358 = (((_2419 * cbLight._m0[_2368].x) * _2432) * _2433) + _2294;
        _2360 = (((_2419 * cbLight._m0[_2368].y) * _2432) * _2433) + _2295;
        _2362 = (((_2419 * cbLight._m0[_2368].z) * _2432) * _2433) + _2296;
    }
    float _2468;
    float _2470;
    float _2472;
    if (_2097)
    {
        _2468 = _2358;
        _2470 = _2360;
        _2472 = _2362;
    }
    else
    {
        uint _2479 = _2003 + 3u;
        uint _2483 = _2003 + 11u;
        float _2497 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2479].w)) * _759) * 0.949999988079071044921875);
        float _2498 = _2497 * _2497;
        float _2499 = cbLight._m0[_2479].x + _836;
        float _2500 = cbLight._m0[_2479].y + _837;
        float _2501 = cbLight._m0[_2479].z + _838;
        float _2505 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
        float _2506 = _2505 * _2499;
        float _2507 = _2505 * _2500;
        float _2508 = _2505 * _2501;
        float _2509 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2479].xyz));
        float _4492 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2512 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2513 = dot(vec3(_756, _757, _758), vec3(_2506, _2507, _2508));
        float _4503 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2516 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2517 = dot(vec3(cbLight._m0[_2479].xyz), vec3(_2506, _2507, _2508));
        float _4514 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2521 = _2498 * _2498;
        float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
        float _2534 = (exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2535 = 1.0 - _2498;
        float _2545 = (0.5 / (((_2171 * ((_2512 * _2535) + _2498)) + 9.9999999392252902907785028219223e-09) + (((_2171 * _2535) + _2498) * _2512))) * _2512;
        float _4525 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2547 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
        float _2548 = isnan(1.0) ? _2019 : (isnan(_2019) ? 1.0 : min(_2019, 1.0));
        _2468 = (((_2534 * cbLight._m0[_2483].x) * _2547) * _2548) + _2358;
        _2470 = (((_2534 * cbLight._m0[_2483].y) * _2547) * _2548) + _2360;
        _2472 = (((_2534 * cbLight._m0[_2483].z) * _2547) * _2548) + _2362;
    }
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    if (_2001.y == 0u)
    {
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2623;
        float _2625 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2623;
        float _2626 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2623;
        uvec4 _2638 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2639 = _2638.x;
        uint _2650 = uint((float(_2638.y) * floor(float(uint(cbSceneParam._m0[85u].y * _857) / _2639))) + floor(float(uint(cbSceneParam._m0[85u].x * _856) / _2639)));
        float _2660 = (log2(_2626 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2661 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        uint _2664 = uint(isnan(14.0) ? _2661 : (isnan(_2661) ? 14.0 : min(_2661, 14.0)));
        uvec4 _2669 = texelFetch(g_lightClusterGridBuffer, int(((_2664 << 2u) + (_2650 << 6u)) >> 2u));
        uint _2670 = _2669.x;
        uint _2671 = _2638.z;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        if (((((1u << ((_2671 >> 4u) & 15u)) + 4294967295u) & _2670) == 0u) || ((_2671 & 240u) == 0u))
        {
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
        }
        else
        {
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            uint _2930 = 0u;
            uint _2939;
            bool _2940;
            for (;;)
            {
                _2939 = texelFetch(g_lightClassification, int((((_2664 << 5u) + (_2650 << 9u)) + (_2930 << 2u)) >> 2u)).x;
                _2940 = _2939 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2940)
                {
                    frontier_phi_66_pred = _2924;
                    frontier_phi_66_pred_1 = _2929;
                    frontier_phi_66_pred_2 = _2928;
                    frontier_phi_66_pred_3 = _2927;
                    frontier_phi_66_pred_4 = _2926;
                    frontier_phi_66_pred_5 = _2925;
                }
                else
                {
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    uint _3075;
                    _3069 = _2924;
                    _3070 = _2925;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2939;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    for (;;)
                    {
                        uint _3079 = uint(findLSB(_3075)) + (_2930 << 5u);
                        uint _3076 = (_3075 + 4294967295u) & _3075;
                        uint _3081 = _3079 * 48u;
                        vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3101 = (_3079 * 48u) + 4u;
                        vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 3u)).x));
                        uint _3120 = (_3079 * 48u) + 8u;
                        vec3 _3131 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x));
                        float _3135 = _3095.x - _2624;
                        float _3136 = _3095.y - _2625;
                        float _3137 = _3095.z - _2626;
                        float _3138 = dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137));
                        float _3141 = inversesqrt(_3138);
                        float _3142 = _3141 * _3135;
                        float _3143 = _3141 * _3136;
                        float _3144 = _3141 * _3137;
                        float _3145 = dot(vec3(_875, _878, _881), vec3(_3142, _3143, _3144));
                        float _3150 = 1.0 - (_3138 * _3095.w);
                        float _4551 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3151 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                        float _3152 = sqrt(_3138) * _3114.w;
                        float _3155 = 1.39999997615814208984375 / (_3152 + 1.39999997615814208984375);
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3145) + _3156;
                        float _3162 = _3152 * _3152;
                        float _3166 = ((isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0))) * _3151) / ((_3162 * 0.699999988079071044921875) + 1.0);
                        float _3170 = (-0.0) - _2624;
                        float _3171 = (-0.0) - _2625;
                        float _3172 = (-0.0) - _2626;
                        float _3176 = inversesqrt(dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172)));
                        float _3177 = _3176 * _3170;
                        float _3178 = _3176 * _3171;
                        float _3179 = _3176 * _3172;
                        float _3187 = exp2(log2(1.0 / ((_3162 * 3.5) + 5.0)) * 0.25);
                        float _3188 = 1.0 - _935;
                        float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                        float _3196 = _3195 * _3195;
                        float _3197 = _3196 * _3196;
                        float _3198 = _3177 + _3142;
                        float _3199 = _3178 + _3143;
                        float _3200 = _3179 + _3144;
                        float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                        float _3208 = dot(vec3(_875, _878, _881), vec3(_3177, _3178, _3179));
                        float _4567 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                        float _3212 = dot(vec3(_875, _878, _881), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                        float _4578 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                        float _3220 = _3155 * _3196;
                        float _3221 = _3220 * _3220;
                        float _3224 = ((1.0 - _3221) * _3145) + _3221;
                        float _4589 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3225 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                        float _3226 = 1.0 - _3196;
                        float _3236 = (0.5 / (((_3225 * ((_3211 * _3226) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3225 * _3226) + _3196) * _3211))) * _3225;
                        float _4600 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3247 = (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) / ((_3219 * _3219) * ((_3162 * 2.1991131305694580078125) + 3.141590118408203125))) * _3151;
                        _2999 = (_3166 * _3114.x) + _3072;
                        _3000 = (_3166 * _3114.y) + _3073;
                        _3001 = (_3166 * _3114.z) + _3074;
                        _2996 = (_3247 * _3131.x) + _3069;
                        _2997 = (_3247 * _3131.y) + _3070;
                        _2998 = (_3247 * _3131.z) + _3071;
                        if (_3076 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3076;
                        }
                    }
                    frontier_phi_66_pred = _2996;
                    frontier_phi_66_pred_1 = _3001;
                    frontier_phi_66_pred_2 = _3000;
                    frontier_phi_66_pred_3 = _2999;
                    frontier_phi_66_pred_4 = _2998;
                    frontier_phi_66_pred_5 = _2997;
                }
                _2772 = frontier_phi_66_pred;
                _2782 = frontier_phi_66_pred_1;
                _2780 = frontier_phi_66_pred_2;
                _2778 = frontier_phi_66_pred_3;
                _2776 = frontier_phi_66_pred_4;
                _2774 = frontier_phi_66_pred_5;
                uint _2931 = _2930 + 1u;
                if (_2931 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2924 = _2772;
                    _2925 = _2774;
                    _2926 = _2776;
                    _2927 = _2778;
                    _2928 = _2780;
                    _2929 = _2782;
                    _2930 = _2931;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
        }
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.z;
        uint _2788 = (_2786 >> 8u) & 15u;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        if (((4294967295u << _2788) & _2670) == 0u)
        {
            _2892 = _2771;
            _2894 = _2773;
            _2896 = _2775;
            _2898 = _2777;
            _2900 = _2779;
            _2902 = _2781;
        }
        else
        {
            float _2917 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
            float _2918 = _2917 * _2624;
            float _2919 = _2917 * _2625;
            float _2920 = _2917 * _2626;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2788 < ((_2786 >> 12u) & 15u))
            {
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _3052 = _2771;
                float _3053 = _2773;
                float _3054 = _2775;
                float _3055 = _2777;
                float _3056 = _2779;
                float _3057 = _2781;
                uint _3058 = _2788;
                uint _3067;
                bool _3068;
                for (;;)
                {
                    _3067 = texelFetch(g_lightClassification, int((((_2664 << 5u) + (_2650 << 9u)) + (_3058 << 2u)) >> 2u)).x;
                    _3068 = _3067 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3068)
                    {
                        frontier_phi_77_pred = _3057;
                        frontier_phi_77_pred_1 = _3056;
                        frontier_phi_77_pred_2 = _3055;
                        frontier_phi_77_pred_3 = _3054;
                        frontier_phi_77_pred_4 = _3053;
                        frontier_phi_77_pred_5 = _3052;
                    }
                    else
                    {
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3274 = _3052;
                        float _3275 = _3053;
                        float _3276 = _3054;
                        float _3277 = _3055;
                        float _3278 = _3056;
                        float _3279 = _3057;
                        uint _3280 = _3067;
                        uint _3281;
                        vec4 _3306;
                        float _3307;
                        vec4 _3322;
                        vec3 _3334;
                        vec4 _3349;
                        vec4 _3364;
                        float _3410;
                        bool _3411;
                        for (;;)
                        {
                            uint _3291 = ((_3058 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3280));
                            _3281 = (_3280 + 4294967295u) & _3280;
                            uint _3293 = _3291 * 40u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3307 = _3306.w;
                            uint _3309 = (_3291 * 40u) + 4u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3291 * 40u) + 8u;
                            _3334 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x));
                            uint _3336 = (_3291 * 40u) + 16u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3351 = (_3291 * 40u) + 20u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3366 = (_3291 * 40u) + 24u;
                            vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            uint _3385 = (_3291 * 40u) + 28u;
                            vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3410 = fma(_2626, _3398.z, fma(_2625, _3398.y, _3398.x * _2624)) + _3398.w;
                            _3411 = !((fma(_2626, _3379.z, fma(_2625, _3379.y, _3379.x * _2624)) + _3379.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3411)
                            {
                                float _3438 = _3306.x - _2624;
                                float _3439 = _3306.y - _2625;
                                float _3440 = _3306.z - _2626;
                                float _3441 = dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440));
                                float _3444 = inversesqrt(_3441);
                                float _3445 = _3444 * _3438;
                                float _3446 = _3444 * _3439;
                                float _3447 = _3444 * _3440;
                                float _3451 = 1.0 - (_3441 / (_3307 * _3307));
                                float _4611 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3452 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                                float _3456 = sqrt(_3441) * _3322.w;
                                float _3458 = 1.39999997615814208984375 / (_3456 + 1.39999997615814208984375);
                                float _3459 = _3458 * _3458;
                                float _3462 = ((1.0 - _3459) * dot(vec3(_3445, _3446, _3447), vec3(_875, _878, _881))) + _3459;
                                float _3465 = _3456 * _3456;
                                float _3469 = (fma(_2626, _3349.z, fma(_2625, _3349.y, _3349.x * _2624)) + _3349.w) / _3410;
                                float _3470 = (fma(_2626, _3364.z, fma(_2625, _3364.y, _3364.x * _2624)) + _3364.w) / _3410;
                                float _3474 = 1.0 - dot(vec2(_3469, _3470), vec2(_3469, _3470));
                                float _4627 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3476 = _3475 * (((isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0))) * _3452) / ((_3465 * 0.699999988079071044921875) + 1.0));
                                float _3488 = exp2(log2(1.0 / ((_3465 * 3.5) + 5.0)) * 0.25);
                                float _3489 = 1.0 - _935;
                                float _3496 = sqrt(1.0 - ((1.0 - (_3489 * _3489)) * (1.0 - (_3488 * _3488))));
                                float _3497 = _3496 * _3496;
                                float _3498 = _3497 * _3497;
                                float _3499 = _3445 - _2918;
                                float _3500 = _3446 - _2919;
                                float _3501 = _3447 - _2920;
                                float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                                float _3509 = dot(vec3(_875, _878, _881), vec3((-0.0) - _2918, (-0.0) - _2919, (-0.0) - _2920));
                                float _4638 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3512 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3513 = dot(vec3(_875, _878, _881), vec3(_3505 * _3499, _3505 * _3500, _3505 * _3501));
                                float _4649 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3520 = ((_3516 * _3516) * (_3498 + (-1.0))) + 1.0;
                                float _3521 = _3458 * _3497;
                                float _3522 = _3521 * _3521;
                                float _3528 = ((1.0 - _3522) * dot(vec3(_875, _878, _881), vec3(_3445, _3446, _3447))) + _3522;
                                float _4660 = isnan(0.0) ? _3528 : (isnan(_3528) ? 0.0 : max(_3528, 0.0));
                                float _3529 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3530 = 1.0 - _3497;
                                float _3540 = (0.5 / (((_3529 * ((_3512 * _3530) + _3497)) + 9.9999999392252902907785028219223e-09) + (((_3529 * _3530) + _3497) * _3512))) * _3529;
                                float _4671 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3550 = (_3475 * _3452) * (((_3498 * 3.1415927410125732421875) * (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0)))) / ((_3520 * _3520) * ((_3465 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3476 * _3322.y;
                                frontier_phi_83_pred_1 = _3476 * _3322.x;
                                frontier_phi_83_pred_2 = _3550 * _3334.z;
                                frontier_phi_83_pred_3 = _3550 * _3334.y;
                                frontier_phi_83_pred_4 = _3550 * _3334.x;
                                frontier_phi_83_pred_5 = _3476 * _3322.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3558 = frontier_phi_83_pred;
                            _3557 = frontier_phi_83_pred_1;
                            _3556 = frontier_phi_83_pred_2;
                            _3555 = frontier_phi_83_pred_3;
                            _3554 = frontier_phi_83_pred_4;
                            _3559 = frontier_phi_83_pred_5;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            _3263 = _3556 + _3276;
                            if (_3281 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3281;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3266;
                        frontier_phi_77_pred_1 = _3265;
                        frontier_phi_77_pred_2 = _3264;
                        frontier_phi_77_pred_3 = _3263;
                        frontier_phi_77_pred_4 = _3262;
                        frontier_phi_77_pred_5 = _3261;
                    }
                    _2903 = frontier_phi_77_pred;
                    _2901 = frontier_phi_77_pred_1;
                    _2899 = frontier_phi_77_pred_2;
                    _2897 = frontier_phi_77_pred_3;
                    _2895 = frontier_phi_77_pred_4;
                    _2893 = frontier_phi_77_pred_5;
                    uint _3059 = _3058 + 1u;
                    if (_3059 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3052 = _2893;
                        _3053 = _2895;
                        _3054 = _2897;
                        _3055 = _2899;
                        _3056 = _2901;
                        _3057 = _2903;
                        _3058 = _3059;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2897;
                frontier_phi_58_59_ladder_1 = _2903;
                frontier_phi_58_59_ladder_2 = _2901;
                frontier_phi_58_59_ladder_3 = _2899;
                frontier_phi_58_59_ladder_4 = _2895;
                frontier_phi_58_59_ladder_5 = _2893;
            }
            else
            {
                frontier_phi_58_59_ladder = _2775;
                frontier_phi_58_59_ladder_1 = _2781;
                frontier_phi_58_59_ladder_2 = _2779;
                frontier_phi_58_59_ladder_3 = _2777;
                frontier_phi_58_59_ladder_4 = _2773;
                frontier_phi_58_59_ladder_5 = _2771;
            }
            _2892 = frontier_phi_58_59_ladder_5;
            _2894 = frontier_phi_58_59_ladder_4;
            _2896 = frontier_phi_58_59_ladder;
            _2898 = frontier_phi_58_59_ladder_3;
            _2900 = frontier_phi_58_59_ladder_2;
            _2902 = frontier_phi_58_59_ladder_1;
        }
        float _2907 = isnan(1.0) ? _919 : (isnan(_919) ? 1.0 : min(_919, 1.0));
        _2683 = (_2907 * _2898) + _2135;
        _2685 = (_2907 * _2900) + _2137;
        _2687 = (_2907 * _2902) + _2139;
        _2689 = ((_2892 * 0.039999999105930328369140625) * _2907) + _2468;
        _2691 = ((_2894 * 0.039999999105930328369140625) * _2907) + _2470;
        _2693 = ((_2896 * 0.039999999105930328369140625) * _2907) + _2472;
    }
    else
    {
        _2683 = _2135;
        _2685 = _2137;
        _2687 = _2139;
        _2689 = _2468;
        _2691 = _2470;
        _2693 = _2472;
    }
    float _4687 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4698 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4709 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _2710 = ((isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2683 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _919))) + ((_2689 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1754)) * cbPerFrame._m0[3u].x);
    float _2711 = ((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2685 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _919))) + ((_2691 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1754)) * cbPerFrame._m0[3u].x);
    float _2712 = ((isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2687 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _919))) + ((_2693 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1754)) * cbPerFrame._m0[3u].x);
    uint _2713 = _272 + 6u;
    float _2721 = _856 / cbSceneParam._m0[86u].x;
    float _2722 = _857 / cbSceneParam._m0[86u].y;
    vec4 _2736 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2721, _2722, (log2((isnan(cbSceneParam._m0[77u].w) ? _777 : (isnan(_777) ? cbSceneParam._m0[77u].w : min(_777, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2738 = _2736.x;
    float _2739 = _2736.y;
    float _2740 = _2736.z;
    float _2741 = _2736.w;
    float _2834;
    float _2836;
    float _2838;
    float _2840;
    if (_777 > cbSceneParam._m0[78u].w)
    {
        float _2796 = isnan(_777) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _777 : min(cbSceneParam._m0[80u].w, _777));
        float _2797 = _2796 / _777;
        float _2808 = _2797 * _829;
        float _2809 = _830 * _2797;
        float _2810 = (-0.0) - _2809;
        float _2812 = _2797 * _831;
        float _2814 = (cbSceneParam._m0[77u].w * _2810) / _2796;
        float _2815 = _2814 + cbSceneParam._m0[79u].w;
        float _2816 = cbSceneParam._m0[79u].w - _2809;
        float _2822 = sqrt(((_2808 * _2808) + (_2809 * _2809)) + (_2812 * _2812));
        float _2825 = (1.0 - (cbSceneParam._m0[77u].w / _2796)) * _2822;
        float _2830 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2832 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3009;
        if (abs((_2810 - _2814) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3009 = ((((_2815 > 0.0) ? exp2(_2830 * _2815) : (2.0 - exp2(_2832 * _2815))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2825;
        }
        else
        {
            float _2953 = 1.0 / cbSceneParam._m0[80u].x;
            float _2954 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : max(_2815, _2816));
            float _2955 = isnan(_2816) ? _2815 : (isnan(_2815) ? _2816 : min(_2815, _2816));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            _3009 = ((abs(_2822 / _2810) * cbSceneParam._m0[80u].y) * ((((_2964 - _2965) * 2.0) - ((exp2(_2830 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0)))) - exp2(_2830 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))))) * _2953)) - ((exp2(_2832 * _2964) - exp2(_2832 * _2965)) * _2953))) + (_2825 * cbSceneParam._m0[80u].z);
        }
        vec4 _3011 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2721, _2722, 1.0), 0.0);
        float _3020 = exp2((_3009 * (-1.44269502162933349609375)) * (1.0 - _3011.w));
        float _3021 = log2(_3020);
        float _3037 = log2(_2741);
        _2834 = (exp2(_3037 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].x)) * _3011.x) / cbSceneParam._m0[78u].x)) + _2738;
        _2836 = (exp2(_3037 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].y)) * _3011.y) / cbSceneParam._m0[78u].y)) + _2739;
        _2838 = (exp2(_3037 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].z)) * _3011.z) / cbSceneParam._m0[78u].z)) + _2740;
        _2840 = _3020 * _2741;
    }
    else
    {
        _2834 = _2738;
        _2836 = _2739;
        _2838 = _2740;
        _2840 = _2741;
    }
    bool _3047;
    vec4 _2850;
    vec4 _2872;
    float _2874;
    float _2878;
    float _2879;
    float _2880;
    float _2881;
    bool _2891;
    for (;;)
    {
        _2850 = cbMatDynParam._m0[0u];
        float _2852 = roundEven(_2850.y);
        bool _2853 = _2852 == 3.0;
        float _2854 = log2(_2840);
        float _2861 = exp2(_2854 * cbSceneParam._m0[78u].x) * _2710;
        float _2862 = exp2(_2854 * cbSceneParam._m0[78u].y) * _2711;
        float _2863 = exp2(_2854 * cbSceneParam._m0[78u].z) * _2712;
        float _2870 = _845 + (-0.5);
        _2872 = cbMtdParam._m0[1u];
        _2874 = _2872.y * _2870;
        float _2877 = (_2852 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2878 = _2877 * (_2853 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2834)));
        _2879 = _2877 * (_2853 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2836)));
        _2880 = _2877 * (_2853 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2838)));
        _2881 = _2870 * 0.999000012874603271484375;
        _2891 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2891)
        {
            if ((cbInstanceData._m0[_272 + 7u].x + _2881) < 0.5)
            {
                _3047 = true;
                break;
            }
        }
        uint _2988 = _894 + uint(_2850.w);
        if ((cbInstanceData._m0[_2988].w < 1.0) && ((cbInstanceData._m0[_2988].w + _2881) < 0.5))
        {
            _3047 = true;
            break;
        }
        if ((_2874 + 1.0) < _2872.x)
        {
            _3047 = true;
            break;
        }
        _3047 = false;
        break;
    }
    float _3252;
    if (_3047)
    {
        discard_state = true;
        _3252 = 0.0;
    }
    else
    {
        _3252 = cbInstanceData._m0[_2713].w;
    }
    SV_Target.x = _2878;
    SV_Target.y = _2879;
    SV_Target.z = _2880;
    SV_Target.w = _3252;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2713].w;
    discard_exit();
}


