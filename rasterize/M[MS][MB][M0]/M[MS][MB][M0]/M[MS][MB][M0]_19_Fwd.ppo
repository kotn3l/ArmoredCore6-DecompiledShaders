#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1155;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _253 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3463 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3474 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3485 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _282) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _283) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _324 = _319.x * cbMtdParam._m0[9u].x;
    float _325 = _319.y * cbMtdParam._m0[9u].y;
    float _326 = _319.z * cbMtdParam._m0[9u].z;
    float _330 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _296.x) * _324;
    float _333 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _296.y) * _325;
    float _336 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _296.z) * _326;
    float _343 = ((_324 - _330) * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) + _330;
    float _344 = ((_325 - _333) * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) + _333;
    float _345 = ((_326 - _336) * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) + _336;
    vec4 _363 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _282) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _283) + cbTextureTilingScale._m0[20u].w));
    vec4 _389 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _393 = _389.z;
    float _397 = (_389.x * 2.0) + (-1.0);
    float _398 = (_389.y * 2.0) + (-1.0);
    float _399 = dot(vec2(_397, _398), vec2(_397, _398));
    float _3496 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _404 = sqrt(1.0 - (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))));
    float _409 = _397 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_363.x * 2.0) + (-1.0)));
    float _410 = _398 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_363.y * 2.0) + (-1.0)));
    vec4 _427 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _429 = _427.x;
    float _430 = 1.0 - _429;
    float _439 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _442 = ((isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : min(_439, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _451 = (_442 - ((((((_429 - _430) * cbMtdParam._m0[24u].z) + _430) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _442))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3517 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _459 = (_452 * (cbMtdParam._m0[17u].x - _343)) + _343;
    float _460 = (_452 * (cbMtdParam._m0[17u].y - _344)) + _344;
    float _461 = (_452 * (cbMtdParam._m0[17u].z - _345)) + _345;
    vec4 _474 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _476 = _474.x;
    float _477 = 1.0 - _476;
    float _504 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_476 - _477) * cbMtdParam._m0[24u].w) + _477) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3528 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _513 = ((((cbMtdParam._m0[10u].x - _459) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _505) + _459;
    float _514 = ((((cbMtdParam._m0[10u].y - _460) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _505) + _460;
    float _515 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _461)) * _505) + _461;
    float _520 = (((_363.z - _393) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _393;
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _541 = (_534.x * 2.0) + (-1.0);
    float _542 = (_534.y * 2.0) + (-1.0);
    float _543 = dot(vec2(_541, _542), vec2(_541, _542));
    float _3539 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _551 = (_452 * (_534.z - _520)) + _520;
    float _554 = ((cbMtdParam._m0[23u].y - _551) * _505) + _551;
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _582 = (_576.x * 2.0) + (-1.0);
    float _583 = (_576.y * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3550 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _601 = (((_541 - _409) + (cbMtdParam._m0[21u].x * _409)) * _452) + _409;
    float _602 = (((_542 - _410) + (cbMtdParam._m0[21u].x * _410)) * _452) + _410;
    float _603 = (_452 * (sqrt(1.0 - (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) - _404)) + _404;
    float _614 = (((_582 - _601) + (_601 * cbMtdParam._m0[22u].z)) * _505) + _601;
    float _615 = (((_583 - _602) + (_602 * cbMtdParam._m0[22u].z)) * _505) + _602;
    float _616 = ((sqrt(1.0 - (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) - _603) * _505) + _603;
    float _618 = cbMtdParam._m0[22u].x + _389.w;
    float _621 = fma(_616, _231 * NORMAL.x, fma(_615, _238 * TANGENT.x, (_224 * _216) * _614));
    float _624 = fma(_616, _231 * NORMAL.y, fma(_615, _238 * TANGENT.y, (_224 * _217) * _614));
    float _627 = fma(_616, _231 * NORMAL.z, fma(_615, _238 * TANGENT.z, (_224 * _218) * _614));
    float _631 = inversesqrt(dot(vec3(_621, _624, _627), vec3(_621, _624, _627)));
    float _632 = _631 * _621;
    float _633 = _631 * _624;
    float _634 = _631 * _627;
    float _3561 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _635 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3583 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _3594 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3605 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _703 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _693);
    float _704 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _693);
    float _705 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _693);
    float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
    float _710 = _703 * _709;
    float _711 = _704 * _709;
    float _712 = _705 * _709;
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _740 = fma(_634, cbSceneParam._m0[5u].z, fma(_633, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _632));
    float _743 = fma(_634, cbSceneParam._m0[6u].z, fma(_633, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _632));
    float _746 = fma(_634, cbSceneParam._m0[7u].z, fma(_633, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _632));
    uint _760 = (_263 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _766 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0)))) * cbInstanceData._m0[_760].x;
    float _767 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * cbInstanceData._m0[_760].y;
    float _768 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * cbInstanceData._m0[_760].z;
    float _3616 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _3638 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    vec4 _780 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _784 = ((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * TEXCOORD_5.w) * _780.x;
    float _785 = dot(vec3(_632, _633, _634), vec3(_710, _711, _712));
    float _788 = _785 * 2.0;
    float _792 = (_788 * _632) - _710;
    float _793 = (_788 * _633) - _711;
    float _794 = (_788 * _634) - _712;
    float _798 = abs(dot(vec3(_710, _711, _712), vec3(_632, _633, _634)));
    float _3649 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _800 = sqrt(_635);
    float _813 = exp2((_800 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_800 * 3.0));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1154;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _879 = fma(_853, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _845));
        float _883 = fma(_853, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _845));
        float _887 = fma(_853, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _845));
        float _912 = _845 + _632;
        float _913 = _849 + _633;
        float _914 = _853 + _634;
        float _924 = fma(_914, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912)) - _879;
        float _925 = fma(_914, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912)) - _883;
        float _926 = fma(_914, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912)) - _887;
        float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
        float _943 = ((_930 * _924) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_879 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_930 * _925) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_883 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_930 * _926) / cbModelParam._m0[34u].z) + ((((((_887 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        float _982 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_948.x + (-0.5));
        float _984 = _982 * (_948.y + (-0.5));
        float _985 = _982 * (_948.z + (-0.5));
        float _992 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_955.x + (-0.5));
        float _994 = _992 * (_955.y + (-0.5));
        float _995 = _992 * (_955.z + (-0.5));
        float _1002 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_962.x + (-0.5));
        float _1004 = _1002 * (_962.y + (-0.5));
        float _1005 = _1002 * (_962.z + (-0.5));
        float _1012 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_969.x + (-0.5));
        float _1014 = _1012 * (_969.y + (-0.5));
        float _1015 = _1012 * (_969.z + (-0.5));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = _983 * 0.5;
        float _1020 = _993 * 0.5;
        float _1021 = _1003 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1036 = (dot(vec3(_632, _633, _634), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1046 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3697 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1048 + 1.0))) + _1053) * _1016;
        float _1063 = _984 * 0.5;
        float _1064 = _994 * 0.5;
        float _1065 = _1004 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_632, _633, _634), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3730 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1090 + 1.0))) + _1095) * _1017;
        float _1105 = _985 * 0.5;
        float _1106 = _995 * 0.5;
        float _1107 = _1005 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_632, _633, _634), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3763 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1132 + 1.0))) + _1137) * _1018;
        _1154 = _985;
        _1156 = _984;
        _1157 = _983;
        _1158 = _995;
        _1159 = _994;
        _1160 = _993;
        _1161 = _1005;
        _1162 = _1004;
        _1163 = _1003;
        _1164 = _1018;
        _1165 = _1017;
        _1166 = _1016;
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _1155;
        _1156 = _1155;
        _1157 = _1155;
        _1158 = _1155;
        _1159 = _1155;
        _1160 = _1155;
        _1161 = _1155;
        _1162 = _1155;
        _1163 = _1155;
        _1164 = _1155;
        _1165 = _1155;
        _1166 = _1155;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1194 = fma(_853, cbModelParam._m0[30u].z, fma(_849, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845));
        float _1198 = fma(_853, cbModelParam._m0[31u].z, fma(_849, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845));
        float _1202 = fma(_853, cbModelParam._m0[32u].z, fma(_849, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845));
        float _1225 = _845 + _632;
        float _1226 = _849 + _633;
        float _1227 = _853 + _634;
        float _1237 = fma(_1227, cbModelParam._m0[30u].z, fma(_1226, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1225)) - _1194;
        float _1238 = fma(_1227, cbModelParam._m0[31u].z, fma(_1226, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1225)) - _1198;
        float _1239 = fma(_1227, cbModelParam._m0[32u].z, fma(_1226, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1225)) - _1202;
        float _1243 = inversesqrt(dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239)));
        float _1256 = ((_1243 * _1237) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1194 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1243 * _1238) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1198 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1243 * _1239) / cbModelParam._m0[35u].z) + ((((((_1202 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        float _1293 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1260.x + (-0.5));
        float _1295 = _1293 * (_1260.y + (-0.5));
        float _1296 = _1293 * (_1260.z + (-0.5));
        float _1303 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1267.x + (-0.5));
        float _1305 = _1303 * (_1267.y + (-0.5));
        float _1306 = _1303 * (_1267.z + (-0.5));
        float _1313 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1274.x + (-0.5));
        float _1315 = _1313 * (_1274.y + (-0.5));
        float _1316 = _1313 * (_1274.z + (-0.5));
        float _1323 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1281.x + (-0.5));
        float _1325 = _1323 * (_1281.y + (-0.5));
        float _1326 = _1323 * (_1281.z + (-0.5));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = _1294 * 0.5;
        float _1331 = _1304 * 0.5;
        float _1332 = _1314 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_632, _633, _634), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3826 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1357 + 1.0))) + _1362) * _1327;
        float _1372 = _1295 * 0.5;
        float _1373 = _1305 * 0.5;
        float _1374 = _1315 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_632, _633, _634), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _3859 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1399 + 1.0))) + _1404) * _1328;
        float _1414 = _1296 * 0.5;
        float _1415 = _1306 * 0.5;
        float _1416 = _1316 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_632, _633, _634), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _3892 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1441 + 1.0))) + _1446) * _1329;
        _1463 = _1296;
        _1464 = _1295;
        _1465 = _1294;
        _1466 = _1306;
        _1467 = _1305;
        _1468 = _1304;
        _1469 = _1316;
        _1470 = _1315;
        _1471 = _1314;
        _1472 = _1329;
        _1473 = _1328;
        _1474 = _1327;
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
    }
    else
    {
        _1463 = _1155;
        _1464 = _1155;
        _1465 = _1155;
        _1466 = _1155;
        _1467 = _1155;
        _1468 = _1155;
        _1469 = _1155;
        _1470 = _1155;
        _1471 = _1155;
        _1472 = _1155;
        _1473 = _1155;
        _1474 = _1155;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1167)) + _1167;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1168)) + _1168;
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1169)) + _1169;
    float _1510 = fma(_1489, cbSceneParam._m0[89u].z, fma(_1488, cbSceneParam._m0[89u].y, _1487 * cbSceneParam._m0[89u].x));
    float _1513 = fma(_1489, cbSceneParam._m0[90u].z, fma(_1488, cbSceneParam._m0[90u].y, _1487 * cbSceneParam._m0[90u].x));
    float _1516 = fma(_1489, cbSceneParam._m0[91u].z, fma(_1488, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1487));
    float _1531 = _792 * 0.5;
    float _1532 = _793 * 0.5;
    float _1533 = _794 * 0.5;
    float _1534 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1537 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1540 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1574;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1547 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1154, _1158, _1161, _1164));
        float _1551 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1555 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1562 = dot(vec4(cbModelParam._m0[39u]), vec4(_1531, _1532, _1533, 1.0));
        _1574 = dot(vec3(isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1562) ? 0.0 : (isnan(0.0) ? _1562 : max(0.0, _1562))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1574 = 1.0;
    }
    float _1585;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1576 = dot(vec4(cbModelParam._m0[40u]), vec4(_1531, _1532, _1533, 1.0));
        _1585 = dot(vec3(isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1585 = 1.0;
    }
    float _1589 = (_1585 * cbModelParam._m0[1u].x) + (_1574 * (1.0 - cbModelParam._m0[1u].x));
    float _1599 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _635);
    float _1600 = isnan(_1599) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1599 : min(cbModelParam._m0[25u].z, _1599));
    float _1681;
    float _1683;
    float _1685;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1648 = fma(_853, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845)) + cbModelParam._m0[13u].w;
        float _1652 = fma(_853, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845)) + cbModelParam._m0[14u].w;
        float _1656 = fma(_853, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845)) + cbModelParam._m0[15u].w;
        float _1659 = fma(_794, cbModelParam._m0[13u].z, fma(_793, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _792));
        float _1662 = fma(_794, cbModelParam._m0[14u].z, fma(_793, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _792));
        float _1665 = fma(_794, cbModelParam._m0[15u].z, fma(_793, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _792));
        float _1693;
        if (_1659 > 0.0)
        {
            _1693 = abs((1.0 - _1648) / _1659);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1648 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1693 = frontier_phi_14_12_ladder;
        }
        float _1896;
        if (_1662 > 0.0)
        {
            _1896 = abs((1.0 - _1652) / _1662);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1652 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1896 = frontier_phi_23_19_ladder;
        }
        float _2139;
        if (_1665 > 0.0)
        {
            _2139 = abs((1.0 - _1656) / _1665);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1656 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2139 = frontier_phi_35_30_ladder;
        }
        float _2141 = isnan(_1896) ? _1693 : (isnan(_1693) ? _1896 : min(_1693, _1896));
        float _2142 = isnan(_2139) ? _2141 : (isnan(_2141) ? _2139 : min(_2141, _2139));
        float _2146 = (_2142 * _1659) + _1648;
        float _2147 = (_2142 * _1662) + _1652;
        float _2148 = (_2142 * _1665) + _1656;
        float _2149 = _2142 * 9.9999997473787516355514526367188e-05;
        float _2151 = (-1.0) - _2149;
        float _2153 = _2149 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2148 > _2153) || ((_2148 < _2151) || ((_2147 > _2153) || ((_2147 < _2151) || ((_2146 < _2151) || (_2146 > _2153))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2272 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2148, cbModelParam._m0[9u].z, fma(_2147, cbModelParam._m0[9u].y, _2146 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2148, cbModelParam._m0[10u].z, fma(_2147, cbModelParam._m0[10u].y, _2146 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2148, cbModelParam._m0[11u].z, fma(_2147, cbModelParam._m0[11u].y, _2146 * cbModelParam._m0[11u].x))), _1600);
            frontier_phi_13_35_ladder = _2272.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2272.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2272.x * cbModelParam._m0[1u].y;
        }
        _1681 = frontier_phi_13_35_ladder_2;
        _1683 = frontier_phi_13_35_ladder_1;
        _1685 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1669 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_792, _793, _794), _1600);
        _1681 = _1669.x * cbModelParam._m0[1u].y;
        _1683 = _1669.y * cbModelParam._m0[1u].y;
        _1685 = _1669.z * cbModelParam._m0[1u].y;
    }
    float _1689 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _635);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1689 : min(cbModelParam._m0[25u].w, _1689));
    float _1780;
    float _1782;
    float _1784;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1744 = fma(_853, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845)) + cbModelParam._m0[21u].w;
        float _1748 = fma(_853, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845)) + cbModelParam._m0[22u].w;
        float _1752 = fma(_853, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845)) + cbModelParam._m0[23u].w;
        float _1755 = fma(_794, cbModelParam._m0[21u].z, fma(_793, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _792));
        float _1758 = fma(_794, cbModelParam._m0[22u].z, fma(_793, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _792));
        float _1761 = fma(_794, cbModelParam._m0[23u].z, fma(_793, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _792));
        float _1901;
        if (_1755 > 0.0)
        {
            _1901 = abs((1.0 - _1744) / _1755);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1744 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1901 = frontier_phi_25_21_ladder;
        }
        float _2166;
        if (_1758 > 0.0)
        {
            _2166 = abs((1.0 - _1748) / _1758);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1748 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2166 = frontier_phi_37_32_ladder;
        }
        float _2371;
        if (_1761 > 0.0)
        {
            _2371 = abs((1.0 - _1752) / _1761);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1752 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2371 = frontier_phi_46_43_ladder;
        }
        float _2373 = isnan(_2166) ? _1901 : (isnan(_1901) ? _2166 : min(_1901, _2166));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1755) + _1744;
        float _2379 = (_2374 * _1758) + _1748;
        float _2380 = (_2374 * _1761) + _1752;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2381;
        float _2384 = _2381 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2380 > _2384) || ((_2380 < _2382) || ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 < _2382) || (_2378 > _2384))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2579 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2380, cbModelParam._m0[17u].z, fma(_2379, cbModelParam._m0[17u].y, _2378 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2380, cbModelParam._m0[18u].z, fma(_2379, cbModelParam._m0[18u].y, _2378 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2380, cbModelParam._m0[19u].z, fma(_2379, cbModelParam._m0[19u].y, _2378 * cbModelParam._m0[19u].x))), _1690);
            frontier_phi_22_46_ladder = _2579.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2579.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2579.x * cbModelParam._m0[1u].z;
        }
        _1780 = frontier_phi_22_46_ladder_2;
        _1782 = frontier_phi_22_46_ladder_1;
        _1784 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_792, _793, _794), _1690);
        _1780 = _1764.x * cbModelParam._m0[1u].z;
        _1782 = _1764.y * cbModelParam._m0[1u].z;
        _1784 = _1764.z * cbModelParam._m0[1u].z;
    }
    float _1796 = ((((1.0 - _813) * ((_800 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_813 * _800)) * _784;
    float _1797 = _1796 * ((cbModelParam._m0[1u].w * (_1780 - _1681)) + _1681);
    float _1798 = _1796 * ((cbModelParam._m0[1u].w * (_1782 - _1683)) + _1683);
    float _1799 = _1796 * ((cbModelParam._m0[1u].w * (_1784 - _1685)) + _1685);
    float _1802 = fma(_1799, cbSceneParam._m0[89u].z, fma(_1798, cbSceneParam._m0[89u].y, _1797 * cbSceneParam._m0[89u].x));
    float _1805 = fma(_1799, cbSceneParam._m0[90u].z, fma(_1798, cbSceneParam._m0[90u].y, _1797 * cbSceneParam._m0[90u].x));
    float _1808 = fma(_1799, cbSceneParam._m0[91u].z, fma(_1798, cbSceneParam._m0[91u].y, _1797 * cbSceneParam._m0[91u].x));
    uvec4 _1818 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _1820 = _1818.x * 14u;
    uint _1821 = _1820 + 13u;
    float _1828 = _784 + (-1.0);
    float _1833 = (cbLight._m0[_1821].x * _1828) + 1.0;
    float _1834 = (cbLight._m0[_1821].y * _1828) + 1.0;
    float _1835 = (cbLight._m0[_1821].z * _1828) + 1.0;
    float _1836 = (cbLight._m0[_1821].w * _1828) + 1.0;
    uint _1837 = _1820 + 5u;
    float _1843 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1847 = _1820 + 4u;
    float _1854 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1858 = _1820 | 1u;
    float _1869 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_632, _633, _634));
    float _1872 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_632, _633, _634));
    float _4028 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _4039 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1877 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 0.3183098733425140380859375;
    float _1879 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * 0.3183098733425140380859375;
    float _1886 = ((cbLight._m0[_1837].x * _1843) * _1879) + ((cbLight._m0[_1847].x * _1854) * _1877);
    float _1887 = ((_1843 * cbLight._m0[_1837].y) * _1879) + ((_1854 * cbLight._m0[_1847].y) * _1877);
    float _1888 = ((_1843 * cbLight._m0[_1837].z) * _1879) + ((_1854 * cbLight._m0[_1847].z) * _1877);
    uvec4 _1893 = floatBitsToUint(cbLight._m0[_1820 + 12u]);
    bool _1895 = _1893.x == 0u;
    float _1906;
    float _1908;
    float _1910;
    if (_1895)
    {
        _1906 = _1886;
        _1908 = _1887;
        _1910 = _1888;
    }
    else
    {
        uint _1914 = _1820 + 6u;
        float _1930 = (dot(vec3(cbLight._m0[_1820 + 2u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _1931 = _1930 * _1930;
        float _4050 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1932 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1933 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _1906 = (((cbLight._m0[_1914].x * 0.3183098733425140380859375) * _1932) * _1933) + _1886;
        _1908 = (((cbLight._m0[_1914].y * 0.3183098733425140380859375) * _1932) * _1933) + _1887;
        _1910 = (((cbLight._m0[_1914].z * 0.3183098733425140380859375) * _1932) * _1933) + _1888;
    }
    bool _1913 = _1893.y == 0u;
    float _1951;
    float _1953;
    float _1955;
    if (_1913)
    {
        _1951 = _1906;
        _1953 = _1908;
        _1955 = _1910;
    }
    else
    {
        uint _2110 = _1820 + 7u;
        float _2126 = (dot(vec3(cbLight._m0[_1820 + 3u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _2127 = _2126 * _2126;
        float _4066 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2128 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _2129 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _1951 = (((cbLight._m0[_2110].x * 0.3183098733425140380859375) * _2128) * _2129) + _1906;
        _1953 = (((cbLight._m0[_2110].y * 0.3183098733425140380859375) * _2128) * _2129) + _1908;
        _1955 = (((cbLight._m0[_2110].z * 0.3183098733425140380859375) * _2128) * _2129) + _1910;
    }
    uint _1958 = _1820 + 8u;
    float _1971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1820].w)) * _635) * 0.949999988079071044921875);
    float _1972 = _1971 * _1971;
    float _1973 = cbLight._m0[_1820].x + _710;
    float _1974 = cbLight._m0[_1820].y + _711;
    float _1975 = cbLight._m0[_1820].z + _712;
    float _1979 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
    float _1980 = _1979 * _1973;
    float _1981 = _1979 * _1974;
    float _1982 = _1979 * _1975;
    float _1983 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_1820].xyz));
    float _4082 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _1987 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _1988 = dot(vec3(_632, _633, _634), vec3(_1980, _1981, _1982));
    float _4104 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _1992 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_1980, _1981, _1982));
    float _4115 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1996 = _1972 * _1972;
    float _2000 = ((_1991 * _1991) * (_1996 + (-1.0))) + 1.0;
    float _2011 = (exp2(log2(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2012 = 1.0 - _1972;
    float _2023 = (0.5 / (((_1987 * ((_1986 * _2012) + _1972)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2012) + _1972) * _1986))) * _1986;
    float _4126 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2025 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1996 / ((_2000 * _2000) * 3.141590118408203125));
    uint _2036 = _1820 + 9u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1858].w)) * _635) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1858].x + _710;
    float _2050 = cbLight._m0[_1858].y + _711;
    float _2051 = cbLight._m0[_1858].z + _712;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_1858].xyz));
    float _4137 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _2063 = dot(vec3(_632, _633, _634), vec3(_2056, _2057, _2058));
    float _4148 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _2067 = dot(vec3(cbLight._m0[_1858].xyz), vec3(_2056, _2057, _2058));
    float _4159 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2071 = _2048 * _2048;
    float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
    float _2084 = (exp2(log2(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2085 = 1.0 - _2048;
    float _2095 = (0.5 / (((_1987 * ((_2062 * _2085) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2085) + _2048) * _2062))) * _2062;
    float _4170 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
    float _2107 = (((_2084 * cbLight._m0[_2036].x) * _2097) * _1843) + (((_2011 * cbLight._m0[_1958].x) * _2025) * _1854);
    float _2108 = (((_2084 * cbLight._m0[_2036].y) * _2097) * _1843) + (((_2011 * cbLight._m0[_1958].y) * _2025) * _1854);
    float _2109 = (((_2084 * cbLight._m0[_2036].z) * _2097) * _1843) + (((_2011 * cbLight._m0[_1958].z) * _2025) * _1854);
    float _2171;
    float _2173;
    float _2175;
    if (_1895)
    {
        _2171 = _2107;
        _2173 = _2108;
        _2175 = _2109;
    }
    else
    {
        uint _2177 = _1820 + 2u;
        uint _2181 = _1820 + 10u;
        float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _635) * 0.949999988079071044921875);
        float _2196 = _2195 * _2195;
        float _2197 = cbLight._m0[_2177].x + _710;
        float _2198 = cbLight._m0[_2177].y + _711;
        float _2199 = cbLight._m0[_2177].z + _712;
        float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
        float _2204 = _2203 * _2197;
        float _2205 = _2203 * _2198;
        float _2206 = _2203 * _2199;
        float _2207 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2177].xyz));
        float _4181 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2211 = dot(vec3(_632, _633, _634), vec3(_2204, _2205, _2206));
        float _4192 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _2215 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2204, _2205, _2206));
        float _4203 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2219 = _2196 * _2196;
        float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
        float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2233 = 1.0 - _2196;
        float _2243 = (0.5 / (((_1987 * ((_2210 * _2233) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2233) + _2196) * _2210))) * _2210;
        float _4214 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2245 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
        float _2246 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
        _2171 = (((_2232 * cbLight._m0[_2181].x) * _2245) * _2246) + _2107;
        _2173 = (((_2232 * cbLight._m0[_2181].y) * _2245) * _2246) + _2108;
        _2175 = (((_2232 * cbLight._m0[_2181].z) * _2245) * _2246) + _2109;
    }
    float _2281;
    float _2283;
    float _2285;
    if (_1913)
    {
        _2281 = _2171;
        _2283 = _2173;
        _2285 = _2175;
    }
    else
    {
        uint _2292 = _1820 + 3u;
        uint _2296 = _1820 + 11u;
        float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _635) * 0.949999988079071044921875);
        float _2311 = _2310 * _2310;
        float _2312 = cbLight._m0[_2292].x + _710;
        float _2313 = cbLight._m0[_2292].y + _711;
        float _2314 = cbLight._m0[_2292].z + _712;
        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
        float _2319 = _2318 * _2312;
        float _2320 = _2318 * _2313;
        float _2321 = _2318 * _2314;
        float _2322 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2292].xyz));
        float _4230 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _2326 = dot(vec3(_632, _633, _634), vec3(_2319, _2320, _2321));
        float _4241 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2330 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2319, _2320, _2321));
        float _4252 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2334 = _2311 * _2311;
        float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
        float _2347 = (exp2(log2(1.0 - (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2348 = 1.0 - _2311;
        float _2358 = (0.5 / (((_1987 * ((_2325 * _2348) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2348) + _2311) * _2325))) * _2325;
        float _4263 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2360 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
        float _2361 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
        _2281 = (((_2347 * cbLight._m0[_2296].x) * _2360) * _2361) + _2171;
        _2283 = (((_2347 * cbLight._m0[_2296].y) * _2360) * _2361) + _2173;
        _2285 = (((_2347 * cbLight._m0[_2296].z) * _2360) * _2361) + _2175;
    }
    float _2496;
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    if (_1818.y == 0u)
    {
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2436;
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2436;
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2436;
        uvec4 _2451 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2452 = _2451.x;
        uint _2463 = uint((float(_2451.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2452))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2452)));
        float _2473 = (log2(_2439 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2474 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        uint _2477 = uint(isnan(14.0) ? _2474 : (isnan(_2474) ? 14.0 : min(_2474, 14.0)));
        uvec4 _2482 = texelFetch(g_lightClusterGridBuffer, int(((_2477 << 2u) + (_2463 << 6u)) >> 2u));
        uint _2483 = _2482.x;
        uint _2484 = _2451.z;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        if (((((1u << ((_2484 >> 4u) & 15u)) + 4294967295u) & _2483) == 0u) || ((_2484 & 240u) == 0u))
        {
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
        }
        else
        {
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            uint _2735 = 0u;
            uint _2744;
            bool _2745;
            for (;;)
            {
                _2744 = texelFetch(g_lightClassification, int((((_2477 << 5u) + (_2463 << 9u)) + (_2735 << 2u)) >> 2u)).x;
                _2745 = _2744 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2745)
                {
                    frontier_phi_61_pred = _2729;
                    frontier_phi_61_pred_1 = _2734;
                    frontier_phi_61_pred_2 = _2733;
                    frontier_phi_61_pred_3 = _2732;
                    frontier_phi_61_pred_4 = _2731;
                    frontier_phi_61_pred_5 = _2730;
                }
                else
                {
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    uint _2859;
                    _2853 = _2729;
                    _2854 = _2730;
                    _2855 = _2731;
                    _2856 = _2732;
                    _2857 = _2733;
                    _2858 = _2734;
                    _2859 = _2744;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    for (;;)
                    {
                        uint _2863 = uint(findLSB(_2859)) + (_2735 << 5u);
                        uint _2860 = (_2859 + 4294967295u) & _2859;
                        uint _2865 = _2863 * 48u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 3u)).x));
                        uint _2885 = (_2863 * 48u) + 4u;
                        vec4 _2898 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 3u)).x));
                        uint _2904 = (_2863 * 48u) + 8u;
                        vec3 _2915 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x));
                        float _2919 = _2879.x - _2437;
                        float _2920 = _2879.y - _2438;
                        float _2921 = _2879.z - _2439;
                        float _2922 = dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921));
                        float _2925 = inversesqrt(_2922);
                        float _2926 = _2925 * _2919;
                        float _2927 = _2925 * _2920;
                        float _2928 = _2925 * _2921;
                        float _2929 = dot(vec3(_740, _743, _746), vec3(_2926, _2927, _2928));
                        float _2934 = 1.0 - (_2922 * _2879.w);
                        float _4289 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2935 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                        float _2936 = sqrt(_2922) * _2898.w;
                        float _2939 = 1.39999997615814208984375 / (_2936 + 1.39999997615814208984375);
                        float _2940 = _2939 * _2939;
                        float _2943 = ((1.0 - _2940) * _2929) + _2940;
                        float _2946 = _2936 * _2936;
                        float _2950 = ((isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0))) * _2935) / ((_2946 * 0.699999988079071044921875) + 1.0);
                        float _2954 = (-0.0) - _2437;
                        float _2955 = (-0.0) - _2438;
                        float _2956 = (-0.0) - _2439;
                        float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
                        float _2961 = _2960 * _2954;
                        float _2962 = _2960 * _2955;
                        float _2963 = _2960 * _2956;
                        float _2971 = exp2(log2(1.0 / ((_2946 * 3.5) + 5.0)) * 0.25);
                        float _2972 = 1.0 - _800;
                        float _2979 = sqrt(1.0 - ((1.0 - (_2972 * _2972)) * (1.0 - (_2971 * _2971))));
                        float _2980 = _2979 * _2979;
                        float _2981 = _2980 * _2980;
                        float _2982 = _2961 + _2926;
                        float _2983 = _2962 + _2927;
                        float _2984 = _2963 + _2928;
                        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                        float _2992 = dot(vec3(_740, _743, _746), vec3(_2961, _2962, _2963));
                        float _4305 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2995 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _2996 = dot(vec3(_740, _743, _746), vec3(_2988 * _2982, _2988 * _2983, _2988 * _2984));
                        float _4316 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2999 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _3003 = ((_2999 * _2999) * (_2981 + (-1.0))) + 1.0;
                        float _3004 = _2939 * _2980;
                        float _3005 = _3004 * _3004;
                        float _3008 = ((1.0 - _3005) * _2929) + _3005;
                        float _4327 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3009 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _3010 = 1.0 - _2980;
                        float _3020 = (0.5 / (((_3009 * ((_2995 * _3010) + _2980)) + 9.9999999392252902907785028219223e-09) + (((_3009 * _3010) + _2980) * _2995))) * _3009;
                        float _4338 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3031 = (((_2981 * 3.1415927410125732421875) * (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) / ((_3003 * _3003) * ((_2946 * 2.1991131305694580078125) + 3.141590118408203125))) * _2935;
                        _2788 = (_2950 * _2898.x) + _2856;
                        _2789 = (_2950 * _2898.y) + _2857;
                        _2790 = (_2950 * _2898.z) + _2858;
                        _2785 = (_3031 * _2915.x) + _2853;
                        _2786 = (_3031 * _2915.y) + _2854;
                        _2787 = (_3031 * _2915.z) + _2855;
                        if (_2860 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2853 = _2785;
                            _2854 = _2786;
                            _2855 = _2787;
                            _2856 = _2788;
                            _2857 = _2789;
                            _2858 = _2790;
                            _2859 = _2860;
                        }
                    }
                    frontier_phi_61_pred = _2785;
                    frontier_phi_61_pred_1 = _2790;
                    frontier_phi_61_pred_2 = _2789;
                    frontier_phi_61_pred_3 = _2788;
                    frontier_phi_61_pred_4 = _2787;
                    frontier_phi_61_pred_5 = _2786;
                }
                _2585 = frontier_phi_61_pred;
                _2595 = frontier_phi_61_pred_1;
                _2593 = frontier_phi_61_pred_2;
                _2591 = frontier_phi_61_pred_3;
                _2589 = frontier_phi_61_pred_4;
                _2587 = frontier_phi_61_pred_5;
                uint _2736 = _2735 + 1u;
                if (_2736 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2729 = _2585;
                    _2730 = _2587;
                    _2731 = _2589;
                    _2732 = _2591;
                    _2733 = _2593;
                    _2734 = _2595;
                    _2735 = _2736;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
        }
        uvec4 _2598 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2599 = _2598.z;
        uint _2601 = (_2599 >> 8u) & 15u;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        if (((4294967295u << _2601) & _2483) == 0u)
        {
            _2697 = _2584;
            _2699 = _2586;
            _2701 = _2588;
            _2703 = _2590;
            _2705 = _2592;
            _2707 = _2594;
        }
        else
        {
            float _2722 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
            float _2723 = _2722 * _2437;
            float _2724 = _2722 * _2438;
            float _2725 = _2722 * _2439;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2601 < ((_2599 >> 12u) & 15u))
            {
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2836 = _2584;
                float _2837 = _2586;
                float _2838 = _2588;
                float _2839 = _2590;
                float _2840 = _2592;
                float _2841 = _2594;
                uint _2842 = _2601;
                uint _2851;
                bool _2852;
                for (;;)
                {
                    _2851 = texelFetch(g_lightClassification, int((((_2477 << 5u) + (_2463 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                    _2852 = _2851 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2852)
                    {
                        frontier_phi_67_pred = _2839;
                        frontier_phi_67_pred_1 = _2840;
                        frontier_phi_67_pred_2 = _2841;
                        frontier_phi_67_pred_3 = _2838;
                        frontier_phi_67_pred_4 = _2837;
                        frontier_phi_67_pred_5 = _2836;
                    }
                    else
                    {
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3049 = _2836;
                        float _3050 = _2837;
                        float _3051 = _2838;
                        float _3052 = _2839;
                        float _3053 = _2840;
                        float _3054 = _2841;
                        uint _3055 = _2851;
                        uint _3056;
                        vec4 _3081;
                        float _3082;
                        vec4 _3097;
                        vec3 _3109;
                        vec4 _3124;
                        vec4 _3139;
                        float _3185;
                        bool _3186;
                        for (;;)
                        {
                            uint _3066 = ((_2842 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3055));
                            _3056 = (_3055 + 4294967295u) & _3055;
                            uint _3068 = _3066 * 40u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            _3082 = _3081.w;
                            uint _3084 = (_3066 * 40u) + 4u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3099 = (_3066 * 40u) + 8u;
                            _3109 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x));
                            uint _3111 = (_3066 * 40u) + 16u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3126 = (_3066 * 40u) + 20u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3141 = (_3066 * 40u) + 24u;
                            vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3160 = (_3066 * 40u) + 28u;
                            vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            _3185 = fma(_2439, _3173.z, fma(_2438, _3173.y, _3173.x * _2437)) + _3173.w;
                            _3186 = !((fma(_2439, _3154.z, fma(_2438, _3154.y, _3154.x * _2437)) + _3154.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3186)
                            {
                                float _3213 = _3081.x - _2437;
                                float _3214 = _3081.y - _2438;
                                float _3215 = _3081.z - _2439;
                                float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                                float _3219 = inversesqrt(_3216);
                                float _3220 = _3219 * _3213;
                                float _3221 = _3219 * _3214;
                                float _3222 = _3219 * _3215;
                                float _3226 = 1.0 - (_3216 / (_3082 * _3082));
                                float _4349 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                                float _3231 = sqrt(_3216) * _3097.w;
                                float _3233 = 1.39999997615814208984375 / (_3231 + 1.39999997615814208984375);
                                float _3234 = _3233 * _3233;
                                float _3237 = ((1.0 - _3234) * dot(vec3(_3220, _3221, _3222), vec3(_740, _743, _746))) + _3234;
                                float _3240 = _3231 * _3231;
                                float _3244 = (fma(_2439, _3124.z, fma(_2438, _3124.y, _3124.x * _2437)) + _3124.w) / _3185;
                                float _3245 = (fma(_2439, _3139.z, fma(_2438, _3139.y, _3139.x * _2437)) + _3139.w) / _3185;
                                float _3249 = 1.0 - dot(vec2(_3244, _3245), vec2(_3244, _3245));
                                float _4365 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3251 = _3250 * (((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3227) / ((_3240 * 0.699999988079071044921875) + 1.0));
                                float _3263 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                                float _3264 = 1.0 - _800;
                                float _3271 = sqrt(1.0 - ((1.0 - (_3264 * _3264)) * (1.0 - (_3263 * _3263))));
                                float _3272 = _3271 * _3271;
                                float _3273 = _3272 * _3272;
                                float _3274 = _3220 - _2723;
                                float _3275 = _3221 - _2724;
                                float _3276 = _3222 - _2725;
                                float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                                float _3284 = dot(vec3(_740, _743, _746), vec3((-0.0) - _2723, (-0.0) - _2724, (-0.0) - _2725));
                                float _4376 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3287 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3288 = dot(vec3(_740, _743, _746), vec3(_3280 * _3274, _3280 * _3275, _3280 * _3276));
                                float _4387 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                                float _3295 = ((_3291 * _3291) * (_3273 + (-1.0))) + 1.0;
                                float _3296 = _3233 * _3272;
                                float _3297 = _3296 * _3296;
                                float _3303 = ((1.0 - _3297) * dot(vec3(_740, _743, _746), vec3(_3220, _3221, _3222))) + _3297;
                                float _4398 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                                float _3305 = 1.0 - _3272;
                                float _3315 = (0.5 / (((_3304 * ((_3287 * _3305) + _3272)) + 9.9999999392252902907785028219223e-09) + (((_3304 * _3305) + _3272) * _3287))) * _3304;
                                float _4409 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3325 = (_3250 * _3227) * (((_3273 * 3.1415927410125732421875) * (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) / ((_3295 * _3295) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3325 * _3109.x;
                                frontier_phi_73_pred_1 = _3325 * _3109.y;
                                frontier_phi_73_pred_2 = _3251 * _3097.z;
                                frontier_phi_73_pred_3 = _3251 * _3097.y;
                                frontier_phi_73_pred_4 = _3251 * _3097.x;
                                frontier_phi_73_pred_5 = _3325 * _3109.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3329 = frontier_phi_73_pred;
                            _3330 = frontier_phi_73_pred_1;
                            _3334 = frontier_phi_73_pred_2;
                            _3333 = frontier_phi_73_pred_3;
                            _3332 = frontier_phi_73_pred_4;
                            _3331 = frontier_phi_73_pred_5;
                            _3039 = _3332 + _3052;
                            _3040 = _3333 + _3053;
                            _3041 = _3334 + _3054;
                            _3036 = _3329 + _3049;
                            _3037 = _3330 + _3050;
                            _3038 = _3331 + _3051;
                            if (_3056 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3049 = _3036;
                                _3050 = _3037;
                                _3051 = _3038;
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3056;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3039;
                        frontier_phi_67_pred_1 = _3040;
                        frontier_phi_67_pred_2 = _3041;
                        frontier_phi_67_pred_3 = _3038;
                        frontier_phi_67_pred_4 = _3037;
                        frontier_phi_67_pred_5 = _3036;
                    }
                    _2704 = frontier_phi_67_pred;
                    _2706 = frontier_phi_67_pred_1;
                    _2708 = frontier_phi_67_pred_2;
                    _2702 = frontier_phi_67_pred_3;
                    _2700 = frontier_phi_67_pred_4;
                    _2698 = frontier_phi_67_pred_5;
                    uint _2843 = _2842 + 1u;
                    if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2836 = _2698;
                        _2837 = _2700;
                        _2838 = _2702;
                        _2839 = _2704;
                        _2840 = _2706;
                        _2841 = _2708;
                        _2842 = _2843;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2706;
                frontier_phi_55_56_ladder_1 = _2708;
                frontier_phi_55_56_ladder_2 = _2704;
                frontier_phi_55_56_ladder_3 = _2702;
                frontier_phi_55_56_ladder_4 = _2700;
                frontier_phi_55_56_ladder_5 = _2698;
            }
            else
            {
                frontier_phi_55_56_ladder = _2592;
                frontier_phi_55_56_ladder_1 = _2594;
                frontier_phi_55_56_ladder_2 = _2590;
                frontier_phi_55_56_ladder_3 = _2588;
                frontier_phi_55_56_ladder_4 = _2586;
                frontier_phi_55_56_ladder_5 = _2584;
            }
            _2697 = frontier_phi_55_56_ladder_5;
            _2699 = frontier_phi_55_56_ladder_4;
            _2701 = frontier_phi_55_56_ladder_3;
            _2703 = frontier_phi_55_56_ladder_2;
            _2705 = frontier_phi_55_56_ladder;
            _2707 = frontier_phi_55_56_ladder_1;
        }
        float _2712 = isnan(1.0) ? _784 : (isnan(_784) ? 1.0 : min(_784, 1.0));
        _2496 = (_2712 * _2703) + _1951;
        _2498 = (_2712 * _2705) + _1953;
        _2500 = (_2712 * _2707) + _1955;
        _2502 = ((_2697 * 0.039999999105930328369140625) * _2712) + _2281;
        _2504 = ((_2699 * 0.039999999105930328369140625) * _2712) + _2283;
        _2506 = ((_2701 * 0.039999999105930328369140625) * _2712) + _2285;
    }
    else
    {
        _2496 = _1951;
        _2498 = _1953;
        _2500 = _1955;
        _2502 = _2281;
        _2504 = _2283;
        _2506 = _2285;
    }
    float _4425 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4436 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4447 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    uint _2526 = _263 + 6u;
    float _2534 = _718 / cbSceneParam._m0[86u].x;
    float _2535 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2549 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2551 = _2549.x;
    float _2552 = _2549.y;
    float _2553 = _2549.z;
    float _2554 = _2549.w;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2609 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2610 = _2609 / _653;
        float _2621 = _2610 * _703;
        float _2622 = _704 * _2610;
        float _2623 = (-0.0) - _2622;
        float _2625 = _2610 * _705;
        float _2627 = (cbSceneParam._m0[77u].w * _2623) / _2609;
        float _2628 = _2627 + cbSceneParam._m0[79u].w;
        float _2629 = cbSceneParam._m0[79u].w - _2622;
        float _2635 = sqrt(((_2621 * _2621) + (_2622 * _2622)) + (_2625 * _2625));
        float _2638 = (1.0 - (cbSceneParam._m0[77u].w / _2609)) * _2635;
        float _2643 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2645 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2798;
        if (abs((_2623 - _2627) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2798 = ((((_2628 > 0.0) ? exp2(_2643 * _2628) : (2.0 - exp2(_2645 * _2628))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2638;
        }
        else
        {
            float _2758 = 1.0 / cbSceneParam._m0[80u].x;
            float _2759 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : max(_2628, _2629));
            float _2760 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : min(_2628, _2629));
            float _2769 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : min(_2759, 0.0));
            float _2770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : min(_2760, 0.0));
            _2798 = ((abs(_2635 / _2623) * cbSceneParam._m0[80u].y) * ((((_2769 - _2770) * 2.0) - ((exp2(_2643 * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0)))) - exp2(_2643 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0))))) * _2758)) - ((exp2(_2645 * _2769) - exp2(_2645 * _2770)) * _2758))) + (_2638 * cbSceneParam._m0[80u].z);
        }
        vec4 _2800 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, 1.0), 0.0);
        float _2809 = exp2((_2798 * (-1.44269502162933349609375)) * (1.0 - _2800.w));
        float _2810 = log2(_2809);
        float _2826 = log2(_2554);
        _2647 = (exp2(_2826 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].x)) * _2800.x) / cbSceneParam._m0[78u].x)) + _2551;
        _2649 = (exp2(_2826 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].y)) * _2800.y) / cbSceneParam._m0[78u].y)) + _2552;
        _2651 = (exp2(_2826 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].z)) * _2800.z) / cbSceneParam._m0[78u].z)) + _2553;
        _2653 = _2809 * _2554;
    }
    else
    {
        _2647 = _2551;
        _2649 = _2552;
        _2651 = _2553;
        _2653 = _2554;
    }
    float _2665 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2666 = _2665 == 3.0;
    float _2667 = log2(_2653);
    float _2674 = exp2(_2667 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2496 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _784))) + ((_2502 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1589)) * cbPerFrame._m0[3u].x));
    float _2675 = exp2(_2667 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_2498 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _784))) + ((_2504 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1589)) * cbPerFrame._m0[3u].x));
    float _2676 = exp2(_2667 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_2500 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _784))) + ((_2506 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1589)) * cbPerFrame._m0[3u].x));
    float _2685 = (_2665 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2685 * (_2666 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2647)));
    SV_Target.y = _2685 * (_2666 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2649)));
    SV_Target.z = _2685 * (_2666 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2651)));
    SV_Target.w = cbInstanceData._m0[_2526].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2526].w;
}


