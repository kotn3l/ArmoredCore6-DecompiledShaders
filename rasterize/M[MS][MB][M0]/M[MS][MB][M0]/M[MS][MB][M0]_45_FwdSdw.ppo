#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _985;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    float _242 = _241 * TEXCOORD.z;
    float _243 = _241 * TEXCOORD.w;
    vec4 _262 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _242) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _243) + cbTextureTilingScale._m0[14u].w));
    vec4 _309 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _313 = _309.z;
    float _318 = (_309.x * 2.0) + (-1.0);
    float _320 = (_309.y * 2.0) + (-1.0);
    float _321 = dot(vec2(_318, _320), vec2(_318, _320));
    float _3576 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _327 = sqrt(1.0 - (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))));
    float _330 = fma(_327, _210, fma(_320, _217, _318 * _203));
    float _333 = fma(_327, _211, fma(_320, _218, _318 * _204));
    float _336 = fma(_327, _212, fma(_320, _219, _318 * _205));
    float _340 = inversesqrt(dot(vec3(_330, _333, _336), vec3(_330, _333, _336)));
    vec4 _376 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _242) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _243) + cbTextureTilingScale._m0[11u].w));
    float _378 = _376.x;
    float _379 = 1.0 - _378;
    float _388 = (cbMtdParam._m0[19u].x + dot(vec4(_340 * _330, _340 * _333, _340 * _336, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_378 - _379) * cbMtdParam._m0[24u].z) + _379) * cbMtdParam._m0[21u].z);
    float _3587 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _396 = (_389 * ((_289.x * cbMtdParam._m0[18u].x) - _268)) + _268;
    float _397 = (_389 * ((_289.y * cbMtdParam._m0[18u].y) - _269)) + _269;
    float _398 = (_389 * ((_289.z * cbMtdParam._m0[18u].z) - _270)) + _270;
    vec4 _411 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _242) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _243) + cbTextureTilingScale._m0[15u].w));
    float _418 = (_411.x * 2.0) + (-1.0);
    float _419 = (_411.y * 2.0) + (-1.0);
    float _420 = dot(vec2(_418, _419), vec2(_418, _419));
    float _3598 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _428 = ((_411.z - _313) * _389) + _313;
    float _438 = ((sqrt(1.0 - (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) - _327) * _389) + _327;
    float _441 = (((_418 - _318) * _389) + _318) + (cbMtdParam._m0[21u].x * _318);
    float _442 = (((_419 - _320) * _389) + _320) + (cbMtdParam._m0[21u].x * _320);
    float _447 = cbMtdParam._m0[22u].x + _309.w;
    float _450 = fma(_438, _210, fma(_442, _217, _441 * _203));
    float _453 = fma(_438, _211, fma(_442, _218, _441 * _204));
    float _456 = fma(_438, _212, fma(_442, _219, _441 * _205));
    float _460 = inversesqrt(dot(vec3(_450, _453, _456), vec3(_450, _453, _456)));
    float _461 = _460 * _450;
    float _462 = _460 * _453;
    float _463 = _460 * _456;
    float _3609 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _464 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _3620 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3631 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _3642 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _3653 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _482 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _533 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _523);
    float _534 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _523);
    float _535 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _523);
    float _539 = inversesqrt(dot(vec3(_533, _534, _535), vec3(_533, _534, _535)));
    float _540 = _533 * _539;
    float _541 = _534 * _539;
    float _542 = _535 * _539;
    float _548 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _549 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _570 = fma(_463, cbSceneParam._m0[5u].z, fma(_462, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _461));
    float _573 = fma(_463, cbSceneParam._m0[6u].z, fma(_462, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _461));
    float _576 = fma(_463, cbSceneParam._m0[7u].z, fma(_462, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _461));
    uint _590 = (_222 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _596 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * cbInstanceData._m0[_590].x;
    float _597 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0)))) * cbInstanceData._m0[_590].y;
    float _598 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0)))) * cbInstanceData._m0[_590].z;
    float _3664 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _3675 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    vec4 _610 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _548, cbSceneParam._m0[86u].y * _549));
    float _614 = ((isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * TEXCOORD_5.w) * _610.x;
    float _615 = dot(vec3(_461, _462, _463), vec3(_540, _541, _542));
    float _618 = _615 * 2.0;
    float _622 = (_618 * _461) - _540;
    float _623 = (_618 * _462) - _541;
    float _624 = (_618 * _463) - _542;
    float _628 = abs(dot(vec3(_540, _541, _542), vec3(_461, _462, _463)));
    float _3697 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _630 = sqrt(_464);
    float _643 = exp2((_630 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_630 * 3.0));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _984;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _709 = fma(_683, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _675));
        float _713 = fma(_683, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _675));
        float _717 = fma(_683, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _675));
        float _742 = _675 + _461;
        float _743 = _679 + _462;
        float _744 = _683 + _463;
        float _754 = fma(_744, cbModelParam._m0[26u].z, fma(_743, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742)) - _709;
        float _755 = fma(_744, cbModelParam._m0[27u].z, fma(_743, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742)) - _713;
        float _756 = fma(_744, cbModelParam._m0[28u].z, fma(_743, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742)) - _717;
        float _760 = inversesqrt(dot(vec3(_754, _755, _756), vec3(_754, _755, _756)));
        float _773 = ((_760 * _754) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_709 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _774 = ((_760 * _755) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_713 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _775 = ((_760 * _756) / cbModelParam._m0[34u].z) + ((((((_717 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _778 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_773, _774, _775), 0.0);
        float _812 = exp2((_778.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_778.x + (-0.5));
        float _814 = _812 * (_778.y + (-0.5));
        float _815 = _812 * (_778.z + (-0.5));
        float _822 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_785.x + (-0.5));
        float _824 = _822 * (_785.y + (-0.5));
        float _825 = _822 * (_785.z + (-0.5));
        float _832 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_792.x + (-0.5));
        float _834 = _832 * (_792.y + (-0.5));
        float _835 = _832 * (_792.z + (-0.5));
        float _842 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_799.x + (-0.5));
        float _844 = _842 * (_799.y + (-0.5));
        float _845 = _842 * (_799.z + (-0.5));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = _813 * 0.5;
        float _850 = _823 * 0.5;
        float _851 = _833 * 0.5;
        float _852 = dot(vec3(_849, _850, _851), vec3(_849, _850, _851));
        float _857 = (_852 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_852);
        float _866 = (dot(vec3(_461, _462, _463), vec3(_857 * _849, _857 * _850, _857 * _851)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _876 = sqrt(((_850 * _850) + (_849 * _849)) + (_851 * _851)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3745 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_878 + 1.0))) + _883) * _846;
        float _893 = _814 * 0.5;
        float _894 = _824 * 0.5;
        float _895 = _834 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _909 = (dot(vec3(_461, _462, _463), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _918 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _3778 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_920 + 1.0))) + _925) * _847;
        float _935 = _815 * 0.5;
        float _936 = _825 * 0.5;
        float _937 = _835 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(_461, _462, _463), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3789 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3800 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3811 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * (_962 + 1.0))) + _967) * _848;
        _984 = _815;
        _986 = _814;
        _987 = _813;
        _988 = _825;
        _989 = _824;
        _990 = _823;
        _991 = _835;
        _992 = _834;
        _993 = _833;
        _994 = _848;
        _995 = _847;
        _996 = _846;
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
    }
    else
    {
        _984 = _985;
        _986 = _985;
        _987 = _985;
        _988 = _985;
        _989 = _985;
        _990 = _985;
        _991 = _985;
        _992 = _985;
        _993 = _985;
        _994 = _985;
        _995 = _985;
        _996 = _985;
        _997 = 0.0;
        _998 = 0.0;
        _999 = 0.0;
    }
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1024 = fma(_683, cbModelParam._m0[30u].z, fma(_679, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _675));
        float _1028 = fma(_683, cbModelParam._m0[31u].z, fma(_679, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _675));
        float _1032 = fma(_683, cbModelParam._m0[32u].z, fma(_679, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _675));
        float _1055 = _675 + _461;
        float _1056 = _679 + _462;
        float _1057 = _683 + _463;
        float _1067 = fma(_1057, cbModelParam._m0[30u].z, fma(_1056, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055)) - _1024;
        float _1068 = fma(_1057, cbModelParam._m0[31u].z, fma(_1056, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055)) - _1028;
        float _1069 = fma(_1057, cbModelParam._m0[32u].z, fma(_1056, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055)) - _1032;
        float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
        float _1086 = ((_1073 * _1067) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1024 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1073 * _1068) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1028 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1073 * _1069) / cbModelParam._m0[35u].z) + ((((((_1032 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        float _1123 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1090.x + (-0.5));
        float _1125 = _1123 * (_1090.y + (-0.5));
        float _1126 = _1123 * (_1090.z + (-0.5));
        float _1133 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1097.x + (-0.5));
        float _1135 = _1133 * (_1097.y + (-0.5));
        float _1136 = _1133 * (_1097.z + (-0.5));
        float _1143 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1104.x + (-0.5));
        float _1145 = _1143 * (_1104.y + (-0.5));
        float _1146 = _1143 * (_1104.z + (-0.5));
        float _1153 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1111.x + (-0.5));
        float _1155 = _1153 * (_1111.y + (-0.5));
        float _1156 = _1153 * (_1111.z + (-0.5));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = _1124 * 0.5;
        float _1161 = _1134 * 0.5;
        float _1162 = _1144 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_461, _462, _463), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3874 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1187 + 1.0))) + _1192) * _1157;
        float _1202 = _1125 * 0.5;
        float _1203 = _1135 * 0.5;
        float _1204 = _1145 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_461, _462, _463), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3907 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1229 + 1.0))) + _1234) * _1158;
        float _1244 = _1126 * 0.5;
        float _1245 = _1136 * 0.5;
        float _1246 = _1146 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_461, _462, _463), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3918 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3929 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3940 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1271 + 1.0))) + _1276) * _1159;
        _1293 = _1126;
        _1294 = _1125;
        _1295 = _1124;
        _1296 = _1136;
        _1297 = _1135;
        _1298 = _1134;
        _1299 = _1146;
        _1300 = _1145;
        _1301 = _1144;
        _1302 = _1159;
        _1303 = _1158;
        _1304 = _1157;
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1306 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
    }
    else
    {
        _1293 = _985;
        _1294 = _985;
        _1295 = _985;
        _1296 = _985;
        _1297 = _985;
        _1298 = _985;
        _1299 = _985;
        _1300 = _985;
        _1301 = _985;
        _1302 = _985;
        _1303 = _985;
        _1304 = _985;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _997)) + _997;
    float _1318 = (cbModelParam._m0[1u].x * (_1306 - _998)) + _998;
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _999)) + _999;
    float _1340 = fma(_1319, cbSceneParam._m0[89u].z, fma(_1318, cbSceneParam._m0[89u].y, _1317 * cbSceneParam._m0[89u].x));
    float _1343 = fma(_1319, cbSceneParam._m0[90u].z, fma(_1318, cbSceneParam._m0[90u].y, _1317 * cbSceneParam._m0[90u].x));
    float _1346 = fma(_1319, cbSceneParam._m0[91u].z, fma(_1318, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1317));
    float _1361 = _622 * 0.5;
    float _1362 = _623 * 0.5;
    float _1363 = _624 * 0.5;
    float _1364 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1367 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1294, _1297, _1300, _1303));
    float _1370 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1404;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1377 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_984, _988, _991, _994));
        float _1381 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_986, _989, _992, _995));
        float _1385 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_987, _990, _993, _996));
        float _1392 = dot(vec4(cbModelParam._m0[39u]), vec4(_1361, _1362, _1363, 1.0));
        _1404 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1404 = 1.0;
    }
    float _1415;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1406 = dot(vec4(cbModelParam._m0[40u]), vec4(_1361, _1362, _1363, 1.0));
        _1415 = dot(vec3(isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1415 = 1.0;
    }
    float _1419 = (_1415 * cbModelParam._m0[1u].x) + (_1404 * (1.0 - cbModelParam._m0[1u].x));
    float _1429 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _464);
    float _1430 = isnan(_1429) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1429 : min(cbModelParam._m0[25u].z, _1429));
    float _1510;
    float _1512;
    float _1514;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1477 = fma(_683, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675)) + cbModelParam._m0[13u].w;
        float _1481 = fma(_683, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675)) + cbModelParam._m0[14u].w;
        float _1485 = fma(_683, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675)) + cbModelParam._m0[15u].w;
        float _1488 = fma(_624, cbModelParam._m0[13u].z, fma(_623, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _622));
        float _1491 = fma(_624, cbModelParam._m0[14u].z, fma(_623, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _622));
        float _1494 = fma(_624, cbModelParam._m0[15u].z, fma(_623, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _622));
        float _1522;
        if (_1488 > 0.0)
        {
            _1522 = abs((1.0 - _1477) / _1488);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1477 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1522 = frontier_phi_14_12_ladder;
        }
        float _1692;
        if (_1491 > 0.0)
        {
            _1692 = abs((1.0 - _1481) / _1491);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1481 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1692 = frontier_phi_23_19_ladder;
        }
        float _1988;
        if (_1494 > 0.0)
        {
            _1988 = abs((1.0 - _1485) / _1494);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1485 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1988 = frontier_phi_35_30_ladder;
        }
        float _1990 = isnan(_1692) ? _1522 : (isnan(_1522) ? _1692 : min(_1522, _1692));
        float _1991 = isnan(_1988) ? _1990 : (isnan(_1990) ? _1988 : min(_1990, _1988));
        float _1995 = (_1991 * _1488) + _1477;
        float _1996 = (_1991 * _1491) + _1481;
        float _1997 = (_1991 * _1494) + _1485;
        float _1998 = _1991 * 9.9999997473787516355514526367188e-05;
        float _2000 = (-1.0) - _1998;
        float _2002 = _1998 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1997 > _2002) || ((_1997 < _2000) || ((_1996 > _2002) || ((_1996 < _2000) || ((_1995 < _2000) || (_1995 > _2002))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2142 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1997, cbModelParam._m0[9u].z, fma(_1996, cbModelParam._m0[9u].y, _1995 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1997, cbModelParam._m0[10u].z, fma(_1996, cbModelParam._m0[10u].y, _1995 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1997, cbModelParam._m0[11u].z, fma(_1996, cbModelParam._m0[11u].y, _1995 * cbModelParam._m0[11u].x))), _1430);
            frontier_phi_13_35_ladder = _2142.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2142.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2142.x * cbModelParam._m0[1u].y;
        }
        _1510 = frontier_phi_13_35_ladder_2;
        _1512 = frontier_phi_13_35_ladder_1;
        _1514 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_622, _623, _624), _1430);
        _1510 = _1498.x * cbModelParam._m0[1u].y;
        _1512 = _1498.y * cbModelParam._m0[1u].y;
        _1514 = _1498.z * cbModelParam._m0[1u].y;
    }
    float _1518 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _464);
    float _1519 = isnan(_1518) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1518 : min(cbModelParam._m0[25u].w, _1518));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1572 = fma(_683, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675)) + cbModelParam._m0[21u].w;
        float _1576 = fma(_683, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675)) + cbModelParam._m0[22u].w;
        float _1580 = fma(_683, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675)) + cbModelParam._m0[23u].w;
        float _1583 = fma(_624, cbModelParam._m0[21u].z, fma(_623, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _622));
        float _1586 = fma(_624, cbModelParam._m0[22u].z, fma(_623, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _622));
        float _1589 = fma(_624, cbModelParam._m0[23u].z, fma(_623, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _622));
        float _1697;
        if (_1583 > 0.0)
        {
            _1697 = abs((1.0 - _1572) / _1583);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1572 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1697 = frontier_phi_25_21_ladder;
        }
        float _2015;
        if (_1586 > 0.0)
        {
            _2015 = abs((1.0 - _1576) / _1586);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1576 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2015 = frontier_phi_37_32_ladder;
        }
        float _2342;
        if (_1589 > 0.0)
        {
            _2342 = abs((1.0 - _1580) / _1589);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1580 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2342 = frontier_phi_47_44_ladder;
        }
        float _2344 = isnan(_2015) ? _1697 : (isnan(_1697) ? _2015 : min(_1697, _2015));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1583) + _1572;
        float _2350 = (_2345 * _1586) + _1576;
        float _2351 = (_2345 * _1589) + _1580;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2353 = (-1.0) - _2352;
        float _2355 = _2352 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2351 > _2355) || ((_2351 < _2353) || ((_2350 > _2355) || ((_2350 < _2353) || ((_2349 < _2353) || (_2349 > _2355))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2469 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2351, cbModelParam._m0[17u].z, fma(_2350, cbModelParam._m0[17u].y, _2349 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2351, cbModelParam._m0[18u].z, fma(_2350, cbModelParam._m0[18u].y, _2349 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2351, cbModelParam._m0[19u].z, fma(_2350, cbModelParam._m0[19u].y, _2349 * cbModelParam._m0[19u].x))), _1519);
            frontier_phi_22_47_ladder = _2469.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2469.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2469.x * cbModelParam._m0[1u].z;
        }
        _1608 = frontier_phi_22_47_ladder_2;
        _1610 = frontier_phi_22_47_ladder_1;
        _1612 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_622, _623, _624), _1519);
        _1608 = _1592.x * cbModelParam._m0[1u].z;
        _1610 = _1592.y * cbModelParam._m0[1u].z;
        _1612 = _1592.z * cbModelParam._m0[1u].z;
    }
    float _1624 = ((((1.0 - _643) * ((_630 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_643 * _630)) * _614;
    float _1625 = _1624 * ((cbModelParam._m0[1u].w * (_1608 - _1510)) + _1510);
    float _1626 = _1624 * ((cbModelParam._m0[1u].w * (_1610 - _1512)) + _1512);
    float _1627 = _1624 * ((cbModelParam._m0[1u].w * (_1612 - _1514)) + _1514);
    float _1630 = fma(_1627, cbSceneParam._m0[89u].z, fma(_1626, cbSceneParam._m0[89u].y, _1625 * cbSceneParam._m0[89u].x));
    float _1633 = fma(_1627, cbSceneParam._m0[90u].z, fma(_1626, cbSceneParam._m0[90u].y, _1625 * cbSceneParam._m0[90u].x));
    float _1636 = fma(_1627, cbSceneParam._m0[91u].z, fma(_1626, cbSceneParam._m0[91u].y, _1625 * cbSceneParam._m0[91u].x));
    float _1671 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1675 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1679 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1683 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1684 = _1671 / _1683;
    float _1685 = _1675 / _1683;
    float _1686 = _1679 / _1683;
    float _1833;
    float _1834;
    float _1835;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1713 = ((uint(_1686 > cbSceneParam._m0[59u].y) + uint(_1686 > cbSceneParam._m0[59u].x)) + uint(_1686 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1714 = _1713 + 43u;
        uint _1722 = _1713 + 44u;
        uint _1730 = _1713 + 45u;
        uint _1738 = _1713 + 46u;
        float _1749 = fma(_1683, cbSceneParam._m0[_1714].w, fma(_1679, cbSceneParam._m0[_1714].z, fma(_1675, cbSceneParam._m0[_1714].y, _1671 * cbSceneParam._m0[_1714].x)));
        float _1753 = fma(_1683, cbSceneParam._m0[_1722].w, fma(_1679, cbSceneParam._m0[_1722].z, fma(_1675, cbSceneParam._m0[_1722].y, _1671 * cbSceneParam._m0[_1722].x)));
        float _1761 = fma(_1683, cbSceneParam._m0[_1738].w, fma(_1679, cbSceneParam._m0[_1738].z, fma(_1675, cbSceneParam._m0[_1738].y, _1671 * cbSceneParam._m0[_1738].x)));
        float _1766 = cbSceneParam._m0[33u].z * _1761;
        float _1768 = cbSceneParam._m0[33u].w * _1761;
        float _1771 = fma(_1683, cbSceneParam._m0[_1730].w, fma(_1679, cbSceneParam._m0[_1730].z, fma(_1675, cbSceneParam._m0[_1730].y, _1671 * cbSceneParam._m0[_1730].x))) / _1761;
        float _1819 = (cbSceneParam._m0[33u].x - sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686))) * cbSceneParam._m0[33u].y;
        float _4066 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1826 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1766 + _1749) / _1761, (_1768 + _1753) / _1761), _1771), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 + _1749) / _1761, (_1753 - _1766) / _1761), _1771), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1749 - _1766) / _1761, (_1753 - _1768) / _1761), _1771), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1749 - _1768) / _1761, (_1766 + _1753) / _1761), _1771), 0.0)).x), vec4(0.25)));
        _1833 = 1.0 - (_1826 * cbSceneParam._m0[34u].x);
        _1834 = 1.0 - (_1826 * cbSceneParam._m0[34u].y);
        _1835 = 1.0 - (_1826 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1833 = 1.0;
        _1834 = 1.0;
        _1835 = 1.0;
    }
    float _1899;
    float _1901;
    float _1903;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1887 = fma(_1683, cbSceneParam._m0[63u].w, fma(_1679, cbSceneParam._m0[63u].z, fma(_1675, cbSceneParam._m0[63u].y, _1671 * cbSceneParam._m0[63u].x)));
        float _1888 = fma(_1683, cbSceneParam._m0[60u].w, fma(_1679, cbSceneParam._m0[60u].z, fma(_1675, cbSceneParam._m0[60u].y, _1671 * cbSceneParam._m0[60u].x))) / _1887;
        float _1889 = fma(_1683, cbSceneParam._m0[61u].w, fma(_1679, cbSceneParam._m0[61u].z, fma(_1675, cbSceneParam._m0[61u].y, _1671 * cbSceneParam._m0[61u].x))) / _1887;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1888 >= cbSceneParam._m0[64u].x) && (_1889 >= cbSceneParam._m0[64u].y)) && (_1888 <= cbSceneParam._m0[64u].z)) && (_1889 <= cbSceneParam._m0[64u].w))
        {
            float _2028 = fma(_1683, cbSceneParam._m0[62u].w, fma(_1679, cbSceneParam._m0[62u].z, fma(_1675, cbSceneParam._m0[62u].y, _1671 * cbSceneParam._m0[62u].x))) / _1887;
            float _2032 = isnan(cbSceneParam._m0[41u].w) ? _2028 : (isnan(_2028) ? cbSceneParam._m0[41u].w : max(_2028, cbSceneParam._m0[41u].w));
            float _2075 = (cbSceneParam._m0[33u].x - sqrt(((_1685 * _1685) + (_1684 * _1684)) + (_1686 * _1686))) * cbSceneParam._m0[33u].y;
            float _4082 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
            float _2082 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1888, cbSceneParam._m0[33u].w + _1889), _2032), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1888, _1889 - cbSceneParam._m0[33u].z), _2032), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1888 - cbSceneParam._m0[33u].z, _1889 - cbSceneParam._m0[33u].w), _2032), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1888 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1889), _2032), 0.0)).x), vec4(0.25)));
            float _2086 = 1.0 - (_2082 * cbSceneParam._m0[34u].x);
            float _2087 = 1.0 - (_2082 * cbSceneParam._m0[34u].y);
            float _2088 = 1.0 - (_2082 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2088) ? _1835 : (isnan(_1835) ? _2088 : min(_1835, _2088));
            frontier_phi_34_33_ladder_1 = isnan(_2087) ? _1834 : (isnan(_1834) ? _2087 : min(_1834, _2087));
            frontier_phi_34_33_ladder_2 = isnan(_2086) ? _1833 : (isnan(_1833) ? _2086 : min(_1833, _2086));
        }
        else
        {
            frontier_phi_34_33_ladder = _1835;
            frontier_phi_34_33_ladder_1 = _1834;
            frontier_phi_34_33_ladder_2 = _1833;
        }
        _1899 = frontier_phi_34_33_ladder_2;
        _1901 = frontier_phi_34_33_ladder_1;
        _1903 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1899 = _1833;
        _1901 = _1834;
        _1903 = _1835;
    }
    uvec4 _1908 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1910 = _1908.x * 14u;
    uint _1911 = _1910 + 13u;
    float _1918 = _614 + (-1.0);
    float _1923 = (cbLight._m0[_1911].x * _1918) + 1.0;
    float _1924 = (cbLight._m0[_1911].y * _1918) + 1.0;
    float _1925 = (cbLight._m0[_1911].z * _1918) + 1.0;
    float _1926 = (cbLight._m0[_1911].w * _1918) + 1.0;
    uint _1927 = _1910 + 5u;
    float _1933 = isnan(1.0) ? _1924 : (isnan(_1924) ? 1.0 : min(_1924, 1.0));
    uint _1937 = _1910 + 4u;
    float _1947 = isnan(1.0) ? _1923 : (isnan(_1923) ? 1.0 : min(_1923, 1.0));
    uint _1951 = _1910 | 1u;
    float _1962 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_461, _462, _463));
    float _1965 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_461, _462, _463));
    float _4118 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _4129 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1970 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * 0.3183098733425140380859375;
    float _1972 = (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * 0.3183098733425140380859375;
    float _1979 = ((cbLight._m0[_1927].x * _1933) * _1972) + (((cbLight._m0[_1937].x * _1899) * _1947) * _1970);
    float _1980 = ((_1933 * cbLight._m0[_1927].y) * _1972) + (((cbLight._m0[_1937].y * _1901) * _1947) * _1970);
    float _1981 = ((_1933 * cbLight._m0[_1927].z) * _1972) + (((cbLight._m0[_1937].z * _1903) * _1947) * _1970);
    uvec4 _1985 = floatBitsToUint(cbLight._m0[_1910 + 12u]);
    bool _1987 = _1985.x == 0u;
    float _2089;
    float _2091;
    float _2093;
    if (_1987)
    {
        _2089 = _1979;
        _2091 = _1980;
        _2093 = _1981;
    }
    else
    {
        uint _2097 = _1910 + 6u;
        float _2113 = (dot(vec3(cbLight._m0[_1910 + 2u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _2114 = _2113 * _2113;
        float _4140 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2115 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2116 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _2089 = (((cbLight._m0[_2097].x * 0.3183098733425140380859375) * _2115) * _2116) + _1979;
        _2091 = (((cbLight._m0[_2097].y * 0.3183098733425140380859375) * _2115) * _2116) + _1980;
        _2093 = (((cbLight._m0[_2097].z * 0.3183098733425140380859375) * _2115) * _2116) + _1981;
    }
    bool _2096 = _1985.y == 0u;
    float _2151;
    float _2153;
    float _2155;
    if (_2096)
    {
        _2151 = _2089;
        _2153 = _2091;
        _2155 = _2093;
    }
    else
    {
        uint _2313 = _1910 + 7u;
        float _2329 = (dot(vec3(cbLight._m0[_1910 + 3u].xyz), vec3(_461, _462, _463)) * 0.5) + 0.5;
        float _2330 = _2329 * _2329;
        float _4156 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2331 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _2332 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _2151 = (((cbLight._m0[_2313].x * 0.3183098733425140380859375) * _2331) * _2332) + _2089;
        _2153 = (((cbLight._m0[_2313].y * 0.3183098733425140380859375) * _2331) * _2332) + _2091;
        _2155 = (((cbLight._m0[_2313].z * 0.3183098733425140380859375) * _2331) * _2332) + _2093;
    }
    uint _2158 = _1910 + 8u;
    float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _464) * 0.949999988079071044921875);
    float _2172 = _2171 * _2171;
    float _2173 = cbLight._m0[_1910].x + _540;
    float _2174 = cbLight._m0[_1910].y + _541;
    float _2175 = cbLight._m0[_1910].z + _542;
    float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
    float _2180 = _2179 * _2173;
    float _2181 = _2179 * _2174;
    float _2182 = _2179 * _2175;
    float _2183 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1910].xyz));
    float _4172 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _4183 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _2187 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2188 = dot(vec3(_461, _462, _463), vec3(_2180, _2181, _2182));
    float _4194 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2192 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_2180, _2181, _2182));
    float _4205 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2196 = _2172 * _2172;
    float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
    float _2211 = (exp2(log2(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2212 = 1.0 - _2172;
    float _2223 = (0.5 / (((_2187 * ((_2186 * _2212) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_2187 * _2212) + _2172) * _2186))) * _2186;
    float _4216 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2225 = (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
    uint _2239 = _1910 + 9u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1951].w)) * _464) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_1951].x + _540;
    float _2253 = cbLight._m0[_1951].y + _541;
    float _2254 = cbLight._m0[_1951].z + _542;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_1951].xyz));
    float _4227 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _2266 = dot(vec3(_461, _462, _463), vec3(_2259, _2260, _2261));
    float _4238 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2269 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _2270 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_2259, _2260, _2261));
    float _4249 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2274 = _2251 * _2251;
    float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
    float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2288 = 1.0 - _2251;
    float _2298 = (0.5 / (((_2187 * ((_2265 * _2288) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2187 * _2288) + _2251) * _2265))) * _2265;
    float _4260 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
    float _2310 = (((_2287 * cbLight._m0[_2239].x) * _2300) * _1933) + ((((cbLight._m0[_2158].x * _1899) * _2211) * _2225) * _1947);
    float _2311 = (((_2287 * cbLight._m0[_2239].y) * _2300) * _1933) + ((((cbLight._m0[_2158].y * _1901) * _2211) * _2225) * _1947);
    float _2312 = (((_2287 * cbLight._m0[_2239].z) * _2300) * _1933) + ((((cbLight._m0[_2158].z * _1903) * _2211) * _2225) * _1947);
    float _2368;
    float _2370;
    float _2372;
    if (_1987)
    {
        _2368 = _2310;
        _2370 = _2311;
        _2372 = _2312;
    }
    else
    {
        uint _2374 = _1910 + 2u;
        uint _2378 = _1910 + 10u;
        float _2392 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2374].w)) * _464) * 0.949999988079071044921875);
        float _2393 = _2392 * _2392;
        float _2394 = cbLight._m0[_2374].x + _540;
        float _2395 = cbLight._m0[_2374].y + _541;
        float _2396 = cbLight._m0[_2374].z + _542;
        float _2400 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
        float _2401 = _2400 * _2394;
        float _2402 = _2400 * _2395;
        float _2403 = _2400 * _2396;
        float _2404 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2374].xyz));
        float _4271 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2407 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2408 = dot(vec3(_461, _462, _463), vec3(_2401, _2402, _2403));
        float _4282 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2412 = dot(vec3(cbLight._m0[_2374].xyz), vec3(_2401, _2402, _2403));
        float _4293 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2416 = _2393 * _2393;
        float _2420 = ((_2411 * _2411) * (_2416 + (-1.0))) + 1.0;
        float _2429 = (exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2430 = 1.0 - _2393;
        float _2440 = (0.5 / (((_2187 * ((_2407 * _2430) + _2393)) + 9.9999999392252902907785028219223e-09) + (((_2187 * _2430) + _2393) * _2407))) * _2407;
        float _4304 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2442 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2416 / ((_2420 * _2420) * 3.141590118408203125));
        float _2443 = isnan(1.0) ? _1925 : (isnan(_1925) ? 1.0 : min(_1925, 1.0));
        _2368 = (((_2429 * cbLight._m0[_2378].x) * _2442) * _2443) + _2310;
        _2370 = (((_2429 * cbLight._m0[_2378].y) * _2442) * _2443) + _2311;
        _2372 = (((_2429 * cbLight._m0[_2378].z) * _2442) * _2443) + _2312;
    }
    float _2474;
    float _2476;
    float _2478;
    if (_2096)
    {
        _2474 = _2368;
        _2476 = _2370;
        _2478 = _2372;
    }
    else
    {
        uint _2485 = _1910 + 3u;
        uint _2489 = _1910 + 11u;
        float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2485].w)) * _464) * 0.949999988079071044921875);
        float _2504 = _2503 * _2503;
        float _2505 = cbLight._m0[_2485].x + _540;
        float _2506 = cbLight._m0[_2485].y + _541;
        float _2507 = cbLight._m0[_2485].z + _542;
        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
        float _2512 = _2511 * _2505;
        float _2513 = _2511 * _2506;
        float _2514 = _2511 * _2507;
        float _2515 = dot(vec3(_461, _462, _463), vec3(cbLight._m0[_2485].xyz));
        float _4320 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _2519 = dot(vec3(_461, _462, _463), vec3(_2512, _2513, _2514));
        float _4331 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _2523 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_2512, _2513, _2514));
        float _4342 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2527 = _2504 * _2504;
        float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
        float _2540 = (exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2541 = 1.0 - _2504;
        float _2551 = (0.5 / (((_2187 * ((_2518 * _2541) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2187 * _2541) + _2504) * _2518))) * _2518;
        float _4353 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2553 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
        float _2554 = isnan(1.0) ? _1926 : (isnan(_1926) ? 1.0 : min(_1926, 1.0));
        _2474 = (((_2540 * cbLight._m0[_2489].x) * _2553) * _2554) + _2368;
        _2476 = (((_2540 * cbLight._m0[_2489].y) * _2553) * _2554) + _2370;
        _2478 = (((_2540 * cbLight._m0[_2489].z) * _2553) * _2554) + _2372;
    }
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    float _2630;
    if (_1908.y == 0u)
    {
        uvec4 _2575 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2576 = _2575.x;
        uint _2587 = uint((float(_2575.y) * floor(float(uint(cbSceneParam._m0[85u].y * _549) / _2576))) + floor(float(uint(cbSceneParam._m0[85u].x * _548) / _2576)));
        float _2597 = (log2(_1686 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2598 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        uint _2601 = uint(isnan(14.0) ? _2598 : (isnan(_2598) ? 14.0 : min(_2598, 14.0)));
        uvec4 _2606 = texelFetch(g_lightClusterGridBuffer, int(((_2601 << 2u) + (_2587 << 6u)) >> 2u));
        uint _2607 = _2606.x;
        uint _2608 = _2575.z;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        if (((((1u << ((_2608 >> 4u) & 15u)) + 4294967295u) & _2607) == 0u) || ((_2608 & 240u) == 0u))
        {
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
        }
        else
        {
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            uint _2838 = 0u;
            uint _2847;
            bool _2848;
            for (;;)
            {
                _2847 = texelFetch(g_lightClassification, int((((_2601 << 5u) + (_2587 << 9u)) + (_2838 << 2u)) >> 2u)).x;
                _2848 = _2847 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2848)
                {
                    frontier_phi_66_pred = _2837;
                    frontier_phi_66_pred_1 = _2836;
                    frontier_phi_66_pred_2 = _2835;
                    frontier_phi_66_pred_3 = _2834;
                    frontier_phi_66_pred_4 = _2833;
                    frontier_phi_66_pred_5 = _2832;
                }
                else
                {
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    float _2961;
                    uint _2962;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2836;
                    _2961 = _2837;
                    _2962 = _2847;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    for (;;)
                    {
                        uint _2966 = uint(findLSB(_2962)) + (_2838 << 5u);
                        uint _2963 = (_2962 + 4294967295u) & _2962;
                        uint _2968 = _2966 * 48u;
                        vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 3u)).x));
                        uint _2988 = (_2966 * 48u) + 4u;
                        vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 3u)).x));
                        uint _3007 = (_2966 * 48u) + 8u;
                        vec3 _3018 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3007)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3007 + 2u)).x));
                        float _3022 = _2982.x - _1684;
                        float _3023 = _2982.y - _1685;
                        float _3024 = _2982.z - _1686;
                        float _3025 = dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024));
                        float _3028 = inversesqrt(_3025);
                        float _3029 = _3028 * _3022;
                        float _3030 = _3028 * _3023;
                        float _3031 = _3028 * _3024;
                        float _3032 = dot(vec3(_570, _573, _576), vec3(_3029, _3030, _3031));
                        float _3037 = 1.0 - (_3025 * _2982.w);
                        float _4379 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3038 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3039 = sqrt(_3025) * _3001.w;
                        float _3042 = 1.39999997615814208984375 / (_3039 + 1.39999997615814208984375);
                        float _3043 = _3042 * _3042;
                        float _3046 = ((1.0 - _3043) * _3032) + _3043;
                        float _3049 = _3039 * _3039;
                        float _3053 = ((isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0))) * _3038) / ((_3049 * 0.699999988079071044921875) + 1.0);
                        float _3057 = (-0.0) - _1684;
                        float _3058 = (-0.0) - _1685;
                        float _3059 = (-0.0) - _1686;
                        float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
                        float _3064 = _3063 * _3057;
                        float _3065 = _3063 * _3058;
                        float _3066 = _3063 * _3059;
                        float _3073 = exp2(log2(1.0 / ((_3049 * 3.5) + 5.0)) * 0.25);
                        float _3074 = 1.0 - _630;
                        float _3081 = sqrt(1.0 - ((1.0 - (_3074 * _3074)) * (1.0 - (_3073 * _3073))));
                        float _3082 = _3081 * _3081;
                        float _3083 = _3082 * _3082;
                        float _3084 = _3064 + _3029;
                        float _3085 = _3065 + _3030;
                        float _3086 = _3066 + _3031;
                        float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                        float _3094 = dot(vec3(_570, _573, _576), vec3(_3064, _3065, _3066));
                        float _4395 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3097 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3098 = dot(vec3(_570, _573, _576), vec3(_3090 * _3084, _3090 * _3085, _3090 * _3086));
                        float _4406 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3101 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                        float _3105 = ((_3101 * _3101) * (_3083 + (-1.0))) + 1.0;
                        float _3106 = _3042 * _3082;
                        float _3107 = _3106 * _3106;
                        float _3110 = ((1.0 - _3107) * _3032) + _3107;
                        float _4417 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3111 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                        float _3112 = 1.0 - _3082;
                        float _3122 = (0.5 / (((_3111 * ((_3097 * _3112) + _3082)) + 9.9999999392252902907785028219223e-09) + (((_3111 * _3112) + _3082) * _3097))) * _3111;
                        float _4428 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3133 = (((_3083 * 3.1415927410125732421875) * (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) / ((_3105 * _3105) * ((_3049 * 2.1991131305694580078125) + 3.141590118408203125))) * _3038;
                        _2891 = (_3053 * _3001.x) + _2959;
                        _2892 = (_3053 * _3001.y) + _2960;
                        _2893 = (_3053 * _3001.z) + _2961;
                        _2888 = (_3133 * _3018.x) + _2956;
                        _2889 = (_3133 * _3018.y) + _2957;
                        _2890 = (_3133 * _3018.z) + _2958;
                        if (_2963 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2892;
                            _2961 = _2893;
                            _2962 = _2963;
                        }
                    }
                    frontier_phi_66_pred = _2893;
                    frontier_phi_66_pred_1 = _2892;
                    frontier_phi_66_pred_2 = _2891;
                    frontier_phi_66_pred_3 = _2890;
                    frontier_phi_66_pred_4 = _2889;
                    frontier_phi_66_pred_5 = _2888;
                }
                _2698 = frontier_phi_66_pred;
                _2696 = frontier_phi_66_pred_1;
                _2694 = frontier_phi_66_pred_2;
                _2692 = frontier_phi_66_pred_3;
                _2690 = frontier_phi_66_pred_4;
                _2688 = frontier_phi_66_pred_5;
                uint _2839 = _2838 + 1u;
                if (_2839 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2832 = _2688;
                    _2833 = _2690;
                    _2834 = _2692;
                    _2835 = _2694;
                    _2836 = _2696;
                    _2837 = _2698;
                    _2838 = _2839;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
        }
        uvec4 _2701 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2702 = _2701.z;
        uint _2704 = (_2702 >> 8u) & 15u;
        float _2800;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        if (((4294967295u << _2704) & _2607) == 0u)
        {
            _2800 = _2687;
            _2802 = _2689;
            _2804 = _2691;
            _2806 = _2693;
            _2808 = _2695;
            _2810 = _2697;
        }
        else
        {
            float _2825 = inversesqrt(dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686)));
            float _2826 = _2825 * _1684;
            float _2827 = _2825 * _1685;
            float _2828 = _2825 * _1686;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2704 < ((_2702 >> 12u) & 15u))
            {
                float _2801;
                float _2803;
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2939 = _2687;
                float _2940 = _2689;
                float _2941 = _2691;
                float _2942 = _2693;
                float _2943 = _2695;
                float _2944 = _2697;
                uint _2945 = _2704;
                uint _2954;
                bool _2955;
                for (;;)
                {
                    _2954 = texelFetch(g_lightClassification, int((((_2601 << 5u) + (_2587 << 9u)) + (_2945 << 2u)) >> 2u)).x;
                    _2955 = _2954 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2955)
                    {
                        frontier_phi_72_pred = _2944;
                        frontier_phi_72_pred_1 = _2943;
                        frontier_phi_72_pred_2 = _2942;
                        frontier_phi_72_pred_3 = _2941;
                        frontier_phi_72_pred_4 = _2940;
                        frontier_phi_72_pred_5 = _2939;
                    }
                    else
                    {
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3151 = _2939;
                        float _3152 = _2940;
                        float _3153 = _2941;
                        float _3154 = _2942;
                        float _3155 = _2943;
                        float _3156 = _2944;
                        uint _3157 = _2954;
                        uint _3158;
                        vec4 _3183;
                        float _3184;
                        vec4 _3199;
                        vec3 _3211;
                        vec4 _3227;
                        vec4 _3243;
                        float _3289;
                        bool _3290;
                        for (;;)
                        {
                            uint _3168 = ((_2945 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3157));
                            _3158 = (_3157 + 4294967295u) & _3157;
                            uint _3170 = _3168 * 40u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            _3184 = _3183.w;
                            uint _3186 = (_3168 * 40u) + 4u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3201 = (_3168 * 40u) + 8u;
                            _3211 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x));
                            uint _3214 = (_3168 * 40u) + 16u;
                            _3227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 3u)).x));
                            uint _3230 = (_3168 * 40u) + 20u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            uint _3245 = (_3168 * 40u) + 24u;
                            vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3264 = (_3168 * 40u) + 28u;
                            vec4 _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            _3289 = fma(_1686, _3277.z, fma(_1685, _3277.y, _3277.x * _1684)) + _3277.w;
                            _3290 = !((fma(_1686, _3258.z, fma(_1685, _3258.y, _3258.x * _1684)) + _3258.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3290)
                            {
                                float _3317 = _3183.x - _1684;
                                float _3318 = _3183.y - _1685;
                                float _3319 = _3183.z - _1686;
                                float _3320 = dot(vec3(_3317, _3318, _3319), vec3(_3317, _3318, _3319));
                                float _3323 = inversesqrt(_3320);
                                float _3324 = _3323 * _3317;
                                float _3325 = _3323 * _3318;
                                float _3326 = _3323 * _3319;
                                float _3330 = 1.0 - (_3320 / (_3184 * _3184));
                                float _4439 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3331 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3335 = sqrt(_3320) * _3199.w;
                                float _3337 = 1.39999997615814208984375 / (_3335 + 1.39999997615814208984375);
                                float _3338 = _3337 * _3337;
                                float _3341 = ((1.0 - _3338) * dot(vec3(_3324, _3325, _3326), vec3(_570, _573, _576))) + _3338;
                                float _3344 = _3335 * _3335;
                                float _3348 = (fma(_1686, _3227.z, fma(_1685, _3227.y, _3227.x * _1684)) + _3227.w) / _3289;
                                float _3349 = (fma(_1686, _3243.z, fma(_1685, _3243.y, _3243.x * _1684)) + _3243.w) / _3289;
                                float _3353 = 1.0 - dot(vec2(_3348, _3349), vec2(_3348, _3349));
                                float _4455 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3354 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3355 = _3354 * (((isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0))) * _3331) / ((_3344 * 0.699999988079071044921875) + 1.0));
                                float _3367 = exp2(log2(1.0 / ((_3344 * 3.5) + 5.0)) * 0.25);
                                float _3368 = 1.0 - _630;
                                float _3375 = sqrt(1.0 - ((1.0 - (_3368 * _3368)) * (1.0 - (_3367 * _3367))));
                                float _3376 = _3375 * _3375;
                                float _3377 = _3376 * _3376;
                                float _3378 = _3324 - _2826;
                                float _3379 = _3325 - _2827;
                                float _3380 = _3326 - _2828;
                                float _3384 = inversesqrt(dot(vec3(_3378, _3379, _3380), vec3(_3378, _3379, _3380)));
                                float _3388 = dot(vec3(_570, _573, _576), vec3((-0.0) - _2826, (-0.0) - _2827, (-0.0) - _2828));
                                float _4466 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3391 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3392 = dot(vec3(_570, _573, _576), vec3(_3384 * _3378, _3384 * _3379, _3384 * _3380));
                                float _4477 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3395 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                                float _3399 = ((_3395 * _3395) * (_3377 + (-1.0))) + 1.0;
                                float _3400 = _3337 * _3376;
                                float _3401 = _3400 * _3400;
                                float _3407 = ((1.0 - _3401) * dot(vec3(_570, _573, _576), vec3(_3324, _3325, _3326))) + _3401;
                                float _4488 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3408 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                                float _3409 = 1.0 - _3376;
                                float _3419 = (0.5 / (((_3408 * ((_3391 * _3409) + _3376)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3376) * _3391))) * _3408;
                                float _4499 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3429 = (_3354 * _3331) * (((_3377 * 3.1415927410125732421875) * (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) / ((_3399 * _3399) * ((_3344 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3355 * _3199.y;
                                frontier_phi_78_pred_1 = _3355 * _3199.x;
                                frontier_phi_78_pred_2 = _3429 * _3211.z;
                                frontier_phi_78_pred_3 = _3429 * _3211.y;
                                frontier_phi_78_pred_4 = _3429 * _3211.x;
                                frontier_phi_78_pred_5 = _3355 * _3199.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3437 = frontier_phi_78_pred;
                            _3436 = frontier_phi_78_pred_1;
                            _3435 = frontier_phi_78_pred_2;
                            _3434 = frontier_phi_78_pred_3;
                            _3433 = frontier_phi_78_pred_4;
                            _3438 = frontier_phi_78_pred_5;
                            _3141 = _3436 + _3154;
                            _3142 = _3437 + _3155;
                            _3143 = _3438 + _3156;
                            _3138 = _3433 + _3151;
                            _3139 = _3434 + _3152;
                            _3140 = _3435 + _3153;
                            if (_3158 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3158;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3143;
                        frontier_phi_72_pred_1 = _3142;
                        frontier_phi_72_pred_2 = _3141;
                        frontier_phi_72_pred_3 = _3140;
                        frontier_phi_72_pred_4 = _3139;
                        frontier_phi_72_pred_5 = _3138;
                    }
                    _2811 = frontier_phi_72_pred;
                    _2809 = frontier_phi_72_pred_1;
                    _2807 = frontier_phi_72_pred_2;
                    _2805 = frontier_phi_72_pred_3;
                    _2803 = frontier_phi_72_pred_4;
                    _2801 = frontier_phi_72_pred_5;
                    uint _2946 = _2945 + 1u;
                    if (_2946 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2939 = _2801;
                        _2940 = _2803;
                        _2941 = _2805;
                        _2942 = _2807;
                        _2943 = _2809;
                        _2944 = _2811;
                        _2945 = _2946;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2811;
                frontier_phi_60_61_ladder_1 = _2809;
                frontier_phi_60_61_ladder_2 = _2805;
                frontier_phi_60_61_ladder_3 = _2803;
                frontier_phi_60_61_ladder_4 = _2801;
                frontier_phi_60_61_ladder_5 = _2807;
            }
            else
            {
                frontier_phi_60_61_ladder = _2697;
                frontier_phi_60_61_ladder_1 = _2695;
                frontier_phi_60_61_ladder_2 = _2691;
                frontier_phi_60_61_ladder_3 = _2689;
                frontier_phi_60_61_ladder_4 = _2687;
                frontier_phi_60_61_ladder_5 = _2693;
            }
            _2800 = frontier_phi_60_61_ladder_4;
            _2802 = frontier_phi_60_61_ladder_3;
            _2804 = frontier_phi_60_61_ladder_2;
            _2806 = frontier_phi_60_61_ladder_5;
            _2808 = frontier_phi_60_61_ladder_1;
            _2810 = frontier_phi_60_61_ladder;
        }
        float _2815 = isnan(1.0) ? _614 : (isnan(_614) ? 1.0 : min(_614, 1.0));
        _2620 = (_2815 * _2806) + _2151;
        _2622 = (_2815 * _2808) + _2153;
        _2624 = (_2815 * _2810) + _2155;
        _2626 = ((_2800 * 0.039999999105930328369140625) * _2815) + _2474;
        _2628 = ((_2802 * 0.039999999105930328369140625) * _2815) + _2476;
        _2630 = ((_2804 * 0.039999999105930328369140625) * _2815) + _2478;
    }
    else
    {
        _2620 = _2151;
        _2622 = _2153;
        _2624 = _2155;
        _2626 = _2474;
        _2628 = _2476;
        _2630 = _2478;
    }
    float _4515 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _4526 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4537 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    uint _2650 = _222 + 6u;
    float _2658 = _548 / cbSceneParam._m0[86u].x;
    float _2659 = _549 / cbSceneParam._m0[86u].y;
    vec4 _2673 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, (log2((isnan(cbSceneParam._m0[77u].w) ? _482 : (isnan(_482) ? cbSceneParam._m0[77u].w : min(_482, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2675 = _2673.x;
    float _2676 = _2673.y;
    float _2677 = _2673.z;
    float _2678 = _2673.w;
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    if (_482 > cbSceneParam._m0[78u].w)
    {
        float _2712 = isnan(_482) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _482 : min(cbSceneParam._m0[80u].w, _482));
        float _2713 = _2712 / _482;
        float _2724 = _2713 * _533;
        float _2725 = _534 * _2713;
        float _2726 = (-0.0) - _2725;
        float _2728 = _2713 * _535;
        float _2730 = (cbSceneParam._m0[77u].w * _2726) / _2712;
        float _2731 = _2730 + cbSceneParam._m0[79u].w;
        float _2732 = cbSceneParam._m0[79u].w - _2725;
        float _2738 = sqrt(((_2724 * _2724) + (_2725 * _2725)) + (_2728 * _2728));
        float _2741 = (1.0 - (cbSceneParam._m0[77u].w / _2712)) * _2738;
        float _2746 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2748 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2901;
        if (abs((_2726 - _2730) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2901 = ((((_2731 > 0.0) ? exp2(_2746 * _2731) : (2.0 - exp2(_2748 * _2731))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2741;
        }
        else
        {
            float _2861 = 1.0 / cbSceneParam._m0[80u].x;
            float _2862 = isnan(_2732) ? _2731 : (isnan(_2731) ? _2732 : max(_2731, _2732));
            float _2863 = isnan(_2732) ? _2731 : (isnan(_2731) ? _2732 : min(_2731, _2732));
            float _2872 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : min(_2862, 0.0));
            float _2873 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : min(_2863, 0.0));
            _2901 = ((abs(_2738 / _2726) * cbSceneParam._m0[80u].y) * ((((_2872 - _2873) * 2.0) - ((exp2(_2746 * (isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0)))) - exp2(_2746 * (isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0))))) * _2861)) - ((exp2(_2748 * _2872) - exp2(_2748 * _2873)) * _2861))) + (_2741 * cbSceneParam._m0[80u].z);
        }
        vec4 _2903 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2658, _2659, 1.0), 0.0);
        float _2912 = exp2((_2901 * (-1.44269502162933349609375)) * (1.0 - _2903.w));
        float _2913 = log2(_2912);
        float _2929 = log2(_2678);
        _2750 = (exp2(_2929 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].x)) * _2903.x) / cbSceneParam._m0[78u].x)) + _2675;
        _2752 = (exp2(_2929 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].y)) * _2903.y) / cbSceneParam._m0[78u].y)) + _2676;
        _2754 = (exp2(_2929 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2913 * cbSceneParam._m0[78u].z)) * _2903.z) / cbSceneParam._m0[78u].z)) + _2677;
        _2756 = _2912 * _2678;
    }
    else
    {
        _2750 = _2675;
        _2752 = _2676;
        _2754 = _2677;
        _2756 = _2678;
    }
    float _2768 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2769 = _2768 == 3.0;
    float _2770 = log2(_2756);
    float _2777 = exp2(_2770 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2620 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _614))) + ((_2626 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1419)) * cbPerFrame._m0[3u].x));
    float _2778 = exp2(_2770 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2622 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _614))) + ((_2628 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1419)) * cbPerFrame._m0[3u].x));
    float _2779 = exp2(_2770 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_2624 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _614))) + ((_2630 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1419)) * cbPerFrame._m0[3u].x));
    float _2788 = (_2768 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2788 * (_2769 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2750)));
    SV_Target.y = _2788 * (_2769 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2752)));
    SV_Target.z = _2788 * (_2769 ? _2779 : (_2779 + (cbSceneParam._m0[72u].w * _2754)));
    SV_Target.w = cbInstanceData._m0[_2650].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2650].w;
}


