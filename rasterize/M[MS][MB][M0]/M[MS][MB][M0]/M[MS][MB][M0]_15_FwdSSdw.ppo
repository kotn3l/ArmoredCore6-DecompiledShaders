#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1035;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _242 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3368 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3379 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3390 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _257 = _252 + 1u;
    uint _261 = _252 + 2u;
    float _270 = sqrt(((cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x));
    float _271 = _270 * TEXCOORD.z;
    float _272 = _270 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _271) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _313 = _308.x * cbMtdParam._m0[9u].x;
    float _314 = _308.y * cbMtdParam._m0[9u].y;
    float _315 = _308.z * cbMtdParam._m0[9u].z;
    float _319 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _285.x) * _313;
    float _322 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _285.y) * _314;
    float _325 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _285.z) * _315;
    float _332 = ((_313 - _319) * (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0)))) + _319;
    float _333 = ((_314 - _322) * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) + _322;
    float _334 = ((_315 - _325) * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) + _325;
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _271) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _272) + cbTextureTilingScale._m0[20u].w));
    vec4 _378 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _382 = _378.z;
    float _386 = (_378.x * 2.0) + (-1.0);
    float _387 = (_378.y * 2.0) + (-1.0);
    float _388 = dot(vec2(_386, _387), vec2(_386, _387));
    float _3401 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _393 = sqrt(1.0 - (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))));
    float _398 = _386 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_352.x * 2.0) + (-1.0)));
    float _399 = _387 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_352.y * 2.0) + (-1.0)));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _271) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _272) + cbTextureTilingScale._m0[11u].w));
    float _418 = _416.x;
    float _419 = 1.0 - _418;
    float _435 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_418 - _419) * cbMtdParam._m0[24u].z) + _419) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3412 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _436 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _443 = (_436 * (cbMtdParam._m0[17u].x - _332)) + _332;
    float _444 = (_436 * (cbMtdParam._m0[17u].y - _333)) + _333;
    float _445 = (_436 * (cbMtdParam._m0[17u].z - _334)) + _334;
    float _450 = (((_352.z - _382) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _382;
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _271) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _272) + cbTextureTilingScale._m0[15u].w));
    float _470 = (_463.x * 2.0) + (-1.0);
    float _471 = (_463.y * 2.0) + (-1.0);
    float _472 = dot(vec2(_470, _471), vec2(_470, _471));
    float _3423 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _480 = (_436 * (_463.z - _450)) + _450;
    float _492 = (((_470 - _398) + (cbMtdParam._m0[21u].x * _398)) * _436) + _398;
    float _493 = (((_471 - _399) + (cbMtdParam._m0[21u].x * _399)) * _436) + _399;
    float _494 = (_436 * (sqrt(1.0 - (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) - _393)) + _393;
    float _496 = cbMtdParam._m0[22u].x + _378.w;
    float _499 = fma(_494, _218 * NORMAL.x, fma(_493, _225 * TANGENT.x, (_211 * _203) * _492));
    float _502 = fma(_494, _218 * NORMAL.y, fma(_493, _225 * TANGENT.y, (_211 * _204) * _492));
    float _505 = fma(_494, _218 * NORMAL.z, fma(_493, _225 * TANGENT.z, (_211 * _205) * _492));
    float _509 = inversesqrt(dot(vec3(_499, _502, _505), vec3(_499, _502, _505)));
    float _510 = _509 * _499;
    float _511 = _509 * _502;
    float _512 = _509 * _505;
    float _3434 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _513 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _3456 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3467 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3478 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _531 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _582 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _572);
    float _583 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _572);
    float _584 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _572);
    float _588 = inversesqrt(dot(vec3(_582, _583, _584), vec3(_582, _583, _584)));
    float _589 = _582 * _588;
    float _590 = _583 * _588;
    float _591 = _584 * _588;
    float _597 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _598 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _619 = fma(_512, cbSceneParam._m0[5u].z, fma(_511, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _510));
    float _622 = fma(_512, cbSceneParam._m0[6u].z, fma(_511, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _510));
    float _625 = fma(_512, cbSceneParam._m0[7u].z, fma(_511, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _510));
    uint _639 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _645 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * cbInstanceData._m0[_639].x;
    float _646 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * cbInstanceData._m0[_639].y;
    float _647 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_639].z;
    float _3489 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _3500 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _649 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    vec4 _659 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _597, cbSceneParam._m0[86u].y * _598));
    float _663 = ((isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * TEXCOORD_5.w) * _659.x;
    float _664 = dot(vec3(_510, _511, _512), vec3(_589, _590, _591));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _510) - _589;
    float _672 = (_667 * _511) - _590;
    float _673 = (_667 * _512) - _591;
    float _677 = abs(dot(vec3(_589, _590, _591), vec3(_510, _511, _512)));
    float _3522 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = sqrt(_513);
    float _692 = exp2((_679 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_679 * 3.0));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1034;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _759 = fma(_732, cbModelParam._m0[26u].z, fma(_728, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _724));
        float _763 = fma(_732, cbModelParam._m0[27u].z, fma(_728, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _724));
        float _767 = fma(_732, cbModelParam._m0[28u].z, fma(_728, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _724));
        float _792 = _724 + _510;
        float _793 = _728 + _511;
        float _794 = _732 + _512;
        float _804 = fma(_794, cbModelParam._m0[26u].z, fma(_793, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _792)) - _759;
        float _805 = fma(_794, cbModelParam._m0[27u].z, fma(_793, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _792)) - _763;
        float _806 = fma(_794, cbModelParam._m0[28u].z, fma(_793, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _792)) - _767;
        float _810 = inversesqrt(dot(vec3(_804, _805, _806), vec3(_804, _805, _806)));
        float _823 = ((_810 * _804) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_759 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_810 * _805) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_763 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_810 * _806) / cbModelParam._m0[34u].z) + ((((((_767 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        float _862 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_828.x + (-0.5));
        float _864 = _862 * (_828.y + (-0.5));
        float _865 = _862 * (_828.z + (-0.5));
        float _872 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_835.x + (-0.5));
        float _874 = _872 * (_835.y + (-0.5));
        float _875 = _872 * (_835.z + (-0.5));
        float _882 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_842.x + (-0.5));
        float _884 = _882 * (_842.y + (-0.5));
        float _885 = _882 * (_842.z + (-0.5));
        float _892 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_849.x + (-0.5));
        float _894 = _892 * (_849.y + (-0.5));
        float _895 = _892 * (_849.z + (-0.5));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = _863 * 0.5;
        float _900 = _873 * 0.5;
        float _901 = _883 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _916 = (dot(vec3(_510, _511, _512), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _926 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3570 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_928 + 1.0))) + _933) * _896;
        float _943 = _864 * 0.5;
        float _944 = _874 * 0.5;
        float _945 = _884 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(_510, _511, _512), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3603 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_970 + 1.0))) + _975) * _897;
        float _985 = _865 * 0.5;
        float _986 = _875 * 0.5;
        float _987 = _885 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_510, _511, _512), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3636 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1012 + 1.0))) + _1017) * _898;
        _1034 = _865;
        _1036 = _864;
        _1037 = _863;
        _1038 = _875;
        _1039 = _874;
        _1040 = _873;
        _1041 = _885;
        _1042 = _884;
        _1043 = _883;
        _1044 = _898;
        _1045 = _897;
        _1046 = _896;
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
    }
    else
    {
        _1034 = _1035;
        _1036 = _1035;
        _1037 = _1035;
        _1038 = _1035;
        _1039 = _1035;
        _1040 = _1035;
        _1041 = _1035;
        _1042 = _1035;
        _1043 = _1035;
        _1044 = _1035;
        _1045 = _1035;
        _1046 = _1035;
        _1047 = 0.0;
        _1048 = 0.0;
        _1049 = 0.0;
    }
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1074 = fma(_732, cbModelParam._m0[30u].z, fma(_728, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _724));
        float _1078 = fma(_732, cbModelParam._m0[31u].z, fma(_728, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _724));
        float _1082 = fma(_732, cbModelParam._m0[32u].z, fma(_728, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _724));
        float _1105 = _724 + _510;
        float _1106 = _728 + _511;
        float _1107 = _732 + _512;
        float _1117 = fma(_1107, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1105)) - _1074;
        float _1118 = fma(_1107, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1105)) - _1078;
        float _1119 = fma(_1107, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1105)) - _1082;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1074 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1078 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[35u].z) + ((((((_1082 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1173 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1140.x + (-0.5));
        float _1175 = _1173 * (_1140.y + (-0.5));
        float _1176 = _1173 * (_1140.z + (-0.5));
        float _1183 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1147.x + (-0.5));
        float _1185 = _1183 * (_1147.y + (-0.5));
        float _1186 = _1183 * (_1147.z + (-0.5));
        float _1193 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1154.x + (-0.5));
        float _1195 = _1193 * (_1154.y + (-0.5));
        float _1196 = _1193 * (_1154.z + (-0.5));
        float _1203 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1161.x + (-0.5));
        float _1205 = _1203 * (_1161.y + (-0.5));
        float _1206 = _1203 * (_1161.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_510, _511, _512), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3699 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1237 + 1.0))) + _1242) * _1207;
        float _1252 = _1175 * 0.5;
        float _1253 = _1185 * 0.5;
        float _1254 = _1195 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_510, _511, _512), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3732 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1279 + 1.0))) + _1284) * _1208;
        float _1294 = _1176 * 0.5;
        float _1295 = _1186 * 0.5;
        float _1296 = _1196 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_510, _511, _512), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3765 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1321 + 1.0))) + _1326) * _1209;
        _1343 = _1176;
        _1344 = _1175;
        _1345 = _1174;
        _1346 = _1186;
        _1347 = _1185;
        _1348 = _1184;
        _1349 = _1196;
        _1350 = _1195;
        _1351 = _1194;
        _1352 = _1209;
        _1353 = _1208;
        _1354 = _1207;
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1035;
        _1344 = _1035;
        _1345 = _1035;
        _1346 = _1035;
        _1347 = _1035;
        _1348 = _1035;
        _1349 = _1035;
        _1350 = _1035;
        _1351 = _1035;
        _1352 = _1035;
        _1353 = _1035;
        _1354 = _1035;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1047)) + _1047;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1048)) + _1048;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1049)) + _1049;
    float _1390 = fma(_1369, cbSceneParam._m0[89u].z, fma(_1368, cbSceneParam._m0[89u].y, _1367 * cbSceneParam._m0[89u].x));
    float _1393 = fma(_1369, cbSceneParam._m0[90u].z, fma(_1368, cbSceneParam._m0[90u].y, _1367 * cbSceneParam._m0[90u].x));
    float _1396 = fma(_1369, cbSceneParam._m0[91u].z, fma(_1368, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1367));
    float _1411 = _671 * 0.5;
    float _1412 = _672 * 0.5;
    float _1413 = _673 * 0.5;
    float _1414 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1417 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1420 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1454;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1427 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1034, _1038, _1041, _1044));
        float _1431 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1435 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1442 = dot(vec4(cbModelParam._m0[39u]), vec4(_1411, _1412, _1413, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1465;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1456 = dot(vec4(cbModelParam._m0[40u]), vec4(_1411, _1412, _1413, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1469 = (_1465 * cbModelParam._m0[1u].x) + (_1454 * (1.0 - cbModelParam._m0[1u].x));
    float _1479 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _513);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1479 : min(cbModelParam._m0[25u].z, _1479));
    float _1561;
    float _1563;
    float _1565;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1528 = fma(_732, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724)) + cbModelParam._m0[13u].w;
        float _1532 = fma(_732, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724)) + cbModelParam._m0[14u].w;
        float _1536 = fma(_732, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724)) + cbModelParam._m0[15u].w;
        float _1539 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1542 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1545 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1573;
        if (_1539 > 0.0)
        {
            _1573 = abs((1.0 - _1528) / _1539);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1528 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1573 = frontier_phi_14_12_ladder;
        }
        float _1798;
        if (_1542 > 0.0)
        {
            _1798 = abs((1.0 - _1532) / _1542);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1532 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1798 = frontier_phi_23_19_ladder;
        }
        float _2044;
        if (_1545 > 0.0)
        {
            _2044 = abs((1.0 - _1536) / _1545);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1536 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2044 = frontier_phi_35_30_ladder;
        }
        float _2046 = isnan(_1798) ? _1573 : (isnan(_1573) ? _1798 : min(_1573, _1798));
        float _2047 = isnan(_2044) ? _2046 : (isnan(_2046) ? _2044 : min(_2046, _2044));
        float _2051 = (_2047 * _1539) + _1528;
        float _2052 = (_2047 * _1542) + _1532;
        float _2053 = (_2047 * _1545) + _1536;
        float _2054 = _2047 * 9.9999997473787516355514526367188e-05;
        float _2056 = (-1.0) - _2054;
        float _2058 = _2054 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2053 > _2058) || ((_2053 < _2056) || ((_2052 > _2058) || ((_2052 < _2056) || ((_2051 < _2056) || (_2051 > _2058))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2177 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2053, cbModelParam._m0[9u].z, fma(_2052, cbModelParam._m0[9u].y, _2051 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2053, cbModelParam._m0[10u].z, fma(_2052, cbModelParam._m0[10u].y, _2051 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2053, cbModelParam._m0[11u].z, fma(_2052, cbModelParam._m0[11u].y, _2051 * cbModelParam._m0[11u].x))), _1480);
            frontier_phi_13_35_ladder = _2177.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2177.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2177.x * cbModelParam._m0[1u].y;
        }
        _1561 = frontier_phi_13_35_ladder_2;
        _1563 = frontier_phi_13_35_ladder_1;
        _1565 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1549 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1480);
        _1561 = _1549.x * cbModelParam._m0[1u].y;
        _1563 = _1549.y * cbModelParam._m0[1u].y;
        _1565 = _1549.z * cbModelParam._m0[1u].y;
    }
    float _1569 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _513);
    float _1570 = isnan(_1569) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1569 : min(cbModelParam._m0[25u].w, _1569));
    float _1661;
    float _1663;
    float _1665;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1625 = fma(_732, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724)) + cbModelParam._m0[21u].w;
        float _1629 = fma(_732, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724)) + cbModelParam._m0[22u].w;
        float _1633 = fma(_732, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724)) + cbModelParam._m0[23u].w;
        float _1636 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1639 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1642 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1803;
        if (_1636 > 0.0)
        {
            _1803 = abs((1.0 - _1625) / _1636);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1625 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1803 = frontier_phi_25_21_ladder;
        }
        float _2071;
        if (_1639 > 0.0)
        {
            _2071 = abs((1.0 - _1629) / _1639);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1629 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2071 = frontier_phi_37_32_ladder;
        }
        float _2276;
        if (_1642 > 0.0)
        {
            _2276 = abs((1.0 - _1633) / _1642);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1633 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2276 = frontier_phi_46_43_ladder;
        }
        float _2278 = isnan(_2071) ? _1803 : (isnan(_1803) ? _2071 : min(_1803, _2071));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1636) + _1625;
        float _2284 = (_2279 * _1639) + _1629;
        float _2285 = (_2279 * _1642) + _1633;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2286;
        float _2289 = _2286 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2285 > _2289) || ((_2285 < _2287) || ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 < _2287) || (_2283 > _2289))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2285, cbModelParam._m0[17u].z, fma(_2284, cbModelParam._m0[17u].y, _2283 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2285, cbModelParam._m0[18u].z, fma(_2284, cbModelParam._m0[18u].y, _2283 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2285, cbModelParam._m0[19u].z, fma(_2284, cbModelParam._m0[19u].y, _2283 * cbModelParam._m0[19u].x))), _1570);
            frontier_phi_22_46_ladder = _2484.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2484.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2484.x * cbModelParam._m0[1u].z;
        }
        _1661 = frontier_phi_22_46_ladder_2;
        _1663 = frontier_phi_22_46_ladder_1;
        _1665 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1570);
        _1661 = _1645.x * cbModelParam._m0[1u].z;
        _1663 = _1645.y * cbModelParam._m0[1u].z;
        _1665 = _1645.z * cbModelParam._m0[1u].z;
    }
    float _1677 = ((((1.0 - _692) * ((_679 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_692 * _679)) * _663;
    float _1678 = _1677 * ((cbModelParam._m0[1u].w * (_1661 - _1561)) + _1561);
    float _1679 = _1677 * ((cbModelParam._m0[1u].w * (_1663 - _1563)) + _1563);
    float _1680 = _1677 * ((cbModelParam._m0[1u].w * (_1665 - _1565)) + _1565);
    float _1683 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, _1678 * cbSceneParam._m0[91u].x));
    vec4 _1697 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_597, _598));
    float _1699 = _1697.w;
    float _1711 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1699);
    float _1712 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1699);
    float _1713 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1699);
    uvec4 _1717 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _1719 = _1717.x * 14u;
    uint _1720 = _1719 + 13u;
    float _1727 = _663 + (-1.0);
    float _1732 = (cbLight._m0[_1720].x * _1727) + 1.0;
    float _1733 = (cbLight._m0[_1720].y * _1727) + 1.0;
    float _1734 = (cbLight._m0[_1720].z * _1727) + 1.0;
    float _1735 = (cbLight._m0[_1720].w * _1727) + 1.0;
    uint _1736 = _1719 + 5u;
    float _1742 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1746 = _1719 + 4u;
    float _1756 = isnan(1.0) ? _1732 : (isnan(_1732) ? 1.0 : min(_1732, 1.0));
    uint _1760 = _1719 | 1u;
    float _1771 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_510, _511, _512));
    float _1774 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_510, _511, _512));
    float _3901 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _3912 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1779 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * 0.3183098733425140380859375;
    float _1781 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * 0.3183098733425140380859375;
    float _1788 = ((cbLight._m0[_1736].x * _1742) * _1781) + (((cbLight._m0[_1746].x * _1711) * _1756) * _1779);
    float _1789 = ((_1742 * cbLight._m0[_1736].y) * _1781) + (((cbLight._m0[_1746].y * _1712) * _1756) * _1779);
    float _1790 = ((_1742 * cbLight._m0[_1736].z) * _1781) + (((cbLight._m0[_1746].z * _1713) * _1756) * _1779);
    uvec4 _1795 = floatBitsToUint(cbLight._m0[_1719 + 12u]);
    bool _1797 = _1795.x == 0u;
    float _1808;
    float _1810;
    float _1812;
    if (_1797)
    {
        _1808 = _1788;
        _1810 = _1789;
        _1812 = _1790;
    }
    else
    {
        uint _1816 = _1719 + 6u;
        float _1832 = (dot(vec3(cbLight._m0[_1719 + 2u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _1833 = _1832 * _1832;
        float _3923 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1835 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
        _1808 = (((cbLight._m0[_1816].x * 0.3183098733425140380859375) * _1834) * _1835) + _1788;
        _1810 = (((cbLight._m0[_1816].y * 0.3183098733425140380859375) * _1834) * _1835) + _1789;
        _1812 = (((cbLight._m0[_1816].z * 0.3183098733425140380859375) * _1834) * _1835) + _1790;
    }
    bool _1815 = _1795.y == 0u;
    float _1853;
    float _1855;
    float _1857;
    if (_1815)
    {
        _1853 = _1808;
        _1855 = _1810;
        _1857 = _1812;
    }
    else
    {
        uint _2015 = _1719 + 7u;
        float _2031 = (dot(vec3(cbLight._m0[_1719 + 3u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _2032 = _2031 * _2031;
        float _3939 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2033 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _2034 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _1853 = (((cbLight._m0[_2015].x * 0.3183098733425140380859375) * _2033) * _2034) + _1808;
        _1855 = (((cbLight._m0[_2015].y * 0.3183098733425140380859375) * _2033) * _2034) + _1810;
        _1857 = (((cbLight._m0[_2015].z * 0.3183098733425140380859375) * _2033) * _2034) + _1812;
    }
    uint _1860 = _1719 + 8u;
    float _1873 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1719].w)) * _513) * 0.949999988079071044921875);
    float _1874 = _1873 * _1873;
    float _1875 = cbLight._m0[_1719].x + _589;
    float _1876 = cbLight._m0[_1719].y + _590;
    float _1877 = cbLight._m0[_1719].z + _591;
    float _1881 = inversesqrt(dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877)));
    float _1882 = _1881 * _1875;
    float _1883 = _1881 * _1876;
    float _1884 = _1881 * _1877;
    float _1885 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1719].xyz));
    float _3955 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _1889 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _1890 = dot(vec3(_510, _511, _512), vec3(_1882, _1883, _1884));
    float _3977 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _1894 = dot(vec3(cbLight._m0[_1719].xyz), vec3(_1882, _1883, _1884));
    float _3988 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1898 = _1874 * _1874;
    float _1902 = ((_1893 * _1893) * (_1898 + (-1.0))) + 1.0;
    float _1913 = (exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1914 = 1.0 - _1874;
    float _1925 = (0.5 / (((_1889 * ((_1888 * _1914) + _1874)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _1914) + _1874) * _1888))) * _1888;
    float _3999 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1927 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1898 / ((_1902 * _1902) * 3.141590118408203125));
    uint _1941 = _1719 + 9u;
    float _1952 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _513) * 0.949999988079071044921875);
    float _1953 = _1952 * _1952;
    float _1954 = cbLight._m0[_1760].x + _589;
    float _1955 = cbLight._m0[_1760].y + _590;
    float _1956 = cbLight._m0[_1760].z + _591;
    float _1960 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
    float _1961 = _1960 * _1954;
    float _1962 = _1960 * _1955;
    float _1963 = _1960 * _1956;
    float _1964 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1760].xyz));
    float _4010 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _1968 = dot(vec3(_510, _511, _512), vec3(_1961, _1962, _1963));
    float _4021 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1972 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1961, _1962, _1963));
    float _4032 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1976 = _1953 * _1953;
    float _1980 = ((_1971 * _1971) * (_1976 + (-1.0))) + 1.0;
    float _1989 = (exp2(log2(1.0 - (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1990 = 1.0 - _1953;
    float _2000 = (0.5 / (((_1889 * ((_1967 * _1990) + _1953)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _1990) + _1953) * _1967))) * _1967;
    float _4043 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2002 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_1976 / ((_1980 * _1980) * 3.141590118408203125));
    float _2012 = (((_1989 * cbLight._m0[_1941].x) * _2002) * _1742) + ((((cbLight._m0[_1860].x * _1711) * _1913) * _1927) * _1756);
    float _2013 = (((_1989 * cbLight._m0[_1941].y) * _2002) * _1742) + ((((cbLight._m0[_1860].y * _1712) * _1913) * _1927) * _1756);
    float _2014 = (((_1989 * cbLight._m0[_1941].z) * _2002) * _1742) + ((((cbLight._m0[_1860].z * _1713) * _1913) * _1927) * _1756);
    float _2076;
    float _2078;
    float _2080;
    if (_1797)
    {
        _2076 = _2012;
        _2078 = _2013;
        _2080 = _2014;
    }
    else
    {
        uint _2082 = _1719 + 2u;
        uint _2086 = _1719 + 10u;
        float _2100 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _513) * 0.949999988079071044921875);
        float _2101 = _2100 * _2100;
        float _2102 = cbLight._m0[_2082].x + _589;
        float _2103 = cbLight._m0[_2082].y + _590;
        float _2104 = cbLight._m0[_2082].z + _591;
        float _2108 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
        float _2109 = _2108 * _2102;
        float _2110 = _2108 * _2103;
        float _2111 = _2108 * _2104;
        float _2112 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2082].xyz));
        float _4054 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2115 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2116 = dot(vec3(_510, _511, _512), vec3(_2109, _2110, _2111));
        float _4065 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2120 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2109, _2110, _2111));
        float _4076 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2124 = _2101 * _2101;
        float _2128 = ((_2119 * _2119) * (_2124 + (-1.0))) + 1.0;
        float _2137 = (exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2138 = 1.0 - _2101;
        float _2148 = (0.5 / (((_1889 * ((_2115 * _2138) + _2101)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _2138) + _2101) * _2115))) * _2115;
        float _4087 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2150 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2124 / ((_2128 * _2128) * 3.141590118408203125));
        float _2151 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
        _2076 = (((_2137 * cbLight._m0[_2086].x) * _2150) * _2151) + _2012;
        _2078 = (((_2137 * cbLight._m0[_2086].y) * _2150) * _2151) + _2013;
        _2080 = (((_2137 * cbLight._m0[_2086].z) * _2150) * _2151) + _2014;
    }
    float _2186;
    float _2188;
    float _2190;
    if (_1815)
    {
        _2186 = _2076;
        _2188 = _2078;
        _2190 = _2080;
    }
    else
    {
        uint _2197 = _1719 + 3u;
        uint _2201 = _1719 + 11u;
        float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _513) * 0.949999988079071044921875);
        float _2216 = _2215 * _2215;
        float _2217 = cbLight._m0[_2197].x + _589;
        float _2218 = cbLight._m0[_2197].y + _590;
        float _2219 = cbLight._m0[_2197].z + _591;
        float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
        float _2224 = _2223 * _2217;
        float _2225 = _2223 * _2218;
        float _2226 = _2223 * _2219;
        float _2227 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2197].xyz));
        float _4103 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2230 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _2231 = dot(vec3(_510, _511, _512), vec3(_2224, _2225, _2226));
        float _4114 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2235 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2224, _2225, _2226));
        float _4125 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2239 = _2216 * _2216;
        float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
        float _2252 = (exp2(log2(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2253 = 1.0 - _2216;
        float _2263 = (0.5 / (((_1889 * ((_2230 * _2253) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_1889 * _2253) + _2216) * _2230))) * _2230;
        float _4136 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2265 = (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
        float _2266 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
        _2186 = (((_2252 * cbLight._m0[_2201].x) * _2265) * _2266) + _2076;
        _2188 = (((_2252 * cbLight._m0[_2201].y) * _2265) * _2266) + _2078;
        _2190 = (((_2252 * cbLight._m0[_2201].z) * _2265) * _2266) + _2080;
    }
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    if (_1717.y == 0u)
    {
        float _2341 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2342 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2341;
        float _2343 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2341;
        float _2344 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2341;
        uvec4 _2356 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2357 = _2356.x;
        uint _2368 = uint((float(_2356.y) * floor(float(uint(cbSceneParam._m0[85u].y * _598) / _2357))) + floor(float(uint(cbSceneParam._m0[85u].x * _597) / _2357)));
        float _2378 = (log2(_2344 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2379 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        uint _2382 = uint(isnan(14.0) ? _2379 : (isnan(_2379) ? 14.0 : min(_2379, 14.0)));
        uvec4 _2387 = texelFetch(g_lightClusterGridBuffer, int(((_2382 << 2u) + (_2368 << 6u)) >> 2u));
        uint _2388 = _2387.x;
        uint _2389 = _2356.z;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        if (((((1u << ((_2389 >> 4u) & 15u)) + 4294967295u) & _2388) == 0u) || ((_2389 & 240u) == 0u))
        {
            _2489 = 0.0;
            _2491 = 0.0;
            _2493 = 0.0;
            _2495 = 0.0;
            _2497 = 0.0;
            _2499 = 0.0;
        }
        else
        {
            float _2490;
            float _2492;
            float _2494;
            float _2496;
            float _2498;
            float _2500;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            float _2639 = 0.0;
            uint _2640 = 0u;
            uint _2649;
            bool _2650;
            for (;;)
            {
                _2649 = texelFetch(g_lightClassification, int((((_2382 << 5u) + (_2368 << 9u)) + (_2640 << 2u)) >> 2u)).x;
                _2650 = _2649 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2650)
                {
                    frontier_phi_61_pred = _2634;
                    frontier_phi_61_pred_1 = _2639;
                    frontier_phi_61_pred_2 = _2638;
                    frontier_phi_61_pred_3 = _2637;
                    frontier_phi_61_pred_4 = _2636;
                    frontier_phi_61_pred_5 = _2635;
                }
                else
                {
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    uint _2764;
                    _2758 = _2634;
                    _2759 = _2635;
                    _2760 = _2636;
                    _2761 = _2637;
                    _2762 = _2638;
                    _2763 = _2639;
                    _2764 = _2649;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    for (;;)
                    {
                        uint _2768 = uint(findLSB(_2764)) + (_2640 << 5u);
                        uint _2765 = (_2764 + 4294967295u) & _2764;
                        uint _2770 = _2768 * 48u;
                        vec4 _2784 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 3u)).x));
                        uint _2790 = (_2768 * 48u) + 4u;
                        vec4 _2803 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2790)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 3u)).x));
                        uint _2809 = (_2768 * 48u) + 8u;
                        vec3 _2820 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x));
                        float _2824 = _2784.x - _2342;
                        float _2825 = _2784.y - _2343;
                        float _2826 = _2784.z - _2344;
                        float _2827 = dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826));
                        float _2830 = inversesqrt(_2827);
                        float _2831 = _2830 * _2824;
                        float _2832 = _2830 * _2825;
                        float _2833 = _2830 * _2826;
                        float _2834 = dot(vec3(_619, _622, _625), vec3(_2831, _2832, _2833));
                        float _2839 = 1.0 - (_2827 * _2784.w);
                        float _4162 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2840 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
                        float _2841 = sqrt(_2827) * _2803.w;
                        float _2844 = 1.39999997615814208984375 / (_2841 + 1.39999997615814208984375);
                        float _2845 = _2844 * _2844;
                        float _2848 = ((1.0 - _2845) * _2834) + _2845;
                        float _2851 = _2841 * _2841;
                        float _2855 = ((isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))) * _2840) / ((_2851 * 0.699999988079071044921875) + 1.0);
                        float _2859 = (-0.0) - _2342;
                        float _2860 = (-0.0) - _2343;
                        float _2861 = (-0.0) - _2344;
                        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
                        float _2866 = _2865 * _2859;
                        float _2867 = _2865 * _2860;
                        float _2868 = _2865 * _2861;
                        float _2876 = exp2(log2(1.0 / ((_2851 * 3.5) + 5.0)) * 0.25);
                        float _2877 = 1.0 - _679;
                        float _2884 = sqrt(1.0 - ((1.0 - (_2877 * _2877)) * (1.0 - (_2876 * _2876))));
                        float _2885 = _2884 * _2884;
                        float _2886 = _2885 * _2885;
                        float _2887 = _2866 + _2831;
                        float _2888 = _2867 + _2832;
                        float _2889 = _2868 + _2833;
                        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
                        float _2897 = dot(vec3(_619, _622, _625), vec3(_2866, _2867, _2868));
                        float _4178 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2900 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                        float _2901 = dot(vec3(_619, _622, _625), vec3(_2893 * _2887, _2893 * _2888, _2893 * _2889));
                        float _4189 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2904 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2908 = ((_2904 * _2904) * (_2886 + (-1.0))) + 1.0;
                        float _2909 = _2844 * _2885;
                        float _2910 = _2909 * _2909;
                        float _2913 = ((1.0 - _2910) * _2834) + _2910;
                        float _4200 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2914 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2915 = 1.0 - _2885;
                        float _2925 = (0.5 / (((_2914 * ((_2900 * _2915) + _2885)) + 9.9999999392252902907785028219223e-09) + (((_2914 * _2915) + _2885) * _2900))) * _2914;
                        float _4211 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2936 = (((_2886 * 3.1415927410125732421875) * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) / ((_2908 * _2908) * ((_2851 * 2.1991131305694580078125) + 3.141590118408203125))) * _2840;
                        _2693 = (_2855 * _2803.x) + _2761;
                        _2694 = (_2855 * _2803.y) + _2762;
                        _2695 = (_2855 * _2803.z) + _2763;
                        _2690 = (_2936 * _2820.x) + _2758;
                        _2691 = (_2936 * _2820.y) + _2759;
                        _2692 = (_2936 * _2820.z) + _2760;
                        if (_2765 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2692;
                            _2761 = _2693;
                            _2762 = _2694;
                            _2763 = _2695;
                            _2764 = _2765;
                        }
                    }
                    frontier_phi_61_pred = _2690;
                    frontier_phi_61_pred_1 = _2695;
                    frontier_phi_61_pred_2 = _2694;
                    frontier_phi_61_pred_3 = _2693;
                    frontier_phi_61_pred_4 = _2692;
                    frontier_phi_61_pred_5 = _2691;
                }
                _2490 = frontier_phi_61_pred;
                _2500 = frontier_phi_61_pred_1;
                _2498 = frontier_phi_61_pred_2;
                _2496 = frontier_phi_61_pred_3;
                _2494 = frontier_phi_61_pred_4;
                _2492 = frontier_phi_61_pred_5;
                uint _2641 = _2640 + 1u;
                if (_2641 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2634 = _2490;
                    _2635 = _2492;
                    _2636 = _2494;
                    _2637 = _2496;
                    _2638 = _2498;
                    _2639 = _2500;
                    _2640 = _2641;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2489 = _2490;
            _2491 = _2492;
            _2493 = _2494;
            _2495 = _2496;
            _2497 = _2498;
            _2499 = _2500;
        }
        uvec4 _2503 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2504 = _2503.z;
        uint _2506 = (_2504 >> 8u) & 15u;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        if (((4294967295u << _2506) & _2388) == 0u)
        {
            _2602 = _2489;
            _2604 = _2491;
            _2606 = _2493;
            _2608 = _2495;
            _2610 = _2497;
            _2612 = _2499;
        }
        else
        {
            float _2627 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
            float _2628 = _2627 * _2342;
            float _2629 = _2627 * _2343;
            float _2630 = _2627 * _2344;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2506 < ((_2504 >> 12u) & 15u))
            {
                float _2603;
                float _2605;
                float _2607;
                float _2609;
                float _2611;
                float _2613;
                float _2741 = _2489;
                float _2742 = _2491;
                float _2743 = _2493;
                float _2744 = _2495;
                float _2745 = _2497;
                float _2746 = _2499;
                uint _2747 = _2506;
                uint _2756;
                bool _2757;
                for (;;)
                {
                    _2756 = texelFetch(g_lightClassification, int((((_2382 << 5u) + (_2368 << 9u)) + (_2747 << 2u)) >> 2u)).x;
                    _2757 = _2756 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2757)
                    {
                        frontier_phi_67_pred = _2744;
                        frontier_phi_67_pred_1 = _2745;
                        frontier_phi_67_pred_2 = _2746;
                        frontier_phi_67_pred_3 = _2743;
                        frontier_phi_67_pred_4 = _2742;
                        frontier_phi_67_pred_5 = _2741;
                    }
                    else
                    {
                        float _2941;
                        float _2942;
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _2954 = _2741;
                        float _2955 = _2742;
                        float _2956 = _2743;
                        float _2957 = _2744;
                        float _2958 = _2745;
                        float _2959 = _2746;
                        uint _2960 = _2756;
                        uint _2961;
                        vec4 _2986;
                        float _2987;
                        vec4 _3002;
                        vec3 _3014;
                        vec4 _3029;
                        vec4 _3044;
                        float _3090;
                        bool _3091;
                        for (;;)
                        {
                            uint _2971 = ((_2747 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2960));
                            _2961 = (_2960 + 4294967295u) & _2960;
                            uint _2973 = _2971 * 40u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            _2987 = _2986.w;
                            uint _2989 = (_2971 * 40u) + 4u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3004 = (_2971 * 40u) + 8u;
                            _3014 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x));
                            uint _3016 = (_2971 * 40u) + 16u;
                            _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            uint _3031 = (_2971 * 40u) + 20u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3046 = (_2971 * 40u) + 24u;
                            vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3065 = (_2971 * 40u) + 28u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            _3090 = fma(_2344, _3078.z, fma(_2343, _3078.y, _3078.x * _2342)) + _3078.w;
                            _3091 = !((fma(_2344, _3059.z, fma(_2343, _3059.y, _3059.x * _2342)) + _3059.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3091)
                            {
                                float _3118 = _2986.x - _2342;
                                float _3119 = _2986.y - _2343;
                                float _3120 = _2986.z - _2344;
                                float _3121 = dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120));
                                float _3124 = inversesqrt(_3121);
                                float _3125 = _3124 * _3118;
                                float _3126 = _3124 * _3119;
                                float _3127 = _3124 * _3120;
                                float _3131 = 1.0 - (_3121 / (_2987 * _2987));
                                float _4222 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3132 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3136 = sqrt(_3121) * _3002.w;
                                float _3138 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                                float _3139 = _3138 * _3138;
                                float _3142 = ((1.0 - _3139) * dot(vec3(_3125, _3126, _3127), vec3(_619, _622, _625))) + _3139;
                                float _3145 = _3136 * _3136;
                                float _3149 = (fma(_2344, _3029.z, fma(_2343, _3029.y, _3029.x * _2342)) + _3029.w) / _3090;
                                float _3150 = (fma(_2344, _3044.z, fma(_2343, _3044.y, _3044.x * _2342)) + _3044.w) / _3090;
                                float _3154 = 1.0 - dot(vec2(_3149, _3150), vec2(_3149, _3150));
                                float _4238 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                                float _3155 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                                float _3156 = _3155 * (((isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0))) * _3132) / ((_3145 * 0.699999988079071044921875) + 1.0));
                                float _3168 = exp2(log2(1.0 / ((_3145 * 3.5) + 5.0)) * 0.25);
                                float _3169 = 1.0 - _679;
                                float _3176 = sqrt(1.0 - ((1.0 - (_3169 * _3169)) * (1.0 - (_3168 * _3168))));
                                float _3177 = _3176 * _3176;
                                float _3178 = _3177 * _3177;
                                float _3179 = _3125 - _2628;
                                float _3180 = _3126 - _2629;
                                float _3181 = _3127 - _2630;
                                float _3185 = inversesqrt(dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181)));
                                float _3189 = dot(vec3(_619, _622, _625), vec3((-0.0) - _2628, (-0.0) - _2629, (-0.0) - _2630));
                                float _4249 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3192 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3193 = dot(vec3(_619, _622, _625), vec3(_3185 * _3179, _3185 * _3180, _3185 * _3181));
                                float _4260 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3200 = ((_3196 * _3196) * (_3178 + (-1.0))) + 1.0;
                                float _3201 = _3138 * _3177;
                                float _3202 = _3201 * _3201;
                                float _3208 = ((1.0 - _3202) * dot(vec3(_619, _622, _625), vec3(_3125, _3126, _3127))) + _3202;
                                float _4271 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3210 = 1.0 - _3177;
                                float _3220 = (0.5 / (((_3209 * ((_3192 * _3210) + _3177)) + 9.9999999392252902907785028219223e-09) + (((_3209 * _3210) + _3177) * _3192))) * _3209;
                                float _4282 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3230 = (_3155 * _3132) * (((_3178 * 3.1415927410125732421875) * (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) / ((_3200 * _3200) * ((_3145 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3230 * _3014.x;
                                frontier_phi_73_pred_1 = _3230 * _3014.y;
                                frontier_phi_73_pred_2 = _3156 * _3002.z;
                                frontier_phi_73_pred_3 = _3156 * _3002.y;
                                frontier_phi_73_pred_4 = _3156 * _3002.x;
                                frontier_phi_73_pred_5 = _3230 * _3014.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3234 = frontier_phi_73_pred;
                            _3235 = frontier_phi_73_pred_1;
                            _3239 = frontier_phi_73_pred_2;
                            _3238 = frontier_phi_73_pred_3;
                            _3237 = frontier_phi_73_pred_4;
                            _3236 = frontier_phi_73_pred_5;
                            _2944 = _3237 + _2957;
                            _2945 = _3238 + _2958;
                            _2946 = _3239 + _2959;
                            _2941 = _3234 + _2954;
                            _2942 = _3235 + _2955;
                            _2943 = _3236 + _2956;
                            if (_2961 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2961;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2944;
                        frontier_phi_67_pred_1 = _2945;
                        frontier_phi_67_pred_2 = _2946;
                        frontier_phi_67_pred_3 = _2943;
                        frontier_phi_67_pred_4 = _2942;
                        frontier_phi_67_pred_5 = _2941;
                    }
                    _2609 = frontier_phi_67_pred;
                    _2611 = frontier_phi_67_pred_1;
                    _2613 = frontier_phi_67_pred_2;
                    _2607 = frontier_phi_67_pred_3;
                    _2605 = frontier_phi_67_pred_4;
                    _2603 = frontier_phi_67_pred_5;
                    uint _2748 = _2747 + 1u;
                    if (_2748 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2741 = _2603;
                        _2742 = _2605;
                        _2743 = _2607;
                        _2744 = _2609;
                        _2745 = _2611;
                        _2746 = _2613;
                        _2747 = _2748;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2611;
                frontier_phi_55_56_ladder_1 = _2613;
                frontier_phi_55_56_ladder_2 = _2609;
                frontier_phi_55_56_ladder_3 = _2607;
                frontier_phi_55_56_ladder_4 = _2605;
                frontier_phi_55_56_ladder_5 = _2603;
            }
            else
            {
                frontier_phi_55_56_ladder = _2497;
                frontier_phi_55_56_ladder_1 = _2499;
                frontier_phi_55_56_ladder_2 = _2495;
                frontier_phi_55_56_ladder_3 = _2493;
                frontier_phi_55_56_ladder_4 = _2491;
                frontier_phi_55_56_ladder_5 = _2489;
            }
            _2602 = frontier_phi_55_56_ladder_5;
            _2604 = frontier_phi_55_56_ladder_4;
            _2606 = frontier_phi_55_56_ladder_3;
            _2608 = frontier_phi_55_56_ladder_2;
            _2610 = frontier_phi_55_56_ladder;
            _2612 = frontier_phi_55_56_ladder_1;
        }
        float _2617 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2401 = (_2617 * _2608) + _1853;
        _2403 = (_2617 * _2610) + _1855;
        _2405 = (_2617 * _2612) + _1857;
        _2407 = ((_2602 * 0.039999999105930328369140625) * _2617) + _2186;
        _2409 = ((_2604 * 0.039999999105930328369140625) * _2617) + _2188;
        _2411 = ((_2606 * 0.039999999105930328369140625) * _2617) + _2190;
    }
    else
    {
        _2401 = _1853;
        _2403 = _1855;
        _2405 = _1857;
        _2407 = _2186;
        _2409 = _2188;
        _2411 = _2190;
    }
    float _4298 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4309 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _4320 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    uint _2431 = _252 + 6u;
    float _2439 = _597 / cbSceneParam._m0[86u].x;
    float _2440 = _598 / cbSceneParam._m0[86u].y;
    vec4 _2454 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2439, _2440, (log2((isnan(cbSceneParam._m0[77u].w) ? _531 : (isnan(_531) ? cbSceneParam._m0[77u].w : min(_531, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2456 = _2454.x;
    float _2457 = _2454.y;
    float _2458 = _2454.z;
    float _2459 = _2454.w;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    if (_531 > cbSceneParam._m0[78u].w)
    {
        float _2514 = isnan(_531) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _531 : min(cbSceneParam._m0[80u].w, _531));
        float _2515 = _2514 / _531;
        float _2526 = _2515 * _582;
        float _2527 = _583 * _2515;
        float _2528 = (-0.0) - _2527;
        float _2530 = _2515 * _584;
        float _2532 = (cbSceneParam._m0[77u].w * _2528) / _2514;
        float _2533 = _2532 + cbSceneParam._m0[79u].w;
        float _2534 = cbSceneParam._m0[79u].w - _2527;
        float _2540 = sqrt(((_2526 * _2526) + (_2527 * _2527)) + (_2530 * _2530));
        float _2543 = (1.0 - (cbSceneParam._m0[77u].w / _2514)) * _2540;
        float _2548 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2550 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2703;
        if (abs((_2528 - _2532) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2703 = ((((_2533 > 0.0) ? exp2(_2548 * _2533) : (2.0 - exp2(_2550 * _2533))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2543;
        }
        else
        {
            float _2663 = 1.0 / cbSceneParam._m0[80u].x;
            float _2664 = isnan(_2534) ? _2533 : (isnan(_2533) ? _2534 : max(_2533, _2534));
            float _2665 = isnan(_2534) ? _2533 : (isnan(_2533) ? _2534 : min(_2533, _2534));
            float _2674 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : min(_2664, 0.0));
            float _2675 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : min(_2665, 0.0));
            _2703 = ((abs(_2540 / _2528) * cbSceneParam._m0[80u].y) * ((((_2674 - _2675) * 2.0) - ((exp2(_2548 * (isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0)))) - exp2(_2548 * (isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0))))) * _2663)) - ((exp2(_2550 * _2674) - exp2(_2550 * _2675)) * _2663))) + (_2543 * cbSceneParam._m0[80u].z);
        }
        vec4 _2705 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2439, _2440, 1.0), 0.0);
        float _2714 = exp2((_2703 * (-1.44269502162933349609375)) * (1.0 - _2705.w));
        float _2715 = log2(_2714);
        float _2731 = log2(_2459);
        _2552 = (exp2(_2731 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].x)) * _2705.x) / cbSceneParam._m0[78u].x)) + _2456;
        _2554 = (exp2(_2731 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].y)) * _2705.y) / cbSceneParam._m0[78u].y)) + _2457;
        _2556 = (exp2(_2731 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2715 * cbSceneParam._m0[78u].z)) * _2705.z) / cbSceneParam._m0[78u].z)) + _2458;
        _2558 = _2714 * _2459;
    }
    else
    {
        _2552 = _2456;
        _2554 = _2457;
        _2556 = _2458;
        _2558 = _2459;
    }
    float _2570 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2571 = _2570 == 3.0;
    float _2572 = log2(_2558);
    float _2579 = exp2(_2572 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2401 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _663))) + ((_2407 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1469)) * cbPerFrame._m0[3u].x));
    float _2580 = exp2(_2572 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2403 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _663))) + ((_2409 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1469)) * cbPerFrame._m0[3u].x));
    float _2581 = exp2(_2572 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2405 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _663))) + ((_2411 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1469)) * cbPerFrame._m0[3u].x));
    float _2590 = (_2570 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2590 * (_2571 ? _2579 : (_2579 + (cbSceneParam._m0[72u].w * _2552)));
    SV_Target.y = _2590 * (_2571 ? _2580 : (_2580 + (cbSceneParam._m0[72u].w * _2554)));
    SV_Target.z = _2590 * (_2571 ? _2581 : (_2581 + (cbSceneParam._m0[72u].w * _2556)));
    SV_Target.w = cbInstanceData._m0[_2431].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2431].w;
}


