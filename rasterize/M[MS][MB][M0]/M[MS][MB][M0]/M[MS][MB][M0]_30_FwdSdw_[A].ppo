#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1066;
float _3712;
float _3713;
float _3714;
float _3715;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _252) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _253) + cbTextureTilingScale._m0[20u].w));
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _328 = _324.z;
    float _332 = (_324.x * 2.0) + (-1.0);
    float _333 = (_324.y * 2.0) + (-1.0);
    float _334 = dot(vec2(_332, _333), vec2(_332, _333));
    float _3724 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _340 = sqrt(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))));
    float _345 = _332 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_298.x * 2.0) + (-1.0)));
    float _346 = _333 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_298.y * 2.0) + (-1.0)));
    float _349 = fma(_340, _220, fma(_346, _227, _345 * _213));
    float _352 = fma(_340, _221, fma(_346, _228, _345 * _214));
    float _355 = fma(_340, _222, fma(_346, _229, _345 * _215));
    float _359 = inversesqrt(dot(vec3(_349, _352, _355), vec3(_349, _352, _355)));
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _397 = _395.x;
    float _398 = 1.0 - _397;
    float _405 = ((_397 - _398) * cbMtdParam._m0[24u].z) + _398;
    float _407 = (cbMtdParam._m0[19u].x + dot(vec4(_359 * _349, _359 * _352, _359 * _355, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_405 * cbMtdParam._m0[21u].z);
    float _3735 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _423 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_405 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3746 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _428 = ((_408 * (cbMtdParam._m0[17u].x - _278)) * _424) + _278;
    float _429 = ((_408 * (cbMtdParam._m0[17u].y - _279)) * _424) + _279;
    float _430 = ((_408 * (cbMtdParam._m0[17u].z - _280)) * _424) + _280;
    float _435 = (((_298.z - _328) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _328;
    vec4 _448 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _455 = (_448.x * 2.0) + (-1.0);
    float _456 = (_448.y * 2.0) + (-1.0);
    float _457 = dot(vec2(_455, _456), vec2(_455, _456));
    float _3757 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _466 = (((_448.z - _435) * _408) * _424) + _435;
    float _481 = (((cbMtdParam._m0[21u].x * _345) + ((_455 - _345) * _408)) * _424) + _345;
    float _482 = (((cbMtdParam._m0[21u].x * _346) + ((_456 - _346) * _408)) * _424) + _346;
    float _483 = (((sqrt(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) - _340) * _408) * _424) + _340;
    float _488 = cbMtdParam._m0[22u].x + _324.w;
    float _491 = fma(_483, _220, fma(_482, _227, _481 * _213));
    float _494 = fma(_483, _221, fma(_482, _228, _481 * _214));
    float _497 = fma(_483, _222, fma(_482, _229, _481 * _215));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    float _502 = _501 * _491;
    float _503 = _501 * _494;
    float _504 = _501 * _497;
    float _3768 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _505 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3790 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3801 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3812 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _523 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _574 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _564);
    float _575 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _564);
    float _576 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _564);
    float _580 = inversesqrt(dot(vec3(_574, _575, _576), vec3(_574, _575, _576)));
    float _581 = _574 * _580;
    float _582 = _575 * _580;
    float _583 = _576 * _580;
    vec4 _588 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _590 = _588.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _747 = sqrt(((_574 * _574) + (_575 * _575)) + (_576 * _576));
        float _753 = (cbMatDynParam._m0[5u].x * _747) + cbMatDynParam._m0[5u].y;
        float _3823 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _758 = (cbMatDynParam._m0[5u].z * _747) + cbMatDynParam._m0[5u].w;
        float _3834 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) - _754)) + _754) < ((_590 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _602 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _603 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _623 = fma(_504, cbSceneParam._m0[5u].z, fma(_503, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _502));
    float _626 = fma(_504, cbSceneParam._m0[6u].z, fma(_503, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _502));
    float _629 = fma(_504, cbSceneParam._m0[7u].z, fma(_503, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _502));
    uint _642 = _232 + 9u;
    uint _643 = _642 + uint(cbMatDynParam._m0[0u].w);
    float _649 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_643].x;
    float _650 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_643].y;
    float _651 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_643].z;
    float _3845 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    vec4 _663 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _602, cbSceneParam._m0[86u].y * _603));
    float _667 = ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * TEXCOORD_5.w) * _663.x;
    float _668 = dot(vec3(_502, _503, _504), vec3(_581, _582, _583));
    float _671 = _668 * 2.0;
    float _675 = (_671 * _502) - _581;
    float _676 = (_671 * _503) - _582;
    float _677 = (_671 * _504) - _583;
    float _681 = abs(dot(vec3(_581, _582, _583), vec3(_502, _503, _504)));
    float _3878 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _683 = sqrt(_505);
    float _696 = exp2((_683 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_683 * 3.0));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1065;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _790 = fma(_736, cbModelParam._m0[26u].z, fma(_732, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _728));
        float _794 = fma(_736, cbModelParam._m0[27u].z, fma(_732, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _728));
        float _798 = fma(_736, cbModelParam._m0[28u].z, fma(_732, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _728));
        float _823 = _728 + _502;
        float _824 = _732 + _503;
        float _825 = _736 + _504;
        float _835 = fma(_825, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _823)) - _790;
        float _836 = fma(_825, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _823)) - _794;
        float _837 = fma(_825, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _823)) - _798;
        float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
        float _854 = ((_841 * _835) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_790 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_841 * _836) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_794 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_841 * _837) / cbModelParam._m0[34u].z) + ((((((_798 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        float _893 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_859.x + (-0.5));
        float _895 = _893 * (_859.y + (-0.5));
        float _896 = _893 * (_859.z + (-0.5));
        float _903 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_866.x + (-0.5));
        float _905 = _903 * (_866.y + (-0.5));
        float _906 = _903 * (_866.z + (-0.5));
        float _913 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_873.x + (-0.5));
        float _915 = _913 * (_873.y + (-0.5));
        float _916 = _913 * (_873.z + (-0.5));
        float _923 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_880.x + (-0.5));
        float _925 = _923 * (_880.y + (-0.5));
        float _926 = _923 * (_880.z + (-0.5));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = _894 * 0.5;
        float _931 = _904 * 0.5;
        float _932 = _914 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _947 = (dot(vec3(_502, _503, _504), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _957 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3926 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_959 + 1.0))) + _964) * _927;
        float _974 = _895 * 0.5;
        float _975 = _905 * 0.5;
        float _976 = _915 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_502, _503, _504), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3959 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1001 + 1.0))) + _1006) * _928;
        float _1016 = _896 * 0.5;
        float _1017 = _906 * 0.5;
        float _1018 = _916 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_502, _503, _504), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3992 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1043 + 1.0))) + _1048) * _929;
        _1065 = _896;
        _1067 = _895;
        _1068 = _894;
        _1069 = _906;
        _1070 = _905;
        _1071 = _904;
        _1072 = _916;
        _1073 = _915;
        _1074 = _914;
        _1075 = _929;
        _1076 = _928;
        _1077 = _927;
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
    }
    else
    {
        _1065 = _1066;
        _1067 = _1066;
        _1068 = _1066;
        _1069 = _1066;
        _1070 = _1066;
        _1071 = _1066;
        _1072 = _1066;
        _1073 = _1066;
        _1074 = _1066;
        _1075 = _1066;
        _1076 = _1066;
        _1077 = _1066;
        _1078 = 0.0;
        _1079 = 0.0;
        _1080 = 0.0;
    }
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1108 = fma(_736, cbModelParam._m0[30u].z, fma(_732, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _728));
        float _1112 = fma(_736, cbModelParam._m0[31u].z, fma(_732, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _728));
        float _1116 = fma(_736, cbModelParam._m0[32u].z, fma(_732, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _728));
        float _1139 = _728 + _502;
        float _1140 = _732 + _503;
        float _1141 = _736 + _504;
        float _1151 = fma(_1141, cbModelParam._m0[30u].z, fma(_1140, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139)) - _1108;
        float _1152 = fma(_1141, cbModelParam._m0[31u].z, fma(_1140, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139)) - _1112;
        float _1153 = fma(_1141, cbModelParam._m0[32u].z, fma(_1140, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139)) - _1116;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1108 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1112 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[35u].z) + ((((((_1116 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1207 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1174.x + (-0.5));
        float _1209 = _1207 * (_1174.y + (-0.5));
        float _1210 = _1207 * (_1174.z + (-0.5));
        float _1217 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1218 = _1217 * (_1181.x + (-0.5));
        float _1219 = _1217 * (_1181.y + (-0.5));
        float _1220 = _1217 * (_1181.z + (-0.5));
        float _1227 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1188.x + (-0.5));
        float _1229 = _1227 * (_1188.y + (-0.5));
        float _1230 = _1227 * (_1188.z + (-0.5));
        float _1237 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1195.x + (-0.5));
        float _1239 = _1237 * (_1195.y + (-0.5));
        float _1240 = _1237 * (_1195.z + (-0.5));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = _1208 * 0.5;
        float _1245 = _1218 * 0.5;
        float _1246 = _1228 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_502, _503, _504), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4055 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1271 + 1.0))) + _1276) * _1241;
        float _1286 = _1209 * 0.5;
        float _1287 = _1219 * 0.5;
        float _1288 = _1229 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_502, _503, _504), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4088 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1313 + 1.0))) + _1318) * _1242;
        float _1328 = _1210 * 0.5;
        float _1329 = _1220 * 0.5;
        float _1330 = _1230 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_502, _503, _504), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4121 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1355 + 1.0))) + _1360) * _1243;
        _1377 = _1210;
        _1378 = _1209;
        _1379 = _1208;
        _1380 = _1220;
        _1381 = _1219;
        _1382 = _1218;
        _1383 = _1230;
        _1384 = _1229;
        _1385 = _1228;
        _1386 = _1243;
        _1387 = _1242;
        _1388 = _1241;
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1066;
        _1378 = _1066;
        _1379 = _1066;
        _1380 = _1066;
        _1381 = _1066;
        _1382 = _1066;
        _1383 = _1066;
        _1384 = _1066;
        _1385 = _1066;
        _1386 = _1066;
        _1387 = _1066;
        _1388 = _1066;
        _1389 = 0.0;
        _1390 = 0.0;
        _1391 = 0.0;
    }
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1078)) + _1078;
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1079)) + _1079;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1080)) + _1080;
    float _1424 = fma(_1403, cbSceneParam._m0[89u].z, fma(_1402, cbSceneParam._m0[89u].y, _1401 * cbSceneParam._m0[89u].x));
    float _1427 = fma(_1403, cbSceneParam._m0[90u].z, fma(_1402, cbSceneParam._m0[90u].y, _1401 * cbSceneParam._m0[90u].x));
    float _1430 = fma(_1403, cbSceneParam._m0[91u].z, fma(_1402, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1401));
    float _1445 = _675 * 0.5;
    float _1446 = _676 * 0.5;
    float _1447 = _677 * 0.5;
    float _1448 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1451 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1454 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1488;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1461 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1065, _1069, _1072, _1075));
        float _1465 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1469 = dot(vec4(_1445, _1446, _1447, 1.0), vec4(_1068, _1071, _1074, _1077));
        float _1476 = dot(vec4(cbModelParam._m0[39u]), vec4(_1445, _1446, _1447, 1.0));
        _1488 = dot(vec3(isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1476) ? 0.0 : (isnan(0.0) ? _1476 : max(0.0, _1476))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1488 = 1.0;
    }
    float _1499;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1490 = dot(vec4(cbModelParam._m0[40u]), vec4(_1445, _1446, _1447, 1.0));
        _1499 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1490) ? 0.0 : (isnan(0.0) ? _1490 : max(0.0, _1490))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1499 = 1.0;
    }
    float _1503 = (_1499 * cbModelParam._m0[1u].x) + (_1488 * (1.0 - cbModelParam._m0[1u].x));
    float _1513 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _505);
    float _1514 = isnan(_1513) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1513 : min(cbModelParam._m0[25u].z, _1513));
    float _1595;
    float _1597;
    float _1599;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1562 = fma(_736, cbModelParam._m0[13u].z, fma(_732, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728)) + cbModelParam._m0[13u].w;
        float _1566 = fma(_736, cbModelParam._m0[14u].z, fma(_732, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728)) + cbModelParam._m0[14u].w;
        float _1570 = fma(_736, cbModelParam._m0[15u].z, fma(_732, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728)) + cbModelParam._m0[15u].w;
        float _1573 = fma(_677, cbModelParam._m0[13u].z, fma(_676, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675));
        float _1576 = fma(_677, cbModelParam._m0[14u].z, fma(_676, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675));
        float _1579 = fma(_677, cbModelParam._m0[15u].z, fma(_676, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675));
        float _1607;
        if (_1573 > 0.0)
        {
            _1607 = abs((1.0 - _1562) / _1573);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1562 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1607 = frontier_phi_17_15_ladder;
        }
        float _1778;
        if (_1576 > 0.0)
        {
            _1778 = abs((1.0 - _1566) / _1576);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1566 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1778 = frontier_phi_26_22_ladder;
        }
        float _2074;
        if (_1579 > 0.0)
        {
            _2074 = abs((1.0 - _1570) / _1579);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1570 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2074 = frontier_phi_38_33_ladder;
        }
        float _2076 = isnan(_1778) ? _1607 : (isnan(_1607) ? _1778 : min(_1607, _1778));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1573) + _1562;
        float _2082 = (_2077 * _1576) + _1566;
        float _2083 = (_2077 * _1579) + _1570;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2086 = (-1.0) - _2084;
        float _2088 = _2084 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2083 > _2088) || ((_2083 < _2086) || ((_2082 > _2088) || ((_2082 < _2086) || ((_2081 < _2086) || (_2081 > _2088))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2228 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2083, cbModelParam._m0[9u].z, fma(_2082, cbModelParam._m0[9u].y, _2081 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2083, cbModelParam._m0[10u].z, fma(_2082, cbModelParam._m0[10u].y, _2081 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2083, cbModelParam._m0[11u].z, fma(_2082, cbModelParam._m0[11u].y, _2081 * cbModelParam._m0[11u].x))), _1514);
            frontier_phi_16_38_ladder = _2228.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2228.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2228.x * cbModelParam._m0[1u].y;
        }
        _1595 = frontier_phi_16_38_ladder_2;
        _1597 = frontier_phi_16_38_ladder_1;
        _1599 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_675, _676, _677), _1514);
        _1595 = _1583.x * cbModelParam._m0[1u].y;
        _1597 = _1583.y * cbModelParam._m0[1u].y;
        _1599 = _1583.z * cbModelParam._m0[1u].y;
    }
    float _1603 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _505);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1603 : min(cbModelParam._m0[25u].w, _1603));
    float _1694;
    float _1696;
    float _1698;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1658 = fma(_736, cbModelParam._m0[21u].z, fma(_732, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728)) + cbModelParam._m0[21u].w;
        float _1662 = fma(_736, cbModelParam._m0[22u].z, fma(_732, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728)) + cbModelParam._m0[22u].w;
        float _1666 = fma(_736, cbModelParam._m0[23u].z, fma(_732, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728)) + cbModelParam._m0[23u].w;
        float _1669 = fma(_677, cbModelParam._m0[21u].z, fma(_676, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675));
        float _1672 = fma(_677, cbModelParam._m0[22u].z, fma(_676, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675));
        float _1675 = fma(_677, cbModelParam._m0[23u].z, fma(_676, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675));
        float _1783;
        if (_1669 > 0.0)
        {
            _1783 = abs((1.0 - _1658) / _1669);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1658 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1783 = frontier_phi_28_24_ladder;
        }
        float _2101;
        if (_1672 > 0.0)
        {
            _2101 = abs((1.0 - _1662) / _1672);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1662 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2101 = frontier_phi_40_35_ladder;
        }
        float _2428;
        if (_1675 > 0.0)
        {
            _2428 = abs((1.0 - _1666) / _1675);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1666 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2428 = frontier_phi_50_47_ladder;
        }
        float _2430 = isnan(_2101) ? _1783 : (isnan(_1783) ? _2101 : min(_1783, _2101));
        float _2431 = isnan(_2428) ? _2430 : (isnan(_2430) ? _2428 : min(_2430, _2428));
        float _2435 = (_2431 * _1669) + _1658;
        float _2436 = (_2431 * _1672) + _1662;
        float _2437 = (_2431 * _1675) + _1666;
        float _2438 = _2431 * 9.9999997473787516355514526367188e-05;
        float _2439 = (-1.0) - _2438;
        float _2441 = _2438 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2437 > _2441) || ((_2437 < _2439) || ((_2436 > _2441) || ((_2436 < _2439) || ((_2435 < _2439) || (_2435 > _2441))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2437, cbModelParam._m0[17u].z, fma(_2436, cbModelParam._m0[17u].y, _2435 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2437, cbModelParam._m0[18u].z, fma(_2436, cbModelParam._m0[18u].y, _2435 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2437, cbModelParam._m0[19u].z, fma(_2436, cbModelParam._m0[19u].y, _2435 * cbModelParam._m0[19u].x))), _1604);
            frontier_phi_25_50_ladder = _2555.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2555.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2555.x * cbModelParam._m0[1u].z;
        }
        _1694 = frontier_phi_25_50_ladder_2;
        _1696 = frontier_phi_25_50_ladder_1;
        _1698 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_675, _676, _677), _1604);
        _1694 = _1678.x * cbModelParam._m0[1u].z;
        _1696 = _1678.y * cbModelParam._m0[1u].z;
        _1698 = _1678.z * cbModelParam._m0[1u].z;
    }
    float _1710 = ((((1.0 - _696) * ((_683 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_696 * _683)) * _667;
    float _1711 = _1710 * ((cbModelParam._m0[1u].w * (_1694 - _1595)) + _1595);
    float _1712 = _1710 * ((cbModelParam._m0[1u].w * (_1696 - _1597)) + _1597);
    float _1713 = _1710 * ((cbModelParam._m0[1u].w * (_1698 - _1599)) + _1599);
    float _1716 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, _1711 * cbSceneParam._m0[91u].x));
    float _1757 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1761 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1765 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1769 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1770 = _1757 / _1769;
    float _1771 = _1761 / _1769;
    float _1772 = _1765 / _1769;
    float _1919;
    float _1920;
    float _1921;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1799 = ((uint(_1772 > cbSceneParam._m0[59u].y) + uint(_1772 > cbSceneParam._m0[59u].x)) + uint(_1772 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1800 = _1799 + 43u;
        uint _1808 = _1799 + 44u;
        uint _1816 = _1799 + 45u;
        uint _1824 = _1799 + 46u;
        float _1835 = fma(_1769, cbSceneParam._m0[_1800].w, fma(_1765, cbSceneParam._m0[_1800].z, fma(_1761, cbSceneParam._m0[_1800].y, _1757 * cbSceneParam._m0[_1800].x)));
        float _1839 = fma(_1769, cbSceneParam._m0[_1808].w, fma(_1765, cbSceneParam._m0[_1808].z, fma(_1761, cbSceneParam._m0[_1808].y, _1757 * cbSceneParam._m0[_1808].x)));
        float _1847 = fma(_1769, cbSceneParam._m0[_1824].w, fma(_1765, cbSceneParam._m0[_1824].z, fma(_1761, cbSceneParam._m0[_1824].y, _1757 * cbSceneParam._m0[_1824].x)));
        float _1852 = cbSceneParam._m0[33u].z * _1847;
        float _1854 = cbSceneParam._m0[33u].w * _1847;
        float _1857 = fma(_1769, cbSceneParam._m0[_1816].w, fma(_1765, cbSceneParam._m0[_1816].z, fma(_1761, cbSceneParam._m0[_1816].y, _1757 * cbSceneParam._m0[_1816].x))) / _1847;
        float _1905 = (cbSceneParam._m0[33u].x - sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772))) * cbSceneParam._m0[33u].y;
        float _4247 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1912 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1852 + _1835) / _1847, (_1854 + _1839) / _1847), _1857), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1854 + _1835) / _1847, (_1839 - _1852) / _1847), _1857), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1835 - _1852) / _1847, (_1839 - _1854) / _1847), _1857), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1835 - _1854) / _1847, (_1852 + _1839) / _1847), _1857), 0.0)).x), vec4(0.25)));
        _1919 = 1.0 - (_1912 * cbSceneParam._m0[34u].x);
        _1920 = 1.0 - (_1912 * cbSceneParam._m0[34u].y);
        _1921 = 1.0 - (_1912 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1919 = 1.0;
        _1920 = 1.0;
        _1921 = 1.0;
    }
    float _1985;
    float _1987;
    float _1989;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1973 = fma(_1769, cbSceneParam._m0[63u].w, fma(_1765, cbSceneParam._m0[63u].z, fma(_1761, cbSceneParam._m0[63u].y, _1757 * cbSceneParam._m0[63u].x)));
        float _1974 = fma(_1769, cbSceneParam._m0[60u].w, fma(_1765, cbSceneParam._m0[60u].z, fma(_1761, cbSceneParam._m0[60u].y, _1757 * cbSceneParam._m0[60u].x))) / _1973;
        float _1975 = fma(_1769, cbSceneParam._m0[61u].w, fma(_1765, cbSceneParam._m0[61u].z, fma(_1761, cbSceneParam._m0[61u].y, _1757 * cbSceneParam._m0[61u].x))) / _1973;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1974 >= cbSceneParam._m0[64u].x) && (_1975 >= cbSceneParam._m0[64u].y)) && (_1974 <= cbSceneParam._m0[64u].z)) && (_1975 <= cbSceneParam._m0[64u].w))
        {
            float _2114 = fma(_1769, cbSceneParam._m0[62u].w, fma(_1765, cbSceneParam._m0[62u].z, fma(_1761, cbSceneParam._m0[62u].y, _1757 * cbSceneParam._m0[62u].x))) / _1973;
            float _2118 = isnan(cbSceneParam._m0[41u].w) ? _2114 : (isnan(_2114) ? cbSceneParam._m0[41u].w : max(_2114, cbSceneParam._m0[41u].w));
            float _2161 = (cbSceneParam._m0[33u].x - sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772))) * cbSceneParam._m0[33u].y;
            float _4263 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
            float _2168 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1974, cbSceneParam._m0[33u].w + _1975), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1974, _1975 - cbSceneParam._m0[33u].z), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1974 - cbSceneParam._m0[33u].z, _1975 - cbSceneParam._m0[33u].w), _2118), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1974 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1975), _2118), 0.0)).x), vec4(0.25)));
            float _2172 = 1.0 - (_2168 * cbSceneParam._m0[34u].x);
            float _2173 = 1.0 - (_2168 * cbSceneParam._m0[34u].y);
            float _2174 = 1.0 - (_2168 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2174) ? _1921 : (isnan(_1921) ? _2174 : min(_1921, _2174));
            frontier_phi_37_36_ladder_1 = isnan(_2173) ? _1920 : (isnan(_1920) ? _2173 : min(_1920, _2173));
            frontier_phi_37_36_ladder_2 = isnan(_2172) ? _1919 : (isnan(_1919) ? _2172 : min(_1919, _2172));
        }
        else
        {
            frontier_phi_37_36_ladder = _1921;
            frontier_phi_37_36_ladder_1 = _1920;
            frontier_phi_37_36_ladder_2 = _1919;
        }
        _1985 = frontier_phi_37_36_ladder_2;
        _1987 = frontier_phi_37_36_ladder_1;
        _1989 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1985 = _1919;
        _1987 = _1920;
        _1989 = _1921;
    }
    uvec4 _1994 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1996 = _1994.x * 14u;
    uint _1997 = _1996 + 13u;
    float _2004 = _667 + (-1.0);
    float _2009 = (cbLight._m0[_1997].x * _2004) + 1.0;
    float _2010 = (cbLight._m0[_1997].y * _2004) + 1.0;
    float _2011 = (cbLight._m0[_1997].z * _2004) + 1.0;
    float _2012 = (cbLight._m0[_1997].w * _2004) + 1.0;
    uint _2013 = _1996 + 5u;
    float _2019 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2023 = _1996 + 4u;
    float _2033 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2037 = _1996 | 1u;
    float _2048 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_502, _503, _504));
    float _2051 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_502, _503, _504));
    float _4299 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _4310 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2056 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * 0.3183098733425140380859375;
    float _2058 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * 0.3183098733425140380859375;
    float _2065 = ((cbLight._m0[_2013].x * _2019) * _2058) + (((cbLight._m0[_2023].x * _1985) * _2033) * _2056);
    float _2066 = ((_2019 * cbLight._m0[_2013].y) * _2058) + (((cbLight._m0[_2023].y * _1987) * _2033) * _2056);
    float _2067 = ((_2019 * cbLight._m0[_2013].z) * _2058) + (((cbLight._m0[_2023].z * _1989) * _2033) * _2056);
    uvec4 _2071 = floatBitsToUint(cbLight._m0[_1996 + 12u]);
    bool _2073 = _2071.x == 0u;
    float _2175;
    float _2177;
    float _2179;
    if (_2073)
    {
        _2175 = _2065;
        _2177 = _2066;
        _2179 = _2067;
    }
    else
    {
        uint _2183 = _1996 + 6u;
        float _2199 = (dot(vec3(cbLight._m0[_1996 + 2u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _2200 = _2199 * _2199;
        float _4321 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2201 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2202 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2175 = (((cbLight._m0[_2183].x * 0.3183098733425140380859375) * _2201) * _2202) + _2065;
        _2177 = (((cbLight._m0[_2183].y * 0.3183098733425140380859375) * _2201) * _2202) + _2066;
        _2179 = (((cbLight._m0[_2183].z * 0.3183098733425140380859375) * _2201) * _2202) + _2067;
    }
    bool _2182 = _2071.y == 0u;
    float _2237;
    float _2239;
    float _2241;
    if (_2182)
    {
        _2237 = _2175;
        _2239 = _2177;
        _2241 = _2179;
    }
    else
    {
        uint _2399 = _1996 + 7u;
        float _2415 = (dot(vec3(cbLight._m0[_1996 + 3u].xyz), vec3(_502, _503, _504)) * 0.5) + 0.5;
        float _2416 = _2415 * _2415;
        float _4337 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2417 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2418 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2237 = (((cbLight._m0[_2399].x * 0.3183098733425140380859375) * _2417) * _2418) + _2175;
        _2239 = (((cbLight._m0[_2399].y * 0.3183098733425140380859375) * _2417) * _2418) + _2177;
        _2241 = (((cbLight._m0[_2399].z * 0.3183098733425140380859375) * _2417) * _2418) + _2179;
    }
    uint _2244 = _1996 + 8u;
    float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _505) * 0.949999988079071044921875);
    float _2258 = _2257 * _2257;
    float _2259 = cbLight._m0[_1996].x + _581;
    float _2260 = cbLight._m0[_1996].y + _582;
    float _2261 = cbLight._m0[_1996].z + _583;
    float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
    float _2266 = _2265 * _2259;
    float _2267 = _2265 * _2260;
    float _2268 = _2265 * _2261;
    float _2269 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1996].xyz));
    float _4353 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _4364 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _2273 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2274 = dot(vec3(_502, _503, _504), vec3(_2266, _2267, _2268));
    float _4375 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2278 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2266, _2267, _2268));
    float _4386 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2282 = _2258 * _2258;
    float _2286 = ((_2277 * _2277) * (_2282 + (-1.0))) + 1.0;
    float _2297 = (exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2298 = 1.0 - _2258;
    float _2309 = (0.5 / (((_2273 * ((_2272 * _2298) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2298) + _2258) * _2272))) * _2272;
    float _4397 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2282 / ((_2286 * _2286) * 3.141590118408203125));
    uint _2325 = _1996 + 9u;
    float _2336 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _505) * 0.949999988079071044921875);
    float _2337 = _2336 * _2336;
    float _2338 = cbLight._m0[_2037].x + _581;
    float _2339 = cbLight._m0[_2037].y + _582;
    float _2340 = cbLight._m0[_2037].z + _583;
    float _2344 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
    float _2345 = _2344 * _2338;
    float _2346 = _2344 * _2339;
    float _2347 = _2344 * _2340;
    float _2348 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2037].xyz));
    float _4408 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2352 = dot(vec3(_502, _503, _504), vec3(_2345, _2346, _2347));
    float _4419 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2356 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2345, _2346, _2347));
    float _4430 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2360 = _2337 * _2337;
    float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
    float _2373 = (exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2374 = 1.0 - _2337;
    float _2384 = (0.5 / (((_2273 * ((_2351 * _2374) + _2337)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2374) + _2337) * _2351))) * _2351;
    float _4441 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2386 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
    float _2396 = (((_2373 * cbLight._m0[_2325].x) * _2386) * _2019) + ((((cbLight._m0[_2244].x * _1985) * _2297) * _2311) * _2033);
    float _2397 = (((_2373 * cbLight._m0[_2325].y) * _2386) * _2019) + ((((cbLight._m0[_2244].y * _1987) * _2297) * _2311) * _2033);
    float _2398 = (((_2373 * cbLight._m0[_2325].z) * _2386) * _2019) + ((((cbLight._m0[_2244].z * _1989) * _2297) * _2311) * _2033);
    float _2454;
    float _2456;
    float _2458;
    if (_2073)
    {
        _2454 = _2396;
        _2456 = _2397;
        _2458 = _2398;
    }
    else
    {
        uint _2460 = _1996 + 2u;
        uint _2464 = _1996 + 10u;
        float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _505) * 0.949999988079071044921875);
        float _2479 = _2478 * _2478;
        float _2480 = cbLight._m0[_2460].x + _581;
        float _2481 = cbLight._m0[_2460].y + _582;
        float _2482 = cbLight._m0[_2460].z + _583;
        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
        float _2487 = _2486 * _2480;
        float _2488 = _2486 * _2481;
        float _2489 = _2486 * _2482;
        float _2490 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2460].xyz));
        float _4452 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2494 = dot(vec3(_502, _503, _504), vec3(_2487, _2488, _2489));
        float _4463 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2498 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2487, _2488, _2489));
        float _4474 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2502 = _2479 * _2479;
        float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
        float _2515 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2516 = 1.0 - _2479;
        float _2526 = (0.5 / (((_2273 * ((_2493 * _2516) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2516) + _2479) * _2493))) * _2493;
        float _4485 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2454 = (((_2515 * cbLight._m0[_2464].x) * _2528) * _2529) + _2396;
        _2456 = (((_2515 * cbLight._m0[_2464].y) * _2528) * _2529) + _2397;
        _2458 = (((_2515 * cbLight._m0[_2464].z) * _2528) * _2529) + _2398;
    }
    float _2560;
    float _2562;
    float _2564;
    if (_2182)
    {
        _2560 = _2454;
        _2562 = _2456;
        _2564 = _2458;
    }
    else
    {
        uint _2571 = _1996 + 3u;
        uint _2575 = _1996 + 11u;
        float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2571].w)) * _505) * 0.949999988079071044921875);
        float _2590 = _2589 * _2589;
        float _2591 = cbLight._m0[_2571].x + _581;
        float _2592 = cbLight._m0[_2571].y + _582;
        float _2593 = cbLight._m0[_2571].z + _583;
        float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
        float _2598 = _2597 * _2591;
        float _2599 = _2597 * _2592;
        float _2600 = _2597 * _2593;
        float _2601 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_2571].xyz));
        float _4501 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2605 = dot(vec3(_502, _503, _504), vec3(_2598, _2599, _2600));
        float _4512 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2609 = dot(vec3(cbLight._m0[_2571].xyz), vec3(_2598, _2599, _2600));
        float _4523 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2613 = _2590 * _2590;
        float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
        float _2626 = (exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2627 = 1.0 - _2590;
        float _2637 = (0.5 / (((_2273 * ((_2604 * _2627) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2273 * _2627) + _2590) * _2604))) * _2604;
        float _4534 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2639 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
        float _2640 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2560 = (((_2626 * cbLight._m0[_2575].x) * _2639) * _2640) + _2454;
        _2562 = (((_2626 * cbLight._m0[_2575].y) * _2639) * _2640) + _2456;
        _2564 = (((_2626 * cbLight._m0[_2575].z) * _2639) * _2640) + _2458;
    }
    float _2706;
    float _2708;
    float _2710;
    float _2712;
    float _2714;
    float _2716;
    if (_1994.y == 0u)
    {
        uvec4 _2661 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2662 = _2661.x;
        uint _2673 = uint((float(_2661.y) * floor(float(uint(cbSceneParam._m0[85u].y * _603) / _2662))) + floor(float(uint(cbSceneParam._m0[85u].x * _602) / _2662)));
        float _2683 = (log2(_1772 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2684 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        uint _2687 = uint(isnan(14.0) ? _2684 : (isnan(_2684) ? 14.0 : min(_2684, 14.0)));
        uvec4 _2692 = texelFetch(g_lightClusterGridBuffer, int(((_2687 << 2u) + (_2673 << 6u)) >> 2u));
        uint _2693 = _2692.x;
        uint _2694 = _2661.z;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        if (((((1u << ((_2694 >> 4u) & 15u)) + 4294967295u) & _2693) == 0u) || ((_2694 & 240u) == 0u))
        {
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
            _2783 = 0.0;
        }
        else
        {
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2784;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            uint _2932 = 0u;
            uint _2941;
            bool _2942;
            for (;;)
            {
                _2941 = texelFetch(g_lightClassification, int((((_2687 << 5u) + (_2673 << 9u)) + (_2932 << 2u)) >> 2u)).x;
                _2942 = _2941 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2942)
                {
                    frontier_phi_71_pred = _2931;
                    frontier_phi_71_pred_1 = _2930;
                    frontier_phi_71_pred_2 = _2929;
                    frontier_phi_71_pred_3 = _2928;
                    frontier_phi_71_pred_4 = _2927;
                    frontier_phi_71_pred_5 = _2926;
                }
                else
                {
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    uint _3077;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2941;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    for (;;)
                    {
                        uint _3081 = uint(findLSB(_3077)) + (_2932 << 5u);
                        uint _3078 = (_3077 + 4294967295u) & _3077;
                        uint _3083 = _3081 * 48u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3103 = (_3081 * 48u) + 4u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 3u)).x));
                        uint _3122 = (_3081 * 48u) + 8u;
                        vec3 _3133 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x));
                        float _3137 = _3097.x - _1770;
                        float _3138 = _3097.y - _1771;
                        float _3139 = _3097.z - _1772;
                        float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                        float _3143 = inversesqrt(_3140);
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3147 = dot(vec3(_623, _626, _629), vec3(_3144, _3145, _3146));
                        float _3152 = 1.0 - (_3140 * _3097.w);
                        float _4560 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3154 = sqrt(_3140) * _3116.w;
                        float _3157 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                        float _3158 = _3157 * _3157;
                        float _3161 = ((1.0 - _3158) * _3147) + _3158;
                        float _3164 = _3154 * _3154;
                        float _3168 = ((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3153) / ((_3164 * 0.699999988079071044921875) + 1.0);
                        float _3172 = (-0.0) - _1770;
                        float _3173 = (-0.0) - _1771;
                        float _3174 = (-0.0) - _1772;
                        float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3188 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                        float _3189 = 1.0 - _683;
                        float _3196 = sqrt(1.0 - ((1.0 - (_3189 * _3189)) * (1.0 - (_3188 * _3188))));
                        float _3197 = _3196 * _3196;
                        float _3198 = _3197 * _3197;
                        float _3199 = _3179 + _3144;
                        float _3200 = _3180 + _3145;
                        float _3201 = _3181 + _3146;
                        float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                        float _3209 = dot(vec3(_623, _626, _629), vec3(_3179, _3180, _3181));
                        float _4576 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3212 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3213 = dot(vec3(_623, _626, _629), vec3(_3205 * _3199, _3205 * _3200, _3205 * _3201));
                        float _4587 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3216 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3220 = ((_3216 * _3216) * (_3198 + (-1.0))) + 1.0;
                        float _3221 = _3157 * _3197;
                        float _3222 = _3221 * _3221;
                        float _3225 = ((1.0 - _3222) * _3147) + _3222;
                        float _4598 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3227 = 1.0 - _3197;
                        float _3237 = (0.5 / (((_3226 * ((_3212 * _3227) + _3197)) + 9.9999999392252902907785028219223e-09) + (((_3226 * _3227) + _3197) * _3212))) * _3226;
                        float _4609 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3248 = (((_3198 * 3.1415927410125732421875) * (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) / ((_3220 * _3220) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125))) * _3153;
                        _3001 = (_3168 * _3116.x) + _3074;
                        _3002 = (_3168 * _3116.y) + _3075;
                        _3003 = (_3168 * _3116.z) + _3076;
                        _2998 = (_3248 * _3133.x) + _3071;
                        _2999 = (_3248 * _3133.y) + _3072;
                        _3000 = (_3248 * _3133.z) + _3073;
                        if (_3078 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3078;
                        }
                    }
                    frontier_phi_71_pred = _3003;
                    frontier_phi_71_pred_1 = _3002;
                    frontier_phi_71_pred_2 = _3001;
                    frontier_phi_71_pred_3 = _3000;
                    frontier_phi_71_pred_4 = _2999;
                    frontier_phi_71_pred_5 = _2998;
                }
                _2784 = frontier_phi_71_pred;
                _2782 = frontier_phi_71_pred_1;
                _2780 = frontier_phi_71_pred_2;
                _2778 = frontier_phi_71_pred_3;
                _2776 = frontier_phi_71_pred_4;
                _2774 = frontier_phi_71_pred_5;
                uint _2933 = _2932 + 1u;
                if (_2933 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2926 = _2774;
                    _2927 = _2776;
                    _2928 = _2778;
                    _2929 = _2780;
                    _2930 = _2782;
                    _2931 = _2784;
                    _2932 = _2933;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
            _2783 = _2784;
        }
        uvec4 _2787 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2788 = _2787.z;
        uint _2790 = (_2788 >> 8u) & 15u;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        if (((4294967295u << _2790) & _2693) == 0u)
        {
            _2894 = _2773;
            _2896 = _2775;
            _2898 = _2777;
            _2900 = _2779;
            _2902 = _2781;
            _2904 = _2783;
        }
        else
        {
            float _2919 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
            float _2920 = _2919 * _1770;
            float _2921 = _2919 * _1771;
            float _2922 = _2919 * _1772;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2790 < ((_2788 >> 12u) & 15u))
            {
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _3054 = _2773;
                float _3055 = _2775;
                float _3056 = _2777;
                float _3057 = _2779;
                float _3058 = _2781;
                float _3059 = _2783;
                uint _3060 = _2790;
                uint _3069;
                bool _3070;
                for (;;)
                {
                    _3069 = texelFetch(g_lightClassification, int((((_2687 << 5u) + (_2673 << 9u)) + (_3060 << 2u)) >> 2u)).x;
                    _3070 = _3069 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3070)
                    {
                        frontier_phi_82_pred = _3059;
                        frontier_phi_82_pred_1 = _3058;
                        frontier_phi_82_pred_2 = _3057;
                        frontier_phi_82_pred_3 = _3056;
                        frontier_phi_82_pred_4 = _3055;
                        frontier_phi_82_pred_5 = _3054;
                    }
                    else
                    {
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3275 = _3054;
                        float _3276 = _3055;
                        float _3277 = _3056;
                        float _3278 = _3057;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        uint _3281 = _3069;
                        uint _3282;
                        vec4 _3307;
                        float _3308;
                        vec4 _3323;
                        vec3 _3335;
                        vec4 _3351;
                        vec4 _3366;
                        float _3412;
                        bool _3413;
                        for (;;)
                        {
                            uint _3292 = ((_3060 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3281));
                            _3282 = (_3281 + 4294967295u) & _3281;
                            uint _3294 = _3292 * 40u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            _3308 = _3307.w;
                            uint _3310 = (_3292 * 40u) + 4u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3325 = (_3292 * 40u) + 8u;
                            _3335 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x));
                            uint _3338 = (_3292 * 40u) + 16u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3292 * 40u) + 20u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3292 * 40u) + 24u;
                            vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3387 = (_3292 * 40u) + 28u;
                            vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3412 = fma(_1772, _3400.z, fma(_1771, _3400.y, _3400.x * _1770)) + _3400.w;
                            _3413 = !((fma(_1772, _3381.z, fma(_1771, _3381.y, _3381.x * _1770)) + _3381.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3413)
                            {
                                float _3440 = _3307.x - _1770;
                                float _3441 = _3307.y - _1771;
                                float _3442 = _3307.z - _1772;
                                float _3443 = dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442));
                                float _3446 = inversesqrt(_3443);
                                float _3447 = _3446 * _3440;
                                float _3448 = _3446 * _3441;
                                float _3449 = _3446 * _3442;
                                float _3453 = 1.0 - (_3443 / (_3308 * _3308));
                                float _4620 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3458 = sqrt(_3443) * _3323.w;
                                float _3460 = 1.39999997615814208984375 / (_3458 + 1.39999997615814208984375);
                                float _3461 = _3460 * _3460;
                                float _3464 = ((1.0 - _3461) * dot(vec3(_3447, _3448, _3449), vec3(_623, _626, _629))) + _3461;
                                float _3467 = _3458 * _3458;
                                float _3471 = (fma(_1772, _3351.z, fma(_1771, _3351.y, _3351.x * _1770)) + _3351.w) / _3412;
                                float _3472 = (fma(_1772, _3366.z, fma(_1771, _3366.y, _3366.x * _1770)) + _3366.w) / _3412;
                                float _3476 = 1.0 - dot(vec2(_3471, _3472), vec2(_3471, _3472));
                                float _4636 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3478 = _3477 * (((isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0))) * _3454) / ((_3467 * 0.699999988079071044921875) + 1.0));
                                float _3490 = exp2(log2(1.0 / ((_3467 * 3.5) + 5.0)) * 0.25);
                                float _3491 = 1.0 - _683;
                                float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                                float _3499 = _3498 * _3498;
                                float _3500 = _3499 * _3499;
                                float _3501 = _3447 - _2920;
                                float _3502 = _3448 - _2921;
                                float _3503 = _3449 - _2922;
                                float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                                float _3511 = dot(vec3(_623, _626, _629), vec3((-0.0) - _2920, (-0.0) - _2921, (-0.0) - _2922));
                                float _4647 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3515 = dot(vec3(_623, _626, _629), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                                float _4658 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3518 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                                float _3523 = _3460 * _3499;
                                float _3524 = _3523 * _3523;
                                float _3530 = ((1.0 - _3524) * dot(vec3(_623, _626, _629), vec3(_3447, _3448, _3449))) + _3524;
                                float _4669 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3532 = 1.0 - _3499;
                                float _3542 = (0.5 / (((_3531 * ((_3514 * _3532) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3531 * _3532) + _3499) * _3514))) * _3531;
                                float _4680 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3552 = (_3477 * _3454) * (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3522 * _3522) * ((_3467 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3478 * _3323.z;
                                frontier_phi_88_pred_1 = _3478 * _3323.y;
                                frontier_phi_88_pred_2 = _3478 * _3323.x;
                                frontier_phi_88_pred_3 = _3552 * _3335.z;
                                frontier_phi_88_pred_4 = _3552 * _3335.y;
                                frontier_phi_88_pred_5 = _3552 * _3335.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3561 = frontier_phi_88_pred;
                            _3560 = frontier_phi_88_pred_1;
                            _3559 = frontier_phi_88_pred_2;
                            _3558 = frontier_phi_88_pred_3;
                            _3557 = frontier_phi_88_pred_4;
                            _3556 = frontier_phi_88_pred_5;
                            _3265 = _3559 + _3278;
                            _3266 = _3560 + _3279;
                            _3267 = _3561 + _3280;
                            _3262 = _3556 + _3275;
                            _3263 = _3557 + _3276;
                            _3264 = _3558 + _3277;
                            if (_3282 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3282;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3267;
                        frontier_phi_82_pred_1 = _3266;
                        frontier_phi_82_pred_2 = _3265;
                        frontier_phi_82_pred_3 = _3264;
                        frontier_phi_82_pred_4 = _3263;
                        frontier_phi_82_pred_5 = _3262;
                    }
                    _2905 = frontier_phi_82_pred;
                    _2903 = frontier_phi_82_pred_1;
                    _2901 = frontier_phi_82_pred_2;
                    _2899 = frontier_phi_82_pred_3;
                    _2897 = frontier_phi_82_pred_4;
                    _2895 = frontier_phi_82_pred_5;
                    uint _3061 = _3060 + 1u;
                    if (_3061 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3054 = _2895;
                        _3055 = _2897;
                        _3056 = _2899;
                        _3057 = _2901;
                        _3058 = _2903;
                        _3059 = _2905;
                        _3060 = _3061;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2901;
                frontier_phi_63_64_ladder_1 = _2905;
                frontier_phi_63_64_ladder_2 = _2903;
                frontier_phi_63_64_ladder_3 = _2899;
                frontier_phi_63_64_ladder_4 = _2897;
                frontier_phi_63_64_ladder_5 = _2895;
            }
            else
            {
                frontier_phi_63_64_ladder = _2779;
                frontier_phi_63_64_ladder_1 = _2783;
                frontier_phi_63_64_ladder_2 = _2781;
                frontier_phi_63_64_ladder_3 = _2777;
                frontier_phi_63_64_ladder_4 = _2775;
                frontier_phi_63_64_ladder_5 = _2773;
            }
            _2894 = frontier_phi_63_64_ladder_5;
            _2896 = frontier_phi_63_64_ladder_4;
            _2898 = frontier_phi_63_64_ladder_3;
            _2900 = frontier_phi_63_64_ladder;
            _2902 = frontier_phi_63_64_ladder_2;
            _2904 = frontier_phi_63_64_ladder_1;
        }
        float _2909 = isnan(1.0) ? _667 : (isnan(_667) ? 1.0 : min(_667, 1.0));
        _2706 = (_2909 * _2900) + _2237;
        _2708 = (_2909 * _2902) + _2239;
        _2710 = (_2909 * _2904) + _2241;
        _2712 = ((_2894 * 0.039999999105930328369140625) * _2909) + _2560;
        _2714 = ((_2896 * 0.039999999105930328369140625) * _2909) + _2562;
        _2716 = ((_2898 * 0.039999999105930328369140625) * _2909) + _2564;
    }
    else
    {
        _2706 = _2237;
        _2708 = _2239;
        _2710 = _2241;
        _2712 = _2560;
        _2714 = _2562;
        _2716 = _2564;
    }
    float _4696 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4707 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4718 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _2733 = ((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2706 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _667))) + ((_2712 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1503)) * cbPerFrame._m0[3u].x);
    float _2734 = ((isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2708 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _667))) + ((_2714 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1503)) * cbPerFrame._m0[3u].x);
    float _2735 = ((isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2710 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _667))) + ((_2716 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1503)) * cbPerFrame._m0[3u].x);
    uint _2736 = _232 + 6u;
    float _2744 = _602 / cbSceneParam._m0[86u].x;
    float _2745 = _603 / cbSceneParam._m0[86u].y;
    vec4 _2759 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2744, _2745, (log2((isnan(cbSceneParam._m0[77u].w) ? _523 : (isnan(_523) ? cbSceneParam._m0[77u].w : min(_523, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2761 = _2759.x;
    float _2762 = _2759.y;
    float _2763 = _2759.z;
    float _2764 = _2759.w;
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    if (_523 > cbSceneParam._m0[78u].w)
    {
        float _2798 = isnan(_523) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _523 : min(cbSceneParam._m0[80u].w, _523));
        float _2799 = _2798 / _523;
        float _2810 = _2799 * _574;
        float _2811 = _575 * _2799;
        float _2812 = (-0.0) - _2811;
        float _2814 = _2799 * _576;
        float _2816 = (cbSceneParam._m0[77u].w * _2812) / _2798;
        float _2817 = _2816 + cbSceneParam._m0[79u].w;
        float _2818 = cbSceneParam._m0[79u].w - _2811;
        float _2824 = sqrt(((_2810 * _2810) + (_2811 * _2811)) + (_2814 * _2814));
        float _2827 = (1.0 - (cbSceneParam._m0[77u].w / _2798)) * _2824;
        float _2832 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2834 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3011;
        if (abs((_2812 - _2816) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3011 = ((((_2817 > 0.0) ? exp2(_2832 * _2817) : (2.0 - exp2(_2834 * _2817))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2827;
        }
        else
        {
            float _2955 = 1.0 / cbSceneParam._m0[80u].x;
            float _2956 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : max(_2817, _2818));
            float _2957 = isnan(_2818) ? _2817 : (isnan(_2817) ? _2818 : min(_2817, _2818));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            float _2967 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : min(_2957, 0.0));
            _3011 = ((abs(_2824 / _2812) * cbSceneParam._m0[80u].y) * ((((_2966 - _2967) * 2.0) - ((exp2(_2832 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0)))) - exp2(_2832 * (isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))))) * _2955)) - ((exp2(_2834 * _2966) - exp2(_2834 * _2967)) * _2955))) + (_2827 * cbSceneParam._m0[80u].z);
        }
        vec4 _3013 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2744, _2745, 1.0), 0.0);
        float _3022 = exp2((_3011 * (-1.44269502162933349609375)) * (1.0 - _3013.w));
        float _3023 = log2(_3022);
        float _3039 = log2(_2764);
        _2836 = (exp2(_3039 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].x)) * _3013.x) / cbSceneParam._m0[78u].x)) + _2761;
        _2838 = (exp2(_3039 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].y)) * _3013.y) / cbSceneParam._m0[78u].y)) + _2762;
        _2840 = (exp2(_3039 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].z)) * _3013.z) / cbSceneParam._m0[78u].z)) + _2763;
        _2842 = _3022 * _2764;
    }
    else
    {
        _2836 = _2761;
        _2838 = _2762;
        _2840 = _2763;
        _2842 = _2764;
    }
    bool _3049;
    vec4 _2852;
    vec4 _2874;
    float _2876;
    float _2880;
    float _2881;
    float _2882;
    float _2883;
    bool _2893;
    for (;;)
    {
        _2852 = cbMatDynParam._m0[0u];
        float _2854 = roundEven(_2852.y);
        bool _2855 = _2854 == 3.0;
        float _2856 = log2(_2842);
        float _2863 = exp2(_2856 * cbSceneParam._m0[78u].x) * _2733;
        float _2864 = exp2(_2856 * cbSceneParam._m0[78u].y) * _2734;
        float _2865 = exp2(_2856 * cbSceneParam._m0[78u].z) * _2735;
        float _2872 = _590 + (-0.5);
        _2874 = cbMtdParam._m0[1u];
        _2876 = _2874.y * _2872;
        float _2879 = (_2854 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2880 = _2879 * (_2855 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2836)));
        _2881 = _2879 * (_2855 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2838)));
        _2882 = _2879 * (_2855 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2840)));
        _2883 = _2872 * 0.999000012874603271484375;
        _2893 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2893)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2883) < 0.5)
            {
                _3049 = true;
                break;
            }
        }
        uint _2990 = _642 + uint(_2852.w);
        if ((cbInstanceData._m0[_2990].w < 1.0) && ((cbInstanceData._m0[_2990].w + _2883) < 0.5))
        {
            _3049 = true;
            break;
        }
        if ((_2876 + 1.0) < _2874.x)
        {
            _3049 = true;
            break;
        }
        _3049 = false;
        break;
    }
    float _3253;
    if (_3049)
    {
        discard_state = true;
        _3253 = 0.0;
    }
    else
    {
        _3253 = cbInstanceData._m0[_2736].w;
    }
    SV_Target.x = _2880;
    SV_Target.y = _2881;
    SV_Target.z = _2882;
    SV_Target.w = _3253;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2736].w;
    discard_exit();
}


