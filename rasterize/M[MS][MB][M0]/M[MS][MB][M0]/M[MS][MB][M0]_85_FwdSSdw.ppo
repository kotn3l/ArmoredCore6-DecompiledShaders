#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1172;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3502 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3513 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3524 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = _319.x * cbMtdParam._m0[11u].x;
    float _325 = _319.y * cbMtdParam._m0[11u].y;
    float _326 = _319.z * cbMtdParam._m0[11u].z;
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _281) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _282) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _393 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_383 - _393) * cbMtdParam._m0[24u].x) + _393) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3535 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _418 = (_411 * ((_345.x * cbMtdParam._m0[12u].x) - _324)) + _324;
    float _419 = (_411 * ((_345.y * cbMtdParam._m0[12u].y) - _325)) + _325;
    float _420 = (_411 * ((_345.z * cbMtdParam._m0[12u].z) - _326)) + _326;
    float _424 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _418;
    float _427 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _419;
    float _430 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _420;
    float _437 = ((_418 - _424) * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) + _424;
    float _438 = ((_419 - _427) * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) + _427;
    float _439 = ((_420 - _430) * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) + _430;
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _501 = _499.x;
    float _502 = _499.y;
    float _503 = _499.z;
    float _512 = ((_482.z - _503) * _411) + _503;
    float _515 = ((((_482.x - _501) * _411) + _501) * 2.0) + (-1.0);
    float _516 = ((((_482.y - _502) * _411) + _502) * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _3546 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = sqrt(1.0 - (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))));
    vec4 _535 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _553 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _281) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _282) + cbTextureTilingScale._m0[11u].w));
    float _555 = _553.x;
    float _556 = 1.0 - _555;
    float _569 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_555 - _556) * cbMtdParam._m0[24u].z) + _556) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3557 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _577 = (_570 * (cbMtdParam._m0[17u].x - _437)) + _437;
    float _578 = (_570 * (cbMtdParam._m0[17u].y - _438)) + _438;
    float _579 = (_570 * (cbMtdParam._m0[17u].z - _439)) + _439;
    float _584 = (((_457.z - _512) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _512;
    vec4 _597 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _281) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _282) + cbTextureTilingScale._m0[15u].w));
    float _604 = (_597.x * 2.0) + (-1.0);
    float _605 = (_597.y * 2.0) + (-1.0);
    float _606 = dot(vec2(_604, _605), vec2(_604, _605));
    float _3568 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _614 = (_570 * (_597.z - _584)) + _584;
    float _619 = _515 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_457.x * 2.0) + (-1.0)));
    float _620 = _516 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_457.y * 2.0) + (-1.0)));
    float _632 = (((_604 - _619) + (cbMtdParam._m0[21u].x * _619)) * _570) + _619;
    float _633 = (((_605 - _620) + (cbMtdParam._m0[21u].x * _620)) * _570) + _620;
    float _634 = (_570 * (sqrt(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) - _522)) + _522;
    float _636 = cbMtdParam._m0[22u].x + _535.w;
    float _639 = fma(_634, _228 * NORMAL.x, fma(_633, _235 * TANGENT.x, (_221 * _213) * _632));
    float _642 = fma(_634, _228 * NORMAL.y, fma(_633, _235 * TANGENT.y, (_221 * _214) * _632));
    float _645 = fma(_634, _228 * NORMAL.z, fma(_633, _235 * TANGENT.z, (_221 * _215) * _632));
    float _649 = inversesqrt(dot(vec3(_639, _642, _645), vec3(_639, _642, _645)));
    float _650 = _649 * _639;
    float _651 = _649 * _642;
    float _652 = _649 * _645;
    float _3579 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _653 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _3601 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3612 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3623 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _723 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _713);
    float _724 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _713);
    float _725 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _713);
    float _729 = inversesqrt(dot(vec3(_723, _724, _725), vec3(_723, _724, _725)));
    float _730 = _723 * _729;
    float _731 = _724 * _729;
    float _732 = _725 * _729;
    float _738 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _739 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _757 = fma(_652, cbSceneParam._m0[5u].z, fma(_651, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _650));
    float _760 = fma(_652, cbSceneParam._m0[6u].z, fma(_651, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _650));
    float _763 = fma(_652, cbSceneParam._m0[7u].z, fma(_651, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _650));
    uint _777 = (_262 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _783 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * cbInstanceData._m0[_777].x;
    float _784 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_777].y;
    float _785 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_777].z;
    float _3634 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _3645 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    vec4 _797 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _738, cbSceneParam._m0[86u].y * _739));
    float _801 = ((isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * TEXCOORD_5.w) * _797.x;
    float _802 = dot(vec3(_650, _651, _652), vec3(_730, _731, _732));
    float _805 = _802 * 2.0;
    float _809 = (_805 * _650) - _730;
    float _810 = (_805 * _651) - _731;
    float _811 = (_805 * _652) - _732;
    float _815 = abs(dot(vec3(_730, _731, _732), vec3(_650, _651, _652)));
    float _3667 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _817 = sqrt(_653);
    float _830 = exp2((_817 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_817 * 3.0));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1171;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _896 = fma(_870, cbModelParam._m0[26u].z, fma(_866, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _862));
        float _900 = fma(_870, cbModelParam._m0[27u].z, fma(_866, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _862));
        float _904 = fma(_870, cbModelParam._m0[28u].z, fma(_866, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _862));
        float _929 = _862 + _650;
        float _930 = _866 + _651;
        float _931 = _870 + _652;
        float _941 = fma(_931, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929)) - _896;
        float _942 = fma(_931, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929)) - _900;
        float _943 = fma(_931, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929)) - _904;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_896 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_900 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[34u].z) + ((((((_904 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _999 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_965.x + (-0.5));
        float _1001 = _999 * (_965.y + (-0.5));
        float _1002 = _999 * (_965.z + (-0.5));
        float _1009 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_972.x + (-0.5));
        float _1011 = _1009 * (_972.y + (-0.5));
        float _1012 = _1009 * (_972.z + (-0.5));
        float _1019 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_979.x + (-0.5));
        float _1021 = _1019 * (_979.y + (-0.5));
        float _1022 = _1019 * (_979.z + (-0.5));
        float _1029 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_986.x + (-0.5));
        float _1031 = _1029 * (_986.y + (-0.5));
        float _1032 = _1029 * (_986.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1053 = (dot(vec3(_650, _651, _652), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1063 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3715 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1065 + 1.0))) + _1070) * _1033;
        float _1080 = _1001 * 0.5;
        float _1081 = _1011 * 0.5;
        float _1082 = _1021 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_650, _651, _652), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3726 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3737 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3748 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))) * (_1107 + 1.0))) + _1112) * _1034;
        float _1122 = _1002 * 0.5;
        float _1123 = _1012 * 0.5;
        float _1124 = _1022 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_650, _651, _652), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3781 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1149 + 1.0))) + _1154) * _1035;
        _1171 = _1002;
        _1173 = _1001;
        _1174 = _1000;
        _1175 = _1012;
        _1176 = _1011;
        _1177 = _1010;
        _1178 = _1022;
        _1179 = _1021;
        _1180 = _1020;
        _1181 = _1035;
        _1182 = _1034;
        _1183 = _1033;
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _1172;
        _1173 = _1172;
        _1174 = _1172;
        _1175 = _1172;
        _1176 = _1172;
        _1177 = _1172;
        _1178 = _1172;
        _1179 = _1172;
        _1180 = _1172;
        _1181 = _1172;
        _1182 = _1172;
        _1183 = _1172;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1211 = fma(_870, cbModelParam._m0[30u].z, fma(_866, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _862));
        float _1215 = fma(_870, cbModelParam._m0[31u].z, fma(_866, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _862));
        float _1219 = fma(_870, cbModelParam._m0[32u].z, fma(_866, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _862));
        float _1242 = _862 + _650;
        float _1243 = _866 + _651;
        float _1244 = _870 + _652;
        float _1254 = fma(_1244, cbModelParam._m0[30u].z, fma(_1243, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1242)) - _1211;
        float _1255 = fma(_1244, cbModelParam._m0[31u].z, fma(_1243, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1242)) - _1215;
        float _1256 = fma(_1244, cbModelParam._m0[32u].z, fma(_1243, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1242)) - _1219;
        float _1260 = inversesqrt(dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256)));
        float _1273 = ((_1260 * _1254) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1211 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1260 * _1255) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1215 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1260 * _1256) / cbModelParam._m0[35u].z) + ((((((_1219 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        float _1310 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1277.x + (-0.5));
        float _1312 = _1310 * (_1277.y + (-0.5));
        float _1313 = _1310 * (_1277.z + (-0.5));
        float _1320 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1284.x + (-0.5));
        float _1322 = _1320 * (_1284.y + (-0.5));
        float _1323 = _1320 * (_1284.z + (-0.5));
        float _1330 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1291.x + (-0.5));
        float _1332 = _1330 * (_1291.y + (-0.5));
        float _1333 = _1330 * (_1291.z + (-0.5));
        float _1340 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1298.x + (-0.5));
        float _1342 = _1340 * (_1298.y + (-0.5));
        float _1343 = _1340 * (_1298.z + (-0.5));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = _1311 * 0.5;
        float _1348 = _1321 * 0.5;
        float _1349 = _1331 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_650, _651, _652), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3822 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _3833 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3844 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1374 + 1.0))) + _1379) * _1344;
        float _1389 = _1312 * 0.5;
        float _1390 = _1322 * 0.5;
        float _1391 = _1332 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_650, _651, _652), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3855 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3866 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3877 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1416 + 1.0))) + _1421) * _1345;
        float _1431 = _1313 * 0.5;
        float _1432 = _1323 * 0.5;
        float _1433 = _1333 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_650, _651, _652), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3910 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1458 + 1.0))) + _1463) * _1346;
        _1480 = _1313;
        _1481 = _1312;
        _1482 = _1311;
        _1483 = _1323;
        _1484 = _1322;
        _1485 = _1321;
        _1486 = _1333;
        _1487 = _1332;
        _1488 = _1331;
        _1489 = _1346;
        _1490 = _1345;
        _1491 = _1344;
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
    }
    else
    {
        _1480 = _1172;
        _1481 = _1172;
        _1482 = _1172;
        _1483 = _1172;
        _1484 = _1172;
        _1485 = _1172;
        _1486 = _1172;
        _1487 = _1172;
        _1488 = _1172;
        _1489 = _1172;
        _1490 = _1172;
        _1491 = _1172;
        _1492 = 0.0;
        _1493 = 0.0;
        _1494 = 0.0;
    }
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1184)) + _1184;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1185)) + _1185;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1186)) + _1186;
    float _1527 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1505, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1530 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1505, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1533 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1505, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1504));
    float _1548 = _809 * 0.5;
    float _1549 = _810 * 0.5;
    float _1550 = _811 * 0.5;
    float _1551 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1554 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1557 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1591;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1564 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1171, _1175, _1178, _1181));
        float _1568 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1572 = dot(vec4(_1548, _1549, _1550, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1579 = dot(vec4(cbModelParam._m0[39u]), vec4(_1548, _1549, _1550, 1.0));
        _1591 = dot(vec3(isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1579) ? 0.0 : (isnan(0.0) ? _1579 : max(0.0, _1579))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1591 = 1.0;
    }
    float _1602;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1593 = dot(vec4(cbModelParam._m0[40u]), vec4(_1548, _1549, _1550, 1.0));
        _1602 = dot(vec3(isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1602 = 1.0;
    }
    float _1606 = (_1602 * cbModelParam._m0[1u].x) + (_1591 * (1.0 - cbModelParam._m0[1u].x));
    float _1616 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _653);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1616 : min(cbModelParam._m0[25u].z, _1616));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_870, cbModelParam._m0[13u].z, fma(_866, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_870, cbModelParam._m0[14u].z, fma(_866, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_870, cbModelParam._m0[15u].z, fma(_866, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_811, cbModelParam._m0[13u].z, fma(_810, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809));
        float _1679 = fma(_811, cbModelParam._m0[14u].z, fma(_810, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809));
        float _1682 = fma(_811, cbModelParam._m0[15u].z, fma(_810, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1710 = frontier_phi_14_12_ladder;
        }
        float _1932;
        if (_1679 > 0.0)
        {
            _1932 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1932 = frontier_phi_23_19_ladder;
        }
        float _2178;
        if (_1682 > 0.0)
        {
            _2178 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2178 = frontier_phi_35_30_ladder;
        }
        float _2180 = isnan(_1932) ? _1710 : (isnan(_1710) ? _1932 : min(_1710, _1932));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1676) + _1665;
        float _2186 = (_2181 * _1679) + _1669;
        float _2187 = (_2181 * _1682) + _1673;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2190 = (-1.0) - _2188;
        float _2192 = _2188 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2187 > _2192) || ((_2187 < _2190) || ((_2186 > _2192) || ((_2186 < _2190) || ((_2185 < _2190) || (_2185 > _2192))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2311 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2187, cbModelParam._m0[9u].z, fma(_2186, cbModelParam._m0[9u].y, _2185 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2187, cbModelParam._m0[10u].z, fma(_2186, cbModelParam._m0[10u].y, _2185 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2187, cbModelParam._m0[11u].z, fma(_2186, cbModelParam._m0[11u].y, _2185 * cbModelParam._m0[11u].x))), _1617);
            frontier_phi_13_35_ladder = _2311.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2311.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2311.x * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_13_35_ladder_2;
        _1700 = frontier_phi_13_35_ladder_1;
        _1702 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_809, _810, _811), _1617);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _653);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1761 = fma(_870, cbModelParam._m0[21u].z, fma(_866, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862)) + cbModelParam._m0[21u].w;
        float _1765 = fma(_870, cbModelParam._m0[22u].z, fma(_866, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862)) + cbModelParam._m0[22u].w;
        float _1769 = fma(_870, cbModelParam._m0[23u].z, fma(_866, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862)) + cbModelParam._m0[23u].w;
        float _1772 = fma(_811, cbModelParam._m0[21u].z, fma(_810, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809));
        float _1775 = fma(_811, cbModelParam._m0[22u].z, fma(_810, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809));
        float _1778 = fma(_811, cbModelParam._m0[23u].z, fma(_810, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809));
        float _1937;
        if (_1772 > 0.0)
        {
            _1937 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1937 = frontier_phi_25_21_ladder;
        }
        float _2205;
        if (_1775 > 0.0)
        {
            _2205 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2205 = frontier_phi_37_32_ladder;
        }
        float _2410;
        if (_1778 > 0.0)
        {
            _2410 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2410 = frontier_phi_46_43_ladder;
        }
        float _2412 = isnan(_2205) ? _1937 : (isnan(_1937) ? _2205 : min(_1937, _2205));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1772) + _1761;
        float _2418 = (_2413 * _1775) + _1765;
        float _2419 = (_2413 * _1778) + _1769;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2420;
        float _2423 = _2420 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2419 > _2423) || ((_2419 < _2421) || ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 < _2421) || (_2417 > _2423))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2419, cbModelParam._m0[17u].z, fma(_2418, cbModelParam._m0[17u].y, _2417 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2419, cbModelParam._m0[18u].z, fma(_2418, cbModelParam._m0[18u].y, _2417 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2419, cbModelParam._m0[19u].z, fma(_2418, cbModelParam._m0[19u].y, _2417 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_22_46_ladder = _2618.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2618.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2618.x * cbModelParam._m0[1u].z;
        }
        _1797 = frontier_phi_22_46_ladder_2;
        _1799 = frontier_phi_22_46_ladder_1;
        _1801 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_809, _810, _811), _1707);
        _1797 = _1781.x * cbModelParam._m0[1u].z;
        _1799 = _1781.y * cbModelParam._m0[1u].z;
        _1801 = _1781.z * cbModelParam._m0[1u].z;
    }
    float _1813 = ((((1.0 - _830) * ((_817 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_830 * _817)) * _801;
    float _1814 = _1813 * ((cbModelParam._m0[1u].w * (_1797 - _1698)) + _1698);
    float _1815 = _1813 * ((cbModelParam._m0[1u].w * (_1799 - _1700)) + _1700);
    float _1816 = _1813 * ((cbModelParam._m0[1u].w * (_1801 - _1702)) + _1702);
    float _1819 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, _1814 * cbSceneParam._m0[91u].x));
    vec4 _1833 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_738, _739));
    float _1835 = _1833.w;
    float _1847 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1835);
    float _1848 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1835);
    float _1849 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1835);
    uvec4 _1853 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _1855 = _1853.x * 14u;
    uint _1856 = _1855 + 13u;
    float _1863 = _801 + (-1.0);
    float _1868 = (cbLight._m0[_1856].x * _1863) + 1.0;
    float _1869 = (cbLight._m0[_1856].y * _1863) + 1.0;
    float _1870 = (cbLight._m0[_1856].z * _1863) + 1.0;
    float _1871 = (cbLight._m0[_1856].w * _1863) + 1.0;
    uint _1872 = _1855 + 5u;
    float _1878 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1882 = _1855 + 4u;
    float _1891 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
    uint _1895 = _1855 | 1u;
    float _1906 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_650, _651, _652));
    float _1909 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_650, _651, _652));
    float _4046 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _4057 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1914 = (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.3183098733425140380859375;
    float _1916 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _1923 = ((cbLight._m0[_1872].x * _1878) * _1916) + (((cbLight._m0[_1882].x * _1847) * _1891) * _1914);
    float _1924 = ((_1878 * cbLight._m0[_1872].y) * _1916) + (((cbLight._m0[_1882].y * _1848) * _1891) * _1914);
    float _1925 = ((_1878 * cbLight._m0[_1872].z) * _1916) + (((cbLight._m0[_1882].z * _1849) * _1891) * _1914);
    uvec4 _1929 = floatBitsToUint(cbLight._m0[_1855 + 12u]);
    bool _1931 = _1929.x == 0u;
    float _1942;
    float _1944;
    float _1946;
    if (_1931)
    {
        _1942 = _1923;
        _1944 = _1924;
        _1946 = _1925;
    }
    else
    {
        uint _1950 = _1855 + 6u;
        float _1966 = (dot(vec3(cbLight._m0[_1855 + 2u].xyz), vec3(_650, _651, _652)) * 0.5) + 0.5;
        float _1967 = _1966 * _1966;
        float _4068 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1968 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1969 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _1942 = (((cbLight._m0[_1950].x * 0.3183098733425140380859375) * _1968) * _1969) + _1923;
        _1944 = (((cbLight._m0[_1950].y * 0.3183098733425140380859375) * _1968) * _1969) + _1924;
        _1946 = (((cbLight._m0[_1950].z * 0.3183098733425140380859375) * _1968) * _1969) + _1925;
    }
    bool _1949 = _1929.y == 0u;
    float _1987;
    float _1989;
    float _1991;
    if (_1949)
    {
        _1987 = _1942;
        _1989 = _1944;
        _1991 = _1946;
    }
    else
    {
        uint _2149 = _1855 + 7u;
        float _2165 = (dot(vec3(cbLight._m0[_1855 + 3u].xyz), vec3(_650, _651, _652)) * 0.5) + 0.5;
        float _2166 = _2165 * _2165;
        float _4084 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2167 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _2168 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _1987 = (((cbLight._m0[_2149].x * 0.3183098733425140380859375) * _2167) * _2168) + _1942;
        _1989 = (((cbLight._m0[_2149].y * 0.3183098733425140380859375) * _2167) * _2168) + _1944;
        _1991 = (((cbLight._m0[_2149].z * 0.3183098733425140380859375) * _2167) * _2168) + _1946;
    }
    uint _1994 = _1855 + 8u;
    float _2007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1855].w)) * _653) * 0.949999988079071044921875);
    float _2008 = _2007 * _2007;
    float _2009 = cbLight._m0[_1855].x + _730;
    float _2010 = cbLight._m0[_1855].y + _731;
    float _2011 = cbLight._m0[_1855].z + _732;
    float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
    float _2016 = _2015 * _2009;
    float _2017 = _2015 * _2010;
    float _2018 = _2015 * _2011;
    float _2019 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_1855].xyz));
    float _4100 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2022 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _2023 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2024 = dot(vec3(_650, _651, _652), vec3(_2016, _2017, _2018));
    float _4122 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2028 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_2016, _2017, _2018));
    float _4133 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2032 = _2008 * _2008;
    float _2036 = ((_2027 * _2027) * (_2032 + (-1.0))) + 1.0;
    float _2047 = (exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2048 = 1.0 - _2008;
    float _2059 = (0.5 / (((_2023 * ((_2022 * _2048) + _2008)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2048) + _2008) * _2022))) * _2022;
    float _4144 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2061 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2032 / ((_2036 * _2036) * 3.141590118408203125));
    uint _2075 = _1855 + 9u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1895].w)) * _653) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1895].x + _730;
    float _2089 = cbLight._m0[_1895].y + _731;
    float _2090 = cbLight._m0[_1895].z + _732;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_1895].xyz));
    float _4155 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2102 = dot(vec3(_650, _651, _652), vec3(_2095, _2096, _2097));
    float _4166 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1895].xyz), vec3(_2095, _2096, _2097));
    float _4177 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2087 * _2087;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2124 = 1.0 - _2087;
    float _2134 = (0.5 / (((_2023 * ((_2101 * _2124) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2124) + _2087) * _2101))) * _2101;
    float _4188 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2136 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    float _2146 = (((_2123 * cbLight._m0[_2075].x) * _2136) * _1878) + ((((cbLight._m0[_1994].x * _1847) * _2047) * _2061) * _1891);
    float _2147 = (((_2123 * cbLight._m0[_2075].y) * _2136) * _1878) + ((((cbLight._m0[_1994].y * _1848) * _2047) * _2061) * _1891);
    float _2148 = (((_2123 * cbLight._m0[_2075].z) * _2136) * _1878) + ((((cbLight._m0[_1994].z * _1849) * _2047) * _2061) * _1891);
    float _2210;
    float _2212;
    float _2214;
    if (_1931)
    {
        _2210 = _2146;
        _2212 = _2147;
        _2214 = _2148;
    }
    else
    {
        uint _2216 = _1855 + 2u;
        uint _2220 = _1855 + 10u;
        float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _653) * 0.949999988079071044921875);
        float _2235 = _2234 * _2234;
        float _2236 = cbLight._m0[_2216].x + _730;
        float _2237 = cbLight._m0[_2216].y + _731;
        float _2238 = cbLight._m0[_2216].z + _732;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2243 = _2242 * _2236;
        float _2244 = _2242 * _2237;
        float _2245 = _2242 * _2238;
        float _2246 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_2216].xyz));
        float _4199 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2250 = dot(vec3(_650, _651, _652), vec3(_2243, _2244, _2245));
        float _4210 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2254 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2243, _2244, _2245));
        float _4221 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2258 = _2235 * _2235;
        float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
        float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2272 = 1.0 - _2235;
        float _2282 = (0.5 / (((_2023 * ((_2249 * _2272) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2272) + _2235) * _2249))) * _2249;
        float _4232 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2284 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
        float _2285 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2210 = (((_2271 * cbLight._m0[_2220].x) * _2284) * _2285) + _2146;
        _2212 = (((_2271 * cbLight._m0[_2220].y) * _2284) * _2285) + _2147;
        _2214 = (((_2271 * cbLight._m0[_2220].z) * _2284) * _2285) + _2148;
    }
    float _2320;
    float _2322;
    float _2324;
    if (_1949)
    {
        _2320 = _2210;
        _2322 = _2212;
        _2324 = _2214;
    }
    else
    {
        uint _2331 = _1855 + 3u;
        uint _2335 = _1855 + 11u;
        float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _653) * 0.949999988079071044921875);
        float _2350 = _2349 * _2349;
        float _2351 = cbLight._m0[_2331].x + _730;
        float _2352 = cbLight._m0[_2331].y + _731;
        float _2353 = cbLight._m0[_2331].z + _732;
        float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
        float _2358 = _2357 * _2351;
        float _2359 = _2357 * _2352;
        float _2360 = _2357 * _2353;
        float _2361 = dot(vec3(_650, _651, _652), vec3(cbLight._m0[_2331].xyz));
        float _4248 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2365 = dot(vec3(_650, _651, _652), vec3(_2358, _2359, _2360));
        float _4259 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2369 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2358, _2359, _2360));
        float _4270 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _2350 * _2350;
        float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
        float _2386 = (exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2387 = 1.0 - _2350;
        float _2397 = (0.5 / (((_2023 * ((_2364 * _2387) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2023 * _2387) + _2350) * _2364))) * _2364;
        float _4281 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2320 = (((_2386 * cbLight._m0[_2335].x) * _2399) * _2400) + _2210;
        _2322 = (((_2386 * cbLight._m0[_2335].y) * _2399) * _2400) + _2212;
        _2324 = (((_2386 * cbLight._m0[_2335].z) * _2399) * _2400) + _2214;
    }
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    if (_1853.y == 0u)
    {
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2475;
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2475;
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2475;
        uvec4 _2490 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2491 = _2490.x;
        uint _2502 = uint((float(_2490.y) * floor(float(uint(cbSceneParam._m0[85u].y * _739) / _2491))) + floor(float(uint(cbSceneParam._m0[85u].x * _738) / _2491)));
        float _2512 = (log2(_2478 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2513 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        uint _2516 = uint(isnan(14.0) ? _2513 : (isnan(_2513) ? 14.0 : min(_2513, 14.0)));
        uvec4 _2521 = texelFetch(g_lightClusterGridBuffer, int(((_2516 << 2u) + (_2502 << 6u)) >> 2u));
        uint _2522 = _2521.x;
        uint _2523 = _2490.z;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        if (((((1u << ((_2523 >> 4u) & 15u)) + 4294967295u) & _2522) == 0u) || ((_2523 & 240u) == 0u))
        {
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
        }
        else
        {
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            float _2773 = 0.0;
            uint _2774 = 0u;
            uint _2783;
            bool _2784;
            for (;;)
            {
                _2783 = texelFetch(g_lightClassification, int((((_2516 << 5u) + (_2502 << 9u)) + (_2774 << 2u)) >> 2u)).x;
                _2784 = _2783 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2784)
                {
                    frontier_phi_61_pred = _2768;
                    frontier_phi_61_pred_1 = _2773;
                    frontier_phi_61_pred_2 = _2772;
                    frontier_phi_61_pred_3 = _2771;
                    frontier_phi_61_pred_4 = _2770;
                    frontier_phi_61_pred_5 = _2769;
                }
                else
                {
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    uint _2898;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2773;
                    _2898 = _2783;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    for (;;)
                    {
                        uint _2902 = uint(findLSB(_2898)) + (_2774 << 5u);
                        uint _2899 = (_2898 + 4294967295u) & _2898;
                        uint _2904 = _2902 * 48u;
                        vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2904)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2904 + 3u)).x));
                        uint _2924 = (_2902 * 48u) + 4u;
                        vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2924)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 3u)).x));
                        uint _2943 = (_2902 * 48u) + 8u;
                        vec3 _2954 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x));
                        float _2958 = _2918.x - _2476;
                        float _2959 = _2918.y - _2477;
                        float _2960 = _2918.z - _2478;
                        float _2961 = dot(vec3(_2958, _2959, _2960), vec3(_2958, _2959, _2960));
                        float _2964 = inversesqrt(_2961);
                        float _2965 = _2964 * _2958;
                        float _2966 = _2964 * _2959;
                        float _2967 = _2964 * _2960;
                        float _2968 = dot(vec3(_757, _760, _763), vec3(_2965, _2966, _2967));
                        float _2973 = 1.0 - (_2961 * _2918.w);
                        float _4307 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2974 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _2975 = sqrt(_2961) * _2937.w;
                        float _2978 = 1.39999997615814208984375 / (_2975 + 1.39999997615814208984375);
                        float _2979 = _2978 * _2978;
                        float _2982 = ((1.0 - _2979) * _2968) + _2979;
                        float _2985 = _2975 * _2975;
                        float _2989 = ((isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0))) * _2974) / ((_2985 * 0.699999988079071044921875) + 1.0);
                        float _2993 = (-0.0) - _2476;
                        float _2994 = (-0.0) - _2477;
                        float _2995 = (-0.0) - _2478;
                        float _2999 = inversesqrt(dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995)));
                        float _3000 = _2999 * _2993;
                        float _3001 = _2999 * _2994;
                        float _3002 = _2999 * _2995;
                        float _3010 = exp2(log2(1.0 / ((_2985 * 3.5) + 5.0)) * 0.25);
                        float _3011 = 1.0 - _817;
                        float _3018 = sqrt(1.0 - ((1.0 - (_3011 * _3011)) * (1.0 - (_3010 * _3010))));
                        float _3019 = _3018 * _3018;
                        float _3020 = _3019 * _3019;
                        float _3021 = _3000 + _2965;
                        float _3022 = _3001 + _2966;
                        float _3023 = _3002 + _2967;
                        float _3027 = inversesqrt(dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023)));
                        float _3031 = dot(vec3(_757, _760, _763), vec3(_3000, _3001, _3002));
                        float _4323 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3034 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _3035 = dot(vec3(_757, _760, _763), vec3(_3027 * _3021, _3027 * _3022, _3027 * _3023));
                        float _4334 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3038 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3042 = ((_3038 * _3038) * (_3020 + (-1.0))) + 1.0;
                        float _3043 = _2978 * _3019;
                        float _3044 = _3043 * _3043;
                        float _3047 = ((1.0 - _3044) * _2968) + _3044;
                        float _4345 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3048 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3049 = 1.0 - _3019;
                        float _3059 = (0.5 / (((_3048 * ((_3034 * _3049) + _3019)) + 9.9999999392252902907785028219223e-09) + (((_3048 * _3049) + _3019) * _3034))) * _3048;
                        float _4356 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3070 = (((_3020 * 3.1415927410125732421875) * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) / ((_3042 * _3042) * ((_2985 * 2.1991131305694580078125) + 3.141590118408203125))) * _2974;
                        _2827 = (_2989 * _2937.x) + _2895;
                        _2828 = (_2989 * _2937.y) + _2896;
                        _2829 = (_2989 * _2937.z) + _2897;
                        _2824 = (_3070 * _2954.x) + _2892;
                        _2825 = (_3070 * _2954.y) + _2893;
                        _2826 = (_3070 * _2954.z) + _2894;
                        if (_2899 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2829;
                            _2898 = _2899;
                        }
                    }
                    frontier_phi_61_pred = _2824;
                    frontier_phi_61_pred_1 = _2829;
                    frontier_phi_61_pred_2 = _2828;
                    frontier_phi_61_pred_3 = _2827;
                    frontier_phi_61_pred_4 = _2826;
                    frontier_phi_61_pred_5 = _2825;
                }
                _2624 = frontier_phi_61_pred;
                _2634 = frontier_phi_61_pred_1;
                _2632 = frontier_phi_61_pred_2;
                _2630 = frontier_phi_61_pred_3;
                _2628 = frontier_phi_61_pred_4;
                _2626 = frontier_phi_61_pred_5;
                uint _2775 = _2774 + 1u;
                if (_2775 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2768 = _2624;
                    _2769 = _2626;
                    _2770 = _2628;
                    _2771 = _2630;
                    _2772 = _2632;
                    _2773 = _2634;
                    _2774 = _2775;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
        }
        uvec4 _2637 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2638 = _2637.z;
        uint _2640 = (_2638 >> 8u) & 15u;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        if (((4294967295u << _2640) & _2522) == 0u)
        {
            _2736 = _2623;
            _2738 = _2625;
            _2740 = _2627;
            _2742 = _2629;
            _2744 = _2631;
            _2746 = _2633;
        }
        else
        {
            float _2761 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
            float _2762 = _2761 * _2476;
            float _2763 = _2761 * _2477;
            float _2764 = _2761 * _2478;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2640 < ((_2638 >> 12u) & 15u))
            {
                float _2737;
                float _2739;
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2875 = _2623;
                float _2876 = _2625;
                float _2877 = _2627;
                float _2878 = _2629;
                float _2879 = _2631;
                float _2880 = _2633;
                uint _2881 = _2640;
                uint _2890;
                bool _2891;
                for (;;)
                {
                    _2890 = texelFetch(g_lightClassification, int((((_2516 << 5u) + (_2502 << 9u)) + (_2881 << 2u)) >> 2u)).x;
                    _2891 = _2890 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2891)
                    {
                        frontier_phi_67_pred = _2878;
                        frontier_phi_67_pred_1 = _2879;
                        frontier_phi_67_pred_2 = _2880;
                        frontier_phi_67_pred_3 = _2877;
                        frontier_phi_67_pred_4 = _2876;
                        frontier_phi_67_pred_5 = _2875;
                    }
                    else
                    {
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3088 = _2875;
                        float _3089 = _2876;
                        float _3090 = _2877;
                        float _3091 = _2878;
                        float _3092 = _2879;
                        float _3093 = _2880;
                        uint _3094 = _2890;
                        uint _3095;
                        vec4 _3120;
                        float _3121;
                        vec4 _3136;
                        vec3 _3148;
                        vec4 _3163;
                        vec4 _3178;
                        float _3224;
                        bool _3225;
                        for (;;)
                        {
                            uint _3105 = ((_2881 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3094));
                            _3095 = (_3094 + 4294967295u) & _3094;
                            uint _3107 = _3105 * 40u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            _3121 = _3120.w;
                            uint _3123 = (_3105 * 40u) + 4u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3138 = (_3105 * 40u) + 8u;
                            _3148 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x));
                            uint _3150 = (_3105 * 40u) + 16u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3165 = (_3105 * 40u) + 20u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3105 * 40u) + 24u;
                            vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3199 = (_3105 * 40u) + 28u;
                            vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            _3224 = fma(_2478, _3212.z, fma(_2477, _3212.y, _3212.x * _2476)) + _3212.w;
                            _3225 = !((fma(_2478, _3193.z, fma(_2477, _3193.y, _3193.x * _2476)) + _3193.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3225)
                            {
                                float _3252 = _3120.x - _2476;
                                float _3253 = _3120.y - _2477;
                                float _3254 = _3120.z - _2478;
                                float _3255 = dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254));
                                float _3258 = inversesqrt(_3255);
                                float _3259 = _3258 * _3252;
                                float _3260 = _3258 * _3253;
                                float _3261 = _3258 * _3254;
                                float _3265 = 1.0 - (_3255 / (_3121 * _3121));
                                float _4367 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3270 = sqrt(_3255) * _3136.w;
                                float _3272 = 1.39999997615814208984375 / (_3270 + 1.39999997615814208984375);
                                float _3273 = _3272 * _3272;
                                float _3276 = ((1.0 - _3273) * dot(vec3(_3259, _3260, _3261), vec3(_757, _760, _763))) + _3273;
                                float _3279 = _3270 * _3270;
                                float _3283 = (fma(_2478, _3163.z, fma(_2477, _3163.y, _3163.x * _2476)) + _3163.w) / _3224;
                                float _3284 = (fma(_2478, _3178.z, fma(_2477, _3178.y, _3178.x * _2476)) + _3178.w) / _3224;
                                float _3288 = 1.0 - dot(vec2(_3283, _3284), vec2(_3283, _3284));
                                float _4383 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3290 = _3289 * (((isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0))) * _3266) / ((_3279 * 0.699999988079071044921875) + 1.0));
                                float _3302 = exp2(log2(1.0 / ((_3279 * 3.5) + 5.0)) * 0.25);
                                float _3303 = 1.0 - _817;
                                float _3310 = sqrt(1.0 - ((1.0 - (_3303 * _3303)) * (1.0 - (_3302 * _3302))));
                                float _3311 = _3310 * _3310;
                                float _3312 = _3311 * _3311;
                                float _3313 = _3259 - _2762;
                                float _3314 = _3260 - _2763;
                                float _3315 = _3261 - _2764;
                                float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                                float _3323 = dot(vec3(_757, _760, _763), vec3((-0.0) - _2762, (-0.0) - _2763, (-0.0) - _2764));
                                float _4394 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3327 = dot(vec3(_757, _760, _763), vec3(_3319 * _3313, _3319 * _3314, _3319 * _3315));
                                float _4405 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3334 = ((_3330 * _3330) * (_3312 + (-1.0))) + 1.0;
                                float _3335 = _3272 * _3311;
                                float _3336 = _3335 * _3335;
                                float _3342 = ((1.0 - _3336) * dot(vec3(_757, _760, _763), vec3(_3259, _3260, _3261))) + _3336;
                                float _4416 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3344 = 1.0 - _3311;
                                float _3354 = (0.5 / (((_3343 * ((_3326 * _3344) + _3311)) + 9.9999999392252902907785028219223e-09) + (((_3343 * _3344) + _3311) * _3326))) * _3343;
                                float _4427 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3364 = (_3289 * _3266) * (((_3312 * 3.1415927410125732421875) * (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) / ((_3334 * _3334) * ((_3279 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3364 * _3148.x;
                                frontier_phi_73_pred_1 = _3364 * _3148.y;
                                frontier_phi_73_pred_2 = _3290 * _3136.z;
                                frontier_phi_73_pred_3 = _3290 * _3136.y;
                                frontier_phi_73_pred_4 = _3290 * _3136.x;
                                frontier_phi_73_pred_5 = _3364 * _3148.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3368 = frontier_phi_73_pred;
                            _3369 = frontier_phi_73_pred_1;
                            _3373 = frontier_phi_73_pred_2;
                            _3372 = frontier_phi_73_pred_3;
                            _3371 = frontier_phi_73_pred_4;
                            _3370 = frontier_phi_73_pred_5;
                            _3078 = _3371 + _3091;
                            _3079 = _3372 + _3092;
                            _3080 = _3373 + _3093;
                            _3075 = _3368 + _3088;
                            _3076 = _3369 + _3089;
                            _3077 = _3370 + _3090;
                            if (_3095 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3095;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3078;
                        frontier_phi_67_pred_1 = _3079;
                        frontier_phi_67_pred_2 = _3080;
                        frontier_phi_67_pred_3 = _3077;
                        frontier_phi_67_pred_4 = _3076;
                        frontier_phi_67_pred_5 = _3075;
                    }
                    _2743 = frontier_phi_67_pred;
                    _2745 = frontier_phi_67_pred_1;
                    _2747 = frontier_phi_67_pred_2;
                    _2741 = frontier_phi_67_pred_3;
                    _2739 = frontier_phi_67_pred_4;
                    _2737 = frontier_phi_67_pred_5;
                    uint _2882 = _2881 + 1u;
                    if (_2882 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2875 = _2737;
                        _2876 = _2739;
                        _2877 = _2741;
                        _2878 = _2743;
                        _2879 = _2745;
                        _2880 = _2747;
                        _2881 = _2882;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2745;
                frontier_phi_55_56_ladder_1 = _2747;
                frontier_phi_55_56_ladder_2 = _2743;
                frontier_phi_55_56_ladder_3 = _2741;
                frontier_phi_55_56_ladder_4 = _2739;
                frontier_phi_55_56_ladder_5 = _2737;
            }
            else
            {
                frontier_phi_55_56_ladder = _2631;
                frontier_phi_55_56_ladder_1 = _2633;
                frontier_phi_55_56_ladder_2 = _2629;
                frontier_phi_55_56_ladder_3 = _2627;
                frontier_phi_55_56_ladder_4 = _2625;
                frontier_phi_55_56_ladder_5 = _2623;
            }
            _2736 = frontier_phi_55_56_ladder_5;
            _2738 = frontier_phi_55_56_ladder_4;
            _2740 = frontier_phi_55_56_ladder_3;
            _2742 = frontier_phi_55_56_ladder_2;
            _2744 = frontier_phi_55_56_ladder;
            _2746 = frontier_phi_55_56_ladder_1;
        }
        float _2751 = isnan(1.0) ? _801 : (isnan(_801) ? 1.0 : min(_801, 1.0));
        _2535 = (_2751 * _2742) + _1987;
        _2537 = (_2751 * _2744) + _1989;
        _2539 = (_2751 * _2746) + _1991;
        _2541 = ((_2736 * 0.039999999105930328369140625) * _2751) + _2320;
        _2543 = ((_2738 * 0.039999999105930328369140625) * _2751) + _2322;
        _2545 = ((_2740 * 0.039999999105930328369140625) * _2751) + _2324;
    }
    else
    {
        _2535 = _1987;
        _2537 = _1989;
        _2539 = _1991;
        _2541 = _2320;
        _2543 = _2322;
        _2545 = _2324;
    }
    float _4443 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4454 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4465 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    uint _2565 = _262 + 6u;
    float _2573 = _738 / cbSceneParam._m0[86u].x;
    float _2574 = _739 / cbSceneParam._m0[86u].y;
    vec4 _2588 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2573, _2574, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2590 = _2588.x;
    float _2591 = _2588.y;
    float _2592 = _2588.z;
    float _2593 = _2588.w;
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2648 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2649 = _2648 / _671;
        float _2660 = _2649 * _723;
        float _2661 = _724 * _2649;
        float _2662 = (-0.0) - _2661;
        float _2664 = _2649 * _725;
        float _2666 = (cbSceneParam._m0[77u].w * _2662) / _2648;
        float _2667 = _2666 + cbSceneParam._m0[79u].w;
        float _2668 = cbSceneParam._m0[79u].w - _2661;
        float _2674 = sqrt(((_2660 * _2660) + (_2661 * _2661)) + (_2664 * _2664));
        float _2677 = (1.0 - (cbSceneParam._m0[77u].w / _2648)) * _2674;
        float _2682 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2684 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2837;
        if (abs((_2662 - _2666) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2837 = ((((_2667 > 0.0) ? exp2(_2682 * _2667) : (2.0 - exp2(_2684 * _2667))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2677;
        }
        else
        {
            float _2797 = 1.0 / cbSceneParam._m0[80u].x;
            float _2798 = isnan(_2668) ? _2667 : (isnan(_2667) ? _2668 : max(_2667, _2668));
            float _2799 = isnan(_2668) ? _2667 : (isnan(_2667) ? _2668 : min(_2667, _2668));
            float _2808 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : min(_2798, 0.0));
            float _2809 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : min(_2799, 0.0));
            _2837 = ((abs(_2674 / _2662) * cbSceneParam._m0[80u].y) * ((((_2808 - _2809) * 2.0) - ((exp2(_2682 * (isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0)))) - exp2(_2682 * (isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))))) * _2797)) - ((exp2(_2684 * _2808) - exp2(_2684 * _2809)) * _2797))) + (_2677 * cbSceneParam._m0[80u].z);
        }
        vec4 _2839 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2573, _2574, 1.0), 0.0);
        float _2848 = exp2((_2837 * (-1.44269502162933349609375)) * (1.0 - _2839.w));
        float _2849 = log2(_2848);
        float _2865 = log2(_2593);
        _2686 = (exp2(_2865 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2849 * cbSceneParam._m0[78u].x)) * _2839.x) / cbSceneParam._m0[78u].x)) + _2590;
        _2688 = (exp2(_2865 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2849 * cbSceneParam._m0[78u].y)) * _2839.y) / cbSceneParam._m0[78u].y)) + _2591;
        _2690 = (exp2(_2865 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2849 * cbSceneParam._m0[78u].z)) * _2839.z) / cbSceneParam._m0[78u].z)) + _2592;
        _2692 = _2848 * _2593;
    }
    else
    {
        _2686 = _2590;
        _2688 = _2591;
        _2690 = _2592;
        _2692 = _2593;
    }
    float _2704 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2705 = _2704 == 3.0;
    float _2706 = log2(_2692);
    float _2713 = exp2(_2706 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2535 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _801))) + ((_2541 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1606)) * cbPerFrame._m0[3u].x));
    float _2714 = exp2(_2706 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0))) * (_2537 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _801))) + ((_2543 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1606)) * cbPerFrame._m0[3u].x));
    float _2715 = exp2(_2706 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2539 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _801))) + ((_2545 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1606)) * cbPerFrame._m0[3u].x));
    float _2724 = (_2704 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2724 * (_2705 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2686)));
    SV_Target.y = _2724 * (_2705 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2688)));
    SV_Target.z = _2724 * (_2705 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2690)));
    SV_Target.w = cbInstanceData._m0[_2565].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2565].w;
}


