#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1154;
float _3515;
float _3516;
float _3517;
float _3518;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _271 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _277 = _271.x * cbMtdParam._m0[11u].x;
    float _278 = _271.y * cbMtdParam._m0[11u].y;
    float _279 = _271.z * cbMtdParam._m0[11u].z;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _250) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _251) + cbTextureTilingScale._m0[5u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _338 = _336.x;
    float _348 = dot(vec4(_338, _336.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _365 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_338 - _348) * cbMtdParam._m0[24u].x) + _348) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3527 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _366 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _373 = (_366 * ((_298.x * cbMtdParam._m0[12u].x) - _277)) + _277;
    float _374 = (_366 * ((_298.y * cbMtdParam._m0[12u].y) - _278)) + _278;
    float _375 = (_366 * ((_298.z * cbMtdParam._m0[12u].z) - _279)) + _279;
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _250) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _251) + cbTextureTilingScale._m0[4u].w));
    vec4 _410 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _412 = _410.x;
    float _413 = _410.y;
    float _414 = _410.z;
    float _423 = ((_393.z - _414) * _366) + _414;
    float _426 = ((((_393.x - _412) * _366) + _412) * 2.0) + (-1.0);
    float _428 = ((((_393.y - _413) * _366) + _413) * 2.0) + (-1.0);
    float _429 = dot(vec2(_426, _428), vec2(_426, _428));
    float _3538 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = sqrt(1.0 - (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))));
    vec4 _450 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _462 = (((_450.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _426;
    float _463 = (((_450.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _428;
    float _466 = fma(_434, _218, fma(_463, _225, _462 * _211));
    float _469 = fma(_434, _219, fma(_463, _226, _462 * _212));
    float _472 = fma(_434, _220, fma(_463, _227, _462 * _213));
    float _476 = inversesqrt(dot(vec3(_466, _469, _472), vec3(_466, _469, _472)));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _507 = _505.x;
    float _508 = 1.0 - _507;
    float _514 = (cbMtdParam._m0[19u].x + dot(vec4(_476 * _466, _476 * _469, _476 * _472, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_507 - _508) * cbMtdParam._m0[24u].z) + _508) * cbMtdParam._m0[21u].z);
    float _3549 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _522 = (_515 * (cbMtdParam._m0[17u].x - _373)) + _373;
    float _523 = (_515 * (cbMtdParam._m0[17u].y - _374)) + _374;
    float _524 = (_515 * (cbMtdParam._m0[17u].z - _375)) + _375;
    float _528 = (cbMtdParam._m0[19u].w * (_450.z - _423)) + _423;
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _548 = (_541.x * 2.0) + (-1.0);
    float _549 = (_541.y * 2.0) + (-1.0);
    float _550 = dot(vec2(_548, _549), vec2(_548, _549));
    float _3560 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _558 = ((_541.z - _528) * _515) + _528;
    float _568 = ((sqrt(1.0 - (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) - _434) * _515) + _434;
    float _571 = (((_548 - _462) * _515) + _462) + (cbMtdParam._m0[21u].x * _462);
    float _572 = (((_549 - _463) * _515) + _463) + (cbMtdParam._m0[21u].x * _463);
    float _577 = cbMtdParam._m0[22u].x + _450.w;
    float _580 = fma(_568, _218, fma(_572, _225, _571 * _211));
    float _583 = fma(_568, _219, fma(_572, _226, _571 * _212));
    float _586 = fma(_568, _220, fma(_572, _227, _571 * _213));
    float _590 = inversesqrt(dot(vec3(_580, _583, _586), vec3(_580, _583, _586)));
    float _591 = _590 * _580;
    float _592 = _590 * _583;
    float _593 = _590 * _586;
    float _3571 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _594 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    float _3582 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3593 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3604 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3615 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _612 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _664 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _654);
    float _665 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _654);
    float _666 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _654);
    float _670 = inversesqrt(dot(vec3(_664, _665, _666), vec3(_664, _665, _666)));
    float _671 = _664 * _670;
    float _672 = _665 * _670;
    float _673 = _666 * _670;
    vec4 _678 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _680 = _678.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _834 = sqrt(((_664 * _664) + (_665 * _665)) + (_666 * _666));
        float _840 = (cbMatDynParam._m0[5u].x * _834) + cbMatDynParam._m0[5u].y;
        float _3626 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _845 = (cbMatDynParam._m0[5u].z * _834) + cbMatDynParam._m0[5u].w;
        float _3637 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) - _841)) + _841) < ((_680 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _691 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _692 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _710 = fma(_593, cbSceneParam._m0[5u].z, fma(_592, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _591));
    float _713 = fma(_593, cbSceneParam._m0[6u].z, fma(_592, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _591));
    float _716 = fma(_593, cbSceneParam._m0[7u].z, fma(_592, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _591));
    uint _729 = _230 + 9u;
    uint _730 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _736 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * cbInstanceData._m0[_730].x;
    float _737 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0)))) * cbInstanceData._m0[_730].y;
    float _738 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * cbInstanceData._m0[_730].z;
    float _3648 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _3659 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    vec4 _750 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _691, cbSceneParam._m0[86u].y * _692));
    float _754 = ((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * TEXCOORD_5.w) * _750.x;
    float _755 = dot(vec3(_591, _592, _593), vec3(_671, _672, _673));
    float _758 = _755 * 2.0;
    float _762 = (_758 * _591) - _671;
    float _763 = (_758 * _592) - _672;
    float _764 = (_758 * _593) - _673;
    float _768 = abs(dot(vec3(_671, _672, _673), vec3(_591, _592, _593)));
    float _3681 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _770 = sqrt(_594);
    float _783 = exp2((_770 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_770 * 3.0));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1153;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _878 = fma(_823, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _815));
        float _882 = fma(_823, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _815));
        float _886 = fma(_823, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _815));
        float _911 = _815 + _591;
        float _912 = _819 + _592;
        float _913 = _823 + _593;
        float _923 = fma(_913, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _911)) - _878;
        float _924 = fma(_913, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _911)) - _882;
        float _925 = fma(_913, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _911)) - _886;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_878 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_882 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[34u].z) + ((((((_886 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _981 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_947.x + (-0.5));
        float _983 = _981 * (_947.y + (-0.5));
        float _984 = _981 * (_947.z + (-0.5));
        float _991 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_954.x + (-0.5));
        float _993 = _991 * (_954.y + (-0.5));
        float _994 = _991 * (_954.z + (-0.5));
        float _1001 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_961.x + (-0.5));
        float _1003 = _1001 * (_961.y + (-0.5));
        float _1004 = _1001 * (_961.z + (-0.5));
        float _1011 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_968.x + (-0.5));
        float _1013 = _1011 * (_968.y + (-0.5));
        float _1014 = _1011 * (_968.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1035 = (dot(vec3(_591, _592, _593), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1045 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3729 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1047 + 1.0))) + _1052) * _1015;
        float _1062 = _983 * 0.5;
        float _1063 = _993 * 0.5;
        float _1064 = _1003 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_591, _592, _593), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3762 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1089 + 1.0))) + _1094) * _1016;
        float _1104 = _984 * 0.5;
        float _1105 = _994 * 0.5;
        float _1106 = _1004 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_591, _592, _593), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3795 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1131 + 1.0))) + _1136) * _1017;
        _1153 = _984;
        _1155 = _983;
        _1156 = _982;
        _1157 = _994;
        _1158 = _993;
        _1159 = _992;
        _1160 = _1004;
        _1161 = _1003;
        _1162 = _1002;
        _1163 = _1017;
        _1164 = _1016;
        _1165 = _1015;
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _1154;
        _1155 = _1154;
        _1156 = _1154;
        _1157 = _1154;
        _1158 = _1154;
        _1159 = _1154;
        _1160 = _1154;
        _1161 = _1154;
        _1162 = _1154;
        _1163 = _1154;
        _1164 = _1154;
        _1165 = _1154;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1196 = fma(_823, cbModelParam._m0[30u].z, fma(_819, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _815));
        float _1200 = fma(_823, cbModelParam._m0[31u].z, fma(_819, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _815));
        float _1204 = fma(_823, cbModelParam._m0[32u].z, fma(_819, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _815));
        float _1227 = _815 + _591;
        float _1228 = _819 + _592;
        float _1229 = _823 + _593;
        float _1239 = fma(_1229, cbModelParam._m0[30u].z, fma(_1228, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1227)) - _1196;
        float _1240 = fma(_1229, cbModelParam._m0[31u].z, fma(_1228, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1227)) - _1200;
        float _1241 = fma(_1229, cbModelParam._m0[32u].z, fma(_1228, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1227)) - _1204;
        float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
        float _1258 = ((_1245 * _1239) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1196 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1245 * _1240) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1200 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1245 * _1241) / cbModelParam._m0[35u].z) + ((((((_1204 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        float _1295 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1262.x + (-0.5));
        float _1297 = _1295 * (_1262.y + (-0.5));
        float _1298 = _1295 * (_1262.z + (-0.5));
        float _1305 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1269.x + (-0.5));
        float _1307 = _1305 * (_1269.y + (-0.5));
        float _1308 = _1305 * (_1269.z + (-0.5));
        float _1315 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1276.x + (-0.5));
        float _1317 = _1315 * (_1276.y + (-0.5));
        float _1318 = _1315 * (_1276.z + (-0.5));
        float _1325 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1283.x + (-0.5));
        float _1327 = _1325 * (_1283.y + (-0.5));
        float _1328 = _1325 * (_1283.z + (-0.5));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = _1296 * 0.5;
        float _1333 = _1306 * 0.5;
        float _1334 = _1316 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_591, _592, _593), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3858 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1359 + 1.0))) + _1364) * _1329;
        float _1374 = _1297 * 0.5;
        float _1375 = _1307 * 0.5;
        float _1376 = _1317 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_591, _592, _593), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _3891 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1401 + 1.0))) + _1406) * _1330;
        float _1416 = _1298 * 0.5;
        float _1417 = _1308 * 0.5;
        float _1418 = _1318 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_591, _592, _593), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _3924 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1443 + 1.0))) + _1448) * _1331;
        _1465 = _1298;
        _1466 = _1297;
        _1467 = _1296;
        _1468 = _1308;
        _1469 = _1307;
        _1470 = _1306;
        _1471 = _1318;
        _1472 = _1317;
        _1473 = _1316;
        _1474 = _1331;
        _1475 = _1330;
        _1476 = _1329;
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
    }
    else
    {
        _1465 = _1154;
        _1466 = _1154;
        _1467 = _1154;
        _1468 = _1154;
        _1469 = _1154;
        _1470 = _1154;
        _1471 = _1154;
        _1472 = _1154;
        _1473 = _1154;
        _1474 = _1154;
        _1475 = _1154;
        _1476 = _1154;
        _1477 = 0.0;
        _1478 = 0.0;
        _1479 = 0.0;
    }
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1166)) + _1166;
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1167)) + _1167;
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1168)) + _1168;
    float _1512 = fma(_1491, cbSceneParam._m0[89u].z, fma(_1490, cbSceneParam._m0[89u].y, _1489 * cbSceneParam._m0[89u].x));
    float _1515 = fma(_1491, cbSceneParam._m0[90u].z, fma(_1490, cbSceneParam._m0[90u].y, _1489 * cbSceneParam._m0[90u].x));
    float _1518 = fma(_1491, cbSceneParam._m0[91u].z, fma(_1490, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1489));
    float _1533 = _762 * 0.5;
    float _1534 = _763 * 0.5;
    float _1535 = _764 * 0.5;
    float _1536 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1539 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1542 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1576;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1549 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1153, _1157, _1160, _1163));
        float _1553 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1557 = dot(vec4(_1533, _1534, _1535, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1564 = dot(vec4(cbModelParam._m0[39u]), vec4(_1533, _1534, _1535, 1.0));
        _1576 = dot(vec3(isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1576 = 1.0;
    }
    float _1587;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1578 = dot(vec4(cbModelParam._m0[40u]), vec4(_1533, _1534, _1535, 1.0));
        _1587 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1587 = 1.0;
    }
    float _1591 = (_1587 * cbModelParam._m0[1u].x) + (_1576 * (1.0 - cbModelParam._m0[1u].x));
    float _1601 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _594);
    float _1602 = isnan(_1601) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1601 : min(cbModelParam._m0[25u].z, _1601));
    float _1683;
    float _1685;
    float _1687;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1650 = fma(_823, cbModelParam._m0[13u].z, fma(_819, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _815)) + cbModelParam._m0[13u].w;
        float _1654 = fma(_823, cbModelParam._m0[14u].z, fma(_819, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _815)) + cbModelParam._m0[14u].w;
        float _1658 = fma(_823, cbModelParam._m0[15u].z, fma(_819, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _815)) + cbModelParam._m0[15u].w;
        float _1661 = fma(_764, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _762));
        float _1664 = fma(_764, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _762));
        float _1667 = fma(_764, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _762));
        float _1695;
        if (_1661 > 0.0)
        {
            _1695 = abs((1.0 - _1650) / _1661);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1650 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1695 = frontier_phi_17_15_ladder;
        }
        float _1896;
        if (_1664 > 0.0)
        {
            _1896 = abs((1.0 - _1654) / _1664);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1654 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1896 = frontier_phi_26_22_ladder;
        }
        float _2139;
        if (_1667 > 0.0)
        {
            _2139 = abs((1.0 - _1658) / _1667);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1658 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2139 = frontier_phi_38_33_ladder;
        }
        float _2141 = isnan(_1896) ? _1695 : (isnan(_1695) ? _1896 : min(_1695, _1896));
        float _2142 = isnan(_2139) ? _2141 : (isnan(_2141) ? _2139 : min(_2141, _2139));
        float _2146 = (_2142 * _1661) + _1650;
        float _2147 = (_2142 * _1664) + _1654;
        float _2148 = (_2142 * _1667) + _1658;
        float _2149 = _2142 * 9.9999997473787516355514526367188e-05;
        float _2151 = (-1.0) - _2149;
        float _2153 = _2149 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2148 > _2153) || ((_2148 < _2151) || ((_2147 > _2153) || ((_2147 < _2151) || ((_2146 < _2151) || (_2146 > _2153))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2272 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2148, cbModelParam._m0[9u].z, fma(_2147, cbModelParam._m0[9u].y, _2146 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2148, cbModelParam._m0[10u].z, fma(_2147, cbModelParam._m0[10u].y, _2146 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2148, cbModelParam._m0[11u].z, fma(_2147, cbModelParam._m0[11u].y, _2146 * cbModelParam._m0[11u].x))), _1602);
            frontier_phi_16_38_ladder = _2272.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2272.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2272.x * cbModelParam._m0[1u].y;
        }
        _1683 = frontier_phi_16_38_ladder_2;
        _1685 = frontier_phi_16_38_ladder_1;
        _1687 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1671 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_762, _763, _764), _1602);
        _1683 = _1671.x * cbModelParam._m0[1u].y;
        _1685 = _1671.y * cbModelParam._m0[1u].y;
        _1687 = _1671.z * cbModelParam._m0[1u].y;
    }
    float _1691 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _594);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1691 : min(cbModelParam._m0[25u].w, _1691));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1746 = fma(_823, cbModelParam._m0[21u].z, fma(_819, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _815)) + cbModelParam._m0[21u].w;
        float _1750 = fma(_823, cbModelParam._m0[22u].z, fma(_819, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _815)) + cbModelParam._m0[22u].w;
        float _1754 = fma(_823, cbModelParam._m0[23u].z, fma(_819, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _815)) + cbModelParam._m0[23u].w;
        float _1757 = fma(_764, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _762));
        float _1760 = fma(_764, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _762));
        float _1763 = fma(_764, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _762));
        float _1901;
        if (_1757 > 0.0)
        {
            _1901 = abs((1.0 - _1746) / _1757);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1746 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1901 = frontier_phi_28_24_ladder;
        }
        float _2166;
        if (_1760 > 0.0)
        {
            _2166 = abs((1.0 - _1750) / _1760);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1750 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2166 = frontier_phi_40_35_ladder;
        }
        float _2371;
        if (_1763 > 0.0)
        {
            _2371 = abs((1.0 - _1754) / _1763);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1754 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2371 = frontier_phi_49_46_ladder;
        }
        float _2373 = isnan(_2166) ? _1901 : (isnan(_1901) ? _2166 : min(_1901, _2166));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1757) + _1746;
        float _2379 = (_2374 * _1760) + _1750;
        float _2380 = (_2374 * _1763) + _1754;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2381;
        float _2384 = _2381 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2380 > _2384) || ((_2380 < _2382) || ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 < _2382) || (_2378 > _2384))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2579 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2380, cbModelParam._m0[17u].z, fma(_2379, cbModelParam._m0[17u].y, _2378 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2380, cbModelParam._m0[18u].z, fma(_2379, cbModelParam._m0[18u].y, _2378 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2380, cbModelParam._m0[19u].z, fma(_2379, cbModelParam._m0[19u].y, _2378 * cbModelParam._m0[19u].x))), _1692);
            frontier_phi_25_49_ladder = _2579.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2579.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2579.x * cbModelParam._m0[1u].z;
        }
        _1782 = frontier_phi_25_49_ladder_2;
        _1784 = frontier_phi_25_49_ladder_1;
        _1786 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_762, _763, _764), _1692);
        _1782 = _1766.x * cbModelParam._m0[1u].z;
        _1784 = _1766.y * cbModelParam._m0[1u].z;
        _1786 = _1766.z * cbModelParam._m0[1u].z;
    }
    float _1798 = ((((1.0 - _783) * ((_770 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_783 * _770)) * _754;
    float _1799 = _1798 * ((cbModelParam._m0[1u].w * (_1782 - _1683)) + _1683);
    float _1800 = _1798 * ((cbModelParam._m0[1u].w * (_1784 - _1685)) + _1685);
    float _1801 = _1798 * ((cbModelParam._m0[1u].w * (_1786 - _1687)) + _1687);
    float _1804 = fma(_1801, cbSceneParam._m0[89u].z, fma(_1800, cbSceneParam._m0[89u].y, _1799 * cbSceneParam._m0[89u].x));
    float _1807 = fma(_1801, cbSceneParam._m0[90u].z, fma(_1800, cbSceneParam._m0[90u].y, _1799 * cbSceneParam._m0[90u].x));
    float _1810 = fma(_1801, cbSceneParam._m0[91u].z, fma(_1800, cbSceneParam._m0[91u].y, _1799 * cbSceneParam._m0[91u].x));
    uvec4 _1820 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1822 = _1820.x * 14u;
    uint _1823 = _1822 + 13u;
    float _1830 = _754 + (-1.0);
    float _1835 = (cbLight._m0[_1823].x * _1830) + 1.0;
    float _1836 = (cbLight._m0[_1823].y * _1830) + 1.0;
    float _1837 = (cbLight._m0[_1823].z * _1830) + 1.0;
    float _1838 = (cbLight._m0[_1823].w * _1830) + 1.0;
    uint _1839 = _1822 + 5u;
    float _1845 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
    uint _1849 = _1822 + 4u;
    float _1855 = isnan(1.0) ? _1835 : (isnan(_1835) ? 1.0 : min(_1835, 1.0));
    uint _1859 = _1822 | 1u;
    float _1870 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_591, _592, _593));
    float _1873 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_591, _592, _593));
    float _4060 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _4071 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1878 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * 0.3183098733425140380859375;
    float _1880 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.3183098733425140380859375;
    float _1887 = ((cbLight._m0[_1839].x * _1845) * _1880) + ((cbLight._m0[_1849].x * _1855) * _1878);
    float _1888 = ((_1845 * cbLight._m0[_1839].y) * _1880) + ((_1855 * cbLight._m0[_1849].y) * _1878);
    float _1889 = ((_1845 * cbLight._m0[_1839].z) * _1880) + ((_1855 * cbLight._m0[_1849].z) * _1878);
    uvec4 _1893 = floatBitsToUint(cbLight._m0[_1822 + 12u]);
    bool _1895 = _1893.x == 0u;
    float _1906;
    float _1908;
    float _1910;
    if (_1895)
    {
        _1906 = _1887;
        _1908 = _1888;
        _1910 = _1889;
    }
    else
    {
        uint _1914 = _1822 + 6u;
        float _1930 = (dot(vec3(cbLight._m0[_1822 + 2u].xyz), vec3(_591, _592, _593)) * 0.5) + 0.5;
        float _1931 = _1930 * _1930;
        float _4082 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1932 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1933 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _1906 = (((cbLight._m0[_1914].x * 0.3183098733425140380859375) * _1932) * _1933) + _1887;
        _1908 = (((cbLight._m0[_1914].y * 0.3183098733425140380859375) * _1932) * _1933) + _1888;
        _1910 = (((cbLight._m0[_1914].z * 0.3183098733425140380859375) * _1932) * _1933) + _1889;
    }
    bool _1913 = _1893.y == 0u;
    float _1951;
    float _1953;
    float _1955;
    if (_1913)
    {
        _1951 = _1906;
        _1953 = _1908;
        _1955 = _1910;
    }
    else
    {
        uint _2110 = _1822 + 7u;
        float _2126 = (dot(vec3(cbLight._m0[_1822 + 3u].xyz), vec3(_591, _592, _593)) * 0.5) + 0.5;
        float _2127 = _2126 * _2126;
        float _4098 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2128 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _2129 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _1951 = (((cbLight._m0[_2110].x * 0.3183098733425140380859375) * _2128) * _2129) + _1906;
        _1953 = (((cbLight._m0[_2110].y * 0.3183098733425140380859375) * _2128) * _2129) + _1908;
        _1955 = (((cbLight._m0[_2110].z * 0.3183098733425140380859375) * _2128) * _2129) + _1910;
    }
    uint _1958 = _1822 + 8u;
    float _1971 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1822].w)) * _594) * 0.949999988079071044921875);
    float _1972 = _1971 * _1971;
    float _1973 = cbLight._m0[_1822].x + _671;
    float _1974 = cbLight._m0[_1822].y + _672;
    float _1975 = cbLight._m0[_1822].z + _673;
    float _1979 = inversesqrt(dot(vec3(_1973, _1974, _1975), vec3(_1973, _1974, _1975)));
    float _1980 = _1979 * _1973;
    float _1981 = _1979 * _1974;
    float _1982 = _1979 * _1975;
    float _1983 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_1822].xyz));
    float _4114 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _1987 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _1988 = dot(vec3(_591, _592, _593), vec3(_1980, _1981, _1982));
    float _4136 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _1992 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_1980, _1981, _1982));
    float _4147 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1996 = _1972 * _1972;
    float _2000 = ((_1991 * _1991) * (_1996 + (-1.0))) + 1.0;
    float _2011 = (exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2012 = 1.0 - _1972;
    float _2023 = (0.5 / (((_1987 * ((_1986 * _2012) + _1972)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2012) + _1972) * _1986))) * _1986;
    float _4158 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2025 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1996 / ((_2000 * _2000) * 3.141590118408203125));
    uint _2036 = _1822 + 9u;
    float _2047 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1859].w)) * _594) * 0.949999988079071044921875);
    float _2048 = _2047 * _2047;
    float _2049 = cbLight._m0[_1859].x + _671;
    float _2050 = cbLight._m0[_1859].y + _672;
    float _2051 = cbLight._m0[_1859].z + _673;
    float _2055 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
    float _2056 = _2055 * _2049;
    float _2057 = _2055 * _2050;
    float _2058 = _2055 * _2051;
    float _2059 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_1859].xyz));
    float _4169 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2063 = dot(vec3(_591, _592, _593), vec3(_2056, _2057, _2058));
    float _4180 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
    float _2067 = dot(vec3(cbLight._m0[_1859].xyz), vec3(_2056, _2057, _2058));
    float _4191 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2071 = _2048 * _2048;
    float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
    float _2084 = (exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2085 = 1.0 - _2048;
    float _2095 = (0.5 / (((_1987 * ((_2062 * _2085) + _2048)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2085) + _2048) * _2062))) * _2062;
    float _4202 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
    float _2107 = (((_2084 * cbLight._m0[_2036].x) * _2097) * _1845) + (((_2011 * cbLight._m0[_1958].x) * _2025) * _1855);
    float _2108 = (((_2084 * cbLight._m0[_2036].y) * _2097) * _1845) + (((_2011 * cbLight._m0[_1958].y) * _2025) * _1855);
    float _2109 = (((_2084 * cbLight._m0[_2036].z) * _2097) * _1845) + (((_2011 * cbLight._m0[_1958].z) * _2025) * _1855);
    float _2171;
    float _2173;
    float _2175;
    if (_1895)
    {
        _2171 = _2107;
        _2173 = _2108;
        _2175 = _2109;
    }
    else
    {
        uint _2177 = _1822 + 2u;
        uint _2181 = _1822 + 10u;
        float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _594) * 0.949999988079071044921875);
        float _2196 = _2195 * _2195;
        float _2197 = cbLight._m0[_2177].x + _671;
        float _2198 = cbLight._m0[_2177].y + _672;
        float _2199 = cbLight._m0[_2177].z + _673;
        float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
        float _2204 = _2203 * _2197;
        float _2205 = _2203 * _2198;
        float _2206 = _2203 * _2199;
        float _2207 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2177].xyz));
        float _4213 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2211 = dot(vec3(_591, _592, _593), vec3(_2204, _2205, _2206));
        float _4224 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _2215 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2204, _2205, _2206));
        float _4235 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2219 = _2196 * _2196;
        float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
        float _2232 = (exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2233 = 1.0 - _2196;
        float _2243 = (0.5 / (((_1987 * ((_2210 * _2233) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2233) + _2196) * _2210))) * _2210;
        float _4246 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2245 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
        float _2246 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
        _2171 = (((_2232 * cbLight._m0[_2181].x) * _2245) * _2246) + _2107;
        _2173 = (((_2232 * cbLight._m0[_2181].y) * _2245) * _2246) + _2108;
        _2175 = (((_2232 * cbLight._m0[_2181].z) * _2245) * _2246) + _2109;
    }
    float _2281;
    float _2283;
    float _2285;
    if (_1913)
    {
        _2281 = _2171;
        _2283 = _2173;
        _2285 = _2175;
    }
    else
    {
        uint _2292 = _1822 + 3u;
        uint _2296 = _1822 + 11u;
        float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _594) * 0.949999988079071044921875);
        float _2311 = _2310 * _2310;
        float _2312 = cbLight._m0[_2292].x + _671;
        float _2313 = cbLight._m0[_2292].y + _672;
        float _2314 = cbLight._m0[_2292].z + _673;
        float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
        float _2319 = _2318 * _2312;
        float _2320 = _2318 * _2313;
        float _2321 = _2318 * _2314;
        float _2322 = dot(vec3(_591, _592, _593), vec3(cbLight._m0[_2292].xyz));
        float _4262 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2325 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _2326 = dot(vec3(_591, _592, _593), vec3(_2319, _2320, _2321));
        float _4273 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2330 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2319, _2320, _2321));
        float _4284 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2334 = _2311 * _2311;
        float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
        float _2347 = (exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2348 = 1.0 - _2311;
        float _2358 = (0.5 / (((_1987 * ((_2325 * _2348) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_1987 * _2348) + _2311) * _2325))) * _2325;
        float _4295 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2360 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
        float _2361 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
        _2281 = (((_2347 * cbLight._m0[_2296].x) * _2360) * _2361) + _2171;
        _2283 = (((_2347 * cbLight._m0[_2296].y) * _2360) * _2361) + _2173;
        _2285 = (((_2347 * cbLight._m0[_2296].z) * _2360) * _2361) + _2175;
    }
    float _2496;
    float _2498;
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    if (_1820.y == 0u)
    {
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2437 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2436;
        float _2438 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2436;
        float _2439 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2436;
        uvec4 _2451 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2452 = _2451.x;
        uint _2463 = uint((float(_2451.y) * floor(float(uint(cbSceneParam._m0[85u].y * _692) / _2452))) + floor(float(uint(cbSceneParam._m0[85u].x * _691) / _2452)));
        float _2473 = (log2(_2439 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2474 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        uint _2477 = uint(isnan(14.0) ? _2474 : (isnan(_2474) ? 14.0 : min(_2474, 14.0)));
        uvec4 _2482 = texelFetch(g_lightClusterGridBuffer, int(((_2477 << 2u) + (_2463 << 6u)) >> 2u));
        uint _2483 = _2482.x;
        uint _2484 = _2451.z;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        float _2592;
        float _2594;
        if (((((1u << ((_2484 >> 4u) & 15u)) + 4294967295u) & _2483) == 0u) || ((_2484 & 240u) == 0u))
        {
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
        }
        else
        {
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2593;
            float _2595;
            float _2737 = 0.0;
            float _2738 = 0.0;
            float _2739 = 0.0;
            float _2740 = 0.0;
            float _2741 = 0.0;
            float _2742 = 0.0;
            uint _2743 = 0u;
            uint _2752;
            bool _2753;
            for (;;)
            {
                _2752 = texelFetch(g_lightClassification, int((((_2477 << 5u) + (_2463 << 9u)) + (_2743 << 2u)) >> 2u)).x;
                _2753 = _2752 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2753)
                {
                    frontier_phi_66_pred = _2737;
                    frontier_phi_66_pred_1 = _2742;
                    frontier_phi_66_pred_2 = _2741;
                    frontier_phi_66_pred_3 = _2740;
                    frontier_phi_66_pred_4 = _2739;
                    frontier_phi_66_pred_5 = _2738;
                }
                else
                {
                    float _2882;
                    float _2883;
                    float _2884;
                    float _2885;
                    float _2886;
                    float _2887;
                    uint _2888;
                    _2882 = _2737;
                    _2883 = _2738;
                    _2884 = _2739;
                    _2885 = _2740;
                    _2886 = _2741;
                    _2887 = _2742;
                    _2888 = _2752;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    for (;;)
                    {
                        uint _2892 = uint(findLSB(_2888)) + (_2743 << 5u);
                        uint _2889 = (_2888 + 4294967295u) & _2888;
                        uint _2894 = _2892 * 48u;
                        vec4 _2908 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 3u)).x));
                        uint _2914 = (_2892 * 48u) + 4u;
                        vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2914)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2914 + 3u)).x));
                        uint _2933 = (_2892 * 48u) + 8u;
                        vec3 _2944 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x));
                        float _2948 = _2908.x - _2437;
                        float _2949 = _2908.y - _2438;
                        float _2950 = _2908.z - _2439;
                        float _2951 = dot(vec3(_2948, _2949, _2950), vec3(_2948, _2949, _2950));
                        float _2954 = inversesqrt(_2951);
                        float _2955 = _2954 * _2948;
                        float _2956 = _2954 * _2949;
                        float _2957 = _2954 * _2950;
                        float _2958 = dot(vec3(_710, _713, _716), vec3(_2955, _2956, _2957));
                        float _2963 = 1.0 - (_2951 * _2908.w);
                        float _4321 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2964 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _2965 = sqrt(_2951) * _2927.w;
                        float _2968 = 1.39999997615814208984375 / (_2965 + 1.39999997615814208984375);
                        float _2969 = _2968 * _2968;
                        float _2972 = ((1.0 - _2969) * _2958) + _2969;
                        float _2975 = _2965 * _2965;
                        float _2979 = ((isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0))) * _2964) / ((_2975 * 0.699999988079071044921875) + 1.0);
                        float _2983 = (-0.0) - _2437;
                        float _2984 = (-0.0) - _2438;
                        float _2985 = (-0.0) - _2439;
                        float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                        float _2990 = _2989 * _2983;
                        float _2991 = _2989 * _2984;
                        float _2992 = _2989 * _2985;
                        float _3000 = exp2(log2(1.0 / ((_2975 * 3.5) + 5.0)) * 0.25);
                        float _3001 = 1.0 - _770;
                        float _3008 = sqrt(1.0 - ((1.0 - (_3001 * _3001)) * (1.0 - (_3000 * _3000))));
                        float _3009 = _3008 * _3008;
                        float _3010 = _3009 * _3009;
                        float _3011 = _2990 + _2955;
                        float _3012 = _2991 + _2956;
                        float _3013 = _2992 + _2957;
                        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
                        float _3021 = dot(vec3(_710, _713, _716), vec3(_2990, _2991, _2992));
                        float _4337 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3024 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3025 = dot(vec3(_710, _713, _716), vec3(_3017 * _3011, _3017 * _3012, _3017 * _3013));
                        float _4348 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3028 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3032 = ((_3028 * _3028) * (_3010 + (-1.0))) + 1.0;
                        float _3033 = _2968 * _3009;
                        float _3034 = _3033 * _3033;
                        float _3037 = ((1.0 - _3034) * _2958) + _3034;
                        float _4359 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                        float _3038 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3039 = 1.0 - _3009;
                        float _3049 = (0.5 / (((_3038 * ((_3024 * _3039) + _3009)) + 9.9999999392252902907785028219223e-09) + (((_3038 * _3039) + _3009) * _3024))) * _3038;
                        float _4370 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3060 = (((_3010 * 3.1415927410125732421875) * (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) / ((_3032 * _3032) * ((_2975 * 2.1991131305694580078125) + 3.141590118408203125))) * _2964;
                        _2812 = (_2979 * _2927.x) + _2885;
                        _2813 = (_2979 * _2927.y) + _2886;
                        _2814 = (_2979 * _2927.z) + _2887;
                        _2809 = (_3060 * _2944.x) + _2882;
                        _2810 = (_3060 * _2944.y) + _2883;
                        _2811 = (_3060 * _2944.z) + _2884;
                        if (_2889 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2882 = _2809;
                            _2883 = _2810;
                            _2884 = _2811;
                            _2885 = _2812;
                            _2886 = _2813;
                            _2887 = _2814;
                            _2888 = _2889;
                        }
                    }
                    frontier_phi_66_pred = _2809;
                    frontier_phi_66_pred_1 = _2814;
                    frontier_phi_66_pred_2 = _2813;
                    frontier_phi_66_pred_3 = _2812;
                    frontier_phi_66_pred_4 = _2811;
                    frontier_phi_66_pred_5 = _2810;
                }
                _2585 = frontier_phi_66_pred;
                _2595 = frontier_phi_66_pred_1;
                _2593 = frontier_phi_66_pred_2;
                _2591 = frontier_phi_66_pred_3;
                _2589 = frontier_phi_66_pred_4;
                _2587 = frontier_phi_66_pred_5;
                uint _2744 = _2743 + 1u;
                if (_2744 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2737 = _2585;
                    _2738 = _2587;
                    _2739 = _2589;
                    _2740 = _2591;
                    _2741 = _2593;
                    _2742 = _2595;
                    _2743 = _2744;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
        }
        uvec4 _2598 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2599 = _2598.z;
        uint _2601 = (_2599 >> 8u) & 15u;
        float _2705;
        float _2707;
        float _2709;
        float _2711;
        float _2713;
        float _2715;
        if (((4294967295u << _2601) & _2483) == 0u)
        {
            _2705 = _2584;
            _2707 = _2586;
            _2709 = _2588;
            _2711 = _2590;
            _2713 = _2592;
            _2715 = _2594;
        }
        else
        {
            float _2730 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
            float _2731 = _2730 * _2437;
            float _2732 = _2730 * _2438;
            float _2733 = _2730 * _2439;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2601 < ((_2599 >> 12u) & 15u))
            {
                float _2706;
                float _2708;
                float _2710;
                float _2712;
                float _2714;
                float _2716;
                float _2865 = _2584;
                float _2866 = _2586;
                float _2867 = _2588;
                float _2868 = _2590;
                float _2869 = _2592;
                float _2870 = _2594;
                uint _2871 = _2601;
                uint _2880;
                bool _2881;
                for (;;)
                {
                    _2880 = texelFetch(g_lightClassification, int((((_2477 << 5u) + (_2463 << 9u)) + (_2871 << 2u)) >> 2u)).x;
                    _2881 = _2880 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2881)
                    {
                        frontier_phi_77_pred = _2870;
                        frontier_phi_77_pred_1 = _2869;
                        frontier_phi_77_pred_2 = _2868;
                        frontier_phi_77_pred_3 = _2867;
                        frontier_phi_77_pred_4 = _2866;
                        frontier_phi_77_pred_5 = _2865;
                    }
                    else
                    {
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3087 = _2865;
                        float _3088 = _2866;
                        float _3089 = _2867;
                        float _3090 = _2868;
                        float _3091 = _2869;
                        float _3092 = _2870;
                        uint _3093 = _2880;
                        uint _3094;
                        vec4 _3119;
                        float _3120;
                        vec4 _3135;
                        vec3 _3147;
                        vec4 _3162;
                        vec4 _3178;
                        float _3224;
                        bool _3225;
                        for (;;)
                        {
                            uint _3104 = ((_2871 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3093));
                            _3094 = (_3093 + 4294967295u) & _3093;
                            uint _3106 = _3104 * 40u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            _3120 = _3119.w;
                            uint _3122 = (_3104 * 40u) + 4u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3137 = (_3104 * 40u) + 8u;
                            _3147 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x));
                            uint _3149 = (_3104 * 40u) + 16u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3165 = (_3104 * 40u) + 20u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3104 * 40u) + 24u;
                            vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            uint _3199 = (_3104 * 40u) + 28u;
                            vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            _3224 = fma(_2439, _3212.z, fma(_2438, _3212.y, _3212.x * _2437)) + _3212.w;
                            _3225 = !((fma(_2439, _3193.z, fma(_2438, _3193.y, _3193.x * _2437)) + _3193.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3225)
                            {
                                float _3252 = _3119.x - _2437;
                                float _3253 = _3119.y - _2438;
                                float _3254 = _3119.z - _2439;
                                float _3255 = dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254));
                                float _3258 = inversesqrt(_3255);
                                float _3259 = _3258 * _3252;
                                float _3260 = _3258 * _3253;
                                float _3261 = _3258 * _3254;
                                float _3265 = 1.0 - (_3255 / (_3120 * _3120));
                                float _4381 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3270 = sqrt(_3255) * _3135.w;
                                float _3272 = 1.39999997615814208984375 / (_3270 + 1.39999997615814208984375);
                                float _3273 = _3272 * _3272;
                                float _3276 = ((1.0 - _3273) * dot(vec3(_3259, _3260, _3261), vec3(_710, _713, _716))) + _3273;
                                float _3279 = _3270 * _3270;
                                float _3283 = (fma(_2439, _3162.z, fma(_2438, _3162.y, _3162.x * _2437)) + _3162.w) / _3224;
                                float _3284 = (fma(_2439, _3178.z, fma(_2438, _3178.y, _3178.x * _2437)) + _3178.w) / _3224;
                                float _3288 = 1.0 - dot(vec2(_3283, _3284), vec2(_3283, _3284));
                                float _4397 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3289 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3290 = _3289 * (((isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0))) * _3266) / ((_3279 * 0.699999988079071044921875) + 1.0));
                                float _3302 = exp2(log2(1.0 / ((_3279 * 3.5) + 5.0)) * 0.25);
                                float _3303 = 1.0 - _770;
                                float _3310 = sqrt(1.0 - ((1.0 - (_3303 * _3303)) * (1.0 - (_3302 * _3302))));
                                float _3311 = _3310 * _3310;
                                float _3312 = _3311 * _3311;
                                float _3313 = _3259 - _2731;
                                float _3314 = _3260 - _2732;
                                float _3315 = _3261 - _2733;
                                float _3319 = inversesqrt(dot(vec3(_3313, _3314, _3315), vec3(_3313, _3314, _3315)));
                                float _3323 = dot(vec3(_710, _713, _716), vec3((-0.0) - _2731, (-0.0) - _2732, (-0.0) - _2733));
                                float _4408 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3326 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3327 = dot(vec3(_710, _713, _716), vec3(_3319 * _3313, _3319 * _3314, _3319 * _3315));
                                float _4419 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3330 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3334 = ((_3330 * _3330) * (_3312 + (-1.0))) + 1.0;
                                float _3335 = _3272 * _3311;
                                float _3336 = _3335 * _3335;
                                float _3342 = ((1.0 - _3336) * dot(vec3(_710, _713, _716), vec3(_3259, _3260, _3261))) + _3336;
                                float _4430 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3344 = 1.0 - _3311;
                                float _3354 = (0.5 / (((_3343 * ((_3326 * _3344) + _3311)) + 9.9999999392252902907785028219223e-09) + (((_3343 * _3344) + _3311) * _3326))) * _3343;
                                float _4441 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                                float _3364 = (_3289 * _3266) * (((_3312 * 3.1415927410125732421875) * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) / ((_3334 * _3334) * ((_3279 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3290 * _3135.y;
                                frontier_phi_83_pred_1 = _3290 * _3135.x;
                                frontier_phi_83_pred_2 = _3364 * _3147.z;
                                frontier_phi_83_pred_3 = _3364 * _3147.y;
                                frontier_phi_83_pred_4 = _3364 * _3147.x;
                                frontier_phi_83_pred_5 = _3290 * _3135.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3372 = frontier_phi_83_pred;
                            _3371 = frontier_phi_83_pred_1;
                            _3370 = frontier_phi_83_pred_2;
                            _3369 = frontier_phi_83_pred_3;
                            _3368 = frontier_phi_83_pred_4;
                            _3373 = frontier_phi_83_pred_5;
                            _3077 = _3371 + _3090;
                            _3078 = _3372 + _3091;
                            _3079 = _3373 + _3092;
                            _3074 = _3368 + _3087;
                            _3075 = _3369 + _3088;
                            _3076 = _3370 + _3089;
                            if (_3094 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3094;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3079;
                        frontier_phi_77_pred_1 = _3078;
                        frontier_phi_77_pred_2 = _3077;
                        frontier_phi_77_pred_3 = _3076;
                        frontier_phi_77_pred_4 = _3075;
                        frontier_phi_77_pred_5 = _3074;
                    }
                    _2716 = frontier_phi_77_pred;
                    _2714 = frontier_phi_77_pred_1;
                    _2712 = frontier_phi_77_pred_2;
                    _2710 = frontier_phi_77_pred_3;
                    _2708 = frontier_phi_77_pred_4;
                    _2706 = frontier_phi_77_pred_5;
                    uint _2872 = _2871 + 1u;
                    if (_2872 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2865 = _2706;
                        _2866 = _2708;
                        _2867 = _2710;
                        _2868 = _2712;
                        _2869 = _2714;
                        _2870 = _2716;
                        _2871 = _2872;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2710;
                frontier_phi_58_59_ladder_1 = _2716;
                frontier_phi_58_59_ladder_2 = _2714;
                frontier_phi_58_59_ladder_3 = _2712;
                frontier_phi_58_59_ladder_4 = _2708;
                frontier_phi_58_59_ladder_5 = _2706;
            }
            else
            {
                frontier_phi_58_59_ladder = _2588;
                frontier_phi_58_59_ladder_1 = _2594;
                frontier_phi_58_59_ladder_2 = _2592;
                frontier_phi_58_59_ladder_3 = _2590;
                frontier_phi_58_59_ladder_4 = _2586;
                frontier_phi_58_59_ladder_5 = _2584;
            }
            _2705 = frontier_phi_58_59_ladder_5;
            _2707 = frontier_phi_58_59_ladder_4;
            _2709 = frontier_phi_58_59_ladder;
            _2711 = frontier_phi_58_59_ladder_3;
            _2713 = frontier_phi_58_59_ladder_2;
            _2715 = frontier_phi_58_59_ladder_1;
        }
        float _2720 = isnan(1.0) ? _754 : (isnan(_754) ? 1.0 : min(_754, 1.0));
        _2496 = (_2720 * _2711) + _1951;
        _2498 = (_2720 * _2713) + _1953;
        _2500 = (_2720 * _2715) + _1955;
        _2502 = ((_2705 * 0.039999999105930328369140625) * _2720) + _2281;
        _2504 = ((_2707 * 0.039999999105930328369140625) * _2720) + _2283;
        _2506 = ((_2709 * 0.039999999105930328369140625) * _2720) + _2285;
    }
    else
    {
        _2496 = _1951;
        _2498 = _1953;
        _2500 = _1955;
        _2502 = _2281;
        _2504 = _2283;
        _2506 = _2285;
    }
    float _4457 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4468 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4479 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _2523 = ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2496 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _754))) + ((_2502 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1591)) * cbPerFrame._m0[3u].x);
    float _2524 = ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2498 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _754))) + ((_2504 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1591)) * cbPerFrame._m0[3u].x);
    float _2525 = ((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2500 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _754))) + ((_2506 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1591)) * cbPerFrame._m0[3u].x);
    uint _2526 = _230 + 6u;
    float _2534 = _691 / cbSceneParam._m0[86u].x;
    float _2535 = _692 / cbSceneParam._m0[86u].y;
    vec4 _2549 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, (log2((isnan(cbSceneParam._m0[77u].w) ? _612 : (isnan(_612) ? cbSceneParam._m0[77u].w : min(_612, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2551 = _2549.x;
    float _2552 = _2549.y;
    float _2553 = _2549.z;
    float _2554 = _2549.w;
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    if (_612 > cbSceneParam._m0[78u].w)
    {
        float _2609 = isnan(_612) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _612 : min(cbSceneParam._m0[80u].w, _612));
        float _2610 = _2609 / _612;
        float _2621 = _2610 * _664;
        float _2622 = _665 * _2610;
        float _2623 = (-0.0) - _2622;
        float _2625 = _2610 * _666;
        float _2627 = (cbSceneParam._m0[77u].w * _2623) / _2609;
        float _2628 = _2627 + cbSceneParam._m0[79u].w;
        float _2629 = cbSceneParam._m0[79u].w - _2622;
        float _2635 = sqrt(((_2621 * _2621) + (_2622 * _2622)) + (_2625 * _2625));
        float _2638 = (1.0 - (cbSceneParam._m0[77u].w / _2609)) * _2635;
        float _2643 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2645 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2822;
        if (abs((_2623 - _2627) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2822 = ((((_2628 > 0.0) ? exp2(_2643 * _2628) : (2.0 - exp2(_2645 * _2628))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2638;
        }
        else
        {
            float _2766 = 1.0 / cbSceneParam._m0[80u].x;
            float _2767 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : max(_2628, _2629));
            float _2768 = isnan(_2629) ? _2628 : (isnan(_2628) ? _2629 : min(_2628, _2629));
            float _2777 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : min(_2767, 0.0));
            float _2778 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : min(_2768, 0.0));
            _2822 = ((abs(_2635 / _2623) * cbSceneParam._m0[80u].y) * ((((_2777 - _2778) * 2.0) - ((exp2(_2643 * (isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0)))) - exp2(_2643 * (isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0))))) * _2766)) - ((exp2(_2645 * _2777) - exp2(_2645 * _2778)) * _2766))) + (_2638 * cbSceneParam._m0[80u].z);
        }
        vec4 _2824 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2534, _2535, 1.0), 0.0);
        float _2833 = exp2((_2822 * (-1.44269502162933349609375)) * (1.0 - _2824.w));
        float _2834 = log2(_2833);
        float _2850 = log2(_2554);
        _2647 = (exp2(_2850 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2834 * cbSceneParam._m0[78u].x)) * _2824.x) / cbSceneParam._m0[78u].x)) + _2551;
        _2649 = (exp2(_2850 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2834 * cbSceneParam._m0[78u].y)) * _2824.y) / cbSceneParam._m0[78u].y)) + _2552;
        _2651 = (exp2(_2850 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2834 * cbSceneParam._m0[78u].z)) * _2824.z) / cbSceneParam._m0[78u].z)) + _2553;
        _2653 = _2833 * _2554;
    }
    else
    {
        _2647 = _2551;
        _2649 = _2552;
        _2651 = _2553;
        _2653 = _2554;
    }
    bool _2860;
    vec4 _2663;
    vec4 _2685;
    float _2687;
    float _2691;
    float _2692;
    float _2693;
    float _2694;
    bool _2704;
    for (;;)
    {
        _2663 = cbMatDynParam._m0[0u];
        float _2665 = roundEven(_2663.y);
        bool _2666 = _2665 == 3.0;
        float _2667 = log2(_2653);
        float _2674 = exp2(_2667 * cbSceneParam._m0[78u].x) * _2523;
        float _2675 = exp2(_2667 * cbSceneParam._m0[78u].y) * _2524;
        float _2676 = exp2(_2667 * cbSceneParam._m0[78u].z) * _2525;
        float _2683 = _680 + (-0.5);
        _2685 = cbMtdParam._m0[1u];
        _2687 = _2685.y * _2683;
        float _2690 = (_2665 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2691 = _2690 * (_2666 ? _2674 : (_2674 + (cbSceneParam._m0[72u].w * _2647)));
        _2692 = _2690 * (_2666 ? _2675 : (_2675 + (cbSceneParam._m0[72u].w * _2649)));
        _2693 = _2690 * (_2666 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2651)));
        _2694 = _2683 * 0.999000012874603271484375;
        _2704 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2704)
        {
            if ((cbInstanceData._m0[_230 + 7u].x + _2694) < 0.5)
            {
                _2860 = true;
                break;
            }
        }
        uint _2801 = _729 + uint(_2663.w);
        if ((cbInstanceData._m0[_2801].w < 1.0) && ((cbInstanceData._m0[_2801].w + _2694) < 0.5))
        {
            _2860 = true;
            break;
        }
        if ((_2687 + 1.0) < _2685.x)
        {
            _2860 = true;
            break;
        }
        _2860 = false;
        break;
    }
    float _3065;
    if (_2860)
    {
        discard_state = true;
        _3065 = 0.0;
    }
    else
    {
        _3065 = cbInstanceData._m0[_2526].w;
    }
    SV_Target.x = _2691;
    SV_Target.y = _2692;
    SV_Target.z = _2693;
    SV_Target.w = _3065;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2526].w;
    discard_exit();
}


