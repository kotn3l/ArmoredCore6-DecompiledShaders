#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1251;
float _3610;
float _3611;
float _3612;
float _3613;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _229 = _228 * _220;
    float _230 = _228 * _221;
    float _231 = _228 * _222;
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = _235 * NORMAL.x;
    float _237 = _235 * NORMAL.y;
    float _238 = _235 * NORMAL.z;
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = _242 * TANGENT.x;
    float _244 = _242 * TANGENT.y;
    float _245 = _242 * TANGENT.z;
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3622 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3633 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3644 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _286) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _287) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = _323.x * cbMtdParam._m0[9u].x;
    float _329 = _323.y * cbMtdParam._m0[9u].y;
    float _330 = _323.z * cbMtdParam._m0[9u].z;
    float _334 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _300.x) * _328;
    float _337 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _300.y) * _329;
    float _340 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _300.z) * _330;
    float _347 = ((_328 - _334) * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) + _334;
    float _348 = ((_329 - _337) * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) + _337;
    float _349 = ((_330 - _340) * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) + _340;
    vec4 _368 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _286) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _287) + cbTextureTilingScale._m0[14u].w));
    vec4 _388 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _418 = _414.z;
    float _422 = (_414.x * 2.0) + (-1.0);
    float _423 = (_414.y * 2.0) + (-1.0);
    float _424 = dot(vec2(_422, _423), vec2(_422, _423));
    float _3655 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _429 = sqrt(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))));
    float _434 = _422 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_388.x * 2.0) + (-1.0)));
    float _435 = _423 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_388.y * 2.0) + (-1.0)));
    float _438 = fma(_429, _236, fma(_435, _243, _434 * _229));
    float _441 = fma(_429, _237, fma(_435, _244, _434 * _230));
    float _444 = fma(_429, _238, fma(_435, _245, _434 * _231));
    float _448 = inversesqrt(dot(vec3(_438, _441, _444), vec3(_438, _441, _444)));
    vec4 _484 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _486 = _484.x;
    float _487 = 1.0 - _486;
    float _496 = (cbMtdParam._m0[19u].x + dot(vec4(_448 * _438, _448 * _441, _448 * _444, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_486 - _487) * cbMtdParam._m0[24u].z) + _487) * cbMtdParam._m0[21u].z);
    float _3666 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _499 = (-0.0) - cbMtdParam._m0[24u].y;
    float _501 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _502 = isnan(1.0) ? _501 : (isnan(_501) ? 1.0 : min(_501, 1.0));
    float _509 = _497 - ((_497 * TEXCOORD_8.x) * _502);
    float _510 = _497 - ((_497 * TEXCOORD_8.y) * _502);
    float _511 = _497 - ((_497 * TEXCOORD_8.z) * _502);
    float _518 = (_509 * ((_368.x * cbMtdParam._m0[18u].x) - _347)) + _347;
    float _519 = (_510 * ((_368.y * cbMtdParam._m0[18u].y) - _348)) + _348;
    float _520 = (_511 * ((_368.z * cbMtdParam._m0[18u].z) - _349)) + _349;
    vec4 _532 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _534 = _532.x;
    float _535 = 1.0 - _534;
    float _563 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_534 - _535) * cbMtdParam._m0[24u].w) + _535) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3687 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _572 = ((((cbMtdParam._m0[10u].x - _518) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _564) + _518;
    float _573 = ((((cbMtdParam._m0[10u].y - _519) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _564) + _519;
    float _574 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _520)) * _564) + _520;
    float _579 = (((_388.z - _418) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _418;
    vec4 _593 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _600 = (_593.x * 2.0) + (-1.0);
    float _601 = (_593.y * 2.0) + (-1.0);
    float _602 = dot(vec2(_600, _601), vec2(_600, _601));
    float _3698 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _610 = ((_593.z - _579) * _509) + _579;
    float _613 = ((cbMtdParam._m0[23u].y - _610) * _564) + _610;
    vec4 _632 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _638 = (_632.x * 2.0) + (-1.0);
    float _639 = (_632.y * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3709 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _655 = ((sqrt(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) - _429) * _511) + _429;
    float _658 = (((_600 - _434) * _509) + _434) + (cbMtdParam._m0[21u].x * _434);
    float _659 = (((_601 - _435) * _510) + _435) + (cbMtdParam._m0[21u].x * _435);
    float _670 = (((_638 - _658) + (_658 * cbMtdParam._m0[22u].z)) * _564) + _658;
    float _671 = (((_639 - _659) + (_659 * cbMtdParam._m0[22u].z)) * _564) + _659;
    float _672 = (_564 * (sqrt(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) - _655)) + _655;
    float _674 = cbMtdParam._m0[22u].x + _414.w;
    float _677 = fma(_672, _236, fma(_671, _243, _670 * _229));
    float _680 = fma(_672, _237, fma(_671, _244, _670 * _230));
    float _683 = fma(_672, _238, fma(_671, _245, _670 * _231));
    float _687 = inversesqrt(dot(vec3(_677, _680, _683), vec3(_677, _680, _683)));
    float _688 = _687 * _677;
    float _689 = _687 * _680;
    float _690 = _687 * _683;
    float _3720 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _691 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3742 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3753 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3764 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _709 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _759 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _749);
    float _760 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _749);
    float _761 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _749);
    float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
    float _766 = _759 * _765;
    float _767 = _760 * _765;
    float _768 = _761 * _765;
    vec4 _773 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _775 = _773.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _932 = sqrt(((_759 * _759) + (_760 * _760)) + (_761 * _761));
        float _938 = (cbMatDynParam._m0[5u].x * _932) + cbMatDynParam._m0[5u].y;
        float _3775 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _943 = (cbMatDynParam._m0[5u].z * _932) + cbMatDynParam._m0[5u].w;
        float _3786 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) - _939)) + _939) < ((_775 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _787 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _788 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _808 = fma(_690, cbSceneParam._m0[5u].z, fma(_689, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _688));
    float _811 = fma(_690, cbSceneParam._m0[6u].z, fma(_689, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _688));
    float _814 = fma(_690, cbSceneParam._m0[7u].z, fma(_689, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _688));
    uint _827 = _267 + 9u;
    uint _828 = _827 + uint(cbMatDynParam._m0[0u].w);
    float _834 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_828].x;
    float _835 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_828].y;
    float _836 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * cbInstanceData._m0[_828].z;
    float _3797 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _838 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _839 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    vec4 _848 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _787, cbSceneParam._m0[86u].y * _788));
    float _852 = ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * TEXCOORD_5.w) * _848.x;
    float _853 = dot(vec3(_688, _689, _690), vec3(_766, _767, _768));
    float _856 = _853 * 2.0;
    float _860 = (_856 * _688) - _766;
    float _861 = (_856 * _689) - _767;
    float _862 = (_856 * _690) - _768;
    float _866 = abs(dot(vec3(_766, _767, _768), vec3(_688, _689, _690)));
    float _3830 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _868 = sqrt(_691);
    float _881 = exp2((_868 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_868 * 3.0));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _917 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1250;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _975 = fma(_921, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _913));
        float _979 = fma(_921, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _913));
        float _983 = fma(_921, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _913));
        float _1008 = _913 + _688;
        float _1009 = _917 + _689;
        float _1010 = _921 + _690;
        float _1020 = fma(_1010, cbModelParam._m0[26u].z, fma(_1009, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008)) - _975;
        float _1021 = fma(_1010, cbModelParam._m0[27u].z, fma(_1009, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008)) - _979;
        float _1022 = fma(_1010, cbModelParam._m0[28u].z, fma(_1009, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008)) - _983;
        float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
        float _1039 = ((_1026 * _1020) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_975 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1026 * _1021) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_979 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1026 * _1022) / cbModelParam._m0[34u].z) + ((((((_983 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1039, _1040, _1041), 0.0);
        float _1078 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1044.x + (-0.5));
        float _1080 = _1078 * (_1044.y + (-0.5));
        float _1081 = _1078 * (_1044.z + (-0.5));
        float _1088 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1051.x + (-0.5));
        float _1090 = _1088 * (_1051.y + (-0.5));
        float _1091 = _1088 * (_1051.z + (-0.5));
        float _1098 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1099 = _1098 * (_1058.x + (-0.5));
        float _1100 = _1098 * (_1058.y + (-0.5));
        float _1101 = _1098 * (_1058.z + (-0.5));
        float _1108 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1065.x + (-0.5));
        float _1110 = _1108 * (_1065.y + (-0.5));
        float _1111 = _1108 * (_1065.z + (-0.5));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = _1079 * 0.5;
        float _1116 = _1089 * 0.5;
        float _1117 = _1099 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1132 = (dot(vec3(_688, _689, _690), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1142 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3878 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1144 + 1.0))) + _1149) * _1112;
        float _1159 = _1080 * 0.5;
        float _1160 = _1090 * 0.5;
        float _1161 = _1100 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_688, _689, _690), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3911 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1186 + 1.0))) + _1191) * _1113;
        float _1201 = _1081 * 0.5;
        float _1202 = _1091 * 0.5;
        float _1203 = _1101 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_688, _689, _690), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3944 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1228 + 1.0))) + _1233) * _1114;
        _1250 = _1081;
        _1252 = _1080;
        _1253 = _1079;
        _1254 = _1091;
        _1255 = _1090;
        _1256 = _1089;
        _1257 = _1101;
        _1258 = _1100;
        _1259 = _1099;
        _1260 = _1114;
        _1261 = _1113;
        _1262 = _1112;
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
    }
    else
    {
        _1250 = _1251;
        _1252 = _1251;
        _1253 = _1251;
        _1254 = _1251;
        _1255 = _1251;
        _1256 = _1251;
        _1257 = _1251;
        _1258 = _1251;
        _1259 = _1251;
        _1260 = _1251;
        _1261 = _1251;
        _1262 = _1251;
        _1263 = 0.0;
        _1264 = 0.0;
        _1265 = 0.0;
    }
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1293 = fma(_921, cbModelParam._m0[30u].z, fma(_917, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _913));
        float _1297 = fma(_921, cbModelParam._m0[31u].z, fma(_917, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _913));
        float _1301 = fma(_921, cbModelParam._m0[32u].z, fma(_917, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _913));
        float _1324 = _913 + _688;
        float _1325 = _917 + _689;
        float _1326 = _921 + _690;
        float _1336 = fma(_1326, cbModelParam._m0[30u].z, fma(_1325, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1324)) - _1293;
        float _1337 = fma(_1326, cbModelParam._m0[31u].z, fma(_1325, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1324)) - _1297;
        float _1338 = fma(_1326, cbModelParam._m0[32u].z, fma(_1325, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1324)) - _1301;
        float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
        float _1355 = ((_1342 * _1336) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1293 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1342 * _1337) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1297 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1342 * _1338) / cbModelParam._m0[35u].z) + ((((((_1301 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1355, _1356, _1357), 0.0);
        float _1392 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1359.x + (-0.5));
        float _1394 = _1392 * (_1359.y + (-0.5));
        float _1395 = _1392 * (_1359.z + (-0.5));
        float _1402 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1366.x + (-0.5));
        float _1404 = _1402 * (_1366.y + (-0.5));
        float _1405 = _1402 * (_1366.z + (-0.5));
        float _1412 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1373.x + (-0.5));
        float _1414 = _1412 * (_1373.y + (-0.5));
        float _1415 = _1412 * (_1373.z + (-0.5));
        float _1422 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1380.x + (-0.5));
        float _1424 = _1422 * (_1380.y + (-0.5));
        float _1425 = _1422 * (_1380.z + (-0.5));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = _1393 * 0.5;
        float _1430 = _1403 * 0.5;
        float _1431 = _1413 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_688, _689, _690), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _4007 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1456 + 1.0))) + _1461) * _1426;
        float _1471 = _1394 * 0.5;
        float _1472 = _1404 * 0.5;
        float _1473 = _1414 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_688, _689, _690), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4040 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1498 + 1.0))) + _1503) * _1427;
        float _1513 = _1395 * 0.5;
        float _1514 = _1405 * 0.5;
        float _1515 = _1415 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_688, _689, _690), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4073 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1540 + 1.0))) + _1545) * _1428;
        _1562 = _1395;
        _1563 = _1394;
        _1564 = _1393;
        _1565 = _1405;
        _1566 = _1404;
        _1567 = _1403;
        _1568 = _1415;
        _1569 = _1414;
        _1570 = _1413;
        _1571 = _1428;
        _1572 = _1427;
        _1573 = _1426;
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
    }
    else
    {
        _1562 = _1251;
        _1563 = _1251;
        _1564 = _1251;
        _1565 = _1251;
        _1566 = _1251;
        _1567 = _1251;
        _1568 = _1251;
        _1569 = _1251;
        _1570 = _1251;
        _1571 = _1251;
        _1572 = _1251;
        _1573 = _1251;
        _1574 = 0.0;
        _1575 = 0.0;
        _1576 = 0.0;
    }
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1263)) + _1263;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1264)) + _1264;
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1265)) + _1265;
    float _1609 = fma(_1588, cbSceneParam._m0[89u].z, fma(_1587, cbSceneParam._m0[89u].y, _1586 * cbSceneParam._m0[89u].x));
    float _1612 = fma(_1588, cbSceneParam._m0[90u].z, fma(_1587, cbSceneParam._m0[90u].y, _1586 * cbSceneParam._m0[90u].x));
    float _1615 = fma(_1588, cbSceneParam._m0[91u].z, fma(_1587, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1586));
    float _1630 = _860 * 0.5;
    float _1631 = _861 * 0.5;
    float _1632 = _862 * 0.5;
    float _1633 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1636 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1639 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1673;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1646 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1250, _1254, _1257, _1260));
        float _1650 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1252, _1255, _1258, _1261));
        float _1654 = dot(vec4(_1630, _1631, _1632, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1661 = dot(vec4(cbModelParam._m0[39u]), vec4(_1630, _1631, _1632, 1.0));
        _1673 = dot(vec3(isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1661) ? 0.0 : (isnan(0.0) ? _1661 : max(0.0, _1661))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1673 = 1.0;
    }
    float _1684;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1675 = dot(vec4(cbModelParam._m0[40u]), vec4(_1630, _1631, _1632, 1.0));
        _1684 = dot(vec3(isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)), isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1675) ? 0.0 : (isnan(0.0) ? _1675 : max(0.0, _1675))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1684 = 1.0;
    }
    float _1688 = (_1684 * cbModelParam._m0[1u].x) + (_1673 * (1.0 - cbModelParam._m0[1u].x));
    float _1698 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _691);
    float _1699 = isnan(_1698) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1698 : min(cbModelParam._m0[25u].z, _1698));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1746 = fma(_921, cbModelParam._m0[13u].z, fma(_917, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _913)) + cbModelParam._m0[13u].w;
        float _1750 = fma(_921, cbModelParam._m0[14u].z, fma(_917, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _913)) + cbModelParam._m0[14u].w;
        float _1754 = fma(_921, cbModelParam._m0[15u].z, fma(_917, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _913)) + cbModelParam._m0[15u].w;
        float _1757 = fma(_862, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860));
        float _1760 = fma(_862, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860));
        float _1763 = fma(_862, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860));
        float _1791;
        if (_1757 > 0.0)
        {
            _1791 = abs((1.0 - _1746) / _1757);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1746 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1791 = frontier_phi_17_15_ladder;
        }
        float _1993;
        if (_1760 > 0.0)
        {
            _1993 = abs((1.0 - _1750) / _1760);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1750 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1993 = frontier_phi_26_22_ladder;
        }
        float _2236;
        if (_1763 > 0.0)
        {
            _2236 = abs((1.0 - _1754) / _1763);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1754 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2236 = frontier_phi_38_33_ladder;
        }
        float _2238 = isnan(_1993) ? _1791 : (isnan(_1791) ? _1993 : min(_1791, _1993));
        float _2239 = isnan(_2236) ? _2238 : (isnan(_2238) ? _2236 : min(_2238, _2236));
        float _2243 = (_2239 * _1757) + _1746;
        float _2244 = (_2239 * _1760) + _1750;
        float _2245 = (_2239 * _1763) + _1754;
        float _2246 = _2239 * 9.9999997473787516355514526367188e-05;
        float _2248 = (-1.0) - _2246;
        float _2250 = _2246 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2245 > _2250) || ((_2245 < _2248) || ((_2244 > _2250) || ((_2244 < _2248) || ((_2243 < _2248) || (_2243 > _2250))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2245, cbModelParam._m0[9u].z, fma(_2244, cbModelParam._m0[9u].y, _2243 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2245, cbModelParam._m0[10u].z, fma(_2244, cbModelParam._m0[10u].y, _2243 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2245, cbModelParam._m0[11u].z, fma(_2244, cbModelParam._m0[11u].y, _2243 * cbModelParam._m0[11u].x))), _1699);
            frontier_phi_16_38_ladder = _2369.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2369.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2369.x * cbModelParam._m0[1u].y;
        }
        _1779 = frontier_phi_16_38_ladder_2;
        _1781 = frontier_phi_16_38_ladder_1;
        _1783 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_860, _861, _862), _1699);
        _1779 = _1767.x * cbModelParam._m0[1u].y;
        _1781 = _1767.y * cbModelParam._m0[1u].y;
        _1783 = _1767.z * cbModelParam._m0[1u].y;
    }
    float _1787 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _691);
    float _1788 = isnan(_1787) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1787 : min(cbModelParam._m0[25u].w, _1787));
    float _1877;
    float _1879;
    float _1881;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1841 = fma(_921, cbModelParam._m0[21u].z, fma(_917, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _913)) + cbModelParam._m0[21u].w;
        float _1845 = fma(_921, cbModelParam._m0[22u].z, fma(_917, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _913)) + cbModelParam._m0[22u].w;
        float _1849 = fma(_921, cbModelParam._m0[23u].z, fma(_917, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _913)) + cbModelParam._m0[23u].w;
        float _1852 = fma(_862, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860));
        float _1855 = fma(_862, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860));
        float _1858 = fma(_862, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860));
        float _1998;
        if (_1852 > 0.0)
        {
            _1998 = abs((1.0 - _1841) / _1852);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1841 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1998 = frontier_phi_28_24_ladder;
        }
        float _2263;
        if (_1855 > 0.0)
        {
            _2263 = abs((1.0 - _1845) / _1855);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1845 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2263 = frontier_phi_40_35_ladder;
        }
        float _2468;
        if (_1858 > 0.0)
        {
            _2468 = abs((1.0 - _1849) / _1858);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1849 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2468 = frontier_phi_49_46_ladder;
        }
        float _2470 = isnan(_2263) ? _1998 : (isnan(_1998) ? _2263 : min(_1998, _2263));
        float _2471 = isnan(_2468) ? _2470 : (isnan(_2470) ? _2468 : min(_2470, _2468));
        float _2475 = (_2471 * _1852) + _1841;
        float _2476 = (_2471 * _1855) + _1845;
        float _2477 = (_2471 * _1858) + _1849;
        float _2478 = _2471 * 9.9999997473787516355514526367188e-05;
        float _2479 = (-1.0) - _2478;
        float _2481 = _2478 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2477 > _2481) || ((_2477 < _2479) || ((_2476 > _2481) || ((_2476 < _2479) || ((_2475 < _2479) || (_2475 > _2481))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2477, cbModelParam._m0[17u].z, fma(_2476, cbModelParam._m0[17u].y, _2475 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2477, cbModelParam._m0[18u].z, fma(_2476, cbModelParam._m0[18u].y, _2475 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2477, cbModelParam._m0[19u].z, fma(_2476, cbModelParam._m0[19u].y, _2475 * cbModelParam._m0[19u].x))), _1788);
            frontier_phi_25_49_ladder = _2676.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2676.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2676.x * cbModelParam._m0[1u].z;
        }
        _1877 = frontier_phi_25_49_ladder_2;
        _1879 = frontier_phi_25_49_ladder_1;
        _1881 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_860, _861, _862), _1788);
        _1877 = _1861.x * cbModelParam._m0[1u].z;
        _1879 = _1861.y * cbModelParam._m0[1u].z;
        _1881 = _1861.z * cbModelParam._m0[1u].z;
    }
    float _1893 = ((((1.0 - _881) * ((_868 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_881 * _868)) * _852;
    float _1894 = _1893 * ((cbModelParam._m0[1u].w * (_1877 - _1779)) + _1779);
    float _1895 = _1893 * ((cbModelParam._m0[1u].w * (_1879 - _1781)) + _1781);
    float _1896 = _1893 * ((cbModelParam._m0[1u].w * (_1881 - _1783)) + _1783);
    float _1899 = fma(_1896, cbSceneParam._m0[89u].z, fma(_1895, cbSceneParam._m0[89u].y, _1894 * cbSceneParam._m0[89u].x));
    float _1902 = fma(_1896, cbSceneParam._m0[90u].z, fma(_1895, cbSceneParam._m0[90u].y, _1894 * cbSceneParam._m0[90u].x));
    float _1905 = fma(_1896, cbSceneParam._m0[91u].z, fma(_1895, cbSceneParam._m0[91u].y, _1894 * cbSceneParam._m0[91u].x));
    uvec4 _1915 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _1917 = _1915.x * 14u;
    uint _1918 = _1917 + 13u;
    float _1925 = _852 + (-1.0);
    float _1930 = (cbLight._m0[_1918].x * _1925) + 1.0;
    float _1931 = (cbLight._m0[_1918].y * _1925) + 1.0;
    float _1932 = (cbLight._m0[_1918].z * _1925) + 1.0;
    float _1933 = (cbLight._m0[_1918].w * _1925) + 1.0;
    uint _1934 = _1917 + 5u;
    float _1940 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1944 = _1917 + 4u;
    float _1951 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
    uint _1955 = _1917 | 1u;
    float _1966 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_688, _689, _690));
    float _1969 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_688, _689, _690));
    float _4209 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _4220 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1974 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.3183098733425140380859375;
    float _1976 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * 0.3183098733425140380859375;
    float _1983 = ((cbLight._m0[_1934].x * _1940) * _1976) + ((cbLight._m0[_1944].x * _1951) * _1974);
    float _1984 = ((_1940 * cbLight._m0[_1934].y) * _1976) + ((_1951 * cbLight._m0[_1944].y) * _1974);
    float _1985 = ((_1940 * cbLight._m0[_1934].z) * _1976) + ((_1951 * cbLight._m0[_1944].z) * _1974);
    uvec4 _1990 = floatBitsToUint(cbLight._m0[_1917 + 12u]);
    bool _1992 = _1990.x == 0u;
    float _2003;
    float _2005;
    float _2007;
    if (_1992)
    {
        _2003 = _1983;
        _2005 = _1984;
        _2007 = _1985;
    }
    else
    {
        uint _2011 = _1917 + 6u;
        float _2027 = (dot(vec3(cbLight._m0[_1917 + 2u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2028 = _2027 * _2027;
        float _4231 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2029 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2030 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2003 = (((cbLight._m0[_2011].x * 0.3183098733425140380859375) * _2029) * _2030) + _1983;
        _2005 = (((cbLight._m0[_2011].y * 0.3183098733425140380859375) * _2029) * _2030) + _1984;
        _2007 = (((cbLight._m0[_2011].z * 0.3183098733425140380859375) * _2029) * _2030) + _1985;
    }
    bool _2010 = _1990.y == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_2010)
    {
        _2048 = _2003;
        _2050 = _2005;
        _2052 = _2007;
    }
    else
    {
        uint _2207 = _1917 + 7u;
        float _2223 = (dot(vec3(cbLight._m0[_1917 + 3u].xyz), vec3(_688, _689, _690)) * 0.5) + 0.5;
        float _2224 = _2223 * _2223;
        float _4247 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2225 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2226 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2048 = (((cbLight._m0[_2207].x * 0.3183098733425140380859375) * _2225) * _2226) + _2003;
        _2050 = (((cbLight._m0[_2207].y * 0.3183098733425140380859375) * _2225) * _2226) + _2005;
        _2052 = (((cbLight._m0[_2207].z * 0.3183098733425140380859375) * _2225) * _2226) + _2007;
    }
    uint _2055 = _1917 + 8u;
    float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _691) * 0.949999988079071044921875);
    float _2069 = _2068 * _2068;
    float _2070 = cbLight._m0[_1917].x + _766;
    float _2071 = cbLight._m0[_1917].y + _767;
    float _2072 = cbLight._m0[_1917].z + _768;
    float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
    float _2077 = _2076 * _2070;
    float _2078 = _2076 * _2071;
    float _2079 = _2076 * _2072;
    float _2080 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_1917].xyz));
    float _4263 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _4274 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _2084 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2085 = dot(vec3(_688, _689, _690), vec3(_2077, _2078, _2079));
    float _4285 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2089 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_2077, _2078, _2079));
    float _4296 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2093 = _2069 * _2069;
    float _2097 = ((_2088 * _2088) * (_2093 + (-1.0))) + 1.0;
    float _2108 = (exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2109 = 1.0 - _2069;
    float _2120 = (0.5 / (((_2084 * ((_2083 * _2109) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2109) + _2069) * _2083))) * _2083;
    float _4307 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2093 / ((_2097 * _2097) * 3.141590118408203125));
    uint _2133 = _1917 + 9u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _691) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1955].x + _766;
    float _2147 = cbLight._m0[_1955].y + _767;
    float _2148 = cbLight._m0[_1955].z + _768;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_1955].xyz));
    float _4318 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2160 = dot(vec3(_688, _689, _690), vec3(_2153, _2154, _2155));
    float _4329 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2164 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2153, _2154, _2155));
    float _4340 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2168 = _2145 * _2145;
    float _2172 = ((_2163 * _2163) * (_2168 + (-1.0))) + 1.0;
    float _2181 = (exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2182 = 1.0 - _2145;
    float _2192 = (0.5 / (((_2084 * ((_2159 * _2182) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2182) + _2145) * _2159))) * _2159;
    float _4351 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2194 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2168 / ((_2172 * _2172) * 3.141590118408203125));
    float _2204 = (((_2181 * cbLight._m0[_2133].x) * _2194) * _1940) + (((_2108 * cbLight._m0[_2055].x) * _2122) * _1951);
    float _2205 = (((_2181 * cbLight._m0[_2133].y) * _2194) * _1940) + (((_2108 * cbLight._m0[_2055].y) * _2122) * _1951);
    float _2206 = (((_2181 * cbLight._m0[_2133].z) * _2194) * _1940) + (((_2108 * cbLight._m0[_2055].z) * _2122) * _1951);
    float _2268;
    float _2270;
    float _2272;
    if (_1992)
    {
        _2268 = _2204;
        _2270 = _2205;
        _2272 = _2206;
    }
    else
    {
        uint _2274 = _1917 + 2u;
        uint _2278 = _1917 + 10u;
        float _2292 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2274].w)) * _691) * 0.949999988079071044921875);
        float _2293 = _2292 * _2292;
        float _2294 = cbLight._m0[_2274].x + _766;
        float _2295 = cbLight._m0[_2274].y + _767;
        float _2296 = cbLight._m0[_2274].z + _768;
        float _2300 = inversesqrt(dot(vec3(_2294, _2295, _2296), vec3(_2294, _2295, _2296)));
        float _2301 = _2300 * _2294;
        float _2302 = _2300 * _2295;
        float _2303 = _2300 * _2296;
        float _2304 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2274].xyz));
        float _4362 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2308 = dot(vec3(_688, _689, _690), vec3(_2301, _2302, _2303));
        float _4373 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2311 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2312 = dot(vec3(cbLight._m0[_2274].xyz), vec3(_2301, _2302, _2303));
        float _4384 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2316 = _2293 * _2293;
        float _2320 = ((_2311 * _2311) * (_2316 + (-1.0))) + 1.0;
        float _2329 = (exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2330 = 1.0 - _2293;
        float _2340 = (0.5 / (((_2084 * ((_2307 * _2330) + _2293)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2330) + _2293) * _2307))) * _2307;
        float _4395 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2342 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2316 / ((_2320 * _2320) * 3.141590118408203125));
        float _2343 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2268 = (((_2329 * cbLight._m0[_2278].x) * _2342) * _2343) + _2204;
        _2270 = (((_2329 * cbLight._m0[_2278].y) * _2342) * _2343) + _2205;
        _2272 = (((_2329 * cbLight._m0[_2278].z) * _2342) * _2343) + _2206;
    }
    float _2378;
    float _2380;
    float _2382;
    if (_2010)
    {
        _2378 = _2268;
        _2380 = _2270;
        _2382 = _2272;
    }
    else
    {
        uint _2389 = _1917 + 3u;
        uint _2393 = _1917 + 11u;
        float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _691) * 0.949999988079071044921875);
        float _2408 = _2407 * _2407;
        float _2409 = cbLight._m0[_2389].x + _766;
        float _2410 = cbLight._m0[_2389].y + _767;
        float _2411 = cbLight._m0[_2389].z + _768;
        float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
        float _2416 = _2415 * _2409;
        float _2417 = _2415 * _2410;
        float _2418 = _2415 * _2411;
        float _2419 = dot(vec3(_688, _689, _690), vec3(cbLight._m0[_2389].xyz));
        float _4411 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2423 = dot(vec3(_688, _689, _690), vec3(_2416, _2417, _2418));
        float _4422 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2426 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2427 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2416, _2417, _2418));
        float _4433 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2431 = _2408 * _2408;
        float _2435 = ((_2426 * _2426) * (_2431 + (-1.0))) + 1.0;
        float _2444 = (exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2445 = 1.0 - _2408;
        float _2455 = (0.5 / (((_2084 * ((_2422 * _2445) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2084 * _2445) + _2408) * _2422))) * _2422;
        float _4444 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2457 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2431 / ((_2435 * _2435) * 3.141590118408203125));
        float _2458 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
        _2378 = (((_2444 * cbLight._m0[_2393].x) * _2457) * _2458) + _2268;
        _2380 = (((_2444 * cbLight._m0[_2393].y) * _2457) * _2458) + _2270;
        _2382 = (((_2444 * cbLight._m0[_2393].z) * _2457) * _2458) + _2272;
    }
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_1915.y == 0u)
    {
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2533;
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2533;
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2533;
        uvec4 _2548 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2549 = _2548.x;
        uint _2560 = uint((float(_2548.y) * floor(float(uint(cbSceneParam._m0[85u].y * _788) / _2549))) + floor(float(uint(cbSceneParam._m0[85u].x * _787) / _2549)));
        float _2570 = (log2(_2536 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2571 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        uint _2574 = uint(isnan(14.0) ? _2571 : (isnan(_2571) ? 14.0 : min(_2571, 14.0)));
        uvec4 _2579 = texelFetch(g_lightClusterGridBuffer, int(((_2574 << 2u) + (_2560 << 6u)) >> 2u));
        uint _2580 = _2579.x;
        uint _2581 = _2548.z;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((((1u << ((_2581 >> 4u) & 15u)) + 4294967295u) & _2580) == 0u) || ((_2581 & 240u) == 0u))
        {
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
        }
        else
        {
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            uint _2839 = 0u;
            uint _2848;
            bool _2849;
            for (;;)
            {
                _2848 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2839 << 2u)) >> 2u)).x;
                _2849 = _2848 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2849)
                {
                    frontier_phi_66_pred = _2833;
                    frontier_phi_66_pred_1 = _2838;
                    frontier_phi_66_pred_2 = _2837;
                    frontier_phi_66_pred_3 = _2836;
                    frontier_phi_66_pred_4 = _2835;
                    frontier_phi_66_pred_5 = _2834;
                }
                else
                {
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    uint _2984;
                    _2978 = _2833;
                    _2979 = _2834;
                    _2980 = _2835;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2848;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    for (;;)
                    {
                        uint _2988 = uint(findLSB(_2984)) + (_2839 << 5u);
                        uint _2985 = (_2984 + 4294967295u) & _2984;
                        uint _2990 = _2988 * 48u;
                        vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2990)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2990 + 3u)).x));
                        uint _3010 = (_2988 * 48u) + 4u;
                        vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3010)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3010 + 3u)).x));
                        uint _3029 = (_2988 * 48u) + 8u;
                        vec3 _3040 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x));
                        float _3044 = _3004.x - _2534;
                        float _3045 = _3004.y - _2535;
                        float _3046 = _3004.z - _2536;
                        float _3047 = dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046));
                        float _3050 = inversesqrt(_3047);
                        float _3051 = _3050 * _3044;
                        float _3052 = _3050 * _3045;
                        float _3053 = _3050 * _3046;
                        float _3054 = dot(vec3(_808, _811, _814), vec3(_3051, _3052, _3053));
                        float _3059 = 1.0 - (_3047 * _3004.w);
                        float _4470 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3060 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3061 = sqrt(_3047) * _3023.w;
                        float _3064 = 1.39999997615814208984375 / (_3061 + 1.39999997615814208984375);
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _3054) + _3065;
                        float _3071 = _3061 * _3061;
                        float _3075 = ((isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0))) * _3060) / ((_3071 * 0.699999988079071044921875) + 1.0);
                        float _3079 = (-0.0) - _2534;
                        float _3080 = (-0.0) - _2535;
                        float _3081 = (-0.0) - _2536;
                        float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                        float _3086 = _3085 * _3079;
                        float _3087 = _3085 * _3080;
                        float _3088 = _3085 * _3081;
                        float _3096 = exp2(log2(1.0 / ((_3071 * 3.5) + 5.0)) * 0.25);
                        float _3097 = 1.0 - _868;
                        float _3104 = sqrt(1.0 - ((1.0 - (_3097 * _3097)) * (1.0 - (_3096 * _3096))));
                        float _3105 = _3104 * _3104;
                        float _3106 = _3105 * _3105;
                        float _3107 = _3086 + _3051;
                        float _3108 = _3087 + _3052;
                        float _3109 = _3088 + _3053;
                        float _3113 = inversesqrt(dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109)));
                        float _3117 = dot(vec3(_808, _811, _814), vec3(_3086, _3087, _3088));
                        float _4486 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3121 = dot(vec3(_808, _811, _814), vec3(_3113 * _3107, _3113 * _3108, _3113 * _3109));
                        float _4497 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3124 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3128 = ((_3124 * _3124) * (_3106 + (-1.0))) + 1.0;
                        float _3129 = _3064 * _3105;
                        float _3130 = _3129 * _3129;
                        float _3133 = ((1.0 - _3130) * _3054) + _3130;
                        float _4508 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3134 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3135 = 1.0 - _3105;
                        float _3145 = (0.5 / (((_3134 * ((_3120 * _3135) + _3105)) + 9.9999999392252902907785028219223e-09) + (((_3134 * _3135) + _3105) * _3120))) * _3134;
                        float _4519 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3156 = (((_3106 * 3.1415927410125732421875) * (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) / ((_3128 * _3128) * ((_3071 * 2.1991131305694580078125) + 3.141590118408203125))) * _3060;
                        _2908 = (_3075 * _3023.x) + _2981;
                        _2909 = (_3075 * _3023.y) + _2982;
                        _2910 = (_3075 * _3023.z) + _2983;
                        _2905 = (_3156 * _3040.x) + _2978;
                        _2906 = (_3156 * _3040.y) + _2979;
                        _2907 = (_3156 * _3040.z) + _2980;
                        if (_2985 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2978 = _2905;
                            _2979 = _2906;
                            _2980 = _2907;
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2985;
                        }
                    }
                    frontier_phi_66_pred = _2905;
                    frontier_phi_66_pred_1 = _2910;
                    frontier_phi_66_pred_2 = _2909;
                    frontier_phi_66_pred_3 = _2908;
                    frontier_phi_66_pred_4 = _2907;
                    frontier_phi_66_pred_5 = _2906;
                }
                _2682 = frontier_phi_66_pred;
                _2692 = frontier_phi_66_pred_1;
                _2690 = frontier_phi_66_pred_2;
                _2688 = frontier_phi_66_pred_3;
                _2686 = frontier_phi_66_pred_4;
                _2684 = frontier_phi_66_pred_5;
                uint _2840 = _2839 + 1u;
                if (_2840 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2833 = _2682;
                    _2834 = _2684;
                    _2835 = _2686;
                    _2836 = _2688;
                    _2837 = _2690;
                    _2838 = _2692;
                    _2839 = _2840;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
        }
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.z;
        uint _2698 = (_2696 >> 8u) & 15u;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        float _2811;
        if (((4294967295u << _2698) & _2580) == 0u)
        {
            _2801 = _2681;
            _2803 = _2683;
            _2805 = _2685;
            _2807 = _2687;
            _2809 = _2689;
            _2811 = _2691;
        }
        else
        {
            float _2826 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
            float _2827 = _2826 * _2534;
            float _2828 = _2826 * _2535;
            float _2829 = _2826 * _2536;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2698 < ((_2696 >> 12u) & 15u))
            {
                float _2802;
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2812;
                float _2961 = _2681;
                float _2962 = _2683;
                float _2963 = _2685;
                float _2964 = _2687;
                float _2965 = _2689;
                float _2966 = _2691;
                uint _2967 = _2698;
                uint _2976;
                bool _2977;
                for (;;)
                {
                    _2976 = texelFetch(g_lightClassification, int((((_2574 << 5u) + (_2560 << 9u)) + (_2967 << 2u)) >> 2u)).x;
                    _2977 = _2976 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2977)
                    {
                        frontier_phi_77_pred = _2966;
                        frontier_phi_77_pred_1 = _2965;
                        frontier_phi_77_pred_2 = _2964;
                        frontier_phi_77_pred_3 = _2963;
                        frontier_phi_77_pred_4 = _2962;
                        frontier_phi_77_pred_5 = _2961;
                    }
                    else
                    {
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3183 = _2961;
                        float _3184 = _2962;
                        float _3185 = _2963;
                        float _3186 = _2964;
                        float _3187 = _2965;
                        float _3188 = _2966;
                        uint _3189 = _2976;
                        uint _3190;
                        vec4 _3215;
                        float _3216;
                        vec4 _3231;
                        vec3 _3243;
                        vec4 _3258;
                        vec4 _3273;
                        float _3319;
                        bool _3320;
                        for (;;)
                        {
                            uint _3200 = ((_2967 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3189));
                            _3190 = (_3189 + 4294967295u) & _3189;
                            uint _3202 = _3200 * 40u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            _3216 = _3215.w;
                            uint _3218 = (_3200 * 40u) + 4u;
                            _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3233 = (_3200 * 40u) + 8u;
                            _3243 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x));
                            uint _3245 = (_3200 * 40u) + 16u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3200 * 40u) + 20u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            uint _3275 = (_3200 * 40u) + 24u;
                            vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            uint _3294 = (_3200 * 40u) + 28u;
                            vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            _3319 = fma(_2536, _3307.z, fma(_2535, _3307.y, _3307.x * _2534)) + _3307.w;
                            _3320 = !((fma(_2536, _3288.z, fma(_2535, _3288.y, _3288.x * _2534)) + _3288.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3320)
                            {
                                float _3347 = _3215.x - _2534;
                                float _3348 = _3215.y - _2535;
                                float _3349 = _3215.z - _2536;
                                float _3350 = dot(vec3(_3347, _3348, _3349), vec3(_3347, _3348, _3349));
                                float _3353 = inversesqrt(_3350);
                                float _3354 = _3353 * _3347;
                                float _3355 = _3353 * _3348;
                                float _3356 = _3353 * _3349;
                                float _3360 = 1.0 - (_3350 / (_3216 * _3216));
                                float _4530 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3365 = sqrt(_3350) * _3231.w;
                                float _3367 = 1.39999997615814208984375 / (_3365 + 1.39999997615814208984375);
                                float _3368 = _3367 * _3367;
                                float _3371 = ((1.0 - _3368) * dot(vec3(_3354, _3355, _3356), vec3(_808, _811, _814))) + _3368;
                                float _3374 = _3365 * _3365;
                                float _3378 = (fma(_2536, _3258.z, fma(_2535, _3258.y, _3258.x * _2534)) + _3258.w) / _3319;
                                float _3379 = (fma(_2536, _3273.z, fma(_2535, _3273.y, _3273.x * _2534)) + _3273.w) / _3319;
                                float _3383 = 1.0 - dot(vec2(_3378, _3379), vec2(_3378, _3379));
                                float _4546 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3384 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3385 = _3384 * (((isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0))) * _3361) / ((_3374 * 0.699999988079071044921875) + 1.0));
                                float _3397 = exp2(log2(1.0 / ((_3374 * 3.5) + 5.0)) * 0.25);
                                float _3398 = 1.0 - _868;
                                float _3405 = sqrt(1.0 - ((1.0 - (_3398 * _3398)) * (1.0 - (_3397 * _3397))));
                                float _3406 = _3405 * _3405;
                                float _3407 = _3406 * _3406;
                                float _3408 = _3354 - _2827;
                                float _3409 = _3355 - _2828;
                                float _3410 = _3356 - _2829;
                                float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                                float _3418 = dot(vec3(_808, _811, _814), vec3((-0.0) - _2827, (-0.0) - _2828, (-0.0) - _2829));
                                float _4557 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3421 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3422 = dot(vec3(_808, _811, _814), vec3(_3414 * _3408, _3414 * _3409, _3414 * _3410));
                                float _4568 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3425 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3429 = ((_3425 * _3425) * (_3407 + (-1.0))) + 1.0;
                                float _3430 = _3367 * _3406;
                                float _3431 = _3430 * _3430;
                                float _3437 = ((1.0 - _3431) * dot(vec3(_808, _811, _814), vec3(_3354, _3355, _3356))) + _3431;
                                float _4579 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3439 = 1.0 - _3406;
                                float _3449 = (0.5 / (((_3438 * ((_3421 * _3439) + _3406)) + 9.9999999392252902907785028219223e-09) + (((_3438 * _3439) + _3406) * _3421))) * _3438;
                                float _4590 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3459 = (_3384 * _3361) * (((_3407 * 3.1415927410125732421875) * (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) / ((_3429 * _3429) * ((_3374 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3385 * _3231.y;
                                frontier_phi_83_pred_1 = _3385 * _3231.x;
                                frontier_phi_83_pred_2 = _3459 * _3243.z;
                                frontier_phi_83_pred_3 = _3459 * _3243.y;
                                frontier_phi_83_pred_4 = _3459 * _3243.x;
                                frontier_phi_83_pred_5 = _3385 * _3231.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3467 = frontier_phi_83_pred;
                            _3466 = frontier_phi_83_pred_1;
                            _3465 = frontier_phi_83_pred_2;
                            _3464 = frontier_phi_83_pred_3;
                            _3463 = frontier_phi_83_pred_4;
                            _3468 = frontier_phi_83_pred_5;
                            _3173 = _3466 + _3186;
                            _3174 = _3467 + _3187;
                            _3175 = _3468 + _3188;
                            _3170 = _3463 + _3183;
                            _3171 = _3464 + _3184;
                            _3172 = _3465 + _3185;
                            if (_3190 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3190;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3175;
                        frontier_phi_77_pred_1 = _3174;
                        frontier_phi_77_pred_2 = _3173;
                        frontier_phi_77_pred_3 = _3172;
                        frontier_phi_77_pred_4 = _3171;
                        frontier_phi_77_pred_5 = _3170;
                    }
                    _2812 = frontier_phi_77_pred;
                    _2810 = frontier_phi_77_pred_1;
                    _2808 = frontier_phi_77_pred_2;
                    _2806 = frontier_phi_77_pred_3;
                    _2804 = frontier_phi_77_pred_4;
                    _2802 = frontier_phi_77_pred_5;
                    uint _2968 = _2967 + 1u;
                    if (_2968 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2961 = _2802;
                        _2962 = _2804;
                        _2963 = _2806;
                        _2964 = _2808;
                        _2965 = _2810;
                        _2966 = _2812;
                        _2967 = _2968;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2806;
                frontier_phi_58_59_ladder_1 = _2812;
                frontier_phi_58_59_ladder_2 = _2810;
                frontier_phi_58_59_ladder_3 = _2808;
                frontier_phi_58_59_ladder_4 = _2804;
                frontier_phi_58_59_ladder_5 = _2802;
            }
            else
            {
                frontier_phi_58_59_ladder = _2685;
                frontier_phi_58_59_ladder_1 = _2691;
                frontier_phi_58_59_ladder_2 = _2689;
                frontier_phi_58_59_ladder_3 = _2687;
                frontier_phi_58_59_ladder_4 = _2683;
                frontier_phi_58_59_ladder_5 = _2681;
            }
            _2801 = frontier_phi_58_59_ladder_5;
            _2803 = frontier_phi_58_59_ladder_4;
            _2805 = frontier_phi_58_59_ladder;
            _2807 = frontier_phi_58_59_ladder_3;
            _2809 = frontier_phi_58_59_ladder_2;
            _2811 = frontier_phi_58_59_ladder_1;
        }
        float _2816 = isnan(1.0) ? _852 : (isnan(_852) ? 1.0 : min(_852, 1.0));
        _2593 = (_2816 * _2807) + _2048;
        _2595 = (_2816 * _2809) + _2050;
        _2597 = (_2816 * _2811) + _2052;
        _2599 = ((_2801 * 0.039999999105930328369140625) * _2816) + _2378;
        _2601 = ((_2803 * 0.039999999105930328369140625) * _2816) + _2380;
        _2603 = ((_2805 * 0.039999999105930328369140625) * _2816) + _2382;
    }
    else
    {
        _2593 = _2048;
        _2595 = _2050;
        _2597 = _2052;
        _2599 = _2378;
        _2601 = _2380;
        _2603 = _2382;
    }
    float _4606 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4617 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4628 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _2620 = ((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2593 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _852))) + ((_2599 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1688)) * cbPerFrame._m0[3u].x);
    float _2621 = ((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2595 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _852))) + ((_2601 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1688)) * cbPerFrame._m0[3u].x);
    float _2622 = ((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2597 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _852))) + ((_2603 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1688)) * cbPerFrame._m0[3u].x);
    uint _2623 = _267 + 6u;
    float _2631 = _787 / cbSceneParam._m0[86u].x;
    float _2632 = _788 / cbSceneParam._m0[86u].y;
    vec4 _2646 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, (log2((isnan(cbSceneParam._m0[77u].w) ? _709 : (isnan(_709) ? cbSceneParam._m0[77u].w : min(_709, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2648 = _2646.x;
    float _2649 = _2646.y;
    float _2650 = _2646.z;
    float _2651 = _2646.w;
    float _2743;
    float _2745;
    float _2747;
    float _2749;
    if (_709 > cbSceneParam._m0[78u].w)
    {
        float _2706 = isnan(_709) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _709 : min(cbSceneParam._m0[80u].w, _709));
        float _2707 = _2706 / _709;
        float _2718 = _2707 * _759;
        float _2719 = _760 * _2707;
        float _2720 = (-0.0) - _2719;
        float _2721 = _2707 * _761;
        float _2723 = (cbSceneParam._m0[77u].w * _2720) / _2706;
        float _2724 = _2723 + cbSceneParam._m0[79u].w;
        float _2725 = cbSceneParam._m0[79u].w - _2719;
        float _2731 = sqrt(((_2718 * _2718) + (_2719 * _2719)) + (_2721 * _2721));
        float _2734 = (1.0 - (cbSceneParam._m0[77u].w / _2706)) * _2731;
        float _2739 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2741 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2918;
        if (abs((_2720 - _2723) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2918 = ((((_2724 > 0.0) ? exp2(_2739 * _2724) : (2.0 - exp2(_2741 * _2724))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2734;
        }
        else
        {
            float _2862 = 1.0 / cbSceneParam._m0[80u].x;
            float _2863 = isnan(_2725) ? _2724 : (isnan(_2724) ? _2725 : max(_2724, _2725));
            float _2864 = isnan(_2725) ? _2724 : (isnan(_2724) ? _2725 : min(_2724, _2725));
            float _2873 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : min(_2863, 0.0));
            float _2874 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : min(_2864, 0.0));
            _2918 = ((abs(_2731 / _2720) * cbSceneParam._m0[80u].y) * ((((_2873 - _2874) * 2.0) - ((exp2(_2739 * (isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0)))) - exp2(_2739 * (isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0))))) * _2862)) - ((exp2(_2741 * _2873) - exp2(_2741 * _2874)) * _2862))) + (_2734 * cbSceneParam._m0[80u].z);
        }
        vec4 _2920 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, 1.0), 0.0);
        float _2929 = exp2((_2918 * (-1.44269502162933349609375)) * (1.0 - _2920.w));
        float _2930 = log2(_2929);
        float _2946 = log2(_2651);
        _2743 = (exp2(_2946 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2930 * cbSceneParam._m0[78u].x)) * _2920.x) / cbSceneParam._m0[78u].x)) + _2648;
        _2745 = (exp2(_2946 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2930 * cbSceneParam._m0[78u].y)) * _2920.y) / cbSceneParam._m0[78u].y)) + _2649;
        _2747 = (exp2(_2946 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2930 * cbSceneParam._m0[78u].z)) * _2920.z) / cbSceneParam._m0[78u].z)) + _2650;
        _2749 = _2929 * _2651;
    }
    else
    {
        _2743 = _2648;
        _2745 = _2649;
        _2747 = _2650;
        _2749 = _2651;
    }
    bool _2956;
    vec4 _2759;
    vec4 _2781;
    float _2783;
    float _2787;
    float _2788;
    float _2789;
    float _2790;
    bool _2800;
    for (;;)
    {
        _2759 = cbMatDynParam._m0[0u];
        float _2761 = roundEven(_2759.y);
        bool _2762 = _2761 == 3.0;
        float _2763 = log2(_2749);
        float _2770 = exp2(_2763 * cbSceneParam._m0[78u].x) * _2620;
        float _2771 = exp2(_2763 * cbSceneParam._m0[78u].y) * _2621;
        float _2772 = exp2(_2763 * cbSceneParam._m0[78u].z) * _2622;
        float _2779 = _775 + (-0.5);
        _2781 = cbMtdParam._m0[1u];
        _2783 = _2781.y * _2779;
        float _2786 = (_2761 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2787 = _2786 * (_2762 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2743)));
        _2788 = _2786 * (_2762 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2745)));
        _2789 = _2786 * (_2762 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2747)));
        _2790 = _2779 * 0.999000012874603271484375;
        _2800 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2800)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _2790) < 0.5)
            {
                _2956 = true;
                break;
            }
        }
        uint _2897 = _827 + uint(_2759.w);
        if ((cbInstanceData._m0[_2897].w < 1.0) && ((cbInstanceData._m0[_2897].w + _2790) < 0.5))
        {
            _2956 = true;
            break;
        }
        if ((_2783 + 1.0) < _2781.x)
        {
            _2956 = true;
            break;
        }
        _2956 = false;
        break;
    }
    float _3161;
    if (_2956)
    {
        discard_state = true;
        _3161 = 0.0;
    }
    else
    {
        _3161 = cbInstanceData._m0[_2623].w;
    }
    SV_Target.x = _2787;
    SV_Target.y = _2788;
    SV_Target.z = _2789;
    SV_Target.w = _3161;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2623].w;
    discard_exit();
}


