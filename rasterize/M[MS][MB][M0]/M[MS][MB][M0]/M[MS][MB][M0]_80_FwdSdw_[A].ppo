#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1324;
float _3967;
float _3968;
float _3969;
float _3970;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = _245 * NORMAL.x;
    float _247 = _245 * NORMAL.y;
    float _248 = _245 * NORMAL.z;
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3979 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3990 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _4001 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _296) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _297) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4012 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _433 = (_426 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _434 = (_426 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _435 = (_426 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    float _439 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _310.x) * _433;
    float _442 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _310.y) * _434;
    float _445 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _310.z) * _435;
    float _452 = ((_433 - _439) * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) + _439;
    float _453 = ((_434 - _442) * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) + _442;
    float _454 = ((_435 - _445) * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) + _445;
    vec4 _467 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _296) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _297) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _522 = ((_492.z - _513) * _426) + _513;
    float _525 = ((((_492.x - _511) * _426) + _511) * 2.0) + (-1.0);
    float _526 = ((((_492.y - _512) * _426) + _512) * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _4023 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))));
    vec4 _554 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _566 = (_525 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_467.x * 2.0) + (-1.0)))) + (((_554.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _567 = (_526 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_467.y * 2.0) + (-1.0)))) + (((_554.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _579 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _581 = _579.x;
    float _582 = 1.0 - _581;
    float _608 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_581 - _582) * cbMtdParam._m0[24u].w) + _582) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4034 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _617 = ((((cbMtdParam._m0[10u].x - _452) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _609) + _452;
    float _618 = ((((cbMtdParam._m0[10u].y - _453) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _609) + _453;
    float _619 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _454)) * _609) + _454;
    float _624 = (((_467.z - _522) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _522;
    float _628 = ((_554.z - _624) * cbMtdParam._m0[19u].w) + _624;
    float _632 = ((cbMtdParam._m0[23u].y - _628) * _609) + _628;
    vec4 _651 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _653 = _651.x;
    float _654 = _651.y;
    float _660 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_246, _247, _248, 0.0));
    vec4 _675 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _296) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _297) + cbTextureTilingScale._m0[18u].w));
    float _677 = _675.x;
    float _682 = fract(_675.w + cbPerFrame._m0[22u].x);
    float _684 = (1.0 - _682) * _677;
    float _689 = ((_682 + (-1.0)) + _677) * 9.0;
    float _691 = ((_677 + (-1.0)) + _682) * 9.0;
    float _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _693 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _707 = (_684 * ((_675.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _692 : (isnan(_692) ? 3.0 : min(_692, 3.0))) * 3.1415927410125732421875);
    float _709 = (_684 * ((_675.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _693 : (isnan(_693) ? 3.0 : min(_693, 3.0))) * 3.1415927410125732421875);
    float _713 = inversesqrt(dot(vec3(_707, _709, 1.0), vec3(_707, _709, 1.0)));
    float _729 = (((((0.5 - _653) + ((_707 * 0.5) * _713)) * _660) + _653) * 2.0) + (-1.0);
    float _730 = (((((0.5 - _654) + ((_713 * 0.5) * _709)) * _660) + _654) * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _4065 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _747 = ((((cbMtdParam._m0[22u].z * _566) - _566) + _729) * _609) + _566;
    float _748 = ((((cbMtdParam._m0[22u].z * _567) - _567) + _730) * _609) + _567;
    float _749 = (_609 * (sqrt(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) - _532)) + _532;
    float _751 = cbMtdParam._m0[22u].x + _554.w;
    float _754 = fma(_749, _246, fma(_748, _252 * TANGENT.x, (_238 * _230) * _747));
    float _757 = fma(_749, _247, fma(_748, _252 * TANGENT.y, (_238 * _231) * _747));
    float _760 = fma(_749, _248, fma(_748, _252 * TANGENT.z, (_238 * _232) * _747));
    float _764 = inversesqrt(dot(vec3(_754, _757, _760), vec3(_754, _757, _760)));
    float _765 = _764 * _754;
    float _766 = _764 * _757;
    float _767 = _764 * _760;
    float _4076 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _768 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4098 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4109 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4120 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _786 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _837 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _827);
    float _838 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _827);
    float _839 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _827);
    float _843 = inversesqrt(dot(vec3(_837, _838, _839), vec3(_837, _838, _839)));
    float _844 = _837 * _843;
    float _845 = _838 * _843;
    float _846 = _839 * _843;
    vec4 _851 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _853 = _851.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1006 = sqrt(((_837 * _837) + (_838 * _838)) + (_839 * _839));
        float _1012 = (cbMatDynParam._m0[5u].x * _1006) + cbMatDynParam._m0[5u].y;
        float _4131 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1017 = (cbMatDynParam._m0[5u].z * _1006) + cbMatDynParam._m0[5u].w;
        float _4142 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) - _1013)) + _1013) < ((_853 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _864 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _865 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _883 = fma(_767, cbSceneParam._m0[5u].z, fma(_766, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _765));
    float _886 = fma(_767, cbSceneParam._m0[6u].z, fma(_766, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _765));
    float _889 = fma(_767, cbSceneParam._m0[7u].z, fma(_766, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _765));
    uint _902 = _277 + 9u;
    uint _903 = _902 + uint(cbMatDynParam._m0[0u].w);
    float _909 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * cbInstanceData._m0[_903].x;
    float _910 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * cbInstanceData._m0[_903].y;
    float _911 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * cbInstanceData._m0[_903].z;
    float _4153 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    vec4 _923 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _864, cbSceneParam._m0[86u].y * _865));
    float _927 = ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * TEXCOORD_5.w) * _923.x;
    float _928 = dot(vec3(_765, _766, _767), vec3(_844, _845, _846));
    float _931 = _928 * 2.0;
    float _935 = (_931 * _765) - _844;
    float _936 = (_931 * _766) - _845;
    float _937 = (_931 * _767) - _846;
    float _941 = abs(dot(vec3(_844, _845, _846), vec3(_765, _766, _767)));
    float _4186 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _943 = sqrt(_768);
    float _955 = exp2((_943 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_943 * 3.0));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1323;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1049 = fma(_995, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987));
        float _1053 = fma(_995, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987));
        float _1057 = fma(_995, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987));
        float _1081 = _987 + _765;
        float _1082 = _991 + _766;
        float _1083 = _995 + _767;
        float _1093 = fma(_1083, cbModelParam._m0[26u].z, fma(_1082, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081)) - _1049;
        float _1094 = fma(_1083, cbModelParam._m0[27u].z, fma(_1082, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081)) - _1053;
        float _1095 = fma(_1083, cbModelParam._m0[28u].z, fma(_1082, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081)) - _1057;
        float _1099 = inversesqrt(dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095)));
        float _1112 = ((_1099 * _1093) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1049 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1099 * _1094) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1053 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1099 * _1095) / cbModelParam._m0[34u].z) + ((((((_1057 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        float _1151 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1117.x + (-0.5));
        float _1153 = _1151 * (_1117.y + (-0.5));
        float _1154 = _1151 * (_1117.z + (-0.5));
        float _1161 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1124.x + (-0.5));
        float _1163 = _1161 * (_1124.y + (-0.5));
        float _1164 = _1161 * (_1124.z + (-0.5));
        float _1171 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1131.x + (-0.5));
        float _1173 = _1171 * (_1131.y + (-0.5));
        float _1174 = _1171 * (_1131.z + (-0.5));
        float _1181 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1138.x + (-0.5));
        float _1183 = _1181 * (_1138.y + (-0.5));
        float _1184 = _1181 * (_1138.z + (-0.5));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = _1152 * 0.5;
        float _1189 = _1162 * 0.5;
        float _1190 = _1172 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1205 = (dot(vec3(_765, _766, _767), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _4212 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1215 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _4223 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4234 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_1217 + 1.0))) + _1222) * _1185;
        float _1232 = _1153 * 0.5;
        float _1233 = _1163 * 0.5;
        float _1234 = _1173 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_765, _766, _767), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4267 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1259 + 1.0))) + _1264) * _1186;
        float _1274 = _1154 * 0.5;
        float _1275 = _1164 * 0.5;
        float _1276 = _1174 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_765, _766, _767), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4300 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1301 + 1.0))) + _1306) * _1187;
        _1323 = _1154;
        _1325 = _1153;
        _1326 = _1152;
        _1327 = _1164;
        _1328 = _1163;
        _1329 = _1162;
        _1330 = _1174;
        _1331 = _1173;
        _1332 = _1172;
        _1333 = _1187;
        _1334 = _1186;
        _1335 = _1185;
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
    }
    else
    {
        _1323 = _1324;
        _1325 = _1324;
        _1326 = _1324;
        _1327 = _1324;
        _1328 = _1324;
        _1329 = _1324;
        _1330 = _1324;
        _1331 = _1324;
        _1332 = _1324;
        _1333 = _1324;
        _1334 = _1324;
        _1335 = _1324;
        _1336 = 0.0;
        _1337 = 0.0;
        _1338 = 0.0;
    }
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1366 = fma(_995, cbModelParam._m0[30u].z, fma(_991, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _987));
        float _1370 = fma(_995, cbModelParam._m0[31u].z, fma(_991, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _987));
        float _1374 = fma(_995, cbModelParam._m0[32u].z, fma(_991, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _987));
        float _1397 = _987 + _765;
        float _1398 = _991 + _766;
        float _1399 = _995 + _767;
        float _1409 = fma(_1399, cbModelParam._m0[30u].z, fma(_1398, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1397)) - _1366;
        float _1410 = fma(_1399, cbModelParam._m0[31u].z, fma(_1398, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1397)) - _1370;
        float _1411 = fma(_1399, cbModelParam._m0[32u].z, fma(_1398, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1397)) - _1374;
        float _1415 = inversesqrt(dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411)));
        float _1428 = ((_1415 * _1409) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1366 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1415 * _1410) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1370 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1415 * _1411) / cbModelParam._m0[35u].z) + ((((((_1374 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        float _1465 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1432.x + (-0.5));
        float _1467 = _1465 * (_1432.y + (-0.5));
        float _1468 = _1465 * (_1432.z + (-0.5));
        float _1475 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1439.x + (-0.5));
        float _1477 = _1475 * (_1439.y + (-0.5));
        float _1478 = _1475 * (_1439.z + (-0.5));
        float _1485 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1446.x + (-0.5));
        float _1487 = _1485 * (_1446.y + (-0.5));
        float _1488 = _1485 * (_1446.z + (-0.5));
        float _1495 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1453.x + (-0.5));
        float _1497 = _1495 * (_1453.y + (-0.5));
        float _1498 = _1495 * (_1453.z + (-0.5));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = _1466 * 0.5;
        float _1503 = _1476 * 0.5;
        float _1504 = _1486 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_765, _766, _767), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4363 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1529 + 1.0))) + _1534) * _1499;
        float _1544 = _1467 * 0.5;
        float _1545 = _1477 * 0.5;
        float _1546 = _1487 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_765, _766, _767), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4396 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1571 + 1.0))) + _1576) * _1500;
        float _1586 = _1468 * 0.5;
        float _1587 = _1478 * 0.5;
        float _1588 = _1488 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_765, _766, _767), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4429 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1613 + 1.0))) + _1618) * _1501;
        _1635 = _1468;
        _1636 = _1467;
        _1637 = _1466;
        _1638 = _1478;
        _1639 = _1477;
        _1640 = _1476;
        _1641 = _1488;
        _1642 = _1487;
        _1643 = _1486;
        _1644 = _1501;
        _1645 = _1500;
        _1646 = _1499;
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
    }
    else
    {
        _1635 = _1324;
        _1636 = _1324;
        _1637 = _1324;
        _1638 = _1324;
        _1639 = _1324;
        _1640 = _1324;
        _1641 = _1324;
        _1642 = _1324;
        _1643 = _1324;
        _1644 = _1324;
        _1645 = _1324;
        _1646 = _1324;
        _1647 = 0.0;
        _1648 = 0.0;
        _1649 = 0.0;
    }
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1336)) + _1336;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1337)) + _1337;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1338)) + _1338;
    float _1682 = fma(_1661, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1685 = fma(_1661, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1688 = fma(_1661, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1659));
    float _1703 = _935 * 0.5;
    float _1704 = _936 * 0.5;
    float _1705 = _937 * 0.5;
    float _1706 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1709 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1712 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1746;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1719 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1323, _1327, _1330, _1333));
        float _1723 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1325, _1328, _1331, _1334));
        float _1727 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1326, _1329, _1332, _1335));
        float _1734 = dot(vec4(cbModelParam._m0[39u]), vec4(_1703, _1704, _1705, 1.0));
        _1746 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1746 = 1.0;
    }
    float _1757;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1748 = dot(vec4(cbModelParam._m0[40u]), vec4(_1703, _1704, _1705, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1748) ? 0.0 : (isnan(0.0) ? _1748 : max(0.0, _1748))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1761 = (_1757 * cbModelParam._m0[1u].x) + (_1746 * (1.0 - cbModelParam._m0[1u].x));
    float _1771 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _768);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1771 : min(cbModelParam._m0[25u].z, _1771));
    float _1854;
    float _1856;
    float _1858;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1821 = fma(_995, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987)) + cbModelParam._m0[13u].w;
        float _1825 = fma(_995, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987)) + cbModelParam._m0[14u].w;
        float _1829 = fma(_995, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987)) + cbModelParam._m0[15u].w;
        float _1832 = fma(_937, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _935));
        float _1835 = fma(_937, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _935));
        float _1838 = fma(_937, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _935));
        float _1866;
        if (_1832 > 0.0)
        {
            _1866 = abs((1.0 - _1821) / _1832);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1821 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1866 = frontier_phi_17_15_ladder;
        }
        float _2036;
        if (_1835 > 0.0)
        {
            _2036 = abs((1.0 - _1825) / _1835);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1825 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2036 = frontier_phi_26_22_ladder;
        }
        float _2331;
        if (_1838 > 0.0)
        {
            _2331 = abs((1.0 - _1829) / _1838);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1829 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2331 = frontier_phi_38_33_ladder;
        }
        float _2333 = isnan(_2036) ? _1866 : (isnan(_1866) ? _2036 : min(_1866, _2036));
        float _2334 = isnan(_2331) ? _2333 : (isnan(_2333) ? _2331 : min(_2333, _2331));
        float _2338 = (_2334 * _1832) + _1821;
        float _2339 = (_2334 * _1835) + _1825;
        float _2340 = (_2334 * _1838) + _1829;
        float _2341 = _2334 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2341;
        float _2345 = _2341 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 > _2345) || ((_2339 < _2343) || ((_2338 < _2343) || (_2338 > _2345))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2340, cbModelParam._m0[9u].z, fma(_2339, cbModelParam._m0[9u].y, _2338 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2340, cbModelParam._m0[10u].z, fma(_2339, cbModelParam._m0[10u].y, _2338 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2340, cbModelParam._m0[11u].z, fma(_2339, cbModelParam._m0[11u].y, _2338 * cbModelParam._m0[11u].x))), _1772);
            frontier_phi_16_38_ladder = _2485.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2485.x * cbModelParam._m0[1u].y;
        }
        _1854 = frontier_phi_16_38_ladder_2;
        _1856 = frontier_phi_16_38_ladder_1;
        _1858 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1842 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_935, _936, _937), _1772);
        _1854 = _1842.x * cbModelParam._m0[1u].y;
        _1856 = _1842.y * cbModelParam._m0[1u].y;
        _1858 = _1842.z * cbModelParam._m0[1u].y;
    }
    float _1862 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _768);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1862 : min(cbModelParam._m0[25u].w, _1862));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1917 = fma(_995, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987)) + cbModelParam._m0[21u].w;
        float _1921 = fma(_995, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987)) + cbModelParam._m0[22u].w;
        float _1925 = fma(_995, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987)) + cbModelParam._m0[23u].w;
        float _1928 = fma(_937, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _935));
        float _1931 = fma(_937, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _935));
        float _1934 = fma(_937, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _935));
        float _2041;
        if (_1928 > 0.0)
        {
            _2041 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2041 = frontier_phi_28_24_ladder;
        }
        float _2358;
        if (_1931 > 0.0)
        {
            _2358 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2358 = frontier_phi_40_35_ladder;
        }
        float _2685;
        if (_1934 > 0.0)
        {
            _2685 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2685 = frontier_phi_50_47_ladder;
        }
        float _2687 = isnan(_2358) ? _2041 : (isnan(_2041) ? _2358 : min(_2041, _2358));
        float _2688 = isnan(_2685) ? _2687 : (isnan(_2687) ? _2685 : min(_2687, _2685));
        float _2692 = (_2688 * _1928) + _1917;
        float _2693 = (_2688 * _1931) + _1921;
        float _2694 = (_2688 * _1934) + _1925;
        float _2695 = _2688 * 9.9999997473787516355514526367188e-05;
        float _2696 = (-1.0) - _2695;
        float _2698 = _2695 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2694 > _2698) || ((_2694 < _2696) || ((_2693 > _2698) || ((_2693 < _2696) || ((_2692 < _2696) || (_2692 > _2698))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2812 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2694, cbModelParam._m0[17u].z, fma(_2693, cbModelParam._m0[17u].y, _2692 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2694, cbModelParam._m0[18u].z, fma(_2693, cbModelParam._m0[18u].y, _2692 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2694, cbModelParam._m0[19u].z, fma(_2693, cbModelParam._m0[19u].y, _2692 * cbModelParam._m0[19u].x))), _1863);
            frontier_phi_25_50_ladder = _2812.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2812.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2812.x * cbModelParam._m0[1u].z;
        }
        _1953 = frontier_phi_25_50_ladder_2;
        _1955 = frontier_phi_25_50_ladder_1;
        _1957 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_935, _936, _937), _1863);
        _1953 = _1937.x * cbModelParam._m0[1u].z;
        _1955 = _1937.y * cbModelParam._m0[1u].z;
        _1957 = _1937.z * cbModelParam._m0[1u].z;
    }
    float _1969 = ((((1.0 - _955) * ((_943 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_955 * _943)) * _927;
    float _1970 = _1969 * ((cbModelParam._m0[1u].w * (_1953 - _1854)) + _1854);
    float _1971 = _1969 * ((cbModelParam._m0[1u].w * (_1955 - _1856)) + _1856);
    float _1972 = _1969 * ((cbModelParam._m0[1u].w * (_1957 - _1858)) + _1858);
    float _1975 = fma(_1972, cbSceneParam._m0[89u].z, fma(_1971, cbSceneParam._m0[89u].y, _1970 * cbSceneParam._m0[89u].x));
    float _1978 = fma(_1972, cbSceneParam._m0[90u].z, fma(_1971, cbSceneParam._m0[90u].y, _1970 * cbSceneParam._m0[90u].x));
    float _1981 = fma(_1972, cbSceneParam._m0[91u].z, fma(_1971, cbSceneParam._m0[91u].y, _1970 * cbSceneParam._m0[91u].x));
    float _2015 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2019 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2028 = _2015 / _2027;
    float _2029 = _2019 / _2027;
    float _2030 = _2023 / _2027;
    float _2177;
    float _2178;
    float _2179;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2057 = ((uint(_2030 > cbSceneParam._m0[59u].y) + uint(_2030 > cbSceneParam._m0[59u].x)) + uint(_2030 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2058 = _2057 + 43u;
        uint _2066 = _2057 + 44u;
        uint _2074 = _2057 + 45u;
        uint _2082 = _2057 + 46u;
        float _2093 = fma(_2027, cbSceneParam._m0[_2058].w, fma(_2023, cbSceneParam._m0[_2058].z, fma(_2019, cbSceneParam._m0[_2058].y, _2015 * cbSceneParam._m0[_2058].x)));
        float _2097 = fma(_2027, cbSceneParam._m0[_2066].w, fma(_2023, cbSceneParam._m0[_2066].z, fma(_2019, cbSceneParam._m0[_2066].y, _2015 * cbSceneParam._m0[_2066].x)));
        float _2105 = fma(_2027, cbSceneParam._m0[_2082].w, fma(_2023, cbSceneParam._m0[_2082].z, fma(_2019, cbSceneParam._m0[_2082].y, _2015 * cbSceneParam._m0[_2082].x)));
        float _2110 = cbSceneParam._m0[33u].z * _2105;
        float _2112 = cbSceneParam._m0[33u].w * _2105;
        float _2115 = fma(_2027, cbSceneParam._m0[_2074].w, fma(_2023, cbSceneParam._m0[_2074].z, fma(_2019, cbSceneParam._m0[_2074].y, _2015 * cbSceneParam._m0[_2074].x))) / _2105;
        float _2163 = (cbSceneParam._m0[33u].x - sqrt(((_2029 * _2029) + (_2028 * _2028)) + (_2030 * _2030))) * cbSceneParam._m0[33u].y;
        float _4555 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2170 = (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2110 + _2093) / _2105, (_2112 + _2097) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 + _2093) / _2105, (_2097 - _2110) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 - _2110) / _2105, (_2097 - _2112) / _2105), _2115), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2093 - _2112) / _2105, (_2110 + _2097) / _2105), _2115), 0.0)).x), vec4(0.25)));
        _2177 = 1.0 - (_2170 * cbSceneParam._m0[34u].x);
        _2178 = 1.0 - (_2170 * cbSceneParam._m0[34u].y);
        _2179 = 1.0 - (_2170 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2177 = 1.0;
        _2178 = 1.0;
        _2179 = 1.0;
    }
    float _2243;
    float _2245;
    float _2247;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2231 = fma(_2027, cbSceneParam._m0[63u].w, fma(_2023, cbSceneParam._m0[63u].z, fma(_2019, cbSceneParam._m0[63u].y, _2015 * cbSceneParam._m0[63u].x)));
        float _2232 = fma(_2027, cbSceneParam._m0[60u].w, fma(_2023, cbSceneParam._m0[60u].z, fma(_2019, cbSceneParam._m0[60u].y, _2015 * cbSceneParam._m0[60u].x))) / _2231;
        float _2233 = fma(_2027, cbSceneParam._m0[61u].w, fma(_2023, cbSceneParam._m0[61u].z, fma(_2019, cbSceneParam._m0[61u].y, _2015 * cbSceneParam._m0[61u].x))) / _2231;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2232 >= cbSceneParam._m0[64u].x) && (_2233 >= cbSceneParam._m0[64u].y)) && (_2232 <= cbSceneParam._m0[64u].z)) && (_2233 <= cbSceneParam._m0[64u].w))
        {
            float _2371 = fma(_2027, cbSceneParam._m0[62u].w, fma(_2023, cbSceneParam._m0[62u].z, fma(_2019, cbSceneParam._m0[62u].y, _2015 * cbSceneParam._m0[62u].x))) / _2231;
            float _2375 = isnan(cbSceneParam._m0[41u].w) ? _2371 : (isnan(_2371) ? cbSceneParam._m0[41u].w : max(_2371, cbSceneParam._m0[41u].w));
            float _2418 = (cbSceneParam._m0[33u].x - sqrt(((_2029 * _2029) + (_2028 * _2028)) + (_2030 * _2030))) * cbSceneParam._m0[33u].y;
            float _4571 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
            float _2425 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2232, cbSceneParam._m0[33u].w + _2233), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2232, _2233 - cbSceneParam._m0[33u].z), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2232 - cbSceneParam._m0[33u].z, _2233 - cbSceneParam._m0[33u].w), _2375), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2232 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2233), _2375), 0.0)).x), vec4(0.25)));
            float _2429 = 1.0 - (_2425 * cbSceneParam._m0[34u].x);
            float _2430 = 1.0 - (_2425 * cbSceneParam._m0[34u].y);
            float _2431 = 1.0 - (_2425 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2431) ? _2179 : (isnan(_2179) ? _2431 : min(_2179, _2431));
            frontier_phi_37_36_ladder_1 = isnan(_2430) ? _2178 : (isnan(_2178) ? _2430 : min(_2178, _2430));
            frontier_phi_37_36_ladder_2 = isnan(_2429) ? _2177 : (isnan(_2177) ? _2429 : min(_2177, _2429));
        }
        else
        {
            frontier_phi_37_36_ladder = _2179;
            frontier_phi_37_36_ladder_1 = _2178;
            frontier_phi_37_36_ladder_2 = _2177;
        }
        _2243 = frontier_phi_37_36_ladder_2;
        _2245 = frontier_phi_37_36_ladder_1;
        _2247 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2243 = _2177;
        _2245 = _2178;
        _2247 = _2179;
    }
    uvec4 _2252 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2254 = _2252.x * 14u;
    uint _2255 = _2254 + 13u;
    float _2262 = _927 + (-1.0);
    float _2267 = (cbLight._m0[_2255].x * _2262) + 1.0;
    float _2268 = (cbLight._m0[_2255].y * _2262) + 1.0;
    float _2269 = (cbLight._m0[_2255].z * _2262) + 1.0;
    float _2270 = (cbLight._m0[_2255].w * _2262) + 1.0;
    uint _2271 = _2254 + 5u;
    float _2277 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
    uint _2281 = _2254 + 4u;
    float _2290 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
    uint _2294 = _2254 | 1u;
    float _2305 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_765, _766, _767));
    float _2308 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_765, _766, _767));
    float _4607 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _4618 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2313 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * 0.3183098733425140380859375;
    float _2315 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * 0.3183098733425140380859375;
    float _2322 = ((cbLight._m0[_2271].x * _2277) * _2315) + (((cbLight._m0[_2281].x * _2243) * _2290) * _2313);
    float _2323 = ((_2277 * cbLight._m0[_2271].y) * _2315) + (((cbLight._m0[_2281].y * _2245) * _2290) * _2313);
    float _2324 = ((_2277 * cbLight._m0[_2271].z) * _2315) + (((cbLight._m0[_2281].z * _2247) * _2290) * _2313);
    uvec4 _2328 = floatBitsToUint(cbLight._m0[_2254 + 12u]);
    bool _2330 = _2328.x == 0u;
    float _2432;
    float _2434;
    float _2436;
    if (_2330)
    {
        _2432 = _2322;
        _2434 = _2323;
        _2436 = _2324;
    }
    else
    {
        uint _2440 = _2254 + 6u;
        float _2456 = (dot(vec3(cbLight._m0[_2254 + 2u].xyz), vec3(_765, _766, _767)) * 0.5) + 0.5;
        float _2457 = _2456 * _2456;
        float _4629 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2458 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2459 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2432 = (((cbLight._m0[_2440].x * 0.3183098733425140380859375) * _2458) * _2459) + _2322;
        _2434 = (((cbLight._m0[_2440].y * 0.3183098733425140380859375) * _2458) * _2459) + _2323;
        _2436 = (((cbLight._m0[_2440].z * 0.3183098733425140380859375) * _2458) * _2459) + _2324;
    }
    bool _2439 = _2328.y == 0u;
    float _2494;
    float _2496;
    float _2498;
    if (_2439)
    {
        _2494 = _2432;
        _2496 = _2434;
        _2498 = _2436;
    }
    else
    {
        uint _2656 = _2254 + 7u;
        float _2672 = (dot(vec3(cbLight._m0[_2254 + 3u].xyz), vec3(_765, _766, _767)) * 0.5) + 0.5;
        float _2673 = _2672 * _2672;
        float _4645 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2674 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2675 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2494 = (((cbLight._m0[_2656].x * 0.3183098733425140380859375) * _2674) * _2675) + _2432;
        _2496 = (((cbLight._m0[_2656].y * 0.3183098733425140380859375) * _2674) * _2675) + _2434;
        _2498 = (((cbLight._m0[_2656].z * 0.3183098733425140380859375) * _2674) * _2675) + _2436;
    }
    uint _2501 = _2254 + 8u;
    float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2254].w)) * _768) * 0.949999988079071044921875);
    float _2515 = _2514 * _2514;
    float _2516 = cbLight._m0[_2254].x + _844;
    float _2517 = cbLight._m0[_2254].y + _845;
    float _2518 = cbLight._m0[_2254].z + _846;
    float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
    float _2523 = _2522 * _2516;
    float _2524 = _2522 * _2517;
    float _2525 = _2522 * _2518;
    float _2526 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2254].xyz));
    float _4661 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2529 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _4672 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _2530 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
    float _2531 = dot(vec3(_765, _766, _767), vec3(_2523, _2524, _2525));
    float _4683 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
    float _2535 = dot(vec3(cbLight._m0[_2254].xyz), vec3(_2523, _2524, _2525));
    float _4694 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2539 = _2515 * _2515;
    float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
    float _2554 = (exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2555 = 1.0 - _2515;
    float _2566 = (0.5 / (((_2530 * ((_2529 * _2555) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2555) + _2515) * _2529))) * _2529;
    float _4705 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2568 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
    uint _2582 = _2254 + 9u;
    float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _768) * 0.949999988079071044921875);
    float _2594 = _2593 * _2593;
    float _2595 = cbLight._m0[_2294].x + _844;
    float _2596 = cbLight._m0[_2294].y + _845;
    float _2597 = cbLight._m0[_2294].z + _846;
    float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
    float _2602 = _2601 * _2595;
    float _2603 = _2601 * _2596;
    float _2604 = _2601 * _2597;
    float _2605 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2294].xyz));
    float _4716 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2608 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2609 = dot(vec3(_765, _766, _767), vec3(_2602, _2603, _2604));
    float _4727 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    float _2613 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2602, _2603, _2604));
    float _4738 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2617 = _2594 * _2594;
    float _2621 = ((_2612 * _2612) * (_2617 + (-1.0))) + 1.0;
    float _2630 = (exp2(log2(1.0 - (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2631 = 1.0 - _2594;
    float _2641 = (0.5 / (((_2530 * ((_2608 * _2631) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2631) + _2594) * _2608))) * _2608;
    float _4749 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2643 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2617 / ((_2621 * _2621) * 3.141590118408203125));
    float _2653 = (((_2630 * cbLight._m0[_2582].x) * _2643) * _2277) + ((((cbLight._m0[_2501].x * _2243) * _2554) * _2568) * _2290);
    float _2654 = (((_2630 * cbLight._m0[_2582].y) * _2643) * _2277) + ((((cbLight._m0[_2501].y * _2245) * _2554) * _2568) * _2290);
    float _2655 = (((_2630 * cbLight._m0[_2582].z) * _2643) * _2277) + ((((cbLight._m0[_2501].z * _2247) * _2554) * _2568) * _2290);
    float _2711;
    float _2713;
    float _2715;
    if (_2330)
    {
        _2711 = _2653;
        _2713 = _2654;
        _2715 = _2655;
    }
    else
    {
        uint _2717 = _2254 + 2u;
        uint _2721 = _2254 + 10u;
        float _2735 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2717].w)) * _768) * 0.949999988079071044921875);
        float _2736 = _2735 * _2735;
        float _2737 = cbLight._m0[_2717].x + _844;
        float _2738 = cbLight._m0[_2717].y + _845;
        float _2739 = cbLight._m0[_2717].z + _846;
        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
        float _2744 = _2743 * _2737;
        float _2745 = _2743 * _2738;
        float _2746 = _2743 * _2739;
        float _2747 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2717].xyz));
        float _4760 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2750 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2751 = dot(vec3(_765, _766, _767), vec3(_2744, _2745, _2746));
        float _4771 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2754 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _2755 = dot(vec3(cbLight._m0[_2717].xyz), vec3(_2744, _2745, _2746));
        float _4782 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2759 = _2736 * _2736;
        float _2763 = ((_2754 * _2754) * (_2759 + (-1.0))) + 1.0;
        float _2772 = (exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2773 = 1.0 - _2736;
        float _2783 = (0.5 / (((_2530 * ((_2750 * _2773) + _2736)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2773) + _2736) * _2750))) * _2750;
        float _4793 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2785 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2759 / ((_2763 * _2763) * 3.141590118408203125));
        float _2786 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2711 = (((_2772 * cbLight._m0[_2721].x) * _2785) * _2786) + _2653;
        _2713 = (((_2772 * cbLight._m0[_2721].y) * _2785) * _2786) + _2654;
        _2715 = (((_2772 * cbLight._m0[_2721].z) * _2785) * _2786) + _2655;
    }
    float _2817;
    float _2819;
    float _2821;
    if (_2439)
    {
        _2817 = _2711;
        _2819 = _2713;
        _2821 = _2715;
    }
    else
    {
        uint _2828 = _2254 + 3u;
        uint _2832 = _2254 + 11u;
        float _2846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2828].w)) * _768) * 0.949999988079071044921875);
        float _2847 = _2846 * _2846;
        float _2848 = cbLight._m0[_2828].x + _844;
        float _2849 = cbLight._m0[_2828].y + _845;
        float _2850 = cbLight._m0[_2828].z + _846;
        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
        float _2855 = _2854 * _2848;
        float _2856 = _2854 * _2849;
        float _2857 = _2854 * _2850;
        float _2858 = dot(vec3(_765, _766, _767), vec3(cbLight._m0[_2828].xyz));
        float _4809 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2861 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2862 = dot(vec3(_765, _766, _767), vec3(_2855, _2856, _2857));
        float _4820 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2865 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2866 = dot(vec3(cbLight._m0[_2828].xyz), vec3(_2855, _2856, _2857));
        float _4831 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2870 = _2847 * _2847;
        float _2874 = ((_2865 * _2865) * (_2870 + (-1.0))) + 1.0;
        float _2883 = (exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2884 = 1.0 - _2847;
        float _2894 = (0.5 / (((_2530 * ((_2861 * _2884) + _2847)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2884) + _2847) * _2861))) * _2861;
        float _4842 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        float _2896 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2870 / ((_2874 * _2874) * 3.141590118408203125));
        float _2897 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2817 = (((_2883 * cbLight._m0[_2832].x) * _2896) * _2897) + _2711;
        _2819 = (((_2883 * cbLight._m0[_2832].y) * _2896) * _2897) + _2713;
        _2821 = (((_2883 * cbLight._m0[_2832].z) * _2896) * _2897) + _2715;
    }
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    if (_2252.y == 0u)
    {
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.x;
        uint _2930 = uint((float(_2918.y) * floor(float(uint(cbSceneParam._m0[85u].y * _865) / _2919))) + floor(float(uint(cbSceneParam._m0[85u].x * _864) / _2919)));
        float _2940 = (log2(_2030 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2941 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
        uint _2944 = uint(isnan(14.0) ? _2941 : (isnan(_2941) ? 14.0 : min(_2941, 14.0)));
        uvec4 _2949 = texelFetch(g_lightClusterGridBuffer, int(((_2944 << 2u) + (_2930 << 6u)) >> 2u));
        uint _2950 = _2949.x;
        uint _2951 = _2918.z;
        float _3030;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        if (((((1u << ((_2951 >> 4u) & 15u)) + 4294967295u) & _2950) == 0u) || ((_2951 & 240u) == 0u))
        {
            _3030 = 0.0;
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
        }
        else
        {
            float _3031;
            float _3033;
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            uint _3189 = 0u;
            uint _3198;
            bool _3199;
            for (;;)
            {
                _3198 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3189 << 2u)) >> 2u)).x;
                _3199 = _3198 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3199)
                {
                    frontier_phi_71_pred = _3188;
                    frontier_phi_71_pred_1 = _3187;
                    frontier_phi_71_pred_2 = _3186;
                    frontier_phi_71_pred_3 = _3185;
                    frontier_phi_71_pred_4 = _3184;
                    frontier_phi_71_pred_5 = _3183;
                }
                else
                {
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    uint _3334;
                    _3328 = _3183;
                    _3329 = _3184;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3188;
                    _3334 = _3198;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    for (;;)
                    {
                        uint _3338 = uint(findLSB(_3334)) + (_3189 << 5u);
                        uint _3335 = (_3334 + 4294967295u) & _3334;
                        uint _3340 = _3338 * 48u;
                        vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 3u)).x));
                        uint _3360 = (_3338 * 48u) + 4u;
                        vec4 _3373 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3360)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 3u)).x));
                        uint _3379 = (_3338 * 48u) + 8u;
                        vec3 _3390 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x));
                        float _3394 = _3354.x - _2028;
                        float _3395 = _3354.y - _2029;
                        float _3396 = _3354.z - _2030;
                        float _3397 = dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396));
                        float _3400 = inversesqrt(_3397);
                        float _3401 = _3400 * _3394;
                        float _3402 = _3400 * _3395;
                        float _3403 = _3400 * _3396;
                        float _3404 = dot(vec3(_883, _886, _889), vec3(_3401, _3402, _3403));
                        float _3409 = 1.0 - (_3397 * _3354.w);
                        float _4868 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3410 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                        float _3411 = sqrt(_3397) * _3373.w;
                        float _3414 = 1.39999997615814208984375 / (_3411 + 1.39999997615814208984375);
                        float _3415 = _3414 * _3414;
                        float _3418 = ((1.0 - _3415) * _3404) + _3415;
                        float _3421 = _3411 * _3411;
                        float _3425 = ((isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0))) * _3410) / ((_3421 * 0.699999988079071044921875) + 1.0);
                        float _3429 = (-0.0) - _2028;
                        float _3430 = (-0.0) - _2029;
                        float _3431 = (-0.0) - _2030;
                        float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                        float _3436 = _3435 * _3429;
                        float _3437 = _3435 * _3430;
                        float _3438 = _3435 * _3431;
                        float _3445 = exp2(log2(1.0 / ((_3421 * 3.5) + 5.0)) * 0.25);
                        float _3446 = 1.0 - _943;
                        float _3453 = sqrt(1.0 - ((1.0 - (_3446 * _3446)) * (1.0 - (_3445 * _3445))));
                        float _3454 = _3453 * _3453;
                        float _3455 = _3454 * _3454;
                        float _3456 = _3436 + _3401;
                        float _3457 = _3437 + _3402;
                        float _3458 = _3438 + _3403;
                        float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                        float _3466 = dot(vec3(_883, _886, _889), vec3(_3436, _3437, _3438));
                        float _4884 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                        float _3469 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3470 = dot(vec3(_883, _886, _889), vec3(_3462 * _3456, _3462 * _3457, _3462 * _3458));
                        float _4895 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3473 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3477 = ((_3473 * _3473) * (_3455 + (-1.0))) + 1.0;
                        float _3478 = _3414 * _3454;
                        float _3479 = _3478 * _3478;
                        float _3482 = ((1.0 - _3479) * _3404) + _3479;
                        float _4906 = isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0));
                        float _3483 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                        float _3484 = 1.0 - _3454;
                        float _3494 = (0.5 / (((_3483 * ((_3469 * _3484) + _3454)) + 9.9999999392252902907785028219223e-09) + (((_3483 * _3484) + _3454) * _3469))) * _3483;
                        float _4917 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3504 = (((_3455 * 3.1415927410125732421875) * (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) / ((_3477 * _3477) * ((_3421 * 2.1991131305694580078125) + 3.141590118408203125))) * _3410;
                        _3258 = (_3425 * _3373.x) + _3331;
                        _3259 = (_3425 * _3373.y) + _3332;
                        _3260 = (_3425 * _3373.z) + _3333;
                        _3255 = (_3504 * _3390.x) + _3328;
                        _3256 = (_3504 * _3390.y) + _3329;
                        _3257 = (_3504 * _3390.z) + _3330;
                        if (_3335 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3328 = _3255;
                            _3329 = _3256;
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3260;
                            _3334 = _3335;
                        }
                    }
                    frontier_phi_71_pred = _3260;
                    frontier_phi_71_pred_1 = _3259;
                    frontier_phi_71_pred_2 = _3258;
                    frontier_phi_71_pred_3 = _3257;
                    frontier_phi_71_pred_4 = _3256;
                    frontier_phi_71_pred_5 = _3255;
                }
                _3041 = frontier_phi_71_pred;
                _3039 = frontier_phi_71_pred_1;
                _3037 = frontier_phi_71_pred_2;
                _3035 = frontier_phi_71_pred_3;
                _3033 = frontier_phi_71_pred_4;
                _3031 = frontier_phi_71_pred_5;
                uint _3190 = _3189 + 1u;
                if (_3190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3183 = _3031;
                    _3184 = _3033;
                    _3185 = _3035;
                    _3186 = _3037;
                    _3187 = _3039;
                    _3188 = _3041;
                    _3189 = _3190;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3030 = _3031;
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
        }
        uvec4 _3044 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3045 = _3044.z;
        uint _3047 = (_3045 >> 8u) & 15u;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        if (((4294967295u << _3047) & _2950) == 0u)
        {
            _3151 = _3030;
            _3153 = _3032;
            _3155 = _3034;
            _3157 = _3036;
            _3159 = _3038;
            _3161 = _3040;
        }
        else
        {
            float _3176 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
            float _3177 = _3176 * _2028;
            float _3178 = _3176 * _2029;
            float _3179 = _3176 * _2030;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3047 < ((_3045 >> 12u) & 15u))
            {
                float _3152;
                float _3154;
                float _3156;
                float _3158;
                float _3160;
                float _3162;
                float _3311 = _3030;
                float _3312 = _3032;
                float _3313 = _3034;
                float _3314 = _3036;
                float _3315 = _3038;
                float _3316 = _3040;
                uint _3317 = _3047;
                uint _3326;
                bool _3327;
                for (;;)
                {
                    _3326 = texelFetch(g_lightClassification, int((((_2944 << 5u) + (_2930 << 9u)) + (_3317 << 2u)) >> 2u)).x;
                    _3327 = _3326 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3327)
                    {
                        frontier_phi_82_pred = _3316;
                        frontier_phi_82_pred_1 = _3315;
                        frontier_phi_82_pred_2 = _3314;
                        frontier_phi_82_pred_3 = _3313;
                        frontier_phi_82_pred_4 = _3312;
                        frontier_phi_82_pred_5 = _3311;
                    }
                    else
                    {
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3531 = _3311;
                        float _3532 = _3312;
                        float _3533 = _3313;
                        float _3534 = _3314;
                        float _3535 = _3315;
                        float _3536 = _3316;
                        uint _3537 = _3326;
                        uint _3538;
                        vec4 _3563;
                        float _3564;
                        vec4 _3579;
                        vec3 _3591;
                        vec4 _3606;
                        vec4 _3621;
                        float _3667;
                        bool _3668;
                        for (;;)
                        {
                            uint _3548 = ((_3317 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3537));
                            _3538 = (_3537 + 4294967295u) & _3537;
                            uint _3550 = _3548 * 40u;
                            _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            _3564 = _3563.w;
                            uint _3566 = (_3548 * 40u) + 4u;
                            _3579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3566 + 3u)).x));
                            uint _3581 = (_3548 * 40u) + 8u;
                            _3591 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x));
                            uint _3593 = (_3548 * 40u) + 16u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3548 * 40u) + 20u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3623 = (_3548 * 40u) + 24u;
                            vec4 _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3642 = (_3548 * 40u) + 28u;
                            vec4 _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            _3667 = fma(_2030, _3655.z, fma(_2029, _3655.y, _3655.x * _2028)) + _3655.w;
                            _3668 = !((fma(_2030, _3636.z, fma(_2029, _3636.y, _3636.x * _2028)) + _3636.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3668)
                            {
                                float _3695 = _3563.x - _2028;
                                float _3696 = _3563.y - _2029;
                                float _3697 = _3563.z - _2030;
                                float _3698 = dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697));
                                float _3701 = inversesqrt(_3698);
                                float _3702 = _3701 * _3695;
                                float _3703 = _3701 * _3696;
                                float _3704 = _3701 * _3697;
                                float _3708 = 1.0 - (_3698 / (_3564 * _3564));
                                float _4928 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3713 = sqrt(_3698) * _3579.w;
                                float _3715 = 1.39999997615814208984375 / (_3713 + 1.39999997615814208984375);
                                float _3716 = _3715 * _3715;
                                float _3719 = ((1.0 - _3716) * dot(vec3(_3702, _3703, _3704), vec3(_883, _886, _889))) + _3716;
                                float _3722 = _3713 * _3713;
                                float _3726 = (fma(_2030, _3606.z, fma(_2029, _3606.y, _3606.x * _2028)) + _3606.w) / _3667;
                                float _3727 = (fma(_2030, _3621.z, fma(_2029, _3621.y, _3621.x * _2028)) + _3621.w) / _3667;
                                float _3731 = 1.0 - dot(vec2(_3726, _3727), vec2(_3726, _3727));
                                float _4944 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3733 = _3732 * (((isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0))) * _3709) / ((_3722 * 0.699999988079071044921875) + 1.0));
                                float _3745 = exp2(log2(1.0 / ((_3722 * 3.5) + 5.0)) * 0.25);
                                float _3746 = 1.0 - _943;
                                float _3753 = sqrt(1.0 - ((1.0 - (_3746 * _3746)) * (1.0 - (_3745 * _3745))));
                                float _3754 = _3753 * _3753;
                                float _3755 = _3754 * _3754;
                                float _3756 = _3702 - _3177;
                                float _3757 = _3703 - _3178;
                                float _3758 = _3704 - _3179;
                                float _3762 = inversesqrt(dot(vec3(_3756, _3757, _3758), vec3(_3756, _3757, _3758)));
                                float _3766 = dot(vec3(_883, _886, _889), vec3((-0.0) - _3177, (-0.0) - _3178, (-0.0) - _3179));
                                float _4955 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                                float _3769 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3770 = dot(vec3(_883, _886, _889), vec3(_3762 * _3756, _3762 * _3757, _3762 * _3758));
                                float _4966 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3773 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3777 = ((_3773 * _3773) * (_3755 + (-1.0))) + 1.0;
                                float _3778 = _3715 * _3754;
                                float _3779 = _3778 * _3778;
                                float _3785 = ((1.0 - _3779) * dot(vec3(_883, _886, _889), vec3(_3702, _3703, _3704))) + _3779;
                                float _4977 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3787 = 1.0 - _3754;
                                float _3797 = (0.5 / (((_3786 * ((_3769 * _3787) + _3754)) + 9.9999999392252902907785028219223e-09) + (((_3786 * _3787) + _3754) * _3769))) * _3786;
                                float _4988 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3807 = (_3732 * _3709) * (((_3755 * 3.1415927410125732421875) * (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0)))) / ((_3777 * _3777) * ((_3722 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3733 * _3579.z;
                                frontier_phi_88_pred_1 = _3733 * _3579.y;
                                frontier_phi_88_pred_2 = _3733 * _3579.x;
                                frontier_phi_88_pred_3 = _3807 * _3591.z;
                                frontier_phi_88_pred_4 = _3807 * _3591.y;
                                frontier_phi_88_pred_5 = _3807 * _3591.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3816 = frontier_phi_88_pred;
                            _3815 = frontier_phi_88_pred_1;
                            _3814 = frontier_phi_88_pred_2;
                            _3813 = frontier_phi_88_pred_3;
                            _3812 = frontier_phi_88_pred_4;
                            _3811 = frontier_phi_88_pred_5;
                            _3521 = _3814 + _3534;
                            _3522 = _3815 + _3535;
                            _3523 = _3816 + _3536;
                            _3518 = _3811 + _3531;
                            _3519 = _3812 + _3532;
                            _3520 = _3813 + _3533;
                            if (_3538 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3538;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3523;
                        frontier_phi_82_pred_1 = _3522;
                        frontier_phi_82_pred_2 = _3521;
                        frontier_phi_82_pred_3 = _3520;
                        frontier_phi_82_pred_4 = _3519;
                        frontier_phi_82_pred_5 = _3518;
                    }
                    _3162 = frontier_phi_82_pred;
                    _3160 = frontier_phi_82_pred_1;
                    _3158 = frontier_phi_82_pred_2;
                    _3156 = frontier_phi_82_pred_3;
                    _3154 = frontier_phi_82_pred_4;
                    _3152 = frontier_phi_82_pred_5;
                    uint _3318 = _3317 + 1u;
                    if (_3318 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3311 = _3152;
                        _3312 = _3154;
                        _3313 = _3156;
                        _3314 = _3158;
                        _3315 = _3160;
                        _3316 = _3162;
                        _3317 = _3318;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3158;
                frontier_phi_63_64_ladder_1 = _3162;
                frontier_phi_63_64_ladder_2 = _3160;
                frontier_phi_63_64_ladder_3 = _3156;
                frontier_phi_63_64_ladder_4 = _3154;
                frontier_phi_63_64_ladder_5 = _3152;
            }
            else
            {
                frontier_phi_63_64_ladder = _3036;
                frontier_phi_63_64_ladder_1 = _3040;
                frontier_phi_63_64_ladder_2 = _3038;
                frontier_phi_63_64_ladder_3 = _3034;
                frontier_phi_63_64_ladder_4 = _3032;
                frontier_phi_63_64_ladder_5 = _3030;
            }
            _3151 = frontier_phi_63_64_ladder_5;
            _3153 = frontier_phi_63_64_ladder_4;
            _3155 = frontier_phi_63_64_ladder_3;
            _3157 = frontier_phi_63_64_ladder;
            _3159 = frontier_phi_63_64_ladder_2;
            _3161 = frontier_phi_63_64_ladder_1;
        }
        float _3166 = isnan(1.0) ? _927 : (isnan(_927) ? 1.0 : min(_927, 1.0));
        _2963 = (_3166 * _3157) + _2494;
        _2965 = (_3166 * _3159) + _2496;
        _2967 = (_3166 * _3161) + _2498;
        _2969 = ((_3151 * 0.039999999105930328369140625) * _3166) + _2817;
        _2971 = ((_3153 * 0.039999999105930328369140625) * _3166) + _2819;
        _2973 = ((_3155 * 0.039999999105930328369140625) * _3166) + _2821;
    }
    else
    {
        _2963 = _2494;
        _2965 = _2496;
        _2967 = _2498;
        _2969 = _2817;
        _2971 = _2819;
        _2973 = _2821;
    }
    float _5004 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _5015 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _5026 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _2990 = ((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2963 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _927))) + ((_2969 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1761)) * cbPerFrame._m0[3u].x);
    float _2991 = ((isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_2965 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _927))) + ((_2971 + ((isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0))) * _1761)) * cbPerFrame._m0[3u].x);
    float _2992 = ((isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * (_2967 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _927))) + ((_2973 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1761)) * cbPerFrame._m0[3u].x);
    uint _2993 = _277 + 6u;
    float _3001 = _864 / cbSceneParam._m0[86u].x;
    float _3002 = _865 / cbSceneParam._m0[86u].y;
    vec4 _3016 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, (log2((isnan(cbSceneParam._m0[77u].w) ? _786 : (isnan(_786) ? cbSceneParam._m0[77u].w : min(_786, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3018 = _3016.x;
    float _3019 = _3016.y;
    float _3020 = _3016.z;
    float _3021 = _3016.w;
    float _3093;
    float _3095;
    float _3097;
    float _3099;
    if (_786 > cbSceneParam._m0[78u].w)
    {
        float _3055 = isnan(_786) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _786 : min(cbSceneParam._m0[80u].w, _786));
        float _3056 = _3055 / _786;
        float _3067 = _3056 * _837;
        float _3068 = _838 * _3056;
        float _3069 = (-0.0) - _3068;
        float _3071 = _3056 * _839;
        float _3073 = (cbSceneParam._m0[77u].w * _3069) / _3055;
        float _3074 = _3073 + cbSceneParam._m0[79u].w;
        float _3075 = cbSceneParam._m0[79u].w - _3068;
        float _3081 = sqrt(((_3067 * _3067) + (_3068 * _3068)) + (_3071 * _3071));
        float _3084 = (1.0 - (cbSceneParam._m0[77u].w / _3055)) * _3081;
        float _3089 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3091 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3268;
        if (abs((_3069 - _3073) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3268 = ((((_3074 > 0.0) ? exp2(_3089 * _3074) : (2.0 - exp2(_3091 * _3074))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3084;
        }
        else
        {
            float _3212 = 1.0 / cbSceneParam._m0[80u].x;
            float _3213 = isnan(_3075) ? _3074 : (isnan(_3074) ? _3075 : max(_3074, _3075));
            float _3214 = isnan(_3075) ? _3074 : (isnan(_3074) ? _3075 : min(_3074, _3075));
            float _3223 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : min(_3213, 0.0));
            float _3224 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : min(_3214, 0.0));
            _3268 = ((abs(_3081 / _3069) * cbSceneParam._m0[80u].y) * ((((_3223 - _3224) * 2.0) - ((exp2(_3089 * (isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0)))) - exp2(_3089 * (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))))) * _3212)) - ((exp2(_3091 * _3223) - exp2(_3091 * _3224)) * _3212))) + (_3084 * cbSceneParam._m0[80u].z);
        }
        vec4 _3270 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3001, _3002, 1.0), 0.0);
        float _3279 = exp2((_3268 * (-1.44269502162933349609375)) * (1.0 - _3270.w));
        float _3280 = log2(_3279);
        float _3296 = log2(_3021);
        _3093 = (exp2(_3296 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].x)) * _3270.x) / cbSceneParam._m0[78u].x)) + _3018;
        _3095 = (exp2(_3296 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].y)) * _3270.y) / cbSceneParam._m0[78u].y)) + _3019;
        _3097 = (exp2(_3296 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].z)) * _3270.z) / cbSceneParam._m0[78u].z)) + _3020;
        _3099 = _3279 * _3021;
    }
    else
    {
        _3093 = _3018;
        _3095 = _3019;
        _3097 = _3020;
        _3099 = _3021;
    }
    bool _3306;
    vec4 _3109;
    vec4 _3131;
    float _3133;
    float _3137;
    float _3138;
    float _3139;
    float _3140;
    bool _3150;
    for (;;)
    {
        _3109 = cbMatDynParam._m0[0u];
        float _3111 = roundEven(_3109.y);
        bool _3112 = _3111 == 3.0;
        float _3113 = log2(_3099);
        float _3120 = exp2(_3113 * cbSceneParam._m0[78u].x) * _2990;
        float _3121 = exp2(_3113 * cbSceneParam._m0[78u].y) * _2991;
        float _3122 = exp2(_3113 * cbSceneParam._m0[78u].z) * _2992;
        float _3129 = _853 + (-0.5);
        _3131 = cbMtdParam._m0[1u];
        _3133 = _3131.y * _3129;
        float _3136 = (_3111 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3137 = _3136 * (_3112 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3093)));
        _3138 = _3136 * (_3112 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3095)));
        _3139 = _3136 * (_3112 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3097)));
        _3140 = _3129 * 0.999000012874603271484375;
        _3150 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3150)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _3140) < 0.5)
            {
                _3306 = true;
                break;
            }
        }
        uint _3247 = _902 + uint(_3109.w);
        if ((cbInstanceData._m0[_3247].w < 1.0) && ((cbInstanceData._m0[_3247].w + _3140) < 0.5))
        {
            _3306 = true;
            break;
        }
        if ((_3133 + 1.0) < _3131.x)
        {
            _3306 = true;
            break;
        }
        _3306 = false;
        break;
    }
    float _3509;
    if (_3306)
    {
        discard_state = true;
        _3509 = 0.0;
    }
    else
    {
        _3509 = cbInstanceData._m0[_2993].w;
    }
    SV_Target.x = _3137;
    SV_Target.y = _3138;
    SV_Target.z = _3139;
    SV_Target.w = _3509;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2993].w;
    discard_exit();
}


