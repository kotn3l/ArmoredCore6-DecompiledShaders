#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1000;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _235 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _235 + 1u;
    uint _244 = _235 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_235].x * cbInstanceData._m0[_235].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((_254 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_255 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _325 = _321.z;
    float _329 = (_321.x * 2.0) + (-1.0);
    float _330 = (_321.y * 2.0) + (-1.0);
    float _331 = dot(vec2(_329, _330), vec2(_329, _330));
    float _3335 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _337 = sqrt(1.0 - (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))));
    float _342 = _329 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_295.x * 2.0) + (-1.0)));
    float _343 = _330 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_295.y * 2.0) + (-1.0)));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _254) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _255) + cbTextureTilingScale._m0[19u].w));
    float _358 = _356.x;
    float _359 = 1.0 - _358;
    float _392 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_358 - _359) * cbMtdParam._m0[24u].w) + _359) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3346 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _401 = ((((cbMtdParam._m0[10u].x - _280) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _393) + _280;
    float _402 = ((((cbMtdParam._m0[10u].y - _281) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _393) + _281;
    float _403 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _282)) * _393) + _282;
    float _408 = (((_295.z - _325) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _325;
    float _412 = ((cbMtdParam._m0[23u].y - _408) * _393) + _408;
    vec4 _434 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _254) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _255) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _440 = (_434.x * 2.0) + (-1.0);
    float _441 = (_434.y * 2.0) + (-1.0);
    float _442 = dot(vec2(_440, _441), vec2(_440, _441));
    float _3357 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _458 = (_393 * (((cbMtdParam._m0[22u].z * _342) - _342) + _440)) + _342;
    float _459 = (_393 * (((cbMtdParam._m0[22u].z * _343) - _343) + _441)) + _343;
    float _460 = (_393 * (sqrt(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) - _337)) + _337;
    float _462 = cbMtdParam._m0[22u].x + _321.w;
    float _465 = fma(_460, _222 * NORMAL.x, fma(_459, _229 * TANGENT.x, (_215 * _207) * _458));
    float _468 = fma(_460, _222 * NORMAL.y, fma(_459, _229 * TANGENT.y, (_215 * _208) * _458));
    float _471 = fma(_460, _222 * NORMAL.z, fma(_459, _229 * TANGENT.z, (_215 * _209) * _458));
    float _475 = inversesqrt(dot(vec3(_465, _468, _471), vec3(_465, _468, _471)));
    float _476 = _475 * _465;
    float _477 = _475 * _468;
    float _478 = _475 * _471;
    float _3368 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _479 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _3379 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3390 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3401 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _3412 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _497 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _548 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _538);
    float _549 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _538);
    float _550 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _538);
    float _554 = inversesqrt(dot(vec3(_548, _549, _550), vec3(_548, _549, _550)));
    float _555 = _548 * _554;
    float _556 = _549 * _554;
    float _557 = _550 * _554;
    float _563 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _564 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _585 = fma(_478, cbSceneParam._m0[5u].z, fma(_477, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _476));
    float _588 = fma(_478, cbSceneParam._m0[6u].z, fma(_477, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _476));
    float _591 = fma(_478, cbSceneParam._m0[7u].z, fma(_477, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _476));
    uint _605 = (_235 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _611 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_605].x;
    float _612 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * cbInstanceData._m0[_605].y;
    float _613 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0)))) * cbInstanceData._m0[_605].z;
    float _3423 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    vec4 _625 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _563, cbSceneParam._m0[86u].y * _564));
    float _629 = ((isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * TEXCOORD_5.w) * _625.x;
    float _630 = dot(vec3(_476, _477, _478), vec3(_555, _556, _557));
    float _633 = _630 * 2.0;
    float _637 = (_633 * _476) - _555;
    float _638 = (_633 * _477) - _556;
    float _639 = (_633 * _478) - _557;
    float _643 = abs(dot(vec3(_555, _556, _557), vec3(_476, _477, _478)));
    float _3456 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _645 = sqrt(_479);
    float _658 = exp2((_645 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_645 * 3.0));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _999;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _724 = fma(_698, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _690));
        float _728 = fma(_698, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _690));
        float _732 = fma(_698, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _690));
        float _757 = _690 + _476;
        float _758 = _694 + _477;
        float _759 = _698 + _478;
        float _769 = fma(_759, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _757)) - _724;
        float _770 = fma(_759, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _757)) - _728;
        float _771 = fma(_759, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _757)) - _732;
        float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
        float _788 = ((_775 * _769) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_724 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _789 = ((_775 * _770) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_728 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _790 = ((_775 * _771) / cbModelParam._m0[34u].z) + ((((((_732 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_788, _789, _790), 0.0);
        float _827 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_793.x + (-0.5));
        float _829 = _827 * (_793.y + (-0.5));
        float _830 = _827 * (_793.z + (-0.5));
        float _837 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_800.x + (-0.5));
        float _839 = _837 * (_800.y + (-0.5));
        float _840 = _837 * (_800.z + (-0.5));
        float _847 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_807.x + (-0.5));
        float _849 = _847 * (_807.y + (-0.5));
        float _850 = _847 * (_807.z + (-0.5));
        float _857 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_814.x + (-0.5));
        float _859 = _857 * (_814.y + (-0.5));
        float _860 = _857 * (_814.z + (-0.5));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = _828 * 0.5;
        float _865 = _838 * 0.5;
        float _866 = _848 * 0.5;
        float _867 = dot(vec3(_864, _865, _866), vec3(_864, _865, _866));
        float _872 = (_867 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_867);
        float _881 = (dot(vec3(_476, _477, _478), vec3(_872 * _864, _872 * _865, _872 * _866)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _891 = sqrt(((_865 * _865) + (_864 * _864)) + (_866 * _866)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3504 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_893 + 1.0))) + _898) * _861;
        float _908 = _829 * 0.5;
        float _909 = _839 * 0.5;
        float _910 = _849 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _924 = (dot(vec3(_476, _477, _478), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _933 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3537 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_935 + 1.0))) + _940) * _862;
        float _950 = _830 * 0.5;
        float _951 = _840 * 0.5;
        float _952 = _850 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_476, _477, _478), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3570 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_977 + 1.0))) + _982) * _863;
        _999 = _830;
        _1001 = _829;
        _1002 = _828;
        _1003 = _840;
        _1004 = _839;
        _1005 = _838;
        _1006 = _850;
        _1007 = _849;
        _1008 = _848;
        _1009 = _863;
        _1010 = _862;
        _1011 = _861;
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
    }
    else
    {
        _999 = _1000;
        _1001 = _1000;
        _1002 = _1000;
        _1003 = _1000;
        _1004 = _1000;
        _1005 = _1000;
        _1006 = _1000;
        _1007 = _1000;
        _1008 = _1000;
        _1009 = _1000;
        _1010 = _1000;
        _1011 = _1000;
        _1012 = 0.0;
        _1013 = 0.0;
        _1014 = 0.0;
    }
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1039 = fma(_698, cbModelParam._m0[30u].z, fma(_694, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _690));
        float _1043 = fma(_698, cbModelParam._m0[31u].z, fma(_694, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _690));
        float _1047 = fma(_698, cbModelParam._m0[32u].z, fma(_694, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _690));
        float _1070 = _690 + _476;
        float _1071 = _694 + _477;
        float _1072 = _698 + _478;
        float _1082 = fma(_1072, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070)) - _1039;
        float _1083 = fma(_1072, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070)) - _1043;
        float _1084 = fma(_1072, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070)) - _1047;
        float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
        float _1101 = ((_1088 * _1082) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1039 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1088 * _1083) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1043 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1088 * _1084) / cbModelParam._m0[35u].z) + ((((((_1047 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1138 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1105.x + (-0.5));
        float _1140 = _1138 * (_1105.y + (-0.5));
        float _1141 = _1138 * (_1105.z + (-0.5));
        float _1148 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1112.x + (-0.5));
        float _1150 = _1148 * (_1112.y + (-0.5));
        float _1151 = _1148 * (_1112.z + (-0.5));
        float _1158 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1119.x + (-0.5));
        float _1160 = _1158 * (_1119.y + (-0.5));
        float _1161 = _1158 * (_1119.z + (-0.5));
        float _1168 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1126.x + (-0.5));
        float _1170 = _1168 * (_1126.y + (-0.5));
        float _1171 = _1168 * (_1126.z + (-0.5));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = _1139 * 0.5;
        float _1176 = _1149 * 0.5;
        float _1177 = _1159 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_476, _477, _478), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3633 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1202 + 1.0))) + _1207) * _1172;
        float _1217 = _1140 * 0.5;
        float _1218 = _1150 * 0.5;
        float _1219 = _1160 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_476, _477, _478), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3666 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1244 + 1.0))) + _1249) * _1173;
        float _1259 = _1141 * 0.5;
        float _1260 = _1151 * 0.5;
        float _1261 = _1161 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_476, _477, _478), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3699 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1286 + 1.0))) + _1291) * _1174;
        _1308 = _1141;
        _1309 = _1140;
        _1310 = _1139;
        _1311 = _1151;
        _1312 = _1150;
        _1313 = _1149;
        _1314 = _1161;
        _1315 = _1160;
        _1316 = _1159;
        _1317 = _1174;
        _1318 = _1173;
        _1319 = _1172;
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
    }
    else
    {
        _1308 = _1000;
        _1309 = _1000;
        _1310 = _1000;
        _1311 = _1000;
        _1312 = _1000;
        _1313 = _1000;
        _1314 = _1000;
        _1315 = _1000;
        _1316 = _1000;
        _1317 = _1000;
        _1318 = _1000;
        _1319 = _1000;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1012)) + _1012;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1013)) + _1013;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1014)) + _1014;
    float _1355 = fma(_1334, cbSceneParam._m0[89u].z, fma(_1333, cbSceneParam._m0[89u].y, _1332 * cbSceneParam._m0[89u].x));
    float _1358 = fma(_1334, cbSceneParam._m0[90u].z, fma(_1333, cbSceneParam._m0[90u].y, _1332 * cbSceneParam._m0[90u].x));
    float _1361 = fma(_1334, cbSceneParam._m0[91u].z, fma(_1333, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1332));
    float _1376 = _637 * 0.5;
    float _1377 = _638 * 0.5;
    float _1378 = _639 * 0.5;
    float _1379 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1382 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1385 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1419;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1392 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_999, _1003, _1006, _1009));
        float _1396 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1001, _1004, _1007, _1010));
        float _1400 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1002, _1005, _1008, _1011));
        float _1407 = dot(vec4(cbModelParam._m0[39u]), vec4(_1376, _1377, _1378, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1407) ? 0.0 : (isnan(0.0) ? _1407 : max(0.0, _1407))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1430;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1421 = dot(vec4(cbModelParam._m0[40u]), vec4(_1376, _1377, _1378, 1.0));
        _1430 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1430 = 1.0;
    }
    float _1434 = (_1430 * cbModelParam._m0[1u].x) + (_1419 * (1.0 - cbModelParam._m0[1u].x));
    float _1444 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _479);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1444 : min(cbModelParam._m0[25u].z, _1444));
    float _1527;
    float _1529;
    float _1531;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1494 = fma(_698, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690)) + cbModelParam._m0[13u].w;
        float _1498 = fma(_698, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690)) + cbModelParam._m0[14u].w;
        float _1502 = fma(_698, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690)) + cbModelParam._m0[15u].w;
        float _1505 = fma(_639, cbModelParam._m0[13u].z, fma(_638, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637));
        float _1508 = fma(_639, cbModelParam._m0[14u].z, fma(_638, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637));
        float _1511 = fma(_639, cbModelParam._m0[15u].z, fma(_638, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637));
        float _1539;
        if (_1505 > 0.0)
        {
            _1539 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1539 = frontier_phi_14_12_ladder;
        }
        float _1764;
        if (_1508 > 0.0)
        {
            _1764 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1764 = frontier_phi_23_19_ladder;
        }
        float _2010;
        if (_1511 > 0.0)
        {
            _2010 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2010 = frontier_phi_35_30_ladder;
        }
        float _2012 = isnan(_1764) ? _1539 : (isnan(_1539) ? _1764 : min(_1539, _1764));
        float _2013 = isnan(_2010) ? _2012 : (isnan(_2012) ? _2010 : min(_2012, _2010));
        float _2017 = (_2013 * _1505) + _1494;
        float _2018 = (_2013 * _1508) + _1498;
        float _2019 = (_2013 * _1511) + _1502;
        float _2020 = _2013 * 9.9999997473787516355514526367188e-05;
        float _2022 = (-1.0) - _2020;
        float _2024 = _2020 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2019 > _2024) || ((_2019 < _2022) || ((_2018 > _2024) || ((_2018 < _2022) || ((_2017 < _2022) || (_2017 > _2024))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2143 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2019, cbModelParam._m0[9u].z, fma(_2018, cbModelParam._m0[9u].y, _2017 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2019, cbModelParam._m0[10u].z, fma(_2018, cbModelParam._m0[10u].y, _2017 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2019, cbModelParam._m0[11u].z, fma(_2018, cbModelParam._m0[11u].y, _2017 * cbModelParam._m0[11u].x))), _1445);
            frontier_phi_13_35_ladder = _2143.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2143.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2143.x * cbModelParam._m0[1u].y;
        }
        _1527 = frontier_phi_13_35_ladder_2;
        _1529 = frontier_phi_13_35_ladder_1;
        _1531 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1515 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_637, _638, _639), _1445);
        _1527 = _1515.x * cbModelParam._m0[1u].y;
        _1529 = _1515.y * cbModelParam._m0[1u].y;
        _1531 = _1515.z * cbModelParam._m0[1u].y;
    }
    float _1535 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _479);
    float _1536 = isnan(_1535) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1535 : min(cbModelParam._m0[25u].w, _1535));
    float _1627;
    float _1629;
    float _1631;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1591 = fma(_698, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690)) + cbModelParam._m0[21u].w;
        float _1595 = fma(_698, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690)) + cbModelParam._m0[22u].w;
        float _1599 = fma(_698, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690)) + cbModelParam._m0[23u].w;
        float _1602 = fma(_639, cbModelParam._m0[21u].z, fma(_638, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637));
        float _1605 = fma(_639, cbModelParam._m0[22u].z, fma(_638, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637));
        float _1608 = fma(_639, cbModelParam._m0[23u].z, fma(_638, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637));
        float _1769;
        if (_1602 > 0.0)
        {
            _1769 = abs((1.0 - _1591) / _1602);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1591 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1769 = frontier_phi_25_21_ladder;
        }
        float _2037;
        if (_1605 > 0.0)
        {
            _2037 = abs((1.0 - _1595) / _1605);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1595 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2037 = frontier_phi_37_32_ladder;
        }
        float _2242;
        if (_1608 > 0.0)
        {
            _2242 = abs((1.0 - _1599) / _1608);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1608 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1599 + 1.0) / _1608);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2242 = frontier_phi_46_43_ladder;
        }
        float _2244 = isnan(_2037) ? _1769 : (isnan(_1769) ? _2037 : min(_1769, _2037));
        float _2245 = isnan(_2242) ? _2244 : (isnan(_2244) ? _2242 : min(_2244, _2242));
        float _2249 = (_2245 * _1602) + _1591;
        float _2250 = (_2245 * _1605) + _1595;
        float _2251 = (_2245 * _1608) + _1599;
        float _2252 = _2245 * 9.9999997473787516355514526367188e-05;
        float _2253 = (-1.0) - _2252;
        float _2255 = _2252 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2251 > _2255) || ((_2251 < _2253) || ((_2250 > _2255) || ((_2250 < _2253) || ((_2249 < _2253) || (_2249 > _2255))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2450 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2251, cbModelParam._m0[17u].z, fma(_2250, cbModelParam._m0[17u].y, _2249 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2251, cbModelParam._m0[18u].z, fma(_2250, cbModelParam._m0[18u].y, _2249 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2251, cbModelParam._m0[19u].z, fma(_2250, cbModelParam._m0[19u].y, _2249 * cbModelParam._m0[19u].x))), _1536);
            frontier_phi_22_46_ladder = _2450.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2450.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2450.x * cbModelParam._m0[1u].z;
        }
        _1627 = frontier_phi_22_46_ladder_2;
        _1629 = frontier_phi_22_46_ladder_1;
        _1631 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_637, _638, _639), _1536);
        _1627 = _1611.x * cbModelParam._m0[1u].z;
        _1629 = _1611.y * cbModelParam._m0[1u].z;
        _1631 = _1611.z * cbModelParam._m0[1u].z;
    }
    float _1643 = ((((1.0 - _658) * ((_645 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_658 * _645)) * _629;
    float _1644 = _1643 * ((cbModelParam._m0[1u].w * (_1627 - _1527)) + _1527);
    float _1645 = _1643 * ((cbModelParam._m0[1u].w * (_1629 - _1529)) + _1529);
    float _1646 = _1643 * ((cbModelParam._m0[1u].w * (_1631 - _1531)) + _1531);
    float _1649 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1645, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1645, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1645, cbSceneParam._m0[91u].y, _1644 * cbSceneParam._m0[91u].x));
    vec4 _1663 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_563, _564));
    float _1665 = _1663.w;
    float _1677 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1665);
    float _1678 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1665);
    float _1679 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1665);
    uvec4 _1683 = floatBitsToUint(cbInstanceData._m0[_235 + 5u]);
    uint _1685 = _1683.x * 14u;
    uint _1686 = _1685 + 13u;
    float _1693 = _629 + (-1.0);
    float _1698 = (cbLight._m0[_1686].x * _1693) + 1.0;
    float _1699 = (cbLight._m0[_1686].y * _1693) + 1.0;
    float _1700 = (cbLight._m0[_1686].z * _1693) + 1.0;
    float _1701 = (cbLight._m0[_1686].w * _1693) + 1.0;
    uint _1702 = _1685 + 5u;
    float _1708 = isnan(1.0) ? _1699 : (isnan(_1699) ? 1.0 : min(_1699, 1.0));
    uint _1712 = _1685 + 4u;
    float _1722 = isnan(1.0) ? _1698 : (isnan(_1698) ? 1.0 : min(_1698, 1.0));
    uint _1726 = _1685 | 1u;
    float _1737 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_476, _477, _478));
    float _1740 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_476, _477, _478));
    float _3835 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
    float _3846 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1745 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.3183098733425140380859375;
    float _1747 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.3183098733425140380859375;
    float _1754 = ((cbLight._m0[_1702].x * _1708) * _1747) + (((cbLight._m0[_1712].x * _1677) * _1722) * _1745);
    float _1755 = ((_1708 * cbLight._m0[_1702].y) * _1747) + (((cbLight._m0[_1712].y * _1678) * _1722) * _1745);
    float _1756 = ((_1708 * cbLight._m0[_1702].z) * _1747) + (((cbLight._m0[_1712].z * _1679) * _1722) * _1745);
    uvec4 _1761 = floatBitsToUint(cbLight._m0[_1685 + 12u]);
    bool _1763 = _1761.x == 0u;
    float _1774;
    float _1776;
    float _1778;
    if (_1763)
    {
        _1774 = _1754;
        _1776 = _1755;
        _1778 = _1756;
    }
    else
    {
        uint _1782 = _1685 + 6u;
        float _1798 = (dot(vec3(cbLight._m0[_1685 + 2u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _1799 = _1798 * _1798;
        float _3857 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1801 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _1774 = (((cbLight._m0[_1782].x * 0.3183098733425140380859375) * _1800) * _1801) + _1754;
        _1776 = (((cbLight._m0[_1782].y * 0.3183098733425140380859375) * _1800) * _1801) + _1755;
        _1778 = (((cbLight._m0[_1782].z * 0.3183098733425140380859375) * _1800) * _1801) + _1756;
    }
    bool _1781 = _1761.y == 0u;
    float _1819;
    float _1821;
    float _1823;
    if (_1781)
    {
        _1819 = _1774;
        _1821 = _1776;
        _1823 = _1778;
    }
    else
    {
        uint _1981 = _1685 + 7u;
        float _1997 = (dot(vec3(cbLight._m0[_1685 + 3u].xyz), vec3(_476, _477, _478)) * 0.5) + 0.5;
        float _1998 = _1997 * _1997;
        float _3873 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _2000 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _1819 = (((cbLight._m0[_1981].x * 0.3183098733425140380859375) * _1999) * _2000) + _1774;
        _1821 = (((cbLight._m0[_1981].y * 0.3183098733425140380859375) * _1999) * _2000) + _1776;
        _1823 = (((cbLight._m0[_1981].z * 0.3183098733425140380859375) * _1999) * _2000) + _1778;
    }
    uint _1826 = _1685 + 8u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1685].w)) * _479) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1685].x + _555;
    float _1842 = cbLight._m0[_1685].y + _556;
    float _1843 = cbLight._m0[_1685].z + _557;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1685].xyz));
    float _3889 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _1855 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1856 = dot(vec3(_476, _477, _478), vec3(_1848, _1849, _1850));
    float _3911 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _1860 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_1848, _1849, _1850));
    float _3922 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1864 = _1840 * _1840;
    float _1868 = ((_1859 * _1859) * (_1864 + (-1.0))) + 1.0;
    float _1879 = (exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1880 = 1.0 - _1840;
    float _1891 = (0.5 / (((_1855 * ((_1854 * _1880) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _1880) + _1840) * _1854))) * _1854;
    float _3933 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1893 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1864 / ((_1868 * _1868) * 3.141590118408203125));
    uint _1907 = _1685 + 9u;
    float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1726].w)) * _479) * 0.949999988079071044921875);
    float _1919 = _1918 * _1918;
    float _1920 = cbLight._m0[_1726].x + _555;
    float _1921 = cbLight._m0[_1726].y + _556;
    float _1922 = cbLight._m0[_1726].z + _557;
    float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
    float _1927 = _1926 * _1920;
    float _1928 = _1926 * _1921;
    float _1929 = _1926 * _1922;
    float _1930 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_1726].xyz));
    float _3944 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1934 = dot(vec3(_476, _477, _478), vec3(_1927, _1928, _1929));
    float _3955 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1937 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1938 = dot(vec3(cbLight._m0[_1726].xyz), vec3(_1927, _1928, _1929));
    float _3966 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1942 = _1919 * _1919;
    float _1946 = ((_1937 * _1937) * (_1942 + (-1.0))) + 1.0;
    float _1955 = (exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1956 = 1.0 - _1919;
    float _1966 = (0.5 / (((_1855 * ((_1933 * _1956) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _1956) + _1919) * _1933))) * _1933;
    float _3977 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1968 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1942 / ((_1946 * _1946) * 3.141590118408203125));
    float _1978 = (((_1955 * cbLight._m0[_1907].x) * _1968) * _1708) + ((((cbLight._m0[_1826].x * _1677) * _1879) * _1893) * _1722);
    float _1979 = (((_1955 * cbLight._m0[_1907].y) * _1968) * _1708) + ((((cbLight._m0[_1826].y * _1678) * _1879) * _1893) * _1722);
    float _1980 = (((_1955 * cbLight._m0[_1907].z) * _1968) * _1708) + ((((cbLight._m0[_1826].z * _1679) * _1879) * _1893) * _1722);
    float _2042;
    float _2044;
    float _2046;
    if (_1763)
    {
        _2042 = _1978;
        _2044 = _1979;
        _2046 = _1980;
    }
    else
    {
        uint _2048 = _1685 + 2u;
        uint _2052 = _1685 + 10u;
        float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _479) * 0.949999988079071044921875);
        float _2067 = _2066 * _2066;
        float _2068 = cbLight._m0[_2048].x + _555;
        float _2069 = cbLight._m0[_2048].y + _556;
        float _2070 = cbLight._m0[_2048].z + _557;
        float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
        float _2075 = _2074 * _2068;
        float _2076 = _2074 * _2069;
        float _2077 = _2074 * _2070;
        float _2078 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2048].xyz));
        float _3988 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
        float _2081 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _2082 = dot(vec3(_476, _477, _478), vec3(_2075, _2076, _2077));
        float _3999 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2085 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _2086 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2075, _2076, _2077));
        float _4010 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2090 = _2067 * _2067;
        float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
        float _2103 = (exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2104 = 1.0 - _2067;
        float _2114 = (0.5 / (((_1855 * ((_2081 * _2104) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _2104) + _2067) * _2081))) * _2081;
        float _4021 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2116 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
        float _2117 = isnan(1.0) ? _1700 : (isnan(_1700) ? 1.0 : min(_1700, 1.0));
        _2042 = (((_2103 * cbLight._m0[_2052].x) * _2116) * _2117) + _1978;
        _2044 = (((_2103 * cbLight._m0[_2052].y) * _2116) * _2117) + _1979;
        _2046 = (((_2103 * cbLight._m0[_2052].z) * _2116) * _2117) + _1980;
    }
    float _2152;
    float _2154;
    float _2156;
    if (_1781)
    {
        _2152 = _2042;
        _2154 = _2044;
        _2156 = _2046;
    }
    else
    {
        uint _2163 = _1685 + 3u;
        uint _2167 = _1685 + 11u;
        float _2181 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2163].w)) * _479) * 0.949999988079071044921875);
        float _2182 = _2181 * _2181;
        float _2183 = cbLight._m0[_2163].x + _555;
        float _2184 = cbLight._m0[_2163].y + _556;
        float _2185 = cbLight._m0[_2163].z + _557;
        float _2189 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
        float _2190 = _2189 * _2183;
        float _2191 = _2189 * _2184;
        float _2192 = _2189 * _2185;
        float _2193 = dot(vec3(_476, _477, _478), vec3(cbLight._m0[_2163].xyz));
        float _4037 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2196 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2197 = dot(vec3(_476, _477, _478), vec3(_2190, _2191, _2192));
        float _4048 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2200 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2201 = dot(vec3(cbLight._m0[_2163].xyz), vec3(_2190, _2191, _2192));
        float _4059 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2205 = _2182 * _2182;
        float _2209 = ((_2200 * _2200) * (_2205 + (-1.0))) + 1.0;
        float _2218 = (exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2219 = 1.0 - _2182;
        float _2229 = (0.5 / (((_1855 * ((_2196 * _2219) + _2182)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _2219) + _2182) * _2196))) * _2196;
        float _4070 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        float _2231 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2205 / ((_2209 * _2209) * 3.141590118408203125));
        float _2232 = isnan(1.0) ? _1701 : (isnan(_1701) ? 1.0 : min(_1701, 1.0));
        _2152 = (((_2218 * cbLight._m0[_2167].x) * _2231) * _2232) + _2042;
        _2154 = (((_2218 * cbLight._m0[_2167].y) * _2231) * _2232) + _2044;
        _2156 = (((_2218 * cbLight._m0[_2167].z) * _2231) * _2232) + _2046;
    }
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    float _2375;
    float _2377;
    if (_1683.y == 0u)
    {
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2307;
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2307;
        float _2310 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2307;
        uvec4 _2322 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2323 = _2322.x;
        uint _2334 = uint((float(_2322.y) * floor(float(uint(cbSceneParam._m0[85u].y * _564) / _2323))) + floor(float(uint(cbSceneParam._m0[85u].x * _563) / _2323)));
        float _2344 = (log2(_2310 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2345 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        uint _2348 = uint(isnan(14.0) ? _2345 : (isnan(_2345) ? 14.0 : min(_2345, 14.0)));
        uvec4 _2353 = texelFetch(g_lightClusterGridBuffer, int(((_2348 << 2u) + (_2334 << 6u)) >> 2u));
        uint _2354 = _2353.x;
        uint _2355 = _2322.z;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        if (((((1u << ((_2355 >> 4u) & 15u)) + 4294967295u) & _2354) == 0u) || ((_2355 & 240u) == 0u))
        {
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
            _2463 = 0.0;
            _2465 = 0.0;
        }
        else
        {
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2464;
            float _2466;
            float _2600 = 0.0;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            uint _2606 = 0u;
            uint _2615;
            bool _2616;
            for (;;)
            {
                _2615 = texelFetch(g_lightClassification, int((((_2348 << 5u) + (_2334 << 9u)) + (_2606 << 2u)) >> 2u)).x;
                _2616 = _2615 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2616)
                {
                    frontier_phi_61_pred = _2600;
                    frontier_phi_61_pred_1 = _2605;
                    frontier_phi_61_pred_2 = _2604;
                    frontier_phi_61_pred_3 = _2603;
                    frontier_phi_61_pred_4 = _2602;
                    frontier_phi_61_pred_5 = _2601;
                }
                else
                {
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    uint _2730;
                    _2724 = _2600;
                    _2725 = _2601;
                    _2726 = _2602;
                    _2727 = _2603;
                    _2728 = _2604;
                    _2729 = _2605;
                    _2730 = _2615;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    for (;;)
                    {
                        uint _2734 = uint(findLSB(_2730)) + (_2606 << 5u);
                        uint _2731 = (_2730 + 4294967295u) & _2730;
                        uint _2736 = _2734 * 48u;
                        vec4 _2750 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2736)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2736 + 3u)).x));
                        uint _2756 = (_2734 * 48u) + 4u;
                        vec4 _2769 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2756)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 3u)).x));
                        uint _2775 = (_2734 * 48u) + 8u;
                        vec3 _2786 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2775)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2775 + 2u)).x));
                        float _2790 = _2750.x - _2308;
                        float _2791 = _2750.y - _2309;
                        float _2792 = _2750.z - _2310;
                        float _2793 = dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792));
                        float _2796 = inversesqrt(_2793);
                        float _2797 = _2796 * _2790;
                        float _2798 = _2796 * _2791;
                        float _2799 = _2796 * _2792;
                        float _2800 = dot(vec3(_585, _588, _591), vec3(_2797, _2798, _2799));
                        float _2805 = 1.0 - (_2793 * _2750.w);
                        float _4096 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2806 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2807 = sqrt(_2793) * _2769.w;
                        float _2810 = 1.39999997615814208984375 / (_2807 + 1.39999997615814208984375);
                        float _2811 = _2810 * _2810;
                        float _2814 = ((1.0 - _2811) * _2800) + _2811;
                        float _2817 = _2807 * _2807;
                        float _2821 = ((isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))) * _2806) / ((_2817 * 0.699999988079071044921875) + 1.0);
                        float _2825 = (-0.0) - _2308;
                        float _2826 = (-0.0) - _2309;
                        float _2827 = (-0.0) - _2310;
                        float _2831 = inversesqrt(dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827)));
                        float _2832 = _2831 * _2825;
                        float _2833 = _2831 * _2826;
                        float _2834 = _2831 * _2827;
                        float _2842 = exp2(log2(1.0 / ((_2817 * 3.5) + 5.0)) * 0.25);
                        float _2843 = 1.0 - _645;
                        float _2850 = sqrt(1.0 - ((1.0 - (_2843 * _2843)) * (1.0 - (_2842 * _2842))));
                        float _2851 = _2850 * _2850;
                        float _2852 = _2851 * _2851;
                        float _2853 = _2832 + _2797;
                        float _2854 = _2833 + _2798;
                        float _2855 = _2834 + _2799;
                        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
                        float _2863 = dot(vec3(_585, _588, _591), vec3(_2832, _2833, _2834));
                        float _4112 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2866 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2867 = dot(vec3(_585, _588, _591), vec3(_2859 * _2853, _2859 * _2854, _2859 * _2855));
                        float _4123 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2870 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2874 = ((_2870 * _2870) * (_2852 + (-1.0))) + 1.0;
                        float _2875 = _2810 * _2851;
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2800) + _2876;
                        float _4134 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2880 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2881 = 1.0 - _2851;
                        float _2891 = (0.5 / (((_2880 * ((_2866 * _2881) + _2851)) + 9.9999999392252902907785028219223e-09) + (((_2880 * _2881) + _2851) * _2866))) * _2880;
                        float _4145 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2902 = (((_2852 * 3.1415927410125732421875) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) / ((_2874 * _2874) * ((_2817 * 2.1991131305694580078125) + 3.141590118408203125))) * _2806;
                        _2659 = (_2821 * _2769.x) + _2727;
                        _2660 = (_2821 * _2769.y) + _2728;
                        _2661 = (_2821 * _2769.z) + _2729;
                        _2656 = (_2902 * _2786.x) + _2724;
                        _2657 = (_2902 * _2786.y) + _2725;
                        _2658 = (_2902 * _2786.z) + _2726;
                        if (_2731 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2724 = _2656;
                            _2725 = _2657;
                            _2726 = _2658;
                            _2727 = _2659;
                            _2728 = _2660;
                            _2729 = _2661;
                            _2730 = _2731;
                        }
                    }
                    frontier_phi_61_pred = _2656;
                    frontier_phi_61_pred_1 = _2661;
                    frontier_phi_61_pred_2 = _2660;
                    frontier_phi_61_pred_3 = _2659;
                    frontier_phi_61_pred_4 = _2658;
                    frontier_phi_61_pred_5 = _2657;
                }
                _2456 = frontier_phi_61_pred;
                _2466 = frontier_phi_61_pred_1;
                _2464 = frontier_phi_61_pred_2;
                _2462 = frontier_phi_61_pred_3;
                _2460 = frontier_phi_61_pred_4;
                _2458 = frontier_phi_61_pred_5;
                uint _2607 = _2606 + 1u;
                if (_2607 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2600 = _2456;
                    _2601 = _2458;
                    _2602 = _2460;
                    _2603 = _2462;
                    _2604 = _2464;
                    _2605 = _2466;
                    _2606 = _2607;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
            _2463 = _2464;
            _2465 = _2466;
        }
        uvec4 _2469 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2470 = _2469.z;
        uint _2472 = (_2470 >> 8u) & 15u;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        if (((4294967295u << _2472) & _2354) == 0u)
        {
            _2568 = _2455;
            _2570 = _2457;
            _2572 = _2459;
            _2574 = _2461;
            _2576 = _2463;
            _2578 = _2465;
        }
        else
        {
            float _2593 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
            float _2594 = _2593 * _2308;
            float _2595 = _2593 * _2309;
            float _2596 = _2593 * _2310;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2472 < ((_2470 >> 12u) & 15u))
            {
                float _2569;
                float _2571;
                float _2573;
                float _2575;
                float _2577;
                float _2579;
                float _2707 = _2455;
                float _2708 = _2457;
                float _2709 = _2459;
                float _2710 = _2461;
                float _2711 = _2463;
                float _2712 = _2465;
                uint _2713 = _2472;
                uint _2722;
                bool _2723;
                for (;;)
                {
                    _2722 = texelFetch(g_lightClassification, int((((_2348 << 5u) + (_2334 << 9u)) + (_2713 << 2u)) >> 2u)).x;
                    _2723 = _2722 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2723)
                    {
                        frontier_phi_67_pred = _2710;
                        frontier_phi_67_pred_1 = _2711;
                        frontier_phi_67_pred_2 = _2712;
                        frontier_phi_67_pred_3 = _2709;
                        frontier_phi_67_pred_4 = _2708;
                        frontier_phi_67_pred_5 = _2707;
                    }
                    else
                    {
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _2920 = _2707;
                        float _2921 = _2708;
                        float _2922 = _2709;
                        float _2923 = _2710;
                        float _2924 = _2711;
                        float _2925 = _2712;
                        uint _2926 = _2722;
                        uint _2927;
                        vec4 _2952;
                        float _2953;
                        vec4 _2968;
                        vec3 _2980;
                        vec4 _2996;
                        vec4 _3011;
                        float _3057;
                        bool _3058;
                        for (;;)
                        {
                            uint _2937 = ((_2713 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2926));
                            _2927 = (_2926 + 4294967295u) & _2926;
                            uint _2939 = _2937 * 40u;
                            _2952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2939 + 3u)).x));
                            _2953 = _2952.w;
                            uint _2955 = (_2937 * 40u) + 4u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2970 = (_2937 * 40u) + 8u;
                            _2980 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x));
                            uint _2983 = (_2937 * 40u) + 16u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _2998 = (_2937 * 40u) + 20u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3013 = (_2937 * 40u) + 24u;
                            vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 3u)).x));
                            uint _3032 = (_2937 * 40u) + 28u;
                            vec4 _3045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 3u)).x));
                            _3057 = fma(_2310, _3045.z, fma(_2309, _3045.y, _3045.x * _2308)) + _3045.w;
                            _3058 = !((fma(_2310, _3026.z, fma(_2309, _3026.y, _3026.x * _2308)) + _3026.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3058)
                            {
                                float _3085 = _2952.x - _2308;
                                float _3086 = _2952.y - _2309;
                                float _3087 = _2952.z - _2310;
                                float _3088 = dot(vec3(_3085, _3086, _3087), vec3(_3085, _3086, _3087));
                                float _3091 = inversesqrt(_3088);
                                float _3092 = _3091 * _3085;
                                float _3093 = _3091 * _3086;
                                float _3094 = _3091 * _3087;
                                float _3098 = 1.0 - (_3088 / (_2953 * _2953));
                                float _4156 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3103 = sqrt(_3088) * _2968.w;
                                float _3105 = 1.39999997615814208984375 / (_3103 + 1.39999997615814208984375);
                                float _3106 = _3105 * _3105;
                                float _3109 = ((1.0 - _3106) * dot(vec3(_3092, _3093, _3094), vec3(_585, _588, _591))) + _3106;
                                float _3112 = _3103 * _3103;
                                float _3116 = (fma(_2310, _2996.z, fma(_2309, _2996.y, _2996.x * _2308)) + _2996.w) / _3057;
                                float _3117 = (fma(_2310, _3011.z, fma(_2309, _3011.y, _3011.x * _2308)) + _3011.w) / _3057;
                                float _3121 = 1.0 - dot(vec2(_3116, _3117), vec2(_3116, _3117));
                                float _4172 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                                float _3122 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3123 = _3122 * (((isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0))) * _3099) / ((_3112 * 0.699999988079071044921875) + 1.0));
                                float _3135 = exp2(log2(1.0 / ((_3112 * 3.5) + 5.0)) * 0.25);
                                float _3136 = 1.0 - _645;
                                float _3143 = sqrt(1.0 - ((1.0 - (_3136 * _3136)) * (1.0 - (_3135 * _3135))));
                                float _3144 = _3143 * _3143;
                                float _3145 = _3144 * _3144;
                                float _3146 = _3092 - _2594;
                                float _3147 = _3093 - _2595;
                                float _3148 = _3094 - _2596;
                                float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                                float _3156 = dot(vec3(_585, _588, _591), vec3((-0.0) - _2594, (-0.0) - _2595, (-0.0) - _2596));
                                float _4183 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3160 = dot(vec3(_585, _588, _591), vec3(_3152 * _3146, _3152 * _3147, _3152 * _3148));
                                float _4194 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3163 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3167 = ((_3163 * _3163) * (_3145 + (-1.0))) + 1.0;
                                float _3168 = _3105 * _3144;
                                float _3169 = _3168 * _3168;
                                float _3175 = ((1.0 - _3169) * dot(vec3(_585, _588, _591), vec3(_3092, _3093, _3094))) + _3169;
                                float _4205 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3176 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3177 = 1.0 - _3144;
                                float _3187 = (0.5 / (((_3176 * ((_3159 * _3177) + _3144)) + 9.9999999392252902907785028219223e-09) + (((_3176 * _3177) + _3144) * _3159))) * _3176;
                                float _4216 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3197 = (_3122 * _3099) * (((_3145 * 3.1415927410125732421875) * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) / ((_3167 * _3167) * ((_3112 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3197 * _2980.x;
                                frontier_phi_73_pred_1 = _3197 * _2980.y;
                                frontier_phi_73_pred_2 = _3123 * _2968.z;
                                frontier_phi_73_pred_3 = _3123 * _2968.y;
                                frontier_phi_73_pred_4 = _3123 * _2968.x;
                                frontier_phi_73_pred_5 = _3197 * _2980.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3201 = frontier_phi_73_pred;
                            _3202 = frontier_phi_73_pred_1;
                            _3206 = frontier_phi_73_pred_2;
                            _3205 = frontier_phi_73_pred_3;
                            _3204 = frontier_phi_73_pred_4;
                            _3203 = frontier_phi_73_pred_5;
                            _2910 = _3204 + _2923;
                            _2911 = _3205 + _2924;
                            _2912 = _3206 + _2925;
                            _2907 = _3201 + _2920;
                            _2908 = _3202 + _2921;
                            _2909 = _3203 + _2922;
                            if (_2927 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2927;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2910;
                        frontier_phi_67_pred_1 = _2911;
                        frontier_phi_67_pred_2 = _2912;
                        frontier_phi_67_pred_3 = _2909;
                        frontier_phi_67_pred_4 = _2908;
                        frontier_phi_67_pred_5 = _2907;
                    }
                    _2575 = frontier_phi_67_pred;
                    _2577 = frontier_phi_67_pred_1;
                    _2579 = frontier_phi_67_pred_2;
                    _2573 = frontier_phi_67_pred_3;
                    _2571 = frontier_phi_67_pred_4;
                    _2569 = frontier_phi_67_pred_5;
                    uint _2714 = _2713 + 1u;
                    if (_2714 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2707 = _2569;
                        _2708 = _2571;
                        _2709 = _2573;
                        _2710 = _2575;
                        _2711 = _2577;
                        _2712 = _2579;
                        _2713 = _2714;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2577;
                frontier_phi_55_56_ladder_1 = _2579;
                frontier_phi_55_56_ladder_2 = _2575;
                frontier_phi_55_56_ladder_3 = _2573;
                frontier_phi_55_56_ladder_4 = _2571;
                frontier_phi_55_56_ladder_5 = _2569;
            }
            else
            {
                frontier_phi_55_56_ladder = _2463;
                frontier_phi_55_56_ladder_1 = _2465;
                frontier_phi_55_56_ladder_2 = _2461;
                frontier_phi_55_56_ladder_3 = _2459;
                frontier_phi_55_56_ladder_4 = _2457;
                frontier_phi_55_56_ladder_5 = _2455;
            }
            _2568 = frontier_phi_55_56_ladder_5;
            _2570 = frontier_phi_55_56_ladder_4;
            _2572 = frontier_phi_55_56_ladder_3;
            _2574 = frontier_phi_55_56_ladder_2;
            _2576 = frontier_phi_55_56_ladder;
            _2578 = frontier_phi_55_56_ladder_1;
        }
        float _2583 = isnan(1.0) ? _629 : (isnan(_629) ? 1.0 : min(_629, 1.0));
        _2367 = (_2583 * _2574) + _1819;
        _2369 = (_2583 * _2576) + _1821;
        _2371 = (_2583 * _2578) + _1823;
        _2373 = ((_2568 * 0.039999999105930328369140625) * _2583) + _2152;
        _2375 = ((_2570 * 0.039999999105930328369140625) * _2583) + _2154;
        _2377 = ((_2572 * 0.039999999105930328369140625) * _2583) + _2156;
    }
    else
    {
        _2367 = _1819;
        _2369 = _1821;
        _2371 = _1823;
        _2373 = _2152;
        _2375 = _2154;
        _2377 = _2156;
    }
    float _4232 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _4243 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4254 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    uint _2397 = _235 + 6u;
    float _2405 = _563 / cbSceneParam._m0[86u].x;
    float _2406 = _564 / cbSceneParam._m0[86u].y;
    vec4 _2420 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2405, _2406, (log2((isnan(cbSceneParam._m0[77u].w) ? _497 : (isnan(_497) ? cbSceneParam._m0[77u].w : min(_497, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2422 = _2420.x;
    float _2423 = _2420.y;
    float _2424 = _2420.z;
    float _2425 = _2420.w;
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    if (_497 > cbSceneParam._m0[78u].w)
    {
        float _2480 = isnan(_497) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _497 : min(cbSceneParam._m0[80u].w, _497));
        float _2481 = _2480 / _497;
        float _2492 = _2481 * _548;
        float _2493 = _549 * _2481;
        float _2494 = (-0.0) - _2493;
        float _2496 = _2481 * _550;
        float _2498 = (cbSceneParam._m0[77u].w * _2494) / _2480;
        float _2499 = _2498 + cbSceneParam._m0[79u].w;
        float _2500 = cbSceneParam._m0[79u].w - _2493;
        float _2506 = sqrt(((_2492 * _2492) + (_2493 * _2493)) + (_2496 * _2496));
        float _2509 = (1.0 - (cbSceneParam._m0[77u].w / _2480)) * _2506;
        float _2514 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2516 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2669;
        if (abs((_2494 - _2498) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2669 = ((((_2499 > 0.0) ? exp2(_2514 * _2499) : (2.0 - exp2(_2516 * _2499))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2509;
        }
        else
        {
            float _2629 = 1.0 / cbSceneParam._m0[80u].x;
            float _2630 = isnan(_2500) ? _2499 : (isnan(_2499) ? _2500 : max(_2499, _2500));
            float _2631 = isnan(_2500) ? _2499 : (isnan(_2499) ? _2500 : min(_2499, _2500));
            float _2640 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : min(_2630, 0.0));
            float _2641 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : min(_2631, 0.0));
            _2669 = ((abs(_2506 / _2494) * cbSceneParam._m0[80u].y) * ((((_2640 - _2641) * 2.0) - ((exp2(_2514 * (isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0)))) - exp2(_2514 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0))))) * _2629)) - ((exp2(_2516 * _2640) - exp2(_2516 * _2641)) * _2629))) + (_2509 * cbSceneParam._m0[80u].z);
        }
        vec4 _2671 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2405, _2406, 1.0), 0.0);
        float _2680 = exp2((_2669 * (-1.44269502162933349609375)) * (1.0 - _2671.w));
        float _2681 = log2(_2680);
        float _2697 = log2(_2425);
        _2518 = (exp2(_2697 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2681 * cbSceneParam._m0[78u].x)) * _2671.x) / cbSceneParam._m0[78u].x)) + _2422;
        _2520 = (exp2(_2697 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2681 * cbSceneParam._m0[78u].y)) * _2671.y) / cbSceneParam._m0[78u].y)) + _2423;
        _2522 = (exp2(_2697 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2681 * cbSceneParam._m0[78u].z)) * _2671.z) / cbSceneParam._m0[78u].z)) + _2424;
        _2524 = _2680 * _2425;
    }
    else
    {
        _2518 = _2422;
        _2520 = _2423;
        _2522 = _2424;
        _2524 = _2425;
    }
    float _2536 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2537 = _2536 == 3.0;
    float _2538 = log2(_2524);
    float _2545 = exp2(_2538 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2367 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _629))) + ((_2373 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1434)) * cbPerFrame._m0[3u].x));
    float _2546 = exp2(_2538 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2369 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _629))) + ((_2375 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1434)) * cbPerFrame._m0[3u].x));
    float _2547 = exp2(_2538 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2371 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _629))) + ((_2377 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1434)) * cbPerFrame._m0[3u].x));
    float _2556 = (_2536 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2556 * (_2537 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2518)));
    SV_Target.y = _2556 * (_2537 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2520)));
    SV_Target.z = _2556 * (_2537 ? _2547 : (_2547 + (cbSceneParam._m0[72u].w * _2522)));
    SV_Target.w = cbInstanceData._m0[_2397].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2397].w;
}


