#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1238;
float _3620;
float _3621;
float _3622;
float _3623;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _223 = _222 * _214;
    float _224 = _222 * _215;
    float _225 = _222 * _216;
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = _229 * NORMAL.x;
    float _231 = _229 * NORMAL.y;
    float _232 = _229 * NORMAL.z;
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = _236 * TANGENT.x;
    float _238 = _236 * TANGENT.y;
    float _239 = _236 * TANGENT.z;
    uint _242 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _242 + 1u;
    uint _252 = _242 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _360 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _360) * cbMtdParam._m0[24u].x) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3632 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _385 = (_378 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _386 = (_378 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _387 = (_378 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _406 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _470 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _472 = _470.x;
    float _473 = _470.y;
    float _474 = _470.z;
    float _483 = ((_453.z - _474) * _378) + _474;
    float _486 = ((((_453.x - _472) * _378) + _472) * 2.0) + (-1.0);
    float _487 = ((((_453.y - _473) * _378) + _473) * 2.0) + (-1.0);
    float _488 = dot(vec2(_486, _487), vec2(_486, _487));
    float _3643 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _493 = sqrt(1.0 - (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))));
    vec4 _513 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _525 = (_486 + ((((_426.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_513.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _526 = (_487 + ((((_426.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_513.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _529 = fma(_493, _230, fma(_526, _237, _525 * _223));
    float _532 = fma(_493, _231, fma(_526, _238, _525 * _224));
    float _535 = fma(_493, _232, fma(_526, _239, _525 * _225));
    float _539 = inversesqrt(dot(vec3(_529, _532, _535), vec3(_529, _532, _535)));
    vec4 _568 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _570 = _568.x;
    float _571 = 1.0 - _570;
    float _575 = ((_570 - _571) * cbMtdParam._m0[24u].z) + _571;
    float _577 = (cbMtdParam._m0[19u].x + dot(vec4(_539 * _529, _539 * _532, _539 * _535, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_575 * cbMtdParam._m0[21u].z);
    float _3654 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _593 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_575 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3665 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _594 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _598 = ((_578 * ((_406.x * cbMtdParam._m0[18u].x) - _385)) * _594) + _385;
    float _599 = ((_578 * ((_406.y * cbMtdParam._m0[18u].y) - _386)) * _594) + _386;
    float _600 = ((_578 * ((_406.z * cbMtdParam._m0[18u].z) - _387)) * _594) + _387;
    float _605 = (((_426.z - _483) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _483;
    float _609 = ((_513.z - _605) * cbMtdParam._m0[19u].w) + _605;
    vec4 _622 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _629 = (_622.x * 2.0) + (-1.0);
    float _630 = (_622.y * 2.0) + (-1.0);
    float _631 = dot(vec2(_629, _630), vec2(_629, _630));
    float _3676 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _640 = (((_622.z - _609) * _578) * _594) + _609;
    float _655 = (((cbMtdParam._m0[21u].x * _525) + ((_629 - _525) * _578)) * _594) + _525;
    float _656 = (((cbMtdParam._m0[21u].x * _526) + ((_630 - _526) * _578)) * _594) + _526;
    float _657 = (((sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) - _493) * _578) * _594) + _493;
    float _662 = cbMtdParam._m0[22u].x + _513.w;
    float _665 = fma(_657, _230, fma(_656, _237, _655 * _223));
    float _668 = fma(_657, _231, fma(_656, _238, _655 * _224));
    float _671 = fma(_657, _232, fma(_656, _239, _655 * _225));
    float _675 = inversesqrt(dot(vec3(_665, _668, _671), vec3(_665, _668, _671)));
    float _676 = _675 * _665;
    float _677 = _675 * _668;
    float _678 = _675 * _671;
    float _3687 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _679 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3709 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3720 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3731 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _697 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _749 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _739);
    float _750 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _739);
    float _751 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _739);
    float _755 = inversesqrt(dot(vec3(_749, _750, _751), vec3(_749, _750, _751)));
    float _756 = _749 * _755;
    float _757 = _750 * _755;
    float _758 = _751 * _755;
    vec4 _763 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _765 = _763.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _919 = sqrt(((_749 * _749) + (_750 * _750)) + (_751 * _751));
        float _925 = (cbMatDynParam._m0[5u].x * _919) + cbMatDynParam._m0[5u].y;
        float _3742 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _930 = (cbMatDynParam._m0[5u].z * _919) + cbMatDynParam._m0[5u].w;
        float _3753 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) - _926)) + _926) < ((_765 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _776 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _777 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _795 = fma(_678, cbSceneParam._m0[5u].z, fma(_677, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _676));
    float _798 = fma(_678, cbSceneParam._m0[6u].z, fma(_677, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _676));
    float _801 = fma(_678, cbSceneParam._m0[7u].z, fma(_677, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _676));
    uint _814 = _242 + 9u;
    uint _815 = _814 + uint(cbMatDynParam._m0[0u].w);
    float _821 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_815].x;
    float _822 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_815].y;
    float _823 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_815].z;
    float _3764 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _824 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    vec4 _835 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _776, cbSceneParam._m0[86u].y * _777));
    float _839 = ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * TEXCOORD_5.w) * _835.x;
    float _840 = dot(vec3(_676, _677, _678), vec3(_756, _757, _758));
    float _843 = _840 * 2.0;
    float _847 = (_843 * _676) - _756;
    float _848 = (_843 * _677) - _757;
    float _849 = (_843 * _678) - _758;
    float _853 = abs(dot(vec3(_756, _757, _758), vec3(_676, _677, _678)));
    float _3797 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _855 = sqrt(_679);
    float _868 = exp2((_855 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_855 * 3.0));
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1237;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _962 = fma(_908, cbModelParam._m0[26u].z, fma(_904, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _900));
        float _966 = fma(_908, cbModelParam._m0[27u].z, fma(_904, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _900));
        float _970 = fma(_908, cbModelParam._m0[28u].z, fma(_904, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _900));
        float _995 = _900 + _676;
        float _996 = _904 + _677;
        float _997 = _908 + _678;
        float _1007 = fma(_997, cbModelParam._m0[26u].z, fma(_996, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995)) - _962;
        float _1008 = fma(_997, cbModelParam._m0[27u].z, fma(_996, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995)) - _966;
        float _1009 = fma(_997, cbModelParam._m0[28u].z, fma(_996, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995)) - _970;
        float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
        float _1026 = ((_1013 * _1007) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_962 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1027 = ((_1013 * _1008) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_966 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1028 = ((_1013 * _1009) / cbModelParam._m0[34u].z) + ((((((_970 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1026, _1027, _1028), 0.0);
        float _1065 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1031.x + (-0.5));
        float _1067 = _1065 * (_1031.y + (-0.5));
        float _1068 = _1065 * (_1031.z + (-0.5));
        float _1075 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1038.x + (-0.5));
        float _1077 = _1075 * (_1038.y + (-0.5));
        float _1078 = _1075 * (_1038.z + (-0.5));
        float _1085 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1045.x + (-0.5));
        float _1087 = _1085 * (_1045.y + (-0.5));
        float _1088 = _1085 * (_1045.z + (-0.5));
        float _1095 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1052.x + (-0.5));
        float _1097 = _1095 * (_1052.y + (-0.5));
        float _1098 = _1095 * (_1052.z + (-0.5));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = _1066 * 0.5;
        float _1103 = _1076 * 0.5;
        float _1104 = _1086 * 0.5;
        float _1105 = dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104));
        float _1110 = (_1105 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1105);
        float _1119 = (dot(vec3(_676, _677, _678), vec3(_1110 * _1102, _1110 * _1103, _1110 * _1104)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1129 = sqrt(((_1103 * _1103) + (_1102 * _1102)) + (_1104 * _1104)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3845 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1131 + 1.0))) + _1136) * _1099;
        float _1146 = _1067 * 0.5;
        float _1147 = _1077 * 0.5;
        float _1148 = _1087 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_676, _677, _678), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1100 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3878 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1173 + 1.0))) + _1178) * _1100;
        float _1188 = _1068 * 0.5;
        float _1189 = _1078 * 0.5;
        float _1190 = _1088 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_676, _677, _678), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3911 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1215 + 1.0))) + _1220) * _1101;
        _1237 = _1068;
        _1239 = _1067;
        _1240 = _1066;
        _1241 = _1078;
        _1242 = _1077;
        _1243 = _1076;
        _1244 = _1088;
        _1245 = _1087;
        _1246 = _1086;
        _1247 = _1101;
        _1248 = _1100;
        _1249 = _1099;
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1251 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1252 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
    }
    else
    {
        _1237 = _1238;
        _1239 = _1238;
        _1240 = _1238;
        _1241 = _1238;
        _1242 = _1238;
        _1243 = _1238;
        _1244 = _1238;
        _1245 = _1238;
        _1246 = _1238;
        _1247 = _1238;
        _1248 = _1238;
        _1249 = _1238;
        _1250 = 0.0;
        _1251 = 0.0;
        _1252 = 0.0;
    }
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1280 = fma(_908, cbModelParam._m0[30u].z, fma(_904, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _900));
        float _1284 = fma(_908, cbModelParam._m0[31u].z, fma(_904, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _900));
        float _1288 = fma(_908, cbModelParam._m0[32u].z, fma(_904, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _900));
        float _1311 = _900 + _676;
        float _1312 = _904 + _677;
        float _1313 = _908 + _678;
        float _1323 = fma(_1313, cbModelParam._m0[30u].z, fma(_1312, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1311)) - _1280;
        float _1324 = fma(_1313, cbModelParam._m0[31u].z, fma(_1312, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1311)) - _1284;
        float _1325 = fma(_1313, cbModelParam._m0[32u].z, fma(_1312, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1311)) - _1288;
        float _1329 = inversesqrt(dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325)));
        float _1342 = ((_1329 * _1323) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1280 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1343 = ((_1329 * _1324) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1284 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1344 = ((_1329 * _1325) / cbModelParam._m0[35u].z) + ((((((_1288 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1342, _1343, _1344), 0.0);
        float _1379 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1346.x + (-0.5));
        float _1381 = _1379 * (_1346.y + (-0.5));
        float _1382 = _1379 * (_1346.z + (-0.5));
        float _1389 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1353.x + (-0.5));
        float _1391 = _1389 * (_1353.y + (-0.5));
        float _1392 = _1389 * (_1353.z + (-0.5));
        float _1399 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1360.x + (-0.5));
        float _1401 = _1399 * (_1360.y + (-0.5));
        float _1402 = _1399 * (_1360.z + (-0.5));
        float _1409 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1367.x + (-0.5));
        float _1411 = _1409 * (_1367.y + (-0.5));
        float _1412 = _1409 * (_1367.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1432 = (dot(vec3(_676, _677, _678), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1441 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1443 = _1442 * 2.0;
        float _1447 = (1.0 - _1442) / (_1442 + 1.0);
        float _3974 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1457 = ((((1.0 - _1448) * (_1443 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1443 + 1.0))) + _1448) * _1413;
        float _1458 = _1381 * 0.5;
        float _1459 = _1391 * 0.5;
        float _1460 = _1401 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_676, _677, _678), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4007 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1485 + 1.0))) + _1490) * _1414;
        float _1500 = _1382 * 0.5;
        float _1501 = _1392 * 0.5;
        float _1502 = _1402 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_676, _677, _678), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4040 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1527 + 1.0))) + _1532) * _1415;
        _1549 = _1382;
        _1550 = _1381;
        _1551 = _1380;
        _1552 = _1392;
        _1553 = _1391;
        _1554 = _1390;
        _1555 = _1402;
        _1556 = _1401;
        _1557 = _1400;
        _1558 = _1415;
        _1559 = _1414;
        _1560 = _1413;
        _1561 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)));
        _1562 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1563 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
    }
    else
    {
        _1549 = _1238;
        _1550 = _1238;
        _1551 = _1238;
        _1552 = _1238;
        _1553 = _1238;
        _1554 = _1238;
        _1555 = _1238;
        _1556 = _1238;
        _1557 = _1238;
        _1558 = _1238;
        _1559 = _1238;
        _1560 = _1238;
        _1561 = 0.0;
        _1562 = 0.0;
        _1563 = 0.0;
    }
    float _1573 = (cbModelParam._m0[1u].x * (_1561 - _1250)) + _1250;
    float _1574 = (cbModelParam._m0[1u].x * (_1562 - _1251)) + _1251;
    float _1575 = (cbModelParam._m0[1u].x * (_1563 - _1252)) + _1252;
    float _1596 = fma(_1575, cbSceneParam._m0[89u].z, fma(_1574, cbSceneParam._m0[89u].y, _1573 * cbSceneParam._m0[89u].x));
    float _1599 = fma(_1575, cbSceneParam._m0[90u].z, fma(_1574, cbSceneParam._m0[90u].y, _1573 * cbSceneParam._m0[90u].x));
    float _1602 = fma(_1575, cbSceneParam._m0[91u].z, fma(_1574, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1573));
    float _1617 = _847 * 0.5;
    float _1618 = _848 * 0.5;
    float _1619 = _849 * 0.5;
    float _1620 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1551, _1554, _1557, _1560));
    float _1623 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1550, _1553, _1556, _1559));
    float _1626 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1549, _1552, _1555, _1558));
    float _1660;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1633 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1237, _1241, _1244, _1247));
        float _1637 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1239, _1242, _1245, _1248));
        float _1641 = dot(vec4(_1617, _1618, _1619, 1.0), vec4(_1240, _1243, _1246, _1249));
        float _1648 = dot(vec4(cbModelParam._m0[39u]), vec4(_1617, _1618, _1619, 1.0));
        _1660 = dot(vec3(isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1648) ? 0.0 : (isnan(0.0) ? _1648 : max(0.0, _1648))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1660 = 1.0;
    }
    float _1671;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1662 = dot(vec4(cbModelParam._m0[40u]), vec4(_1617, _1618, _1619, 1.0));
        _1671 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1662) ? 0.0 : (isnan(0.0) ? _1662 : max(0.0, _1662))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1671 = 1.0;
    }
    float _1675 = (_1671 * cbModelParam._m0[1u].x) + (_1660 * (1.0 - cbModelParam._m0[1u].x));
    float _1685 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _679);
    float _1686 = isnan(_1685) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1685 : min(cbModelParam._m0[25u].z, _1685));
    float _1766;
    float _1768;
    float _1770;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1733 = fma(_908, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900)) + cbModelParam._m0[13u].w;
        float _1737 = fma(_908, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900)) + cbModelParam._m0[14u].w;
        float _1741 = fma(_908, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900)) + cbModelParam._m0[15u].w;
        float _1744 = fma(_849, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _847));
        float _1747 = fma(_849, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _847));
        float _1750 = fma(_849, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _847));
        float _1778;
        if (_1744 > 0.0)
        {
            _1778 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1778 = frontier_phi_17_15_ladder;
        }
        float _1999;
        if (_1747 > 0.0)
        {
            _1999 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1999 = frontier_phi_26_22_ladder;
        }
        float _2245;
        if (_1750 > 0.0)
        {
            _2245 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2245 = frontier_phi_38_33_ladder;
        }
        float _2247 = isnan(_1999) ? _1778 : (isnan(_1778) ? _1999 : min(_1778, _1999));
        float _2248 = isnan(_2245) ? _2247 : (isnan(_2247) ? _2245 : min(_2247, _2245));
        float _2252 = (_2248 * _1744) + _1733;
        float _2253 = (_2248 * _1747) + _1737;
        float _2254 = (_2248 * _1750) + _1741;
        float _2255 = _2248 * 9.9999997473787516355514526367188e-05;
        float _2257 = (-1.0) - _2255;
        float _2259 = _2255 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2254 > _2259) || ((_2254 < _2257) || ((_2253 > _2259) || ((_2253 < _2257) || ((_2252 < _2257) || (_2252 > _2259))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2254, cbModelParam._m0[9u].z, fma(_2253, cbModelParam._m0[9u].y, _2252 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2254, cbModelParam._m0[10u].z, fma(_2253, cbModelParam._m0[10u].y, _2252 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2254, cbModelParam._m0[11u].z, fma(_2253, cbModelParam._m0[11u].y, _2252 * cbModelParam._m0[11u].x))), _1686);
            frontier_phi_16_38_ladder = _2378.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2378.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2378.x * cbModelParam._m0[1u].y;
        }
        _1766 = frontier_phi_16_38_ladder_2;
        _1768 = frontier_phi_16_38_ladder_1;
        _1770 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1754 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_847, _848, _849), _1686);
        _1766 = _1754.x * cbModelParam._m0[1u].y;
        _1768 = _1754.y * cbModelParam._m0[1u].y;
        _1770 = _1754.z * cbModelParam._m0[1u].y;
    }
    float _1774 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _679);
    float _1775 = isnan(_1774) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1774 : min(cbModelParam._m0[25u].w, _1774));
    float _1864;
    float _1866;
    float _1868;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1828 = fma(_908, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900)) + cbModelParam._m0[21u].w;
        float _1832 = fma(_908, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900)) + cbModelParam._m0[22u].w;
        float _1836 = fma(_908, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900)) + cbModelParam._m0[23u].w;
        float _1839 = fma(_849, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _847));
        float _1842 = fma(_849, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _847));
        float _1845 = fma(_849, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _847));
        float _2004;
        if (_1839 > 0.0)
        {
            _2004 = abs((1.0 - _1828) / _1839);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1828 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2004 = frontier_phi_28_24_ladder;
        }
        float _2272;
        if (_1842 > 0.0)
        {
            _2272 = abs((1.0 - _1832) / _1842);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1832 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2272 = frontier_phi_40_35_ladder;
        }
        float _2477;
        if (_1845 > 0.0)
        {
            _2477 = abs((1.0 - _1836) / _1845);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1836 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2477 = frontier_phi_49_46_ladder;
        }
        float _2479 = isnan(_2272) ? _2004 : (isnan(_2004) ? _2272 : min(_2004, _2272));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1839) + _1828;
        float _2485 = (_2480 * _1842) + _1832;
        float _2486 = (_2480 * _1845) + _1836;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2487;
        float _2490 = _2487 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2486 > _2490) || ((_2486 < _2488) || ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 < _2488) || (_2484 > _2490))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2486, cbModelParam._m0[17u].z, fma(_2485, cbModelParam._m0[17u].y, _2484 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2486, cbModelParam._m0[18u].z, fma(_2485, cbModelParam._m0[18u].y, _2484 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2486, cbModelParam._m0[19u].z, fma(_2485, cbModelParam._m0[19u].y, _2484 * cbModelParam._m0[19u].x))), _1775);
            frontier_phi_25_49_ladder = _2685.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2685.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2685.x * cbModelParam._m0[1u].z;
        }
        _1864 = frontier_phi_25_49_ladder_2;
        _1866 = frontier_phi_25_49_ladder_1;
        _1868 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_847, _848, _849), _1775);
        _1864 = _1848.x * cbModelParam._m0[1u].z;
        _1866 = _1848.y * cbModelParam._m0[1u].z;
        _1868 = _1848.z * cbModelParam._m0[1u].z;
    }
    float _1880 = ((((1.0 - _868) * ((_855 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_868 * _855)) * _839;
    float _1881 = _1880 * ((cbModelParam._m0[1u].w * (_1864 - _1766)) + _1766);
    float _1882 = _1880 * ((cbModelParam._m0[1u].w * (_1866 - _1768)) + _1768);
    float _1883 = _1880 * ((cbModelParam._m0[1u].w * (_1868 - _1770)) + _1770);
    float _1886 = fma(_1883, cbSceneParam._m0[89u].z, fma(_1882, cbSceneParam._m0[89u].y, _1881 * cbSceneParam._m0[89u].x));
    float _1889 = fma(_1883, cbSceneParam._m0[90u].z, fma(_1882, cbSceneParam._m0[90u].y, _1881 * cbSceneParam._m0[90u].x));
    float _1892 = fma(_1883, cbSceneParam._m0[91u].z, fma(_1882, cbSceneParam._m0[91u].y, _1881 * cbSceneParam._m0[91u].x));
    vec4 _1900 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_776, _777));
    float _1902 = _1900.w;
    float _1914 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1902);
    float _1915 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1902);
    float _1916 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1902);
    uvec4 _1920 = floatBitsToUint(cbInstanceData._m0[_242 + 5u]);
    uint _1922 = _1920.x * 14u;
    uint _1923 = _1922 + 13u;
    float _1930 = _839 + (-1.0);
    float _1935 = (cbLight._m0[_1923].x * _1930) + 1.0;
    float _1936 = (cbLight._m0[_1923].y * _1930) + 1.0;
    float _1937 = (cbLight._m0[_1923].z * _1930) + 1.0;
    float _1938 = (cbLight._m0[_1923].w * _1930) + 1.0;
    uint _1939 = _1922 + 5u;
    float _1945 = isnan(1.0) ? _1936 : (isnan(_1936) ? 1.0 : min(_1936, 1.0));
    uint _1949 = _1922 + 4u;
    float _1958 = isnan(1.0) ? _1935 : (isnan(_1935) ? 1.0 : min(_1935, 1.0));
    uint _1962 = _1922 | 1u;
    float _1973 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_676, _677, _678));
    float _1976 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_676, _677, _678));
    float _4176 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _4187 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1981 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * 0.3183098733425140380859375;
    float _1983 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * 0.3183098733425140380859375;
    float _1990 = ((cbLight._m0[_1939].x * _1945) * _1983) + (((cbLight._m0[_1949].x * _1914) * _1958) * _1981);
    float _1991 = ((_1945 * cbLight._m0[_1939].y) * _1983) + (((cbLight._m0[_1949].y * _1915) * _1958) * _1981);
    float _1992 = ((_1945 * cbLight._m0[_1939].z) * _1983) + (((cbLight._m0[_1949].z * _1916) * _1958) * _1981);
    uvec4 _1996 = floatBitsToUint(cbLight._m0[_1922 + 12u]);
    bool _1998 = _1996.x == 0u;
    float _2009;
    float _2011;
    float _2013;
    if (_1998)
    {
        _2009 = _1990;
        _2011 = _1991;
        _2013 = _1992;
    }
    else
    {
        uint _2017 = _1922 + 6u;
        float _2033 = (dot(vec3(cbLight._m0[_1922 + 2u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2034 = _2033 * _2033;
        float _4198 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2035 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2036 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2009 = (((cbLight._m0[_2017].x * 0.3183098733425140380859375) * _2035) * _2036) + _1990;
        _2011 = (((cbLight._m0[_2017].y * 0.3183098733425140380859375) * _2035) * _2036) + _1991;
        _2013 = (((cbLight._m0[_2017].z * 0.3183098733425140380859375) * _2035) * _2036) + _1992;
    }
    bool _2016 = _1996.y == 0u;
    float _2054;
    float _2056;
    float _2058;
    if (_2016)
    {
        _2054 = _2009;
        _2056 = _2011;
        _2058 = _2013;
    }
    else
    {
        uint _2216 = _1922 + 7u;
        float _2232 = (dot(vec3(cbLight._m0[_1922 + 3u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2233 = _2232 * _2232;
        float _4214 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
        float _2234 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _2235 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2054 = (((cbLight._m0[_2216].x * 0.3183098733425140380859375) * _2234) * _2235) + _2009;
        _2056 = (((cbLight._m0[_2216].y * 0.3183098733425140380859375) * _2234) * _2235) + _2011;
        _2058 = (((cbLight._m0[_2216].z * 0.3183098733425140380859375) * _2234) * _2235) + _2013;
    }
    uint _2061 = _1922 + 8u;
    float _2074 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _679) * 0.949999988079071044921875);
    float _2075 = _2074 * _2074;
    float _2076 = cbLight._m0[_1922].x + _756;
    float _2077 = cbLight._m0[_1922].y + _757;
    float _2078 = cbLight._m0[_1922].z + _758;
    float _2082 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
    float _2083 = _2082 * _2076;
    float _2084 = _2082 * _2077;
    float _2085 = _2082 * _2078;
    float _2086 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1922].xyz));
    float _4230 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2089 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _4241 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _2090 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2091 = dot(vec3(_676, _677, _678), vec3(_2083, _2084, _2085));
    float _4252 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2095 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_2083, _2084, _2085));
    float _4263 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2099 = _2075 * _2075;
    float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
    float _2114 = (exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2115 = 1.0 - _2075;
    float _2126 = (0.5 / (((_2090 * ((_2089 * _2115) + _2075)) + 9.9999999392252902907785028219223e-09) + (((_2090 * _2115) + _2075) * _2089))) * _2089;
    float _4274 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2128 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
    uint _2142 = _1922 + 9u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _679) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_1962].x + _756;
    float _2156 = cbLight._m0[_1962].y + _757;
    float _2157 = cbLight._m0[_1962].z + _758;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1962].xyz));
    float _4285 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2169 = dot(vec3(_676, _677, _678), vec3(_2162, _2163, _2164));
    float _4296 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2173 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2162, _2163, _2164));
    float _4307 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2177 = _2154 * _2154;
    float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
    float _2190 = (exp2(log2(1.0 - (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2191 = 1.0 - _2154;
    float _2201 = (0.5 / (((_2090 * ((_2168 * _2191) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2090 * _2191) + _2154) * _2168))) * _2168;
    float _4318 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2203 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
    float _2213 = (((_2190 * cbLight._m0[_2142].x) * _2203) * _1945) + ((((cbLight._m0[_2061].x * _1914) * _2114) * _2128) * _1958);
    float _2214 = (((_2190 * cbLight._m0[_2142].y) * _2203) * _1945) + ((((cbLight._m0[_2061].y * _1915) * _2114) * _2128) * _1958);
    float _2215 = (((_2190 * cbLight._m0[_2142].z) * _2203) * _1945) + ((((cbLight._m0[_2061].z * _1916) * _2114) * _2128) * _1958);
    float _2277;
    float _2279;
    float _2281;
    if (_1998)
    {
        _2277 = _2213;
        _2279 = _2214;
        _2281 = _2215;
    }
    else
    {
        uint _2283 = _1922 + 2u;
        uint _2287 = _1922 + 10u;
        float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2283].w)) * _679) * 0.949999988079071044921875);
        float _2302 = _2301 * _2301;
        float _2303 = cbLight._m0[_2283].x + _756;
        float _2304 = cbLight._m0[_2283].y + _757;
        float _2305 = cbLight._m0[_2283].z + _758;
        float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
        float _2310 = _2309 * _2303;
        float _2311 = _2309 * _2304;
        float _2312 = _2309 * _2305;
        float _2313 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2283].xyz));
        float _4329 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2316 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2317 = dot(vec3(_676, _677, _678), vec3(_2310, _2311, _2312));
        float _4340 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2320 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2321 = dot(vec3(cbLight._m0[_2283].xyz), vec3(_2310, _2311, _2312));
        float _4351 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2325 = _2302 * _2302;
        float _2329 = ((_2320 * _2320) * (_2325 + (-1.0))) + 1.0;
        float _2338 = (exp2(log2(1.0 - (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2339 = 1.0 - _2302;
        float _2349 = (0.5 / (((_2090 * ((_2316 * _2339) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2090 * _2339) + _2302) * _2316))) * _2316;
        float _4362 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2351 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_2325 / ((_2329 * _2329) * 3.141590118408203125));
        float _2352 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
        _2277 = (((_2338 * cbLight._m0[_2287].x) * _2351) * _2352) + _2213;
        _2279 = (((_2338 * cbLight._m0[_2287].y) * _2351) * _2352) + _2214;
        _2281 = (((_2338 * cbLight._m0[_2287].z) * _2351) * _2352) + _2215;
    }
    float _2387;
    float _2389;
    float _2391;
    if (_2016)
    {
        _2387 = _2277;
        _2389 = _2279;
        _2391 = _2281;
    }
    else
    {
        uint _2398 = _1922 + 3u;
        uint _2402 = _1922 + 11u;
        float _2416 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2398].w)) * _679) * 0.949999988079071044921875);
        float _2417 = _2416 * _2416;
        float _2418 = cbLight._m0[_2398].x + _756;
        float _2419 = cbLight._m0[_2398].y + _757;
        float _2420 = cbLight._m0[_2398].z + _758;
        float _2424 = inversesqrt(dot(vec3(_2418, _2419, _2420), vec3(_2418, _2419, _2420)));
        float _2425 = _2424 * _2418;
        float _2426 = _2424 * _2419;
        float _2427 = _2424 * _2420;
        float _2428 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2398].xyz));
        float _4378 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2431 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2432 = dot(vec3(_676, _677, _678), vec3(_2425, _2426, _2427));
        float _4389 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2435 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _2436 = dot(vec3(cbLight._m0[_2398].xyz), vec3(_2425, _2426, _2427));
        float _4400 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2440 = _2417 * _2417;
        float _2444 = ((_2435 * _2435) * (_2440 + (-1.0))) + 1.0;
        float _2453 = (exp2(log2(1.0 - (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2454 = 1.0 - _2417;
        float _2464 = (0.5 / (((_2090 * ((_2431 * _2454) + _2417)) + 9.9999999392252902907785028219223e-09) + (((_2090 * _2454) + _2417) * _2431))) * _2431;
        float _4411 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2466 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_2440 / ((_2444 * _2444) * 3.141590118408203125));
        float _2467 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
        _2387 = (((_2453 * cbLight._m0[_2402].x) * _2466) * _2467) + _2277;
        _2389 = (((_2453 * cbLight._m0[_2402].y) * _2466) * _2467) + _2279;
        _2391 = (((_2453 * cbLight._m0[_2402].z) * _2466) * _2467) + _2281;
    }
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    float _2612;
    if (_1920.y == 0u)
    {
        float _2542 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2543 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2542;
        float _2544 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2542;
        float _2545 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2542;
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.x;
        uint _2569 = uint((float(_2557.y) * floor(float(uint(cbSceneParam._m0[85u].y * _777) / _2558))) + floor(float(uint(cbSceneParam._m0[85u].x * _776) / _2558)));
        float _2579 = (log2(_2545 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2580 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        uint _2583 = uint(isnan(14.0) ? _2580 : (isnan(_2580) ? 14.0 : min(_2580, 14.0)));
        uvec4 _2588 = texelFetch(g_lightClusterGridBuffer, int(((_2583 << 2u) + (_2569 << 6u)) >> 2u));
        uint _2589 = _2588.x;
        uint _2590 = _2557.z;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        if (((((1u << ((_2590 >> 4u) & 15u)) + 4294967295u) & _2589) == 0u) || ((_2590 & 240u) == 0u))
        {
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
        }
        else
        {
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2843 = 0.0;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            uint _2849 = 0u;
            uint _2858;
            bool _2859;
            for (;;)
            {
                _2858 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2849 << 2u)) >> 2u)).x;
                _2859 = _2858 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2859)
                {
                    frontier_phi_66_pred = _2843;
                    frontier_phi_66_pred_1 = _2848;
                    frontier_phi_66_pred_2 = _2847;
                    frontier_phi_66_pred_3 = _2846;
                    frontier_phi_66_pred_4 = _2845;
                    frontier_phi_66_pred_5 = _2844;
                }
                else
                {
                    float _2988;
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    uint _2994;
                    _2988 = _2843;
                    _2989 = _2844;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2858;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    for (;;)
                    {
                        uint _2998 = uint(findLSB(_2994)) + (_2849 << 5u);
                        uint _2995 = (_2994 + 4294967295u) & _2994;
                        uint _3000 = _2998 * 48u;
                        vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 3u)).x));
                        uint _3020 = (_2998 * 48u) + 4u;
                        vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 3u)).x));
                        uint _3039 = (_2998 * 48u) + 8u;
                        vec3 _3050 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3039)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3039 + 2u)).x));
                        float _3054 = _3014.x - _2543;
                        float _3055 = _3014.y - _2544;
                        float _3056 = _3014.z - _2545;
                        float _3057 = dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056));
                        float _3060 = inversesqrt(_3057);
                        float _3061 = _3060 * _3054;
                        float _3062 = _3060 * _3055;
                        float _3063 = _3060 * _3056;
                        float _3064 = dot(vec3(_795, _798, _801), vec3(_3061, _3062, _3063));
                        float _3069 = 1.0 - (_3057 * _3014.w);
                        float _4437 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3070 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3071 = sqrt(_3057) * _3033.w;
                        float _3074 = 1.39999997615814208984375 / (_3071 + 1.39999997615814208984375);
                        float _3075 = _3074 * _3074;
                        float _3078 = ((1.0 - _3075) * _3064) + _3075;
                        float _3081 = _3071 * _3071;
                        float _3085 = ((isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0))) * _3070) / ((_3081 * 0.699999988079071044921875) + 1.0);
                        float _3089 = (-0.0) - _2543;
                        float _3090 = (-0.0) - _2544;
                        float _3091 = (-0.0) - _2545;
                        float _3095 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
                        float _3096 = _3095 * _3089;
                        float _3097 = _3095 * _3090;
                        float _3098 = _3095 * _3091;
                        float _3106 = exp2(log2(1.0 / ((_3081 * 3.5) + 5.0)) * 0.25);
                        float _3107 = 1.0 - _855;
                        float _3114 = sqrt(1.0 - ((1.0 - (_3107 * _3107)) * (1.0 - (_3106 * _3106))));
                        float _3115 = _3114 * _3114;
                        float _3116 = _3115 * _3115;
                        float _3117 = _3096 + _3061;
                        float _3118 = _3097 + _3062;
                        float _3119 = _3098 + _3063;
                        float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                        float _3127 = dot(vec3(_795, _798, _801), vec3(_3096, _3097, _3098));
                        float _4453 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                        float _3130 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
                        float _3131 = dot(vec3(_795, _798, _801), vec3(_3123 * _3117, _3123 * _3118, _3123 * _3119));
                        float _4464 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                        float _3134 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3138 = ((_3134 * _3134) * (_3116 + (-1.0))) + 1.0;
                        float _3139 = _3074 * _3115;
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3064) + _3140;
                        float _4475 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3144 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3145 = 1.0 - _3115;
                        float _3155 = (0.5 / (((_3144 * ((_3130 * _3145) + _3115)) + 9.9999999392252902907785028219223e-09) + (((_3144 * _3145) + _3115) * _3130))) * _3144;
                        float _4486 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3166 = (((_3116 * 3.1415927410125732421875) * (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) / ((_3138 * _3138) * ((_3081 * 2.1991131305694580078125) + 3.141590118408203125))) * _3070;
                        _2918 = (_3085 * _3033.x) + _2991;
                        _2919 = (_3085 * _3033.y) + _2992;
                        _2920 = (_3085 * _3033.z) + _2993;
                        _2915 = (_3166 * _3050.x) + _2988;
                        _2916 = (_3166 * _3050.y) + _2989;
                        _2917 = (_3166 * _3050.z) + _2990;
                        if (_2995 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2988 = _2915;
                            _2989 = _2916;
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2920;
                            _2994 = _2995;
                        }
                    }
                    frontier_phi_66_pred = _2915;
                    frontier_phi_66_pred_1 = _2920;
                    frontier_phi_66_pred_2 = _2919;
                    frontier_phi_66_pred_3 = _2918;
                    frontier_phi_66_pred_4 = _2917;
                    frontier_phi_66_pred_5 = _2916;
                }
                _2691 = frontier_phi_66_pred;
                _2701 = frontier_phi_66_pred_1;
                _2699 = frontier_phi_66_pred_2;
                _2697 = frontier_phi_66_pred_3;
                _2695 = frontier_phi_66_pred_4;
                _2693 = frontier_phi_66_pred_5;
                uint _2850 = _2849 + 1u;
                if (_2850 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2843 = _2691;
                    _2844 = _2693;
                    _2845 = _2695;
                    _2846 = _2697;
                    _2847 = _2699;
                    _2848 = _2701;
                    _2849 = _2850;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
        }
        uvec4 _2704 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2705 = _2704.z;
        uint _2707 = (_2705 >> 8u) & 15u;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        if (((4294967295u << _2707) & _2589) == 0u)
        {
            _2811 = _2690;
            _2813 = _2692;
            _2815 = _2694;
            _2817 = _2696;
            _2819 = _2698;
            _2821 = _2700;
        }
        else
        {
            float _2836 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
            float _2837 = _2836 * _2543;
            float _2838 = _2836 * _2544;
            float _2839 = _2836 * _2545;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2707 < ((_2705 >> 12u) & 15u))
            {
                float _2812;
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2822;
                float _2971 = _2690;
                float _2972 = _2692;
                float _2973 = _2694;
                float _2974 = _2696;
                float _2975 = _2698;
                float _2976 = _2700;
                uint _2977 = _2707;
                uint _2986;
                bool _2987;
                for (;;)
                {
                    _2986 = texelFetch(g_lightClassification, int((((_2583 << 5u) + (_2569 << 9u)) + (_2977 << 2u)) >> 2u)).x;
                    _2987 = _2986 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2987)
                    {
                        frontier_phi_77_pred = _2976;
                        frontier_phi_77_pred_1 = _2975;
                        frontier_phi_77_pred_2 = _2974;
                        frontier_phi_77_pred_3 = _2973;
                        frontier_phi_77_pred_4 = _2972;
                        frontier_phi_77_pred_5 = _2971;
                    }
                    else
                    {
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3193 = _2971;
                        float _3194 = _2972;
                        float _3195 = _2973;
                        float _3196 = _2974;
                        float _3197 = _2975;
                        float _3198 = _2976;
                        uint _3199 = _2986;
                        uint _3200;
                        vec4 _3225;
                        float _3226;
                        vec4 _3241;
                        vec3 _3253;
                        vec4 _3268;
                        vec4 _3283;
                        float _3329;
                        bool _3330;
                        for (;;)
                        {
                            uint _3210 = ((_2977 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3199));
                            _3200 = (_3199 + 4294967295u) & _3199;
                            uint _3212 = _3210 * 40u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            _3226 = _3225.w;
                            uint _3228 = (_3210 * 40u) + 4u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3243 = (_3210 * 40u) + 8u;
                            _3253 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x));
                            uint _3255 = (_3210 * 40u) + 16u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3270 = (_3210 * 40u) + 20u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3210 * 40u) + 24u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3304 = (_3210 * 40u) + 28u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3329 = fma(_2545, _3317.z, fma(_2544, _3317.y, _3317.x * _2543)) + _3317.w;
                            _3330 = !((fma(_2545, _3298.z, fma(_2544, _3298.y, _3298.x * _2543)) + _3298.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3330)
                            {
                                float _3357 = _3225.x - _2543;
                                float _3358 = _3225.y - _2544;
                                float _3359 = _3225.z - _2545;
                                float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                                float _3363 = inversesqrt(_3360);
                                float _3364 = _3363 * _3357;
                                float _3365 = _3363 * _3358;
                                float _3366 = _3363 * _3359;
                                float _3370 = 1.0 - (_3360 / (_3226 * _3226));
                                float _4497 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3375 = sqrt(_3360) * _3241.w;
                                float _3377 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                                float _3378 = _3377 * _3377;
                                float _3381 = ((1.0 - _3378) * dot(vec3(_3364, _3365, _3366), vec3(_795, _798, _801))) + _3378;
                                float _3384 = _3375 * _3375;
                                float _3388 = (fma(_2545, _3268.z, fma(_2544, _3268.y, _3268.x * _2543)) + _3268.w) / _3329;
                                float _3389 = (fma(_2545, _3283.z, fma(_2544, _3283.y, _3283.x * _2543)) + _3283.w) / _3329;
                                float _3393 = 1.0 - dot(vec2(_3388, _3389), vec2(_3388, _3389));
                                float _4513 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                                float _3395 = _3394 * (((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3371) / ((_3384 * 0.699999988079071044921875) + 1.0));
                                float _3407 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                                float _3408 = 1.0 - _855;
                                float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                                float _3416 = _3415 * _3415;
                                float _3417 = _3416 * _3416;
                                float _3418 = _3364 - _2837;
                                float _3419 = _3365 - _2838;
                                float _3420 = _3366 - _2839;
                                float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                                float _3428 = dot(vec3(_795, _798, _801), vec3((-0.0) - _2837, (-0.0) - _2838, (-0.0) - _2839));
                                float _4524 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3432 = dot(vec3(_795, _798, _801), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                                float _4535 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                                float _3440 = _3377 * _3416;
                                float _3441 = _3440 * _3440;
                                float _3447 = ((1.0 - _3441) * dot(vec3(_795, _798, _801), vec3(_3364, _3365, _3366))) + _3441;
                                float _4546 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3449 = 1.0 - _3416;
                                float _3459 = (0.5 / (((_3448 * ((_3431 * _3449) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3416) * _3431))) * _3448;
                                float _4557 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3469 = (_3394 * _3371) * (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) / ((_3439 * _3439) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3395 * _3241.y;
                                frontier_phi_83_pred_1 = _3395 * _3241.x;
                                frontier_phi_83_pred_2 = _3469 * _3253.z;
                                frontier_phi_83_pred_3 = _3469 * _3253.y;
                                frontier_phi_83_pred_4 = _3469 * _3253.x;
                                frontier_phi_83_pred_5 = _3395 * _3241.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3477 = frontier_phi_83_pred;
                            _3476 = frontier_phi_83_pred_1;
                            _3475 = frontier_phi_83_pred_2;
                            _3474 = frontier_phi_83_pred_3;
                            _3473 = frontier_phi_83_pred_4;
                            _3478 = frontier_phi_83_pred_5;
                            _3183 = _3476 + _3196;
                            _3184 = _3477 + _3197;
                            _3185 = _3478 + _3198;
                            _3180 = _3473 + _3193;
                            _3181 = _3474 + _3194;
                            _3182 = _3475 + _3195;
                            if (_3200 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3200;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3185;
                        frontier_phi_77_pred_1 = _3184;
                        frontier_phi_77_pred_2 = _3183;
                        frontier_phi_77_pred_3 = _3182;
                        frontier_phi_77_pred_4 = _3181;
                        frontier_phi_77_pred_5 = _3180;
                    }
                    _2822 = frontier_phi_77_pred;
                    _2820 = frontier_phi_77_pred_1;
                    _2818 = frontier_phi_77_pred_2;
                    _2816 = frontier_phi_77_pred_3;
                    _2814 = frontier_phi_77_pred_4;
                    _2812 = frontier_phi_77_pred_5;
                    uint _2978 = _2977 + 1u;
                    if (_2978 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2971 = _2812;
                        _2972 = _2814;
                        _2973 = _2816;
                        _2974 = _2818;
                        _2975 = _2820;
                        _2976 = _2822;
                        _2977 = _2978;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2816;
                frontier_phi_58_59_ladder_1 = _2822;
                frontier_phi_58_59_ladder_2 = _2820;
                frontier_phi_58_59_ladder_3 = _2818;
                frontier_phi_58_59_ladder_4 = _2814;
                frontier_phi_58_59_ladder_5 = _2812;
            }
            else
            {
                frontier_phi_58_59_ladder = _2694;
                frontier_phi_58_59_ladder_1 = _2700;
                frontier_phi_58_59_ladder_2 = _2698;
                frontier_phi_58_59_ladder_3 = _2696;
                frontier_phi_58_59_ladder_4 = _2692;
                frontier_phi_58_59_ladder_5 = _2690;
            }
            _2811 = frontier_phi_58_59_ladder_5;
            _2813 = frontier_phi_58_59_ladder_4;
            _2815 = frontier_phi_58_59_ladder;
            _2817 = frontier_phi_58_59_ladder_3;
            _2819 = frontier_phi_58_59_ladder_2;
            _2821 = frontier_phi_58_59_ladder_1;
        }
        float _2826 = isnan(1.0) ? _839 : (isnan(_839) ? 1.0 : min(_839, 1.0));
        _2602 = (_2826 * _2817) + _2054;
        _2604 = (_2826 * _2819) + _2056;
        _2606 = (_2826 * _2821) + _2058;
        _2608 = ((_2811 * 0.039999999105930328369140625) * _2826) + _2387;
        _2610 = ((_2813 * 0.039999999105930328369140625) * _2826) + _2389;
        _2612 = ((_2815 * 0.039999999105930328369140625) * _2826) + _2391;
    }
    else
    {
        _2602 = _2054;
        _2604 = _2056;
        _2606 = _2058;
        _2608 = _2387;
        _2610 = _2389;
        _2612 = _2391;
    }
    float _4573 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4584 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4595 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _2629 = ((isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2602 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _839))) + ((_2608 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1675)) * cbPerFrame._m0[3u].x);
    float _2630 = ((isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2604 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _839))) + ((_2610 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1675)) * cbPerFrame._m0[3u].x);
    float _2631 = ((isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2606 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _839))) + ((_2612 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1675)) * cbPerFrame._m0[3u].x);
    uint _2632 = _242 + 6u;
    float _2640 = _776 / cbSceneParam._m0[86u].x;
    float _2641 = _777 / cbSceneParam._m0[86u].y;
    vec4 _2655 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, (log2((isnan(cbSceneParam._m0[77u].w) ? _697 : (isnan(_697) ? cbSceneParam._m0[77u].w : min(_697, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2657 = _2655.x;
    float _2658 = _2655.y;
    float _2659 = _2655.z;
    float _2660 = _2655.w;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    if (_697 > cbSceneParam._m0[78u].w)
    {
        float _2715 = isnan(_697) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _697 : min(cbSceneParam._m0[80u].w, _697));
        float _2716 = _2715 / _697;
        float _2727 = _2716 * _749;
        float _2728 = _750 * _2716;
        float _2729 = (-0.0) - _2728;
        float _2731 = _2716 * _751;
        float _2733 = (cbSceneParam._m0[77u].w * _2729) / _2715;
        float _2734 = _2733 + cbSceneParam._m0[79u].w;
        float _2735 = cbSceneParam._m0[79u].w - _2728;
        float _2741 = sqrt(((_2727 * _2727) + (_2728 * _2728)) + (_2731 * _2731));
        float _2744 = (1.0 - (cbSceneParam._m0[77u].w / _2715)) * _2741;
        float _2749 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2751 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2928;
        if (abs((_2729 - _2733) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2928 = ((((_2734 > 0.0) ? exp2(_2749 * _2734) : (2.0 - exp2(_2751 * _2734))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2744;
        }
        else
        {
            float _2872 = 1.0 / cbSceneParam._m0[80u].x;
            float _2873 = isnan(_2735) ? _2734 : (isnan(_2734) ? _2735 : max(_2734, _2735));
            float _2874 = isnan(_2735) ? _2734 : (isnan(_2734) ? _2735 : min(_2734, _2735));
            float _2883 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : min(_2873, 0.0));
            float _2884 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : min(_2874, 0.0));
            _2928 = ((abs(_2741 / _2729) * cbSceneParam._m0[80u].y) * ((((_2883 - _2884) * 2.0) - ((exp2(_2749 * (isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0)))) - exp2(_2749 * (isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0))))) * _2872)) - ((exp2(_2751 * _2883) - exp2(_2751 * _2884)) * _2872))) + (_2744 * cbSceneParam._m0[80u].z);
        }
        vec4 _2930 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2640, _2641, 1.0), 0.0);
        float _2939 = exp2((_2928 * (-1.44269502162933349609375)) * (1.0 - _2930.w));
        float _2940 = log2(_2939);
        float _2956 = log2(_2660);
        _2753 = (exp2(_2956 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].x)) * _2930.x) / cbSceneParam._m0[78u].x)) + _2657;
        _2755 = (exp2(_2956 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].y)) * _2930.y) / cbSceneParam._m0[78u].y)) + _2658;
        _2757 = (exp2(_2956 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2940 * cbSceneParam._m0[78u].z)) * _2930.z) / cbSceneParam._m0[78u].z)) + _2659;
        _2759 = _2939 * _2660;
    }
    else
    {
        _2753 = _2657;
        _2755 = _2658;
        _2757 = _2659;
        _2759 = _2660;
    }
    bool _2966;
    vec4 _2769;
    vec4 _2791;
    float _2793;
    float _2797;
    float _2798;
    float _2799;
    float _2800;
    bool _2810;
    for (;;)
    {
        _2769 = cbMatDynParam._m0[0u];
        float _2771 = roundEven(_2769.y);
        bool _2772 = _2771 == 3.0;
        float _2773 = log2(_2759);
        float _2780 = exp2(_2773 * cbSceneParam._m0[78u].x) * _2629;
        float _2781 = exp2(_2773 * cbSceneParam._m0[78u].y) * _2630;
        float _2782 = exp2(_2773 * cbSceneParam._m0[78u].z) * _2631;
        float _2789 = _765 + (-0.5);
        _2791 = cbMtdParam._m0[1u];
        _2793 = _2791.y * _2789;
        float _2796 = (_2771 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2797 = _2796 * (_2772 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2753)));
        _2798 = _2796 * (_2772 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2755)));
        _2799 = _2796 * (_2772 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2757)));
        _2800 = _2789 * 0.999000012874603271484375;
        _2810 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2810)
        {
            if ((cbInstanceData._m0[_242 + 7u].x + _2800) < 0.5)
            {
                _2966 = true;
                break;
            }
        }
        uint _2907 = _814 + uint(_2769.w);
        if ((cbInstanceData._m0[_2907].w < 1.0) && ((cbInstanceData._m0[_2907].w + _2800) < 0.5))
        {
            _2966 = true;
            break;
        }
        if ((_2793 + 1.0) < _2791.x)
        {
            _2966 = true;
            break;
        }
        _2966 = false;
        break;
    }
    float _3171;
    if (_2966)
    {
        discard_state = true;
        _3171 = 0.0;
    }
    else
    {
        _3171 = cbInstanceData._m0[_2632].w;
    }
    SV_Target.x = _2797;
    SV_Target.y = _2798;
    SV_Target.z = _2799;
    SV_Target.w = _3171;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2632].w;
    discard_exit();
}


