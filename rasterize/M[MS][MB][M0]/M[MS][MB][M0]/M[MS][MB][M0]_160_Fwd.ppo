#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1304;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _368 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _368) * cbMtdParam._m0[24u].x) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3607 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _393 = (_386 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _394 = (_386 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _395 = (_386 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _482 = _478.z;
    float _491 = ((_461.z - _482) * _386) + _482;
    float _494 = ((((_461.x - _480) * _386) + _480) * 2.0) + (-1.0);
    float _495 = ((((_461.y - _481) * _386) + _481) * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3618 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))));
    float _504 = _494 + ((((_434.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _505 = _495 + ((((_434.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _508 = fma(_501, _239, fma(_505, _246, _504 * _232));
    float _511 = fma(_501, _240, fma(_505, _247, _504 * _233));
    float _514 = fma(_501, _241, fma(_505, _248, _504 * _234));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _562 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _564 = _562.x;
    float _565 = 1.0 - _564;
    float _569 = ((_564 - _565) * cbMtdParam._m0[24u].z) + _565;
    float _571 = (cbMtdParam._m0[19u].x + dot(vec4(_518 * _508, _518 * _511, _518 * _514, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_569 * cbMtdParam._m0[21u].z);
    float _3629 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _574 = (-0.0) - cbMtdParam._m0[24u].y;
    float _576 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = isnan(1.0) ? _576 : (isnan(_576) ? 1.0 : min(_576, 1.0));
    float _584 = _572 - ((_572 * TEXCOORD_8.x) * _577);
    float _585 = _572 - ((_572 * TEXCOORD_8.y) * _577);
    float _586 = _572 - ((_572 * TEXCOORD_8.z) * _577);
    float _593 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _597 = ((isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : min(_593, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _605 = (_597 - (((_569 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _597))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3660 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _606 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _610 = ((_584 * ((_414.x * cbMtdParam._m0[18u].x) - _393)) * _606) + _393;
    float _611 = ((_585 * ((_414.y * cbMtdParam._m0[18u].y) - _394)) * _606) + _394;
    float _612 = ((_586 * ((_414.z * cbMtdParam._m0[18u].z) - _395)) * _606) + _395;
    vec4 _624 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _626 = _624.x;
    float _627 = 1.0 - _626;
    float _654 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_626 - _627) * cbMtdParam._m0[24u].w) + _627) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3671 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _655 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _663 = ((((cbMtdParam._m0[10u].x - _610) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _655) + _610;
    float _664 = ((((cbMtdParam._m0[10u].y - _611) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _655) + _611;
    float _665 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _612)) * _655) + _612;
    float _670 = (((_434.z - _491) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _491;
    vec4 _684 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _691 = (_684.x * 2.0) + (-1.0);
    float _692 = (_684.y * 2.0) + (-1.0);
    float _693 = dot(vec2(_691, _692), vec2(_691, _692));
    float _3682 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _702 = (((_684.z - _670) * _584) * _606) + _670;
    float _705 = ((cbMtdParam._m0[23u].y - _702) * _655) + _702;
    vec4 _724 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _730 = (_724.x * 2.0) + (-1.0);
    float _731 = (_724.y * 2.0) + (-1.0);
    float _732 = dot(vec2(_730, _731), vec2(_730, _731));
    float _3693 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _752 = (((cbMtdParam._m0[21u].x * _504) + ((_691 - _504) * _584)) * _606) + _504;
    float _753 = (((cbMtdParam._m0[21u].x * _505) + ((_692 - _505) * _585)) * _606) + _505;
    float _754 = (((sqrt(1.0 - (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) - _501) * _586) * _606) + _501;
    float _765 = (((_730 - _752) + (_752 * cbMtdParam._m0[22u].z)) * _655) + _752;
    float _766 = (((_731 - _753) + (_753 * cbMtdParam._m0[22u].z)) * _655) + _753;
    float _767 = ((sqrt(1.0 - (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) - _754) * _655) + _754;
    float _769 = cbMtdParam._m0[22u].x + _534.w;
    float _772 = fma(_767, _239, fma(_766, _246, _765 * _232));
    float _775 = fma(_767, _240, fma(_766, _247, _765 * _233));
    float _778 = fma(_767, _241, fma(_766, _248, _765 * _234));
    float _782 = inversesqrt(dot(vec3(_772, _775, _778), vec3(_772, _775, _778)));
    float _783 = _782 * _772;
    float _784 = _782 * _775;
    float _785 = _782 * _778;
    float _3704 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _786 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _3726 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3737 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3748 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _804 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _855 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _845);
    float _856 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _845);
    float _857 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _845);
    float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
    float _862 = _855 * _861;
    float _863 = _856 * _861;
    float _864 = _857 * _861;
    float _870 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _871 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _889 = fma(_785, cbSceneParam._m0[5u].z, fma(_784, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _783));
    float _892 = fma(_785, cbSceneParam._m0[6u].z, fma(_784, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _783));
    float _895 = fma(_785, cbSceneParam._m0[7u].z, fma(_784, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _783));
    uint _909 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _915 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_909].x;
    float _916 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_909].y;
    float _917 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * cbInstanceData._m0[_909].z;
    float _3759 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    vec4 _929 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _870, cbSceneParam._m0[86u].y * _871));
    float _933 = ((isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * TEXCOORD_5.w) * _929.x;
    float _934 = dot(vec3(_783, _784, _785), vec3(_862, _863, _864));
    float _937 = _934 * 2.0;
    float _941 = (_937 * _783) - _862;
    float _942 = (_937 * _784) - _863;
    float _943 = (_937 * _785) - _864;
    float _947 = abs(dot(vec3(_862, _863, _864), vec3(_783, _784, _785)));
    float _3792 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _949 = sqrt(_786);
    float _962 = exp2((_949 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_949 * 3.0));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1303;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1028 = fma(_1002, cbModelParam._m0[26u].z, fma(_998, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _994));
        float _1032 = fma(_1002, cbModelParam._m0[27u].z, fma(_998, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _994));
        float _1036 = fma(_1002, cbModelParam._m0[28u].z, fma(_998, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _994));
        float _1061 = _994 + _783;
        float _1062 = _998 + _784;
        float _1063 = _1002 + _785;
        float _1073 = fma(_1063, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061)) - _1028;
        float _1074 = fma(_1063, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061)) - _1032;
        float _1075 = fma(_1063, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061)) - _1036;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1028 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1032 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[34u].z) + ((((((_1036 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1131 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1097.x + (-0.5));
        float _1133 = _1131 * (_1097.y + (-0.5));
        float _1134 = _1131 * (_1097.z + (-0.5));
        float _1141 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1104.x + (-0.5));
        float _1143 = _1141 * (_1104.y + (-0.5));
        float _1144 = _1141 * (_1104.z + (-0.5));
        float _1151 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1111.x + (-0.5));
        float _1153 = _1151 * (_1111.y + (-0.5));
        float _1154 = _1151 * (_1111.z + (-0.5));
        float _1161 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1118.x + (-0.5));
        float _1163 = _1161 * (_1118.y + (-0.5));
        float _1164 = _1161 * (_1118.z + (-0.5));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = _1132 * 0.5;
        float _1169 = _1142 * 0.5;
        float _1170 = _1152 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1185 = (dot(vec3(_783, _784, _785), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1195 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3840 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1197 + 1.0))) + _1202) * _1165;
        float _1212 = _1133 * 0.5;
        float _1213 = _1143 * 0.5;
        float _1214 = _1153 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_783, _784, _785), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3873 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1239 + 1.0))) + _1244) * _1166;
        float _1254 = _1134 * 0.5;
        float _1255 = _1144 * 0.5;
        float _1256 = _1154 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_783, _784, _785), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3906 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1281 + 1.0))) + _1286) * _1167;
        _1303 = _1134;
        _1305 = _1133;
        _1306 = _1132;
        _1307 = _1144;
        _1308 = _1143;
        _1309 = _1142;
        _1310 = _1154;
        _1311 = _1153;
        _1312 = _1152;
        _1313 = _1167;
        _1314 = _1166;
        _1315 = _1165;
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _1304;
        _1305 = _1304;
        _1306 = _1304;
        _1307 = _1304;
        _1308 = _1304;
        _1309 = _1304;
        _1310 = _1304;
        _1311 = _1304;
        _1312 = _1304;
        _1313 = _1304;
        _1314 = _1304;
        _1315 = _1304;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1343 = fma(_1002, cbModelParam._m0[30u].z, fma(_998, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _994));
        float _1347 = fma(_1002, cbModelParam._m0[31u].z, fma(_998, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _994));
        float _1351 = fma(_1002, cbModelParam._m0[32u].z, fma(_998, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _994));
        float _1374 = _994 + _783;
        float _1375 = _998 + _784;
        float _1376 = _1002 + _785;
        float _1386 = fma(_1376, cbModelParam._m0[30u].z, fma(_1375, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1374)) - _1343;
        float _1387 = fma(_1376, cbModelParam._m0[31u].z, fma(_1375, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1374)) - _1347;
        float _1388 = fma(_1376, cbModelParam._m0[32u].z, fma(_1375, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1374)) - _1351;
        float _1392 = inversesqrt(dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388)));
        float _1405 = ((_1392 * _1386) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1343 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1392 * _1387) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1347 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1392 * _1388) / cbModelParam._m0[35u].z) + ((((((_1351 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        float _1442 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1409.x + (-0.5));
        float _1444 = _1442 * (_1409.y + (-0.5));
        float _1445 = _1442 * (_1409.z + (-0.5));
        float _1452 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1416.x + (-0.5));
        float _1454 = _1452 * (_1416.y + (-0.5));
        float _1455 = _1452 * (_1416.z + (-0.5));
        float _1462 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1423.x + (-0.5));
        float _1464 = _1462 * (_1423.y + (-0.5));
        float _1465 = _1462 * (_1423.z + (-0.5));
        float _1472 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1430.x + (-0.5));
        float _1474 = _1472 * (_1430.y + (-0.5));
        float _1475 = _1472 * (_1430.z + (-0.5));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = _1443 * 0.5;
        float _1480 = _1453 * 0.5;
        float _1481 = _1463 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_783, _784, _785), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _3969 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1506 + 1.0))) + _1511) * _1476;
        float _1521 = _1444 * 0.5;
        float _1522 = _1454 * 0.5;
        float _1523 = _1464 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_783, _784, _785), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4002 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1548 + 1.0))) + _1553) * _1477;
        float _1563 = _1445 * 0.5;
        float _1564 = _1455 * 0.5;
        float _1565 = _1465 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_783, _784, _785), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4035 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1590 + 1.0))) + _1595) * _1478;
        _1612 = _1445;
        _1613 = _1444;
        _1614 = _1443;
        _1615 = _1455;
        _1616 = _1454;
        _1617 = _1453;
        _1618 = _1465;
        _1619 = _1464;
        _1620 = _1463;
        _1621 = _1478;
        _1622 = _1477;
        _1623 = _1476;
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
    }
    else
    {
        _1612 = _1304;
        _1613 = _1304;
        _1614 = _1304;
        _1615 = _1304;
        _1616 = _1304;
        _1617 = _1304;
        _1618 = _1304;
        _1619 = _1304;
        _1620 = _1304;
        _1621 = _1304;
        _1622 = _1304;
        _1623 = _1304;
        _1624 = 0.0;
        _1625 = 0.0;
        _1626 = 0.0;
    }
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1316)) + _1316;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1317)) + _1317;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1318)) + _1318;
    float _1659 = fma(_1638, cbSceneParam._m0[89u].z, fma(_1637, cbSceneParam._m0[89u].y, _1636 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1638, cbSceneParam._m0[90u].z, fma(_1637, cbSceneParam._m0[90u].y, _1636 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1638, cbSceneParam._m0[91u].z, fma(_1637, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1636));
    float _1680 = _941 * 0.5;
    float _1681 = _942 * 0.5;
    float _1682 = _943 * 0.5;
    float _1683 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1686 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1689 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1723;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1696 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1303, _1307, _1310, _1313));
        float _1700 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1704 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1711 = dot(vec4(cbModelParam._m0[39u]), vec4(_1680, _1681, _1682, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1734;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1725 = dot(vec4(cbModelParam._m0[40u]), vec4(_1680, _1681, _1682, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1738 = (_1734 * cbModelParam._m0[1u].x) + (_1723 * (1.0 - cbModelParam._m0[1u].x));
    float _1748 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _786);
    float _1749 = isnan(_1748) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1748 : min(cbModelParam._m0[25u].z, _1748));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1796 = fma(_1002, cbModelParam._m0[13u].z, fma(_998, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994)) + cbModelParam._m0[13u].w;
        float _1800 = fma(_1002, cbModelParam._m0[14u].z, fma(_998, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994)) + cbModelParam._m0[14u].w;
        float _1804 = fma(_1002, cbModelParam._m0[15u].z, fma(_998, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994)) + cbModelParam._m0[15u].w;
        float _1807 = fma(_943, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941));
        float _1810 = fma(_943, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941));
        float _1813 = fma(_943, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941));
        float _1841;
        if (_1807 > 0.0)
        {
            _1841 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1841 = frontier_phi_14_12_ladder;
        }
        float _2041;
        if (_1810 > 0.0)
        {
            _2041 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2041 = frontier_phi_23_19_ladder;
        }
        float _2284;
        if (_1813 > 0.0)
        {
            _2284 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2284 = frontier_phi_35_30_ladder;
        }
        float _2286 = isnan(_2041) ? _1841 : (isnan(_1841) ? _2041 : min(_1841, _2041));
        float _2287 = isnan(_2284) ? _2286 : (isnan(_2286) ? _2284 : min(_2286, _2284));
        float _2291 = (_2287 * _1807) + _1796;
        float _2292 = (_2287 * _1810) + _1800;
        float _2293 = (_2287 * _1813) + _1804;
        float _2294 = _2287 * 9.9999997473787516355514526367188e-05;
        float _2296 = (-1.0) - _2294;
        float _2298 = _2294 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2293 > _2298) || ((_2293 < _2296) || ((_2292 > _2298) || ((_2292 < _2296) || ((_2291 < _2296) || (_2291 > _2298))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2293, cbModelParam._m0[9u].z, fma(_2292, cbModelParam._m0[9u].y, _2291 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2293, cbModelParam._m0[10u].z, fma(_2292, cbModelParam._m0[10u].y, _2291 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2293, cbModelParam._m0[11u].z, fma(_2292, cbModelParam._m0[11u].y, _2291 * cbModelParam._m0[11u].x))), _1749);
            frontier_phi_13_35_ladder = _2417.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2417.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2417.x * cbModelParam._m0[1u].y;
        }
        _1829 = frontier_phi_13_35_ladder_2;
        _1831 = frontier_phi_13_35_ladder_1;
        _1833 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_941, _942, _943), _1749);
        _1829 = _1817.x * cbModelParam._m0[1u].y;
        _1831 = _1817.y * cbModelParam._m0[1u].y;
        _1833 = _1817.z * cbModelParam._m0[1u].y;
    }
    float _1837 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _786);
    float _1838 = isnan(_1837) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1837 : min(cbModelParam._m0[25u].w, _1837));
    float _1927;
    float _1929;
    float _1931;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1891 = fma(_1002, cbModelParam._m0[21u].z, fma(_998, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994)) + cbModelParam._m0[21u].w;
        float _1895 = fma(_1002, cbModelParam._m0[22u].z, fma(_998, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994)) + cbModelParam._m0[22u].w;
        float _1899 = fma(_1002, cbModelParam._m0[23u].z, fma(_998, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994)) + cbModelParam._m0[23u].w;
        float _1902 = fma(_943, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941));
        float _1905 = fma(_943, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941));
        float _1908 = fma(_943, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941));
        float _2046;
        if (_1902 > 0.0)
        {
            _2046 = abs((1.0 - _1891) / _1902);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1891 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2046 = frontier_phi_25_21_ladder;
        }
        float _2311;
        if (_1905 > 0.0)
        {
            _2311 = abs((1.0 - _1895) / _1905);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1895 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2311 = frontier_phi_37_32_ladder;
        }
        float _2516;
        if (_1908 > 0.0)
        {
            _2516 = abs((1.0 - _1899) / _1908);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1899 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2516 = frontier_phi_46_43_ladder;
        }
        float _2518 = isnan(_2311) ? _2046 : (isnan(_2046) ? _2311 : min(_2046, _2311));
        float _2519 = isnan(_2516) ? _2518 : (isnan(_2518) ? _2516 : min(_2518, _2516));
        float _2523 = (_2519 * _1902) + _1891;
        float _2524 = (_2519 * _1905) + _1895;
        float _2525 = (_2519 * _1908) + _1899;
        float _2526 = _2519 * 9.9999997473787516355514526367188e-05;
        float _2527 = (-1.0) - _2526;
        float _2529 = _2526 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2525 > _2529) || ((_2525 < _2527) || ((_2524 > _2529) || ((_2524 < _2527) || ((_2523 < _2527) || (_2523 > _2529))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2525, cbModelParam._m0[17u].z, fma(_2524, cbModelParam._m0[17u].y, _2523 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2525, cbModelParam._m0[18u].z, fma(_2524, cbModelParam._m0[18u].y, _2523 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2525, cbModelParam._m0[19u].z, fma(_2524, cbModelParam._m0[19u].y, _2523 * cbModelParam._m0[19u].x))), _1838);
            frontier_phi_22_46_ladder = _2724.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2724.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2724.x * cbModelParam._m0[1u].z;
        }
        _1927 = frontier_phi_22_46_ladder_2;
        _1929 = frontier_phi_22_46_ladder_1;
        _1931 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1911 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_941, _942, _943), _1838);
        _1927 = _1911.x * cbModelParam._m0[1u].z;
        _1929 = _1911.y * cbModelParam._m0[1u].z;
        _1931 = _1911.z * cbModelParam._m0[1u].z;
    }
    float _1943 = ((((1.0 - _962) * ((_949 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_962 * _949)) * _933;
    float _1944 = _1943 * ((cbModelParam._m0[1u].w * (_1927 - _1829)) + _1829);
    float _1945 = _1943 * ((cbModelParam._m0[1u].w * (_1929 - _1831)) + _1831);
    float _1946 = _1943 * ((cbModelParam._m0[1u].w * (_1931 - _1833)) + _1833);
    float _1949 = fma(_1946, cbSceneParam._m0[89u].z, fma(_1945, cbSceneParam._m0[89u].y, _1944 * cbSceneParam._m0[89u].x));
    float _1952 = fma(_1946, cbSceneParam._m0[90u].z, fma(_1945, cbSceneParam._m0[90u].y, _1944 * cbSceneParam._m0[90u].x));
    float _1955 = fma(_1946, cbSceneParam._m0[91u].z, fma(_1945, cbSceneParam._m0[91u].y, _1944 * cbSceneParam._m0[91u].x));
    uvec4 _1965 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1967 = _1965.x * 14u;
    uint _1968 = _1967 + 13u;
    float _1975 = _933 + (-1.0);
    float _1980 = (cbLight._m0[_1968].x * _1975) + 1.0;
    float _1981 = (cbLight._m0[_1968].y * _1975) + 1.0;
    float _1982 = (cbLight._m0[_1968].z * _1975) + 1.0;
    float _1983 = (cbLight._m0[_1968].w * _1975) + 1.0;
    uint _1984 = _1967 + 5u;
    float _1990 = isnan(1.0) ? _1981 : (isnan(_1981) ? 1.0 : min(_1981, 1.0));
    uint _1994 = _1967 + 4u;
    float _2000 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
    uint _2004 = _1967 | 1u;
    float _2015 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_783, _784, _785));
    float _2018 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_783, _784, _785));
    float _4171 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _4182 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2023 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.3183098733425140380859375;
    float _2025 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _2032 = ((cbLight._m0[_1984].x * _1990) * _2025) + ((cbLight._m0[_1994].x * _2000) * _2023);
    float _2033 = ((_1990 * cbLight._m0[_1984].y) * _2025) + ((_2000 * cbLight._m0[_1994].y) * _2023);
    float _2034 = ((_1990 * cbLight._m0[_1984].z) * _2025) + ((_2000 * cbLight._m0[_1994].z) * _2023);
    uvec4 _2038 = floatBitsToUint(cbLight._m0[_1967 + 12u]);
    bool _2040 = _2038.x == 0u;
    float _2051;
    float _2053;
    float _2055;
    if (_2040)
    {
        _2051 = _2032;
        _2053 = _2033;
        _2055 = _2034;
    }
    else
    {
        uint _2059 = _1967 + 6u;
        float _2075 = (dot(vec3(cbLight._m0[_1967 + 2u].xyz), vec3(_783, _784, _785)) * 0.5) + 0.5;
        float _2076 = _2075 * _2075;
        float _4193 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2077 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2078 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2051 = (((cbLight._m0[_2059].x * 0.3183098733425140380859375) * _2077) * _2078) + _2032;
        _2053 = (((cbLight._m0[_2059].y * 0.3183098733425140380859375) * _2077) * _2078) + _2033;
        _2055 = (((cbLight._m0[_2059].z * 0.3183098733425140380859375) * _2077) * _2078) + _2034;
    }
    bool _2058 = _2038.y == 0u;
    float _2096;
    float _2098;
    float _2100;
    if (_2058)
    {
        _2096 = _2051;
        _2098 = _2053;
        _2100 = _2055;
    }
    else
    {
        uint _2255 = _1967 + 7u;
        float _2271 = (dot(vec3(cbLight._m0[_1967 + 3u].xyz), vec3(_783, _784, _785)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4209 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2274 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2096 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2051;
        _2098 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2053;
        _2100 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2055;
    }
    uint _2103 = _1967 + 8u;
    float _2116 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _786) * 0.949999988079071044921875);
    float _2117 = _2116 * _2116;
    float _2118 = cbLight._m0[_1967].x + _862;
    float _2119 = cbLight._m0[_1967].y + _863;
    float _2120 = cbLight._m0[_1967].z + _864;
    float _2124 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
    float _2125 = _2124 * _2118;
    float _2126 = _2124 * _2119;
    float _2127 = _2124 * _2120;
    float _2128 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_1967].xyz));
    float _4225 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _2132 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2133 = dot(vec3(_783, _784, _785), vec3(_2125, _2126, _2127));
    float _4247 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2137 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2125, _2126, _2127));
    float _4258 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2141 = _2117 * _2117;
    float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
    float _2156 = (exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2157 = 1.0 - _2117;
    float _2168 = (0.5 / (((_2132 * ((_2131 * _2157) + _2117)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2157) + _2117) * _2131))) * _2131;
    float _4269 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2170 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
    uint _2181 = _1967 + 9u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _786) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_2004].x + _862;
    float _2195 = cbLight._m0[_2004].y + _863;
    float _2196 = cbLight._m0[_2004].z + _864;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2004].xyz));
    float _4280 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2208 = dot(vec3(_783, _784, _785), vec3(_2201, _2202, _2203));
    float _4291 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2201, _2202, _2203));
    float _4302 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2193 * _2193;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2230 = 1.0 - _2193;
    float _2240 = (0.5 / (((_2132 * ((_2207 * _2230) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2230) + _2193) * _2207))) * _2207;
    float _4313 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2242 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    float _2252 = (((_2229 * cbLight._m0[_2181].x) * _2242) * _1990) + (((_2156 * cbLight._m0[_2103].x) * _2170) * _2000);
    float _2253 = (((_2229 * cbLight._m0[_2181].y) * _2242) * _1990) + (((_2156 * cbLight._m0[_2103].y) * _2170) * _2000);
    float _2254 = (((_2229 * cbLight._m0[_2181].z) * _2242) * _1990) + (((_2156 * cbLight._m0[_2103].z) * _2170) * _2000);
    float _2316;
    float _2318;
    float _2320;
    if (_2040)
    {
        _2316 = _2252;
        _2318 = _2253;
        _2320 = _2254;
    }
    else
    {
        uint _2322 = _1967 + 2u;
        uint _2326 = _1967 + 10u;
        float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2322].w)) * _786) * 0.949999988079071044921875);
        float _2341 = _2340 * _2340;
        float _2342 = cbLight._m0[_2322].x + _862;
        float _2343 = cbLight._m0[_2322].y + _863;
        float _2344 = cbLight._m0[_2322].z + _864;
        float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
        float _2349 = _2348 * _2342;
        float _2350 = _2348 * _2343;
        float _2351 = _2348 * _2344;
        float _2352 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2322].xyz));
        float _4324 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2355 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2356 = dot(vec3(_783, _784, _785), vec3(_2349, _2350, _2351));
        float _4335 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2360 = dot(vec3(cbLight._m0[_2322].xyz), vec3(_2349, _2350, _2351));
        float _4346 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2364 = _2341 * _2341;
        float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
        float _2377 = (exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2378 = 1.0 - _2341;
        float _2388 = (0.5 / (((_2132 * ((_2355 * _2378) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2378) + _2341) * _2355))) * _2355;
        float _4357 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2390 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
        float _2391 = isnan(1.0) ? _1982 : (isnan(_1982) ? 1.0 : min(_1982, 1.0));
        _2316 = (((_2377 * cbLight._m0[_2326].x) * _2390) * _2391) + _2252;
        _2318 = (((_2377 * cbLight._m0[_2326].y) * _2390) * _2391) + _2253;
        _2320 = (((_2377 * cbLight._m0[_2326].z) * _2390) * _2391) + _2254;
    }
    float _2426;
    float _2428;
    float _2430;
    if (_2058)
    {
        _2426 = _2316;
        _2428 = _2318;
        _2430 = _2320;
    }
    else
    {
        uint _2437 = _1967 + 3u;
        uint _2441 = _1967 + 11u;
        float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _786) * 0.949999988079071044921875);
        float _2456 = _2455 * _2455;
        float _2457 = cbLight._m0[_2437].x + _862;
        float _2458 = cbLight._m0[_2437].y + _863;
        float _2459 = cbLight._m0[_2437].z + _864;
        float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
        float _2464 = _2463 * _2457;
        float _2465 = _2463 * _2458;
        float _2466 = _2463 * _2459;
        float _2467 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2437].xyz));
        float _4373 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2471 = dot(vec3(_783, _784, _785), vec3(_2464, _2465, _2466));
        float _4384 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2475 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2464, _2465, _2466));
        float _4395 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2479 = _2456 * _2456;
        float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
        float _2492 = (exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2493 = 1.0 - _2456;
        float _2503 = (0.5 / (((_2132 * ((_2470 * _2493) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2132 * _2493) + _2456) * _2470))) * _2470;
        float _4406 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2505 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
        float _2506 = isnan(1.0) ? _1983 : (isnan(_1983) ? 1.0 : min(_1983, 1.0));
        _2426 = (((_2492 * cbLight._m0[_2441].x) * _2505) * _2506) + _2316;
        _2428 = (((_2492 * cbLight._m0[_2441].y) * _2505) * _2506) + _2318;
        _2430 = (((_2492 * cbLight._m0[_2441].z) * _2505) * _2506) + _2320;
    }
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_1965.y == 0u)
    {
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2582 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2581;
        float _2583 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2581;
        float _2584 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2581;
        uvec4 _2596 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2597 = _2596.x;
        uint _2608 = uint((float(_2596.y) * floor(float(uint(cbSceneParam._m0[85u].y * _871) / _2597))) + floor(float(uint(cbSceneParam._m0[85u].x * _870) / _2597)));
        float _2618 = (log2(_2584 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2619 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        uint _2622 = uint(isnan(14.0) ? _2619 : (isnan(_2619) ? 14.0 : min(_2619, 14.0)));
        uvec4 _2627 = texelFetch(g_lightClusterGridBuffer, int(((_2622 << 2u) + (_2608 << 6u)) >> 2u));
        uint _2628 = _2627.x;
        uint _2629 = _2596.z;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        float _2739;
        if (((((1u << ((_2629 >> 4u) & 15u)) + 4294967295u) & _2628) == 0u) || ((_2629 & 240u) == 0u))
        {
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
        }
        else
        {
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2740;
            float _2873 = 0.0;
            float _2874 = 0.0;
            float _2875 = 0.0;
            float _2876 = 0.0;
            float _2877 = 0.0;
            float _2878 = 0.0;
            uint _2879 = 0u;
            uint _2888;
            bool _2889;
            for (;;)
            {
                _2888 = texelFetch(g_lightClassification, int((((_2622 << 5u) + (_2608 << 9u)) + (_2879 << 2u)) >> 2u)).x;
                _2889 = _2888 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2889)
                {
                    frontier_phi_61_pred = _2873;
                    frontier_phi_61_pred_1 = _2878;
                    frontier_phi_61_pred_2 = _2877;
                    frontier_phi_61_pred_3 = _2876;
                    frontier_phi_61_pred_4 = _2875;
                    frontier_phi_61_pred_5 = _2874;
                }
                else
                {
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    uint _3003;
                    _2997 = _2873;
                    _2998 = _2874;
                    _2999 = _2875;
                    _3000 = _2876;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2888;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    for (;;)
                    {
                        uint _3007 = uint(findLSB(_3003)) + (_2879 << 5u);
                        uint _3004 = (_3003 + 4294967295u) & _3003;
                        uint _3009 = _3007 * 48u;
                        vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3009)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 3u)).x));
                        uint _3029 = (_3007 * 48u) + 4u;
                        vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 3u)).x));
                        uint _3048 = (_3007 * 48u) + 8u;
                        vec3 _3059 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x));
                        float _3063 = _3023.x - _2582;
                        float _3064 = _3023.y - _2583;
                        float _3065 = _3023.z - _2584;
                        float _3066 = dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065));
                        float _3069 = inversesqrt(_3066);
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3073 = dot(vec3(_889, _892, _895), vec3(_3070, _3071, _3072));
                        float _3078 = 1.0 - (_3066 * _3023.w);
                        float _4432 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3080 = sqrt(_3066) * _3042.w;
                        float _3083 = 1.39999997615814208984375 / (_3080 + 1.39999997615814208984375);
                        float _3084 = _3083 * _3083;
                        float _3087 = ((1.0 - _3084) * _3073) + _3084;
                        float _3090 = _3080 * _3080;
                        float _3094 = ((isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))) * _3079) / ((_3090 * 0.699999988079071044921875) + 1.0);
                        float _3098 = (-0.0) - _2582;
                        float _3099 = (-0.0) - _2583;
                        float _3100 = (-0.0) - _2584;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3105 = _3104 * _3098;
                        float _3106 = _3104 * _3099;
                        float _3107 = _3104 * _3100;
                        float _3115 = exp2(log2(1.0 / ((_3090 * 3.5) + 5.0)) * 0.25);
                        float _3116 = 1.0 - _949;
                        float _3123 = sqrt(1.0 - ((1.0 - (_3116 * _3116)) * (1.0 - (_3115 * _3115))));
                        float _3124 = _3123 * _3123;
                        float _3125 = _3124 * _3124;
                        float _3126 = _3105 + _3070;
                        float _3127 = _3106 + _3071;
                        float _3128 = _3107 + _3072;
                        float _3132 = inversesqrt(dot(vec3(_3126, _3127, _3128), vec3(_3126, _3127, _3128)));
                        float _3136 = dot(vec3(_889, _892, _895), vec3(_3105, _3106, _3107));
                        float _4448 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3140 = dot(vec3(_889, _892, _895), vec3(_3132 * _3126, _3132 * _3127, _3132 * _3128));
                        float _4459 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3147 = ((_3143 * _3143) * (_3125 + (-1.0))) + 1.0;
                        float _3148 = _3083 * _3124;
                        float _3149 = _3148 * _3148;
                        float _3152 = ((1.0 - _3149) * _3073) + _3149;
                        float _4470 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3154 = 1.0 - _3124;
                        float _3164 = (0.5 / (((_3153 * ((_3139 * _3154) + _3124)) + 9.9999999392252902907785028219223e-09) + (((_3153 * _3154) + _3124) * _3139))) * _3153;
                        float _4481 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3175 = (((_3125 * 3.1415927410125732421875) * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) / ((_3147 * _3147) * ((_3090 * 2.1991131305694580078125) + 3.141590118408203125))) * _3079;
                        _2932 = (_3094 * _3042.x) + _3000;
                        _2933 = (_3094 * _3042.y) + _3001;
                        _2934 = (_3094 * _3042.z) + _3002;
                        _2929 = (_3175 * _3059.x) + _2997;
                        _2930 = (_3175 * _3059.y) + _2998;
                        _2931 = (_3175 * _3059.z) + _2999;
                        if (_3004 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _3004;
                        }
                    }
                    frontier_phi_61_pred = _2929;
                    frontier_phi_61_pred_1 = _2934;
                    frontier_phi_61_pred_2 = _2933;
                    frontier_phi_61_pred_3 = _2932;
                    frontier_phi_61_pred_4 = _2931;
                    frontier_phi_61_pred_5 = _2930;
                }
                _2730 = frontier_phi_61_pred;
                _2740 = frontier_phi_61_pred_1;
                _2738 = frontier_phi_61_pred_2;
                _2736 = frontier_phi_61_pred_3;
                _2734 = frontier_phi_61_pred_4;
                _2732 = frontier_phi_61_pred_5;
                uint _2880 = _2879 + 1u;
                if (_2880 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2873 = _2730;
                    _2874 = _2732;
                    _2875 = _2734;
                    _2876 = _2736;
                    _2877 = _2738;
                    _2878 = _2740;
                    _2879 = _2880;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
        }
        uvec4 _2743 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2744 = _2743.z;
        uint _2746 = (_2744 >> 8u) & 15u;
        float _2841;
        float _2843;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        if (((4294967295u << _2746) & _2628) == 0u)
        {
            _2841 = _2729;
            _2843 = _2731;
            _2845 = _2733;
            _2847 = _2735;
            _2849 = _2737;
            _2851 = _2739;
        }
        else
        {
            float _2866 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
            float _2867 = _2866 * _2582;
            float _2868 = _2866 * _2583;
            float _2869 = _2866 * _2584;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2746 < ((_2744 >> 12u) & 15u))
            {
                float _2842;
                float _2844;
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2980 = _2729;
                float _2981 = _2731;
                float _2982 = _2733;
                float _2983 = _2735;
                float _2984 = _2737;
                float _2985 = _2739;
                uint _2986 = _2746;
                uint _2995;
                bool _2996;
                for (;;)
                {
                    _2995 = texelFetch(g_lightClassification, int((((_2622 << 5u) + (_2608 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                    _2996 = _2995 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2996)
                    {
                        frontier_phi_67_pred = _2983;
                        frontier_phi_67_pred_1 = _2984;
                        frontier_phi_67_pred_2 = _2985;
                        frontier_phi_67_pred_3 = _2982;
                        frontier_phi_67_pred_4 = _2981;
                        frontier_phi_67_pred_5 = _2980;
                    }
                    else
                    {
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3193 = _2980;
                        float _3194 = _2981;
                        float _3195 = _2982;
                        float _3196 = _2983;
                        float _3197 = _2984;
                        float _3198 = _2985;
                        uint _3199 = _2995;
                        uint _3200;
                        vec4 _3225;
                        float _3226;
                        vec4 _3241;
                        vec3 _3253;
                        vec4 _3268;
                        vec4 _3283;
                        float _3329;
                        bool _3330;
                        for (;;)
                        {
                            uint _3210 = ((_2986 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3199));
                            _3200 = (_3199 + 4294967295u) & _3199;
                            uint _3212 = _3210 * 40u;
                            _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            _3226 = _3225.w;
                            uint _3228 = (_3210 * 40u) + 4u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            uint _3243 = (_3210 * 40u) + 8u;
                            _3253 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x));
                            uint _3255 = (_3210 * 40u) + 16u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            uint _3270 = (_3210 * 40u) + 20u;
                            _3283 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3270)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3270 + 3u)).x));
                            uint _3285 = (_3210 * 40u) + 24u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            uint _3304 = (_3210 * 40u) + 28u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            _3329 = fma(_2584, _3317.z, fma(_2583, _3317.y, _3317.x * _2582)) + _3317.w;
                            _3330 = !((fma(_2584, _3298.z, fma(_2583, _3298.y, _3298.x * _2582)) + _3298.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3330)
                            {
                                float _3357 = _3225.x - _2582;
                                float _3358 = _3225.y - _2583;
                                float _3359 = _3225.z - _2584;
                                float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                                float _3363 = inversesqrt(_3360);
                                float _3364 = _3363 * _3357;
                                float _3365 = _3363 * _3358;
                                float _3366 = _3363 * _3359;
                                float _3370 = 1.0 - (_3360 / (_3226 * _3226));
                                float _4492 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3371 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3375 = sqrt(_3360) * _3241.w;
                                float _3377 = 1.39999997615814208984375 / (_3375 + 1.39999997615814208984375);
                                float _3378 = _3377 * _3377;
                                float _3381 = ((1.0 - _3378) * dot(vec3(_3364, _3365, _3366), vec3(_889, _892, _895))) + _3378;
                                float _3384 = _3375 * _3375;
                                float _3388 = (fma(_2584, _3268.z, fma(_2583, _3268.y, _3268.x * _2582)) + _3268.w) / _3329;
                                float _3389 = (fma(_2584, _3283.z, fma(_2583, _3283.y, _3283.x * _2582)) + _3283.w) / _3329;
                                float _3393 = 1.0 - dot(vec2(_3388, _3389), vec2(_3388, _3389));
                                float _4508 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3394 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3395 = _3394 * (((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3371) / ((_3384 * 0.699999988079071044921875) + 1.0));
                                float _3407 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                                float _3408 = 1.0 - _949;
                                float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                                float _3416 = _3415 * _3415;
                                float _3417 = _3416 * _3416;
                                float _3418 = _3364 - _2867;
                                float _3419 = _3365 - _2868;
                                float _3420 = _3366 - _2869;
                                float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                                float _3428 = dot(vec3(_889, _892, _895), vec3((-0.0) - _2867, (-0.0) - _2868, (-0.0) - _2869));
                                float _4519 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3432 = dot(vec3(_889, _892, _895), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                                float _4530 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3435 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                                float _3440 = _3377 * _3416;
                                float _3441 = _3440 * _3440;
                                float _3447 = ((1.0 - _3441) * dot(vec3(_889, _892, _895), vec3(_3364, _3365, _3366))) + _3441;
                                float _4541 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3449 = 1.0 - _3416;
                                float _3459 = (0.5 / (((_3448 * ((_3431 * _3449) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3416) * _3431))) * _3448;
                                float _4552 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3469 = (_3394 * _3371) * (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3439 * _3439) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3469 * _3253.x;
                                frontier_phi_73_pred_1 = _3469 * _3253.y;
                                frontier_phi_73_pred_2 = _3395 * _3241.z;
                                frontier_phi_73_pred_3 = _3395 * _3241.y;
                                frontier_phi_73_pred_4 = _3395 * _3241.x;
                                frontier_phi_73_pred_5 = _3469 * _3253.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3473 = frontier_phi_73_pred;
                            _3474 = frontier_phi_73_pred_1;
                            _3478 = frontier_phi_73_pred_2;
                            _3477 = frontier_phi_73_pred_3;
                            _3476 = frontier_phi_73_pred_4;
                            _3475 = frontier_phi_73_pred_5;
                            _3183 = _3476 + _3196;
                            _3184 = _3477 + _3197;
                            _3185 = _3478 + _3198;
                            _3180 = _3473 + _3193;
                            _3181 = _3474 + _3194;
                            _3182 = _3475 + _3195;
                            if (_3200 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3200;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3183;
                        frontier_phi_67_pred_1 = _3184;
                        frontier_phi_67_pred_2 = _3185;
                        frontier_phi_67_pred_3 = _3182;
                        frontier_phi_67_pred_4 = _3181;
                        frontier_phi_67_pred_5 = _3180;
                    }
                    _2848 = frontier_phi_67_pred;
                    _2850 = frontier_phi_67_pred_1;
                    _2852 = frontier_phi_67_pred_2;
                    _2846 = frontier_phi_67_pred_3;
                    _2844 = frontier_phi_67_pred_4;
                    _2842 = frontier_phi_67_pred_5;
                    uint _2987 = _2986 + 1u;
                    if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2980 = _2842;
                        _2981 = _2844;
                        _2982 = _2846;
                        _2983 = _2848;
                        _2984 = _2850;
                        _2985 = _2852;
                        _2986 = _2987;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2850;
                frontier_phi_55_56_ladder_1 = _2852;
                frontier_phi_55_56_ladder_2 = _2848;
                frontier_phi_55_56_ladder_3 = _2846;
                frontier_phi_55_56_ladder_4 = _2844;
                frontier_phi_55_56_ladder_5 = _2842;
            }
            else
            {
                frontier_phi_55_56_ladder = _2737;
                frontier_phi_55_56_ladder_1 = _2739;
                frontier_phi_55_56_ladder_2 = _2735;
                frontier_phi_55_56_ladder_3 = _2733;
                frontier_phi_55_56_ladder_4 = _2731;
                frontier_phi_55_56_ladder_5 = _2729;
            }
            _2841 = frontier_phi_55_56_ladder_5;
            _2843 = frontier_phi_55_56_ladder_4;
            _2845 = frontier_phi_55_56_ladder_3;
            _2847 = frontier_phi_55_56_ladder_2;
            _2849 = frontier_phi_55_56_ladder;
            _2851 = frontier_phi_55_56_ladder_1;
        }
        float _2856 = isnan(1.0) ? _933 : (isnan(_933) ? 1.0 : min(_933, 1.0));
        _2641 = (_2856 * _2847) + _2096;
        _2643 = (_2856 * _2849) + _2098;
        _2645 = (_2856 * _2851) + _2100;
        _2647 = ((_2841 * 0.039999999105930328369140625) * _2856) + _2426;
        _2649 = ((_2843 * 0.039999999105930328369140625) * _2856) + _2428;
        _2651 = ((_2845 * 0.039999999105930328369140625) * _2856) + _2430;
    }
    else
    {
        _2641 = _2096;
        _2643 = _2098;
        _2645 = _2100;
        _2647 = _2426;
        _2649 = _2428;
        _2651 = _2430;
    }
    float _4568 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4579 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4590 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    uint _2671 = _251 + 6u;
    float _2679 = _870 / cbSceneParam._m0[86u].x;
    float _2680 = _871 / cbSceneParam._m0[86u].y;
    vec4 _2694 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, (log2((isnan(cbSceneParam._m0[77u].w) ? _804 : (isnan(_804) ? cbSceneParam._m0[77u].w : min(_804, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2696 = _2694.x;
    float _2697 = _2694.y;
    float _2698 = _2694.z;
    float _2699 = _2694.w;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_804 > cbSceneParam._m0[78u].w)
    {
        float _2754 = isnan(_804) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _804 : min(cbSceneParam._m0[80u].w, _804));
        float _2755 = _2754 / _804;
        float _2766 = _2755 * _855;
        float _2767 = _856 * _2755;
        float _2768 = (-0.0) - _2767;
        float _2769 = _2755 * _857;
        float _2771 = (cbSceneParam._m0[77u].w * _2768) / _2754;
        float _2772 = _2771 + cbSceneParam._m0[79u].w;
        float _2773 = cbSceneParam._m0[79u].w - _2767;
        float _2779 = sqrt(((_2766 * _2766) + (_2767 * _2767)) + (_2769 * _2769));
        float _2782 = (1.0 - (cbSceneParam._m0[77u].w / _2754)) * _2779;
        float _2787 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2789 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2942;
        if (abs((_2768 - _2771) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2942 = ((((_2772 > 0.0) ? exp2(_2787 * _2772) : (2.0 - exp2(_2789 * _2772))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2782;
        }
        else
        {
            float _2902 = 1.0 / cbSceneParam._m0[80u].x;
            float _2903 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : max(_2772, _2773));
            float _2904 = isnan(_2773) ? _2772 : (isnan(_2772) ? _2773 : min(_2772, _2773));
            float _2913 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : min(_2903, 0.0));
            float _2914 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : min(_2904, 0.0));
            _2942 = ((abs(_2779 / _2768) * cbSceneParam._m0[80u].y) * ((((_2913 - _2914) * 2.0) - ((exp2(_2787 * (isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0)))) - exp2(_2787 * (isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0))))) * _2902)) - ((exp2(_2789 * _2913) - exp2(_2789 * _2914)) * _2902))) + (_2782 * cbSceneParam._m0[80u].z);
        }
        vec4 _2944 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, 1.0), 0.0);
        float _2953 = exp2((_2942 * (-1.44269502162933349609375)) * (1.0 - _2944.w));
        float _2954 = log2(_2953);
        float _2970 = log2(_2699);
        _2791 = (exp2(_2970 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].x)) * _2944.x) / cbSceneParam._m0[78u].x)) + _2696;
        _2793 = (exp2(_2970 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].y)) * _2944.y) / cbSceneParam._m0[78u].y)) + _2697;
        _2795 = (exp2(_2970 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].z)) * _2944.z) / cbSceneParam._m0[78u].z)) + _2698;
        _2797 = _2953 * _2699;
    }
    else
    {
        _2791 = _2696;
        _2793 = _2697;
        _2795 = _2698;
        _2797 = _2699;
    }
    float _2809 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2810 = _2809 == 3.0;
    float _2811 = log2(_2797);
    float _2818 = exp2(_2811 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2641 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _933))) + ((_2647 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1738)) * cbPerFrame._m0[3u].x));
    float _2819 = exp2(_2811 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2643 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _933))) + ((_2649 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1738)) * cbPerFrame._m0[3u].x));
    float _2820 = exp2(_2811 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2645 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _933))) + ((_2651 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1738)) * cbPerFrame._m0[3u].x));
    float _2829 = (_2809 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2829 * (_2810 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2791)));
    SV_Target.y = _2829 * (_2810 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2793)));
    SV_Target.z = _2829 * (_2810 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2795)));
    SV_Target.w = cbInstanceData._m0[_2671].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2671].w;
}


