#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1062;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _237 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _237 + 1u;
    uint _246 = _237 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_237].x * cbInstanceData._m0[_237].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _276 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _282 = _276.x * cbMtdParam._m0[9u].x;
    float _283 = _276.y * cbMtdParam._m0[9u].y;
    float _284 = _276.z * cbMtdParam._m0[9u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _306 = _302.z;
    float _311 = (_302.x * 2.0) + (-1.0);
    float _313 = (_302.y * 2.0) + (-1.0);
    float _314 = dot(vec2(_311, _313), vec2(_311, _313));
    float _3655 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _320 = sqrt(1.0 - (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))));
    vec4 _337 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _339 = _337.x;
    float _340 = 1.0 - _339;
    float _349 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _352 = ((isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : min(_349, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _361 = (_352 - ((((((_339 - _340) * cbMtdParam._m0[24u].z) + _340) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _352))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3676 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _369 = (_362 * (cbMtdParam._m0[17u].x - _282)) + _282;
    float _370 = (_362 * (cbMtdParam._m0[17u].y - _283)) + _283;
    float _371 = (_362 * (cbMtdParam._m0[17u].z - _284)) + _284;
    vec4 _384 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _256) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _257) + cbTextureTilingScale._m0[19u].w));
    float _386 = _384.x;
    float _387 = 1.0 - _386;
    float _416 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_386 - _387) * cbMtdParam._m0[24u].w) + _387) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3687 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _425 = ((((cbMtdParam._m0[10u].x - _369) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _417) + _369;
    float _426 = ((((cbMtdParam._m0[10u].y - _370) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _417) + _370;
    float _427 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _371)) * _417) + _371;
    vec4 _441 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _448 = (_441.x * 2.0) + (-1.0);
    float _449 = (_441.y * 2.0) + (-1.0);
    float _450 = dot(vec2(_448, _449), vec2(_448, _449));
    float _3698 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _458 = (_362 * (_441.z - _306)) + _306;
    float _461 = ((cbMtdParam._m0[23u].y - _458) * _417) + _458;
    vec4 _483 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _256) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _257) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _489 = (_483.x * 2.0) + (-1.0);
    float _490 = (_483.y * 2.0) + (-1.0);
    float _491 = dot(vec2(_489, _490), vec2(_489, _490));
    float _3709 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _508 = (((_448 - _311) + (cbMtdParam._m0[21u].x * _311)) * _362) + _311;
    float _509 = (((_449 - _313) + (cbMtdParam._m0[21u].x * _313)) * _362) + _313;
    float _510 = (_362 * (sqrt(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) - _320)) + _320;
    float _521 = (((_489 - _508) + (_508 * cbMtdParam._m0[22u].z)) * _417) + _508;
    float _522 = (((_490 - _509) + (_509 * cbMtdParam._m0[22u].z)) * _417) + _509;
    float _523 = ((sqrt(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) - _510) * _417) + _510;
    float _525 = cbMtdParam._m0[22u].x + _302.w;
    float _528 = fma(_523, _224 * NORMAL.x, fma(_522, _231 * TANGENT.x, (_217 * _209) * _521));
    float _531 = fma(_523, _224 * NORMAL.y, fma(_522, _231 * TANGENT.y, (_217 * _210) * _521));
    float _534 = fma(_523, _224 * NORMAL.z, fma(_522, _231 * TANGENT.z, (_217 * _211) * _521));
    float _538 = inversesqrt(dot(vec3(_528, _531, _534), vec3(_528, _531, _534)));
    float _539 = _538 * _528;
    float _540 = _538 * _531;
    float _541 = _538 * _534;
    float _3720 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _542 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3742 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _3753 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3764 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _560 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _610 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _600);
    float _611 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _600);
    float _612 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _600);
    float _616 = inversesqrt(dot(vec3(_610, _611, _612), vec3(_610, _611, _612)));
    float _617 = _610 * _616;
    float _618 = _611 * _616;
    float _619 = _612 * _616;
    float _625 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _626 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _647 = fma(_541, cbSceneParam._m0[5u].z, fma(_540, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _539));
    float _650 = fma(_541, cbSceneParam._m0[6u].z, fma(_540, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _539));
    float _653 = fma(_541, cbSceneParam._m0[7u].z, fma(_540, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _539));
    uint _667 = (_237 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _673 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_667].x;
    float _674 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_667].y;
    float _675 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * cbInstanceData._m0[_667].z;
    float _3775 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _678 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    vec4 _687 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _625, cbSceneParam._m0[86u].y * _626));
    float _691 = ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * TEXCOORD_5.w) * _687.x;
    float _692 = dot(vec3(_539, _540, _541), vec3(_617, _618, _619));
    float _695 = _692 * 2.0;
    float _699 = (_695 * _539) - _617;
    float _700 = (_695 * _540) - _618;
    float _701 = (_695 * _541) - _619;
    float _705 = abs(dot(vec3(_617, _618, _619), vec3(_539, _540, _541)));
    float _3808 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _707 = sqrt(_542);
    float _720 = exp2((_707 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_707 * 3.0));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1061;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _786 = fma(_760, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752));
        float _790 = fma(_760, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752));
        float _794 = fma(_760, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752));
        float _819 = _752 + _539;
        float _820 = _756 + _540;
        float _821 = _760 + _541;
        float _831 = fma(_821, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819)) - _786;
        float _832 = fma(_821, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819)) - _790;
        float _833 = fma(_821, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819)) - _794;
        float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
        float _850 = ((_837 * _831) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_786 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_837 * _832) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_790 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_837 * _833) / cbModelParam._m0[34u].z) + ((((((_794 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        float _889 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_855.x + (-0.5));
        float _891 = _889 * (_855.y + (-0.5));
        float _892 = _889 * (_855.z + (-0.5));
        float _899 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_862.x + (-0.5));
        float _901 = _899 * (_862.y + (-0.5));
        float _902 = _899 * (_862.z + (-0.5));
        float _909 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_869.x + (-0.5));
        float _911 = _909 * (_869.y + (-0.5));
        float _912 = _909 * (_869.z + (-0.5));
        float _919 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_876.x + (-0.5));
        float _921 = _919 * (_876.y + (-0.5));
        float _922 = _919 * (_876.z + (-0.5));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = _890 * 0.5;
        float _927 = _900 * 0.5;
        float _928 = _910 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _943 = (dot(vec3(_539, _540, _541), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _953 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3856 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_955 + 1.0))) + _960) * _923;
        float _970 = _891 * 0.5;
        float _971 = _901 * 0.5;
        float _972 = _911 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_539, _540, _541), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3889 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_997 + 1.0))) + _1002) * _924;
        float _1012 = _892 * 0.5;
        float _1013 = _902 * 0.5;
        float _1014 = _912 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_539, _540, _541), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3922 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1039 + 1.0))) + _1044) * _925;
        _1061 = _892;
        _1063 = _891;
        _1064 = _890;
        _1065 = _902;
        _1066 = _901;
        _1067 = _900;
        _1068 = _912;
        _1069 = _911;
        _1070 = _910;
        _1071 = _925;
        _1072 = _924;
        _1073 = _923;
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _1062;
        _1063 = _1062;
        _1064 = _1062;
        _1065 = _1062;
        _1066 = _1062;
        _1067 = _1062;
        _1068 = _1062;
        _1069 = _1062;
        _1070 = _1062;
        _1071 = _1062;
        _1072 = _1062;
        _1073 = _1062;
        _1074 = 0.0;
        _1075 = 0.0;
        _1076 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1101 = fma(_760, cbModelParam._m0[30u].z, fma(_756, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _752));
        float _1105 = fma(_760, cbModelParam._m0[31u].z, fma(_756, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _752));
        float _1109 = fma(_760, cbModelParam._m0[32u].z, fma(_756, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _752));
        float _1132 = _752 + _539;
        float _1133 = _756 + _540;
        float _1134 = _760 + _541;
        float _1144 = fma(_1134, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132)) - _1101;
        float _1145 = fma(_1134, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132)) - _1105;
        float _1146 = fma(_1134, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132)) - _1109;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1101 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1105 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[35u].z) + ((((((_1109 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_539, _540, _541), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3985 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_539, _540, _541), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4018 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_539, _540, _541), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4051 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1062;
        _1371 = _1062;
        _1372 = _1062;
        _1373 = _1062;
        _1374 = _1062;
        _1375 = _1062;
        _1376 = _1062;
        _1377 = _1062;
        _1378 = _1062;
        _1379 = _1062;
        _1380 = _1062;
        _1381 = _1062;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1074)) + _1074;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1075)) + _1075;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1076)) + _1076;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _699 * 0.5;
    float _1439 = _700 * 0.5;
    float _1440 = _701 * 0.5;
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1061, _1065, _1068, _1071));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1506 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _542);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1506 : min(cbModelParam._m0[25u].z, _1506));
    float _1588;
    float _1590;
    float _1592;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1555 = fma(_760, cbModelParam._m0[13u].z, fma(_756, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752)) + cbModelParam._m0[13u].w;
        float _1559 = fma(_760, cbModelParam._m0[14u].z, fma(_756, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752)) + cbModelParam._m0[14u].w;
        float _1563 = fma(_760, cbModelParam._m0[15u].z, fma(_756, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752)) + cbModelParam._m0[15u].w;
        float _1566 = fma(_701, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _699));
        float _1569 = fma(_701, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _699));
        float _1572 = fma(_701, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _699));
        float _1600;
        if (_1566 > 0.0)
        {
            _1600 = abs((1.0 - _1555) / _1566);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1555 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1600 = frontier_phi_14_12_ladder;
        }
        float _1771;
        if (_1569 > 0.0)
        {
            _1771 = abs((1.0 - _1559) / _1569);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1559 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1771 = frontier_phi_23_19_ladder;
        }
        float _2067;
        if (_1572 > 0.0)
        {
            _2067 = abs((1.0 - _1563) / _1572);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1563 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2067 = frontier_phi_35_30_ladder;
        }
        float _2069 = isnan(_1771) ? _1600 : (isnan(_1600) ? _1771 : min(_1600, _1771));
        float _2070 = isnan(_2067) ? _2069 : (isnan(_2069) ? _2067 : min(_2069, _2067));
        float _2074 = (_2070 * _1566) + _1555;
        float _2075 = (_2070 * _1569) + _1559;
        float _2076 = (_2070 * _1572) + _1563;
        float _2077 = _2070 * 9.9999997473787516355514526367188e-05;
        float _2079 = (-1.0) - _2077;
        float _2081 = _2077 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2076 > _2081) || ((_2076 < _2079) || ((_2075 > _2081) || ((_2075 < _2079) || ((_2074 < _2079) || (_2074 > _2081))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2221 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2076, cbModelParam._m0[9u].z, fma(_2075, cbModelParam._m0[9u].y, _2074 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2076, cbModelParam._m0[10u].z, fma(_2075, cbModelParam._m0[10u].y, _2074 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2076, cbModelParam._m0[11u].z, fma(_2075, cbModelParam._m0[11u].y, _2074 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_13_35_ladder = _2221.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2221.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2221.x * cbModelParam._m0[1u].y;
        }
        _1588 = frontier_phi_13_35_ladder_2;
        _1590 = frontier_phi_13_35_ladder_1;
        _1592 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1576 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_699, _700, _701), _1507);
        _1588 = _1576.x * cbModelParam._m0[1u].y;
        _1590 = _1576.y * cbModelParam._m0[1u].y;
        _1592 = _1576.z * cbModelParam._m0[1u].y;
    }
    float _1596 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _542);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1596 : min(cbModelParam._m0[25u].w, _1596));
    float _1687;
    float _1689;
    float _1691;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1651 = fma(_760, cbModelParam._m0[21u].z, fma(_756, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752)) + cbModelParam._m0[21u].w;
        float _1655 = fma(_760, cbModelParam._m0[22u].z, fma(_756, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752)) + cbModelParam._m0[22u].w;
        float _1659 = fma(_760, cbModelParam._m0[23u].z, fma(_756, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752)) + cbModelParam._m0[23u].w;
        float _1662 = fma(_701, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _699));
        float _1665 = fma(_701, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _699));
        float _1668 = fma(_701, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _699));
        float _1776;
        if (_1662 > 0.0)
        {
            _1776 = abs((1.0 - _1651) / _1662);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1651 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1776 = frontier_phi_25_21_ladder;
        }
        float _2094;
        if (_1665 > 0.0)
        {
            _2094 = abs((1.0 - _1655) / _1665);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1655 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2094 = frontier_phi_37_32_ladder;
        }
        float _2421;
        if (_1668 > 0.0)
        {
            _2421 = abs((1.0 - _1659) / _1668);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1659 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2421 = frontier_phi_47_44_ladder;
        }
        float _2423 = isnan(_2094) ? _1776 : (isnan(_1776) ? _2094 : min(_1776, _2094));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1662) + _1651;
        float _2429 = (_2424 * _1665) + _1655;
        float _2430 = (_2424 * _1668) + _1659;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2431;
        float _2434 = _2431 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2430 > _2434) || ((_2430 < _2432) || ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 < _2432) || (_2428 > _2434))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2548 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2430, cbModelParam._m0[17u].z, fma(_2429, cbModelParam._m0[17u].y, _2428 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2430, cbModelParam._m0[18u].z, fma(_2429, cbModelParam._m0[18u].y, _2428 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2430, cbModelParam._m0[19u].z, fma(_2429, cbModelParam._m0[19u].y, _2428 * cbModelParam._m0[19u].x))), _1597);
            frontier_phi_22_47_ladder = _2548.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2548.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2548.x * cbModelParam._m0[1u].z;
        }
        _1687 = frontier_phi_22_47_ladder_2;
        _1689 = frontier_phi_22_47_ladder_1;
        _1691 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1671 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_699, _700, _701), _1597);
        _1687 = _1671.x * cbModelParam._m0[1u].z;
        _1689 = _1671.y * cbModelParam._m0[1u].z;
        _1691 = _1671.z * cbModelParam._m0[1u].z;
    }
    float _1703 = ((((1.0 - _720) * ((_707 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_720 * _707)) * _691;
    float _1704 = _1703 * ((cbModelParam._m0[1u].w * (_1687 - _1588)) + _1588);
    float _1705 = _1703 * ((cbModelParam._m0[1u].w * (_1689 - _1590)) + _1590);
    float _1706 = _1703 * ((cbModelParam._m0[1u].w * (_1691 - _1592)) + _1592);
    float _1709 = fma(_1706, cbSceneParam._m0[89u].z, fma(_1705, cbSceneParam._m0[89u].y, _1704 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1706, cbSceneParam._m0[90u].z, fma(_1705, cbSceneParam._m0[90u].y, _1704 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1706, cbSceneParam._m0[91u].z, fma(_1705, cbSceneParam._m0[91u].y, _1704 * cbSceneParam._m0[91u].x));
    float _1750 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1754 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1758 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1762 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1763 = _1750 / _1762;
    float _1764 = _1754 / _1762;
    float _1765 = _1758 / _1762;
    float _1912;
    float _1913;
    float _1914;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1792 = ((uint(_1765 > cbSceneParam._m0[59u].y) + uint(_1765 > cbSceneParam._m0[59u].x)) + uint(_1765 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1793 = _1792 + 43u;
        uint _1801 = _1792 + 44u;
        uint _1809 = _1792 + 45u;
        uint _1817 = _1792 + 46u;
        float _1828 = fma(_1762, cbSceneParam._m0[_1793].w, fma(_1758, cbSceneParam._m0[_1793].z, fma(_1754, cbSceneParam._m0[_1793].y, _1750 * cbSceneParam._m0[_1793].x)));
        float _1832 = fma(_1762, cbSceneParam._m0[_1801].w, fma(_1758, cbSceneParam._m0[_1801].z, fma(_1754, cbSceneParam._m0[_1801].y, _1750 * cbSceneParam._m0[_1801].x)));
        float _1840 = fma(_1762, cbSceneParam._m0[_1817].w, fma(_1758, cbSceneParam._m0[_1817].z, fma(_1754, cbSceneParam._m0[_1817].y, _1750 * cbSceneParam._m0[_1817].x)));
        float _1845 = cbSceneParam._m0[33u].z * _1840;
        float _1847 = cbSceneParam._m0[33u].w * _1840;
        float _1850 = fma(_1762, cbSceneParam._m0[_1809].w, fma(_1758, cbSceneParam._m0[_1809].z, fma(_1754, cbSceneParam._m0[_1809].y, _1750 * cbSceneParam._m0[_1809].x))) / _1840;
        float _1898 = (cbSceneParam._m0[33u].x - sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765))) * cbSceneParam._m0[33u].y;
        float _4177 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1905 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1845 + _1828) / _1840, (_1847 + _1832) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1847 + _1828) / _1840, (_1832 - _1845) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 - _1845) / _1840, (_1832 - _1847) / _1840), _1850), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1828 - _1847) / _1840, (_1845 + _1832) / _1840), _1850), 0.0)).x), vec4(0.25)));
        _1912 = 1.0 - (_1905 * cbSceneParam._m0[34u].x);
        _1913 = 1.0 - (_1905 * cbSceneParam._m0[34u].y);
        _1914 = 1.0 - (_1905 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1912 = 1.0;
        _1913 = 1.0;
        _1914 = 1.0;
    }
    float _1978;
    float _1980;
    float _1982;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1966 = fma(_1762, cbSceneParam._m0[63u].w, fma(_1758, cbSceneParam._m0[63u].z, fma(_1754, cbSceneParam._m0[63u].y, _1750 * cbSceneParam._m0[63u].x)));
        float _1967 = fma(_1762, cbSceneParam._m0[60u].w, fma(_1758, cbSceneParam._m0[60u].z, fma(_1754, cbSceneParam._m0[60u].y, _1750 * cbSceneParam._m0[60u].x))) / _1966;
        float _1968 = fma(_1762, cbSceneParam._m0[61u].w, fma(_1758, cbSceneParam._m0[61u].z, fma(_1754, cbSceneParam._m0[61u].y, _1750 * cbSceneParam._m0[61u].x))) / _1966;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1967 >= cbSceneParam._m0[64u].x) && (_1968 >= cbSceneParam._m0[64u].y)) && (_1967 <= cbSceneParam._m0[64u].z)) && (_1968 <= cbSceneParam._m0[64u].w))
        {
            float _2107 = fma(_1762, cbSceneParam._m0[62u].w, fma(_1758, cbSceneParam._m0[62u].z, fma(_1754, cbSceneParam._m0[62u].y, _1750 * cbSceneParam._m0[62u].x))) / _1966;
            float _2111 = isnan(cbSceneParam._m0[41u].w) ? _2107 : (isnan(_2107) ? cbSceneParam._m0[41u].w : max(_2107, cbSceneParam._m0[41u].w));
            float _2154 = (cbSceneParam._m0[33u].x - sqrt(((_1764 * _1764) + (_1763 * _1763)) + (_1765 * _1765))) * cbSceneParam._m0[33u].y;
            float _4193 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
            float _2161 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1967, cbSceneParam._m0[33u].w + _1968), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1967, _1968 - cbSceneParam._m0[33u].z), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1967 - cbSceneParam._m0[33u].z, _1968 - cbSceneParam._m0[33u].w), _2111), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1967 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1968), _2111), 0.0)).x), vec4(0.25)));
            float _2165 = 1.0 - (_2161 * cbSceneParam._m0[34u].x);
            float _2166 = 1.0 - (_2161 * cbSceneParam._m0[34u].y);
            float _2167 = 1.0 - (_2161 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2167) ? _1914 : (isnan(_1914) ? _2167 : min(_1914, _2167));
            frontier_phi_34_33_ladder_1 = isnan(_2166) ? _1913 : (isnan(_1913) ? _2166 : min(_1913, _2166));
            frontier_phi_34_33_ladder_2 = isnan(_2165) ? _1912 : (isnan(_1912) ? _2165 : min(_1912, _2165));
        }
        else
        {
            frontier_phi_34_33_ladder = _1914;
            frontier_phi_34_33_ladder_1 = _1913;
            frontier_phi_34_33_ladder_2 = _1912;
        }
        _1978 = frontier_phi_34_33_ladder_2;
        _1980 = frontier_phi_34_33_ladder_1;
        _1982 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1978 = _1912;
        _1980 = _1913;
        _1982 = _1914;
    }
    uvec4 _1987 = floatBitsToUint(cbInstanceData._m0[_237 + 5u]);
    uint _1989 = _1987.x * 14u;
    uint _1990 = _1989 + 13u;
    float _1997 = _691 + (-1.0);
    float _2002 = (cbLight._m0[_1990].x * _1997) + 1.0;
    float _2003 = (cbLight._m0[_1990].y * _1997) + 1.0;
    float _2004 = (cbLight._m0[_1990].z * _1997) + 1.0;
    float _2005 = (cbLight._m0[_1990].w * _1997) + 1.0;
    uint _2006 = _1989 + 5u;
    float _2012 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2016 = _1989 + 4u;
    float _2026 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2030 = _1989 | 1u;
    float _2041 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_539, _540, _541));
    float _2044 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_539, _540, _541));
    float _4229 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _4240 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2049 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2051 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * 0.3183098733425140380859375;
    float _2058 = ((cbLight._m0[_2006].x * _2012) * _2051) + (((cbLight._m0[_2016].x * _1978) * _2026) * _2049);
    float _2059 = ((_2012 * cbLight._m0[_2006].y) * _2051) + (((cbLight._m0[_2016].y * _1980) * _2026) * _2049);
    float _2060 = ((_2012 * cbLight._m0[_2006].z) * _2051) + (((cbLight._m0[_2016].z * _1982) * _2026) * _2049);
    uvec4 _2064 = floatBitsToUint(cbLight._m0[_1989 + 12u]);
    bool _2066 = _2064.x == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2066)
    {
        _2168 = _2058;
        _2170 = _2059;
        _2172 = _2060;
    }
    else
    {
        uint _2176 = _1989 + 6u;
        float _2192 = (dot(vec3(cbLight._m0[_1989 + 2u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4251 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2195 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2168 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _2058;
        _2170 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _2059;
        _2172 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _2060;
    }
    bool _2175 = _2064.y == 0u;
    float _2230;
    float _2232;
    float _2234;
    if (_2175)
    {
        _2230 = _2168;
        _2232 = _2170;
        _2234 = _2172;
    }
    else
    {
        uint _2392 = _1989 + 7u;
        float _2408 = (dot(vec3(cbLight._m0[_1989 + 3u].xyz), vec3(_539, _540, _541)) * 0.5) + 0.5;
        float _2409 = _2408 * _2408;
        float _4267 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2410 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2411 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2230 = (((cbLight._m0[_2392].x * 0.3183098733425140380859375) * _2410) * _2411) + _2168;
        _2232 = (((cbLight._m0[_2392].y * 0.3183098733425140380859375) * _2410) * _2411) + _2170;
        _2234 = (((cbLight._m0[_2392].z * 0.3183098733425140380859375) * _2410) * _2411) + _2172;
    }
    uint _2237 = _1989 + 8u;
    float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _542) * 0.949999988079071044921875);
    float _2251 = _2250 * _2250;
    float _2252 = cbLight._m0[_1989].x + _617;
    float _2253 = cbLight._m0[_1989].y + _618;
    float _2254 = cbLight._m0[_1989].z + _619;
    float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
    float _2259 = _2258 * _2252;
    float _2260 = _2258 * _2253;
    float _2261 = _2258 * _2254;
    float _2262 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1989].xyz));
    float _4283 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _4294 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _2266 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2267 = dot(vec3(_539, _540, _541), vec3(_2259, _2260, _2261));
    float _4305 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2271 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2259, _2260, _2261));
    float _4316 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2275 = _2251 * _2251;
    float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
    float _2290 = (exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2291 = 1.0 - _2251;
    float _2302 = (0.5 / (((_2266 * ((_2265 * _2291) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2291) + _2251) * _2265))) * _2265;
    float _4327 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2304 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
    uint _2318 = _1989 + 9u;
    float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _542) * 0.949999988079071044921875);
    float _2330 = _2329 * _2329;
    float _2331 = cbLight._m0[_2030].x + _617;
    float _2332 = cbLight._m0[_2030].y + _618;
    float _2333 = cbLight._m0[_2030].z + _619;
    float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
    float _2338 = _2337 * _2331;
    float _2339 = _2337 * _2332;
    float _2340 = _2337 * _2333;
    float _2341 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2030].xyz));
    float _4338 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2345 = dot(vec3(_539, _540, _541), vec3(_2338, _2339, _2340));
    float _4349 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2349 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2338, _2339, _2340));
    float _4360 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2353 = _2330 * _2330;
    float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
    float _2366 = (exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2367 = 1.0 - _2330;
    float _2377 = (0.5 / (((_2266 * ((_2344 * _2367) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2367) + _2330) * _2344))) * _2344;
    float _4371 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2379 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
    float _2389 = (((_2366 * cbLight._m0[_2318].x) * _2379) * _2012) + ((((cbLight._m0[_2237].x * _1978) * _2290) * _2304) * _2026);
    float _2390 = (((_2366 * cbLight._m0[_2318].y) * _2379) * _2012) + ((((cbLight._m0[_2237].y * _1980) * _2290) * _2304) * _2026);
    float _2391 = (((_2366 * cbLight._m0[_2318].z) * _2379) * _2012) + ((((cbLight._m0[_2237].z * _1982) * _2290) * _2304) * _2026);
    float _2447;
    float _2449;
    float _2451;
    if (_2066)
    {
        _2447 = _2389;
        _2449 = _2390;
        _2451 = _2391;
    }
    else
    {
        uint _2453 = _1989 + 2u;
        uint _2457 = _1989 + 10u;
        float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _542) * 0.949999988079071044921875);
        float _2472 = _2471 * _2471;
        float _2473 = cbLight._m0[_2453].x + _617;
        float _2474 = cbLight._m0[_2453].y + _618;
        float _2475 = cbLight._m0[_2453].z + _619;
        float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
        float _2480 = _2479 * _2473;
        float _2481 = _2479 * _2474;
        float _2482 = _2479 * _2475;
        float _2483 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2453].xyz));
        float _4382 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2487 = dot(vec3(_539, _540, _541), vec3(_2480, _2481, _2482));
        float _4393 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2491 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2480, _2481, _2482));
        float _4404 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2495 = _2472 * _2472;
        float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
        float _2508 = (exp2(log2(1.0 - (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2509 = 1.0 - _2472;
        float _2519 = (0.5 / (((_2266 * ((_2486 * _2509) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2509) + _2472) * _2486))) * _2486;
        float _4415 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2521 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
        float _2522 = isnan(1.0) ? _2004 : (isnan(_2004) ? 1.0 : min(_2004, 1.0));
        _2447 = (((_2508 * cbLight._m0[_2457].x) * _2521) * _2522) + _2389;
        _2449 = (((_2508 * cbLight._m0[_2457].y) * _2521) * _2522) + _2390;
        _2451 = (((_2508 * cbLight._m0[_2457].z) * _2521) * _2522) + _2391;
    }
    float _2553;
    float _2555;
    float _2557;
    if (_2175)
    {
        _2553 = _2447;
        _2555 = _2449;
        _2557 = _2451;
    }
    else
    {
        uint _2564 = _1989 + 3u;
        uint _2568 = _1989 + 11u;
        float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _542) * 0.949999988079071044921875);
        float _2583 = _2582 * _2582;
        float _2584 = cbLight._m0[_2564].x + _617;
        float _2585 = cbLight._m0[_2564].y + _618;
        float _2586 = cbLight._m0[_2564].z + _619;
        float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
        float _2591 = _2590 * _2584;
        float _2592 = _2590 * _2585;
        float _2593 = _2590 * _2586;
        float _2594 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_2564].xyz));
        float _4431 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2597 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2598 = dot(vec3(_539, _540, _541), vec3(_2591, _2592, _2593));
        float _4442 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2601 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2602 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2591, _2592, _2593));
        float _4453 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2606 = _2583 * _2583;
        float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
        float _2619 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2620 = 1.0 - _2583;
        float _2630 = (0.5 / (((_2266 * ((_2597 * _2620) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2266 * _2620) + _2583) * _2597))) * _2597;
        float _4464 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2632 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
        float _2633 = isnan(1.0) ? _2005 : (isnan(_2005) ? 1.0 : min(_2005, 1.0));
        _2553 = (((_2619 * cbLight._m0[_2568].x) * _2632) * _2633) + _2447;
        _2555 = (((_2619 * cbLight._m0[_2568].y) * _2632) * _2633) + _2449;
        _2557 = (((_2619 * cbLight._m0[_2568].z) * _2632) * _2633) + _2451;
    }
    float _2699;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    if (_1987.y == 0u)
    {
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.x;
        uint _2666 = uint((float(_2654.y) * floor(float(uint(cbSceneParam._m0[85u].y * _626) / _2655))) + floor(float(uint(cbSceneParam._m0[85u].x * _625) / _2655)));
        float _2676 = (log2(_1765 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2677 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        uint _2680 = uint(isnan(14.0) ? _2677 : (isnan(_2677) ? 14.0 : min(_2677, 14.0)));
        uvec4 _2685 = texelFetch(g_lightClusterGridBuffer, int(((_2680 << 2u) + (_2666 << 6u)) >> 2u));
        uint _2686 = _2685.x;
        uint _2687 = _2654.z;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        if (((((1u << ((_2687 >> 4u) & 15u)) + 4294967295u) & _2686) == 0u) || ((_2687 & 240u) == 0u))
        {
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
        }
        else
        {
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            uint _2917 = 0u;
            uint _2926;
            bool _2927;
            for (;;)
            {
                _2926 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                _2927 = _2926 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2927)
                {
                    frontier_phi_66_pred = _2916;
                    frontier_phi_66_pred_1 = _2915;
                    frontier_phi_66_pred_2 = _2914;
                    frontier_phi_66_pred_3 = _2913;
                    frontier_phi_66_pred_4 = _2912;
                    frontier_phi_66_pred_5 = _2911;
                }
                else
                {
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    uint _3041;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2914;
                    _3039 = _2915;
                    _3040 = _2916;
                    _3041 = _2926;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    for (;;)
                    {
                        uint _3045 = uint(findLSB(_3041)) + (_2917 << 5u);
                        uint _3042 = (_3041 + 4294967295u) & _3041;
                        uint _3047 = _3045 * 48u;
                        vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 3u)).x));
                        uint _3067 = (_3045 * 48u) + 4u;
                        vec4 _3080 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3067)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3067 + 3u)).x));
                        uint _3086 = (_3045 * 48u) + 8u;
                        vec3 _3097 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x));
                        float _3101 = _3061.x - _1763;
                        float _3102 = _3061.y - _1764;
                        float _3103 = _3061.z - _1765;
                        float _3104 = dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103));
                        float _3107 = inversesqrt(_3104);
                        float _3108 = _3107 * _3101;
                        float _3109 = _3107 * _3102;
                        float _3110 = _3107 * _3103;
                        float _3111 = dot(vec3(_647, _650, _653), vec3(_3108, _3109, _3110));
                        float _3116 = 1.0 - (_3104 * _3061.w);
                        float _4490 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3117 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3118 = sqrt(_3104) * _3080.w;
                        float _3121 = 1.39999997615814208984375 / (_3118 + 1.39999997615814208984375);
                        float _3122 = _3121 * _3121;
                        float _3125 = ((1.0 - _3122) * _3111) + _3122;
                        float _3128 = _3118 * _3118;
                        float _3132 = ((isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))) * _3117) / ((_3128 * 0.699999988079071044921875) + 1.0);
                        float _3136 = (-0.0) - _1763;
                        float _3137 = (-0.0) - _1764;
                        float _3138 = (-0.0) - _1765;
                        float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                        float _3143 = _3142 * _3136;
                        float _3144 = _3142 * _3137;
                        float _3145 = _3142 * _3138;
                        float _3152 = exp2(log2(1.0 / ((_3128 * 3.5) + 5.0)) * 0.25);
                        float _3153 = 1.0 - _707;
                        float _3160 = sqrt(1.0 - ((1.0 - (_3153 * _3153)) * (1.0 - (_3152 * _3152))));
                        float _3161 = _3160 * _3160;
                        float _3162 = _3161 * _3161;
                        float _3163 = _3143 + _3108;
                        float _3164 = _3144 + _3109;
                        float _3165 = _3145 + _3110;
                        float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                        float _3173 = dot(vec3(_647, _650, _653), vec3(_3143, _3144, _3145));
                        float _4506 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3176 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3177 = dot(vec3(_647, _650, _653), vec3(_3169 * _3163, _3169 * _3164, _3169 * _3165));
                        float _4517 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3180 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3184 = ((_3180 * _3180) * (_3162 + (-1.0))) + 1.0;
                        float _3185 = _3121 * _3161;
                        float _3186 = _3185 * _3185;
                        float _3189 = ((1.0 - _3186) * _3111) + _3186;
                        float _4528 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3190 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3191 = 1.0 - _3161;
                        float _3201 = (0.5 / (((_3190 * ((_3176 * _3191) + _3161)) + 9.9999999392252902907785028219223e-09) + (((_3190 * _3191) + _3161) * _3176))) * _3190;
                        float _4539 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3212 = (((_3162 * 3.1415927410125732421875) * (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) / ((_3184 * _3184) * ((_3128 * 2.1991131305694580078125) + 3.141590118408203125))) * _3117;
                        _2970 = (_3132 * _3080.x) + _3038;
                        _2971 = (_3132 * _3080.y) + _3039;
                        _2972 = (_3132 * _3080.z) + _3040;
                        _2967 = (_3212 * _3097.x) + _3035;
                        _2968 = (_3212 * _3097.y) + _3036;
                        _2969 = (_3212 * _3097.z) + _3037;
                        if (_3042 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _2970;
                            _3039 = _2971;
                            _3040 = _2972;
                            _3041 = _3042;
                        }
                    }
                    frontier_phi_66_pred = _2972;
                    frontier_phi_66_pred_1 = _2971;
                    frontier_phi_66_pred_2 = _2970;
                    frontier_phi_66_pred_3 = _2969;
                    frontier_phi_66_pred_4 = _2968;
                    frontier_phi_66_pred_5 = _2967;
                }
                _2777 = frontier_phi_66_pred;
                _2775 = frontier_phi_66_pred_1;
                _2773 = frontier_phi_66_pred_2;
                _2771 = frontier_phi_66_pred_3;
                _2769 = frontier_phi_66_pred_4;
                _2767 = frontier_phi_66_pred_5;
                uint _2918 = _2917 + 1u;
                if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2911 = _2767;
                    _2912 = _2769;
                    _2913 = _2771;
                    _2914 = _2773;
                    _2915 = _2775;
                    _2916 = _2777;
                    _2917 = _2918;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
        }
        uvec4 _2780 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2781 = _2780.z;
        uint _2783 = (_2781 >> 8u) & 15u;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        if (((4294967295u << _2783) & _2686) == 0u)
        {
            _2879 = _2766;
            _2881 = _2768;
            _2883 = _2770;
            _2885 = _2772;
            _2887 = _2774;
            _2889 = _2776;
        }
        else
        {
            float _2904 = inversesqrt(dot(vec3(_1763, _1764, _1765), vec3(_1763, _1764, _1765)));
            float _2905 = _2904 * _1763;
            float _2906 = _2904 * _1764;
            float _2907 = _2904 * _1765;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2783 < ((_2781 >> 12u) & 15u))
            {
                float _2880;
                float _2882;
                float _2884;
                float _2886;
                float _2888;
                float _2890;
                float _3018 = _2766;
                float _3019 = _2768;
                float _3020 = _2770;
                float _3021 = _2772;
                float _3022 = _2774;
                float _3023 = _2776;
                uint _3024 = _2783;
                uint _3033;
                bool _3034;
                for (;;)
                {
                    _3033 = texelFetch(g_lightClassification, int((((_2680 << 5u) + (_2666 << 9u)) + (_3024 << 2u)) >> 2u)).x;
                    _3034 = _3033 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3034)
                    {
                        frontier_phi_72_pred = _3023;
                        frontier_phi_72_pred_1 = _3022;
                        frontier_phi_72_pred_2 = _3021;
                        frontier_phi_72_pred_3 = _3020;
                        frontier_phi_72_pred_4 = _3019;
                        frontier_phi_72_pred_5 = _3018;
                    }
                    else
                    {
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3230 = _3018;
                        float _3231 = _3019;
                        float _3232 = _3020;
                        float _3233 = _3021;
                        float _3234 = _3022;
                        float _3235 = _3023;
                        uint _3236 = _3033;
                        uint _3237;
                        vec4 _3262;
                        float _3263;
                        vec4 _3278;
                        vec3 _3290;
                        vec4 _3306;
                        vec4 _3322;
                        float _3368;
                        bool _3369;
                        for (;;)
                        {
                            uint _3247 = ((_3024 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3236));
                            _3237 = (_3236 + 4294967295u) & _3236;
                            uint _3249 = _3247 * 40u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            _3263 = _3262.w;
                            uint _3265 = (_3247 * 40u) + 4u;
                            _3278 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 3u)).x));
                            uint _3280 = (_3247 * 40u) + 8u;
                            _3290 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x));
                            uint _3293 = (_3247 * 40u) + 16u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3309 = (_3247 * 40u) + 20u;
                            _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3324 = (_3247 * 40u) + 24u;
                            vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3343 = (_3247 * 40u) + 28u;
                            vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3368 = fma(_1765, _3356.z, fma(_1764, _3356.y, _3356.x * _1763)) + _3356.w;
                            _3369 = !((fma(_1765, _3337.z, fma(_1764, _3337.y, _3337.x * _1763)) + _3337.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3369)
                            {
                                float _3396 = _3262.x - _1763;
                                float _3397 = _3262.y - _1764;
                                float _3398 = _3262.z - _1765;
                                float _3399 = dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398));
                                float _3402 = inversesqrt(_3399);
                                float _3403 = _3402 * _3396;
                                float _3404 = _3402 * _3397;
                                float _3405 = _3402 * _3398;
                                float _3409 = 1.0 - (_3399 / (_3263 * _3263));
                                float _4550 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3410 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3414 = sqrt(_3399) * _3278.w;
                                float _3416 = 1.39999997615814208984375 / (_3414 + 1.39999997615814208984375);
                                float _3417 = _3416 * _3416;
                                float _3420 = ((1.0 - _3417) * dot(vec3(_3403, _3404, _3405), vec3(_647, _650, _653))) + _3417;
                                float _3423 = _3414 * _3414;
                                float _3427 = (fma(_1765, _3306.z, fma(_1764, _3306.y, _3306.x * _1763)) + _3306.w) / _3368;
                                float _3428 = (fma(_1765, _3322.z, fma(_1764, _3322.y, _3322.x * _1763)) + _3322.w) / _3368;
                                float _3432 = 1.0 - dot(vec2(_3427, _3428), vec2(_3427, _3428));
                                float _4566 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                                float _3433 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3434 = _3433 * (((isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))) * _3410) / ((_3423 * 0.699999988079071044921875) + 1.0));
                                float _3446 = exp2(log2(1.0 / ((_3423 * 3.5) + 5.0)) * 0.25);
                                float _3447 = 1.0 - _707;
                                float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                                float _3455 = _3454 * _3454;
                                float _3456 = _3455 * _3455;
                                float _3457 = _3403 - _2905;
                                float _3458 = _3404 - _2906;
                                float _3459 = _3405 - _2907;
                                float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                                float _3467 = dot(vec3(_647, _650, _653), vec3((-0.0) - _2905, (-0.0) - _2906, (-0.0) - _2907));
                                float _4577 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                                float _3470 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3471 = dot(vec3(_647, _650, _653), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                                float _4588 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3474 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                                float _3479 = _3416 * _3455;
                                float _3480 = _3479 * _3479;
                                float _3486 = ((1.0 - _3480) * dot(vec3(_647, _650, _653), vec3(_3403, _3404, _3405))) + _3480;
                                float _4599 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3488 = 1.0 - _3455;
                                float _3498 = (0.5 / (((_3487 * ((_3470 * _3488) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3487 * _3488) + _3455) * _3470))) * _3487;
                                float _4610 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3508 = (_3433 * _3410) * (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) / ((_3478 * _3478) * ((_3423 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3434 * _3278.y;
                                frontier_phi_78_pred_1 = _3434 * _3278.x;
                                frontier_phi_78_pred_2 = _3508 * _3290.z;
                                frontier_phi_78_pred_3 = _3508 * _3290.y;
                                frontier_phi_78_pred_4 = _3508 * _3290.x;
                                frontier_phi_78_pred_5 = _3434 * _3278.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3516 = frontier_phi_78_pred;
                            _3515 = frontier_phi_78_pred_1;
                            _3514 = frontier_phi_78_pred_2;
                            _3513 = frontier_phi_78_pred_3;
                            _3512 = frontier_phi_78_pred_4;
                            _3517 = frontier_phi_78_pred_5;
                            _3220 = _3515 + _3233;
                            _3221 = _3516 + _3234;
                            _3222 = _3517 + _3235;
                            _3217 = _3512 + _3230;
                            _3218 = _3513 + _3231;
                            _3219 = _3514 + _3232;
                            if (_3237 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3237;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3222;
                        frontier_phi_72_pred_1 = _3221;
                        frontier_phi_72_pred_2 = _3220;
                        frontier_phi_72_pred_3 = _3219;
                        frontier_phi_72_pred_4 = _3218;
                        frontier_phi_72_pred_5 = _3217;
                    }
                    _2890 = frontier_phi_72_pred;
                    _2888 = frontier_phi_72_pred_1;
                    _2886 = frontier_phi_72_pred_2;
                    _2884 = frontier_phi_72_pred_3;
                    _2882 = frontier_phi_72_pred_4;
                    _2880 = frontier_phi_72_pred_5;
                    uint _3025 = _3024 + 1u;
                    if (_3025 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3018 = _2880;
                        _3019 = _2882;
                        _3020 = _2884;
                        _3021 = _2886;
                        _3022 = _2888;
                        _3023 = _2890;
                        _3024 = _3025;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2890;
                frontier_phi_60_61_ladder_1 = _2888;
                frontier_phi_60_61_ladder_2 = _2884;
                frontier_phi_60_61_ladder_3 = _2882;
                frontier_phi_60_61_ladder_4 = _2880;
                frontier_phi_60_61_ladder_5 = _2886;
            }
            else
            {
                frontier_phi_60_61_ladder = _2776;
                frontier_phi_60_61_ladder_1 = _2774;
                frontier_phi_60_61_ladder_2 = _2770;
                frontier_phi_60_61_ladder_3 = _2768;
                frontier_phi_60_61_ladder_4 = _2766;
                frontier_phi_60_61_ladder_5 = _2772;
            }
            _2879 = frontier_phi_60_61_ladder_4;
            _2881 = frontier_phi_60_61_ladder_3;
            _2883 = frontier_phi_60_61_ladder_2;
            _2885 = frontier_phi_60_61_ladder_5;
            _2887 = frontier_phi_60_61_ladder_1;
            _2889 = frontier_phi_60_61_ladder;
        }
        float _2894 = isnan(1.0) ? _691 : (isnan(_691) ? 1.0 : min(_691, 1.0));
        _2699 = (_2894 * _2885) + _2230;
        _2701 = (_2894 * _2887) + _2232;
        _2703 = (_2894 * _2889) + _2234;
        _2705 = ((_2879 * 0.039999999105930328369140625) * _2894) + _2553;
        _2707 = ((_2881 * 0.039999999105930328369140625) * _2894) + _2555;
        _2709 = ((_2883 * 0.039999999105930328369140625) * _2894) + _2557;
    }
    else
    {
        _2699 = _2230;
        _2701 = _2232;
        _2703 = _2234;
        _2705 = _2553;
        _2707 = _2555;
        _2709 = _2557;
    }
    float _4626 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4637 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4648 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    uint _2729 = _237 + 6u;
    float _2737 = _625 / cbSceneParam._m0[86u].x;
    float _2738 = _626 / cbSceneParam._m0[86u].y;
    vec4 _2752 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, (log2((isnan(cbSceneParam._m0[77u].w) ? _560 : (isnan(_560) ? cbSceneParam._m0[77u].w : min(_560, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2754 = _2752.x;
    float _2755 = _2752.y;
    float _2756 = _2752.z;
    float _2757 = _2752.w;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_560 > cbSceneParam._m0[78u].w)
    {
        float _2791 = isnan(_560) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _560 : min(cbSceneParam._m0[80u].w, _560));
        float _2792 = _2791 / _560;
        float _2803 = _2792 * _610;
        float _2804 = _611 * _2792;
        float _2805 = (-0.0) - _2804;
        float _2807 = _2792 * _612;
        float _2809 = (cbSceneParam._m0[77u].w * _2805) / _2791;
        float _2810 = _2809 + cbSceneParam._m0[79u].w;
        float _2811 = cbSceneParam._m0[79u].w - _2804;
        float _2817 = sqrt(((_2803 * _2803) + (_2804 * _2804)) + (_2807 * _2807));
        float _2820 = (1.0 - (cbSceneParam._m0[77u].w / _2791)) * _2817;
        float _2825 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2827 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2980;
        if (abs((_2805 - _2809) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2980 = ((((_2810 > 0.0) ? exp2(_2825 * _2810) : (2.0 - exp2(_2827 * _2810))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2820;
        }
        else
        {
            float _2940 = 1.0 / cbSceneParam._m0[80u].x;
            float _2941 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : max(_2810, _2811));
            float _2942 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : min(_2810, _2811));
            float _2951 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : min(_2941, 0.0));
            float _2952 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : min(_2942, 0.0));
            _2980 = ((abs(_2817 / _2805) * cbSceneParam._m0[80u].y) * ((((_2951 - _2952) * 2.0) - ((exp2(_2825 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0)))) - exp2(_2825 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0))))) * _2940)) - ((exp2(_2827 * _2951) - exp2(_2827 * _2952)) * _2940))) + (_2820 * cbSceneParam._m0[80u].z);
        }
        vec4 _2982 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2737, _2738, 1.0), 0.0);
        float _2991 = exp2((_2980 * (-1.44269502162933349609375)) * (1.0 - _2982.w));
        float _2992 = log2(_2991);
        float _3008 = log2(_2757);
        _2829 = (exp2(_3008 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].x)) * _2982.x) / cbSceneParam._m0[78u].x)) + _2754;
        _2831 = (exp2(_3008 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].y)) * _2982.y) / cbSceneParam._m0[78u].y)) + _2755;
        _2833 = (exp2(_3008 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].z)) * _2982.z) / cbSceneParam._m0[78u].z)) + _2756;
        _2835 = _2991 * _2757;
    }
    else
    {
        _2829 = _2754;
        _2831 = _2755;
        _2833 = _2756;
        _2835 = _2757;
    }
    float _2847 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2848 = _2847 == 3.0;
    float _2849 = log2(_2835);
    float _2856 = exp2(_2849 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2699 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _691))) + ((_2705 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1496)) * cbPerFrame._m0[3u].x));
    float _2857 = exp2(_2849 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2701 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _691))) + ((_2707 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1496)) * cbPerFrame._m0[3u].x));
    float _2858 = exp2(_2849 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2703 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _691))) + ((_2709 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1496)) * cbPerFrame._m0[3u].x));
    float _2867 = (_2847 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2867 * (_2848 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2829)));
    SV_Target.y = _2867 * (_2848 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2831)));
    SV_Target.z = _2867 * (_2848 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2833)));
    SV_Target.w = cbInstanceData._m0[_2729].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2729].w;
}


