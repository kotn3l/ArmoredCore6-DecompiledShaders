#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1199;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _293 = _287.x * cbMtdParam._m0[11u].x;
    float _294 = _287.y * cbMtdParam._m0[11u].y;
    float _295 = _287.z * cbMtdParam._m0[11u].z;
    vec4 _314 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _355 = _353.x;
    float _365 = dot(vec4(_355, _353.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _382 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_355 - _365) * cbMtdParam._m0[24u].x) + _365) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3789 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _383 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _390 = (_383 * ((_314.x * cbMtdParam._m0[12u].x) - _293)) + _293;
    float _391 = (_383 * ((_314.y * cbMtdParam._m0[12u].y) - _294)) + _294;
    float _392 = (_383 * ((_314.z * cbMtdParam._m0[12u].z) - _295)) + _295;
    vec4 _409 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _266) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _267) + cbTextureTilingScale._m0[3u].w));
    vec4 _429 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _431 = _429.x;
    float _441 = dot(vec4(_431, _429.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _455 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_431 - _441) * cbMtdParam._m0[24u].x) + _441) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3800 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _463 = (_456 * ((_409.x * cbMtdParam._m0[13u].x) - _390)) + _390;
    float _464 = (_456 * ((_409.y * cbMtdParam._m0[13u].y) - _391)) + _391;
    float _465 = (_456 * ((_409.z * cbMtdParam._m0[13u].z) - _392)) + _392;
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _497 = _495.x;
    float _498 = _495.y;
    float _499 = _495.z;
    float _506 = ((_478.x - _497) * _383) + _497;
    float _507 = ((_478.y - _498) * _383) + _498;
    float _508 = ((_478.z - _499) * _383) + _499;
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _266) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _533 = ((_520.z - _508) * _456) + _508;
    float _536 = ((((_520.x - _506) * _456) + _506) * 2.0) + (-1.0);
    float _538 = ((((_520.y - _507) * _456) + _507) * 2.0) + (-1.0);
    float _539 = dot(vec2(_536, _538), vec2(_536, _538));
    float _3811 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _544 = sqrt(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))));
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _571 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _573 = _571.x;
    float _574 = 1.0 - _573;
    float _602 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_573 - _574) * cbMtdParam._m0[24u].w) + _574) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3822 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _611 = ((((cbMtdParam._m0[10u].x - _463) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _603) + _463;
    float _612 = ((((cbMtdParam._m0[10u].y - _464) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _603) + _464;
    float _613 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _465)) * _603) + _465;
    float _617 = ((cbMtdParam._m0[23u].y - _533) * _603) + _533;
    vec4 _636 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _642 = (_636.x * 2.0) + (-1.0);
    float _643 = (_636.y * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _3833 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _660 = (_603 * (((cbMtdParam._m0[22u].z * _536) - _536) + _642)) + _536;
    float _661 = (_603 * (((cbMtdParam._m0[22u].z * _538) - _538) + _643)) + _538;
    float _662 = (_603 * (sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) - _544)) + _544;
    float _664 = cbMtdParam._m0[22u].x + _557.w;
    float _667 = fma(_662, _234 * NORMAL.x, fma(_661, _241 * TANGENT.x, (_227 * _219) * _660));
    float _670 = fma(_662, _234 * NORMAL.y, fma(_661, _241 * TANGENT.y, (_227 * _220) * _660));
    float _673 = fma(_662, _234 * NORMAL.z, fma(_661, _241 * TANGENT.z, (_227 * _221) * _660));
    float _677 = inversesqrt(dot(vec3(_667, _670, _673), vec3(_667, _670, _673)));
    float _678 = _677 * _667;
    float _679 = _677 * _670;
    float _680 = _677 * _673;
    float _3844 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _681 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3866 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3877 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3888 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _699 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _750 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _740);
    float _751 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _740);
    float _752 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _740);
    float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
    float _757 = _750 * _756;
    float _758 = _751 * _756;
    float _759 = _752 * _756;
    float _765 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _766 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _784 = fma(_680, cbSceneParam._m0[5u].z, fma(_679, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _678));
    float _787 = fma(_680, cbSceneParam._m0[6u].z, fma(_679, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _678));
    float _790 = fma(_680, cbSceneParam._m0[7u].z, fma(_679, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _678));
    uint _804 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _810 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * cbInstanceData._m0[_804].x;
    float _811 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * cbInstanceData._m0[_804].y;
    float _812 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_804].z;
    float _3899 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _813 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _3910 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _814 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _3921 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _815 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    vec4 _824 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _765, cbSceneParam._m0[86u].y * _766));
    float _828 = ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * TEXCOORD_5.w) * _824.x;
    float _829 = dot(vec3(_678, _679, _680), vec3(_757, _758, _759));
    float _832 = _829 * 2.0;
    float _836 = (_832 * _678) - _757;
    float _837 = (_832 * _679) - _758;
    float _838 = (_832 * _680) - _759;
    float _842 = abs(dot(vec3(_757, _758, _759), vec3(_678, _679, _680)));
    float _3932 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _844 = sqrt(_681);
    float _857 = exp2((_844 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_844 * 3.0));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _893 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _897 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1198;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _923 = fma(_897, cbModelParam._m0[26u].z, fma(_893, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _889));
        float _927 = fma(_897, cbModelParam._m0[27u].z, fma(_893, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _889));
        float _931 = fma(_897, cbModelParam._m0[28u].z, fma(_893, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _889));
        float _956 = _889 + _678;
        float _957 = _893 + _679;
        float _958 = _897 + _680;
        float _968 = fma(_958, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _956)) - _923;
        float _969 = fma(_958, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _956)) - _927;
        float _970 = fma(_958, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _956)) - _931;
        float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
        float _987 = ((_974 * _968) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_923 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_974 * _969) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_927 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_974 * _970) / cbModelParam._m0[34u].z) + ((((((_931 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        float _1026 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_992.x + (-0.5));
        float _1028 = _1026 * (_992.y + (-0.5));
        float _1029 = _1026 * (_992.z + (-0.5));
        float _1036 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_999.x + (-0.5));
        float _1038 = _1036 * (_999.y + (-0.5));
        float _1039 = _1036 * (_999.z + (-0.5));
        float _1046 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1006.x + (-0.5));
        float _1048 = _1046 * (_1006.y + (-0.5));
        float _1049 = _1046 * (_1006.z + (-0.5));
        float _1056 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1013.x + (-0.5));
        float _1058 = _1056 * (_1013.y + (-0.5));
        float _1059 = _1056 * (_1013.z + (-0.5));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = _1027 * 0.5;
        float _1064 = _1037 * 0.5;
        float _1065 = _1047 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1080 = (dot(vec3(_678, _679, _680), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1090 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3980 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1092 + 1.0))) + _1097) * _1060;
        float _1107 = _1028 * 0.5;
        float _1108 = _1038 * 0.5;
        float _1109 = _1048 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_678, _679, _680), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _4013 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1134 + 1.0))) + _1139) * _1061;
        float _1149 = _1029 * 0.5;
        float _1150 = _1039 * 0.5;
        float _1151 = _1049 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_678, _679, _680), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4046 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1176 + 1.0))) + _1181) * _1062;
        _1198 = _1029;
        _1200 = _1028;
        _1201 = _1027;
        _1202 = _1039;
        _1203 = _1038;
        _1204 = _1037;
        _1205 = _1049;
        _1206 = _1048;
        _1207 = _1047;
        _1208 = _1062;
        _1209 = _1061;
        _1210 = _1060;
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
    }
    else
    {
        _1198 = _1199;
        _1200 = _1199;
        _1201 = _1199;
        _1202 = _1199;
        _1203 = _1199;
        _1204 = _1199;
        _1205 = _1199;
        _1206 = _1199;
        _1207 = _1199;
        _1208 = _1199;
        _1209 = _1199;
        _1210 = _1199;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1237 = fma(_897, cbModelParam._m0[30u].z, fma(_893, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _889));
        float _1241 = fma(_897, cbModelParam._m0[31u].z, fma(_893, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _889));
        float _1245 = fma(_897, cbModelParam._m0[32u].z, fma(_893, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _889));
        float _1268 = _889 + _678;
        float _1269 = _893 + _679;
        float _1270 = _897 + _680;
        float _1280 = fma(_1270, cbModelParam._m0[30u].z, fma(_1269, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1268)) - _1237;
        float _1281 = fma(_1270, cbModelParam._m0[31u].z, fma(_1269, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1268)) - _1241;
        float _1282 = fma(_1270, cbModelParam._m0[32u].z, fma(_1269, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1268)) - _1245;
        float _1286 = inversesqrt(dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282)));
        float _1299 = ((_1286 * _1280) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1237 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1286 * _1281) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1241 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1286 * _1282) / cbModelParam._m0[35u].z) + ((((((_1245 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        float _1336 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1303.x + (-0.5));
        float _1338 = _1336 * (_1303.y + (-0.5));
        float _1339 = _1336 * (_1303.z + (-0.5));
        float _1346 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1310.x + (-0.5));
        float _1348 = _1346 * (_1310.y + (-0.5));
        float _1349 = _1346 * (_1310.z + (-0.5));
        float _1356 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1317.x + (-0.5));
        float _1358 = _1356 * (_1317.y + (-0.5));
        float _1359 = _1356 * (_1317.z + (-0.5));
        float _1366 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1324.x + (-0.5));
        float _1368 = _1366 * (_1324.y + (-0.5));
        float _1369 = _1366 * (_1324.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_678, _679, _680), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4109 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1400 + 1.0))) + _1405) * _1370;
        float _1415 = _1338 * 0.5;
        float _1416 = _1348 * 0.5;
        float _1417 = _1358 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_678, _679, _680), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _4142 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1442 + 1.0))) + _1447) * _1371;
        float _1457 = _1339 * 0.5;
        float _1458 = _1349 * 0.5;
        float _1459 = _1359 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_678, _679, _680), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _4175 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1484 + 1.0))) + _1489) * _1372;
        _1506 = _1339;
        _1507 = _1338;
        _1508 = _1337;
        _1509 = _1349;
        _1510 = _1348;
        _1511 = _1347;
        _1512 = _1359;
        _1513 = _1358;
        _1514 = _1357;
        _1515 = _1372;
        _1516 = _1371;
        _1517 = _1370;
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    }
    else
    {
        _1506 = _1199;
        _1507 = _1199;
        _1508 = _1199;
        _1509 = _1199;
        _1510 = _1199;
        _1511 = _1199;
        _1512 = _1199;
        _1513 = _1199;
        _1514 = _1199;
        _1515 = _1199;
        _1516 = _1199;
        _1517 = _1199;
        _1518 = 0.0;
        _1519 = 0.0;
        _1520 = 0.0;
    }
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1211)) + _1211;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1212)) + _1212;
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1213)) + _1213;
    float _1553 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1531, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1556 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1531, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1559 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1531, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1530));
    float _1574 = _836 * 0.5;
    float _1575 = _837 * 0.5;
    float _1576 = _838 * 0.5;
    float _1577 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1580 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1583 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1617;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1590 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1198, _1202, _1205, _1208));
        float _1594 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1598 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1605 = dot(vec4(cbModelParam._m0[39u]), vec4(_1574, _1575, _1576, 1.0));
        _1617 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1617 = 1.0;
    }
    float _1628;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1619 = dot(vec4(cbModelParam._m0[40u]), vec4(_1574, _1575, _1576, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1619) ? 0.0 : (isnan(0.0) ? _1619 : max(0.0, _1619))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1632 = (_1628 * cbModelParam._m0[1u].x) + (_1617 * (1.0 - cbModelParam._m0[1u].x));
    float _1642 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _681);
    float _1643 = isnan(_1642) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1642 : min(cbModelParam._m0[25u].z, _1642));
    float _1725;
    float _1727;
    float _1729;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1692 = fma(_897, cbModelParam._m0[13u].z, fma(_893, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889)) + cbModelParam._m0[13u].w;
        float _1696 = fma(_897, cbModelParam._m0[14u].z, fma(_893, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889)) + cbModelParam._m0[14u].w;
        float _1700 = fma(_897, cbModelParam._m0[15u].z, fma(_893, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889)) + cbModelParam._m0[15u].w;
        float _1703 = fma(_838, cbModelParam._m0[13u].z, fma(_837, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _836));
        float _1706 = fma(_838, cbModelParam._m0[14u].z, fma(_837, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _836));
        float _1709 = fma(_838, cbModelParam._m0[15u].z, fma(_837, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _836));
        float _1737;
        if (_1703 > 0.0)
        {
            _1737 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1737 = frontier_phi_14_12_ladder;
        }
        float _1908;
        if (_1706 > 0.0)
        {
            _1908 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1908 = frontier_phi_23_19_ladder;
        }
        float _2203;
        if (_1709 > 0.0)
        {
            _2203 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2203 = frontier_phi_35_30_ladder;
        }
        float _2205 = isnan(_1908) ? _1737 : (isnan(_1737) ? _1908 : min(_1737, _1908));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1703) + _1692;
        float _2211 = (_2206 * _1706) + _1696;
        float _2212 = (_2206 * _1709) + _1700;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2213;
        float _2217 = _2213 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 > _2217) || ((_2211 < _2215) || ((_2210 < _2215) || (_2210 > _2217))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2357 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1643);
            frontier_phi_13_35_ladder = _2357.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2357.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2357.x * cbModelParam._m0[1u].y;
        }
        _1725 = frontier_phi_13_35_ladder_2;
        _1727 = frontier_phi_13_35_ladder_1;
        _1729 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_836, _837, _838), _1643);
        _1725 = _1713.x * cbModelParam._m0[1u].y;
        _1727 = _1713.y * cbModelParam._m0[1u].y;
        _1729 = _1713.z * cbModelParam._m0[1u].y;
    }
    float _1733 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _681);
    float _1734 = isnan(_1733) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1733 : min(cbModelParam._m0[25u].w, _1733));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1789 = fma(_897, cbModelParam._m0[21u].z, fma(_893, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889)) + cbModelParam._m0[21u].w;
        float _1793 = fma(_897, cbModelParam._m0[22u].z, fma(_893, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889)) + cbModelParam._m0[22u].w;
        float _1797 = fma(_897, cbModelParam._m0[23u].z, fma(_893, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889)) + cbModelParam._m0[23u].w;
        float _1800 = fma(_838, cbModelParam._m0[21u].z, fma(_837, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _836));
        float _1803 = fma(_838, cbModelParam._m0[22u].z, fma(_837, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _836));
        float _1806 = fma(_838, cbModelParam._m0[23u].z, fma(_837, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _836));
        float _1913;
        if (_1800 > 0.0)
        {
            _1913 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1913 = frontier_phi_25_21_ladder;
        }
        float _2230;
        if (_1803 > 0.0)
        {
            _2230 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2230 = frontier_phi_37_32_ladder;
        }
        float _2557;
        if (_1806 > 0.0)
        {
            _2557 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2557 = frontier_phi_47_44_ladder;
        }
        float _2559 = isnan(_2230) ? _1913 : (isnan(_1913) ? _2230 : min(_1913, _2230));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _1800) + _1789;
        float _2565 = (_2560 * _1803) + _1793;
        float _2566 = (_2560 * _1806) + _1797;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2568 = (-1.0) - _2567;
        float _2570 = _2567 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2566 > _2570) || ((_2566 < _2568) || ((_2565 > _2570) || ((_2565 < _2568) || ((_2564 < _2568) || (_2564 > _2570))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2566, cbModelParam._m0[17u].z, fma(_2565, cbModelParam._m0[17u].y, _2564 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2566, cbModelParam._m0[18u].z, fma(_2565, cbModelParam._m0[18u].y, _2564 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2566, cbModelParam._m0[19u].z, fma(_2565, cbModelParam._m0[19u].y, _2564 * cbModelParam._m0[19u].x))), _1734);
            frontier_phi_22_47_ladder = _2684.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2684.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2684.x * cbModelParam._m0[1u].z;
        }
        _1825 = frontier_phi_22_47_ladder_2;
        _1827 = frontier_phi_22_47_ladder_1;
        _1829 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_836, _837, _838), _1734);
        _1825 = _1809.x * cbModelParam._m0[1u].z;
        _1827 = _1809.y * cbModelParam._m0[1u].z;
        _1829 = _1809.z * cbModelParam._m0[1u].z;
    }
    float _1841 = ((((1.0 - _857) * ((_844 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_857 * _844)) * _828;
    float _1842 = _1841 * ((cbModelParam._m0[1u].w * (_1825 - _1725)) + _1725);
    float _1843 = _1841 * ((cbModelParam._m0[1u].w * (_1827 - _1727)) + _1727);
    float _1844 = _1841 * ((cbModelParam._m0[1u].w * (_1829 - _1729)) + _1729);
    float _1847 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1850 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1853 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, _1842 * cbSceneParam._m0[91u].x));
    float _1887 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1891 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1895 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1899 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1900 = _1887 / _1899;
    float _1901 = _1891 / _1899;
    float _1902 = _1895 / _1899;
    float _2049;
    float _2050;
    float _2051;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1929 = ((uint(_1902 > cbSceneParam._m0[59u].y) + uint(_1902 > cbSceneParam._m0[59u].x)) + uint(_1902 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1930 = _1929 + 43u;
        uint _1938 = _1929 + 44u;
        uint _1946 = _1929 + 45u;
        uint _1954 = _1929 + 46u;
        float _1965 = fma(_1899, cbSceneParam._m0[_1930].w, fma(_1895, cbSceneParam._m0[_1930].z, fma(_1891, cbSceneParam._m0[_1930].y, _1887 * cbSceneParam._m0[_1930].x)));
        float _1969 = fma(_1899, cbSceneParam._m0[_1938].w, fma(_1895, cbSceneParam._m0[_1938].z, fma(_1891, cbSceneParam._m0[_1938].y, _1887 * cbSceneParam._m0[_1938].x)));
        float _1977 = fma(_1899, cbSceneParam._m0[_1954].w, fma(_1895, cbSceneParam._m0[_1954].z, fma(_1891, cbSceneParam._m0[_1954].y, _1887 * cbSceneParam._m0[_1954].x)));
        float _1982 = cbSceneParam._m0[33u].z * _1977;
        float _1984 = cbSceneParam._m0[33u].w * _1977;
        float _1987 = fma(_1899, cbSceneParam._m0[_1946].w, fma(_1895, cbSceneParam._m0[_1946].z, fma(_1891, cbSceneParam._m0[_1946].y, _1887 * cbSceneParam._m0[_1946].x))) / _1977;
        float _2035 = (cbSceneParam._m0[33u].x - sqrt(((_1901 * _1901) + (_1900 * _1900)) + (_1902 * _1902))) * cbSceneParam._m0[33u].y;
        float _4301 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2042 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1982 + _1965) / _1977, (_1984 + _1969) / _1977), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1984 + _1965) / _1977, (_1969 - _1982) / _1977), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1965 - _1982) / _1977, (_1969 - _1984) / _1977), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1965 - _1984) / _1977, (_1982 + _1969) / _1977), _1987), 0.0)).x), vec4(0.25)));
        _2049 = 1.0 - (_2042 * cbSceneParam._m0[34u].x);
        _2050 = 1.0 - (_2042 * cbSceneParam._m0[34u].y);
        _2051 = 1.0 - (_2042 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2049 = 1.0;
        _2050 = 1.0;
        _2051 = 1.0;
    }
    float _2115;
    float _2117;
    float _2119;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2103 = fma(_1899, cbSceneParam._m0[63u].w, fma(_1895, cbSceneParam._m0[63u].z, fma(_1891, cbSceneParam._m0[63u].y, _1887 * cbSceneParam._m0[63u].x)));
        float _2104 = fma(_1899, cbSceneParam._m0[60u].w, fma(_1895, cbSceneParam._m0[60u].z, fma(_1891, cbSceneParam._m0[60u].y, _1887 * cbSceneParam._m0[60u].x))) / _2103;
        float _2105 = fma(_1899, cbSceneParam._m0[61u].w, fma(_1895, cbSceneParam._m0[61u].z, fma(_1891, cbSceneParam._m0[61u].y, _1887 * cbSceneParam._m0[61u].x))) / _2103;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2104 >= cbSceneParam._m0[64u].x) && (_2105 >= cbSceneParam._m0[64u].y)) && (_2104 <= cbSceneParam._m0[64u].z)) && (_2105 <= cbSceneParam._m0[64u].w))
        {
            float _2243 = fma(_1899, cbSceneParam._m0[62u].w, fma(_1895, cbSceneParam._m0[62u].z, fma(_1891, cbSceneParam._m0[62u].y, _1887 * cbSceneParam._m0[62u].x))) / _2103;
            float _2247 = isnan(cbSceneParam._m0[41u].w) ? _2243 : (isnan(_2243) ? cbSceneParam._m0[41u].w : max(_2243, cbSceneParam._m0[41u].w));
            float _2290 = (cbSceneParam._m0[33u].x - sqrt(((_1901 * _1901) + (_1900 * _1900)) + (_1902 * _1902))) * cbSceneParam._m0[33u].y;
            float _4317 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
            float _2297 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2104, cbSceneParam._m0[33u].w + _2105), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2104, _2105 - cbSceneParam._m0[33u].z), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2104 - cbSceneParam._m0[33u].z, _2105 - cbSceneParam._m0[33u].w), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2104 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2105), _2247), 0.0)).x), vec4(0.25)));
            float _2301 = 1.0 - (_2297 * cbSceneParam._m0[34u].x);
            float _2302 = 1.0 - (_2297 * cbSceneParam._m0[34u].y);
            float _2303 = 1.0 - (_2297 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2303) ? _2051 : (isnan(_2051) ? _2303 : min(_2051, _2303));
            frontier_phi_34_33_ladder_1 = isnan(_2302) ? _2050 : (isnan(_2050) ? _2302 : min(_2050, _2302));
            frontier_phi_34_33_ladder_2 = isnan(_2301) ? _2049 : (isnan(_2049) ? _2301 : min(_2049, _2301));
        }
        else
        {
            frontier_phi_34_33_ladder = _2051;
            frontier_phi_34_33_ladder_1 = _2050;
            frontier_phi_34_33_ladder_2 = _2049;
        }
        _2115 = frontier_phi_34_33_ladder_2;
        _2117 = frontier_phi_34_33_ladder_1;
        _2119 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2115 = _2049;
        _2117 = _2050;
        _2119 = _2051;
    }
    uvec4 _2124 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _2126 = _2124.x * 14u;
    uint _2127 = _2126 + 13u;
    float _2134 = _828 + (-1.0);
    float _2139 = (cbLight._m0[_2127].x * _2134) + 1.0;
    float _2140 = (cbLight._m0[_2127].y * _2134) + 1.0;
    float _2141 = (cbLight._m0[_2127].z * _2134) + 1.0;
    float _2142 = (cbLight._m0[_2127].w * _2134) + 1.0;
    uint _2143 = _2126 + 5u;
    float _2149 = isnan(1.0) ? _2140 : (isnan(_2140) ? 1.0 : min(_2140, 1.0));
    uint _2153 = _2126 + 4u;
    float _2162 = isnan(1.0) ? _2139 : (isnan(_2139) ? 1.0 : min(_2139, 1.0));
    uint _2166 = _2126 | 1u;
    float _2177 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_678, _679, _680));
    float _2180 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_678, _679, _680));
    float _4353 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _4364 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2185 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * 0.3183098733425140380859375;
    float _2187 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * 0.3183098733425140380859375;
    float _2194 = ((cbLight._m0[_2143].x * _2149) * _2187) + (((cbLight._m0[_2153].x * _2115) * _2162) * _2185);
    float _2195 = ((_2149 * cbLight._m0[_2143].y) * _2187) + (((cbLight._m0[_2153].y * _2117) * _2162) * _2185);
    float _2196 = ((_2149 * cbLight._m0[_2143].z) * _2187) + (((cbLight._m0[_2153].z * _2119) * _2162) * _2185);
    uvec4 _2200 = floatBitsToUint(cbLight._m0[_2126 + 12u]);
    bool _2202 = _2200.x == 0u;
    float _2304;
    float _2306;
    float _2308;
    if (_2202)
    {
        _2304 = _2194;
        _2306 = _2195;
        _2308 = _2196;
    }
    else
    {
        uint _2312 = _2126 + 6u;
        float _2328 = (dot(vec3(cbLight._m0[_2126 + 2u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2329 = _2328 * _2328;
        float _4375 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2330 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2331 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2304 = (((cbLight._m0[_2312].x * 0.3183098733425140380859375) * _2330) * _2331) + _2194;
        _2306 = (((cbLight._m0[_2312].y * 0.3183098733425140380859375) * _2330) * _2331) + _2195;
        _2308 = (((cbLight._m0[_2312].z * 0.3183098733425140380859375) * _2330) * _2331) + _2196;
    }
    bool _2311 = _2200.y == 0u;
    float _2366;
    float _2368;
    float _2370;
    if (_2311)
    {
        _2366 = _2304;
        _2368 = _2306;
        _2370 = _2308;
    }
    else
    {
        uint _2528 = _2126 + 7u;
        float _2544 = (dot(vec3(cbLight._m0[_2126 + 3u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2545 = _2544 * _2544;
        float _4391 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2546 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2547 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2366 = (((cbLight._m0[_2528].x * 0.3183098733425140380859375) * _2546) * _2547) + _2304;
        _2368 = (((cbLight._m0[_2528].y * 0.3183098733425140380859375) * _2546) * _2547) + _2306;
        _2370 = (((cbLight._m0[_2528].z * 0.3183098733425140380859375) * _2546) * _2547) + _2308;
    }
    uint _2373 = _2126 + 8u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _681) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2126].x + _757;
    float _2389 = cbLight._m0[_2126].y + _758;
    float _2390 = cbLight._m0[_2126].z + _759;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2126].xyz));
    float _4407 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
    float _4418 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _2402 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
    float _2403 = dot(vec3(_678, _679, _680), vec3(_2395, _2396, _2397));
    float _4429 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _2407 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2395, _2396, _2397));
    float _4440 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = _2387 * _2387;
    float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
    float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2427 = 1.0 - _2387;
    float _2438 = (0.5 / (((_2402 * ((_2401 * _2427) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2427) + _2387) * _2401))) * _2401;
    float _4451 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
    uint _2454 = _2126 + 9u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _681) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2166].x + _757;
    float _2468 = cbLight._m0[_2166].y + _758;
    float _2469 = cbLight._m0[_2166].z + _759;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2166].xyz));
    float _4462 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2481 = dot(vec3(_678, _679, _680), vec3(_2474, _2475, _2476));
    float _4473 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2474, _2475, _2476));
    float _4484 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2466 * _2466;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2502 = (exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2503 = 1.0 - _2466;
    float _2513 = (0.5 / (((_2402 * ((_2480 * _2503) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2503) + _2466) * _2480))) * _2480;
    float _4495 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2515 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    float _2525 = (((_2502 * cbLight._m0[_2454].x) * _2515) * _2149) + ((((cbLight._m0[_2373].x * _2115) * _2426) * _2440) * _2162);
    float _2526 = (((_2502 * cbLight._m0[_2454].y) * _2515) * _2149) + ((((cbLight._m0[_2373].y * _2117) * _2426) * _2440) * _2162);
    float _2527 = (((_2502 * cbLight._m0[_2454].z) * _2515) * _2149) + ((((cbLight._m0[_2373].z * _2119) * _2426) * _2440) * _2162);
    float _2583;
    float _2585;
    float _2587;
    if (_2202)
    {
        _2583 = _2525;
        _2585 = _2526;
        _2587 = _2527;
    }
    else
    {
        uint _2589 = _2126 + 2u;
        uint _2593 = _2126 + 10u;
        float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _681) * 0.949999988079071044921875);
        float _2608 = _2607 * _2607;
        float _2609 = cbLight._m0[_2589].x + _757;
        float _2610 = cbLight._m0[_2589].y + _758;
        float _2611 = cbLight._m0[_2589].z + _759;
        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
        float _2616 = _2615 * _2609;
        float _2617 = _2615 * _2610;
        float _2618 = _2615 * _2611;
        float _2619 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2589].xyz));
        float _4506 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2623 = dot(vec3(_678, _679, _680), vec3(_2616, _2617, _2618));
        float _4517 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2627 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2616, _2617, _2618));
        float _4528 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2631 = _2608 * _2608;
        float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
        float _2644 = (exp2(log2(1.0 - (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2645 = 1.0 - _2608;
        float _2655 = (0.5 / (((_2402 * ((_2622 * _2645) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2645) + _2608) * _2622))) * _2622;
        float _4539 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2657 = (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
        float _2658 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
        _2583 = (((_2644 * cbLight._m0[_2593].x) * _2657) * _2658) + _2525;
        _2585 = (((_2644 * cbLight._m0[_2593].y) * _2657) * _2658) + _2526;
        _2587 = (((_2644 * cbLight._m0[_2593].z) * _2657) * _2658) + _2527;
    }
    float _2689;
    float _2691;
    float _2693;
    if (_2311)
    {
        _2689 = _2583;
        _2691 = _2585;
        _2693 = _2587;
    }
    else
    {
        uint _2700 = _2126 + 3u;
        uint _2704 = _2126 + 11u;
        float _2718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2700].w)) * _681) * 0.949999988079071044921875);
        float _2719 = _2718 * _2718;
        float _2720 = cbLight._m0[_2700].x + _757;
        float _2721 = cbLight._m0[_2700].y + _758;
        float _2722 = cbLight._m0[_2700].z + _759;
        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
        float _2727 = _2726 * _2720;
        float _2728 = _2726 * _2721;
        float _2729 = _2726 * _2722;
        float _2730 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2700].xyz));
        float _4555 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2734 = dot(vec3(_678, _679, _680), vec3(_2727, _2728, _2729));
        float _4566 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _2738 = dot(vec3(cbLight._m0[_2700].xyz), vec3(_2727, _2728, _2729));
        float _4577 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2742 = _2719 * _2719;
        float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
        float _2755 = (exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2756 = 1.0 - _2719;
        float _2766 = (0.5 / (((_2402 * ((_2733 * _2756) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2402 * _2756) + _2719) * _2733))) * _2733;
        float _4588 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2768 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
        float _2769 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
        _2689 = (((_2755 * cbLight._m0[_2704].x) * _2768) * _2769) + _2583;
        _2691 = (((_2755 * cbLight._m0[_2704].y) * _2768) * _2769) + _2585;
        _2693 = (((_2755 * cbLight._m0[_2704].z) * _2768) * _2769) + _2587;
    }
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    if (_2124.y == 0u)
    {
        uvec4 _2790 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2791 = _2790.x;
        uint _2802 = uint((float(_2790.y) * floor(float(uint(cbSceneParam._m0[85u].y * _766) / _2791))) + floor(float(uint(cbSceneParam._m0[85u].x * _765) / _2791)));
        float _2812 = (log2(_1902 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2813 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        uint _2816 = uint(isnan(14.0) ? _2813 : (isnan(_2813) ? 14.0 : min(_2813, 14.0)));
        uvec4 _2821 = texelFetch(g_lightClusterGridBuffer, int(((_2816 << 2u) + (_2802 << 6u)) >> 2u));
        uint _2822 = _2821.x;
        uint _2823 = _2790.z;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        if (((((1u << ((_2823 >> 4u) & 15u)) + 4294967295u) & _2822) == 0u) || ((_2823 & 240u) == 0u))
        {
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
        }
        else
        {
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            uint _3053 = 0u;
            uint _3062;
            bool _3063;
            for (;;)
            {
                _3062 = texelFetch(g_lightClassification, int((((_2816 << 5u) + (_2802 << 9u)) + (_3053 << 2u)) >> 2u)).x;
                _3063 = _3062 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3063)
                {
                    frontier_phi_66_pred = _3052;
                    frontier_phi_66_pred_1 = _3051;
                    frontier_phi_66_pred_2 = _3050;
                    frontier_phi_66_pred_3 = _3049;
                    frontier_phi_66_pred_4 = _3048;
                    frontier_phi_66_pred_5 = _3047;
                }
                else
                {
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    uint _3177;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3062;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    for (;;)
                    {
                        uint _3181 = uint(findLSB(_3177)) + (_3053 << 5u);
                        uint _3178 = (_3177 + 4294967295u) & _3177;
                        uint _3183 = _3181 * 48u;
                        vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 3u)).x));
                        uint _3203 = (_3181 * 48u) + 4u;
                        vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 3u)).x));
                        uint _3222 = (_3181 * 48u) + 8u;
                        vec3 _3233 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x));
                        float _3237 = _3197.x - _1900;
                        float _3238 = _3197.y - _1901;
                        float _3239 = _3197.z - _1902;
                        float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                        float _3243 = inversesqrt(_3240);
                        float _3244 = _3243 * _3237;
                        float _3245 = _3243 * _3238;
                        float _3246 = _3243 * _3239;
                        float _3247 = dot(vec3(_784, _787, _790), vec3(_3244, _3245, _3246));
                        float _3252 = 1.0 - (_3240 * _3197.w);
                        float _4614 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3253 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3254 = sqrt(_3240) * _3216.w;
                        float _3257 = 1.39999997615814208984375 / (_3254 + 1.39999997615814208984375);
                        float _3258 = _3257 * _3257;
                        float _3261 = ((1.0 - _3258) * _3247) + _3258;
                        float _3264 = _3254 * _3254;
                        float _3268 = ((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3253) / ((_3264 * 0.699999988079071044921875) + 1.0);
                        float _3272 = (-0.0) - _1900;
                        float _3273 = (-0.0) - _1901;
                        float _3274 = (-0.0) - _1902;
                        float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                        float _3279 = _3278 * _3272;
                        float _3280 = _3278 * _3273;
                        float _3281 = _3278 * _3274;
                        float _3288 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                        float _3289 = 1.0 - _844;
                        float _3296 = sqrt(1.0 - ((1.0 - (_3289 * _3289)) * (1.0 - (_3288 * _3288))));
                        float _3297 = _3296 * _3296;
                        float _3298 = _3297 * _3297;
                        float _3299 = _3279 + _3244;
                        float _3300 = _3280 + _3245;
                        float _3301 = _3281 + _3246;
                        float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                        float _3309 = dot(vec3(_784, _787, _790), vec3(_3279, _3280, _3281));
                        float _4630 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                        float _3313 = dot(vec3(_784, _787, _790), vec3(_3305 * _3299, _3305 * _3300, _3305 * _3301));
                        float _4641 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                        float _3316 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
                        float _3320 = ((_3316 * _3316) * (_3298 + (-1.0))) + 1.0;
                        float _3321 = _3257 * _3297;
                        float _3322 = _3321 * _3321;
                        float _3325 = ((1.0 - _3322) * _3247) + _3322;
                        float _4652 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3326 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
                        float _3327 = 1.0 - _3297;
                        float _3337 = (0.5 / (((_3326 * ((_3312 * _3327) + _3297)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3297) * _3312))) * _3326;
                        float _4663 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3348 = (((_3298 * 3.1415927410125732421875) * (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) / ((_3320 * _3320) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125))) * _3253;
                        _3106 = (_3268 * _3216.x) + _3174;
                        _3107 = (_3268 * _3216.y) + _3175;
                        _3108 = (_3268 * _3216.z) + _3176;
                        _3103 = (_3348 * _3233.x) + _3171;
                        _3104 = (_3348 * _3233.y) + _3172;
                        _3105 = (_3348 * _3233.z) + _3173;
                        if (_3178 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3178;
                        }
                    }
                    frontier_phi_66_pred = _3108;
                    frontier_phi_66_pred_1 = _3107;
                    frontier_phi_66_pred_2 = _3106;
                    frontier_phi_66_pred_3 = _3105;
                    frontier_phi_66_pred_4 = _3104;
                    frontier_phi_66_pred_5 = _3103;
                }
                _2913 = frontier_phi_66_pred;
                _2911 = frontier_phi_66_pred_1;
                _2909 = frontier_phi_66_pred_2;
                _2907 = frontier_phi_66_pred_3;
                _2905 = frontier_phi_66_pred_4;
                _2903 = frontier_phi_66_pred_5;
                uint _3054 = _3053 + 1u;
                if (_3054 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3047 = _2903;
                    _3048 = _2905;
                    _3049 = _2907;
                    _3050 = _2909;
                    _3051 = _2911;
                    _3052 = _2913;
                    _3053 = _3054;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
        }
        uvec4 _2916 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2917 = _2916.z;
        uint _2919 = (_2917 >> 8u) & 15u;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        if (((4294967295u << _2919) & _2822) == 0u)
        {
            _3015 = _2902;
            _3017 = _2904;
            _3019 = _2906;
            _3021 = _2908;
            _3023 = _2910;
            _3025 = _2912;
        }
        else
        {
            float _3040 = inversesqrt(dot(vec3(_1900, _1901, _1902), vec3(_1900, _1901, _1902)));
            float _3041 = _3040 * _1900;
            float _3042 = _3040 * _1901;
            float _3043 = _3040 * _1902;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2919 < ((_2917 >> 12u) & 15u))
            {
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3154 = _2902;
                float _3155 = _2904;
                float _3156 = _2906;
                float _3157 = _2908;
                float _3158 = _2910;
                float _3159 = _2912;
                uint _3160 = _2919;
                uint _3169;
                bool _3170;
                for (;;)
                {
                    _3169 = texelFetch(g_lightClassification, int((((_2816 << 5u) + (_2802 << 9u)) + (_3160 << 2u)) >> 2u)).x;
                    _3170 = _3169 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3170)
                    {
                        frontier_phi_72_pred = _3159;
                        frontier_phi_72_pred_1 = _3158;
                        frontier_phi_72_pred_2 = _3157;
                        frontier_phi_72_pred_3 = _3156;
                        frontier_phi_72_pred_4 = _3155;
                        frontier_phi_72_pred_5 = _3154;
                    }
                    else
                    {
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3366 = _3154;
                        float _3367 = _3155;
                        float _3368 = _3156;
                        float _3369 = _3157;
                        float _3370 = _3158;
                        float _3371 = _3159;
                        uint _3372 = _3169;
                        uint _3373;
                        vec4 _3398;
                        float _3399;
                        vec4 _3414;
                        vec3 _3426;
                        vec4 _3441;
                        vec4 _3456;
                        float _3502;
                        bool _3503;
                        for (;;)
                        {
                            uint _3383 = ((_3160 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3372));
                            _3373 = (_3372 + 4294967295u) & _3372;
                            uint _3385 = _3383 * 40u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            _3399 = _3398.w;
                            uint _3401 = (_3383 * 40u) + 4u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3383 * 40u) + 8u;
                            _3426 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x));
                            uint _3428 = (_3383 * 40u) + 16u;
                            _3441 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 3u)).x));
                            uint _3443 = (_3383 * 40u) + 20u;
                            _3456 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3443)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3443 + 3u)).x));
                            uint _3458 = (_3383 * 40u) + 24u;
                            vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3458)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3458 + 3u)).x));
                            uint _3477 = (_3383 * 40u) + 28u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3502 = fma(_1902, _3490.z, fma(_1901, _3490.y, _3490.x * _1900)) + _3490.w;
                            _3503 = !((fma(_1902, _3471.z, fma(_1901, _3471.y, _3471.x * _1900)) + _3471.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3503)
                            {
                                float _3530 = _3398.x - _1900;
                                float _3531 = _3398.y - _1901;
                                float _3532 = _3398.z - _1902;
                                float _3533 = dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532));
                                float _3536 = inversesqrt(_3533);
                                float _3537 = _3536 * _3530;
                                float _3538 = _3536 * _3531;
                                float _3539 = _3536 * _3532;
                                float _3543 = 1.0 - (_3533 / (_3399 * _3399));
                                float _4674 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3548 = sqrt(_3533) * _3414.w;
                                float _3550 = 1.39999997615814208984375 / (_3548 + 1.39999997615814208984375);
                                float _3551 = _3550 * _3550;
                                float _3554 = ((1.0 - _3551) * dot(vec3(_3537, _3538, _3539), vec3(_784, _787, _790))) + _3551;
                                float _3557 = _3548 * _3548;
                                float _3561 = (fma(_1902, _3441.z, fma(_1901, _3441.y, _3441.x * _1900)) + _3441.w) / _3502;
                                float _3562 = (fma(_1902, _3456.z, fma(_1901, _3456.y, _3456.x * _1900)) + _3456.w) / _3502;
                                float _3566 = 1.0 - dot(vec2(_3561, _3562), vec2(_3561, _3562));
                                float _4690 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3567 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                                float _3568 = _3567 * (((isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0))) * _3544) / ((_3557 * 0.699999988079071044921875) + 1.0));
                                float _3580 = exp2(log2(1.0 / ((_3557 * 3.5) + 5.0)) * 0.25);
                                float _3581 = 1.0 - _844;
                                float _3588 = sqrt(1.0 - ((1.0 - (_3581 * _3581)) * (1.0 - (_3580 * _3580))));
                                float _3589 = _3588 * _3588;
                                float _3590 = _3589 * _3589;
                                float _3591 = _3537 - _3041;
                                float _3592 = _3538 - _3042;
                                float _3593 = _3539 - _3043;
                                float _3597 = inversesqrt(dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593)));
                                float _3601 = dot(vec3(_784, _787, _790), vec3((-0.0) - _3041, (-0.0) - _3042, (-0.0) - _3043));
                                float _4701 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3604 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
                                float _3605 = dot(vec3(_784, _787, _790), vec3(_3597 * _3591, _3597 * _3592, _3597 * _3593));
                                float _4712 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3608 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
                                float _3612 = ((_3608 * _3608) * (_3590 + (-1.0))) + 1.0;
                                float _3613 = _3550 * _3589;
                                float _3614 = _3613 * _3613;
                                float _3620 = ((1.0 - _3614) * dot(vec3(_784, _787, _790), vec3(_3537, _3538, _3539))) + _3614;
                                float _4723 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3622 = 1.0 - _3589;
                                float _3632 = (0.5 / (((_3621 * ((_3604 * _3622) + _3589)) + 9.9999999392252902907785028219223e-09) + (((_3621 * _3622) + _3589) * _3604))) * _3621;
                                float _4734 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3642 = (_3567 * _3544) * (((_3590 * 3.1415927410125732421875) * (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) / ((_3612 * _3612) * ((_3557 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3568 * _3414.y;
                                frontier_phi_78_pred_1 = _3568 * _3414.x;
                                frontier_phi_78_pred_2 = _3642 * _3426.z;
                                frontier_phi_78_pred_3 = _3642 * _3426.y;
                                frontier_phi_78_pred_4 = _3642 * _3426.x;
                                frontier_phi_78_pred_5 = _3568 * _3414.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3650 = frontier_phi_78_pred;
                            _3649 = frontier_phi_78_pred_1;
                            _3648 = frontier_phi_78_pred_2;
                            _3647 = frontier_phi_78_pred_3;
                            _3646 = frontier_phi_78_pred_4;
                            _3651 = frontier_phi_78_pred_5;
                            _3356 = _3649 + _3369;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            _3353 = _3646 + _3366;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            if (_3373 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3366 = _3353;
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3373;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3358;
                        frontier_phi_72_pred_1 = _3357;
                        frontier_phi_72_pred_2 = _3356;
                        frontier_phi_72_pred_3 = _3355;
                        frontier_phi_72_pred_4 = _3354;
                        frontier_phi_72_pred_5 = _3353;
                    }
                    _3026 = frontier_phi_72_pred;
                    _3024 = frontier_phi_72_pred_1;
                    _3022 = frontier_phi_72_pred_2;
                    _3020 = frontier_phi_72_pred_3;
                    _3018 = frontier_phi_72_pred_4;
                    _3016 = frontier_phi_72_pred_5;
                    uint _3161 = _3160 + 1u;
                    if (_3161 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3154 = _3016;
                        _3155 = _3018;
                        _3156 = _3020;
                        _3157 = _3022;
                        _3158 = _3024;
                        _3159 = _3026;
                        _3160 = _3161;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3026;
                frontier_phi_60_61_ladder_1 = _3024;
                frontier_phi_60_61_ladder_2 = _3020;
                frontier_phi_60_61_ladder_3 = _3018;
                frontier_phi_60_61_ladder_4 = _3016;
                frontier_phi_60_61_ladder_5 = _3022;
            }
            else
            {
                frontier_phi_60_61_ladder = _2912;
                frontier_phi_60_61_ladder_1 = _2910;
                frontier_phi_60_61_ladder_2 = _2906;
                frontier_phi_60_61_ladder_3 = _2904;
                frontier_phi_60_61_ladder_4 = _2902;
                frontier_phi_60_61_ladder_5 = _2908;
            }
            _3015 = frontier_phi_60_61_ladder_4;
            _3017 = frontier_phi_60_61_ladder_3;
            _3019 = frontier_phi_60_61_ladder_2;
            _3021 = frontier_phi_60_61_ladder_5;
            _3023 = frontier_phi_60_61_ladder_1;
            _3025 = frontier_phi_60_61_ladder;
        }
        float _3030 = isnan(1.0) ? _828 : (isnan(_828) ? 1.0 : min(_828, 1.0));
        _2835 = (_3030 * _3021) + _2366;
        _2837 = (_3030 * _3023) + _2368;
        _2839 = (_3030 * _3025) + _2370;
        _2841 = ((_3015 * 0.039999999105930328369140625) * _3030) + _2689;
        _2843 = ((_3017 * 0.039999999105930328369140625) * _3030) + _2691;
        _2845 = ((_3019 * 0.039999999105930328369140625) * _3030) + _2693;
    }
    else
    {
        _2835 = _2366;
        _2837 = _2368;
        _2839 = _2370;
        _2841 = _2689;
        _2843 = _2691;
        _2845 = _2693;
    }
    float _4750 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4761 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4772 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    uint _2865 = _247 + 6u;
    float _2873 = _765 / cbSceneParam._m0[86u].x;
    float _2874 = _766 / cbSceneParam._m0[86u].y;
    vec4 _2888 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2873, _2874, (log2((isnan(cbSceneParam._m0[77u].w) ? _699 : (isnan(_699) ? cbSceneParam._m0[77u].w : min(_699, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2890 = _2888.x;
    float _2891 = _2888.y;
    float _2892 = _2888.z;
    float _2893 = _2888.w;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    if (_699 > cbSceneParam._m0[78u].w)
    {
        float _2927 = isnan(_699) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _699 : min(cbSceneParam._m0[80u].w, _699));
        float _2928 = _2927 / _699;
        float _2939 = _2928 * _750;
        float _2940 = _751 * _2928;
        float _2941 = (-0.0) - _2940;
        float _2943 = _2928 * _752;
        float _2945 = (cbSceneParam._m0[77u].w * _2941) / _2927;
        float _2946 = _2945 + cbSceneParam._m0[79u].w;
        float _2947 = cbSceneParam._m0[79u].w - _2940;
        float _2953 = sqrt(((_2939 * _2939) + (_2940 * _2940)) + (_2943 * _2943));
        float _2956 = (1.0 - (cbSceneParam._m0[77u].w / _2927)) * _2953;
        float _2961 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2963 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3116;
        if (abs((_2941 - _2945) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3116 = ((((_2946 > 0.0) ? exp2(_2961 * _2946) : (2.0 - exp2(_2963 * _2946))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2956;
        }
        else
        {
            float _3076 = 1.0 / cbSceneParam._m0[80u].x;
            float _3077 = isnan(_2947) ? _2946 : (isnan(_2946) ? _2947 : max(_2946, _2947));
            float _3078 = isnan(_2947) ? _2946 : (isnan(_2946) ? _2947 : min(_2946, _2947));
            float _3087 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : min(_3077, 0.0));
            float _3088 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : min(_3078, 0.0));
            _3116 = ((abs(_2953 / _2941) * cbSceneParam._m0[80u].y) * ((((_3087 - _3088) * 2.0) - ((exp2(_2961 * (isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0)))) - exp2(_2961 * (isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0))))) * _3076)) - ((exp2(_2963 * _3087) - exp2(_2963 * _3088)) * _3076))) + (_2956 * cbSceneParam._m0[80u].z);
        }
        vec4 _3118 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2873, _2874, 1.0), 0.0);
        float _3127 = exp2((_3116 * (-1.44269502162933349609375)) * (1.0 - _3118.w));
        float _3128 = log2(_3127);
        float _3144 = log2(_2893);
        _2965 = (exp2(_3144 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3128 * cbSceneParam._m0[78u].x)) * _3118.x) / cbSceneParam._m0[78u].x)) + _2890;
        _2967 = (exp2(_3144 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3128 * cbSceneParam._m0[78u].y)) * _3118.y) / cbSceneParam._m0[78u].y)) + _2891;
        _2969 = (exp2(_3144 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3128 * cbSceneParam._m0[78u].z)) * _3118.z) / cbSceneParam._m0[78u].z)) + _2892;
        _2971 = _3127 * _2893;
    }
    else
    {
        _2965 = _2890;
        _2967 = _2891;
        _2969 = _2892;
        _2971 = _2893;
    }
    float _2983 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2984 = _2983 == 3.0;
    float _2985 = log2(_2971);
    float _2992 = exp2(_2985 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_2835 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _828))) + ((_2841 + ((isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0))) * _1632)) * cbPerFrame._m0[3u].x));
    float _2993 = exp2(_2985 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2837 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _828))) + ((_2843 + ((isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))) * _1632)) * cbPerFrame._m0[3u].x));
    float _2994 = exp2(_2985 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2839 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _828))) + ((_2845 + ((isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))) * _1632)) * cbPerFrame._m0[3u].x));
    float _3003 = (_2983 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3003 * (_2984 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2965)));
    SV_Target.y = _3003 * (_2984 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2967)));
    SV_Target.z = _3003 * (_2984 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2969)));
    SV_Target.w = cbInstanceData._m0[_2865].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2865].w;
}


