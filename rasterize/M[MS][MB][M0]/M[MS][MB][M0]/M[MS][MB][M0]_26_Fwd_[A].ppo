#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1172;
float _3534;
float _3535;
float _3536;
float _3537;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _336 = _332.z;
    float _340 = (_332.x * 2.0) + (-1.0);
    float _341 = (_332.y * 2.0) + (-1.0);
    float _342 = dot(vec2(_340, _341), vec2(_340, _341));
    float _3546 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _348 = sqrt(1.0 - (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))));
    float _353 = _340 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_306.x * 2.0) + (-1.0)));
    float _354 = _341 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_306.y * 2.0) + (-1.0)));
    float _357 = fma(_348, _229, fma(_354, _236, _353 * _222));
    float _360 = fma(_348, _230, fma(_354, _237, _353 * _223));
    float _363 = fma(_348, _231, fma(_354, _238, _353 * _224));
    float _367 = inversesqrt(dot(vec3(_357, _360, _363), vec3(_357, _360, _363)));
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _405 = _403.x;
    float _406 = 1.0 - _405;
    float _415 = (cbMtdParam._m0[19u].x + dot(vec4(_367 * _357, _367 * _360, _367 * _363, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_405 - _406) * cbMtdParam._m0[24u].z) + _406) * cbMtdParam._m0[21u].z);
    float _3557 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _416 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _418 = (-0.0) - cbMtdParam._m0[24u].y;
    float _420 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _420 : (isnan(_420) ? 1.0 : min(_420, 1.0));
    float _428 = _416 - ((_416 * TEXCOORD_8.x) * _421);
    float _429 = _416 - ((_416 * TEXCOORD_8.y) * _421);
    float _430 = _416 - ((_416 * TEXCOORD_8.z) * _421);
    float _437 = (_428 * (cbMtdParam._m0[17u].x - _286)) + _286;
    float _438 = (_429 * (cbMtdParam._m0[17u].y - _287)) + _287;
    float _439 = (_430 * (cbMtdParam._m0[17u].z - _288)) + _288;
    vec4 _451 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _453 = _451.x;
    float _454 = 1.0 - _453;
    float _484 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_453 - _454) * cbMtdParam._m0[24u].w) + _454) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3578 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _485 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _493 = ((((cbMtdParam._m0[10u].x - _437) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _485) + _437;
    float _494 = ((((cbMtdParam._m0[10u].y - _438) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _485) + _438;
    float _495 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _439)) * _485) + _439;
    float _500 = (((_306.z - _336) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _336;
    vec4 _514 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _521 = (_514.x * 2.0) + (-1.0);
    float _522 = (_514.y * 2.0) + (-1.0);
    float _523 = dot(vec2(_521, _522), vec2(_521, _522));
    float _3589 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _531 = ((_514.z - _500) * _428) + _500;
    float _534 = ((cbMtdParam._m0[23u].y - _531) * _485) + _531;
    vec4 _553 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _559 = (_553.x * 2.0) + (-1.0);
    float _560 = (_553.y * 2.0) + (-1.0);
    float _561 = dot(vec2(_559, _560), vec2(_559, _560));
    float _3600 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _576 = ((sqrt(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) - _348) * _430) + _348;
    float _579 = (((_521 - _353) * _428) + _353) + (cbMtdParam._m0[21u].x * _353);
    float _580 = (((_522 - _354) * _429) + _354) + (cbMtdParam._m0[21u].x * _354);
    float _591 = (((_559 - _579) + (_579 * cbMtdParam._m0[22u].z)) * _485) + _579;
    float _592 = (((_560 - _580) + (_580 * cbMtdParam._m0[22u].z)) * _485) + _580;
    float _593 = (_485 * (sqrt(1.0 - (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) - _576)) + _576;
    float _595 = cbMtdParam._m0[22u].x + _332.w;
    float _598 = fma(_593, _229, fma(_592, _236, _591 * _222));
    float _601 = fma(_593, _230, fma(_592, _237, _591 * _223));
    float _604 = fma(_593, _231, fma(_592, _238, _591 * _224));
    float _608 = inversesqrt(dot(vec3(_598, _601, _604), vec3(_598, _601, _604)));
    float _609 = _608 * _598;
    float _610 = _608 * _601;
    float _611 = _608 * _604;
    float _3611 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _612 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3633 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _3644 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _3655 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _630 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _680 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _670);
    float _681 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _670);
    float _682 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _670);
    float _686 = inversesqrt(dot(vec3(_680, _681, _682), vec3(_680, _681, _682)));
    float _687 = _680 * _686;
    float _688 = _681 * _686;
    float _689 = _682 * _686;
    vec4 _694 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _696 = _694.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _853 = sqrt(((_680 * _680) + (_681 * _681)) + (_682 * _682));
        float _859 = (cbMatDynParam._m0[5u].x * _853) + cbMatDynParam._m0[5u].y;
        float _3666 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _864 = (cbMatDynParam._m0[5u].z * _853) + cbMatDynParam._m0[5u].w;
        float _3677 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) - _860)) + _860) < ((_696 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _708 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _709 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _729 = fma(_611, cbSceneParam._m0[5u].z, fma(_610, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _609));
    float _732 = fma(_611, cbSceneParam._m0[6u].z, fma(_610, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _609));
    float _735 = fma(_611, cbSceneParam._m0[7u].z, fma(_610, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _609));
    uint _748 = _241 + 9u;
    uint _749 = _748 + uint(cbMatDynParam._m0[0u].w);
    float _755 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * cbInstanceData._m0[_749].x;
    float _756 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_749].y;
    float _757 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * cbInstanceData._m0[_749].z;
    float _3688 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    vec4 _769 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _708, cbSceneParam._m0[86u].y * _709));
    float _773 = ((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * TEXCOORD_5.w) * _769.x;
    float _774 = dot(vec3(_609, _610, _611), vec3(_687, _688, _689));
    float _777 = _774 * 2.0;
    float _781 = (_777 * _609) - _687;
    float _782 = (_777 * _610) - _688;
    float _783 = (_777 * _611) - _689;
    float _787 = abs(dot(vec3(_687, _688, _689), vec3(_609, _610, _611)));
    float _3721 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _789 = sqrt(_612);
    float _802 = exp2((_789 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_789 * 3.0));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1171;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _896 = fma(_842, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _834));
        float _900 = fma(_842, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _834));
        float _904 = fma(_842, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _834));
        float _929 = _834 + _609;
        float _930 = _838 + _610;
        float _931 = _842 + _611;
        float _941 = fma(_931, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929)) - _896;
        float _942 = fma(_931, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929)) - _900;
        float _943 = fma(_931, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929)) - _904;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_896 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_900 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[34u].z) + ((((((_904 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _999 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_965.x + (-0.5));
        float _1001 = _999 * (_965.y + (-0.5));
        float _1002 = _999 * (_965.z + (-0.5));
        float _1009 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_972.x + (-0.5));
        float _1011 = _1009 * (_972.y + (-0.5));
        float _1012 = _1009 * (_972.z + (-0.5));
        float _1019 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_979.x + (-0.5));
        float _1021 = _1019 * (_979.y + (-0.5));
        float _1022 = _1019 * (_979.z + (-0.5));
        float _1029 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_986.x + (-0.5));
        float _1031 = _1029 * (_986.y + (-0.5));
        float _1032 = _1029 * (_986.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1053 = (dot(vec3(_609, _610, _611), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1063 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3769 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1065 + 1.0))) + _1070) * _1033;
        float _1080 = _1001 * 0.5;
        float _1081 = _1011 * 0.5;
        float _1082 = _1021 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_609, _610, _611), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3802 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1107 + 1.0))) + _1112) * _1034;
        float _1122 = _1002 * 0.5;
        float _1123 = _1012 * 0.5;
        float _1124 = _1022 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_609, _610, _611), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3835 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1149 + 1.0))) + _1154) * _1035;
        _1171 = _1002;
        _1173 = _1001;
        _1174 = _1000;
        _1175 = _1012;
        _1176 = _1011;
        _1177 = _1010;
        _1178 = _1022;
        _1179 = _1021;
        _1180 = _1020;
        _1181 = _1035;
        _1182 = _1034;
        _1183 = _1033;
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _1172;
        _1173 = _1172;
        _1174 = _1172;
        _1175 = _1172;
        _1176 = _1172;
        _1177 = _1172;
        _1178 = _1172;
        _1179 = _1172;
        _1180 = _1172;
        _1181 = _1172;
        _1182 = _1172;
        _1183 = _1172;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1214 = fma(_842, cbModelParam._m0[30u].z, fma(_838, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _834));
        float _1218 = fma(_842, cbModelParam._m0[31u].z, fma(_838, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _834));
        float _1222 = fma(_842, cbModelParam._m0[32u].z, fma(_838, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _834));
        float _1245 = _834 + _609;
        float _1246 = _838 + _610;
        float _1247 = _842 + _611;
        float _1257 = fma(_1247, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245)) - _1214;
        float _1258 = fma(_1247, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245)) - _1218;
        float _1259 = fma(_1247, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245)) - _1222;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1214 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1218 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[35u].z) + ((((((_1222 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1313 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1280.x + (-0.5));
        float _1315 = _1313 * (_1280.y + (-0.5));
        float _1316 = _1313 * (_1280.z + (-0.5));
        float _1323 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1287.x + (-0.5));
        float _1325 = _1323 * (_1287.y + (-0.5));
        float _1326 = _1323 * (_1287.z + (-0.5));
        float _1333 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1294.x + (-0.5));
        float _1335 = _1333 * (_1294.y + (-0.5));
        float _1336 = _1333 * (_1294.z + (-0.5));
        float _1343 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1301.x + (-0.5));
        float _1345 = _1343 * (_1301.y + (-0.5));
        float _1346 = _1343 * (_1301.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_609, _610, _611), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3898 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1377 + 1.0))) + _1382) * _1347;
        float _1392 = _1315 * 0.5;
        float _1393 = _1325 * 0.5;
        float _1394 = _1335 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_609, _610, _611), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3931 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1419 + 1.0))) + _1424) * _1348;
        float _1434 = _1316 * 0.5;
        float _1435 = _1326 * 0.5;
        float _1436 = _1336 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_609, _610, _611), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3942 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3953 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3964 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_1461 + 1.0))) + _1466) * _1349;
        _1483 = _1316;
        _1484 = _1315;
        _1485 = _1314;
        _1486 = _1326;
        _1487 = _1325;
        _1488 = _1324;
        _1489 = _1336;
        _1490 = _1335;
        _1491 = _1334;
        _1492 = _1349;
        _1493 = _1348;
        _1494 = _1347;
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1172;
        _1484 = _1172;
        _1485 = _1172;
        _1486 = _1172;
        _1487 = _1172;
        _1488 = _1172;
        _1489 = _1172;
        _1490 = _1172;
        _1491 = _1172;
        _1492 = _1172;
        _1493 = _1172;
        _1494 = _1172;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1184)) + _1184;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1185)) + _1185;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1186)) + _1186;
    float _1530 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1507));
    float _1551 = _781 * 0.5;
    float _1552 = _782 * 0.5;
    float _1553 = _783 * 0.5;
    float _1554 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1557 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1560 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1594;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1567 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1171, _1175, _1178, _1181));
        float _1571 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1575 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1582 = dot(vec4(cbModelParam._m0[39u]), vec4(_1551, _1552, _1553, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1605;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1596 = dot(vec4(cbModelParam._m0[40u]), vec4(_1551, _1552, _1553, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1609 = (_1605 * cbModelParam._m0[1u].x) + (_1594 * (1.0 - cbModelParam._m0[1u].x));
    float _1619 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _612);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1619 : min(cbModelParam._m0[25u].z, _1619));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1668 = fma(_842, cbModelParam._m0[13u].z, fma(_838, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _834)) + cbModelParam._m0[13u].w;
        float _1672 = fma(_842, cbModelParam._m0[14u].z, fma(_838, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _834)) + cbModelParam._m0[14u].w;
        float _1676 = fma(_842, cbModelParam._m0[15u].z, fma(_838, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _834)) + cbModelParam._m0[15u].w;
        float _1679 = fma(_783, cbModelParam._m0[13u].z, fma(_782, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781));
        float _1682 = fma(_783, cbModelParam._m0[14u].z, fma(_782, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781));
        float _1685 = fma(_783, cbModelParam._m0[15u].z, fma(_782, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781));
        float _1713;
        if (_1679 > 0.0)
        {
            _1713 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1713 = frontier_phi_17_15_ladder;
        }
        float _1916;
        if (_1682 > 0.0)
        {
            _1916 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1916 = frontier_phi_26_22_ladder;
        }
        float _2159;
        if (_1685 > 0.0)
        {
            _2159 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2159 = frontier_phi_38_33_ladder;
        }
        float _2161 = isnan(_1916) ? _1713 : (isnan(_1713) ? _1916 : min(_1713, _1916));
        float _2162 = isnan(_2159) ? _2161 : (isnan(_2161) ? _2159 : min(_2161, _2159));
        float _2166 = (_2162 * _1679) + _1668;
        float _2167 = (_2162 * _1682) + _1672;
        float _2168 = (_2162 * _1685) + _1676;
        float _2169 = _2162 * 9.9999997473787516355514526367188e-05;
        float _2171 = (-1.0) - _2169;
        float _2173 = _2169 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2168 > _2173) || ((_2168 < _2171) || ((_2167 > _2173) || ((_2167 < _2171) || ((_2166 < _2171) || (_2166 > _2173))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2292 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2168, cbModelParam._m0[9u].z, fma(_2167, cbModelParam._m0[9u].y, _2166 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2168, cbModelParam._m0[10u].z, fma(_2167, cbModelParam._m0[10u].y, _2166 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2168, cbModelParam._m0[11u].z, fma(_2167, cbModelParam._m0[11u].y, _2166 * cbModelParam._m0[11u].x))), _1620);
            frontier_phi_16_38_ladder = _2292.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2292.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2292.x * cbModelParam._m0[1u].y;
        }
        _1701 = frontier_phi_16_38_ladder_2;
        _1703 = frontier_phi_16_38_ladder_1;
        _1705 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_781, _782, _783), _1620);
        _1701 = _1689.x * cbModelParam._m0[1u].y;
        _1703 = _1689.y * cbModelParam._m0[1u].y;
        _1705 = _1689.z * cbModelParam._m0[1u].y;
    }
    float _1709 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _612);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1709 : min(cbModelParam._m0[25u].w, _1709));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1764 = fma(_842, cbModelParam._m0[21u].z, fma(_838, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _834)) + cbModelParam._m0[21u].w;
        float _1768 = fma(_842, cbModelParam._m0[22u].z, fma(_838, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _834)) + cbModelParam._m0[22u].w;
        float _1772 = fma(_842, cbModelParam._m0[23u].z, fma(_838, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _834)) + cbModelParam._m0[23u].w;
        float _1775 = fma(_783, cbModelParam._m0[21u].z, fma(_782, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781));
        float _1778 = fma(_783, cbModelParam._m0[22u].z, fma(_782, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781));
        float _1781 = fma(_783, cbModelParam._m0[23u].z, fma(_782, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781));
        float _1921;
        if (_1775 > 0.0)
        {
            _1921 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1921 = frontier_phi_28_24_ladder;
        }
        float _2186;
        if (_1778 > 0.0)
        {
            _2186 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2186 = frontier_phi_40_35_ladder;
        }
        float _2391;
        if (_1781 > 0.0)
        {
            _2391 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2391 = frontier_phi_49_46_ladder;
        }
        float _2393 = isnan(_2186) ? _1921 : (isnan(_1921) ? _2186 : min(_1921, _2186));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1775) + _1764;
        float _2399 = (_2394 * _1778) + _1768;
        float _2400 = (_2394 * _1781) + _1772;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2401;
        float _2404 = _2401 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2400 > _2404) || ((_2400 < _2402) || ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 < _2402) || (_2398 > _2404))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2599 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2400, cbModelParam._m0[17u].z, fma(_2399, cbModelParam._m0[17u].y, _2398 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2400, cbModelParam._m0[18u].z, fma(_2399, cbModelParam._m0[18u].y, _2398 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2400, cbModelParam._m0[19u].z, fma(_2399, cbModelParam._m0[19u].y, _2398 * cbModelParam._m0[19u].x))), _1710);
            frontier_phi_25_49_ladder = _2599.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2599.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2599.x * cbModelParam._m0[1u].z;
        }
        _1800 = frontier_phi_25_49_ladder_2;
        _1802 = frontier_phi_25_49_ladder_1;
        _1804 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_781, _782, _783), _1710);
        _1800 = _1784.x * cbModelParam._m0[1u].z;
        _1802 = _1784.y * cbModelParam._m0[1u].z;
        _1804 = _1784.z * cbModelParam._m0[1u].z;
    }
    float _1816 = ((((1.0 - _802) * ((_789 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_802 * _789)) * _773;
    float _1817 = _1816 * ((cbModelParam._m0[1u].w * (_1800 - _1701)) + _1701);
    float _1818 = _1816 * ((cbModelParam._m0[1u].w * (_1802 - _1703)) + _1703);
    float _1819 = _1816 * ((cbModelParam._m0[1u].w * (_1804 - _1705)) + _1705);
    float _1822 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1818, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1825 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1818, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1828 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1818, cbSceneParam._m0[91u].y, _1817 * cbSceneParam._m0[91u].x));
    uvec4 _1838 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1840 = _1838.x * 14u;
    uint _1841 = _1840 + 13u;
    float _1848 = _773 + (-1.0);
    float _1853 = (cbLight._m0[_1841].x * _1848) + 1.0;
    float _1854 = (cbLight._m0[_1841].y * _1848) + 1.0;
    float _1855 = (cbLight._m0[_1841].z * _1848) + 1.0;
    float _1856 = (cbLight._m0[_1841].w * _1848) + 1.0;
    uint _1857 = _1840 + 5u;
    float _1863 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1867 = _1840 + 4u;
    float _1874 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1878 = _1840 | 1u;
    float _1889 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_609, _610, _611));
    float _1892 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_609, _610, _611));
    float _4100 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _4111 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1897 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.3183098733425140380859375;
    float _1899 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.3183098733425140380859375;
    float _1906 = ((cbLight._m0[_1857].x * _1863) * _1899) + ((cbLight._m0[_1867].x * _1874) * _1897);
    float _1907 = ((_1863 * cbLight._m0[_1857].y) * _1899) + ((_1874 * cbLight._m0[_1867].y) * _1897);
    float _1908 = ((_1863 * cbLight._m0[_1857].z) * _1899) + ((_1874 * cbLight._m0[_1867].z) * _1897);
    uvec4 _1913 = floatBitsToUint(cbLight._m0[_1840 + 12u]);
    bool _1915 = _1913.x == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1915)
    {
        _1926 = _1906;
        _1928 = _1907;
        _1930 = _1908;
    }
    else
    {
        uint _1934 = _1840 + 6u;
        float _1950 = (dot(vec3(cbLight._m0[_1840 + 2u].xyz), vec3(_609, _610, _611)) * 0.5) + 0.5;
        float _1951 = _1950 * _1950;
        float _4122 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1953 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _1926 = (((cbLight._m0[_1934].x * 0.3183098733425140380859375) * _1952) * _1953) + _1906;
        _1928 = (((cbLight._m0[_1934].y * 0.3183098733425140380859375) * _1952) * _1953) + _1907;
        _1930 = (((cbLight._m0[_1934].z * 0.3183098733425140380859375) * _1952) * _1953) + _1908;
    }
    bool _1933 = _1913.y == 0u;
    float _1971;
    float _1973;
    float _1975;
    if (_1933)
    {
        _1971 = _1926;
        _1973 = _1928;
        _1975 = _1930;
    }
    else
    {
        uint _2130 = _1840 + 7u;
        float _2146 = (dot(vec3(cbLight._m0[_1840 + 3u].xyz), vec3(_609, _610, _611)) * 0.5) + 0.5;
        float _2147 = _2146 * _2146;
        float _4138 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2148 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2149 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _1971 = (((cbLight._m0[_2130].x * 0.3183098733425140380859375) * _2148) * _2149) + _1926;
        _1973 = (((cbLight._m0[_2130].y * 0.3183098733425140380859375) * _2148) * _2149) + _1928;
        _1975 = (((cbLight._m0[_2130].z * 0.3183098733425140380859375) * _2148) * _2149) + _1930;
    }
    uint _1978 = _1840 + 8u;
    float _1991 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1840].w)) * _612) * 0.949999988079071044921875);
    float _1992 = _1991 * _1991;
    float _1993 = cbLight._m0[_1840].x + _687;
    float _1994 = cbLight._m0[_1840].y + _688;
    float _1995 = cbLight._m0[_1840].z + _689;
    float _1999 = inversesqrt(dot(vec3(_1993, _1994, _1995), vec3(_1993, _1994, _1995)));
    float _2000 = _1999 * _1993;
    float _2001 = _1999 * _1994;
    float _2002 = _1999 * _1995;
    float _2003 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_1840].xyz));
    float _4154 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _4165 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2007 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2008 = dot(vec3(_609, _610, _611), vec3(_2000, _2001, _2002));
    float _4176 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2012 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_2000, _2001, _2002));
    float _4187 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2016 = _1992 * _1992;
    float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
    float _2031 = (exp2(log2(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2032 = 1.0 - _1992;
    float _2043 = (0.5 / (((_2007 * ((_2006 * _2032) + _1992)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2032) + _1992) * _2006))) * _2006;
    float _4198 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2045 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
    uint _2056 = _1840 + 9u;
    float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1878].w)) * _612) * 0.949999988079071044921875);
    float _2068 = _2067 * _2067;
    float _2069 = cbLight._m0[_1878].x + _687;
    float _2070 = cbLight._m0[_1878].y + _688;
    float _2071 = cbLight._m0[_1878].z + _689;
    float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
    float _2076 = _2075 * _2069;
    float _2077 = _2075 * _2070;
    float _2078 = _2075 * _2071;
    float _2079 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_1878].xyz));
    float _4209 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _2083 = dot(vec3(_609, _610, _611), vec3(_2076, _2077, _2078));
    float _4220 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2087 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_2076, _2077, _2078));
    float _4231 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2091 = _2068 * _2068;
    float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
    float _2104 = (exp2(log2(1.0 - (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2105 = 1.0 - _2068;
    float _2115 = (0.5 / (((_2007 * ((_2082 * _2105) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2105) + _2068) * _2082))) * _2082;
    float _4242 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2117 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
    float _2127 = (((_2104 * cbLight._m0[_2056].x) * _2117) * _1863) + (((_2031 * cbLight._m0[_1978].x) * _2045) * _1874);
    float _2128 = (((_2104 * cbLight._m0[_2056].y) * _2117) * _1863) + (((_2031 * cbLight._m0[_1978].y) * _2045) * _1874);
    float _2129 = (((_2104 * cbLight._m0[_2056].z) * _2117) * _1863) + (((_2031 * cbLight._m0[_1978].z) * _2045) * _1874);
    float _2191;
    float _2193;
    float _2195;
    if (_1915)
    {
        _2191 = _2127;
        _2193 = _2128;
        _2195 = _2129;
    }
    else
    {
        uint _2197 = _1840 + 2u;
        uint _2201 = _1840 + 10u;
        float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _612) * 0.949999988079071044921875);
        float _2216 = _2215 * _2215;
        float _2217 = cbLight._m0[_2197].x + _687;
        float _2218 = cbLight._m0[_2197].y + _688;
        float _2219 = cbLight._m0[_2197].z + _689;
        float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
        float _2224 = _2223 * _2217;
        float _2225 = _2223 * _2218;
        float _2226 = _2223 * _2219;
        float _2227 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_2197].xyz));
        float _4253 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2230 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2231 = dot(vec3(_609, _610, _611), vec3(_2224, _2225, _2226));
        float _4264 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2235 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2224, _2225, _2226));
        float _4275 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2239 = _2216 * _2216;
        float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
        float _2252 = (exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2253 = 1.0 - _2216;
        float _2263 = (0.5 / (((_2007 * ((_2230 * _2253) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2253) + _2216) * _2230))) * _2230;
        float _4286 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2265 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
        float _2266 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2191 = (((_2252 * cbLight._m0[_2201].x) * _2265) * _2266) + _2127;
        _2193 = (((_2252 * cbLight._m0[_2201].y) * _2265) * _2266) + _2128;
        _2195 = (((_2252 * cbLight._m0[_2201].z) * _2265) * _2266) + _2129;
    }
    float _2301;
    float _2303;
    float _2305;
    if (_1933)
    {
        _2301 = _2191;
        _2303 = _2193;
        _2305 = _2195;
    }
    else
    {
        uint _2312 = _1840 + 3u;
        uint _2316 = _1840 + 11u;
        float _2330 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _612) * 0.949999988079071044921875);
        float _2331 = _2330 * _2330;
        float _2332 = cbLight._m0[_2312].x + _687;
        float _2333 = cbLight._m0[_2312].y + _688;
        float _2334 = cbLight._m0[_2312].z + _689;
        float _2338 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
        float _2339 = _2338 * _2332;
        float _2340 = _2338 * _2333;
        float _2341 = _2338 * _2334;
        float _2342 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_2312].xyz));
        float _4302 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2346 = dot(vec3(_609, _610, _611), vec3(_2339, _2340, _2341));
        float _4313 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2350 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2339, _2340, _2341));
        float _4324 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2354 = _2331 * _2331;
        float _2358 = ((_2349 * _2349) * (_2354 + (-1.0))) + 1.0;
        float _2367 = (exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2368 = 1.0 - _2331;
        float _2378 = (0.5 / (((_2007 * ((_2345 * _2368) + _2331)) + 9.9999999392252902907785028219223e-09) + (((_2007 * _2368) + _2331) * _2345))) * _2345;
        float _4335 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2354 / ((_2358 * _2358) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2301 = (((_2367 * cbLight._m0[_2316].x) * _2380) * _2381) + _2191;
        _2303 = (((_2367 * cbLight._m0[_2316].y) * _2380) * _2381) + _2193;
        _2305 = (((_2367 * cbLight._m0[_2316].z) * _2380) * _2381) + _2195;
    }
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    if (_1838.y == 0u)
    {
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2456;
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2456;
        float _2459 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2456;
        uvec4 _2471 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2472 = _2471.x;
        uint _2483 = uint((float(_2471.y) * floor(float(uint(cbSceneParam._m0[85u].y * _709) / _2472))) + floor(float(uint(cbSceneParam._m0[85u].x * _708) / _2472)));
        float _2493 = (log2(_2459 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2494 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        uint _2497 = uint(isnan(14.0) ? _2494 : (isnan(_2494) ? 14.0 : min(_2494, 14.0)));
        uvec4 _2502 = texelFetch(g_lightClusterGridBuffer, int(((_2497 << 2u) + (_2483 << 6u)) >> 2u));
        uint _2503 = _2502.x;
        uint _2504 = _2471.z;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        if (((((1u << ((_2504 >> 4u) & 15u)) + 4294967295u) & _2503) == 0u) || ((_2504 & 240u) == 0u))
        {
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
        }
        else
        {
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2615;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            uint _2762 = 0u;
            uint _2771;
            bool _2772;
            for (;;)
            {
                _2771 = texelFetch(g_lightClassification, int((((_2497 << 5u) + (_2483 << 9u)) + (_2762 << 2u)) >> 2u)).x;
                _2772 = _2771 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2772)
                {
                    frontier_phi_66_pred = _2756;
                    frontier_phi_66_pred_1 = _2761;
                    frontier_phi_66_pred_2 = _2760;
                    frontier_phi_66_pred_3 = _2759;
                    frontier_phi_66_pred_4 = _2758;
                    frontier_phi_66_pred_5 = _2757;
                }
                else
                {
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    float _2906;
                    uint _2907;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2760;
                    _2906 = _2761;
                    _2907 = _2771;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    for (;;)
                    {
                        uint _2911 = uint(findLSB(_2907)) + (_2762 << 5u);
                        uint _2908 = (_2907 + 4294967295u) & _2907;
                        uint _2913 = _2911 * 48u;
                        vec4 _2927 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 3u)).x));
                        uint _2933 = (_2911 * 48u) + 4u;
                        vec4 _2946 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 3u)).x));
                        uint _2952 = (_2911 * 48u) + 8u;
                        vec3 _2963 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x));
                        float _2967 = _2927.x - _2457;
                        float _2968 = _2927.y - _2458;
                        float _2969 = _2927.z - _2459;
                        float _2970 = dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969));
                        float _2973 = inversesqrt(_2970);
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2977 = dot(vec3(_729, _732, _735), vec3(_2974, _2975, _2976));
                        float _2982 = 1.0 - (_2970 * _2927.w);
                        float _4361 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2983 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _2984 = sqrt(_2970) * _2946.w;
                        float _2987 = 1.39999997615814208984375 / (_2984 + 1.39999997615814208984375);
                        float _2988 = _2987 * _2987;
                        float _2991 = ((1.0 - _2988) * _2977) + _2988;
                        float _2994 = _2984 * _2984;
                        float _2998 = ((isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))) * _2983) / ((_2994 * 0.699999988079071044921875) + 1.0);
                        float _3002 = (-0.0) - _2457;
                        float _3003 = (-0.0) - _2458;
                        float _3004 = (-0.0) - _2459;
                        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                        float _3009 = _3008 * _3002;
                        float _3010 = _3008 * _3003;
                        float _3011 = _3008 * _3004;
                        float _3019 = exp2(log2(1.0 / ((_2994 * 3.5) + 5.0)) * 0.25);
                        float _3020 = 1.0 - _789;
                        float _3027 = sqrt(1.0 - ((1.0 - (_3020 * _3020)) * (1.0 - (_3019 * _3019))));
                        float _3028 = _3027 * _3027;
                        float _3029 = _3028 * _3028;
                        float _3030 = _3009 + _2974;
                        float _3031 = _3010 + _2975;
                        float _3032 = _3011 + _2976;
                        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
                        float _3040 = dot(vec3(_729, _732, _735), vec3(_3009, _3010, _3011));
                        float _4377 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3043 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3044 = dot(vec3(_729, _732, _735), vec3(_3036 * _3030, _3036 * _3031, _3036 * _3032));
                        float _4388 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3047 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3051 = ((_3047 * _3047) * (_3029 + (-1.0))) + 1.0;
                        float _3052 = _2987 * _3028;
                        float _3053 = _3052 * _3052;
                        float _3056 = ((1.0 - _3053) * _2977) + _3053;
                        float _4399 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3057 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3058 = 1.0 - _3028;
                        float _3068 = (0.5 / (((_3057 * ((_3043 * _3058) + _3028)) + 9.9999999392252902907785028219223e-09) + (((_3057 * _3058) + _3028) * _3043))) * _3057;
                        float _4410 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3079 = (((_3029 * 3.1415927410125732421875) * (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) / ((_3051 * _3051) * ((_2994 * 2.1991131305694580078125) + 3.141590118408203125))) * _2983;
                        _2831 = (_2998 * _2946.x) + _2904;
                        _2832 = (_2998 * _2946.y) + _2905;
                        _2833 = (_2998 * _2946.z) + _2906;
                        _2828 = (_3079 * _2963.x) + _2901;
                        _2829 = (_3079 * _2963.y) + _2902;
                        _2830 = (_3079 * _2963.z) + _2903;
                        if (_2908 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2832;
                            _2906 = _2833;
                            _2907 = _2908;
                        }
                    }
                    frontier_phi_66_pred = _2828;
                    frontier_phi_66_pred_1 = _2833;
                    frontier_phi_66_pred_2 = _2832;
                    frontier_phi_66_pred_3 = _2831;
                    frontier_phi_66_pred_4 = _2830;
                    frontier_phi_66_pred_5 = _2829;
                }
                _2605 = frontier_phi_66_pred;
                _2615 = frontier_phi_66_pred_1;
                _2613 = frontier_phi_66_pred_2;
                _2611 = frontier_phi_66_pred_3;
                _2609 = frontier_phi_66_pred_4;
                _2607 = frontier_phi_66_pred_5;
                uint _2763 = _2762 + 1u;
                if (_2763 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2756 = _2605;
                    _2757 = _2607;
                    _2758 = _2609;
                    _2759 = _2611;
                    _2760 = _2613;
                    _2761 = _2615;
                    _2762 = _2763;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
        }
        uvec4 _2618 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2619 = _2618.z;
        uint _2621 = (_2619 >> 8u) & 15u;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        if (((4294967295u << _2621) & _2503) == 0u)
        {
            _2724 = _2604;
            _2726 = _2606;
            _2728 = _2608;
            _2730 = _2610;
            _2732 = _2612;
            _2734 = _2614;
        }
        else
        {
            float _2749 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
            float _2750 = _2749 * _2457;
            float _2751 = _2749 * _2458;
            float _2752 = _2749 * _2459;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2621 < ((_2619 >> 12u) & 15u))
            {
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2735;
                float _2884 = _2604;
                float _2885 = _2606;
                float _2886 = _2608;
                float _2887 = _2610;
                float _2888 = _2612;
                float _2889 = _2614;
                uint _2890 = _2621;
                uint _2899;
                bool _2900;
                for (;;)
                {
                    _2899 = texelFetch(g_lightClassification, int((((_2497 << 5u) + (_2483 << 9u)) + (_2890 << 2u)) >> 2u)).x;
                    _2900 = _2899 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2900)
                    {
                        frontier_phi_77_pred = _2889;
                        frontier_phi_77_pred_1 = _2888;
                        frontier_phi_77_pred_2 = _2887;
                        frontier_phi_77_pred_3 = _2886;
                        frontier_phi_77_pred_4 = _2885;
                        frontier_phi_77_pred_5 = _2884;
                    }
                    else
                    {
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        float _3110 = _2888;
                        float _3111 = _2889;
                        uint _3112 = _2899;
                        uint _3113;
                        vec4 _3138;
                        float _3139;
                        vec4 _3154;
                        vec3 _3166;
                        vec4 _3182;
                        vec4 _3197;
                        float _3243;
                        bool _3244;
                        for (;;)
                        {
                            uint _3123 = ((_2890 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3112));
                            _3113 = (_3112 + 4294967295u) & _3112;
                            uint _3125 = _3123 * 40u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            _3139 = _3138.w;
                            uint _3141 = (_3123 * 40u) + 4u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3156 = (_3123 * 40u) + 8u;
                            _3166 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x));
                            uint _3169 = (_3123 * 40u) + 16u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3184 = (_3123 * 40u) + 20u;
                            _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            uint _3199 = (_3123 * 40u) + 24u;
                            vec4 _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3218 = (_3123 * 40u) + 28u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            _3243 = fma(_2459, _3231.z, fma(_2458, _3231.y, _3231.x * _2457)) + _3231.w;
                            _3244 = !((fma(_2459, _3212.z, fma(_2458, _3212.y, _3212.x * _2457)) + _3212.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3244)
                            {
                                float _3271 = _3138.x - _2457;
                                float _3272 = _3138.y - _2458;
                                float _3273 = _3138.z - _2459;
                                float _3274 = dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273));
                                float _3277 = inversesqrt(_3274);
                                float _3278 = _3277 * _3271;
                                float _3279 = _3277 * _3272;
                                float _3280 = _3277 * _3273;
                                float _3284 = 1.0 - (_3274 / (_3139 * _3139));
                                float _4421 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3285 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3289 = sqrt(_3274) * _3154.w;
                                float _3291 = 1.39999997615814208984375 / (_3289 + 1.39999997615814208984375);
                                float _3292 = _3291 * _3291;
                                float _3295 = ((1.0 - _3292) * dot(vec3(_3278, _3279, _3280), vec3(_729, _732, _735))) + _3292;
                                float _3298 = _3289 * _3289;
                                float _3302 = (fma(_2459, _3182.z, fma(_2458, _3182.y, _3182.x * _2457)) + _3182.w) / _3243;
                                float _3303 = (fma(_2459, _3197.z, fma(_2458, _3197.y, _3197.x * _2457)) + _3197.w) / _3243;
                                float _3307 = 1.0 - dot(vec2(_3302, _3303), vec2(_3302, _3303));
                                float _4437 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3309 = _3308 * (((isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * _3285) / ((_3298 * 0.699999988079071044921875) + 1.0));
                                float _3321 = exp2(log2(1.0 / ((_3298 * 3.5) + 5.0)) * 0.25);
                                float _3322 = 1.0 - _789;
                                float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                                float _3330 = _3329 * _3329;
                                float _3331 = _3330 * _3330;
                                float _3332 = _3278 - _2750;
                                float _3333 = _3279 - _2751;
                                float _3334 = _3280 - _2752;
                                float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                                float _3342 = dot(vec3(_729, _732, _735), vec3((-0.0) - _2750, (-0.0) - _2751, (-0.0) - _2752));
                                float _4448 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3345 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3346 = dot(vec3(_729, _732, _735), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                                float _4459 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                                float _3349 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                                float _3354 = _3291 * _3330;
                                float _3355 = _3354 * _3354;
                                float _3361 = ((1.0 - _3355) * dot(vec3(_729, _732, _735), vec3(_3278, _3279, _3280))) + _3355;
                                float _4470 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3363 = 1.0 - _3330;
                                float _3373 = (0.5 / (((_3362 * ((_3345 * _3363) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3362 * _3363) + _3330) * _3345))) * _3362;
                                float _4481 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3383 = (_3308 * _3285) * (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) / ((_3353 * _3353) * ((_3298 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3309 * _3154.y;
                                frontier_phi_83_pred_1 = _3309 * _3154.x;
                                frontier_phi_83_pred_2 = _3383 * _3166.z;
                                frontier_phi_83_pred_3 = _3383 * _3166.y;
                                frontier_phi_83_pred_4 = _3383 * _3166.x;
                                frontier_phi_83_pred_5 = _3309 * _3154.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3391 = frontier_phi_83_pred;
                            _3390 = frontier_phi_83_pred_1;
                            _3389 = frontier_phi_83_pred_2;
                            _3388 = frontier_phi_83_pred_3;
                            _3387 = frontier_phi_83_pred_4;
                            _3392 = frontier_phi_83_pred_5;
                            _3096 = _3390 + _3109;
                            _3097 = _3391 + _3110;
                            _3098 = _3392 + _3111;
                            _3093 = _3387 + _3106;
                            _3094 = _3388 + _3107;
                            _3095 = _3389 + _3108;
                            if (_3113 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3113;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3098;
                        frontier_phi_77_pred_1 = _3097;
                        frontier_phi_77_pred_2 = _3096;
                        frontier_phi_77_pred_3 = _3095;
                        frontier_phi_77_pred_4 = _3094;
                        frontier_phi_77_pred_5 = _3093;
                    }
                    _2735 = frontier_phi_77_pred;
                    _2733 = frontier_phi_77_pred_1;
                    _2731 = frontier_phi_77_pred_2;
                    _2729 = frontier_phi_77_pred_3;
                    _2727 = frontier_phi_77_pred_4;
                    _2725 = frontier_phi_77_pred_5;
                    uint _2891 = _2890 + 1u;
                    if (_2891 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2884 = _2725;
                        _2885 = _2727;
                        _2886 = _2729;
                        _2887 = _2731;
                        _2888 = _2733;
                        _2889 = _2735;
                        _2890 = _2891;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2729;
                frontier_phi_58_59_ladder_1 = _2735;
                frontier_phi_58_59_ladder_2 = _2733;
                frontier_phi_58_59_ladder_3 = _2731;
                frontier_phi_58_59_ladder_4 = _2727;
                frontier_phi_58_59_ladder_5 = _2725;
            }
            else
            {
                frontier_phi_58_59_ladder = _2608;
                frontier_phi_58_59_ladder_1 = _2614;
                frontier_phi_58_59_ladder_2 = _2612;
                frontier_phi_58_59_ladder_3 = _2610;
                frontier_phi_58_59_ladder_4 = _2606;
                frontier_phi_58_59_ladder_5 = _2604;
            }
            _2724 = frontier_phi_58_59_ladder_5;
            _2726 = frontier_phi_58_59_ladder_4;
            _2728 = frontier_phi_58_59_ladder;
            _2730 = frontier_phi_58_59_ladder_3;
            _2732 = frontier_phi_58_59_ladder_2;
            _2734 = frontier_phi_58_59_ladder_1;
        }
        float _2739 = isnan(1.0) ? _773 : (isnan(_773) ? 1.0 : min(_773, 1.0));
        _2516 = (_2739 * _2730) + _1971;
        _2518 = (_2739 * _2732) + _1973;
        _2520 = (_2739 * _2734) + _1975;
        _2522 = ((_2724 * 0.039999999105930328369140625) * _2739) + _2301;
        _2524 = ((_2726 * 0.039999999105930328369140625) * _2739) + _2303;
        _2526 = ((_2728 * 0.039999999105930328369140625) * _2739) + _2305;
    }
    else
    {
        _2516 = _1971;
        _2518 = _1973;
        _2520 = _1975;
        _2522 = _2301;
        _2524 = _2303;
        _2526 = _2305;
    }
    float _4497 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4508 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4519 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _2543 = ((isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2516 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _773))) + ((_2522 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1609)) * cbPerFrame._m0[3u].x);
    float _2544 = ((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2518 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _773))) + ((_2524 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1609)) * cbPerFrame._m0[3u].x);
    float _2545 = ((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2520 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _773))) + ((_2526 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1609)) * cbPerFrame._m0[3u].x);
    uint _2546 = _241 + 6u;
    float _2554 = _708 / cbSceneParam._m0[86u].x;
    float _2555 = _709 / cbSceneParam._m0[86u].y;
    vec4 _2569 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2554, _2555, (log2((isnan(cbSceneParam._m0[77u].w) ? _630 : (isnan(_630) ? cbSceneParam._m0[77u].w : min(_630, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2571 = _2569.x;
    float _2572 = _2569.y;
    float _2573 = _2569.z;
    float _2574 = _2569.w;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    if (_630 > cbSceneParam._m0[78u].w)
    {
        float _2629 = isnan(_630) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _630 : min(cbSceneParam._m0[80u].w, _630));
        float _2630 = _2629 / _630;
        float _2641 = _2630 * _680;
        float _2642 = _681 * _2630;
        float _2643 = (-0.0) - _2642;
        float _2644 = _2630 * _682;
        float _2646 = (cbSceneParam._m0[77u].w * _2643) / _2629;
        float _2647 = _2646 + cbSceneParam._m0[79u].w;
        float _2648 = cbSceneParam._m0[79u].w - _2642;
        float _2654 = sqrt(((_2641 * _2641) + (_2642 * _2642)) + (_2644 * _2644));
        float _2657 = (1.0 - (cbSceneParam._m0[77u].w / _2629)) * _2654;
        float _2662 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2664 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2841;
        if (abs((_2643 - _2646) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2841 = ((((_2647 > 0.0) ? exp2(_2662 * _2647) : (2.0 - exp2(_2664 * _2647))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2657;
        }
        else
        {
            float _2785 = 1.0 / cbSceneParam._m0[80u].x;
            float _2786 = isnan(_2648) ? _2647 : (isnan(_2647) ? _2648 : max(_2647, _2648));
            float _2787 = isnan(_2648) ? _2647 : (isnan(_2647) ? _2648 : min(_2647, _2648));
            float _2796 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : min(_2786, 0.0));
            float _2797 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : min(_2787, 0.0));
            _2841 = ((abs(_2654 / _2643) * cbSceneParam._m0[80u].y) * ((((_2796 - _2797) * 2.0) - ((exp2(_2662 * (isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0)))) - exp2(_2662 * (isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0))))) * _2785)) - ((exp2(_2664 * _2796) - exp2(_2664 * _2797)) * _2785))) + (_2657 * cbSceneParam._m0[80u].z);
        }
        vec4 _2843 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2554, _2555, 1.0), 0.0);
        float _2852 = exp2((_2841 * (-1.44269502162933349609375)) * (1.0 - _2843.w));
        float _2853 = log2(_2852);
        float _2869 = log2(_2574);
        _2666 = (exp2(_2869 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].x)) * _2843.x) / cbSceneParam._m0[78u].x)) + _2571;
        _2668 = (exp2(_2869 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].y)) * _2843.y) / cbSceneParam._m0[78u].y)) + _2572;
        _2670 = (exp2(_2869 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2853 * cbSceneParam._m0[78u].z)) * _2843.z) / cbSceneParam._m0[78u].z)) + _2573;
        _2672 = _2852 * _2574;
    }
    else
    {
        _2666 = _2571;
        _2668 = _2572;
        _2670 = _2573;
        _2672 = _2574;
    }
    bool _2879;
    vec4 _2682;
    vec4 _2704;
    float _2706;
    float _2710;
    float _2711;
    float _2712;
    float _2713;
    bool _2723;
    for (;;)
    {
        _2682 = cbMatDynParam._m0[0u];
        float _2684 = roundEven(_2682.y);
        bool _2685 = _2684 == 3.0;
        float _2686 = log2(_2672);
        float _2693 = exp2(_2686 * cbSceneParam._m0[78u].x) * _2543;
        float _2694 = exp2(_2686 * cbSceneParam._m0[78u].y) * _2544;
        float _2695 = exp2(_2686 * cbSceneParam._m0[78u].z) * _2545;
        float _2702 = _696 + (-0.5);
        _2704 = cbMtdParam._m0[1u];
        _2706 = _2704.y * _2702;
        float _2709 = (_2684 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2710 = _2709 * (_2685 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2666)));
        _2711 = _2709 * (_2685 ? _2694 : (_2694 + (cbSceneParam._m0[72u].w * _2668)));
        _2712 = _2709 * (_2685 ? _2695 : (_2695 + (cbSceneParam._m0[72u].w * _2670)));
        _2713 = _2702 * 0.999000012874603271484375;
        _2723 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2723)
        {
            if ((cbInstanceData._m0[_241 + 7u].x + _2713) < 0.5)
            {
                _2879 = true;
                break;
            }
        }
        uint _2820 = _748 + uint(_2682.w);
        if ((cbInstanceData._m0[_2820].w < 1.0) && ((cbInstanceData._m0[_2820].w + _2713) < 0.5))
        {
            _2879 = true;
            break;
        }
        if ((_2706 + 1.0) < _2704.x)
        {
            _2879 = true;
            break;
        }
        _2879 = false;
        break;
    }
    float _3084;
    if (_2879)
    {
        discard_state = true;
        _3084 = 0.0;
    }
    else
    {
        _3084 = cbInstanceData._m0[_2546].w;
    }
    SV_Target.x = _2710;
    SV_Target.y = _2711;
    SV_Target.z = _2712;
    SV_Target.w = _3084;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2546].w;
    discard_exit();
}


