#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1124;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _347 = _345.x;
    float _357 = dot(vec4(_347, _345.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _374 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_347 - _357) * cbMtdParam._m0[24u].x) + _357) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3714 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _382 = (_375 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _383 = (_375 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _384 = (_375 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _258) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _259) + cbTextureTilingScale._m0[3u].w));
    vec4 _421 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _423 = _421.x;
    float _433 = dot(vec4(_423, _421.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _447 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_423 - _433) * cbMtdParam._m0[24u].x) + _433) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3725 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _455 = (_448 * ((_401.x * cbMtdParam._m0[13u].x) - _382)) + _382;
    float _456 = (_448 * ((_401.y * cbMtdParam._m0[13u].y) - _383)) + _383;
    float _457 = (_448 * ((_401.z * cbMtdParam._m0[13u].z) - _384)) + _384;
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _492 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _509 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _511 = _509.x;
    float _512 = _509.y;
    float _513 = _509.z;
    float _520 = ((_492.x - _511) * _375) + _511;
    float _521 = ((_492.y - _512) * _375) + _512;
    float _522 = ((_492.z - _513) * _375) + _513;
    vec4 _534 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _258) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _547 = ((_534.z - _522) * _448) + _522;
    float _550 = ((((_534.x - _520) * _448) + _520) * 2.0) + (-1.0);
    float _551 = ((((_534.y - _521) * _448) + _521) * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3736 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))));
    float _562 = _550 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_469.x * 2.0) + (-1.0)));
    float _563 = _551 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_469.y * 2.0) + (-1.0)));
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _583 = (((_469.z - _547) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _547;
    float _588 = cbMtdParam._m0[22u].x + _576.w;
    float _591 = fma(_557, _225 * NORMAL.x, fma(_563, _232 * TANGENT.x, (_218 * _210) * _562));
    float _594 = fma(_557, _225 * NORMAL.y, fma(_563, _232 * TANGENT.y, (_218 * _211) * _562));
    float _597 = fma(_557, _225 * NORMAL.z, fma(_563, _232 * TANGENT.z, (_218 * _212) * _562));
    float _601 = inversesqrt(dot(vec3(_591, _594, _597), vec3(_591, _594, _597)));
    float _602 = _601 * _591;
    float _603 = _601 * _594;
    float _604 = _601 * _597;
    float _3747 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _605 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _3769 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3780 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3791 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _623 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _675 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _665);
    float _676 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _665);
    float _677 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _665);
    float _681 = inversesqrt(dot(vec3(_675, _676, _677), vec3(_675, _676, _677)));
    float _682 = _675 * _681;
    float _683 = _676 * _681;
    float _684 = _677 * _681;
    float _690 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _691 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _709 = fma(_604, cbSceneParam._m0[5u].z, fma(_603, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _602));
    float _712 = fma(_604, cbSceneParam._m0[6u].z, fma(_603, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _602));
    float _715 = fma(_604, cbSceneParam._m0[7u].z, fma(_603, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _602));
    uint _729 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _735 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_729].x;
    float _736 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_729].y;
    float _737 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_729].z;
    float _3802 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    vec4 _749 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _690, cbSceneParam._m0[86u].y * _691));
    float _753 = ((isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * TEXCOORD_5.w) * _749.x;
    float _754 = dot(vec3(_602, _603, _604), vec3(_682, _683, _684));
    float _757 = _754 * 2.0;
    float _761 = (_757 * _602) - _682;
    float _762 = (_757 * _603) - _683;
    float _763 = (_757 * _604) - _684;
    float _767 = abs(dot(vec3(_682, _683, _684), vec3(_602, _603, _604)));
    float _3835 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _769 = sqrt(_605);
    float _782 = exp2((_769 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_769 * 3.0));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1123;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _848 = fma(_822, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814));
        float _852 = fma(_822, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814));
        float _856 = fma(_822, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814));
        float _881 = _814 + _602;
        float _882 = _818 + _603;
        float _883 = _822 + _604;
        float _893 = fma(_883, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881)) - _848;
        float _894 = fma(_883, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881)) - _852;
        float _895 = fma(_883, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881)) - _856;
        float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
        float _912 = ((_899 * _893) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_848 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_899 * _894) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_852 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_899 * _895) / cbModelParam._m0[34u].z) + ((((((_856 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        float _951 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_917.x + (-0.5));
        float _953 = _951 * (_917.y + (-0.5));
        float _954 = _951 * (_917.z + (-0.5));
        float _961 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_924.x + (-0.5));
        float _963 = _961 * (_924.y + (-0.5));
        float _964 = _961 * (_924.z + (-0.5));
        float _971 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_931.x + (-0.5));
        float _973 = _971 * (_931.y + (-0.5));
        float _974 = _971 * (_931.z + (-0.5));
        float _981 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_938.x + (-0.5));
        float _983 = _981 * (_938.y + (-0.5));
        float _984 = _981 * (_938.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1005 = (dot(vec3(_602, _603, _604), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1015 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3883 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1017 + 1.0))) + _1022) * _985;
        float _1032 = _953 * 0.5;
        float _1033 = _963 * 0.5;
        float _1034 = _973 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_602, _603, _604), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3916 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1059 + 1.0))) + _1064) * _986;
        float _1074 = _954 * 0.5;
        float _1075 = _964 * 0.5;
        float _1076 = _974 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_602, _603, _604), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3949 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1101 + 1.0))) + _1106) * _987;
        _1123 = _954;
        _1125 = _953;
        _1126 = _952;
        _1127 = _964;
        _1128 = _963;
        _1129 = _962;
        _1130 = _974;
        _1131 = _973;
        _1132 = _972;
        _1133 = _987;
        _1134 = _986;
        _1135 = _985;
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
    }
    else
    {
        _1123 = _1124;
        _1125 = _1124;
        _1126 = _1124;
        _1127 = _1124;
        _1128 = _1124;
        _1129 = _1124;
        _1130 = _1124;
        _1131 = _1124;
        _1132 = _1124;
        _1133 = _1124;
        _1134 = _1124;
        _1135 = _1124;
        _1136 = 0.0;
        _1137 = 0.0;
        _1138 = 0.0;
    }
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1162 = fma(_822, cbModelParam._m0[30u].z, fma(_818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _814));
        float _1166 = fma(_822, cbModelParam._m0[31u].z, fma(_818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _814));
        float _1170 = fma(_822, cbModelParam._m0[32u].z, fma(_818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _814));
        float _1193 = _814 + _602;
        float _1194 = _818 + _603;
        float _1195 = _822 + _604;
        float _1205 = fma(_1195, cbModelParam._m0[30u].z, fma(_1194, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193)) - _1162;
        float _1206 = fma(_1195, cbModelParam._m0[31u].z, fma(_1194, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193)) - _1166;
        float _1207 = fma(_1195, cbModelParam._m0[32u].z, fma(_1194, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193)) - _1170;
        float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
        float _1224 = ((_1211 * _1205) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1162 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1211 * _1206) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1166 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1211 * _1207) / cbModelParam._m0[35u].z) + ((((((_1170 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        float _1261 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1228.x + (-0.5));
        float _1263 = _1261 * (_1228.y + (-0.5));
        float _1264 = _1261 * (_1228.z + (-0.5));
        float _1271 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1235.x + (-0.5));
        float _1273 = _1271 * (_1235.y + (-0.5));
        float _1274 = _1271 * (_1235.z + (-0.5));
        float _1281 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1242.x + (-0.5));
        float _1283 = _1281 * (_1242.y + (-0.5));
        float _1284 = _1281 * (_1242.z + (-0.5));
        float _1291 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1249.x + (-0.5));
        float _1293 = _1291 * (_1249.y + (-0.5));
        float _1294 = _1291 * (_1249.z + (-0.5));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = _1262 * 0.5;
        float _1299 = _1272 * 0.5;
        float _1300 = _1282 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_602, _603, _604), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _4012 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1325 + 1.0))) + _1330) * _1295;
        float _1340 = _1263 * 0.5;
        float _1341 = _1273 * 0.5;
        float _1342 = _1283 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_602, _603, _604), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _4045 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1367 + 1.0))) + _1372) * _1296;
        float _1382 = _1264 * 0.5;
        float _1383 = _1274 * 0.5;
        float _1384 = _1284 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_602, _603, _604), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _4078 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1409 + 1.0))) + _1414) * _1297;
        _1431 = _1264;
        _1432 = _1263;
        _1433 = _1262;
        _1434 = _1274;
        _1435 = _1273;
        _1436 = _1272;
        _1437 = _1284;
        _1438 = _1283;
        _1439 = _1282;
        _1440 = _1297;
        _1441 = _1296;
        _1442 = _1295;
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
    }
    else
    {
        _1431 = _1124;
        _1432 = _1124;
        _1433 = _1124;
        _1434 = _1124;
        _1435 = _1124;
        _1436 = _1124;
        _1437 = _1124;
        _1438 = _1124;
        _1439 = _1124;
        _1440 = _1124;
        _1441 = _1124;
        _1442 = _1124;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1136)) + _1136;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1137)) + _1137;
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1138)) + _1138;
    float _1478 = fma(_1457, cbSceneParam._m0[89u].z, fma(_1456, cbSceneParam._m0[89u].y, _1455 * cbSceneParam._m0[89u].x));
    float _1481 = fma(_1457, cbSceneParam._m0[90u].z, fma(_1456, cbSceneParam._m0[90u].y, _1455 * cbSceneParam._m0[90u].x));
    float _1484 = fma(_1457, cbSceneParam._m0[91u].z, fma(_1456, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1455));
    float _1499 = _761 * 0.5;
    float _1500 = _762 * 0.5;
    float _1501 = _763 * 0.5;
    float _1502 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1505 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1508 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1542;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1515 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1123, _1127, _1130, _1133));
        float _1519 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1523 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1530 = dot(vec4(cbModelParam._m0[39u]), vec4(_1499, _1500, _1501, 1.0));
        _1542 = dot(vec3(isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1542 = 1.0;
    }
    float _1553;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1544 = dot(vec4(cbModelParam._m0[40u]), vec4(_1499, _1500, _1501, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1544) ? 0.0 : (isnan(0.0) ? _1544 : max(0.0, _1544))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1557 = (_1553 * cbModelParam._m0[1u].x) + (_1542 * (1.0 - cbModelParam._m0[1u].x));
    float _1567 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _605);
    float _1568 = isnan(_1567) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1567 : min(cbModelParam._m0[25u].z, _1567));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1617 = fma(_822, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814)) + cbModelParam._m0[13u].w;
        float _1621 = fma(_822, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814)) + cbModelParam._m0[14u].w;
        float _1625 = fma(_822, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814)) + cbModelParam._m0[15u].w;
        float _1628 = fma(_763, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761));
        float _1631 = fma(_763, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761));
        float _1634 = fma(_763, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761));
        float _1662;
        if (_1628 > 0.0)
        {
            _1662 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1662 = frontier_phi_14_12_ladder;
        }
        float _1833;
        if (_1631 > 0.0)
        {
            _1833 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1833 = frontier_phi_23_19_ladder;
        }
        float _2128;
        if (_1634 > 0.0)
        {
            _2128 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2128 = frontier_phi_35_30_ladder;
        }
        float _2130 = isnan(_1833) ? _1662 : (isnan(_1662) ? _1833 : min(_1662, _1833));
        float _2131 = isnan(_2128) ? _2130 : (isnan(_2130) ? _2128 : min(_2130, _2128));
        float _2135 = (_2131 * _1628) + _1617;
        float _2136 = (_2131 * _1631) + _1621;
        float _2137 = (_2131 * _1634) + _1625;
        float _2138 = _2131 * 9.9999997473787516355514526367188e-05;
        float _2140 = (-1.0) - _2138;
        float _2142 = _2138 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2137 > _2142) || ((_2137 < _2140) || ((_2136 > _2142) || ((_2136 < _2140) || ((_2135 < _2140) || (_2135 > _2142))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2282 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2137, cbModelParam._m0[9u].z, fma(_2136, cbModelParam._m0[9u].y, _2135 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2137, cbModelParam._m0[10u].z, fma(_2136, cbModelParam._m0[10u].y, _2135 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2137, cbModelParam._m0[11u].z, fma(_2136, cbModelParam._m0[11u].y, _2135 * cbModelParam._m0[11u].x))), _1568);
            frontier_phi_13_35_ladder = _2282.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2282.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2282.x * cbModelParam._m0[1u].y;
        }
        _1650 = frontier_phi_13_35_ladder_2;
        _1652 = frontier_phi_13_35_ladder_1;
        _1654 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_761, _762, _763), _1568);
        _1650 = _1638.x * cbModelParam._m0[1u].y;
        _1652 = _1638.y * cbModelParam._m0[1u].y;
        _1654 = _1638.z * cbModelParam._m0[1u].y;
    }
    float _1658 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _605);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1658 : min(cbModelParam._m0[25u].w, _1658));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1714 = fma(_822, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814)) + cbModelParam._m0[21u].w;
        float _1718 = fma(_822, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814)) + cbModelParam._m0[22u].w;
        float _1722 = fma(_822, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814)) + cbModelParam._m0[23u].w;
        float _1725 = fma(_763, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761));
        float _1728 = fma(_763, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761));
        float _1731 = fma(_763, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761));
        float _1838;
        if (_1725 > 0.0)
        {
            _1838 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1838 = frontier_phi_25_21_ladder;
        }
        float _2155;
        if (_1728 > 0.0)
        {
            _2155 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2155 = frontier_phi_37_32_ladder;
        }
        float _2482;
        if (_1731 > 0.0)
        {
            _2482 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2482 = frontier_phi_47_44_ladder;
        }
        float _2484 = isnan(_2155) ? _1838 : (isnan(_1838) ? _2155 : min(_1838, _2155));
        float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
        float _2489 = (_2485 * _1725) + _1714;
        float _2490 = (_2485 * _1728) + _1718;
        float _2491 = (_2485 * _1731) + _1722;
        float _2492 = _2485 * 9.9999997473787516355514526367188e-05;
        float _2493 = (-1.0) - _2492;
        float _2495 = _2492 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2491 > _2495) || ((_2491 < _2493) || ((_2490 > _2495) || ((_2490 < _2493) || ((_2489 < _2493) || (_2489 > _2495))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2609 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2491, cbModelParam._m0[17u].z, fma(_2490, cbModelParam._m0[17u].y, _2489 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2491, cbModelParam._m0[18u].z, fma(_2490, cbModelParam._m0[18u].y, _2489 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2491, cbModelParam._m0[19u].z, fma(_2490, cbModelParam._m0[19u].y, _2489 * cbModelParam._m0[19u].x))), _1659);
            frontier_phi_22_47_ladder = _2609.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2609.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2609.x * cbModelParam._m0[1u].z;
        }
        _1750 = frontier_phi_22_47_ladder_2;
        _1752 = frontier_phi_22_47_ladder_1;
        _1754 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_761, _762, _763), _1659);
        _1750 = _1734.x * cbModelParam._m0[1u].z;
        _1752 = _1734.y * cbModelParam._m0[1u].z;
        _1754 = _1734.z * cbModelParam._m0[1u].z;
    }
    float _1766 = ((((1.0 - _782) * ((_769 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_782 * _769)) * _753;
    float _1767 = _1766 * ((cbModelParam._m0[1u].w * (_1750 - _1650)) + _1650);
    float _1768 = _1766 * ((cbModelParam._m0[1u].w * (_1752 - _1652)) + _1652);
    float _1769 = _1766 * ((cbModelParam._m0[1u].w * (_1754 - _1654)) + _1654);
    float _1772 = fma(_1769, cbSceneParam._m0[89u].z, fma(_1768, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1775 = fma(_1769, cbSceneParam._m0[90u].z, fma(_1768, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1778 = fma(_1769, cbSceneParam._m0[91u].z, fma(_1768, cbSceneParam._m0[91u].y, _1767 * cbSceneParam._m0[91u].x));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1816 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1820 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1824 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1825 = _1812 / _1824;
    float _1826 = _1816 / _1824;
    float _1827 = _1820 / _1824;
    float _1974;
    float _1975;
    float _1976;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1854 = ((uint(_1827 > cbSceneParam._m0[59u].y) + uint(_1827 > cbSceneParam._m0[59u].x)) + uint(_1827 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1855 = _1854 + 43u;
        uint _1863 = _1854 + 44u;
        uint _1871 = _1854 + 45u;
        uint _1879 = _1854 + 46u;
        float _1890 = fma(_1824, cbSceneParam._m0[_1855].w, fma(_1820, cbSceneParam._m0[_1855].z, fma(_1816, cbSceneParam._m0[_1855].y, _1812 * cbSceneParam._m0[_1855].x)));
        float _1894 = fma(_1824, cbSceneParam._m0[_1863].w, fma(_1820, cbSceneParam._m0[_1863].z, fma(_1816, cbSceneParam._m0[_1863].y, _1812 * cbSceneParam._m0[_1863].x)));
        float _1902 = fma(_1824, cbSceneParam._m0[_1879].w, fma(_1820, cbSceneParam._m0[_1879].z, fma(_1816, cbSceneParam._m0[_1879].y, _1812 * cbSceneParam._m0[_1879].x)));
        float _1907 = cbSceneParam._m0[33u].z * _1902;
        float _1909 = cbSceneParam._m0[33u].w * _1902;
        float _1912 = fma(_1824, cbSceneParam._m0[_1871].w, fma(_1820, cbSceneParam._m0[_1871].z, fma(_1816, cbSceneParam._m0[_1871].y, _1812 * cbSceneParam._m0[_1871].x))) / _1902;
        float _1960 = (cbSceneParam._m0[33u].x - sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827))) * cbSceneParam._m0[33u].y;
        float _4204 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1967 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1907 + _1890) / _1902, (_1909 + _1894) / _1902), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1909 + _1890) / _1902, (_1894 - _1907) / _1902), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1890 - _1907) / _1902, (_1894 - _1909) / _1902), _1912), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1890 - _1909) / _1902, (_1907 + _1894) / _1902), _1912), 0.0)).x), vec4(0.25)));
        _1974 = 1.0 - (_1967 * cbSceneParam._m0[34u].x);
        _1975 = 1.0 - (_1967 * cbSceneParam._m0[34u].y);
        _1976 = 1.0 - (_1967 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1974 = 1.0;
        _1975 = 1.0;
        _1976 = 1.0;
    }
    float _2040;
    float _2042;
    float _2044;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2028 = fma(_1824, cbSceneParam._m0[63u].w, fma(_1820, cbSceneParam._m0[63u].z, fma(_1816, cbSceneParam._m0[63u].y, _1812 * cbSceneParam._m0[63u].x)));
        float _2029 = fma(_1824, cbSceneParam._m0[60u].w, fma(_1820, cbSceneParam._m0[60u].z, fma(_1816, cbSceneParam._m0[60u].y, _1812 * cbSceneParam._m0[60u].x))) / _2028;
        float _2030 = fma(_1824, cbSceneParam._m0[61u].w, fma(_1820, cbSceneParam._m0[61u].z, fma(_1816, cbSceneParam._m0[61u].y, _1812 * cbSceneParam._m0[61u].x))) / _2028;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2029 >= cbSceneParam._m0[64u].x) && (_2030 >= cbSceneParam._m0[64u].y)) && (_2029 <= cbSceneParam._m0[64u].z)) && (_2030 <= cbSceneParam._m0[64u].w))
        {
            float _2168 = fma(_1824, cbSceneParam._m0[62u].w, fma(_1820, cbSceneParam._m0[62u].z, fma(_1816, cbSceneParam._m0[62u].y, _1812 * cbSceneParam._m0[62u].x))) / _2028;
            float _2172 = isnan(cbSceneParam._m0[41u].w) ? _2168 : (isnan(_2168) ? cbSceneParam._m0[41u].w : max(_2168, cbSceneParam._m0[41u].w));
            float _2215 = (cbSceneParam._m0[33u].x - sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827))) * cbSceneParam._m0[33u].y;
            float _4220 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
            float _2222 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2029, cbSceneParam._m0[33u].w + _2030), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2029, _2030 - cbSceneParam._m0[33u].z), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2029 - cbSceneParam._m0[33u].z, _2030 - cbSceneParam._m0[33u].w), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2029 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2030), _2172), 0.0)).x), vec4(0.25)));
            float _2226 = 1.0 - (_2222 * cbSceneParam._m0[34u].x);
            float _2227 = 1.0 - (_2222 * cbSceneParam._m0[34u].y);
            float _2228 = 1.0 - (_2222 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2228) ? _1976 : (isnan(_1976) ? _2228 : min(_1976, _2228));
            frontier_phi_34_33_ladder_1 = isnan(_2227) ? _1975 : (isnan(_1975) ? _2227 : min(_1975, _2227));
            frontier_phi_34_33_ladder_2 = isnan(_2226) ? _1974 : (isnan(_1974) ? _2226 : min(_1974, _2226));
        }
        else
        {
            frontier_phi_34_33_ladder = _1976;
            frontier_phi_34_33_ladder_1 = _1975;
            frontier_phi_34_33_ladder_2 = _1974;
        }
        _2040 = frontier_phi_34_33_ladder_2;
        _2042 = frontier_phi_34_33_ladder_1;
        _2044 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2040 = _1974;
        _2042 = _1975;
        _2044 = _1976;
    }
    uvec4 _2049 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2051 = _2049.x * 14u;
    uint _2052 = _2051 + 13u;
    float _2059 = _753 + (-1.0);
    float _2064 = (cbLight._m0[_2052].x * _2059) + 1.0;
    float _2065 = (cbLight._m0[_2052].y * _2059) + 1.0;
    float _2066 = (cbLight._m0[_2052].z * _2059) + 1.0;
    float _2067 = (cbLight._m0[_2052].w * _2059) + 1.0;
    uint _2068 = _2051 + 5u;
    float _2074 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2078 = _2051 + 4u;
    float _2087 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2091 = _2051 | 1u;
    float _2102 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_602, _603, _604));
    float _2105 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_602, _603, _604));
    float _4256 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _4267 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2110 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.3183098733425140380859375;
    float _2112 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * 0.3183098733425140380859375;
    float _2119 = ((cbLight._m0[_2068].x * _2074) * _2112) + (((cbLight._m0[_2078].x * _2040) * _2087) * _2110);
    float _2120 = ((_2074 * cbLight._m0[_2068].y) * _2112) + (((cbLight._m0[_2078].y * _2042) * _2087) * _2110);
    float _2121 = ((_2074 * cbLight._m0[_2068].z) * _2112) + (((cbLight._m0[_2078].z * _2044) * _2087) * _2110);
    uvec4 _2125 = floatBitsToUint(cbLight._m0[_2051 + 12u]);
    bool _2127 = _2125.x == 0u;
    float _2229;
    float _2231;
    float _2233;
    if (_2127)
    {
        _2229 = _2119;
        _2231 = _2120;
        _2233 = _2121;
    }
    else
    {
        uint _2237 = _2051 + 6u;
        float _2253 = (dot(vec3(cbLight._m0[_2051 + 2u].xyz), vec3(_602, _603, _604)) * 0.5) + 0.5;
        float _2254 = _2253 * _2253;
        float _4278 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2255 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _2256 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2229 = (((cbLight._m0[_2237].x * 0.3183098733425140380859375) * _2255) * _2256) + _2119;
        _2231 = (((cbLight._m0[_2237].y * 0.3183098733425140380859375) * _2255) * _2256) + _2120;
        _2233 = (((cbLight._m0[_2237].z * 0.3183098733425140380859375) * _2255) * _2256) + _2121;
    }
    bool _2236 = _2125.y == 0u;
    float _2291;
    float _2293;
    float _2295;
    if (_2236)
    {
        _2291 = _2229;
        _2293 = _2231;
        _2295 = _2233;
    }
    else
    {
        uint _2453 = _2051 + 7u;
        float _2469 = (dot(vec3(cbLight._m0[_2051 + 3u].xyz), vec3(_602, _603, _604)) * 0.5) + 0.5;
        float _2470 = _2469 * _2469;
        float _4294 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2471 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _2472 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2291 = (((cbLight._m0[_2453].x * 0.3183098733425140380859375) * _2471) * _2472) + _2229;
        _2293 = (((cbLight._m0[_2453].y * 0.3183098733425140380859375) * _2471) * _2472) + _2231;
        _2295 = (((cbLight._m0[_2453].z * 0.3183098733425140380859375) * _2471) * _2472) + _2233;
    }
    uint _2298 = _2051 + 8u;
    float _2311 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _605) * 0.949999988079071044921875);
    float _2312 = _2311 * _2311;
    float _2313 = cbLight._m0[_2051].x + _682;
    float _2314 = cbLight._m0[_2051].y + _683;
    float _2315 = cbLight._m0[_2051].z + _684;
    float _2319 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
    float _2320 = _2319 * _2313;
    float _2321 = _2319 * _2314;
    float _2322 = _2319 * _2315;
    float _2323 = dot(vec3(_602, _603, _604), vec3(cbLight._m0[_2051].xyz));
    float _4310 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2326 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _4321 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _2327 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2328 = dot(vec3(_602, _603, _604), vec3(_2320, _2321, _2322));
    float _4332 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2332 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2320, _2321, _2322));
    float _4343 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2336 = _2312 * _2312;
    float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
    float _2351 = (exp2(log2(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2352 = 1.0 - _2312;
    float _2363 = (0.5 / (((_2327 * ((_2326 * _2352) + _2312)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2352) + _2312) * _2326))) * _2326;
    float _4354 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2365 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
    uint _2379 = _2051 + 9u;
    float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _605) * 0.949999988079071044921875);
    float _2391 = _2390 * _2390;
    float _2392 = cbLight._m0[_2091].x + _682;
    float _2393 = cbLight._m0[_2091].y + _683;
    float _2394 = cbLight._m0[_2091].z + _684;
    float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
    float _2399 = _2398 * _2392;
    float _2400 = _2398 * _2393;
    float _2401 = _2398 * _2394;
    float _2402 = dot(vec3(_602, _603, _604), vec3(cbLight._m0[_2091].xyz));
    float _4365 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2406 = dot(vec3(_602, _603, _604), vec3(_2399, _2400, _2401));
    float _4376 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2410 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2399, _2400, _2401));
    float _4387 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2414 = _2391 * _2391;
    float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
    float _2427 = (exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2428 = 1.0 - _2391;
    float _2438 = (0.5 / (((_2327 * ((_2405 * _2428) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2428) + _2391) * _2405))) * _2405;
    float _4398 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
    float _2450 = (((_2427 * cbLight._m0[_2379].x) * _2440) * _2074) + ((((cbLight._m0[_2298].x * _2040) * _2351) * _2365) * _2087);
    float _2451 = (((_2427 * cbLight._m0[_2379].y) * _2440) * _2074) + ((((cbLight._m0[_2298].y * _2042) * _2351) * _2365) * _2087);
    float _2452 = (((_2427 * cbLight._m0[_2379].z) * _2440) * _2074) + ((((cbLight._m0[_2298].z * _2044) * _2351) * _2365) * _2087);
    float _2508;
    float _2510;
    float _2512;
    if (_2127)
    {
        _2508 = _2450;
        _2510 = _2451;
        _2512 = _2452;
    }
    else
    {
        uint _2514 = _2051 + 2u;
        uint _2518 = _2051 + 10u;
        float _2532 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2514].w)) * _605) * 0.949999988079071044921875);
        float _2533 = _2532 * _2532;
        float _2534 = cbLight._m0[_2514].x + _682;
        float _2535 = cbLight._m0[_2514].y + _683;
        float _2536 = cbLight._m0[_2514].z + _684;
        float _2540 = inversesqrt(dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536)));
        float _2541 = _2540 * _2534;
        float _2542 = _2540 * _2535;
        float _2543 = _2540 * _2536;
        float _2544 = dot(vec3(_602, _603, _604), vec3(cbLight._m0[_2514].xyz));
        float _4409 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2548 = dot(vec3(_602, _603, _604), vec3(_2541, _2542, _2543));
        float _4420 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2551 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2552 = dot(vec3(cbLight._m0[_2514].xyz), vec3(_2541, _2542, _2543));
        float _4431 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2556 = _2533 * _2533;
        float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
        float _2569 = (exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2570 = 1.0 - _2533;
        float _2580 = (0.5 / (((_2327 * ((_2547 * _2570) + _2533)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2570) + _2533) * _2547))) * _2547;
        float _4442 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2508 = (((_2569 * cbLight._m0[_2518].x) * _2582) * _2583) + _2450;
        _2510 = (((_2569 * cbLight._m0[_2518].y) * _2582) * _2583) + _2451;
        _2512 = (((_2569 * cbLight._m0[_2518].z) * _2582) * _2583) + _2452;
    }
    float _2614;
    float _2616;
    float _2618;
    if (_2236)
    {
        _2614 = _2508;
        _2616 = _2510;
        _2618 = _2512;
    }
    else
    {
        uint _2625 = _2051 + 3u;
        uint _2629 = _2051 + 11u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _605) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _682;
        float _2646 = cbLight._m0[_2625].y + _683;
        float _2647 = cbLight._m0[_2625].z + _684;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_602, _603, _604), vec3(cbLight._m0[_2625].xyz));
        float _4458 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2659 = dot(vec3(_602, _603, _604), vec3(_2652, _2653, _2654));
        float _4469 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4480 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2680 = (exp2(log2(1.0 - (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2681 = 1.0 - _2644;
        float _2691 = (0.5 / (((_2327 * ((_2658 * _2681) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2327 * _2681) + _2644) * _2658))) * _2658;
        float _4491 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2693 = (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2694 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2614 = (((_2680 * cbLight._m0[_2629].x) * _2693) * _2694) + _2508;
        _2616 = (((_2680 * cbLight._m0[_2629].y) * _2693) * _2694) + _2510;
        _2618 = (((_2680 * cbLight._m0[_2629].z) * _2693) * _2694) + _2512;
    }
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    if (_2049.y == 0u)
    {
        uvec4 _2715 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2716 = _2715.x;
        uint _2727 = uint((float(_2715.y) * floor(float(uint(cbSceneParam._m0[85u].y * _691) / _2716))) + floor(float(uint(cbSceneParam._m0[85u].x * _690) / _2716)));
        float _2737 = (log2(_1827 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2738 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        uint _2741 = uint(isnan(14.0) ? _2738 : (isnan(_2738) ? 14.0 : min(_2738, 14.0)));
        uvec4 _2746 = texelFetch(g_lightClusterGridBuffer, int(((_2741 << 2u) + (_2727 << 6u)) >> 2u));
        uint _2747 = _2746.x;
        uint _2748 = _2715.z;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        if (((((1u << ((_2748 >> 4u) & 15u)) + 4294967295u) & _2747) == 0u) || ((_2748 & 240u) == 0u))
        {
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
        }
        else
        {
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2836;
            float _2838;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            uint _2978 = 0u;
            uint _2987;
            bool _2988;
            for (;;)
            {
                _2987 = texelFetch(g_lightClassification, int((((_2741 << 5u) + (_2727 << 9u)) + (_2978 << 2u)) >> 2u)).x;
                _2988 = _2987 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2988)
                {
                    frontier_phi_66_pred = _2977;
                    frontier_phi_66_pred_1 = _2976;
                    frontier_phi_66_pred_2 = _2975;
                    frontier_phi_66_pred_3 = _2974;
                    frontier_phi_66_pred_4 = _2973;
                    frontier_phi_66_pred_5 = _2972;
                }
                else
                {
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    uint _3102;
                    _3096 = _2972;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2975;
                    _3100 = _2976;
                    _3101 = _2977;
                    _3102 = _2987;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    for (;;)
                    {
                        uint _3106 = uint(findLSB(_3102)) + (_2978 << 5u);
                        uint _3103 = (_3102 + 4294967295u) & _3102;
                        uint _3108 = _3106 * 48u;
                        vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 3u)).x));
                        uint _3128 = (_3106 * 48u) + 4u;
                        vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 3u)).x));
                        uint _3147 = (_3106 * 48u) + 8u;
                        vec3 _3158 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3147)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 2u)).x));
                        float _3162 = _3122.x - _1825;
                        float _3163 = _3122.y - _1826;
                        float _3164 = _3122.z - _1827;
                        float _3165 = dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164));
                        float _3168 = inversesqrt(_3165);
                        float _3169 = _3168 * _3162;
                        float _3170 = _3168 * _3163;
                        float _3171 = _3168 * _3164;
                        float _3172 = dot(vec3(_709, _712, _715), vec3(_3169, _3170, _3171));
                        float _3177 = 1.0 - (_3165 * _3122.w);
                        float _4517 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3178 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3179 = sqrt(_3165) * _3141.w;
                        float _3182 = 1.39999997615814208984375 / (_3179 + 1.39999997615814208984375);
                        float _3183 = _3182 * _3182;
                        float _3186 = ((1.0 - _3183) * _3172) + _3183;
                        float _3189 = _3179 * _3179;
                        float _3193 = ((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3178) / ((_3189 * 0.699999988079071044921875) + 1.0);
                        float _3197 = (-0.0) - _1825;
                        float _3198 = (-0.0) - _1826;
                        float _3199 = (-0.0) - _1827;
                        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                        float _3204 = _3203 * _3197;
                        float _3205 = _3203 * _3198;
                        float _3206 = _3203 * _3199;
                        float _3213 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                        float _3214 = 1.0 - _769;
                        float _3221 = sqrt(1.0 - ((1.0 - (_3214 * _3214)) * (1.0 - (_3213 * _3213))));
                        float _3222 = _3221 * _3221;
                        float _3223 = _3222 * _3222;
                        float _3224 = _3204 + _3169;
                        float _3225 = _3205 + _3170;
                        float _3226 = _3206 + _3171;
                        float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                        float _3234 = dot(vec3(_709, _712, _715), vec3(_3204, _3205, _3206));
                        float _4533 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3237 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3238 = dot(vec3(_709, _712, _715), vec3(_3230 * _3224, _3230 * _3225, _3230 * _3226));
                        float _4544 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3241 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3245 = ((_3241 * _3241) * (_3223 + (-1.0))) + 1.0;
                        float _3246 = _3182 * _3222;
                        float _3247 = _3246 * _3246;
                        float _3250 = ((1.0 - _3247) * _3172) + _3247;
                        float _4555 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3251 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3252 = 1.0 - _3222;
                        float _3262 = (0.5 / (((_3251 * ((_3237 * _3252) + _3222)) + 9.9999999392252902907785028219223e-09) + (((_3251 * _3252) + _3222) * _3237))) * _3251;
                        float _4566 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3273 = (((_3223 * 3.1415927410125732421875) * (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0)))) / ((_3245 * _3245) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125))) * _3178;
                        _3031 = (_3193 * _3141.x) + _3099;
                        _3032 = (_3193 * _3141.y) + _3100;
                        _3033 = (_3193 * _3141.z) + _3101;
                        _3028 = (_3273 * _3158.x) + _3096;
                        _3029 = (_3273 * _3158.y) + _3097;
                        _3030 = (_3273 * _3158.z) + _3098;
                        if (_3103 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3096 = _3028;
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3031;
                            _3100 = _3032;
                            _3101 = _3033;
                            _3102 = _3103;
                        }
                    }
                    frontier_phi_66_pred = _3033;
                    frontier_phi_66_pred_1 = _3032;
                    frontier_phi_66_pred_2 = _3031;
                    frontier_phi_66_pred_3 = _3030;
                    frontier_phi_66_pred_4 = _3029;
                    frontier_phi_66_pred_5 = _3028;
                }
                _2838 = frontier_phi_66_pred;
                _2836 = frontier_phi_66_pred_1;
                _2834 = frontier_phi_66_pred_2;
                _2832 = frontier_phi_66_pred_3;
                _2830 = frontier_phi_66_pred_4;
                _2828 = frontier_phi_66_pred_5;
                uint _2979 = _2978 + 1u;
                if (_2979 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2972 = _2828;
                    _2973 = _2830;
                    _2974 = _2832;
                    _2975 = _2834;
                    _2976 = _2836;
                    _2977 = _2838;
                    _2978 = _2979;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
        }
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.z;
        uint _2844 = (_2842 >> 8u) & 15u;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        if (((4294967295u << _2844) & _2747) == 0u)
        {
            _2940 = _2827;
            _2942 = _2829;
            _2944 = _2831;
            _2946 = _2833;
            _2948 = _2835;
            _2950 = _2837;
        }
        else
        {
            float _2965 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
            float _2966 = _2965 * _1825;
            float _2967 = _2965 * _1826;
            float _2968 = _2965 * _1827;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2844 < ((_2842 >> 12u) & 15u))
            {
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _2949;
                float _2951;
                float _3079 = _2827;
                float _3080 = _2829;
                float _3081 = _2831;
                float _3082 = _2833;
                float _3083 = _2835;
                float _3084 = _2837;
                uint _3085 = _2844;
                uint _3094;
                bool _3095;
                for (;;)
                {
                    _3094 = texelFetch(g_lightClassification, int((((_2741 << 5u) + (_2727 << 9u)) + (_3085 << 2u)) >> 2u)).x;
                    _3095 = _3094 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3095)
                    {
                        frontier_phi_72_pred = _3084;
                        frontier_phi_72_pred_1 = _3083;
                        frontier_phi_72_pred_2 = _3082;
                        frontier_phi_72_pred_3 = _3081;
                        frontier_phi_72_pred_4 = _3080;
                        frontier_phi_72_pred_5 = _3079;
                    }
                    else
                    {
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3291 = _3079;
                        float _3292 = _3080;
                        float _3293 = _3081;
                        float _3294 = _3082;
                        float _3295 = _3083;
                        float _3296 = _3084;
                        uint _3297 = _3094;
                        uint _3298;
                        vec4 _3323;
                        float _3324;
                        vec4 _3339;
                        vec3 _3351;
                        vec4 _3366;
                        vec4 _3381;
                        float _3427;
                        bool _3428;
                        for (;;)
                        {
                            uint _3308 = ((_3085 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3297));
                            _3298 = (_3297 + 4294967295u) & _3297;
                            uint _3310 = _3308 * 40u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            _3324 = _3323.w;
                            uint _3326 = (_3308 * 40u) + 4u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3341 = (_3308 * 40u) + 8u;
                            _3351 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x));
                            uint _3353 = (_3308 * 40u) + 16u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3368 = (_3308 * 40u) + 20u;
                            _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3383 = (_3308 * 40u) + 24u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3402 = (_3308 * 40u) + 28u;
                            vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            _3427 = fma(_1827, _3415.z, fma(_1826, _3415.y, _3415.x * _1825)) + _3415.w;
                            _3428 = !((fma(_1827, _3396.z, fma(_1826, _3396.y, _3396.x * _1825)) + _3396.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3428)
                            {
                                float _3455 = _3323.x - _1825;
                                float _3456 = _3323.y - _1826;
                                float _3457 = _3323.z - _1827;
                                float _3458 = dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457));
                                float _3461 = inversesqrt(_3458);
                                float _3462 = _3461 * _3455;
                                float _3463 = _3461 * _3456;
                                float _3464 = _3461 * _3457;
                                float _3468 = 1.0 - (_3458 / (_3324 * _3324));
                                float _4577 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3473 = sqrt(_3458) * _3339.w;
                                float _3475 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                                float _3476 = _3475 * _3475;
                                float _3479 = ((1.0 - _3476) * dot(vec3(_3462, _3463, _3464), vec3(_709, _712, _715))) + _3476;
                                float _3482 = _3473 * _3473;
                                float _3486 = (fma(_1827, _3366.z, fma(_1826, _3366.y, _3366.x * _1825)) + _3366.w) / _3427;
                                float _3487 = (fma(_1827, _3381.z, fma(_1826, _3381.y, _3381.x * _1825)) + _3381.w) / _3427;
                                float _3491 = 1.0 - dot(vec2(_3486, _3487), vec2(_3486, _3487));
                                float _4593 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3493 = _3492 * (((isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0))) * _3469) / ((_3482 * 0.699999988079071044921875) + 1.0));
                                float _3505 = exp2(log2(1.0 / ((_3482 * 3.5) + 5.0)) * 0.25);
                                float _3506 = 1.0 - _769;
                                float _3513 = sqrt(1.0 - ((1.0 - (_3506 * _3506)) * (1.0 - (_3505 * _3505))));
                                float _3514 = _3513 * _3513;
                                float _3515 = _3514 * _3514;
                                float _3516 = _3462 - _2966;
                                float _3517 = _3463 - _2967;
                                float _3518 = _3464 - _2968;
                                float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                                float _3526 = dot(vec3(_709, _712, _715), vec3((-0.0) - _2966, (-0.0) - _2967, (-0.0) - _2968));
                                float _4604 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3529 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3530 = dot(vec3(_709, _712, _715), vec3(_3522 * _3516, _3522 * _3517, _3522 * _3518));
                                float _4615 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3533 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3537 = ((_3533 * _3533) * (_3515 + (-1.0))) + 1.0;
                                float _3538 = _3475 * _3514;
                                float _3539 = _3538 * _3538;
                                float _3545 = ((1.0 - _3539) * dot(vec3(_709, _712, _715), vec3(_3462, _3463, _3464))) + _3539;
                                float _4626 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3547 = 1.0 - _3514;
                                float _3557 = (0.5 / (((_3546 * ((_3529 * _3547) + _3514)) + 9.9999999392252902907785028219223e-09) + (((_3546 * _3547) + _3514) * _3529))) * _3546;
                                float _4637 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3567 = (_3492 * _3469) * (((_3515 * 3.1415927410125732421875) * (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) / ((_3537 * _3537) * ((_3482 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3493 * _3339.y;
                                frontier_phi_78_pred_1 = _3493 * _3339.x;
                                frontier_phi_78_pred_2 = _3567 * _3351.z;
                                frontier_phi_78_pred_3 = _3567 * _3351.y;
                                frontier_phi_78_pred_4 = _3567 * _3351.x;
                                frontier_phi_78_pred_5 = _3493 * _3339.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3575 = frontier_phi_78_pred;
                            _3574 = frontier_phi_78_pred_1;
                            _3573 = frontier_phi_78_pred_2;
                            _3572 = frontier_phi_78_pred_3;
                            _3571 = frontier_phi_78_pred_4;
                            _3576 = frontier_phi_78_pred_5;
                            _3281 = _3574 + _3294;
                            _3282 = _3575 + _3295;
                            _3283 = _3576 + _3296;
                            _3278 = _3571 + _3291;
                            _3279 = _3572 + _3292;
                            _3280 = _3573 + _3293;
                            if (_3298 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3298;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3283;
                        frontier_phi_72_pred_1 = _3282;
                        frontier_phi_72_pred_2 = _3281;
                        frontier_phi_72_pred_3 = _3280;
                        frontier_phi_72_pred_4 = _3279;
                        frontier_phi_72_pred_5 = _3278;
                    }
                    _2951 = frontier_phi_72_pred;
                    _2949 = frontier_phi_72_pred_1;
                    _2947 = frontier_phi_72_pred_2;
                    _2945 = frontier_phi_72_pred_3;
                    _2943 = frontier_phi_72_pred_4;
                    _2941 = frontier_phi_72_pred_5;
                    uint _3086 = _3085 + 1u;
                    if (_3086 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3079 = _2941;
                        _3080 = _2943;
                        _3081 = _2945;
                        _3082 = _2947;
                        _3083 = _2949;
                        _3084 = _2951;
                        _3085 = _3086;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2951;
                frontier_phi_60_61_ladder_1 = _2949;
                frontier_phi_60_61_ladder_2 = _2945;
                frontier_phi_60_61_ladder_3 = _2943;
                frontier_phi_60_61_ladder_4 = _2941;
                frontier_phi_60_61_ladder_5 = _2947;
            }
            else
            {
                frontier_phi_60_61_ladder = _2837;
                frontier_phi_60_61_ladder_1 = _2835;
                frontier_phi_60_61_ladder_2 = _2831;
                frontier_phi_60_61_ladder_3 = _2829;
                frontier_phi_60_61_ladder_4 = _2827;
                frontier_phi_60_61_ladder_5 = _2833;
            }
            _2940 = frontier_phi_60_61_ladder_4;
            _2942 = frontier_phi_60_61_ladder_3;
            _2944 = frontier_phi_60_61_ladder_2;
            _2946 = frontier_phi_60_61_ladder_5;
            _2948 = frontier_phi_60_61_ladder_1;
            _2950 = frontier_phi_60_61_ladder;
        }
        float _2955 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
        _2760 = (_2955 * _2946) + _2291;
        _2762 = (_2955 * _2948) + _2293;
        _2764 = (_2955 * _2950) + _2295;
        _2766 = ((_2940 * 0.039999999105930328369140625) * _2955) + _2614;
        _2768 = ((_2942 * 0.039999999105930328369140625) * _2955) + _2616;
        _2770 = ((_2944 * 0.039999999105930328369140625) * _2955) + _2618;
    }
    else
    {
        _2760 = _2291;
        _2762 = _2293;
        _2764 = _2295;
        _2766 = _2614;
        _2768 = _2616;
        _2770 = _2618;
    }
    float _4653 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _4664 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4675 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    uint _2790 = _238 + 6u;
    float _2798 = _690 / cbSceneParam._m0[86u].x;
    float _2799 = _691 / cbSceneParam._m0[86u].y;
    vec4 _2813 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2798, _2799, (log2((isnan(cbSceneParam._m0[77u].w) ? _623 : (isnan(_623) ? cbSceneParam._m0[77u].w : min(_623, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2815 = _2813.x;
    float _2816 = _2813.y;
    float _2817 = _2813.z;
    float _2818 = _2813.w;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_623 > cbSceneParam._m0[78u].w)
    {
        float _2852 = isnan(_623) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _623 : min(cbSceneParam._m0[80u].w, _623));
        float _2853 = _2852 / _623;
        float _2864 = _2853 * _675;
        float _2865 = _676 * _2853;
        float _2866 = (-0.0) - _2865;
        float _2868 = _2853 * _677;
        float _2870 = (cbSceneParam._m0[77u].w * _2866) / _2852;
        float _2871 = _2870 + cbSceneParam._m0[79u].w;
        float _2872 = cbSceneParam._m0[79u].w - _2865;
        float _2878 = sqrt(((_2864 * _2864) + (_2865 * _2865)) + (_2868 * _2868));
        float _2881 = (1.0 - (cbSceneParam._m0[77u].w / _2852)) * _2878;
        float _2886 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2888 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3041;
        if (abs((_2866 - _2870) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3041 = ((((_2871 > 0.0) ? exp2(_2886 * _2871) : (2.0 - exp2(_2888 * _2871))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2881;
        }
        else
        {
            float _3001 = 1.0 / cbSceneParam._m0[80u].x;
            float _3002 = isnan(_2872) ? _2871 : (isnan(_2871) ? _2872 : max(_2871, _2872));
            float _3003 = isnan(_2872) ? _2871 : (isnan(_2871) ? _2872 : min(_2871, _2872));
            float _3012 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : min(_3002, 0.0));
            float _3013 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : min(_3003, 0.0));
            _3041 = ((abs(_2878 / _2866) * cbSceneParam._m0[80u].y) * ((((_3012 - _3013) * 2.0) - ((exp2(_2886 * (isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0)))) - exp2(_2886 * (isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))))) * _3001)) - ((exp2(_2888 * _3012) - exp2(_2888 * _3013)) * _3001))) + (_2881 * cbSceneParam._m0[80u].z);
        }
        vec4 _3043 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2798, _2799, 1.0), 0.0);
        float _3052 = exp2((_3041 * (-1.44269502162933349609375)) * (1.0 - _3043.w));
        float _3053 = log2(_3052);
        float _3069 = log2(_2818);
        _2890 = (exp2(_3069 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].x)) * _3043.x) / cbSceneParam._m0[78u].x)) + _2815;
        _2892 = (exp2(_3069 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].y)) * _3043.y) / cbSceneParam._m0[78u].y)) + _2816;
        _2894 = (exp2(_3069 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3053 * cbSceneParam._m0[78u].z)) * _3043.z) / cbSceneParam._m0[78u].z)) + _2817;
        _2896 = _3052 * _2818;
    }
    else
    {
        _2890 = _2815;
        _2892 = _2816;
        _2894 = _2817;
        _2896 = _2818;
    }
    float _2908 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2909 = _2908 == 3.0;
    float _2910 = log2(_2896);
    float _2917 = exp2(_2910 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2760 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _753))) + ((_2766 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1557)) * cbPerFrame._m0[3u].x));
    float _2918 = exp2(_2910 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2762 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _753))) + ((_2768 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1557)) * cbPerFrame._m0[3u].x));
    float _2919 = exp2(_2910 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2764 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _753))) + ((_2770 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1557)) * cbPerFrame._m0[3u].x));
    float _2928 = (_2908 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2928 * (_2909 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2890)));
    SV_Target.y = _2928 * (_2909 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2892)));
    SV_Target.z = _2928 * (_2909 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2894)));
    SV_Target.w = cbInstanceData._m0[_2790].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2790].w;
}


