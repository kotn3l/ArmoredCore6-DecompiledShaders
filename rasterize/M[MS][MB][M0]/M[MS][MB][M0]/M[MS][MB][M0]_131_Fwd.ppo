#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1214;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _362 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _362) * cbMtdParam._m0[24u].x) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3519 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _387 = (_380 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _388 = (_380 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _389 = (_380 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    float _458 = ((_428.z - _449) * _380) + _449;
    float _461 = ((((_428.x - _447) * _380) + _447) * 2.0) + (-1.0);
    float _463 = ((((_428.y - _448) * _380) + _448) * 2.0) + (-1.0);
    float _464 = dot(vec2(_461, _463), vec2(_461, _463));
    float _3530 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _469 = sqrt(1.0 - (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _500 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _502 = _500.x;
    float _503 = 1.0 - _502;
    float _509 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _512 = ((isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : min(_509, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _521 = (_512 - ((((((_502 - _503) * cbMtdParam._m0[24u].z) + _503) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _512))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3551 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _529 = (_522 * ((_408.x * cbMtdParam._m0[18u].x) - _387)) + _387;
    float _530 = (_522 * ((_408.y * cbMtdParam._m0[18u].y) - _388)) + _388;
    float _531 = (_522 * ((_408.z * cbMtdParam._m0[18u].z) - _389)) + _389;
    vec4 _543 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _545 = _543.x;
    float _546 = 1.0 - _545;
    float _573 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_545 - _546) * cbMtdParam._m0[24u].w) + _546) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3562 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _582 = ((((cbMtdParam._m0[10u].x - _529) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _574) + _529;
    float _583 = ((((cbMtdParam._m0[10u].y - _530) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _574) + _530;
    float _584 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _531)) * _574) + _531;
    vec4 _598 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _605 = (_598.x * 2.0) + (-1.0);
    float _606 = (_598.y * 2.0) + (-1.0);
    float _607 = dot(vec2(_605, _606), vec2(_605, _606));
    float _3573 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _615 = (_522 * (_598.z - _458)) + _458;
    float _618 = ((cbMtdParam._m0[23u].y - _615) * _574) + _615;
    vec4 _637 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _643 = (_637.x * 2.0) + (-1.0);
    float _644 = (_637.y * 2.0) + (-1.0);
    float _645 = dot(vec2(_643, _644), vec2(_643, _644));
    float _3584 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _662 = (((_605 - _461) + (cbMtdParam._m0[21u].x * _461)) * _522) + _461;
    float _663 = (((_606 - _463) + (cbMtdParam._m0[21u].x * _463)) * _522) + _463;
    float _664 = (_522 * (sqrt(1.0 - (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) - _469)) + _469;
    float _675 = (((_643 - _662) + (_662 * cbMtdParam._m0[22u].z)) * _574) + _662;
    float _676 = (((_644 - _663) + (_663 * cbMtdParam._m0[22u].z)) * _574) + _663;
    float _677 = ((sqrt(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) - _664) * _574) + _664;
    float _679 = cbMtdParam._m0[22u].x + _482.w;
    float _682 = fma(_677, _232 * NORMAL.x, fma(_676, _239 * TANGENT.x, (_225 * _217) * _675));
    float _685 = fma(_677, _232 * NORMAL.y, fma(_676, _239 * TANGENT.y, (_225 * _218) * _675));
    float _688 = fma(_677, _232 * NORMAL.z, fma(_676, _239 * TANGENT.z, (_225 * _219) * _675));
    float _692 = inversesqrt(dot(vec3(_682, _685, _688), vec3(_682, _685, _688)));
    float _693 = _692 * _682;
    float _694 = _692 * _685;
    float _695 = _692 * _688;
    float _3595 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _696 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _3617 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3628 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3639 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _714 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _765 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _755);
    float _766 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _755);
    float _767 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _755);
    float _771 = inversesqrt(dot(vec3(_765, _766, _767), vec3(_765, _766, _767)));
    float _772 = _765 * _771;
    float _773 = _766 * _771;
    float _774 = _767 * _771;
    float _780 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _781 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _799 = fma(_695, cbSceneParam._m0[5u].z, fma(_694, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _693));
    float _802 = fma(_695, cbSceneParam._m0[6u].z, fma(_694, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _693));
    float _805 = fma(_695, cbSceneParam._m0[7u].z, fma(_694, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _693));
    uint _819 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _825 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_819].x;
    float _826 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_819].y;
    float _827 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_819].z;
    float _3650 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    vec4 _839 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _780, cbSceneParam._m0[86u].y * _781));
    float _843 = ((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * TEXCOORD_5.w) * _839.x;
    float _844 = dot(vec3(_693, _694, _695), vec3(_772, _773, _774));
    float _847 = _844 * 2.0;
    float _851 = (_847 * _693) - _772;
    float _852 = (_847 * _694) - _773;
    float _853 = (_847 * _695) - _774;
    float _857 = abs(dot(vec3(_772, _773, _774), vec3(_693, _694, _695)));
    float _3683 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _859 = sqrt(_696);
    float _872 = exp2((_859 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_859 * 3.0));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1213;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _938 = fma(_912, cbModelParam._m0[26u].z, fma(_908, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _904));
        float _942 = fma(_912, cbModelParam._m0[27u].z, fma(_908, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _904));
        float _946 = fma(_912, cbModelParam._m0[28u].z, fma(_908, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _904));
        float _971 = _904 + _693;
        float _972 = _908 + _694;
        float _973 = _912 + _695;
        float _983 = fma(_973, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971)) - _938;
        float _984 = fma(_973, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971)) - _942;
        float _985 = fma(_973, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971)) - _946;
        float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
        float _1002 = ((_989 * _983) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_938 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_989 * _984) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_942 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_989 * _985) / cbModelParam._m0[34u].z) + ((((((_946 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        float _1041 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1007.x + (-0.5));
        float _1043 = _1041 * (_1007.y + (-0.5));
        float _1044 = _1041 * (_1007.z + (-0.5));
        float _1051 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1014.x + (-0.5));
        float _1053 = _1051 * (_1014.y + (-0.5));
        float _1054 = _1051 * (_1014.z + (-0.5));
        float _1061 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1021.x + (-0.5));
        float _1063 = _1061 * (_1021.y + (-0.5));
        float _1064 = _1061 * (_1021.z + (-0.5));
        float _1071 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1028.x + (-0.5));
        float _1073 = _1071 * (_1028.y + (-0.5));
        float _1074 = _1071 * (_1028.z + (-0.5));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = _1042 * 0.5;
        float _1079 = _1052 * 0.5;
        float _1080 = _1062 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1095 = (dot(vec3(_693, _694, _695), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1105 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3731 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1107 + 1.0))) + _1112) * _1075;
        float _1122 = _1043 * 0.5;
        float _1123 = _1053 * 0.5;
        float _1124 = _1063 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_693, _694, _695), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3764 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1149 + 1.0))) + _1154) * _1076;
        float _1164 = _1044 * 0.5;
        float _1165 = _1054 * 0.5;
        float _1166 = _1064 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_693, _694, _695), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3797 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1191 + 1.0))) + _1196) * _1077;
        _1213 = _1044;
        _1215 = _1043;
        _1216 = _1042;
        _1217 = _1054;
        _1218 = _1053;
        _1219 = _1052;
        _1220 = _1064;
        _1221 = _1063;
        _1222 = _1062;
        _1223 = _1077;
        _1224 = _1076;
        _1225 = _1075;
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
    }
    else
    {
        _1213 = _1214;
        _1215 = _1214;
        _1216 = _1214;
        _1217 = _1214;
        _1218 = _1214;
        _1219 = _1214;
        _1220 = _1214;
        _1221 = _1214;
        _1222 = _1214;
        _1223 = _1214;
        _1224 = _1214;
        _1225 = _1214;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1253 = fma(_912, cbModelParam._m0[30u].z, fma(_908, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _904));
        float _1257 = fma(_912, cbModelParam._m0[31u].z, fma(_908, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _904));
        float _1261 = fma(_912, cbModelParam._m0[32u].z, fma(_908, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _904));
        float _1284 = _904 + _693;
        float _1285 = _908 + _694;
        float _1286 = _912 + _695;
        float _1296 = fma(_1286, cbModelParam._m0[30u].z, fma(_1285, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1284)) - _1253;
        float _1297 = fma(_1286, cbModelParam._m0[31u].z, fma(_1285, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1284)) - _1257;
        float _1298 = fma(_1286, cbModelParam._m0[32u].z, fma(_1285, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1284)) - _1261;
        float _1302 = inversesqrt(dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298)));
        float _1315 = ((_1302 * _1296) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1253 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1302 * _1297) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1257 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1302 * _1298) / cbModelParam._m0[35u].z) + ((((((_1261 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        float _1352 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1319.x + (-0.5));
        float _1354 = _1352 * (_1319.y + (-0.5));
        float _1355 = _1352 * (_1319.z + (-0.5));
        float _1362 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1326.x + (-0.5));
        float _1364 = _1362 * (_1326.y + (-0.5));
        float _1365 = _1362 * (_1326.z + (-0.5));
        float _1372 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1333.x + (-0.5));
        float _1374 = _1372 * (_1333.y + (-0.5));
        float _1375 = _1372 * (_1333.z + (-0.5));
        float _1382 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1340.x + (-0.5));
        float _1384 = _1382 * (_1340.y + (-0.5));
        float _1385 = _1382 * (_1340.z + (-0.5));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = _1353 * 0.5;
        float _1390 = _1363 * 0.5;
        float _1391 = _1373 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_693, _694, _695), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _3860 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1416 + 1.0))) + _1421) * _1386;
        float _1431 = _1354 * 0.5;
        float _1432 = _1364 * 0.5;
        float _1433 = _1374 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_693, _694, _695), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3893 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1458 + 1.0))) + _1463) * _1387;
        float _1473 = _1355 * 0.5;
        float _1474 = _1365 * 0.5;
        float _1475 = _1375 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_693, _694, _695), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _3926 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1500 + 1.0))) + _1505) * _1388;
        _1522 = _1355;
        _1523 = _1354;
        _1524 = _1353;
        _1525 = _1365;
        _1526 = _1364;
        _1527 = _1363;
        _1528 = _1375;
        _1529 = _1374;
        _1530 = _1373;
        _1531 = _1388;
        _1532 = _1387;
        _1533 = _1386;
        _1534 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
    }
    else
    {
        _1522 = _1214;
        _1523 = _1214;
        _1524 = _1214;
        _1525 = _1214;
        _1526 = _1214;
        _1527 = _1214;
        _1528 = _1214;
        _1529 = _1214;
        _1530 = _1214;
        _1531 = _1214;
        _1532 = _1214;
        _1533 = _1214;
        _1534 = 0.0;
        _1535 = 0.0;
        _1536 = 0.0;
    }
    float _1546 = (cbModelParam._m0[1u].x * (_1534 - _1226)) + _1226;
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1227)) + _1227;
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1228)) + _1228;
    float _1569 = fma(_1548, cbSceneParam._m0[89u].z, fma(_1547, cbSceneParam._m0[89u].y, _1546 * cbSceneParam._m0[89u].x));
    float _1572 = fma(_1548, cbSceneParam._m0[90u].z, fma(_1547, cbSceneParam._m0[90u].y, _1546 * cbSceneParam._m0[90u].x));
    float _1575 = fma(_1548, cbSceneParam._m0[91u].z, fma(_1547, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1546));
    float _1590 = _851 * 0.5;
    float _1591 = _852 * 0.5;
    float _1592 = _853 * 0.5;
    float _1593 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1596 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1599 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1522, _1525, _1528, _1531));
    float _1633;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1606 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1213, _1217, _1220, _1223));
        float _1610 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1215, _1218, _1221, _1224));
        float _1614 = dot(vec4(_1590, _1591, _1592, 1.0), vec4(_1216, _1219, _1222, _1225));
        float _1621 = dot(vec4(cbModelParam._m0[39u]), vec4(_1590, _1591, _1592, 1.0));
        _1633 = dot(vec3(isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1621) ? 0.0 : (isnan(0.0) ? _1621 : max(0.0, _1621))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1633 = 1.0;
    }
    float _1644;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1635 = dot(vec4(cbModelParam._m0[40u]), vec4(_1590, _1591, _1592, 1.0));
        _1644 = dot(vec3(isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)), isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1635) ? 0.0 : (isnan(0.0) ? _1635 : max(0.0, _1635))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1644 = 1.0;
    }
    float _1648 = (_1644 * cbModelParam._m0[1u].x) + (_1633 * (1.0 - cbModelParam._m0[1u].x));
    float _1658 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _696);
    float _1659 = isnan(_1658) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1658 : min(cbModelParam._m0[25u].z, _1658));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1706 = fma(_912, cbModelParam._m0[13u].z, fma(_908, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _904)) + cbModelParam._m0[13u].w;
        float _1710 = fma(_912, cbModelParam._m0[14u].z, fma(_908, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _904)) + cbModelParam._m0[14u].w;
        float _1714 = fma(_912, cbModelParam._m0[15u].z, fma(_908, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _904)) + cbModelParam._m0[15u].w;
        float _1717 = fma(_853, cbModelParam._m0[13u].z, fma(_852, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _851));
        float _1720 = fma(_853, cbModelParam._m0[14u].z, fma(_852, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _851));
        float _1723 = fma(_853, cbModelParam._m0[15u].z, fma(_852, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _851));
        float _1751;
        if (_1717 > 0.0)
        {
            _1751 = abs((1.0 - _1706) / _1717);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1706 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1751 = frontier_phi_14_12_ladder;
        }
        float _1951;
        if (_1720 > 0.0)
        {
            _1951 = abs((1.0 - _1710) / _1720);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1710 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1951 = frontier_phi_23_19_ladder;
        }
        float _2194;
        if (_1723 > 0.0)
        {
            _2194 = abs((1.0 - _1714) / _1723);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1714 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2194 = frontier_phi_35_30_ladder;
        }
        float _2196 = isnan(_1951) ? _1751 : (isnan(_1751) ? _1951 : min(_1751, _1951));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1717) + _1706;
        float _2202 = (_2197 * _1720) + _1710;
        float _2203 = (_2197 * _1723) + _1714;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2204;
        float _2208 = _2204 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 > _2208) || ((_2202 < _2206) || ((_2201 < _2206) || (_2201 > _2208))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2327 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2203, cbModelParam._m0[9u].z, fma(_2202, cbModelParam._m0[9u].y, _2201 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2203, cbModelParam._m0[10u].z, fma(_2202, cbModelParam._m0[10u].y, _2201 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2203, cbModelParam._m0[11u].z, fma(_2202, cbModelParam._m0[11u].y, _2201 * cbModelParam._m0[11u].x))), _1659);
            frontier_phi_13_35_ladder = _2327.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2327.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2327.x * cbModelParam._m0[1u].y;
        }
        _1739 = frontier_phi_13_35_ladder_2;
        _1741 = frontier_phi_13_35_ladder_1;
        _1743 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1727 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_851, _852, _853), _1659);
        _1739 = _1727.x * cbModelParam._m0[1u].y;
        _1741 = _1727.y * cbModelParam._m0[1u].y;
        _1743 = _1727.z * cbModelParam._m0[1u].y;
    }
    float _1747 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _696);
    float _1748 = isnan(_1747) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1747 : min(cbModelParam._m0[25u].w, _1747));
    float _1837;
    float _1839;
    float _1841;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1801 = fma(_912, cbModelParam._m0[21u].z, fma(_908, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _904)) + cbModelParam._m0[21u].w;
        float _1805 = fma(_912, cbModelParam._m0[22u].z, fma(_908, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _904)) + cbModelParam._m0[22u].w;
        float _1809 = fma(_912, cbModelParam._m0[23u].z, fma(_908, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _904)) + cbModelParam._m0[23u].w;
        float _1812 = fma(_853, cbModelParam._m0[21u].z, fma(_852, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _851));
        float _1815 = fma(_853, cbModelParam._m0[22u].z, fma(_852, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _851));
        float _1818 = fma(_853, cbModelParam._m0[23u].z, fma(_852, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _851));
        float _1956;
        if (_1812 > 0.0)
        {
            _1956 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1956 = frontier_phi_25_21_ladder;
        }
        float _2221;
        if (_1815 > 0.0)
        {
            _2221 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2221 = frontier_phi_37_32_ladder;
        }
        float _2426;
        if (_1818 > 0.0)
        {
            _2426 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2426 = frontier_phi_46_43_ladder;
        }
        float _2428 = isnan(_2221) ? _1956 : (isnan(_1956) ? _2221 : min(_1956, _2221));
        float _2429 = isnan(_2426) ? _2428 : (isnan(_2428) ? _2426 : min(_2428, _2426));
        float _2433 = (_2429 * _1812) + _1801;
        float _2434 = (_2429 * _1815) + _1805;
        float _2435 = (_2429 * _1818) + _1809;
        float _2436 = _2429 * 9.9999997473787516355514526367188e-05;
        float _2437 = (-1.0) - _2436;
        float _2439 = _2436 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2435 > _2439) || ((_2435 < _2437) || ((_2434 > _2439) || ((_2434 < _2437) || ((_2433 < _2437) || (_2433 > _2439))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2435, cbModelParam._m0[17u].z, fma(_2434, cbModelParam._m0[17u].y, _2433 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2435, cbModelParam._m0[18u].z, fma(_2434, cbModelParam._m0[18u].y, _2433 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2435, cbModelParam._m0[19u].z, fma(_2434, cbModelParam._m0[19u].y, _2433 * cbModelParam._m0[19u].x))), _1748);
            frontier_phi_22_46_ladder = _2634.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2634.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2634.x * cbModelParam._m0[1u].z;
        }
        _1837 = frontier_phi_22_46_ladder_2;
        _1839 = frontier_phi_22_46_ladder_1;
        _1841 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_851, _852, _853), _1748);
        _1837 = _1821.x * cbModelParam._m0[1u].z;
        _1839 = _1821.y * cbModelParam._m0[1u].z;
        _1841 = _1821.z * cbModelParam._m0[1u].z;
    }
    float _1853 = ((((1.0 - _872) * ((_859 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_872 * _859)) * _843;
    float _1854 = _1853 * ((cbModelParam._m0[1u].w * (_1837 - _1739)) + _1739);
    float _1855 = _1853 * ((cbModelParam._m0[1u].w * (_1839 - _1741)) + _1741);
    float _1856 = _1853 * ((cbModelParam._m0[1u].w * (_1841 - _1743)) + _1743);
    float _1859 = fma(_1856, cbSceneParam._m0[89u].z, fma(_1855, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1862 = fma(_1856, cbSceneParam._m0[90u].z, fma(_1855, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1865 = fma(_1856, cbSceneParam._m0[91u].z, fma(_1855, cbSceneParam._m0[91u].y, _1854 * cbSceneParam._m0[91u].x));
    uvec4 _1875 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1877 = _1875.x * 14u;
    uint _1878 = _1877 + 13u;
    float _1885 = _843 + (-1.0);
    float _1890 = (cbLight._m0[_1878].x * _1885) + 1.0;
    float _1891 = (cbLight._m0[_1878].y * _1885) + 1.0;
    float _1892 = (cbLight._m0[_1878].z * _1885) + 1.0;
    float _1893 = (cbLight._m0[_1878].w * _1885) + 1.0;
    uint _1894 = _1877 + 5u;
    float _1900 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
    uint _1904 = _1877 + 4u;
    float _1910 = isnan(1.0) ? _1890 : (isnan(_1890) ? 1.0 : min(_1890, 1.0));
    uint _1914 = _1877 | 1u;
    float _1925 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_693, _694, _695));
    float _1928 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_693, _694, _695));
    float _4062 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _4073 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1933 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
    float _1935 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1942 = ((cbLight._m0[_1894].x * _1900) * _1935) + ((cbLight._m0[_1904].x * _1910) * _1933);
    float _1943 = ((_1900 * cbLight._m0[_1894].y) * _1935) + ((_1910 * cbLight._m0[_1904].y) * _1933);
    float _1944 = ((_1900 * cbLight._m0[_1894].z) * _1935) + ((_1910 * cbLight._m0[_1904].z) * _1933);
    uvec4 _1948 = floatBitsToUint(cbLight._m0[_1877 + 12u]);
    bool _1950 = _1948.x == 0u;
    float _1961;
    float _1963;
    float _1965;
    if (_1950)
    {
        _1961 = _1942;
        _1963 = _1943;
        _1965 = _1944;
    }
    else
    {
        uint _1969 = _1877 + 6u;
        float _1985 = (dot(vec3(cbLight._m0[_1877 + 2u].xyz), vec3(_693, _694, _695)) * 0.5) + 0.5;
        float _1986 = _1985 * _1985;
        float _4084 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1988 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _1961 = (((cbLight._m0[_1969].x * 0.3183098733425140380859375) * _1987) * _1988) + _1942;
        _1963 = (((cbLight._m0[_1969].y * 0.3183098733425140380859375) * _1987) * _1988) + _1943;
        _1965 = (((cbLight._m0[_1969].z * 0.3183098733425140380859375) * _1987) * _1988) + _1944;
    }
    bool _1968 = _1948.y == 0u;
    float _2006;
    float _2008;
    float _2010;
    if (_1968)
    {
        _2006 = _1961;
        _2008 = _1963;
        _2010 = _1965;
    }
    else
    {
        uint _2165 = _1877 + 7u;
        float _2181 = (dot(vec3(cbLight._m0[_1877 + 3u].xyz), vec3(_693, _694, _695)) * 0.5) + 0.5;
        float _2182 = _2181 * _2181;
        float _4100 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2183 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2184 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
        _2006 = (((cbLight._m0[_2165].x * 0.3183098733425140380859375) * _2183) * _2184) + _1961;
        _2008 = (((cbLight._m0[_2165].y * 0.3183098733425140380859375) * _2183) * _2184) + _1963;
        _2010 = (((cbLight._m0[_2165].z * 0.3183098733425140380859375) * _2183) * _2184) + _1965;
    }
    uint _2013 = _1877 + 8u;
    float _2026 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1877].w)) * _696) * 0.949999988079071044921875);
    float _2027 = _2026 * _2026;
    float _2028 = cbLight._m0[_1877].x + _772;
    float _2029 = cbLight._m0[_1877].y + _773;
    float _2030 = cbLight._m0[_1877].z + _774;
    float _2034 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
    float _2035 = _2034 * _2028;
    float _2036 = _2034 * _2029;
    float _2037 = _2034 * _2030;
    float _2038 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_1877].xyz));
    float _4116 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _2042 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2043 = dot(vec3(_693, _694, _695), vec3(_2035, _2036, _2037));
    float _4138 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2047 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_2035, _2036, _2037));
    float _4149 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2051 = _2027 * _2027;
    float _2055 = ((_2046 * _2046) * (_2051 + (-1.0))) + 1.0;
    float _2066 = (exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2067 = 1.0 - _2027;
    float _2078 = (0.5 / (((_2042 * ((_2041 * _2067) + _2027)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2067) + _2027) * _2041))) * _2041;
    float _4160 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2080 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2051 / ((_2055 * _2055) * 3.141590118408203125));
    uint _2091 = _1877 + 9u;
    float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _696) * 0.949999988079071044921875);
    float _2103 = _2102 * _2102;
    float _2104 = cbLight._m0[_1914].x + _772;
    float _2105 = cbLight._m0[_1914].y + _773;
    float _2106 = cbLight._m0[_1914].z + _774;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2111 = _2110 * _2104;
    float _2112 = _2110 * _2105;
    float _2113 = _2110 * _2106;
    float _2114 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_1914].xyz));
    float _4171 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2118 = dot(vec3(_693, _694, _695), vec3(_2111, _2112, _2113));
    float _4182 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2122 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_2111, _2112, _2113));
    float _4193 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2126 = _2103 * _2103;
    float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
    float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2140 = 1.0 - _2103;
    float _2150 = (0.5 / (((_2042 * ((_2117 * _2140) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2140) + _2103) * _2117))) * _2117;
    float _4204 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
    float _2162 = (((_2139 * cbLight._m0[_2091].x) * _2152) * _1900) + (((_2066 * cbLight._m0[_2013].x) * _2080) * _1910);
    float _2163 = (((_2139 * cbLight._m0[_2091].y) * _2152) * _1900) + (((_2066 * cbLight._m0[_2013].y) * _2080) * _1910);
    float _2164 = (((_2139 * cbLight._m0[_2091].z) * _2152) * _1900) + (((_2066 * cbLight._m0[_2013].z) * _2080) * _1910);
    float _2226;
    float _2228;
    float _2230;
    if (_1950)
    {
        _2226 = _2162;
        _2228 = _2163;
        _2230 = _2164;
    }
    else
    {
        uint _2232 = _1877 + 2u;
        uint _2236 = _1877 + 10u;
        float _2250 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _696) * 0.949999988079071044921875);
        float _2251 = _2250 * _2250;
        float _2252 = cbLight._m0[_2232].x + _772;
        float _2253 = cbLight._m0[_2232].y + _773;
        float _2254 = cbLight._m0[_2232].z + _774;
        float _2258 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
        float _2259 = _2258 * _2252;
        float _2260 = _2258 * _2253;
        float _2261 = _2258 * _2254;
        float _2262 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2232].xyz));
        float _4215 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _2266 = dot(vec3(_693, _694, _695), vec3(_2259, _2260, _2261));
        float _4226 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2269 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2270 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2259, _2260, _2261));
        float _4237 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2274 = _2251 * _2251;
        float _2278 = ((_2269 * _2269) * (_2274 + (-1.0))) + 1.0;
        float _2287 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2288 = 1.0 - _2251;
        float _2298 = (0.5 / (((_2042 * ((_2265 * _2288) + _2251)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2288) + _2251) * _2265))) * _2265;
        float _4248 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2300 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2274 / ((_2278 * _2278) * 3.141590118408203125));
        float _2301 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
        _2226 = (((_2287 * cbLight._m0[_2236].x) * _2300) * _2301) + _2162;
        _2228 = (((_2287 * cbLight._m0[_2236].y) * _2300) * _2301) + _2163;
        _2230 = (((_2287 * cbLight._m0[_2236].z) * _2300) * _2301) + _2164;
    }
    float _2336;
    float _2338;
    float _2340;
    if (_1968)
    {
        _2336 = _2226;
        _2338 = _2228;
        _2340 = _2230;
    }
    else
    {
        uint _2347 = _1877 + 3u;
        uint _2351 = _1877 + 11u;
        float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _696) * 0.949999988079071044921875);
        float _2366 = _2365 * _2365;
        float _2367 = cbLight._m0[_2347].x + _772;
        float _2368 = cbLight._m0[_2347].y + _773;
        float _2369 = cbLight._m0[_2347].z + _774;
        float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
        float _2374 = _2373 * _2367;
        float _2375 = _2373 * _2368;
        float _2376 = _2373 * _2369;
        float _2377 = dot(vec3(_693, _694, _695), vec3(cbLight._m0[_2347].xyz));
        float _4264 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2380 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2381 = dot(vec3(_693, _694, _695), vec3(_2374, _2375, _2376));
        float _4275 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2384 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2385 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2374, _2375, _2376));
        float _4286 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2389 = _2366 * _2366;
        float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
        float _2402 = (exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2403 = 1.0 - _2366;
        float _2413 = (0.5 / (((_2042 * ((_2380 * _2403) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2042 * _2403) + _2366) * _2380))) * _2380;
        float _4297 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2415 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
        float _2416 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
        _2336 = (((_2402 * cbLight._m0[_2351].x) * _2415) * _2416) + _2226;
        _2338 = (((_2402 * cbLight._m0[_2351].y) * _2415) * _2416) + _2228;
        _2340 = (((_2402 * cbLight._m0[_2351].z) * _2415) * _2416) + _2230;
    }
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    if (_1875.y == 0u)
    {
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2491;
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2491;
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2491;
        uvec4 _2506 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2507 = _2506.x;
        uint _2518 = uint((float(_2506.y) * floor(float(uint(cbSceneParam._m0[85u].y * _781) / _2507))) + floor(float(uint(cbSceneParam._m0[85u].x * _780) / _2507)));
        float _2528 = (log2(_2494 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2529 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        uint _2532 = uint(isnan(14.0) ? _2529 : (isnan(_2529) ? 14.0 : min(_2529, 14.0)));
        uvec4 _2537 = texelFetch(g_lightClusterGridBuffer, int(((_2532 << 2u) + (_2518 << 6u)) >> 2u));
        uint _2538 = _2537.x;
        uint _2539 = _2506.z;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        if (((((1u << ((_2539 >> 4u) & 15u)) + 4294967295u) & _2538) == 0u) || ((_2539 & 240u) == 0u))
        {
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
        }
        else
        {
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            uint _2790 = 0u;
            uint _2799;
            bool _2800;
            for (;;)
            {
                _2799 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2790 << 2u)) >> 2u)).x;
                _2800 = _2799 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2800)
                {
                    frontier_phi_61_pred = _2784;
                    frontier_phi_61_pred_1 = _2789;
                    frontier_phi_61_pred_2 = _2788;
                    frontier_phi_61_pred_3 = _2787;
                    frontier_phi_61_pred_4 = _2786;
                    frontier_phi_61_pred_5 = _2785;
                }
                else
                {
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    uint _2914;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2799;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    for (;;)
                    {
                        uint _2918 = uint(findLSB(_2914)) + (_2790 << 5u);
                        uint _2915 = (_2914 + 4294967295u) & _2914;
                        uint _2920 = _2918 * 48u;
                        vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2920)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2920 + 3u)).x));
                        uint _2940 = (_2918 * 48u) + 4u;
                        vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2959 = (_2918 * 48u) + 8u;
                        vec3 _2970 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2959)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2959 + 2u)).x));
                        float _2974 = _2934.x - _2492;
                        float _2975 = _2934.y - _2493;
                        float _2976 = _2934.z - _2494;
                        float _2977 = dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976));
                        float _2980 = inversesqrt(_2977);
                        float _2981 = _2980 * _2974;
                        float _2982 = _2980 * _2975;
                        float _2983 = _2980 * _2976;
                        float _2984 = dot(vec3(_799, _802, _805), vec3(_2981, _2982, _2983));
                        float _2989 = 1.0 - (_2977 * _2934.w);
                        float _4323 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2990 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                        float _2991 = sqrt(_2977) * _2953.w;
                        float _2994 = 1.39999997615814208984375 / (_2991 + 1.39999997615814208984375);
                        float _2995 = _2994 * _2994;
                        float _2998 = ((1.0 - _2995) * _2984) + _2995;
                        float _3001 = _2991 * _2991;
                        float _3005 = ((isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0))) * _2990) / ((_3001 * 0.699999988079071044921875) + 1.0);
                        float _3009 = (-0.0) - _2492;
                        float _3010 = (-0.0) - _2493;
                        float _3011 = (-0.0) - _2494;
                        float _3015 = inversesqrt(dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011)));
                        float _3016 = _3015 * _3009;
                        float _3017 = _3015 * _3010;
                        float _3018 = _3015 * _3011;
                        float _3026 = exp2(log2(1.0 / ((_3001 * 3.5) + 5.0)) * 0.25);
                        float _3027 = 1.0 - _859;
                        float _3034 = sqrt(1.0 - ((1.0 - (_3027 * _3027)) * (1.0 - (_3026 * _3026))));
                        float _3035 = _3034 * _3034;
                        float _3036 = _3035 * _3035;
                        float _3037 = _3016 + _2981;
                        float _3038 = _3017 + _2982;
                        float _3039 = _3018 + _2983;
                        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
                        float _3047 = dot(vec3(_799, _802, _805), vec3(_3016, _3017, _3018));
                        float _4339 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3050 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                        float _3051 = dot(vec3(_799, _802, _805), vec3(_3043 * _3037, _3043 * _3038, _3043 * _3039));
                        float _4350 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3054 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3058 = ((_3054 * _3054) * (_3036 + (-1.0))) + 1.0;
                        float _3059 = _2994 * _3035;
                        float _3060 = _3059 * _3059;
                        float _3063 = ((1.0 - _3060) * _2984) + _3060;
                        float _4361 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                        float _3064 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3065 = 1.0 - _3035;
                        float _3075 = (0.5 / (((_3064 * ((_3050 * _3065) + _3035)) + 9.9999999392252902907785028219223e-09) + (((_3064 * _3065) + _3035) * _3050))) * _3064;
                        float _4372 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3086 = (((_3036 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3058 * _3058) * ((_3001 * 2.1991131305694580078125) + 3.141590118408203125))) * _2990;
                        _2843 = (_3005 * _2953.x) + _2911;
                        _2844 = (_3005 * _2953.y) + _2912;
                        _2845 = (_3005 * _2953.z) + _2913;
                        _2840 = (_3086 * _2970.x) + _2908;
                        _2841 = (_3086 * _2970.y) + _2909;
                        _2842 = (_3086 * _2970.z) + _2910;
                        if (_2915 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2915;
                        }
                    }
                    frontier_phi_61_pred = _2840;
                    frontier_phi_61_pred_1 = _2845;
                    frontier_phi_61_pred_2 = _2844;
                    frontier_phi_61_pred_3 = _2843;
                    frontier_phi_61_pred_4 = _2842;
                    frontier_phi_61_pred_5 = _2841;
                }
                _2640 = frontier_phi_61_pred;
                _2650 = frontier_phi_61_pred_1;
                _2648 = frontier_phi_61_pred_2;
                _2646 = frontier_phi_61_pred_3;
                _2644 = frontier_phi_61_pred_4;
                _2642 = frontier_phi_61_pred_5;
                uint _2791 = _2790 + 1u;
                if (_2791 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2784 = _2640;
                    _2785 = _2642;
                    _2786 = _2644;
                    _2787 = _2646;
                    _2788 = _2648;
                    _2789 = _2650;
                    _2790 = _2791;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
        }
        uvec4 _2653 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2654 = _2653.z;
        uint _2656 = (_2654 >> 8u) & 15u;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        if (((4294967295u << _2656) & _2538) == 0u)
        {
            _2752 = _2639;
            _2754 = _2641;
            _2756 = _2643;
            _2758 = _2645;
            _2760 = _2647;
            _2762 = _2649;
        }
        else
        {
            float _2777 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
            float _2778 = _2777 * _2492;
            float _2779 = _2777 * _2493;
            float _2780 = _2777 * _2494;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2656 < ((_2654 >> 12u) & 15u))
            {
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2761;
                float _2763;
                float _2891 = _2639;
                float _2892 = _2641;
                float _2893 = _2643;
                float _2894 = _2645;
                float _2895 = _2647;
                float _2896 = _2649;
                uint _2897 = _2656;
                uint _2906;
                bool _2907;
                for (;;)
                {
                    _2906 = texelFetch(g_lightClassification, int((((_2532 << 5u) + (_2518 << 9u)) + (_2897 << 2u)) >> 2u)).x;
                    _2907 = _2906 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2907)
                    {
                        frontier_phi_67_pred = _2894;
                        frontier_phi_67_pred_1 = _2895;
                        frontier_phi_67_pred_2 = _2896;
                        frontier_phi_67_pred_3 = _2893;
                        frontier_phi_67_pred_4 = _2892;
                        frontier_phi_67_pred_5 = _2891;
                    }
                    else
                    {
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3104 = _2891;
                        float _3105 = _2892;
                        float _3106 = _2893;
                        float _3107 = _2894;
                        float _3108 = _2895;
                        float _3109 = _2896;
                        uint _3110 = _2906;
                        uint _3111;
                        vec4 _3136;
                        float _3137;
                        vec4 _3152;
                        vec3 _3164;
                        vec4 _3179;
                        vec4 _3195;
                        float _3241;
                        bool _3242;
                        for (;;)
                        {
                            uint _3121 = ((_2897 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3110));
                            _3111 = (_3110 + 4294967295u) & _3110;
                            uint _3123 = _3121 * 40u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            _3137 = _3136.w;
                            uint _3139 = (_3121 * 40u) + 4u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3154 = (_3121 * 40u) + 8u;
                            _3164 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x));
                            uint _3166 = (_3121 * 40u) + 16u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3182 = (_3121 * 40u) + 20u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3121 * 40u) + 24u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3216 = (_3121 * 40u) + 28u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3241 = fma(_2494, _3229.z, fma(_2493, _3229.y, _3229.x * _2492)) + _3229.w;
                            _3242 = !((fma(_2494, _3210.z, fma(_2493, _3210.y, _3210.x * _2492)) + _3210.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3242)
                            {
                                float _3269 = _3136.x - _2492;
                                float _3270 = _3136.y - _2493;
                                float _3271 = _3136.z - _2494;
                                float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                                float _3275 = inversesqrt(_3272);
                                float _3276 = _3275 * _3269;
                                float _3277 = _3275 * _3270;
                                float _3278 = _3275 * _3271;
                                float _3282 = 1.0 - (_3272 / (_3137 * _3137));
                                float _4383 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                                float _3287 = sqrt(_3272) * _3152.w;
                                float _3289 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                                float _3290 = _3289 * _3289;
                                float _3293 = ((1.0 - _3290) * dot(vec3(_3276, _3277, _3278), vec3(_799, _802, _805))) + _3290;
                                float _3296 = _3287 * _3287;
                                float _3300 = (fma(_2494, _3179.z, fma(_2493, _3179.y, _3179.x * _2492)) + _3179.w) / _3241;
                                float _3301 = (fma(_2494, _3195.z, fma(_2493, _3195.y, _3195.x * _2492)) + _3195.w) / _3241;
                                float _3305 = 1.0 - dot(vec2(_3300, _3301), vec2(_3300, _3301));
                                float _4399 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                                float _3307 = _3306 * (((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3283) / ((_3296 * 0.699999988079071044921875) + 1.0));
                                float _3319 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                                float _3320 = 1.0 - _859;
                                float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                                float _3328 = _3327 * _3327;
                                float _3329 = _3328 * _3328;
                                float _3330 = _3276 - _2778;
                                float _3331 = _3277 - _2779;
                                float _3332 = _3278 - _2780;
                                float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                                float _3340 = dot(vec3(_799, _802, _805), vec3((-0.0) - _2778, (-0.0) - _2779, (-0.0) - _2780));
                                float _4410 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3344 = dot(vec3(_799, _802, _805), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                                float _4421 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                                float _3352 = _3289 * _3328;
                                float _3353 = _3352 * _3352;
                                float _3359 = ((1.0 - _3353) * dot(vec3(_799, _802, _805), vec3(_3276, _3277, _3278))) + _3353;
                                float _4432 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3361 = 1.0 - _3328;
                                float _3371 = (0.5 / (((_3360 * ((_3343 * _3361) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3328) * _3343))) * _3360;
                                float _4443 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3381 = (_3306 * _3283) * (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0)))) / ((_3351 * _3351) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3381 * _3164.x;
                                frontier_phi_73_pred_1 = _3381 * _3164.y;
                                frontier_phi_73_pred_2 = _3307 * _3152.z;
                                frontier_phi_73_pred_3 = _3307 * _3152.y;
                                frontier_phi_73_pred_4 = _3307 * _3152.x;
                                frontier_phi_73_pred_5 = _3381 * _3164.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3385 = frontier_phi_73_pred;
                            _3386 = frontier_phi_73_pred_1;
                            _3390 = frontier_phi_73_pred_2;
                            _3389 = frontier_phi_73_pred_3;
                            _3388 = frontier_phi_73_pred_4;
                            _3387 = frontier_phi_73_pred_5;
                            _3094 = _3388 + _3107;
                            _3095 = _3389 + _3108;
                            _3096 = _3390 + _3109;
                            _3091 = _3385 + _3104;
                            _3092 = _3386 + _3105;
                            _3093 = _3387 + _3106;
                            if (_3111 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3111;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3094;
                        frontier_phi_67_pred_1 = _3095;
                        frontier_phi_67_pred_2 = _3096;
                        frontier_phi_67_pred_3 = _3093;
                        frontier_phi_67_pred_4 = _3092;
                        frontier_phi_67_pred_5 = _3091;
                    }
                    _2759 = frontier_phi_67_pred;
                    _2761 = frontier_phi_67_pred_1;
                    _2763 = frontier_phi_67_pred_2;
                    _2757 = frontier_phi_67_pred_3;
                    _2755 = frontier_phi_67_pred_4;
                    _2753 = frontier_phi_67_pred_5;
                    uint _2898 = _2897 + 1u;
                    if (_2898 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2891 = _2753;
                        _2892 = _2755;
                        _2893 = _2757;
                        _2894 = _2759;
                        _2895 = _2761;
                        _2896 = _2763;
                        _2897 = _2898;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2761;
                frontier_phi_55_56_ladder_1 = _2763;
                frontier_phi_55_56_ladder_2 = _2759;
                frontier_phi_55_56_ladder_3 = _2757;
                frontier_phi_55_56_ladder_4 = _2755;
                frontier_phi_55_56_ladder_5 = _2753;
            }
            else
            {
                frontier_phi_55_56_ladder = _2647;
                frontier_phi_55_56_ladder_1 = _2649;
                frontier_phi_55_56_ladder_2 = _2645;
                frontier_phi_55_56_ladder_3 = _2643;
                frontier_phi_55_56_ladder_4 = _2641;
                frontier_phi_55_56_ladder_5 = _2639;
            }
            _2752 = frontier_phi_55_56_ladder_5;
            _2754 = frontier_phi_55_56_ladder_4;
            _2756 = frontier_phi_55_56_ladder_3;
            _2758 = frontier_phi_55_56_ladder_2;
            _2760 = frontier_phi_55_56_ladder;
            _2762 = frontier_phi_55_56_ladder_1;
        }
        float _2767 = isnan(1.0) ? _843 : (isnan(_843) ? 1.0 : min(_843, 1.0));
        _2551 = (_2767 * _2758) + _2006;
        _2553 = (_2767 * _2760) + _2008;
        _2555 = (_2767 * _2762) + _2010;
        _2557 = ((_2752 * 0.039999999105930328369140625) * _2767) + _2336;
        _2559 = ((_2754 * 0.039999999105930328369140625) * _2767) + _2338;
        _2561 = ((_2756 * 0.039999999105930328369140625) * _2767) + _2340;
    }
    else
    {
        _2551 = _2006;
        _2553 = _2008;
        _2555 = _2010;
        _2557 = _2336;
        _2559 = _2338;
        _2561 = _2340;
    }
    float _4459 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4470 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4481 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    uint _2581 = _245 + 6u;
    float _2589 = _780 / cbSceneParam._m0[86u].x;
    float _2590 = _781 / cbSceneParam._m0[86u].y;
    vec4 _2604 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, (log2((isnan(cbSceneParam._m0[77u].w) ? _714 : (isnan(_714) ? cbSceneParam._m0[77u].w : min(_714, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2606 = _2604.x;
    float _2607 = _2604.y;
    float _2608 = _2604.z;
    float _2609 = _2604.w;
    float _2702;
    float _2704;
    float _2706;
    float _2708;
    if (_714 > cbSceneParam._m0[78u].w)
    {
        float _2664 = isnan(_714) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _714 : min(cbSceneParam._m0[80u].w, _714));
        float _2665 = _2664 / _714;
        float _2676 = _2665 * _765;
        float _2677 = _766 * _2665;
        float _2678 = (-0.0) - _2677;
        float _2680 = _2665 * _767;
        float _2682 = (cbSceneParam._m0[77u].w * _2678) / _2664;
        float _2683 = _2682 + cbSceneParam._m0[79u].w;
        float _2684 = cbSceneParam._m0[79u].w - _2677;
        float _2690 = sqrt(((_2676 * _2676) + (_2677 * _2677)) + (_2680 * _2680));
        float _2693 = (1.0 - (cbSceneParam._m0[77u].w / _2664)) * _2690;
        float _2698 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2700 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2853;
        if (abs((_2678 - _2682) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2853 = ((((_2683 > 0.0) ? exp2(_2698 * _2683) : (2.0 - exp2(_2700 * _2683))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2693;
        }
        else
        {
            float _2813 = 1.0 / cbSceneParam._m0[80u].x;
            float _2814 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : max(_2683, _2684));
            float _2815 = isnan(_2684) ? _2683 : (isnan(_2683) ? _2684 : min(_2683, _2684));
            float _2824 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : min(_2814, 0.0));
            float _2825 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : min(_2815, 0.0));
            _2853 = ((abs(_2690 / _2678) * cbSceneParam._m0[80u].y) * ((((_2824 - _2825) * 2.0) - ((exp2(_2698 * (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0)))) - exp2(_2698 * (isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0))))) * _2813)) - ((exp2(_2700 * _2824) - exp2(_2700 * _2825)) * _2813))) + (_2693 * cbSceneParam._m0[80u].z);
        }
        vec4 _2855 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2589, _2590, 1.0), 0.0);
        float _2864 = exp2((_2853 * (-1.44269502162933349609375)) * (1.0 - _2855.w));
        float _2865 = log2(_2864);
        float _2881 = log2(_2609);
        _2702 = (exp2(_2881 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].x)) * _2855.x) / cbSceneParam._m0[78u].x)) + _2606;
        _2704 = (exp2(_2881 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].y)) * _2855.y) / cbSceneParam._m0[78u].y)) + _2607;
        _2706 = (exp2(_2881 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2865 * cbSceneParam._m0[78u].z)) * _2855.z) / cbSceneParam._m0[78u].z)) + _2608;
        _2708 = _2864 * _2609;
    }
    else
    {
        _2702 = _2606;
        _2704 = _2607;
        _2706 = _2608;
        _2708 = _2609;
    }
    float _2720 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2721 = _2720 == 3.0;
    float _2722 = log2(_2708);
    float _2729 = exp2(_2722 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_2551 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _843))) + ((_2557 + ((isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0))) * _1648)) * cbPerFrame._m0[3u].x));
    float _2730 = exp2(_2722 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2553 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _843))) + ((_2559 + ((isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))) * _1648)) * cbPerFrame._m0[3u].x));
    float _2731 = exp2(_2722 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2555 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _843))) + ((_2561 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1648)) * cbPerFrame._m0[3u].x));
    float _2740 = (_2720 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2740 * (_2721 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2702)));
    SV_Target.y = _2740 * (_2721 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2704)));
    SV_Target.z = _2740 * (_2721 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2706)));
    SV_Target.w = cbInstanceData._m0[_2581].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2581].w;
}


