#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1181;
float _3823;
float _3824;
float _3825;
float _3826;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _354 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _354) * cbMtdParam._m0[24u].x) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3835 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _379 = (_372 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _380 = (_372 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _381 = (_372 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _437 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _439 = _437.x;
    float _440 = _437.y;
    float _441 = _437.z;
    float _450 = ((_420.z - _441) * _372) + _441;
    float _453 = ((((_420.x - _439) * _372) + _439) * 2.0) + (-1.0);
    float _455 = ((((_420.y - _440) * _372) + _440) * 2.0) + (-1.0);
    float _456 = dot(vec2(_453, _455), vec2(_453, _455));
    float _3846 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _461 = sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))));
    vec4 _477 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _489 = (((_477.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _453;
    float _490 = (((_477.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _455;
    float _493 = fma(_461, _224, fma(_490, _231, _489 * _217));
    float _496 = fma(_461, _225, fma(_490, _232, _489 * _218));
    float _499 = fma(_461, _226, fma(_490, _233, _489 * _219));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    vec4 _532 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _534 = _532.x;
    float _535 = 1.0 - _534;
    float _541 = (cbMtdParam._m0[19u].x + dot(vec4(_503 * _493, _503 * _496, _503 * _499, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_534 - _535) * cbMtdParam._m0[24u].z) + _535) * cbMtdParam._m0[21u].z);
    float _3857 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _542 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _549 = (_542 * ((_400.x * cbMtdParam._m0[18u].x) - _379)) + _379;
    float _550 = (_542 * ((_400.y * cbMtdParam._m0[18u].y) - _380)) + _380;
    float _551 = (_542 * ((_400.z * cbMtdParam._m0[18u].z) - _381)) + _381;
    float _555 = (cbMtdParam._m0[19u].w * (_477.z - _450)) + _450;
    vec4 _568 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _575 = (_568.x * 2.0) + (-1.0);
    float _576 = (_568.y * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _3868 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _585 = ((_568.z - _555) * _542) + _555;
    float _595 = ((sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) - _461) * _542) + _461;
    float _598 = (((_575 - _489) * _542) + _489) + (cbMtdParam._m0[21u].x * _489);
    float _599 = (((_576 - _490) * _542) + _490) + (cbMtdParam._m0[21u].x * _490);
    float _604 = cbMtdParam._m0[22u].x + _477.w;
    float _607 = fma(_595, _224, fma(_599, _231, _598 * _217));
    float _610 = fma(_595, _225, fma(_599, _232, _598 * _218));
    float _613 = fma(_595, _226, fma(_599, _233, _598 * _219));
    float _617 = inversesqrt(dot(vec3(_607, _610, _613), vec3(_607, _610, _613)));
    float _618 = _617 * _607;
    float _619 = _617 * _610;
    float _620 = _617 * _613;
    float _3879 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _621 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3901 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _3912 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3923 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _639 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _691 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _681);
    float _692 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _681);
    float _693 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _681);
    float _697 = inversesqrt(dot(vec3(_691, _692, _693), vec3(_691, _692, _693)));
    float _698 = _691 * _697;
    float _699 = _692 * _697;
    float _700 = _693 * _697;
    vec4 _705 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _707 = _705.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _861 = sqrt(((_691 * _691) + (_692 * _692)) + (_693 * _693));
        float _867 = (cbMatDynParam._m0[5u].x * _861) + cbMatDynParam._m0[5u].y;
        float _3934 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _872 = (cbMatDynParam._m0[5u].z * _861) + cbMatDynParam._m0[5u].w;
        float _3945 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) - _868)) + _868) < ((_707 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _737 = fma(_620, cbSceneParam._m0[5u].z, fma(_619, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _618));
    float _740 = fma(_620, cbSceneParam._m0[6u].z, fma(_619, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _618));
    float _743 = fma(_620, cbSceneParam._m0[7u].z, fma(_619, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _618));
    uint _756 = _236 + 9u;
    uint _757 = _756 + uint(cbMatDynParam._m0[0u].w);
    float _763 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_757].x;
    float _764 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_757].y;
    float _765 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_757].z;
    float _3956 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    vec4 _777 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _781 = ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * TEXCOORD_5.w) * _777.x;
    float _782 = dot(vec3(_618, _619, _620), vec3(_698, _699, _700));
    float _785 = _782 * 2.0;
    float _789 = (_785 * _618) - _698;
    float _790 = (_785 * _619) - _699;
    float _791 = (_785 * _620) - _700;
    float _795 = abs(dot(vec3(_698, _699, _700), vec3(_618, _619, _620)));
    float _3989 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _797 = sqrt(_621);
    float _810 = exp2((_797 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_797 * 3.0));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1180;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _905 = fma(_850, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842));
        float _909 = fma(_850, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842));
        float _913 = fma(_850, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842));
        float _938 = _842 + _618;
        float _939 = _846 + _619;
        float _940 = _850 + _620;
        float _950 = fma(_940, cbModelParam._m0[26u].z, fma(_939, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938)) - _905;
        float _951 = fma(_940, cbModelParam._m0[27u].z, fma(_939, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938)) - _909;
        float _952 = fma(_940, cbModelParam._m0[28u].z, fma(_939, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938)) - _913;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_905 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_909 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[34u].z) + ((((((_913 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1008 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_974.x + (-0.5));
        float _1010 = _1008 * (_974.y + (-0.5));
        float _1011 = _1008 * (_974.z + (-0.5));
        float _1018 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_981.x + (-0.5));
        float _1020 = _1018 * (_981.y + (-0.5));
        float _1021 = _1018 * (_981.z + (-0.5));
        float _1028 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_988.x + (-0.5));
        float _1030 = _1028 * (_988.y + (-0.5));
        float _1031 = _1028 * (_988.z + (-0.5));
        float _1038 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_995.x + (-0.5));
        float _1040 = _1038 * (_995.y + (-0.5));
        float _1041 = _1038 * (_995.z + (-0.5));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = _1009 * 0.5;
        float _1046 = _1019 * 0.5;
        float _1047 = _1029 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1062 = (dot(vec3(_618, _619, _620), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1072 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _4037 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1074 + 1.0))) + _1079) * _1042;
        float _1089 = _1010 * 0.5;
        float _1090 = _1020 * 0.5;
        float _1091 = _1030 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_618, _619, _620), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _4070 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1116 + 1.0))) + _1121) * _1043;
        float _1131 = _1011 * 0.5;
        float _1132 = _1021 * 0.5;
        float _1133 = _1031 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_618, _619, _620), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _4103 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1158 + 1.0))) + _1163) * _1044;
        _1180 = _1011;
        _1182 = _1010;
        _1183 = _1009;
        _1184 = _1021;
        _1185 = _1020;
        _1186 = _1019;
        _1187 = _1031;
        _1188 = _1030;
        _1189 = _1029;
        _1190 = _1044;
        _1191 = _1043;
        _1192 = _1042;
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
    }
    else
    {
        _1180 = _1181;
        _1182 = _1181;
        _1183 = _1181;
        _1184 = _1181;
        _1185 = _1181;
        _1186 = _1181;
        _1187 = _1181;
        _1188 = _1181;
        _1189 = _1181;
        _1190 = _1181;
        _1191 = _1181;
        _1192 = _1181;
        _1193 = 0.0;
        _1194 = 0.0;
        _1195 = 0.0;
    }
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1223 = fma(_850, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842));
        float _1227 = fma(_850, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842));
        float _1231 = fma(_850, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842));
        float _1254 = _842 + _618;
        float _1255 = _846 + _619;
        float _1256 = _850 + _620;
        float _1266 = fma(_1256, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1254)) - _1223;
        float _1267 = fma(_1256, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1254)) - _1227;
        float _1268 = fma(_1256, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1254)) - _1231;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1223 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1227 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[35u].z) + ((((((_1231 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1322 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1289.x + (-0.5));
        float _1324 = _1322 * (_1289.y + (-0.5));
        float _1325 = _1322 * (_1289.z + (-0.5));
        float _1332 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1296.x + (-0.5));
        float _1334 = _1332 * (_1296.y + (-0.5));
        float _1335 = _1332 * (_1296.z + (-0.5));
        float _1342 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1303.x + (-0.5));
        float _1344 = _1342 * (_1303.y + (-0.5));
        float _1345 = _1342 * (_1303.z + (-0.5));
        float _1352 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1310.x + (-0.5));
        float _1354 = _1352 * (_1310.y + (-0.5));
        float _1355 = _1352 * (_1310.z + (-0.5));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = _1323 * 0.5;
        float _1360 = _1333 * 0.5;
        float _1361 = _1343 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_618, _619, _620), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4166 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1386 + 1.0))) + _1391) * _1356;
        float _1401 = _1324 * 0.5;
        float _1402 = _1334 * 0.5;
        float _1403 = _1344 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_618, _619, _620), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4199 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1428 + 1.0))) + _1433) * _1357;
        float _1443 = _1325 * 0.5;
        float _1444 = _1335 * 0.5;
        float _1445 = _1345 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_618, _619, _620), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _4232 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1470 + 1.0))) + _1475) * _1358;
        _1492 = _1325;
        _1493 = _1324;
        _1494 = _1323;
        _1495 = _1335;
        _1496 = _1334;
        _1497 = _1333;
        _1498 = _1345;
        _1499 = _1344;
        _1500 = _1343;
        _1501 = _1358;
        _1502 = _1357;
        _1503 = _1356;
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1181;
        _1493 = _1181;
        _1494 = _1181;
        _1495 = _1181;
        _1496 = _1181;
        _1497 = _1181;
        _1498 = _1181;
        _1499 = _1181;
        _1500 = _1181;
        _1501 = _1181;
        _1502 = _1181;
        _1503 = _1181;
        _1504 = 0.0;
        _1505 = 0.0;
        _1506 = 0.0;
    }
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1193)) + _1193;
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1194)) + _1194;
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1195)) + _1195;
    float _1539 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1517, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1542 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1517, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1545 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1517, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1516));
    float _1560 = _789 * 0.5;
    float _1561 = _790 * 0.5;
    float _1562 = _791 * 0.5;
    float _1563 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1566 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1569 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1603;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1576 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1180, _1184, _1187, _1190));
        float _1580 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1182, _1185, _1188, _1191));
        float _1584 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1591 = dot(vec4(cbModelParam._m0[39u]), vec4(_1560, _1561, _1562, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1614;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1605 = dot(vec4(cbModelParam._m0[40u]), vec4(_1560, _1561, _1562, 1.0));
        _1614 = dot(vec3(isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1614 = 1.0;
    }
    float _1618 = (_1614 * cbModelParam._m0[1u].x) + (_1603 * (1.0 - cbModelParam._m0[1u].x));
    float _1628 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _621);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1628 : min(cbModelParam._m0[25u].z, _1628));
    float _1709;
    float _1711;
    float _1713;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1676 = fma(_850, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842)) + cbModelParam._m0[13u].w;
        float _1680 = fma(_850, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842)) + cbModelParam._m0[14u].w;
        float _1684 = fma(_850, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842)) + cbModelParam._m0[15u].w;
        float _1687 = fma(_791, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789));
        float _1690 = fma(_791, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789));
        float _1693 = fma(_791, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789));
        float _1721;
        if (_1687 > 0.0)
        {
            _1721 = abs((1.0 - _1676) / _1687);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1676 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1721 = frontier_phi_17_15_ladder;
        }
        float _1890;
        if (_1690 > 0.0)
        {
            _1890 = abs((1.0 - _1680) / _1690);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1680 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1890 = frontier_phi_26_22_ladder;
        }
        float _2185;
        if (_1693 > 0.0)
        {
            _2185 = abs((1.0 - _1684) / _1693);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1684 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2185 = frontier_phi_38_33_ladder;
        }
        float _2187 = isnan(_1890) ? _1721 : (isnan(_1721) ? _1890 : min(_1721, _1890));
        float _2188 = isnan(_2185) ? _2187 : (isnan(_2187) ? _2185 : min(_2187, _2185));
        float _2192 = (_2188 * _1687) + _1676;
        float _2193 = (_2188 * _1690) + _1680;
        float _2194 = (_2188 * _1693) + _1684;
        float _2195 = _2188 * 9.9999997473787516355514526367188e-05;
        float _2197 = (-1.0) - _2195;
        float _2199 = _2195 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2194 > _2199) || ((_2194 < _2197) || ((_2193 > _2199) || ((_2193 < _2197) || ((_2192 < _2197) || (_2192 > _2199))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2339 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2194, cbModelParam._m0[9u].z, fma(_2193, cbModelParam._m0[9u].y, _2192 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2194, cbModelParam._m0[10u].z, fma(_2193, cbModelParam._m0[10u].y, _2192 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2194, cbModelParam._m0[11u].z, fma(_2193, cbModelParam._m0[11u].y, _2192 * cbModelParam._m0[11u].x))), _1629);
            frontier_phi_16_38_ladder = _2339.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2339.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2339.x * cbModelParam._m0[1u].y;
        }
        _1709 = frontier_phi_16_38_ladder_2;
        _1711 = frontier_phi_16_38_ladder_1;
        _1713 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1697 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_789, _790, _791), _1629);
        _1709 = _1697.x * cbModelParam._m0[1u].y;
        _1711 = _1697.y * cbModelParam._m0[1u].y;
        _1713 = _1697.z * cbModelParam._m0[1u].y;
    }
    float _1717 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _621);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1717 : min(cbModelParam._m0[25u].w, _1717));
    float _1807;
    float _1809;
    float _1811;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1771 = fma(_850, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842)) + cbModelParam._m0[21u].w;
        float _1775 = fma(_850, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842)) + cbModelParam._m0[22u].w;
        float _1779 = fma(_850, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842)) + cbModelParam._m0[23u].w;
        float _1782 = fma(_791, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789));
        float _1785 = fma(_791, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789));
        float _1788 = fma(_791, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789));
        float _1895;
        if (_1782 > 0.0)
        {
            _1895 = abs((1.0 - _1771) / _1782);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1771 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1895 = frontier_phi_28_24_ladder;
        }
        float _2212;
        if (_1785 > 0.0)
        {
            _2212 = abs((1.0 - _1775) / _1785);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1775 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2212 = frontier_phi_40_35_ladder;
        }
        float _2539;
        if (_1788 > 0.0)
        {
            _2539 = abs((1.0 - _1779) / _1788);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1779 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2539 = frontier_phi_50_47_ladder;
        }
        float _2541 = isnan(_2212) ? _1895 : (isnan(_1895) ? _2212 : min(_1895, _2212));
        float _2542 = isnan(_2539) ? _2541 : (isnan(_2541) ? _2539 : min(_2541, _2539));
        float _2546 = (_2542 * _1782) + _1771;
        float _2547 = (_2542 * _1785) + _1775;
        float _2548 = (_2542 * _1788) + _1779;
        float _2549 = _2542 * 9.9999997473787516355514526367188e-05;
        float _2550 = (-1.0) - _2549;
        float _2552 = _2549 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2548 > _2552) || ((_2548 < _2550) || ((_2547 > _2552) || ((_2547 < _2550) || ((_2546 < _2550) || (_2546 > _2552))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2548, cbModelParam._m0[17u].z, fma(_2547, cbModelParam._m0[17u].y, _2546 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2548, cbModelParam._m0[18u].z, fma(_2547, cbModelParam._m0[18u].y, _2546 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2548, cbModelParam._m0[19u].z, fma(_2547, cbModelParam._m0[19u].y, _2546 * cbModelParam._m0[19u].x))), _1718);
            frontier_phi_25_50_ladder = _2666.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2666.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2666.x * cbModelParam._m0[1u].z;
        }
        _1807 = frontier_phi_25_50_ladder_2;
        _1809 = frontier_phi_25_50_ladder_1;
        _1811 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1791 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_789, _790, _791), _1718);
        _1807 = _1791.x * cbModelParam._m0[1u].z;
        _1809 = _1791.y * cbModelParam._m0[1u].z;
        _1811 = _1791.z * cbModelParam._m0[1u].z;
    }
    float _1823 = ((((1.0 - _810) * ((_797 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_810 * _797)) * _781;
    float _1824 = _1823 * ((cbModelParam._m0[1u].w * (_1807 - _1709)) + _1709);
    float _1825 = _1823 * ((cbModelParam._m0[1u].w * (_1809 - _1711)) + _1711);
    float _1826 = _1823 * ((cbModelParam._m0[1u].w * (_1811 - _1713)) + _1713);
    float _1829 = fma(_1826, cbSceneParam._m0[89u].z, fma(_1825, cbSceneParam._m0[89u].y, _1824 * cbSceneParam._m0[89u].x));
    float _1832 = fma(_1826, cbSceneParam._m0[90u].z, fma(_1825, cbSceneParam._m0[90u].y, _1824 * cbSceneParam._m0[90u].x));
    float _1835 = fma(_1826, cbSceneParam._m0[91u].z, fma(_1825, cbSceneParam._m0[91u].y, _1824 * cbSceneParam._m0[91u].x));
    float _1869 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1873 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1877 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1881 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1882 = _1869 / _1881;
    float _1883 = _1873 / _1881;
    float _1884 = _1877 / _1881;
    float _2031;
    float _2032;
    float _2033;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1911 = ((uint(_1884 > cbSceneParam._m0[59u].y) + uint(_1884 > cbSceneParam._m0[59u].x)) + uint(_1884 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1912 = _1911 + 43u;
        uint _1920 = _1911 + 44u;
        uint _1928 = _1911 + 45u;
        uint _1936 = _1911 + 46u;
        float _1947 = fma(_1881, cbSceneParam._m0[_1912].w, fma(_1877, cbSceneParam._m0[_1912].z, fma(_1873, cbSceneParam._m0[_1912].y, _1869 * cbSceneParam._m0[_1912].x)));
        float _1951 = fma(_1881, cbSceneParam._m0[_1920].w, fma(_1877, cbSceneParam._m0[_1920].z, fma(_1873, cbSceneParam._m0[_1920].y, _1869 * cbSceneParam._m0[_1920].x)));
        float _1959 = fma(_1881, cbSceneParam._m0[_1936].w, fma(_1877, cbSceneParam._m0[_1936].z, fma(_1873, cbSceneParam._m0[_1936].y, _1869 * cbSceneParam._m0[_1936].x)));
        float _1964 = cbSceneParam._m0[33u].z * _1959;
        float _1966 = cbSceneParam._m0[33u].w * _1959;
        float _1969 = fma(_1881, cbSceneParam._m0[_1928].w, fma(_1877, cbSceneParam._m0[_1928].z, fma(_1873, cbSceneParam._m0[_1928].y, _1869 * cbSceneParam._m0[_1928].x))) / _1959;
        float _2017 = (cbSceneParam._m0[33u].x - sqrt(((_1883 * _1883) + (_1882 * _1882)) + (_1884 * _1884))) * cbSceneParam._m0[33u].y;
        float _4358 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2024 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 + _1947) / _1959, (_1966 + _1951) / _1959), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1966 + _1947) / _1959, (_1951 - _1964) / _1959), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1947 - _1964) / _1959, (_1951 - _1966) / _1959), _1969), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1947 - _1966) / _1959, (_1964 + _1951) / _1959), _1969), 0.0)).x), vec4(0.25)));
        _2031 = 1.0 - (_2024 * cbSceneParam._m0[34u].x);
        _2032 = 1.0 - (_2024 * cbSceneParam._m0[34u].y);
        _2033 = 1.0 - (_2024 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2031 = 1.0;
        _2032 = 1.0;
        _2033 = 1.0;
    }
    float _2097;
    float _2099;
    float _2101;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2085 = fma(_1881, cbSceneParam._m0[63u].w, fma(_1877, cbSceneParam._m0[63u].z, fma(_1873, cbSceneParam._m0[63u].y, _1869 * cbSceneParam._m0[63u].x)));
        float _2086 = fma(_1881, cbSceneParam._m0[60u].w, fma(_1877, cbSceneParam._m0[60u].z, fma(_1873, cbSceneParam._m0[60u].y, _1869 * cbSceneParam._m0[60u].x))) / _2085;
        float _2087 = fma(_1881, cbSceneParam._m0[61u].w, fma(_1877, cbSceneParam._m0[61u].z, fma(_1873, cbSceneParam._m0[61u].y, _1869 * cbSceneParam._m0[61u].x))) / _2085;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2086 >= cbSceneParam._m0[64u].x) && (_2087 >= cbSceneParam._m0[64u].y)) && (_2086 <= cbSceneParam._m0[64u].z)) && (_2087 <= cbSceneParam._m0[64u].w))
        {
            float _2225 = fma(_1881, cbSceneParam._m0[62u].w, fma(_1877, cbSceneParam._m0[62u].z, fma(_1873, cbSceneParam._m0[62u].y, _1869 * cbSceneParam._m0[62u].x))) / _2085;
            float _2229 = isnan(cbSceneParam._m0[41u].w) ? _2225 : (isnan(_2225) ? cbSceneParam._m0[41u].w : max(_2225, cbSceneParam._m0[41u].w));
            float _2272 = (cbSceneParam._m0[33u].x - sqrt(((_1883 * _1883) + (_1882 * _1882)) + (_1884 * _1884))) * cbSceneParam._m0[33u].y;
            float _4374 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
            float _2279 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2086, cbSceneParam._m0[33u].w + _2087), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2086, _2087 - cbSceneParam._m0[33u].z), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2086 - cbSceneParam._m0[33u].z, _2087 - cbSceneParam._m0[33u].w), _2229), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2086 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2087), _2229), 0.0)).x), vec4(0.25)));
            float _2283 = 1.0 - (_2279 * cbSceneParam._m0[34u].x);
            float _2284 = 1.0 - (_2279 * cbSceneParam._m0[34u].y);
            float _2285 = 1.0 - (_2279 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2285) ? _2033 : (isnan(_2033) ? _2285 : min(_2033, _2285));
            frontier_phi_37_36_ladder_1 = isnan(_2284) ? _2032 : (isnan(_2032) ? _2284 : min(_2032, _2284));
            frontier_phi_37_36_ladder_2 = isnan(_2283) ? _2031 : (isnan(_2031) ? _2283 : min(_2031, _2283));
        }
        else
        {
            frontier_phi_37_36_ladder = _2033;
            frontier_phi_37_36_ladder_1 = _2032;
            frontier_phi_37_36_ladder_2 = _2031;
        }
        _2097 = frontier_phi_37_36_ladder_2;
        _2099 = frontier_phi_37_36_ladder_1;
        _2101 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2097 = _2031;
        _2099 = _2032;
        _2101 = _2033;
    }
    uvec4 _2106 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _2108 = _2106.x * 14u;
    uint _2109 = _2108 + 13u;
    float _2116 = _781 + (-1.0);
    float _2121 = (cbLight._m0[_2109].x * _2116) + 1.0;
    float _2122 = (cbLight._m0[_2109].y * _2116) + 1.0;
    float _2123 = (cbLight._m0[_2109].z * _2116) + 1.0;
    float _2124 = (cbLight._m0[_2109].w * _2116) + 1.0;
    uint _2125 = _2108 + 5u;
    float _2131 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2135 = _2108 + 4u;
    float _2144 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2148 = _2108 | 1u;
    float _2159 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_618, _619, _620));
    float _2162 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_618, _619, _620));
    float _4410 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _4421 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2167 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * 0.3183098733425140380859375;
    float _2169 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * 0.3183098733425140380859375;
    float _2176 = ((cbLight._m0[_2125].x * _2131) * _2169) + (((cbLight._m0[_2135].x * _2097) * _2144) * _2167);
    float _2177 = ((_2131 * cbLight._m0[_2125].y) * _2169) + (((cbLight._m0[_2135].y * _2099) * _2144) * _2167);
    float _2178 = ((_2131 * cbLight._m0[_2125].z) * _2169) + (((cbLight._m0[_2135].z * _2101) * _2144) * _2167);
    uvec4 _2182 = floatBitsToUint(cbLight._m0[_2108 + 12u]);
    bool _2184 = _2182.x == 0u;
    float _2286;
    float _2288;
    float _2290;
    if (_2184)
    {
        _2286 = _2176;
        _2288 = _2177;
        _2290 = _2178;
    }
    else
    {
        uint _2294 = _2108 + 6u;
        float _2310 = (dot(vec3(cbLight._m0[_2108 + 2u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2311 = _2310 * _2310;
        float _4432 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2312 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2313 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2286 = (((cbLight._m0[_2294].x * 0.3183098733425140380859375) * _2312) * _2313) + _2176;
        _2288 = (((cbLight._m0[_2294].y * 0.3183098733425140380859375) * _2312) * _2313) + _2177;
        _2290 = (((cbLight._m0[_2294].z * 0.3183098733425140380859375) * _2312) * _2313) + _2178;
    }
    bool _2293 = _2182.y == 0u;
    float _2348;
    float _2350;
    float _2352;
    if (_2293)
    {
        _2348 = _2286;
        _2350 = _2288;
        _2352 = _2290;
    }
    else
    {
        uint _2510 = _2108 + 7u;
        float _2526 = (dot(vec3(cbLight._m0[_2108 + 3u].xyz), vec3(_618, _619, _620)) * 0.5) + 0.5;
        float _2527 = _2526 * _2526;
        float _4448 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2528 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2529 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2348 = (((cbLight._m0[_2510].x * 0.3183098733425140380859375) * _2528) * _2529) + _2286;
        _2350 = (((cbLight._m0[_2510].y * 0.3183098733425140380859375) * _2528) * _2529) + _2288;
        _2352 = (((cbLight._m0[_2510].z * 0.3183098733425140380859375) * _2528) * _2529) + _2290;
    }
    uint _2355 = _2108 + 8u;
    float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _621) * 0.949999988079071044921875);
    float _2369 = _2368 * _2368;
    float _2370 = cbLight._m0[_2108].x + _698;
    float _2371 = cbLight._m0[_2108].y + _699;
    float _2372 = cbLight._m0[_2108].z + _700;
    float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
    float _2377 = _2376 * _2370;
    float _2378 = _2376 * _2371;
    float _2379 = _2376 * _2372;
    float _2380 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2108].xyz));
    float _4464 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _4475 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _2384 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2385 = dot(vec3(_618, _619, _620), vec3(_2377, _2378, _2379));
    float _4486 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2377, _2378, _2379));
    float _4497 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2369 * _2369;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2408 = (exp2(log2(1.0 - (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2409 = 1.0 - _2369;
    float _2420 = (0.5 / (((_2384 * ((_2383 * _2409) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2409) + _2369) * _2383))) * _2383;
    float _4508 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2422 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    uint _2436 = _2108 + 9u;
    float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _621) * 0.949999988079071044921875);
    float _2448 = _2447 * _2447;
    float _2449 = cbLight._m0[_2148].x + _698;
    float _2450 = cbLight._m0[_2148].y + _699;
    float _2451 = cbLight._m0[_2148].z + _700;
    float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
    float _2456 = _2455 * _2449;
    float _2457 = _2455 * _2450;
    float _2458 = _2455 * _2451;
    float _2459 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2148].xyz));
    float _4519 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2463 = dot(vec3(_618, _619, _620), vec3(_2456, _2457, _2458));
    float _4530 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2466 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _2467 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2456, _2457, _2458));
    float _4541 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2471 = _2448 * _2448;
    float _2475 = ((_2466 * _2466) * (_2471 + (-1.0))) + 1.0;
    float _2484 = (exp2(log2(1.0 - (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2485 = 1.0 - _2448;
    float _2495 = (0.5 / (((_2384 * ((_2462 * _2485) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2485) + _2448) * _2462))) * _2462;
    float _4552 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2497 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_2471 / ((_2475 * _2475) * 3.141590118408203125));
    float _2507 = (((_2484 * cbLight._m0[_2436].x) * _2497) * _2131) + ((((cbLight._m0[_2355].x * _2097) * _2408) * _2422) * _2144);
    float _2508 = (((_2484 * cbLight._m0[_2436].y) * _2497) * _2131) + ((((cbLight._m0[_2355].y * _2099) * _2408) * _2422) * _2144);
    float _2509 = (((_2484 * cbLight._m0[_2436].z) * _2497) * _2131) + ((((cbLight._m0[_2355].z * _2101) * _2408) * _2422) * _2144);
    float _2565;
    float _2567;
    float _2569;
    if (_2184)
    {
        _2565 = _2507;
        _2567 = _2508;
        _2569 = _2509;
    }
    else
    {
        uint _2571 = _2108 + 2u;
        uint _2575 = _2108 + 10u;
        float _2589 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2571].w)) * _621) * 0.949999988079071044921875);
        float _2590 = _2589 * _2589;
        float _2591 = cbLight._m0[_2571].x + _698;
        float _2592 = cbLight._m0[_2571].y + _699;
        float _2593 = cbLight._m0[_2571].z + _700;
        float _2597 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
        float _2598 = _2597 * _2591;
        float _2599 = _2597 * _2592;
        float _2600 = _2597 * _2593;
        float _2601 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2571].xyz));
        float _4563 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2605 = dot(vec3(_618, _619, _620), vec3(_2598, _2599, _2600));
        float _4574 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2608 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2609 = dot(vec3(cbLight._m0[_2571].xyz), vec3(_2598, _2599, _2600));
        float _4585 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2613 = _2590 * _2590;
        float _2617 = ((_2608 * _2608) * (_2613 + (-1.0))) + 1.0;
        float _2626 = (exp2(log2(1.0 - (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2627 = 1.0 - _2590;
        float _2637 = (0.5 / (((_2384 * ((_2604 * _2627) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2627) + _2590) * _2604))) * _2604;
        float _4596 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2639 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2613 / ((_2617 * _2617) * 3.141590118408203125));
        float _2640 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2565 = (((_2626 * cbLight._m0[_2575].x) * _2639) * _2640) + _2507;
        _2567 = (((_2626 * cbLight._m0[_2575].y) * _2639) * _2640) + _2508;
        _2569 = (((_2626 * cbLight._m0[_2575].z) * _2639) * _2640) + _2509;
    }
    float _2671;
    float _2673;
    float _2675;
    if (_2293)
    {
        _2671 = _2565;
        _2673 = _2567;
        _2675 = _2569;
    }
    else
    {
        uint _2682 = _2108 + 3u;
        uint _2686 = _2108 + 11u;
        float _2700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2682].w)) * _621) * 0.949999988079071044921875);
        float _2701 = _2700 * _2700;
        float _2702 = cbLight._m0[_2682].x + _698;
        float _2703 = cbLight._m0[_2682].y + _699;
        float _2704 = cbLight._m0[_2682].z + _700;
        float _2708 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
        float _2709 = _2708 * _2702;
        float _2710 = _2708 * _2703;
        float _2711 = _2708 * _2704;
        float _2712 = dot(vec3(_618, _619, _620), vec3(cbLight._m0[_2682].xyz));
        float _4612 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2715 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2716 = dot(vec3(_618, _619, _620), vec3(_2709, _2710, _2711));
        float _4623 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2719 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2720 = dot(vec3(cbLight._m0[_2682].xyz), vec3(_2709, _2710, _2711));
        float _4634 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2724 = _2701 * _2701;
        float _2728 = ((_2719 * _2719) * (_2724 + (-1.0))) + 1.0;
        float _2737 = (exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2738 = 1.0 - _2701;
        float _2748 = (0.5 / (((_2384 * ((_2715 * _2738) + _2701)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2738) + _2701) * _2715))) * _2715;
        float _4645 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2750 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2724 / ((_2728 * _2728) * 3.141590118408203125));
        float _2751 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2671 = (((_2737 * cbLight._m0[_2686].x) * _2750) * _2751) + _2565;
        _2673 = (((_2737 * cbLight._m0[_2686].y) * _2750) * _2751) + _2567;
        _2675 = (((_2737 * cbLight._m0[_2686].z) * _2750) * _2751) + _2569;
    }
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    if (_2106.y == 0u)
    {
        uvec4 _2772 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2773 = _2772.x;
        uint _2784 = uint((float(_2772.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2773))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2773)));
        float _2794 = (log2(_1884 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2795 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        uint _2798 = uint(isnan(14.0) ? _2795 : (isnan(_2795) ? 14.0 : min(_2795, 14.0)));
        uvec4 _2803 = texelFetch(g_lightClusterGridBuffer, int(((_2798 << 2u) + (_2784 << 6u)) >> 2u));
        uint _2804 = _2803.x;
        uint _2805 = _2772.z;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        float _2894;
        if (((((1u << ((_2805 >> 4u) & 15u)) + 4294967295u) & _2804) == 0u) || ((_2805 & 240u) == 0u))
        {
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
            _2892 = 0.0;
            _2894 = 0.0;
        }
        else
        {
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _2893;
            float _2895;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            float _3042 = 0.0;
            uint _3043 = 0u;
            uint _3052;
            bool _3053;
            for (;;)
            {
                _3052 = texelFetch(g_lightClassification, int((((_2798 << 5u) + (_2784 << 9u)) + (_3043 << 2u)) >> 2u)).x;
                _3053 = _3052 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3053)
                {
                    frontier_phi_71_pred = _3042;
                    frontier_phi_71_pred_1 = _3041;
                    frontier_phi_71_pred_2 = _3040;
                    frontier_phi_71_pred_3 = _3039;
                    frontier_phi_71_pred_4 = _3038;
                    frontier_phi_71_pred_5 = _3037;
                }
                else
                {
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    uint _3188;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3041;
                    _3187 = _3042;
                    _3188 = _3052;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    for (;;)
                    {
                        uint _3192 = uint(findLSB(_3188)) + (_3043 << 5u);
                        uint _3189 = (_3188 + 4294967295u) & _3188;
                        uint _3194 = _3192 * 48u;
                        vec4 _3208 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 3u)).x));
                        uint _3214 = (_3192 * 48u) + 4u;
                        vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 3u)).x));
                        uint _3233 = (_3192 * 48u) + 8u;
                        vec3 _3244 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3233)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 2u)).x));
                        float _3248 = _3208.x - _1882;
                        float _3249 = _3208.y - _1883;
                        float _3250 = _3208.z - _1884;
                        float _3251 = dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250));
                        float _3254 = inversesqrt(_3251);
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3258 = dot(vec3(_737, _740, _743), vec3(_3255, _3256, _3257));
                        float _3263 = 1.0 - (_3251 * _3208.w);
                        float _4671 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3264 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                        float _3265 = sqrt(_3251) * _3227.w;
                        float _3268 = 1.39999997615814208984375 / (_3265 + 1.39999997615814208984375);
                        float _3269 = _3268 * _3268;
                        float _3272 = ((1.0 - _3269) * _3258) + _3269;
                        float _3275 = _3265 * _3265;
                        float _3279 = ((isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0))) * _3264) / ((_3275 * 0.699999988079071044921875) + 1.0);
                        float _3283 = (-0.0) - _1882;
                        float _3284 = (-0.0) - _1883;
                        float _3285 = (-0.0) - _1884;
                        float _3289 = inversesqrt(dot(vec3(_3283, _3284, _3285), vec3(_3283, _3284, _3285)));
                        float _3290 = _3289 * _3283;
                        float _3291 = _3289 * _3284;
                        float _3292 = _3289 * _3285;
                        float _3299 = exp2(log2(1.0 / ((_3275 * 3.5) + 5.0)) * 0.25);
                        float _3300 = 1.0 - _797;
                        float _3307 = sqrt(1.0 - ((1.0 - (_3300 * _3300)) * (1.0 - (_3299 * _3299))));
                        float _3308 = _3307 * _3307;
                        float _3309 = _3308 * _3308;
                        float _3310 = _3290 + _3255;
                        float _3311 = _3291 + _3256;
                        float _3312 = _3292 + _3257;
                        float _3316 = inversesqrt(dot(vec3(_3310, _3311, _3312), vec3(_3310, _3311, _3312)));
                        float _3320 = dot(vec3(_737, _740, _743), vec3(_3290, _3291, _3292));
                        float _4687 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3323 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3324 = dot(vec3(_737, _740, _743), vec3(_3316 * _3310, _3316 * _3311, _3316 * _3312));
                        float _4698 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3327 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3331 = ((_3327 * _3327) * (_3309 + (-1.0))) + 1.0;
                        float _3332 = _3268 * _3308;
                        float _3333 = _3332 * _3332;
                        float _3336 = ((1.0 - _3333) * _3258) + _3333;
                        float _4709 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3337 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                        float _3338 = 1.0 - _3308;
                        float _3348 = (0.5 / (((_3337 * ((_3323 * _3338) + _3308)) + 9.9999999392252902907785028219223e-09) + (((_3337 * _3338) + _3308) * _3323))) * _3337;
                        float _4720 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                        float _3359 = (((_3309 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3331 * _3331) * ((_3275 * 2.1991131305694580078125) + 3.141590118408203125))) * _3264;
                        _3112 = (_3279 * _3227.x) + _3185;
                        _3113 = (_3279 * _3227.y) + _3186;
                        _3114 = (_3279 * _3227.z) + _3187;
                        _3109 = (_3359 * _3244.x) + _3182;
                        _3110 = (_3359 * _3244.y) + _3183;
                        _3111 = (_3359 * _3244.z) + _3184;
                        if (_3189 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3113;
                            _3187 = _3114;
                            _3188 = _3189;
                        }
                    }
                    frontier_phi_71_pred = _3114;
                    frontier_phi_71_pred_1 = _3113;
                    frontier_phi_71_pred_2 = _3112;
                    frontier_phi_71_pred_3 = _3111;
                    frontier_phi_71_pred_4 = _3110;
                    frontier_phi_71_pred_5 = _3109;
                }
                _2895 = frontier_phi_71_pred;
                _2893 = frontier_phi_71_pred_1;
                _2891 = frontier_phi_71_pred_2;
                _2889 = frontier_phi_71_pred_3;
                _2887 = frontier_phi_71_pred_4;
                _2885 = frontier_phi_71_pred_5;
                uint _3044 = _3043 + 1u;
                if (_3044 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3037 = _2885;
                    _3038 = _2887;
                    _3039 = _2889;
                    _3040 = _2891;
                    _3041 = _2893;
                    _3042 = _2895;
                    _3043 = _3044;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
            _2892 = _2893;
            _2894 = _2895;
        }
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.z;
        uint _2901 = (_2899 >> 8u) & 15u;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        if (((4294967295u << _2901) & _2804) == 0u)
        {
            _3005 = _2884;
            _3007 = _2886;
            _3009 = _2888;
            _3011 = _2890;
            _3013 = _2892;
            _3015 = _2894;
        }
        else
        {
            float _3030 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
            float _3031 = _3030 * _1882;
            float _3032 = _3030 * _1883;
            float _3033 = _3030 * _1884;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2901 < ((_2899 >> 12u) & 15u))
            {
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3016;
                float _3165 = _2884;
                float _3166 = _2886;
                float _3167 = _2888;
                float _3168 = _2890;
                float _3169 = _2892;
                float _3170 = _2894;
                uint _3171 = _2901;
                uint _3180;
                bool _3181;
                for (;;)
                {
                    _3180 = texelFetch(g_lightClassification, int((((_2798 << 5u) + (_2784 << 9u)) + (_3171 << 2u)) >> 2u)).x;
                    _3181 = _3180 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3181)
                    {
                        frontier_phi_82_pred = _3170;
                        frontier_phi_82_pred_1 = _3169;
                        frontier_phi_82_pred_2 = _3168;
                        frontier_phi_82_pred_3 = _3167;
                        frontier_phi_82_pred_4 = _3166;
                        frontier_phi_82_pred_5 = _3165;
                    }
                    else
                    {
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3386 = _3165;
                        float _3387 = _3166;
                        float _3388 = _3167;
                        float _3389 = _3168;
                        float _3390 = _3169;
                        float _3391 = _3170;
                        uint _3392 = _3180;
                        uint _3393;
                        vec4 _3418;
                        float _3419;
                        vec4 _3434;
                        vec3 _3446;
                        vec4 _3461;
                        vec4 _3477;
                        float _3523;
                        bool _3524;
                        for (;;)
                        {
                            uint _3403 = ((_3171 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3392));
                            _3393 = (_3392 + 4294967295u) & _3392;
                            uint _3405 = _3403 * 40u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            _3419 = _3418.w;
                            uint _3421 = (_3403 * 40u) + 4u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3436 = (_3403 * 40u) + 8u;
                            _3446 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x));
                            uint _3448 = (_3403 * 40u) + 16u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3464 = (_3403 * 40u) + 20u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3403 * 40u) + 24u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3498 = (_3403 * 40u) + 28u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            _3523 = fma(_1884, _3511.z, fma(_1883, _3511.y, _3511.x * _1882)) + _3511.w;
                            _3524 = !((fma(_1884, _3492.z, fma(_1883, _3492.y, _3492.x * _1882)) + _3492.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3524)
                            {
                                float _3551 = _3418.x - _1882;
                                float _3552 = _3418.y - _1883;
                                float _3553 = _3418.z - _1884;
                                float _3554 = dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553));
                                float _3557 = inversesqrt(_3554);
                                float _3558 = _3557 * _3551;
                                float _3559 = _3557 * _3552;
                                float _3560 = _3557 * _3553;
                                float _3564 = 1.0 - (_3554 / (_3419 * _3419));
                                float _4731 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                                float _3569 = sqrt(_3554) * _3434.w;
                                float _3571 = 1.39999997615814208984375 / (_3569 + 1.39999997615814208984375);
                                float _3572 = _3571 * _3571;
                                float _3575 = ((1.0 - _3572) * dot(vec3(_3558, _3559, _3560), vec3(_737, _740, _743))) + _3572;
                                float _3578 = _3569 * _3569;
                                float _3582 = (fma(_1884, _3461.z, fma(_1883, _3461.y, _3461.x * _1882)) + _3461.w) / _3523;
                                float _3583 = (fma(_1884, _3477.z, fma(_1883, _3477.y, _3477.x * _1882)) + _3477.w) / _3523;
                                float _3587 = 1.0 - dot(vec2(_3582, _3583), vec2(_3582, _3583));
                                float _4747 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3589 = _3588 * (((isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0))) * _3565) / ((_3578 * 0.699999988079071044921875) + 1.0));
                                float _3601 = exp2(log2(1.0 / ((_3578 * 3.5) + 5.0)) * 0.25);
                                float _3602 = 1.0 - _797;
                                float _3609 = sqrt(1.0 - ((1.0 - (_3602 * _3602)) * (1.0 - (_3601 * _3601))));
                                float _3610 = _3609 * _3609;
                                float _3611 = _3610 * _3610;
                                float _3612 = _3558 - _3031;
                                float _3613 = _3559 - _3032;
                                float _3614 = _3560 - _3033;
                                float _3618 = inversesqrt(dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614)));
                                float _3622 = dot(vec3(_737, _740, _743), vec3((-0.0) - _3031, (-0.0) - _3032, (-0.0) - _3033));
                                float _4758 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3626 = dot(vec3(_737, _740, _743), vec3(_3618 * _3612, _3618 * _3613, _3618 * _3614));
                                float _4769 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3633 = ((_3629 * _3629) * (_3611 + (-1.0))) + 1.0;
                                float _3634 = _3571 * _3610;
                                float _3635 = _3634 * _3634;
                                float _3641 = ((1.0 - _3635) * dot(vec3(_737, _740, _743), vec3(_3558, _3559, _3560))) + _3635;
                                float _4780 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                                float _3643 = 1.0 - _3610;
                                float _3653 = (0.5 / (((_3642 * ((_3625 * _3643) + _3610)) + 9.9999999392252902907785028219223e-09) + (((_3642 * _3643) + _3610) * _3625))) * _3642;
                                float _4791 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3663 = (_3588 * _3565) * (((_3611 * 3.1415927410125732421875) * (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) / ((_3633 * _3633) * ((_3578 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3589 * _3434.z;
                                frontier_phi_88_pred_1 = _3589 * _3434.y;
                                frontier_phi_88_pred_2 = _3589 * _3434.x;
                                frontier_phi_88_pred_3 = _3663 * _3446.z;
                                frontier_phi_88_pred_4 = _3663 * _3446.y;
                                frontier_phi_88_pred_5 = _3663 * _3446.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3672 = frontier_phi_88_pred;
                            _3671 = frontier_phi_88_pred_1;
                            _3670 = frontier_phi_88_pred_2;
                            _3669 = frontier_phi_88_pred_3;
                            _3668 = frontier_phi_88_pred_4;
                            _3667 = frontier_phi_88_pred_5;
                            _3376 = _3670 + _3389;
                            _3377 = _3671 + _3390;
                            _3378 = _3672 + _3391;
                            _3373 = _3667 + _3386;
                            _3374 = _3668 + _3387;
                            _3375 = _3669 + _3388;
                            if (_3393 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3393;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3378;
                        frontier_phi_82_pred_1 = _3377;
                        frontier_phi_82_pred_2 = _3376;
                        frontier_phi_82_pred_3 = _3375;
                        frontier_phi_82_pred_4 = _3374;
                        frontier_phi_82_pred_5 = _3373;
                    }
                    _3016 = frontier_phi_82_pred;
                    _3014 = frontier_phi_82_pred_1;
                    _3012 = frontier_phi_82_pred_2;
                    _3010 = frontier_phi_82_pred_3;
                    _3008 = frontier_phi_82_pred_4;
                    _3006 = frontier_phi_82_pred_5;
                    uint _3172 = _3171 + 1u;
                    if (_3172 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3165 = _3006;
                        _3166 = _3008;
                        _3167 = _3010;
                        _3168 = _3012;
                        _3169 = _3014;
                        _3170 = _3016;
                        _3171 = _3172;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3012;
                frontier_phi_63_64_ladder_1 = _3016;
                frontier_phi_63_64_ladder_2 = _3014;
                frontier_phi_63_64_ladder_3 = _3010;
                frontier_phi_63_64_ladder_4 = _3008;
                frontier_phi_63_64_ladder_5 = _3006;
            }
            else
            {
                frontier_phi_63_64_ladder = _2890;
                frontier_phi_63_64_ladder_1 = _2894;
                frontier_phi_63_64_ladder_2 = _2892;
                frontier_phi_63_64_ladder_3 = _2888;
                frontier_phi_63_64_ladder_4 = _2886;
                frontier_phi_63_64_ladder_5 = _2884;
            }
            _3005 = frontier_phi_63_64_ladder_5;
            _3007 = frontier_phi_63_64_ladder_4;
            _3009 = frontier_phi_63_64_ladder_3;
            _3011 = frontier_phi_63_64_ladder;
            _3013 = frontier_phi_63_64_ladder_2;
            _3015 = frontier_phi_63_64_ladder_1;
        }
        float _3020 = isnan(1.0) ? _781 : (isnan(_781) ? 1.0 : min(_781, 1.0));
        _2817 = (_3020 * _3011) + _2348;
        _2819 = (_3020 * _3013) + _2350;
        _2821 = (_3020 * _3015) + _2352;
        _2823 = ((_3005 * 0.039999999105930328369140625) * _3020) + _2671;
        _2825 = ((_3007 * 0.039999999105930328369140625) * _3020) + _2673;
        _2827 = ((_3009 * 0.039999999105930328369140625) * _3020) + _2675;
    }
    else
    {
        _2817 = _2348;
        _2819 = _2350;
        _2821 = _2352;
        _2823 = _2671;
        _2825 = _2673;
        _2827 = _2675;
    }
    float _4807 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4818 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4829 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _2844 = ((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2817 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _781))) + ((_2823 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1618)) * cbPerFrame._m0[3u].x);
    float _2845 = ((isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2819 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _781))) + ((_2825 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1618)) * cbPerFrame._m0[3u].x);
    float _2846 = ((isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2821 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _781))) + ((_2827 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1618)) * cbPerFrame._m0[3u].x);
    uint _2847 = _236 + 6u;
    float _2855 = _718 / cbSceneParam._m0[86u].x;
    float _2856 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2870 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2855, _2856, (log2((isnan(cbSceneParam._m0[77u].w) ? _639 : (isnan(_639) ? cbSceneParam._m0[77u].w : min(_639, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2872 = _2870.x;
    float _2873 = _2870.y;
    float _2874 = _2870.z;
    float _2875 = _2870.w;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_639 > cbSceneParam._m0[78u].w)
    {
        float _2909 = isnan(_639) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _639 : min(cbSceneParam._m0[80u].w, _639));
        float _2910 = _2909 / _639;
        float _2921 = _2910 * _691;
        float _2922 = _692 * _2910;
        float _2923 = (-0.0) - _2922;
        float _2925 = _2910 * _693;
        float _2927 = (cbSceneParam._m0[77u].w * _2923) / _2909;
        float _2928 = _2927 + cbSceneParam._m0[79u].w;
        float _2929 = cbSceneParam._m0[79u].w - _2922;
        float _2935 = sqrt(((_2921 * _2921) + (_2922 * _2922)) + (_2925 * _2925));
        float _2938 = (1.0 - (cbSceneParam._m0[77u].w / _2909)) * _2935;
        float _2943 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2945 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3122;
        if (abs((_2923 - _2927) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3122 = ((((_2928 > 0.0) ? exp2(_2943 * _2928) : (2.0 - exp2(_2945 * _2928))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2938;
        }
        else
        {
            float _3066 = 1.0 / cbSceneParam._m0[80u].x;
            float _3067 = isnan(_2929) ? _2928 : (isnan(_2928) ? _2929 : max(_2928, _2929));
            float _3068 = isnan(_2929) ? _2928 : (isnan(_2928) ? _2929 : min(_2928, _2929));
            float _3077 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : min(_3067, 0.0));
            float _3078 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : min(_3068, 0.0));
            _3122 = ((abs(_2935 / _2923) * cbSceneParam._m0[80u].y) * ((((_3077 - _3078) * 2.0) - ((exp2(_2943 * (isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0)))) - exp2(_2943 * (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0))))) * _3066)) - ((exp2(_2945 * _3077) - exp2(_2945 * _3078)) * _3066))) + (_2938 * cbSceneParam._m0[80u].z);
        }
        vec4 _3124 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2855, _2856, 1.0), 0.0);
        float _3133 = exp2((_3122 * (-1.44269502162933349609375)) * (1.0 - _3124.w));
        float _3134 = log2(_3133);
        float _3150 = log2(_2875);
        _2947 = (exp2(_3150 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].x)) * _3124.x) / cbSceneParam._m0[78u].x)) + _2872;
        _2949 = (exp2(_3150 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].y)) * _3124.y) / cbSceneParam._m0[78u].y)) + _2873;
        _2951 = (exp2(_3150 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].z)) * _3124.z) / cbSceneParam._m0[78u].z)) + _2874;
        _2953 = _3133 * _2875;
    }
    else
    {
        _2947 = _2872;
        _2949 = _2873;
        _2951 = _2874;
        _2953 = _2875;
    }
    bool _3160;
    vec4 _2963;
    vec4 _2985;
    float _2987;
    float _2991;
    float _2992;
    float _2993;
    float _2994;
    bool _3004;
    for (;;)
    {
        _2963 = cbMatDynParam._m0[0u];
        float _2965 = roundEven(_2963.y);
        bool _2966 = _2965 == 3.0;
        float _2967 = log2(_2953);
        float _2974 = exp2(_2967 * cbSceneParam._m0[78u].x) * _2844;
        float _2975 = exp2(_2967 * cbSceneParam._m0[78u].y) * _2845;
        float _2976 = exp2(_2967 * cbSceneParam._m0[78u].z) * _2846;
        float _2983 = _707 + (-0.5);
        _2985 = cbMtdParam._m0[1u];
        _2987 = _2985.y * _2983;
        float _2990 = (_2965 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2991 = _2990 * (_2966 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2947)));
        _2992 = _2990 * (_2966 ? _2975 : (_2975 + (cbSceneParam._m0[72u].w * _2949)));
        _2993 = _2990 * (_2966 ? _2976 : (_2976 + (cbSceneParam._m0[72u].w * _2951)));
        _2994 = _2983 * 0.999000012874603271484375;
        _3004 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3004)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2994) < 0.5)
            {
                _3160 = true;
                break;
            }
        }
        uint _3101 = _756 + uint(_2963.w);
        if ((cbInstanceData._m0[_3101].w < 1.0) && ((cbInstanceData._m0[_3101].w + _2994) < 0.5))
        {
            _3160 = true;
            break;
        }
        if ((_2987 + 1.0) < _2985.x)
        {
            _3160 = true;
            break;
        }
        _3160 = false;
        break;
    }
    float _3364;
    if (_3160)
    {
        discard_state = true;
        _3364 = 0.0;
    }
    else
    {
        _3364 = cbInstanceData._m0[_2847].w;
    }
    SV_Target.x = _2991;
    SV_Target.y = _2992;
    SV_Target.z = _2993;
    SV_Target.w = _3364;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2847].w;
    discard_exit();
}


