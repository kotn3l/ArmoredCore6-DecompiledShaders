#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1120;
float _3506;
float _3507;
float _3508;
float _3509;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3518 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3529 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3540 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _312.x * cbMtdParam._m0[9u].x;
    float _318 = _312.y * cbMtdParam._m0[9u].y;
    float _319 = _312.z * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _317;
    float _326 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _318;
    float _329 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _319;
    float _336 = ((_317 - _323) * (isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0)))) + _323;
    float _337 = ((_318 - _326) * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) + _326;
    float _338 = ((_319 - _329) * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) + _329;
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _382 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _386 = _382.z;
    float _390 = (_382.x * 2.0) + (-1.0);
    float _391 = (_382.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3551 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _397 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    float _402 = _390 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_356.x * 2.0) + (-1.0)));
    float _403 = _391 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_356.y * 2.0) + (-1.0)));
    float _406 = fma(_397, _223, fma(_403, _230, _402 * _216));
    float _409 = fma(_397, _224, fma(_403, _231, _402 * _217));
    float _412 = fma(_397, _225, fma(_403, _232, _402 * _218));
    float _416 = inversesqrt(dot(vec3(_406, _409, _412), vec3(_406, _409, _412)));
    vec4 _452 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _275) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _454 = _452.x;
    float _455 = 1.0 - _454;
    float _462 = ((_454 - _455) * cbMtdParam._m0[24u].z) + _455;
    float _464 = (cbMtdParam._m0[19u].x + dot(vec4(_416 * _406, _416 * _409, _416 * _412, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_462 * cbMtdParam._m0[21u].z);
    float _3562 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _480 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_462 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3573 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _481 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _485 = ((_465 * (cbMtdParam._m0[17u].x - _336)) * _481) + _336;
    float _486 = ((_465 * (cbMtdParam._m0[17u].y - _337)) * _481) + _337;
    float _487 = ((_465 * (cbMtdParam._m0[17u].z - _338)) * _481) + _338;
    float _492 = (((_356.z - _386) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _386;
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _275) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _276) + cbTextureTilingScale._m0[15u].w));
    float _512 = (_505.x * 2.0) + (-1.0);
    float _513 = (_505.y * 2.0) + (-1.0);
    float _514 = dot(vec2(_512, _513), vec2(_512, _513));
    float _3584 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _523 = (((_505.z - _492) * _465) * _481) + _492;
    float _538 = (((cbMtdParam._m0[21u].x * _402) + ((_512 - _402) * _465)) * _481) + _402;
    float _539 = (((cbMtdParam._m0[21u].x * _403) + ((_513 - _403) * _465)) * _481) + _403;
    float _540 = (((sqrt(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) - _397) * _465) * _481) + _397;
    float _542 = cbMtdParam._m0[22u].x + _382.w;
    float _545 = fma(_540, _223, fma(_539, _230, _538 * _216));
    float _548 = fma(_540, _224, fma(_539, _231, _538 * _217));
    float _551 = fma(_540, _225, fma(_539, _232, _538 * _218));
    float _555 = inversesqrt(dot(vec3(_545, _548, _551), vec3(_545, _548, _551)));
    float _556 = _555 * _545;
    float _557 = _555 * _548;
    float _558 = _555 * _551;
    float _3595 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _559 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3617 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3628 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3639 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _577 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _618 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _628 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _618);
    float _629 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _618);
    float _630 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _618);
    float _634 = inversesqrt(dot(vec3(_628, _629, _630), vec3(_628, _629, _630)));
    float _635 = _628 * _634;
    float _636 = _629 * _634;
    float _637 = _630 * _634;
    vec4 _642 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _644 = _642.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _801 = sqrt(((_628 * _628) + (_629 * _629)) + (_630 * _630));
        float _807 = (cbMatDynParam._m0[5u].x * _801) + cbMatDynParam._m0[5u].y;
        float _3650 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _812 = (cbMatDynParam._m0[5u].z * _801) + cbMatDynParam._m0[5u].w;
        float _3661 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) - _808)) + _808) < ((_644 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _656 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _657 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _677 = fma(_558, cbSceneParam._m0[5u].z, fma(_557, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _556));
    float _680 = fma(_558, cbSceneParam._m0[6u].z, fma(_557, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _556));
    float _683 = fma(_558, cbSceneParam._m0[7u].z, fma(_557, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _556));
    uint _696 = _256 + 9u;
    uint _697 = _696 + uint(cbMatDynParam._m0[0u].w);
    float _703 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_697].x;
    float _704 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_697].y;
    float _705 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_697].z;
    float _3672 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    vec4 _717 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _656, cbSceneParam._m0[86u].y * _657));
    float _721 = ((isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * TEXCOORD_5.w) * _717.x;
    float _722 = dot(vec3(_556, _557, _558), vec3(_635, _636, _637));
    float _725 = _722 * 2.0;
    float _729 = (_725 * _556) - _635;
    float _730 = (_725 * _557) - _636;
    float _731 = (_725 * _558) - _637;
    float _735 = abs(dot(vec3(_635, _636, _637), vec3(_556, _557, _558)));
    float _3705 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _737 = sqrt(_559);
    float _750 = exp2((_737 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_737 * 3.0));
    float _782 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _786 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _790 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1119;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _844 = fma(_790, cbModelParam._m0[26u].z, fma(_786, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _782));
        float _848 = fma(_790, cbModelParam._m0[27u].z, fma(_786, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _782));
        float _852 = fma(_790, cbModelParam._m0[28u].z, fma(_786, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _782));
        float _877 = _782 + _556;
        float _878 = _786 + _557;
        float _879 = _790 + _558;
        float _889 = fma(_879, cbModelParam._m0[26u].z, fma(_878, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _877)) - _844;
        float _890 = fma(_879, cbModelParam._m0[27u].z, fma(_878, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _877)) - _848;
        float _891 = fma(_879, cbModelParam._m0[28u].z, fma(_878, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _877)) - _852;
        float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
        float _908 = ((_895 * _889) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_844 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_895 * _890) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_848 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _910 = ((_895 * _891) / cbModelParam._m0[34u].z) + ((((((_852 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_908, _909, _910), 0.0);
        float _947 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_913.x + (-0.5));
        float _949 = _947 * (_913.y + (-0.5));
        float _950 = _947 * (_913.z + (-0.5));
        float _957 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_920.x + (-0.5));
        float _959 = _957 * (_920.y + (-0.5));
        float _960 = _957 * (_920.z + (-0.5));
        float _967 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_927.x + (-0.5));
        float _969 = _967 * (_927.y + (-0.5));
        float _970 = _967 * (_927.z + (-0.5));
        float _977 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_934.x + (-0.5));
        float _979 = _977 * (_934.y + (-0.5));
        float _980 = _977 * (_934.z + (-0.5));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = _948 * 0.5;
        float _985 = _958 * 0.5;
        float _986 = _968 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1001 = (dot(vec3(_556, _557, _558), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1011 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3753 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1013 + 1.0))) + _1018) * _981;
        float _1028 = _949 * 0.5;
        float _1029 = _959 * 0.5;
        float _1030 = _969 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_556, _557, _558), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3786 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1055 + 1.0))) + _1060) * _982;
        float _1070 = _950 * 0.5;
        float _1071 = _960 * 0.5;
        float _1072 = _970 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_556, _557, _558), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3819 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1097 + 1.0))) + _1102) * _983;
        _1119 = _950;
        _1121 = _949;
        _1122 = _948;
        _1123 = _960;
        _1124 = _959;
        _1125 = _958;
        _1126 = _970;
        _1127 = _969;
        _1128 = _968;
        _1129 = _983;
        _1130 = _982;
        _1131 = _981;
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
    }
    else
    {
        _1119 = _1120;
        _1121 = _1120;
        _1122 = _1120;
        _1123 = _1120;
        _1124 = _1120;
        _1125 = _1120;
        _1126 = _1120;
        _1127 = _1120;
        _1128 = _1120;
        _1129 = _1120;
        _1130 = _1120;
        _1131 = _1120;
        _1132 = 0.0;
        _1133 = 0.0;
        _1134 = 0.0;
    }
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1162 = fma(_790, cbModelParam._m0[30u].z, fma(_786, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _782));
        float _1166 = fma(_790, cbModelParam._m0[31u].z, fma(_786, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _782));
        float _1170 = fma(_790, cbModelParam._m0[32u].z, fma(_786, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _782));
        float _1193 = _782 + _556;
        float _1194 = _786 + _557;
        float _1195 = _790 + _558;
        float _1205 = fma(_1195, cbModelParam._m0[30u].z, fma(_1194, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193)) - _1162;
        float _1206 = fma(_1195, cbModelParam._m0[31u].z, fma(_1194, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193)) - _1166;
        float _1207 = fma(_1195, cbModelParam._m0[32u].z, fma(_1194, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193)) - _1170;
        float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
        float _1224 = ((_1211 * _1205) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1162 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1211 * _1206) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1166 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1226 = ((_1211 * _1207) / cbModelParam._m0[35u].z) + ((((((_1170 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1224, _1225, _1226), 0.0);
        float _1261 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1228.x + (-0.5));
        float _1263 = _1261 * (_1228.y + (-0.5));
        float _1264 = _1261 * (_1228.z + (-0.5));
        float _1271 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1235.x + (-0.5));
        float _1273 = _1271 * (_1235.y + (-0.5));
        float _1274 = _1271 * (_1235.z + (-0.5));
        float _1281 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1242.x + (-0.5));
        float _1283 = _1281 * (_1242.y + (-0.5));
        float _1284 = _1281 * (_1242.z + (-0.5));
        float _1291 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1249.x + (-0.5));
        float _1293 = _1291 * (_1249.y + (-0.5));
        float _1294 = _1291 * (_1249.z + (-0.5));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = _1262 * 0.5;
        float _1299 = _1272 * 0.5;
        float _1300 = _1282 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_556, _557, _558), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3882 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1325 + 1.0))) + _1330) * _1295;
        float _1340 = _1263 * 0.5;
        float _1341 = _1273 * 0.5;
        float _1342 = _1283 * 0.5;
        float _1343 = dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342));
        float _1348 = (_1343 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1343);
        float _1356 = (dot(vec3(_556, _557, _558), vec3(_1348 * _1340, _1348 * _1341, _1348 * _1342)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1365 = sqrt(((_1341 * _1341) + (_1340 * _1340)) + (_1342 * _1342)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1367 = _1366 * 2.0;
        float _1371 = (1.0 - _1366) / (_1366 + 1.0);
        float _3915 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1381 = ((((1.0 - _1372) * (_1367 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1367 + 1.0))) + _1372) * _1296;
        float _1382 = _1264 * 0.5;
        float _1383 = _1274 * 0.5;
        float _1384 = _1284 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1398 = (dot(vec3(_556, _557, _558), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1407 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1409 = _1408 * 2.0;
        float _1413 = (1.0 - _1408) / (_1408 + 1.0);
        float _3948 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1423 = ((((1.0 - _1414) * (_1409 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1409 + 1.0))) + _1414) * _1297;
        _1431 = _1264;
        _1432 = _1263;
        _1433 = _1262;
        _1434 = _1274;
        _1435 = _1273;
        _1436 = _1272;
        _1437 = _1284;
        _1438 = _1283;
        _1439 = _1282;
        _1440 = _1297;
        _1441 = _1296;
        _1442 = _1295;
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)));
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)));
    }
    else
    {
        _1431 = _1120;
        _1432 = _1120;
        _1433 = _1120;
        _1434 = _1120;
        _1435 = _1120;
        _1436 = _1120;
        _1437 = _1120;
        _1438 = _1120;
        _1439 = _1120;
        _1440 = _1120;
        _1441 = _1120;
        _1442 = _1120;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1132)) + _1132;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1133)) + _1133;
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1134)) + _1134;
    float _1478 = fma(_1457, cbSceneParam._m0[89u].z, fma(_1456, cbSceneParam._m0[89u].y, _1455 * cbSceneParam._m0[89u].x));
    float _1481 = fma(_1457, cbSceneParam._m0[90u].z, fma(_1456, cbSceneParam._m0[90u].y, _1455 * cbSceneParam._m0[90u].x));
    float _1484 = fma(_1457, cbSceneParam._m0[91u].z, fma(_1456, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1455));
    float _1499 = _729 * 0.5;
    float _1500 = _730 * 0.5;
    float _1501 = _731 * 0.5;
    float _1502 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1505 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1508 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1542;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1515 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1119, _1123, _1126, _1129));
        float _1519 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1523 = dot(vec4(_1499, _1500, _1501, 1.0), vec4(_1122, _1125, _1128, _1131));
        float _1530 = dot(vec4(cbModelParam._m0[39u]), vec4(_1499, _1500, _1501, 1.0));
        _1542 = dot(vec3(isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1542 = 1.0;
    }
    float _1553;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1544 = dot(vec4(cbModelParam._m0[40u]), vec4(_1499, _1500, _1501, 1.0));
        _1553 = dot(vec3(isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1544) ? 0.0 : (isnan(0.0) ? _1544 : max(0.0, _1544))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1553 = 1.0;
    }
    float _1557 = (_1553 * cbModelParam._m0[1u].x) + (_1542 * (1.0 - cbModelParam._m0[1u].x));
    float _1567 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _559);
    float _1568 = isnan(_1567) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1567 : min(cbModelParam._m0[25u].z, _1567));
    float _1649;
    float _1651;
    float _1653;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1616 = fma(_790, cbModelParam._m0[13u].z, fma(_786, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _782)) + cbModelParam._m0[13u].w;
        float _1620 = fma(_790, cbModelParam._m0[14u].z, fma(_786, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _782)) + cbModelParam._m0[14u].w;
        float _1624 = fma(_790, cbModelParam._m0[15u].z, fma(_786, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _782)) + cbModelParam._m0[15u].w;
        float _1627 = fma(_731, cbModelParam._m0[13u].z, fma(_730, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729));
        float _1630 = fma(_731, cbModelParam._m0[14u].z, fma(_730, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729));
        float _1633 = fma(_731, cbModelParam._m0[15u].z, fma(_730, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729));
        float _1661;
        if (_1627 > 0.0)
        {
            _1661 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1661 = frontier_phi_17_15_ladder;
        }
        float _1885;
        if (_1630 > 0.0)
        {
            _1885 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1885 = frontier_phi_26_22_ladder;
        }
        float _2131;
        if (_1633 > 0.0)
        {
            _2131 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2131 = frontier_phi_38_33_ladder;
        }
        float _2133 = isnan(_1885) ? _1661 : (isnan(_1661) ? _1885 : min(_1661, _1885));
        float _2134 = isnan(_2131) ? _2133 : (isnan(_2133) ? _2131 : min(_2133, _2131));
        float _2138 = (_2134 * _1627) + _1616;
        float _2139 = (_2134 * _1630) + _1620;
        float _2140 = (_2134 * _1633) + _1624;
        float _2141 = _2134 * 9.9999997473787516355514526367188e-05;
        float _2143 = (-1.0) - _2141;
        float _2145 = _2141 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2140 > _2145) || ((_2140 < _2143) || ((_2139 > _2145) || ((_2139 < _2143) || ((_2138 < _2143) || (_2138 > _2145))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2264 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2140, cbModelParam._m0[9u].z, fma(_2139, cbModelParam._m0[9u].y, _2138 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2140, cbModelParam._m0[10u].z, fma(_2139, cbModelParam._m0[10u].y, _2138 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2140, cbModelParam._m0[11u].z, fma(_2139, cbModelParam._m0[11u].y, _2138 * cbModelParam._m0[11u].x))), _1568);
            frontier_phi_16_38_ladder = _2264.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2264.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2264.x * cbModelParam._m0[1u].y;
        }
        _1649 = frontier_phi_16_38_ladder_2;
        _1651 = frontier_phi_16_38_ladder_1;
        _1653 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1637 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_729, _730, _731), _1568);
        _1649 = _1637.x * cbModelParam._m0[1u].y;
        _1651 = _1637.y * cbModelParam._m0[1u].y;
        _1653 = _1637.z * cbModelParam._m0[1u].y;
    }
    float _1657 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _559);
    float _1658 = isnan(_1657) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1657 : min(cbModelParam._m0[25u].w, _1657));
    float _1748;
    float _1750;
    float _1752;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1712 = fma(_790, cbModelParam._m0[21u].z, fma(_786, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _782)) + cbModelParam._m0[21u].w;
        float _1716 = fma(_790, cbModelParam._m0[22u].z, fma(_786, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _782)) + cbModelParam._m0[22u].w;
        float _1720 = fma(_790, cbModelParam._m0[23u].z, fma(_786, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _782)) + cbModelParam._m0[23u].w;
        float _1723 = fma(_731, cbModelParam._m0[21u].z, fma(_730, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729));
        float _1726 = fma(_731, cbModelParam._m0[22u].z, fma(_730, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729));
        float _1729 = fma(_731, cbModelParam._m0[23u].z, fma(_730, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729));
        float _1890;
        if (_1723 > 0.0)
        {
            _1890 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1890 = frontier_phi_28_24_ladder;
        }
        float _2158;
        if (_1726 > 0.0)
        {
            _2158 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2158 = frontier_phi_40_35_ladder;
        }
        float _2363;
        if (_1729 > 0.0)
        {
            _2363 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2363 = frontier_phi_49_46_ladder;
        }
        float _2365 = isnan(_2158) ? _1890 : (isnan(_1890) ? _2158 : min(_1890, _2158));
        float _2366 = isnan(_2363) ? _2365 : (isnan(_2365) ? _2363 : min(_2365, _2363));
        float _2370 = (_2366 * _1723) + _1712;
        float _2371 = (_2366 * _1726) + _1716;
        float _2372 = (_2366 * _1729) + _1720;
        float _2373 = _2366 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2373;
        float _2376 = _2373 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2372 > _2376) || ((_2372 < _2374) || ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 < _2374) || (_2370 > _2376))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2571 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2372, cbModelParam._m0[17u].z, fma(_2371, cbModelParam._m0[17u].y, _2370 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2372, cbModelParam._m0[18u].z, fma(_2371, cbModelParam._m0[18u].y, _2370 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2372, cbModelParam._m0[19u].z, fma(_2371, cbModelParam._m0[19u].y, _2370 * cbModelParam._m0[19u].x))), _1658);
            frontier_phi_25_49_ladder = _2571.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2571.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2571.x * cbModelParam._m0[1u].z;
        }
        _1748 = frontier_phi_25_49_ladder_2;
        _1750 = frontier_phi_25_49_ladder_1;
        _1752 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_729, _730, _731), _1658);
        _1748 = _1732.x * cbModelParam._m0[1u].z;
        _1750 = _1732.y * cbModelParam._m0[1u].z;
        _1752 = _1732.z * cbModelParam._m0[1u].z;
    }
    float _1764 = ((((1.0 - _750) * ((_737 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_750 * _737)) * _721;
    float _1765 = _1764 * ((cbModelParam._m0[1u].w * (_1748 - _1649)) + _1649);
    float _1766 = _1764 * ((cbModelParam._m0[1u].w * (_1750 - _1651)) + _1651);
    float _1767 = _1764 * ((cbModelParam._m0[1u].w * (_1752 - _1653)) + _1653);
    float _1770 = fma(_1767, cbSceneParam._m0[89u].z, fma(_1766, cbSceneParam._m0[89u].y, _1765 * cbSceneParam._m0[89u].x));
    float _1773 = fma(_1767, cbSceneParam._m0[90u].z, fma(_1766, cbSceneParam._m0[90u].y, _1765 * cbSceneParam._m0[90u].x));
    float _1776 = fma(_1767, cbSceneParam._m0[91u].z, fma(_1766, cbSceneParam._m0[91u].y, _1765 * cbSceneParam._m0[91u].x));
    vec4 _1784 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_656, _657));
    float _1786 = _1784.w;
    float _1798 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1786);
    float _1799 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1786);
    float _1800 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1786);
    uvec4 _1804 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _1806 = _1804.x * 14u;
    uint _1807 = _1806 + 13u;
    float _1814 = _721 + (-1.0);
    float _1819 = (cbLight._m0[_1807].x * _1814) + 1.0;
    float _1820 = (cbLight._m0[_1807].y * _1814) + 1.0;
    float _1821 = (cbLight._m0[_1807].z * _1814) + 1.0;
    float _1822 = (cbLight._m0[_1807].w * _1814) + 1.0;
    uint _1823 = _1806 + 5u;
    float _1829 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    uint _1833 = _1806 + 4u;
    float _1843 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1847 = _1806 | 1u;
    float _1858 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_556, _557, _558));
    float _1861 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_556, _557, _558));
    float _4084 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _4095 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1866 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.3183098733425140380859375;
    float _1868 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * 0.3183098733425140380859375;
    float _1875 = ((cbLight._m0[_1823].x * _1829) * _1868) + (((cbLight._m0[_1833].x * _1798) * _1843) * _1866);
    float _1876 = ((_1829 * cbLight._m0[_1823].y) * _1868) + (((cbLight._m0[_1833].y * _1799) * _1843) * _1866);
    float _1877 = ((_1829 * cbLight._m0[_1823].z) * _1868) + (((cbLight._m0[_1833].z * _1800) * _1843) * _1866);
    uvec4 _1882 = floatBitsToUint(cbLight._m0[_1806 + 12u]);
    bool _1884 = _1882.x == 0u;
    float _1895;
    float _1897;
    float _1899;
    if (_1884)
    {
        _1895 = _1875;
        _1897 = _1876;
        _1899 = _1877;
    }
    else
    {
        uint _1903 = _1806 + 6u;
        float _1919 = (dot(vec3(cbLight._m0[_1806 + 2u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _1920 = _1919 * _1919;
        float _4106 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1921 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1922 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _1895 = (((cbLight._m0[_1903].x * 0.3183098733425140380859375) * _1921) * _1922) + _1875;
        _1897 = (((cbLight._m0[_1903].y * 0.3183098733425140380859375) * _1921) * _1922) + _1876;
        _1899 = (((cbLight._m0[_1903].z * 0.3183098733425140380859375) * _1921) * _1922) + _1877;
    }
    bool _1902 = _1882.y == 0u;
    float _1940;
    float _1942;
    float _1944;
    if (_1902)
    {
        _1940 = _1895;
        _1942 = _1897;
        _1944 = _1899;
    }
    else
    {
        uint _2102 = _1806 + 7u;
        float _2118 = (dot(vec3(cbLight._m0[_1806 + 3u].xyz), vec3(_556, _557, _558)) * 0.5) + 0.5;
        float _2119 = _2118 * _2118;
        float _4122 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2120 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _2121 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _1940 = (((cbLight._m0[_2102].x * 0.3183098733425140380859375) * _2120) * _2121) + _1895;
        _1942 = (((cbLight._m0[_2102].y * 0.3183098733425140380859375) * _2120) * _2121) + _1897;
        _1944 = (((cbLight._m0[_2102].z * 0.3183098733425140380859375) * _2120) * _2121) + _1899;
    }
    uint _1947 = _1806 + 8u;
    float _1960 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _559) * 0.949999988079071044921875);
    float _1961 = _1960 * _1960;
    float _1962 = cbLight._m0[_1806].x + _635;
    float _1963 = cbLight._m0[_1806].y + _636;
    float _1964 = cbLight._m0[_1806].z + _637;
    float _1968 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
    float _1969 = _1968 * _1962;
    float _1970 = _1968 * _1963;
    float _1971 = _1968 * _1964;
    float _1972 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_1806].xyz));
    float _4138 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _4149 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _1976 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _1977 = dot(vec3(_556, _557, _558), vec3(_1969, _1970, _1971));
    float _4160 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _1981 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_1969, _1970, _1971));
    float _4171 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1985 = _1961 * _1961;
    float _1989 = ((_1980 * _1980) * (_1985 + (-1.0))) + 1.0;
    float _2000 = (exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2001 = 1.0 - _1961;
    float _2012 = (0.5 / (((_1976 * ((_1975 * _2001) + _1961)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2001) + _1961) * _1975))) * _1975;
    float _4182 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2014 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_1985 / ((_1989 * _1989) * 3.141590118408203125));
    uint _2028 = _1806 + 9u;
    float _2039 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1847].w)) * _559) * 0.949999988079071044921875);
    float _2040 = _2039 * _2039;
    float _2041 = cbLight._m0[_1847].x + _635;
    float _2042 = cbLight._m0[_1847].y + _636;
    float _2043 = cbLight._m0[_1847].z + _637;
    float _2047 = inversesqrt(dot(vec3(_2041, _2042, _2043), vec3(_2041, _2042, _2043)));
    float _2048 = _2047 * _2041;
    float _2049 = _2047 * _2042;
    float _2050 = _2047 * _2043;
    float _2051 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_1847].xyz));
    float _4193 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2054 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2055 = dot(vec3(_556, _557, _558), vec3(_2048, _2049, _2050));
    float _4204 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_2048, _2049, _2050));
    float _4215 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2040 * _2040;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2076 = (exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2077 = 1.0 - _2040;
    float _2087 = (0.5 / (((_1976 * ((_2054 * _2077) + _2040)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2077) + _2040) * _2054))) * _2054;
    float _4226 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2089 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    float _2099 = (((_2076 * cbLight._m0[_2028].x) * _2089) * _1829) + ((((cbLight._m0[_1947].x * _1798) * _2000) * _2014) * _1843);
    float _2100 = (((_2076 * cbLight._m0[_2028].y) * _2089) * _1829) + ((((cbLight._m0[_1947].y * _1799) * _2000) * _2014) * _1843);
    float _2101 = (((_2076 * cbLight._m0[_2028].z) * _2089) * _1829) + ((((cbLight._m0[_1947].z * _1800) * _2000) * _2014) * _1843);
    float _2163;
    float _2165;
    float _2167;
    if (_1884)
    {
        _2163 = _2099;
        _2165 = _2100;
        _2167 = _2101;
    }
    else
    {
        uint _2169 = _1806 + 2u;
        uint _2173 = _1806 + 10u;
        float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2169].w)) * _559) * 0.949999988079071044921875);
        float _2188 = _2187 * _2187;
        float _2189 = cbLight._m0[_2169].x + _635;
        float _2190 = cbLight._m0[_2169].y + _636;
        float _2191 = cbLight._m0[_2169].z + _637;
        float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
        float _2196 = _2195 * _2189;
        float _2197 = _2195 * _2190;
        float _2198 = _2195 * _2191;
        float _2199 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2169].xyz));
        float _4237 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2202 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2203 = dot(vec3(_556, _557, _558), vec3(_2196, _2197, _2198));
        float _4248 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2206 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2207 = dot(vec3(cbLight._m0[_2169].xyz), vec3(_2196, _2197, _2198));
        float _4259 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2211 = _2188 * _2188;
        float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
        float _2224 = (exp2(log2(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2225 = 1.0 - _2188;
        float _2235 = (0.5 / (((_1976 * ((_2202 * _2225) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2225) + _2188) * _2202))) * _2202;
        float _4270 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2237 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
        float _2238 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
        _2163 = (((_2224 * cbLight._m0[_2173].x) * _2237) * _2238) + _2099;
        _2165 = (((_2224 * cbLight._m0[_2173].y) * _2237) * _2238) + _2100;
        _2167 = (((_2224 * cbLight._m0[_2173].z) * _2237) * _2238) + _2101;
    }
    float _2273;
    float _2275;
    float _2277;
    if (_1902)
    {
        _2273 = _2163;
        _2275 = _2165;
        _2277 = _2167;
    }
    else
    {
        uint _2284 = _1806 + 3u;
        uint _2288 = _1806 + 11u;
        float _2302 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _559) * 0.949999988079071044921875);
        float _2303 = _2302 * _2302;
        float _2304 = cbLight._m0[_2284].x + _635;
        float _2305 = cbLight._m0[_2284].y + _636;
        float _2306 = cbLight._m0[_2284].z + _637;
        float _2310 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
        float _2311 = _2310 * _2304;
        float _2312 = _2310 * _2305;
        float _2313 = _2310 * _2306;
        float _2314 = dot(vec3(_556, _557, _558), vec3(cbLight._m0[_2284].xyz));
        float _4286 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2317 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2318 = dot(vec3(_556, _557, _558), vec3(_2311, _2312, _2313));
        float _4297 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2321 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2322 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2311, _2312, _2313));
        float _4308 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2326 = _2303 * _2303;
        float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
        float _2339 = (exp2(log2(1.0 - (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2340 = 1.0 - _2303;
        float _2350 = (0.5 / (((_1976 * ((_2317 * _2340) + _2303)) + 9.9999999392252902907785028219223e-09) + (((_1976 * _2340) + _2303) * _2317))) * _2317;
        float _4319 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2352 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
        float _2353 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2273 = (((_2339 * cbLight._m0[_2288].x) * _2352) * _2353) + _2163;
        _2275 = (((_2339 * cbLight._m0[_2288].y) * _2352) * _2353) + _2165;
        _2277 = (((_2339 * cbLight._m0[_2288].z) * _2352) * _2353) + _2167;
    }
    float _2488;
    float _2490;
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    if (_1804.y == 0u)
    {
        float _2428 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2428;
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2428;
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2428;
        uvec4 _2443 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2444 = _2443.x;
        uint _2455 = uint((float(_2443.y) * floor(float(uint(cbSceneParam._m0[85u].y * _657) / _2444))) + floor(float(uint(cbSceneParam._m0[85u].x * _656) / _2444)));
        float _2465 = (log2(_2431 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2466 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        uint _2469 = uint(isnan(14.0) ? _2466 : (isnan(_2466) ? 14.0 : min(_2466, 14.0)));
        uvec4 _2474 = texelFetch(g_lightClusterGridBuffer, int(((_2469 << 2u) + (_2455 << 6u)) >> 2u));
        uint _2475 = _2474.x;
        uint _2476 = _2443.z;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        if (((((1u << ((_2476 >> 4u) & 15u)) + 4294967295u) & _2475) == 0u) || ((_2476 & 240u) == 0u))
        {
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
        }
        else
        {
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2729 = 0.0;
            float _2730 = 0.0;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            uint _2735 = 0u;
            uint _2744;
            bool _2745;
            for (;;)
            {
                _2744 = texelFetch(g_lightClassification, int((((_2469 << 5u) + (_2455 << 9u)) + (_2735 << 2u)) >> 2u)).x;
                _2745 = _2744 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2745)
                {
                    frontier_phi_66_pred = _2729;
                    frontier_phi_66_pred_1 = _2734;
                    frontier_phi_66_pred_2 = _2733;
                    frontier_phi_66_pred_3 = _2732;
                    frontier_phi_66_pred_4 = _2731;
                    frontier_phi_66_pred_5 = _2730;
                }
                else
                {
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    uint _2880;
                    _2874 = _2729;
                    _2875 = _2730;
                    _2876 = _2731;
                    _2877 = _2732;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2744;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    for (;;)
                    {
                        uint _2884 = uint(findLSB(_2880)) + (_2735 << 5u);
                        uint _2881 = (_2880 + 4294967295u) & _2880;
                        uint _2886 = _2884 * 48u;
                        vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2886)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2886 + 3u)).x));
                        uint _2906 = (_2884 * 48u) + 4u;
                        vec4 _2919 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2906)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2906 + 3u)).x));
                        uint _2925 = (_2884 * 48u) + 8u;
                        vec3 _2936 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x));
                        float _2940 = _2900.x - _2429;
                        float _2941 = _2900.y - _2430;
                        float _2942 = _2900.z - _2431;
                        float _2943 = dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942));
                        float _2946 = inversesqrt(_2943);
                        float _2947 = _2946 * _2940;
                        float _2948 = _2946 * _2941;
                        float _2949 = _2946 * _2942;
                        float _2950 = dot(vec3(_677, _680, _683), vec3(_2947, _2948, _2949));
                        float _2955 = 1.0 - (_2943 * _2900.w);
                        float _4345 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2956 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _2957 = sqrt(_2943) * _2919.w;
                        float _2960 = 1.39999997615814208984375 / (_2957 + 1.39999997615814208984375);
                        float _2961 = _2960 * _2960;
                        float _2964 = ((1.0 - _2961) * _2950) + _2961;
                        float _2967 = _2957 * _2957;
                        float _2971 = ((isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0))) * _2956) / ((_2967 * 0.699999988079071044921875) + 1.0);
                        float _2975 = (-0.0) - _2429;
                        float _2976 = (-0.0) - _2430;
                        float _2977 = (-0.0) - _2431;
                        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
                        float _2982 = _2981 * _2975;
                        float _2983 = _2981 * _2976;
                        float _2984 = _2981 * _2977;
                        float _2992 = exp2(log2(1.0 / ((_2967 * 3.5) + 5.0)) * 0.25);
                        float _2993 = 1.0 - _737;
                        float _3000 = sqrt(1.0 - ((1.0 - (_2993 * _2993)) * (1.0 - (_2992 * _2992))));
                        float _3001 = _3000 * _3000;
                        float _3002 = _3001 * _3001;
                        float _3003 = _2982 + _2947;
                        float _3004 = _2983 + _2948;
                        float _3005 = _2984 + _2949;
                        float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
                        float _3013 = dot(vec3(_677, _680, _683), vec3(_2982, _2983, _2984));
                        float _4361 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3016 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3017 = dot(vec3(_677, _680, _683), vec3(_3009 * _3003, _3009 * _3004, _3009 * _3005));
                        float _4372 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3020 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3024 = ((_3020 * _3020) * (_3002 + (-1.0))) + 1.0;
                        float _3025 = _2960 * _3001;
                        float _3026 = _3025 * _3025;
                        float _3029 = ((1.0 - _3026) * _2950) + _3026;
                        float _4383 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3030 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3031 = 1.0 - _3001;
                        float _3041 = (0.5 / (((_3030 * ((_3016 * _3031) + _3001)) + 9.9999999392252902907785028219223e-09) + (((_3030 * _3031) + _3001) * _3016))) * _3030;
                        float _4394 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3052 = (((_3002 * 3.1415927410125732421875) * (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0)))) / ((_3024 * _3024) * ((_2967 * 2.1991131305694580078125) + 3.141590118408203125))) * _2956;
                        _2804 = (_2971 * _2919.x) + _2877;
                        _2805 = (_2971 * _2919.y) + _2878;
                        _2806 = (_2971 * _2919.z) + _2879;
                        _2801 = (_3052 * _2936.x) + _2874;
                        _2802 = (_3052 * _2936.y) + _2875;
                        _2803 = (_3052 * _2936.z) + _2876;
                        if (_2881 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2874 = _2801;
                            _2875 = _2802;
                            _2876 = _2803;
                            _2877 = _2804;
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2881;
                        }
                    }
                    frontier_phi_66_pred = _2801;
                    frontier_phi_66_pred_1 = _2806;
                    frontier_phi_66_pred_2 = _2805;
                    frontier_phi_66_pred_3 = _2804;
                    frontier_phi_66_pred_4 = _2803;
                    frontier_phi_66_pred_5 = _2802;
                }
                _2577 = frontier_phi_66_pred;
                _2587 = frontier_phi_66_pred_1;
                _2585 = frontier_phi_66_pred_2;
                _2583 = frontier_phi_66_pred_3;
                _2581 = frontier_phi_66_pred_4;
                _2579 = frontier_phi_66_pred_5;
                uint _2736 = _2735 + 1u;
                if (_2736 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2729 = _2577;
                    _2730 = _2579;
                    _2731 = _2581;
                    _2732 = _2583;
                    _2733 = _2585;
                    _2734 = _2587;
                    _2735 = _2736;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
        }
        uvec4 _2590 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2591 = _2590.z;
        uint _2593 = (_2591 >> 8u) & 15u;
        float _2697;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        if (((4294967295u << _2593) & _2475) == 0u)
        {
            _2697 = _2576;
            _2699 = _2578;
            _2701 = _2580;
            _2703 = _2582;
            _2705 = _2584;
            _2707 = _2586;
        }
        else
        {
            float _2722 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
            float _2723 = _2722 * _2429;
            float _2724 = _2722 * _2430;
            float _2725 = _2722 * _2431;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2593 < ((_2591 >> 12u) & 15u))
            {
                float _2698;
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2857 = _2576;
                float _2858 = _2578;
                float _2859 = _2580;
                float _2860 = _2582;
                float _2861 = _2584;
                float _2862 = _2586;
                uint _2863 = _2593;
                uint _2872;
                bool _2873;
                for (;;)
                {
                    _2872 = texelFetch(g_lightClassification, int((((_2469 << 5u) + (_2455 << 9u)) + (_2863 << 2u)) >> 2u)).x;
                    _2873 = _2872 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2873)
                    {
                        frontier_phi_77_pred = _2862;
                        frontier_phi_77_pred_1 = _2861;
                        frontier_phi_77_pred_2 = _2860;
                        frontier_phi_77_pred_3 = _2859;
                        frontier_phi_77_pred_4 = _2858;
                        frontier_phi_77_pred_5 = _2857;
                    }
                    else
                    {
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3079 = _2857;
                        float _3080 = _2858;
                        float _3081 = _2859;
                        float _3082 = _2860;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        uint _3085 = _2872;
                        uint _3086;
                        vec4 _3111;
                        float _3112;
                        vec4 _3127;
                        vec3 _3139;
                        vec4 _3154;
                        vec4 _3169;
                        float _3215;
                        bool _3216;
                        for (;;)
                        {
                            uint _3096 = ((_2863 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3085));
                            _3086 = (_3085 + 4294967295u) & _3085;
                            uint _3098 = _3096 * 40u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            _3112 = _3111.w;
                            uint _3114 = (_3096 * 40u) + 4u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3129 = (_3096 * 40u) + 8u;
                            _3139 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x));
                            uint _3141 = (_3096 * 40u) + 16u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3156 = (_3096 * 40u) + 20u;
                            _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3171 = (_3096 * 40u) + 24u;
                            vec4 _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3190 = (_3096 * 40u) + 28u;
                            vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3215 = fma(_2431, _3203.z, fma(_2430, _3203.y, _3203.x * _2429)) + _3203.w;
                            _3216 = !((fma(_2431, _3184.z, fma(_2430, _3184.y, _3184.x * _2429)) + _3184.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3216)
                            {
                                float _3243 = _3111.x - _2429;
                                float _3244 = _3111.y - _2430;
                                float _3245 = _3111.z - _2431;
                                float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                                float _3249 = inversesqrt(_3246);
                                float _3250 = _3249 * _3243;
                                float _3251 = _3249 * _3244;
                                float _3252 = _3249 * _3245;
                                float _3256 = 1.0 - (_3246 / (_3112 * _3112));
                                float _4405 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3261 = sqrt(_3246) * _3127.w;
                                float _3263 = 1.39999997615814208984375 / (_3261 + 1.39999997615814208984375);
                                float _3264 = _3263 * _3263;
                                float _3267 = ((1.0 - _3264) * dot(vec3(_3250, _3251, _3252), vec3(_677, _680, _683))) + _3264;
                                float _3270 = _3261 * _3261;
                                float _3274 = (fma(_2431, _3154.z, fma(_2430, _3154.y, _3154.x * _2429)) + _3154.w) / _3215;
                                float _3275 = (fma(_2431, _3169.z, fma(_2430, _3169.y, _3169.x * _2429)) + _3169.w) / _3215;
                                float _3279 = 1.0 - dot(vec2(_3274, _3275), vec2(_3274, _3275));
                                float _4421 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3280 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3281 = _3280 * (((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3257) / ((_3270 * 0.699999988079071044921875) + 1.0));
                                float _3293 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                                float _3294 = 1.0 - _737;
                                float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                                float _3302 = _3301 * _3301;
                                float _3303 = _3302 * _3302;
                                float _3304 = _3250 - _2723;
                                float _3305 = _3251 - _2724;
                                float _3306 = _3252 - _2725;
                                float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                                float _3314 = dot(vec3(_677, _680, _683), vec3((-0.0) - _2723, (-0.0) - _2724, (-0.0) - _2725));
                                float _4432 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                                float _3317 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3318 = dot(vec3(_677, _680, _683), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                                float _4443 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3321 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                                float _3326 = _3263 * _3302;
                                float _3327 = _3326 * _3326;
                                float _3333 = ((1.0 - _3327) * dot(vec3(_677, _680, _683), vec3(_3250, _3251, _3252))) + _3327;
                                float _4454 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3335 = 1.0 - _3302;
                                float _3345 = (0.5 / (((_3334 * ((_3317 * _3335) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3334 * _3335) + _3302) * _3317))) * _3334;
                                float _4465 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3355 = (_3280 * _3257) * (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) / ((_3325 * _3325) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3281 * _3127.y;
                                frontier_phi_83_pred_1 = _3281 * _3127.x;
                                frontier_phi_83_pred_2 = _3355 * _3139.z;
                                frontier_phi_83_pred_3 = _3355 * _3139.y;
                                frontier_phi_83_pred_4 = _3355 * _3139.x;
                                frontier_phi_83_pred_5 = _3281 * _3127.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3363 = frontier_phi_83_pred;
                            _3362 = frontier_phi_83_pred_1;
                            _3361 = frontier_phi_83_pred_2;
                            _3360 = frontier_phi_83_pred_3;
                            _3359 = frontier_phi_83_pred_4;
                            _3364 = frontier_phi_83_pred_5;
                            _3069 = _3362 + _3082;
                            _3070 = _3363 + _3083;
                            _3071 = _3364 + _3084;
                            _3066 = _3359 + _3079;
                            _3067 = _3360 + _3080;
                            _3068 = _3361 + _3081;
                            if (_3086 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3079 = _3066;
                                _3080 = _3067;
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3086;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3071;
                        frontier_phi_77_pred_1 = _3070;
                        frontier_phi_77_pred_2 = _3069;
                        frontier_phi_77_pred_3 = _3068;
                        frontier_phi_77_pred_4 = _3067;
                        frontier_phi_77_pred_5 = _3066;
                    }
                    _2708 = frontier_phi_77_pred;
                    _2706 = frontier_phi_77_pred_1;
                    _2704 = frontier_phi_77_pred_2;
                    _2702 = frontier_phi_77_pred_3;
                    _2700 = frontier_phi_77_pred_4;
                    _2698 = frontier_phi_77_pred_5;
                    uint _2864 = _2863 + 1u;
                    if (_2864 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2857 = _2698;
                        _2858 = _2700;
                        _2859 = _2702;
                        _2860 = _2704;
                        _2861 = _2706;
                        _2862 = _2708;
                        _2863 = _2864;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2702;
                frontier_phi_58_59_ladder_1 = _2708;
                frontier_phi_58_59_ladder_2 = _2706;
                frontier_phi_58_59_ladder_3 = _2704;
                frontier_phi_58_59_ladder_4 = _2700;
                frontier_phi_58_59_ladder_5 = _2698;
            }
            else
            {
                frontier_phi_58_59_ladder = _2580;
                frontier_phi_58_59_ladder_1 = _2586;
                frontier_phi_58_59_ladder_2 = _2584;
                frontier_phi_58_59_ladder_3 = _2582;
                frontier_phi_58_59_ladder_4 = _2578;
                frontier_phi_58_59_ladder_5 = _2576;
            }
            _2697 = frontier_phi_58_59_ladder_5;
            _2699 = frontier_phi_58_59_ladder_4;
            _2701 = frontier_phi_58_59_ladder;
            _2703 = frontier_phi_58_59_ladder_3;
            _2705 = frontier_phi_58_59_ladder_2;
            _2707 = frontier_phi_58_59_ladder_1;
        }
        float _2712 = isnan(1.0) ? _721 : (isnan(_721) ? 1.0 : min(_721, 1.0));
        _2488 = (_2712 * _2703) + _1940;
        _2490 = (_2712 * _2705) + _1942;
        _2492 = (_2712 * _2707) + _1944;
        _2494 = ((_2697 * 0.039999999105930328369140625) * _2712) + _2273;
        _2496 = ((_2699 * 0.039999999105930328369140625) * _2712) + _2275;
        _2498 = ((_2701 * 0.039999999105930328369140625) * _2712) + _2277;
    }
    else
    {
        _2488 = _1940;
        _2490 = _1942;
        _2492 = _1944;
        _2494 = _2273;
        _2496 = _2275;
        _2498 = _2277;
    }
    float _4481 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4492 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4503 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _2515 = ((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2488 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _721))) + ((_2494 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1557)) * cbPerFrame._m0[3u].x);
    float _2516 = ((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2490 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _721))) + ((_2496 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1557)) * cbPerFrame._m0[3u].x);
    float _2517 = ((isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2492 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _721))) + ((_2498 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1557)) * cbPerFrame._m0[3u].x);
    uint _2518 = _256 + 6u;
    float _2526 = _656 / cbSceneParam._m0[86u].x;
    float _2527 = _657 / cbSceneParam._m0[86u].y;
    vec4 _2541 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2526, _2527, (log2((isnan(cbSceneParam._m0[77u].w) ? _577 : (isnan(_577) ? cbSceneParam._m0[77u].w : min(_577, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2543 = _2541.x;
    float _2544 = _2541.y;
    float _2545 = _2541.z;
    float _2546 = _2541.w;
    float _2639;
    float _2641;
    float _2643;
    float _2645;
    if (_577 > cbSceneParam._m0[78u].w)
    {
        float _2601 = isnan(_577) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _577 : min(cbSceneParam._m0[80u].w, _577));
        float _2602 = _2601 / _577;
        float _2613 = _2602 * _628;
        float _2614 = _629 * _2602;
        float _2615 = (-0.0) - _2614;
        float _2617 = _2602 * _630;
        float _2619 = (cbSceneParam._m0[77u].w * _2615) / _2601;
        float _2620 = _2619 + cbSceneParam._m0[79u].w;
        float _2621 = cbSceneParam._m0[79u].w - _2614;
        float _2627 = sqrt(((_2613 * _2613) + (_2614 * _2614)) + (_2617 * _2617));
        float _2630 = (1.0 - (cbSceneParam._m0[77u].w / _2601)) * _2627;
        float _2635 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2637 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2814;
        if (abs((_2615 - _2619) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2814 = ((((_2620 > 0.0) ? exp2(_2635 * _2620) : (2.0 - exp2(_2637 * _2620))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2630;
        }
        else
        {
            float _2758 = 1.0 / cbSceneParam._m0[80u].x;
            float _2759 = isnan(_2621) ? _2620 : (isnan(_2620) ? _2621 : max(_2620, _2621));
            float _2760 = isnan(_2621) ? _2620 : (isnan(_2620) ? _2621 : min(_2620, _2621));
            float _2769 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : min(_2759, 0.0));
            float _2770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : min(_2760, 0.0));
            _2814 = ((abs(_2627 / _2615) * cbSceneParam._m0[80u].y) * ((((_2769 - _2770) * 2.0) - ((exp2(_2635 * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0)))) - exp2(_2635 * (isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0))))) * _2758)) - ((exp2(_2637 * _2769) - exp2(_2637 * _2770)) * _2758))) + (_2630 * cbSceneParam._m0[80u].z);
        }
        vec4 _2816 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2526, _2527, 1.0), 0.0);
        float _2825 = exp2((_2814 * (-1.44269502162933349609375)) * (1.0 - _2816.w));
        float _2826 = log2(_2825);
        float _2842 = log2(_2546);
        _2639 = (exp2(_2842 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].x)) * _2816.x) / cbSceneParam._m0[78u].x)) + _2543;
        _2641 = (exp2(_2842 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].y)) * _2816.y) / cbSceneParam._m0[78u].y)) + _2544;
        _2643 = (exp2(_2842 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2826 * cbSceneParam._m0[78u].z)) * _2816.z) / cbSceneParam._m0[78u].z)) + _2545;
        _2645 = _2825 * _2546;
    }
    else
    {
        _2639 = _2543;
        _2641 = _2544;
        _2643 = _2545;
        _2645 = _2546;
    }
    bool _2852;
    vec4 _2655;
    vec4 _2677;
    float _2679;
    float _2683;
    float _2684;
    float _2685;
    float _2686;
    bool _2696;
    for (;;)
    {
        _2655 = cbMatDynParam._m0[0u];
        float _2657 = roundEven(_2655.y);
        bool _2658 = _2657 == 3.0;
        float _2659 = log2(_2645);
        float _2666 = exp2(_2659 * cbSceneParam._m0[78u].x) * _2515;
        float _2667 = exp2(_2659 * cbSceneParam._m0[78u].y) * _2516;
        float _2668 = exp2(_2659 * cbSceneParam._m0[78u].z) * _2517;
        float _2675 = _644 + (-0.5);
        _2677 = cbMtdParam._m0[1u];
        _2679 = _2677.y * _2675;
        float _2682 = (_2657 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2683 = _2682 * (_2658 ? _2666 : (_2666 + (cbSceneParam._m0[72u].w * _2639)));
        _2684 = _2682 * (_2658 ? _2667 : (_2667 + (cbSceneParam._m0[72u].w * _2641)));
        _2685 = _2682 * (_2658 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2643)));
        _2686 = _2675 * 0.999000012874603271484375;
        _2696 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2696)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _2686) < 0.5)
            {
                _2852 = true;
                break;
            }
        }
        uint _2793 = _696 + uint(_2655.w);
        if ((cbInstanceData._m0[_2793].w < 1.0) && ((cbInstanceData._m0[_2793].w + _2686) < 0.5))
        {
            _2852 = true;
            break;
        }
        if ((_2679 + 1.0) < _2677.x)
        {
            _2852 = true;
            break;
        }
        _2852 = false;
        break;
    }
    float _3057;
    if (_2852)
    {
        discard_state = true;
        _3057 = 0.0;
    }
    else
    {
        _3057 = cbInstanceData._m0[_2518].w;
    }
    SV_Target.x = _2683;
    SV_Target.y = _2684;
    SV_Target.z = _2685;
    SV_Target.w = _3057;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2518].w;
    discard_exit();
}


