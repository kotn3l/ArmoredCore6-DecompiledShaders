#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1173;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3762 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _401 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    float _458 = ((_428.z - _449) * _374) + _449;
    float _461 = ((((_428.x - _447) * _374) + _447) * 2.0) + (-1.0);
    float _462 = ((((_428.y - _448) * _374) + _448) * 2.0) + (-1.0);
    float _463 = dot(vec2(_461, _462), vec2(_461, _462));
    float _3773 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _468 = sqrt(1.0 - (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))));
    vec4 _488 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _500 = (_461 + ((((_401.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_488.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _501 = (_462 + ((((_401.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_488.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _504 = fma(_468, _226, fma(_501, _233, _500 * _219));
    float _507 = fma(_468, _227, fma(_501, _234, _500 * _220));
    float _510 = fma(_468, _228, fma(_501, _235, _500 * _221));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    vec4 _543 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _545 = _543.x;
    float _546 = 1.0 - _545;
    float _550 = ((_545 - _546) * cbMtdParam._m0[24u].z) + _546;
    float _552 = (cbMtdParam._m0[19u].x + dot(vec4(_514 * _504, _514 * _507, _514 * _510, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_550 * cbMtdParam._m0[21u].z);
    float _3784 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _568 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_550 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3795 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _573 = ((_553 * (cbMtdParam._m0[17u].x - _381)) * _569) + _381;
    float _574 = ((_553 * (cbMtdParam._m0[17u].y - _382)) * _569) + _382;
    float _575 = ((_553 * (cbMtdParam._m0[17u].z - _383)) * _569) + _383;
    float _580 = (((_401.z - _458) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _458;
    float _584 = ((_488.z - _580) * cbMtdParam._m0[19u].w) + _580;
    vec4 _597 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _604 = (_597.x * 2.0) + (-1.0);
    float _605 = (_597.y * 2.0) + (-1.0);
    float _606 = dot(vec2(_604, _605), vec2(_604, _605));
    float _3806 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _615 = (((_597.z - _584) * _553) * _569) + _584;
    float _630 = (((cbMtdParam._m0[21u].x * _500) + ((_604 - _500) * _553)) * _569) + _500;
    float _631 = (((cbMtdParam._m0[21u].x * _501) + ((_605 - _501) * _553)) * _569) + _501;
    float _632 = (((sqrt(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) - _468) * _553) * _569) + _468;
    float _637 = cbMtdParam._m0[22u].x + _488.w;
    float _640 = fma(_632, _226, fma(_631, _233, _630 * _219));
    float _643 = fma(_632, _227, fma(_631, _234, _630 * _220));
    float _646 = fma(_632, _228, fma(_631, _235, _630 * _221));
    float _650 = inversesqrt(dot(vec3(_640, _643, _646), vec3(_640, _643, _646)));
    float _651 = _650 * _640;
    float _652 = _650 * _643;
    float _653 = _650 * _646;
    float _3817 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _654 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _3839 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3850 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3861 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _672 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _724 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _714);
    float _725 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _714);
    float _726 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _714);
    float _730 = inversesqrt(dot(vec3(_724, _725, _726), vec3(_724, _725, _726)));
    float _731 = _724 * _730;
    float _732 = _725 * _730;
    float _733 = _726 * _730;
    float _739 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _740 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _758 = fma(_653, cbSceneParam._m0[5u].z, fma(_652, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _651));
    float _761 = fma(_653, cbSceneParam._m0[6u].z, fma(_652, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _651));
    float _764 = fma(_653, cbSceneParam._m0[7u].z, fma(_652, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _651));
    uint _778 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _784 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * cbInstanceData._m0[_778].x;
    float _785 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * cbInstanceData._m0[_778].y;
    float _786 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * cbInstanceData._m0[_778].z;
    float _3872 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    vec4 _798 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _739, cbSceneParam._m0[86u].y * _740));
    float _802 = ((isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * TEXCOORD_5.w) * _798.x;
    float _803 = dot(vec3(_651, _652, _653), vec3(_731, _732, _733));
    float _806 = _803 * 2.0;
    float _810 = (_806 * _651) - _731;
    float _811 = (_806 * _652) - _732;
    float _812 = (_806 * _653) - _733;
    float _816 = abs(dot(vec3(_731, _732, _733), vec3(_651, _652, _653)));
    float _3905 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _818 = sqrt(_654);
    float _831 = exp2((_818 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_818 * 3.0));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _867 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1172;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _897 = fma(_871, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863));
        float _901 = fma(_871, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863));
        float _905 = fma(_871, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863));
        float _930 = _863 + _651;
        float _931 = _867 + _652;
        float _932 = _871 + _653;
        float _942 = fma(_932, cbModelParam._m0[26u].z, fma(_931, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930)) - _897;
        float _943 = fma(_932, cbModelParam._m0[27u].z, fma(_931, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930)) - _901;
        float _944 = fma(_932, cbModelParam._m0[28u].z, fma(_931, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930)) - _905;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_897 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_901 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[34u].z) + ((((((_905 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _1000 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_966.x + (-0.5));
        float _1002 = _1000 * (_966.y + (-0.5));
        float _1003 = _1000 * (_966.z + (-0.5));
        float _1010 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_973.x + (-0.5));
        float _1012 = _1010 * (_973.y + (-0.5));
        float _1013 = _1010 * (_973.z + (-0.5));
        float _1020 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_980.x + (-0.5));
        float _1022 = _1020 * (_980.y + (-0.5));
        float _1023 = _1020 * (_980.z + (-0.5));
        float _1030 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_987.x + (-0.5));
        float _1032 = _1030 * (_987.y + (-0.5));
        float _1033 = _1030 * (_987.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1054 = (dot(vec3(_651, _652, _653), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1064 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3953 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1066 + 1.0))) + _1071) * _1034;
        float _1081 = _1002 * 0.5;
        float _1082 = _1012 * 0.5;
        float _1083 = _1022 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_651, _652, _653), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3986 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1108 + 1.0))) + _1113) * _1035;
        float _1123 = _1003 * 0.5;
        float _1124 = _1013 * 0.5;
        float _1125 = _1023 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_651, _652, _653), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _4019 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1150 + 1.0))) + _1155) * _1036;
        _1172 = _1003;
        _1174 = _1002;
        _1175 = _1001;
        _1176 = _1013;
        _1177 = _1012;
        _1178 = _1011;
        _1179 = _1023;
        _1180 = _1022;
        _1181 = _1021;
        _1182 = _1036;
        _1183 = _1035;
        _1184 = _1034;
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _1173;
        _1174 = _1173;
        _1175 = _1173;
        _1176 = _1173;
        _1177 = _1173;
        _1178 = _1173;
        _1179 = _1173;
        _1180 = _1173;
        _1181 = _1173;
        _1182 = _1173;
        _1183 = _1173;
        _1184 = _1173;
        _1185 = 0.0;
        _1186 = 0.0;
        _1187 = 0.0;
    }
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1212 = fma(_871, cbModelParam._m0[30u].z, fma(_867, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _863));
        float _1216 = fma(_871, cbModelParam._m0[31u].z, fma(_867, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _863));
        float _1220 = fma(_871, cbModelParam._m0[32u].z, fma(_867, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _863));
        float _1243 = _863 + _651;
        float _1244 = _867 + _652;
        float _1245 = _871 + _653;
        float _1255 = fma(_1245, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243)) - _1212;
        float _1256 = fma(_1245, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243)) - _1216;
        float _1257 = fma(_1245, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243)) - _1220;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1212 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1216 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[35u].z) + ((((((_1220 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1311 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1278.x + (-0.5));
        float _1313 = _1311 * (_1278.y + (-0.5));
        float _1314 = _1311 * (_1278.z + (-0.5));
        float _1321 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1285.x + (-0.5));
        float _1323 = _1321 * (_1285.y + (-0.5));
        float _1324 = _1321 * (_1285.z + (-0.5));
        float _1331 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1292.x + (-0.5));
        float _1333 = _1331 * (_1292.y + (-0.5));
        float _1334 = _1331 * (_1292.z + (-0.5));
        float _1341 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1299.x + (-0.5));
        float _1343 = _1341 * (_1299.y + (-0.5));
        float _1344 = _1341 * (_1299.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_651, _652, _653), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4082 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1375 + 1.0))) + _1380) * _1345;
        float _1390 = _1313 * 0.5;
        float _1391 = _1323 * 0.5;
        float _1392 = _1333 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_651, _652, _653), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4115 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1417 + 1.0))) + _1422) * _1346;
        float _1432 = _1314 * 0.5;
        float _1433 = _1324 * 0.5;
        float _1434 = _1334 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_651, _652, _653), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4148 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1459 + 1.0))) + _1464) * _1347;
        _1481 = _1314;
        _1482 = _1313;
        _1483 = _1312;
        _1484 = _1324;
        _1485 = _1323;
        _1486 = _1322;
        _1487 = _1334;
        _1488 = _1333;
        _1489 = _1332;
        _1490 = _1347;
        _1491 = _1346;
        _1492 = _1345;
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1173;
        _1482 = _1173;
        _1483 = _1173;
        _1484 = _1173;
        _1485 = _1173;
        _1486 = _1173;
        _1487 = _1173;
        _1488 = _1173;
        _1489 = _1173;
        _1490 = _1173;
        _1491 = _1173;
        _1492 = _1173;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1185)) + _1185;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1186)) + _1186;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1187)) + _1187;
    float _1528 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1505));
    float _1549 = _810 * 0.5;
    float _1550 = _811 * 0.5;
    float _1551 = _812 * 0.5;
    float _1552 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1555 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1558 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1565 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1172, _1176, _1179, _1182));
        float _1569 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1573 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1580 = dot(vec4(cbModelParam._m0[39u]), vec4(_1549, _1550, _1551, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1549, _1550, _1551, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _654);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1666 = fma(_871, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863)) + cbModelParam._m0[13u].w;
        float _1670 = fma(_871, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863)) + cbModelParam._m0[14u].w;
        float _1674 = fma(_871, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863)) + cbModelParam._m0[15u].w;
        float _1677 = fma(_812, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _810));
        float _1680 = fma(_812, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _810));
        float _1683 = fma(_812, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _810));
        float _1711;
        if (_1677 > 0.0)
        {
            _1711 = abs((1.0 - _1666) / _1677);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1666 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1711 = frontier_phi_14_12_ladder;
        }
        float _1881;
        if (_1680 > 0.0)
        {
            _1881 = abs((1.0 - _1670) / _1680);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1670 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1881 = frontier_phi_23_19_ladder;
        }
        float _2176;
        if (_1683 > 0.0)
        {
            _2176 = abs((1.0 - _1674) / _1683);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1674 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2176 = frontier_phi_35_30_ladder;
        }
        float _2178 = isnan(_1881) ? _1711 : (isnan(_1711) ? _1881 : min(_1711, _1881));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1677) + _1666;
        float _2184 = (_2179 * _1680) + _1670;
        float _2185 = (_2179 * _1683) + _1674;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2186;
        float _2190 = _2186 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 > _2190) || ((_2184 < _2188) || ((_2183 < _2188) || (_2183 > _2190))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2330 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2185, cbModelParam._m0[9u].z, fma(_2184, cbModelParam._m0[9u].y, _2183 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2185, cbModelParam._m0[10u].z, fma(_2184, cbModelParam._m0[10u].y, _2183 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2185, cbModelParam._m0[11u].z, fma(_2184, cbModelParam._m0[11u].y, _2183 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_13_35_ladder = _2330.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2330.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2330.x * cbModelParam._m0[1u].y;
        }
        _1699 = frontier_phi_13_35_ladder_2;
        _1701 = frontier_phi_13_35_ladder_1;
        _1703 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_810, _811, _812), _1618);
        _1699 = _1687.x * cbModelParam._m0[1u].y;
        _1701 = _1687.y * cbModelParam._m0[1u].y;
        _1703 = _1687.z * cbModelParam._m0[1u].y;
    }
    float _1707 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _654);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1707 : min(cbModelParam._m0[25u].w, _1707));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1762 = fma(_871, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863)) + cbModelParam._m0[21u].w;
        float _1766 = fma(_871, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863)) + cbModelParam._m0[22u].w;
        float _1770 = fma(_871, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863)) + cbModelParam._m0[23u].w;
        float _1773 = fma(_812, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _810));
        float _1776 = fma(_812, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _810));
        float _1779 = fma(_812, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _810));
        float _1886;
        if (_1773 > 0.0)
        {
            _1886 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1886 = frontier_phi_25_21_ladder;
        }
        float _2203;
        if (_1776 > 0.0)
        {
            _2203 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2203 = frontier_phi_37_32_ladder;
        }
        float _2530;
        if (_1779 > 0.0)
        {
            _2530 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2530 = frontier_phi_47_44_ladder;
        }
        float _2532 = isnan(_2203) ? _1886 : (isnan(_1886) ? _2203 : min(_1886, _2203));
        float _2533 = isnan(_2530) ? _2532 : (isnan(_2532) ? _2530 : min(_2532, _2530));
        float _2537 = (_2533 * _1773) + _1762;
        float _2538 = (_2533 * _1776) + _1766;
        float _2539 = (_2533 * _1779) + _1770;
        float _2540 = _2533 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2540;
        float _2543 = _2540 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2539 > _2543) || ((_2539 < _2541) || ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 < _2541) || (_2537 > _2543))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2539, cbModelParam._m0[17u].z, fma(_2538, cbModelParam._m0[17u].y, _2537 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2539, cbModelParam._m0[18u].z, fma(_2538, cbModelParam._m0[18u].y, _2537 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2539, cbModelParam._m0[19u].z, fma(_2538, cbModelParam._m0[19u].y, _2537 * cbModelParam._m0[19u].x))), _1708);
            frontier_phi_22_47_ladder = _2657.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2657.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2657.x * cbModelParam._m0[1u].z;
        }
        _1798 = frontier_phi_22_47_ladder_2;
        _1800 = frontier_phi_22_47_ladder_1;
        _1802 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_810, _811, _812), _1708);
        _1798 = _1782.x * cbModelParam._m0[1u].z;
        _1800 = _1782.y * cbModelParam._m0[1u].z;
        _1802 = _1782.z * cbModelParam._m0[1u].z;
    }
    float _1814 = ((((1.0 - _831) * ((_818 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_831 * _818)) * _802;
    float _1815 = _1814 * ((cbModelParam._m0[1u].w * (_1798 - _1699)) + _1699);
    float _1816 = _1814 * ((cbModelParam._m0[1u].w * (_1800 - _1701)) + _1701);
    float _1817 = _1814 * ((cbModelParam._m0[1u].w * (_1802 - _1703)) + _1703);
    float _1820 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, _1815 * cbSceneParam._m0[91u].x));
    float _1860 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1864 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1868 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1872 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1873 = _1860 / _1872;
    float _1874 = _1864 / _1872;
    float _1875 = _1868 / _1872;
    float _2022;
    float _2023;
    float _2024;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1902 = ((uint(_1875 > cbSceneParam._m0[59u].y) + uint(_1875 > cbSceneParam._m0[59u].x)) + uint(_1875 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1903 = _1902 + 43u;
        uint _1911 = _1902 + 44u;
        uint _1919 = _1902 + 45u;
        uint _1927 = _1902 + 46u;
        float _1938 = fma(_1872, cbSceneParam._m0[_1903].w, fma(_1868, cbSceneParam._m0[_1903].z, fma(_1864, cbSceneParam._m0[_1903].y, _1860 * cbSceneParam._m0[_1903].x)));
        float _1942 = fma(_1872, cbSceneParam._m0[_1911].w, fma(_1868, cbSceneParam._m0[_1911].z, fma(_1864, cbSceneParam._m0[_1911].y, _1860 * cbSceneParam._m0[_1911].x)));
        float _1950 = fma(_1872, cbSceneParam._m0[_1927].w, fma(_1868, cbSceneParam._m0[_1927].z, fma(_1864, cbSceneParam._m0[_1927].y, _1860 * cbSceneParam._m0[_1927].x)));
        float _1955 = cbSceneParam._m0[33u].z * _1950;
        float _1957 = cbSceneParam._m0[33u].w * _1950;
        float _1960 = fma(_1872, cbSceneParam._m0[_1919].w, fma(_1868, cbSceneParam._m0[_1919].z, fma(_1864, cbSceneParam._m0[_1919].y, _1860 * cbSceneParam._m0[_1919].x))) / _1950;
        float _2008 = (cbSceneParam._m0[33u].x - sqrt(((_1874 * _1874) + (_1873 * _1873)) + (_1875 * _1875))) * cbSceneParam._m0[33u].y;
        float _4274 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2015 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1955 + _1938) / _1950, (_1957 + _1942) / _1950), _1960), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1957 + _1938) / _1950, (_1942 - _1955) / _1950), _1960), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1938 - _1955) / _1950, (_1942 - _1957) / _1950), _1960), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1938 - _1957) / _1950, (_1955 + _1942) / _1950), _1960), 0.0)).x), vec4(0.25)));
        _2022 = 1.0 - (_2015 * cbSceneParam._m0[34u].x);
        _2023 = 1.0 - (_2015 * cbSceneParam._m0[34u].y);
        _2024 = 1.0 - (_2015 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2022 = 1.0;
        _2023 = 1.0;
        _2024 = 1.0;
    }
    float _2088;
    float _2090;
    float _2092;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2076 = fma(_1872, cbSceneParam._m0[63u].w, fma(_1868, cbSceneParam._m0[63u].z, fma(_1864, cbSceneParam._m0[63u].y, _1860 * cbSceneParam._m0[63u].x)));
        float _2077 = fma(_1872, cbSceneParam._m0[60u].w, fma(_1868, cbSceneParam._m0[60u].z, fma(_1864, cbSceneParam._m0[60u].y, _1860 * cbSceneParam._m0[60u].x))) / _2076;
        float _2078 = fma(_1872, cbSceneParam._m0[61u].w, fma(_1868, cbSceneParam._m0[61u].z, fma(_1864, cbSceneParam._m0[61u].y, _1860 * cbSceneParam._m0[61u].x))) / _2076;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2077 >= cbSceneParam._m0[64u].x) && (_2078 >= cbSceneParam._m0[64u].y)) && (_2077 <= cbSceneParam._m0[64u].z)) && (_2078 <= cbSceneParam._m0[64u].w))
        {
            float _2216 = fma(_1872, cbSceneParam._m0[62u].w, fma(_1868, cbSceneParam._m0[62u].z, fma(_1864, cbSceneParam._m0[62u].y, _1860 * cbSceneParam._m0[62u].x))) / _2076;
            float _2220 = isnan(cbSceneParam._m0[41u].w) ? _2216 : (isnan(_2216) ? cbSceneParam._m0[41u].w : max(_2216, cbSceneParam._m0[41u].w));
            float _2263 = (cbSceneParam._m0[33u].x - sqrt(((_1874 * _1874) + (_1873 * _1873)) + (_1875 * _1875))) * cbSceneParam._m0[33u].y;
            float _4290 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
            float _2270 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2077, cbSceneParam._m0[33u].w + _2078), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2077, _2078 - cbSceneParam._m0[33u].z), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2077 - cbSceneParam._m0[33u].z, _2078 - cbSceneParam._m0[33u].w), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2077 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2078), _2220), 0.0)).x), vec4(0.25)));
            float _2274 = 1.0 - (_2270 * cbSceneParam._m0[34u].x);
            float _2275 = 1.0 - (_2270 * cbSceneParam._m0[34u].y);
            float _2276 = 1.0 - (_2270 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2276) ? _2024 : (isnan(_2024) ? _2276 : min(_2024, _2276));
            frontier_phi_34_33_ladder_1 = isnan(_2275) ? _2023 : (isnan(_2023) ? _2275 : min(_2023, _2275));
            frontier_phi_34_33_ladder_2 = isnan(_2274) ? _2022 : (isnan(_2022) ? _2274 : min(_2022, _2274));
        }
        else
        {
            frontier_phi_34_33_ladder = _2024;
            frontier_phi_34_33_ladder_1 = _2023;
            frontier_phi_34_33_ladder_2 = _2022;
        }
        _2088 = frontier_phi_34_33_ladder_2;
        _2090 = frontier_phi_34_33_ladder_1;
        _2092 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2088 = _2022;
        _2090 = _2023;
        _2092 = _2024;
    }
    uvec4 _2097 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2099 = _2097.x * 14u;
    uint _2100 = _2099 + 13u;
    float _2107 = _802 + (-1.0);
    float _2112 = (cbLight._m0[_2100].x * _2107) + 1.0;
    float _2113 = (cbLight._m0[_2100].y * _2107) + 1.0;
    float _2114 = (cbLight._m0[_2100].z * _2107) + 1.0;
    float _2115 = (cbLight._m0[_2100].w * _2107) + 1.0;
    uint _2116 = _2099 + 5u;
    float _2122 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
    uint _2126 = _2099 + 4u;
    float _2135 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2139 = _2099 | 1u;
    float _2150 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_651, _652, _653));
    float _2153 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_651, _652, _653));
    float _4326 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _4337 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * 0.3183098733425140380859375;
    float _2160 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * 0.3183098733425140380859375;
    float _2167 = ((cbLight._m0[_2116].x * _2122) * _2160) + (((cbLight._m0[_2126].x * _2088) * _2135) * _2158);
    float _2168 = ((_2122 * cbLight._m0[_2116].y) * _2160) + (((cbLight._m0[_2126].y * _2090) * _2135) * _2158);
    float _2169 = ((_2122 * cbLight._m0[_2116].z) * _2160) + (((cbLight._m0[_2126].z * _2092) * _2135) * _2158);
    uvec4 _2173 = floatBitsToUint(cbLight._m0[_2099 + 12u]);
    bool _2175 = _2173.x == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2175)
    {
        _2277 = _2167;
        _2279 = _2168;
        _2281 = _2169;
    }
    else
    {
        uint _2285 = _2099 + 6u;
        float _2301 = (dot(vec3(cbLight._m0[_2099 + 2u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4348 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2304 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2277 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2167;
        _2279 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2168;
        _2281 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2169;
    }
    bool _2284 = _2173.y == 0u;
    float _2339;
    float _2341;
    float _2343;
    if (_2284)
    {
        _2339 = _2277;
        _2341 = _2279;
        _2343 = _2281;
    }
    else
    {
        uint _2501 = _2099 + 7u;
        float _2517 = (dot(vec3(cbLight._m0[_2099 + 3u].xyz), vec3(_651, _652, _653)) * 0.5) + 0.5;
        float _2518 = _2517 * _2517;
        float _4364 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2519 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2520 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2339 = (((cbLight._m0[_2501].x * 0.3183098733425140380859375) * _2519) * _2520) + _2277;
        _2341 = (((cbLight._m0[_2501].y * 0.3183098733425140380859375) * _2519) * _2520) + _2279;
        _2343 = (((cbLight._m0[_2501].z * 0.3183098733425140380859375) * _2519) * _2520) + _2281;
    }
    uint _2346 = _2099 + 8u;
    float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _654) * 0.949999988079071044921875);
    float _2360 = _2359 * _2359;
    float _2361 = cbLight._m0[_2099].x + _731;
    float _2362 = cbLight._m0[_2099].y + _732;
    float _2363 = cbLight._m0[_2099].z + _733;
    float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
    float _2368 = _2367 * _2361;
    float _2369 = _2367 * _2362;
    float _2370 = _2367 * _2363;
    float _2371 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2099].xyz));
    float _4380 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2375 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _2376 = dot(vec3(_651, _652, _653), vec3(_2368, _2369, _2370));
    float _4402 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2368, _2369, _2370));
    float _4413 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2360 * _2360;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2399 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2400 = 1.0 - _2360;
    float _2411 = (0.5 / (((_2375 * ((_2374 * _2400) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2400) + _2360) * _2374))) * _2374;
    float _4424 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2413 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    uint _2427 = _2099 + 9u;
    float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _654) * 0.949999988079071044921875);
    float _2439 = _2438 * _2438;
    float _2440 = cbLight._m0[_2139].x + _731;
    float _2441 = cbLight._m0[_2139].y + _732;
    float _2442 = cbLight._m0[_2139].z + _733;
    float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
    float _2447 = _2446 * _2440;
    float _2448 = _2446 * _2441;
    float _2449 = _2446 * _2442;
    float _2450 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2139].xyz));
    float _4435 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2454 = dot(vec3(_651, _652, _653), vec3(_2447, _2448, _2449));
    float _4446 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2458 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2447, _2448, _2449));
    float _4457 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2462 = _2439 * _2439;
    float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
    float _2475 = (exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2476 = 1.0 - _2439;
    float _2486 = (0.5 / (((_2375 * ((_2453 * _2476) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2476) + _2439) * _2453))) * _2453;
    float _4468 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2488 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
    float _2498 = (((_2475 * cbLight._m0[_2427].x) * _2488) * _2122) + ((((cbLight._m0[_2346].x * _2088) * _2399) * _2413) * _2135);
    float _2499 = (((_2475 * cbLight._m0[_2427].y) * _2488) * _2122) + ((((cbLight._m0[_2346].y * _2090) * _2399) * _2413) * _2135);
    float _2500 = (((_2475 * cbLight._m0[_2427].z) * _2488) * _2122) + ((((cbLight._m0[_2346].z * _2092) * _2399) * _2413) * _2135);
    float _2556;
    float _2558;
    float _2560;
    if (_2175)
    {
        _2556 = _2498;
        _2558 = _2499;
        _2560 = _2500;
    }
    else
    {
        uint _2562 = _2099 + 2u;
        uint _2566 = _2099 + 10u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _654) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _731;
        float _2583 = cbLight._m0[_2562].y + _732;
        float _2584 = cbLight._m0[_2562].z + _733;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2562].xyz));
        float _4479 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2596 = dot(vec3(_651, _652, _653), vec3(_2589, _2590, _2591));
        float _4490 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4501 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2617 = (exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2618 = 1.0 - _2581;
        float _2628 = (0.5 / (((_2375 * ((_2595 * _2618) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2618) + _2581) * _2595))) * _2595;
        float _4512 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2556 = (((_2617 * cbLight._m0[_2566].x) * _2630) * _2631) + _2498;
        _2558 = (((_2617 * cbLight._m0[_2566].y) * _2630) * _2631) + _2499;
        _2560 = (((_2617 * cbLight._m0[_2566].z) * _2630) * _2631) + _2500;
    }
    float _2662;
    float _2664;
    float _2666;
    if (_2284)
    {
        _2662 = _2556;
        _2664 = _2558;
        _2666 = _2560;
    }
    else
    {
        uint _2673 = _2099 + 3u;
        uint _2677 = _2099 + 11u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _654) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _731;
        float _2694 = cbLight._m0[_2673].y + _732;
        float _2695 = cbLight._m0[_2673].z + _733;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_651, _652, _653), vec3(cbLight._m0[_2673].xyz));
        float _4528 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2707 = dot(vec3(_651, _652, _653), vec3(_2700, _2701, _2702));
        float _4539 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4550 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2728 = (exp2(log2(1.0 - (isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2729 = 1.0 - _2692;
        float _2739 = (0.5 / (((_2375 * ((_2706 * _2729) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2729) + _2692) * _2706))) * _2706;
        float _4561 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2741 = (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2742 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
        _2662 = (((_2728 * cbLight._m0[_2677].x) * _2741) * _2742) + _2556;
        _2664 = (((_2728 * cbLight._m0[_2677].y) * _2741) * _2742) + _2558;
        _2666 = (((_2728 * cbLight._m0[_2677].z) * _2741) * _2742) + _2560;
    }
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    if (_2097.y == 0u)
    {
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.x;
        uint _2775 = uint((float(_2763.y) * floor(float(uint(cbSceneParam._m0[85u].y * _740) / _2764))) + floor(float(uint(cbSceneParam._m0[85u].x * _739) / _2764)));
        float _2785 = (log2(_1875 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2786 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        uint _2789 = uint(isnan(14.0) ? _2786 : (isnan(_2786) ? 14.0 : min(_2786, 14.0)));
        uvec4 _2794 = texelFetch(g_lightClusterGridBuffer, int(((_2789 << 2u) + (_2775 << 6u)) >> 2u));
        uint _2795 = _2794.x;
        uint _2796 = _2763.z;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((((1u << ((_2796 >> 4u) & 15u)) + 4294967295u) & _2795) == 0u) || ((_2796 & 240u) == 0u))
        {
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
        }
        else
        {
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            uint _3026 = 0u;
            uint _3035;
            bool _3036;
            for (;;)
            {
                _3035 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3026 << 2u)) >> 2u)).x;
                _3036 = _3035 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3036)
                {
                    frontier_phi_66_pred = _3025;
                    frontier_phi_66_pred_1 = _3024;
                    frontier_phi_66_pred_2 = _3023;
                    frontier_phi_66_pred_3 = _3022;
                    frontier_phi_66_pred_4 = _3021;
                    frontier_phi_66_pred_5 = _3020;
                }
                else
                {
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    float _3149;
                    uint _3150;
                    _3144 = _3020;
                    _3145 = _3021;
                    _3146 = _3022;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3035;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    for (;;)
                    {
                        uint _3154 = uint(findLSB(_3150)) + (_3026 << 5u);
                        uint _3151 = (_3150 + 4294967295u) & _3150;
                        uint _3156 = _3154 * 48u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3176 = (_3154 * 48u) + 4u;
                        vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 3u)).x));
                        uint _3195 = (_3154 * 48u) + 8u;
                        vec3 _3206 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x));
                        float _3210 = _3170.x - _1873;
                        float _3211 = _3170.y - _1874;
                        float _3212 = _3170.z - _1875;
                        float _3213 = dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212));
                        float _3216 = inversesqrt(_3213);
                        float _3217 = _3216 * _3210;
                        float _3218 = _3216 * _3211;
                        float _3219 = _3216 * _3212;
                        float _3220 = dot(vec3(_758, _761, _764), vec3(_3217, _3218, _3219));
                        float _3225 = 1.0 - (_3213 * _3170.w);
                        float _4587 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3227 = sqrt(_3213) * _3189.w;
                        float _3230 = 1.39999997615814208984375 / (_3227 + 1.39999997615814208984375);
                        float _3231 = _3230 * _3230;
                        float _3234 = ((1.0 - _3231) * _3220) + _3231;
                        float _3237 = _3227 * _3227;
                        float _3241 = ((isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))) * _3226) / ((_3237 * 0.699999988079071044921875) + 1.0);
                        float _3245 = (-0.0) - _1873;
                        float _3246 = (-0.0) - _1874;
                        float _3247 = (-0.0) - _1875;
                        float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                        float _3252 = _3251 * _3245;
                        float _3253 = _3251 * _3246;
                        float _3254 = _3251 * _3247;
                        float _3261 = exp2(log2(1.0 / ((_3237 * 3.5) + 5.0)) * 0.25);
                        float _3262 = 1.0 - _818;
                        float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                        float _3270 = _3269 * _3269;
                        float _3271 = _3270 * _3270;
                        float _3272 = _3252 + _3217;
                        float _3273 = _3253 + _3218;
                        float _3274 = _3254 + _3219;
                        float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                        float _3282 = dot(vec3(_758, _761, _764), vec3(_3252, _3253, _3254));
                        float _4603 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3285 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                        float _3286 = dot(vec3(_758, _761, _764), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                        float _4614 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                        float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                        float _3294 = _3230 * _3270;
                        float _3295 = _3294 * _3294;
                        float _3298 = ((1.0 - _3295) * _3220) + _3295;
                        float _4625 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3299 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                        float _3300 = 1.0 - _3270;
                        float _3310 = (0.5 / (((_3299 * ((_3285 * _3300) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3299 * _3300) + _3270) * _3285))) * _3299;
                        float _4636 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3321 = (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3293 * _3293) * ((_3237 * 2.1991131305694580078125) + 3.141590118408203125))) * _3226;
                        _3079 = (_3241 * _3189.x) + _3147;
                        _3080 = (_3241 * _3189.y) + _3148;
                        _3081 = (_3241 * _3189.z) + _3149;
                        _3076 = (_3321 * _3206.x) + _3144;
                        _3077 = (_3321 * _3206.y) + _3145;
                        _3078 = (_3321 * _3206.z) + _3146;
                        if (_3151 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3144 = _3076;
                            _3145 = _3077;
                            _3146 = _3078;
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3151;
                        }
                    }
                    frontier_phi_66_pred = _3081;
                    frontier_phi_66_pred_1 = _3080;
                    frontier_phi_66_pred_2 = _3079;
                    frontier_phi_66_pred_3 = _3078;
                    frontier_phi_66_pred_4 = _3077;
                    frontier_phi_66_pred_5 = _3076;
                }
                _2886 = frontier_phi_66_pred;
                _2884 = frontier_phi_66_pred_1;
                _2882 = frontier_phi_66_pred_2;
                _2880 = frontier_phi_66_pred_3;
                _2878 = frontier_phi_66_pred_4;
                _2876 = frontier_phi_66_pred_5;
                uint _3027 = _3026 + 1u;
                if (_3027 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3020 = _2876;
                    _3021 = _2878;
                    _3022 = _2880;
                    _3023 = _2882;
                    _3024 = _2884;
                    _3025 = _2886;
                    _3026 = _3027;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
        }
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.z;
        uint _2892 = (_2890 >> 8u) & 15u;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        if (((4294967295u << _2892) & _2795) == 0u)
        {
            _2988 = _2875;
            _2990 = _2877;
            _2992 = _2879;
            _2994 = _2881;
            _2996 = _2883;
            _2998 = _2885;
        }
        else
        {
            float _3013 = inversesqrt(dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875)));
            float _3014 = _3013 * _1873;
            float _3015 = _3013 * _1874;
            float _3016 = _3013 * _1875;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2892 < ((_2890 >> 12u) & 15u))
            {
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _2999;
                float _3127 = _2875;
                float _3128 = _2877;
                float _3129 = _2879;
                float _3130 = _2881;
                float _3131 = _2883;
                float _3132 = _2885;
                uint _3133 = _2892;
                uint _3142;
                bool _3143;
                for (;;)
                {
                    _3142 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                    _3143 = _3142 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3143)
                    {
                        frontier_phi_72_pred = _3132;
                        frontier_phi_72_pred_1 = _3131;
                        frontier_phi_72_pred_2 = _3130;
                        frontier_phi_72_pred_3 = _3129;
                        frontier_phi_72_pred_4 = _3128;
                        frontier_phi_72_pred_5 = _3127;
                    }
                    else
                    {
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3339 = _3127;
                        float _3340 = _3128;
                        float _3341 = _3129;
                        float _3342 = _3130;
                        float _3343 = _3131;
                        float _3344 = _3132;
                        uint _3345 = _3142;
                        uint _3346;
                        vec4 _3371;
                        float _3372;
                        vec4 _3387;
                        vec3 _3399;
                        vec4 _3414;
                        vec4 _3429;
                        float _3475;
                        bool _3476;
                        for (;;)
                        {
                            uint _3356 = ((_3133 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3345));
                            _3346 = (_3345 + 4294967295u) & _3345;
                            uint _3358 = _3356 * 40u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            _3372 = _3371.w;
                            uint _3374 = (_3356 * 40u) + 4u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3389 = (_3356 * 40u) + 8u;
                            _3399 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x));
                            uint _3401 = (_3356 * 40u) + 16u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3356 * 40u) + 20u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3431 = (_3356 * 40u) + 24u;
                            vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            uint _3450 = (_3356 * 40u) + 28u;
                            vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            _3475 = fma(_1875, _3463.z, fma(_1874, _3463.y, _3463.x * _1873)) + _3463.w;
                            _3476 = !((fma(_1875, _3444.z, fma(_1874, _3444.y, _3444.x * _1873)) + _3444.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3476)
                            {
                                float _3503 = _3371.x - _1873;
                                float _3504 = _3371.y - _1874;
                                float _3505 = _3371.z - _1875;
                                float _3506 = dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505));
                                float _3509 = inversesqrt(_3506);
                                float _3510 = _3509 * _3503;
                                float _3511 = _3509 * _3504;
                                float _3512 = _3509 * _3505;
                                float _3516 = 1.0 - (_3506 / (_3372 * _3372));
                                float _4647 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3517 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3521 = sqrt(_3506) * _3387.w;
                                float _3523 = 1.39999997615814208984375 / (_3521 + 1.39999997615814208984375);
                                float _3524 = _3523 * _3523;
                                float _3527 = ((1.0 - _3524) * dot(vec3(_3510, _3511, _3512), vec3(_758, _761, _764))) + _3524;
                                float _3530 = _3521 * _3521;
                                float _3534 = (fma(_1875, _3414.z, fma(_1874, _3414.y, _3414.x * _1873)) + _3414.w) / _3475;
                                float _3535 = (fma(_1875, _3429.z, fma(_1874, _3429.y, _3429.x * _1873)) + _3429.w) / _3475;
                                float _3539 = 1.0 - dot(vec2(_3534, _3535), vec2(_3534, _3535));
                                float _4663 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3540 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                                float _3541 = _3540 * (((isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0))) * _3517) / ((_3530 * 0.699999988079071044921875) + 1.0));
                                float _3553 = exp2(log2(1.0 / ((_3530 * 3.5) + 5.0)) * 0.25);
                                float _3554 = 1.0 - _818;
                                float _3561 = sqrt(1.0 - ((1.0 - (_3554 * _3554)) * (1.0 - (_3553 * _3553))));
                                float _3562 = _3561 * _3561;
                                float _3563 = _3562 * _3562;
                                float _3564 = _3510 - _3014;
                                float _3565 = _3511 - _3015;
                                float _3566 = _3512 - _3016;
                                float _3570 = inversesqrt(dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566)));
                                float _3574 = dot(vec3(_758, _761, _764), vec3((-0.0) - _3014, (-0.0) - _3015, (-0.0) - _3016));
                                float _4674 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                                float _3578 = dot(vec3(_758, _761, _764), vec3(_3570 * _3564, _3570 * _3565, _3570 * _3566));
                                float _4685 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3581 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                                float _3585 = ((_3581 * _3581) * (_3563 + (-1.0))) + 1.0;
                                float _3586 = _3523 * _3562;
                                float _3587 = _3586 * _3586;
                                float _3593 = ((1.0 - _3587) * dot(vec3(_758, _761, _764), vec3(_3510, _3511, _3512))) + _3587;
                                float _4696 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3594 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
                                float _3595 = 1.0 - _3562;
                                float _3605 = (0.5 / (((_3594 * ((_3577 * _3595) + _3562)) + 9.9999999392252902907785028219223e-09) + (((_3594 * _3595) + _3562) * _3577))) * _3594;
                                float _4707 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                                float _3615 = (_3540 * _3517) * (((_3563 * 3.1415927410125732421875) * (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0)))) / ((_3585 * _3585) * ((_3530 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3541 * _3387.y;
                                frontier_phi_78_pred_1 = _3541 * _3387.x;
                                frontier_phi_78_pred_2 = _3615 * _3399.z;
                                frontier_phi_78_pred_3 = _3615 * _3399.y;
                                frontier_phi_78_pred_4 = _3615 * _3399.x;
                                frontier_phi_78_pred_5 = _3541 * _3387.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3623 = frontier_phi_78_pred;
                            _3622 = frontier_phi_78_pred_1;
                            _3621 = frontier_phi_78_pred_2;
                            _3620 = frontier_phi_78_pred_3;
                            _3619 = frontier_phi_78_pred_4;
                            _3624 = frontier_phi_78_pred_5;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            _3326 = _3619 + _3339;
                            _3327 = _3620 + _3340;
                            _3328 = _3621 + _3341;
                            if (_3346 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3346;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3331;
                        frontier_phi_72_pred_1 = _3330;
                        frontier_phi_72_pred_2 = _3329;
                        frontier_phi_72_pred_3 = _3328;
                        frontier_phi_72_pred_4 = _3327;
                        frontier_phi_72_pred_5 = _3326;
                    }
                    _2999 = frontier_phi_72_pred;
                    _2997 = frontier_phi_72_pred_1;
                    _2995 = frontier_phi_72_pred_2;
                    _2993 = frontier_phi_72_pred_3;
                    _2991 = frontier_phi_72_pred_4;
                    _2989 = frontier_phi_72_pred_5;
                    uint _3134 = _3133 + 1u;
                    if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3127 = _2989;
                        _3128 = _2991;
                        _3129 = _2993;
                        _3130 = _2995;
                        _3131 = _2997;
                        _3132 = _2999;
                        _3133 = _3134;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2999;
                frontier_phi_60_61_ladder_1 = _2997;
                frontier_phi_60_61_ladder_2 = _2993;
                frontier_phi_60_61_ladder_3 = _2991;
                frontier_phi_60_61_ladder_4 = _2989;
                frontier_phi_60_61_ladder_5 = _2995;
            }
            else
            {
                frontier_phi_60_61_ladder = _2885;
                frontier_phi_60_61_ladder_1 = _2883;
                frontier_phi_60_61_ladder_2 = _2879;
                frontier_phi_60_61_ladder_3 = _2877;
                frontier_phi_60_61_ladder_4 = _2875;
                frontier_phi_60_61_ladder_5 = _2881;
            }
            _2988 = frontier_phi_60_61_ladder_4;
            _2990 = frontier_phi_60_61_ladder_3;
            _2992 = frontier_phi_60_61_ladder_2;
            _2994 = frontier_phi_60_61_ladder_5;
            _2996 = frontier_phi_60_61_ladder_1;
            _2998 = frontier_phi_60_61_ladder;
        }
        float _3003 = isnan(1.0) ? _802 : (isnan(_802) ? 1.0 : min(_802, 1.0));
        _2808 = (_3003 * _2994) + _2339;
        _2810 = (_3003 * _2996) + _2341;
        _2812 = (_3003 * _2998) + _2343;
        _2814 = ((_2988 * 0.039999999105930328369140625) * _3003) + _2662;
        _2816 = ((_2990 * 0.039999999105930328369140625) * _3003) + _2664;
        _2818 = ((_2992 * 0.039999999105930328369140625) * _3003) + _2666;
    }
    else
    {
        _2808 = _2339;
        _2810 = _2341;
        _2812 = _2343;
        _2814 = _2662;
        _2816 = _2664;
        _2818 = _2666;
    }
    float _4723 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4734 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4745 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    uint _2838 = _238 + 6u;
    float _2846 = _739 / cbSceneParam._m0[86u].x;
    float _2847 = _740 / cbSceneParam._m0[86u].y;
    vec4 _2861 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, (log2((isnan(cbSceneParam._m0[77u].w) ? _672 : (isnan(_672) ? cbSceneParam._m0[77u].w : min(_672, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2863 = _2861.x;
    float _2864 = _2861.y;
    float _2865 = _2861.z;
    float _2866 = _2861.w;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_672 > cbSceneParam._m0[78u].w)
    {
        float _2900 = isnan(_672) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _672 : min(cbSceneParam._m0[80u].w, _672));
        float _2901 = _2900 / _672;
        float _2912 = _2901 * _724;
        float _2913 = _725 * _2901;
        float _2914 = (-0.0) - _2913;
        float _2916 = _2901 * _726;
        float _2918 = (cbSceneParam._m0[77u].w * _2914) / _2900;
        float _2919 = _2918 + cbSceneParam._m0[79u].w;
        float _2920 = cbSceneParam._m0[79u].w - _2913;
        float _2926 = sqrt(((_2912 * _2912) + (_2913 * _2913)) + (_2916 * _2916));
        float _2929 = (1.0 - (cbSceneParam._m0[77u].w / _2900)) * _2926;
        float _2934 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2936 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3089;
        if (abs((_2914 - _2918) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3089 = ((((_2919 > 0.0) ? exp2(_2934 * _2919) : (2.0 - exp2(_2936 * _2919))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2929;
        }
        else
        {
            float _3049 = 1.0 / cbSceneParam._m0[80u].x;
            float _3050 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : max(_2919, _2920));
            float _3051 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : min(_2919, _2920));
            float _3060 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : min(_3050, 0.0));
            float _3061 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : min(_3051, 0.0));
            _3089 = ((abs(_2926 / _2914) * cbSceneParam._m0[80u].y) * ((((_3060 - _3061) * 2.0) - ((exp2(_2934 * (isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0)))) - exp2(_2934 * (isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0))))) * _3049)) - ((exp2(_2936 * _3060) - exp2(_2936 * _3061)) * _3049))) + (_2929 * cbSceneParam._m0[80u].z);
        }
        vec4 _3091 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, 1.0), 0.0);
        float _3100 = exp2((_3089 * (-1.44269502162933349609375)) * (1.0 - _3091.w));
        float _3101 = log2(_3100);
        float _3117 = log2(_2866);
        _2938 = (exp2(_3117 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].x)) * _3091.x) / cbSceneParam._m0[78u].x)) + _2863;
        _2940 = (exp2(_3117 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].y)) * _3091.y) / cbSceneParam._m0[78u].y)) + _2864;
        _2942 = (exp2(_3117 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3101 * cbSceneParam._m0[78u].z)) * _3091.z) / cbSceneParam._m0[78u].z)) + _2865;
        _2944 = _3100 * _2866;
    }
    else
    {
        _2938 = _2863;
        _2940 = _2864;
        _2942 = _2865;
        _2944 = _2866;
    }
    float _2956 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2957 = _2956 == 3.0;
    float _2958 = log2(_2944);
    float _2965 = exp2(_2958 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2808 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _802))) + ((_2814 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2966 = exp2(_2958 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (_2810 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _802))) + ((_2816 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2967 = exp2(_2958 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2812 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _802))) + ((_2818 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1607)) * cbPerFrame._m0[3u].x));
    float _2976 = (_2956 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2976 * (_2957 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2938)));
    SV_Target.y = _2976 * (_2957 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2940)));
    SV_Target.z = _2976 * (_2957 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2942)));
    SV_Target.w = cbInstanceData._m0[_2838].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2838].w;
}


