#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1297;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _259 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3624 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3635 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3646 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    uint _270 = uint(roundEven(NORMAL.w)) * 13u;
    uint _275 = _270 + 1u;
    uint _279 = _270 + 2u;
    float _288 = sqrt(((cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x)) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x));
    float _289 = _288 * TEXCOORD.z;
    float _290 = _288 * TEXCOORD.w;
    vec4 _303 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _289) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _290) + cbTextureTilingScale._m0[13u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _332 = _327.x * cbMtdParam._m0[11u].x;
    float _333 = _327.y * cbMtdParam._m0[11u].y;
    float _334 = _327.z * cbMtdParam._m0[11u].z;
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _289) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _290) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _392 = _390.x;
    float _402 = dot(vec4(_392, _390.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _419 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_392 - _402) * cbMtdParam._m0[24u].x) + _402) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3657 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _427 = (_420 * ((_353.x * cbMtdParam._m0[12u].x) - _332)) + _332;
    float _428 = (_420 * ((_353.y * cbMtdParam._m0[12u].y) - _333)) + _333;
    float _429 = (_420 * ((_353.z * cbMtdParam._m0[12u].z) - _334)) + _334;
    vec4 _446 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _289) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _290) + cbTextureTilingScale._m0[3u].w));
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _468 = _466.x;
    float _478 = dot(vec4(_468, _466.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _492 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_468 - _478) * cbMtdParam._m0[24u].x) + _478) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3668 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _493 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _500 = (_493 * ((_446.x * cbMtdParam._m0[13u].x) - _427)) + _427;
    float _501 = (_493 * ((_446.y * cbMtdParam._m0[13u].y) - _428)) + _428;
    float _502 = (_493 * ((_446.z * cbMtdParam._m0[13u].z) - _429)) + _429;
    float _506 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _303.x) * _500;
    float _509 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _303.y) * _501;
    float _512 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _303.z) * _502;
    float _519 = ((_500 - _506) * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) + _506;
    float _520 = ((_501 - _509) * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) + _509;
    float _521 = ((_502 - _512) * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) + _512;
    vec4 _540 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _289) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _290) + cbTextureTilingScale._m0[14u].w));
    vec4 _559 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _289) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _290) + cbTextureTilingScale._m0[20u].w));
    vec4 _582 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _289) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _290) + cbTextureTilingScale._m0[4u].w));
    vec4 _599 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _601 = _599.x;
    float _602 = _599.y;
    float _603 = _599.z;
    float _610 = ((_582.x - _601) * _420) + _601;
    float _611 = ((_582.y - _602) * _420) + _602;
    float _612 = ((_582.z - _603) * _420) + _603;
    vec4 _624 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _289) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _290) + cbTextureTilingScale._m0[2u].w));
    float _637 = ((_624.z - _612) * _493) + _612;
    float _640 = ((((_624.x - _610) * _493) + _610) * 2.0) + (-1.0);
    float _641 = ((((_624.y - _611) * _493) + _611) * 2.0) + (-1.0);
    float _642 = dot(vec2(_640, _641), vec2(_640, _641));
    float _3679 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _647 = sqrt(1.0 - (isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))));
    vec4 _660 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _678 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _289) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _290) + cbTextureTilingScale._m0[11u].w));
    float _680 = _678.x;
    float _681 = 1.0 - _680;
    float _694 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_680 - _681) * cbMtdParam._m0[24u].z) + _681) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3690 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _702 = (_695 * ((_540.x * cbMtdParam._m0[18u].x) - _519)) + _519;
    float _703 = (_695 * ((_540.y * cbMtdParam._m0[18u].y) - _520)) + _520;
    float _704 = (_695 * ((_540.z * cbMtdParam._m0[18u].z) - _521)) + _521;
    float _709 = (((_559.z - _637) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _637;
    vec4 _722 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _289) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _290) + cbTextureTilingScale._m0[15u].w));
    float _729 = (_722.x * 2.0) + (-1.0);
    float _730 = (_722.y * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _3701 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _739 = (_695 * (_722.z - _709)) + _709;
    float _744 = _640 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_559.x * 2.0) + (-1.0)));
    float _745 = _641 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_559.y * 2.0) + (-1.0)));
    float _757 = (((_729 - _744) + (cbMtdParam._m0[21u].x * _744)) * _695) + _744;
    float _758 = (((_730 - _745) + (cbMtdParam._m0[21u].x * _745)) * _695) + _745;
    float _759 = (_695 * (sqrt(1.0 - (isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0)))) - _647)) + _647;
    float _761 = cbMtdParam._m0[22u].x + _660.w;
    float _764 = fma(_759, _236 * NORMAL.x, fma(_758, _243 * TANGENT.x, (_229 * _221) * _757));
    float _767 = fma(_759, _236 * NORMAL.y, fma(_758, _243 * TANGENT.y, (_229 * _222) * _757));
    float _770 = fma(_759, _236 * NORMAL.z, fma(_758, _243 * TANGENT.z, (_229 * _223) * _757));
    float _774 = inversesqrt(dot(vec3(_764, _767, _770), vec3(_764, _767, _770)));
    float _775 = _774 * _764;
    float _776 = _774 * _767;
    float _777 = _774 * _770;
    float _3712 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _778 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _3734 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _3745 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3756 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _796 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _848 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _838);
    float _849 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _838);
    float _850 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _838);
    float _854 = inversesqrt(dot(vec3(_848, _849, _850), vec3(_848, _849, _850)));
    float _855 = _848 * _854;
    float _856 = _849 * _854;
    float _857 = _850 * _854;
    float _863 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _864 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _882 = fma(_777, cbSceneParam._m0[5u].z, fma(_776, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _775));
    float _885 = fma(_777, cbSceneParam._m0[6u].z, fma(_776, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _775));
    float _888 = fma(_777, cbSceneParam._m0[7u].z, fma(_776, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _775));
    uint _902 = (_270 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_902].z;
    float _3767 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    vec4 _922 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _863, cbSceneParam._m0[86u].y * _864));
    float _926 = ((isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * TEXCOORD_5.w) * _922.x;
    float _927 = dot(vec3(_775, _776, _777), vec3(_855, _856, _857));
    float _930 = _927 * 2.0;
    float _934 = (_930 * _775) - _855;
    float _935 = (_930 * _776) - _856;
    float _936 = (_930 * _777) - _857;
    float _940 = abs(dot(vec3(_855, _856, _857), vec3(_775, _776, _777)));
    float _3800 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _942 = sqrt(_778);
    float _955 = exp2((_942 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_942 * 3.0));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1296;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1021 = fma(_995, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987));
        float _1025 = fma(_995, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987));
        float _1029 = fma(_995, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987));
        float _1054 = _987 + _775;
        float _1055 = _991 + _776;
        float _1056 = _995 + _777;
        float _1066 = fma(_1056, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054)) - _1021;
        float _1067 = fma(_1056, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054)) - _1025;
        float _1068 = fma(_1056, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054)) - _1029;
        float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
        float _1085 = ((_1072 * _1066) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1021 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1072 * _1067) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1025 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1072 * _1068) / cbModelParam._m0[34u].z) + ((((((_1029 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        float _1124 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1090.x + (-0.5));
        float _1126 = _1124 * (_1090.y + (-0.5));
        float _1127 = _1124 * (_1090.z + (-0.5));
        float _1134 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1097.x + (-0.5));
        float _1136 = _1134 * (_1097.y + (-0.5));
        float _1137 = _1134 * (_1097.z + (-0.5));
        float _1144 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1104.x + (-0.5));
        float _1146 = _1144 * (_1104.y + (-0.5));
        float _1147 = _1144 * (_1104.z + (-0.5));
        float _1154 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1111.x + (-0.5));
        float _1156 = _1154 * (_1111.y + (-0.5));
        float _1157 = _1154 * (_1111.z + (-0.5));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = _1125 * 0.5;
        float _1162 = _1135 * 0.5;
        float _1163 = _1145 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1178 = (dot(vec3(_775, _776, _777), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1188 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3848 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1190 + 1.0))) + _1195) * _1158;
        float _1205 = _1126 * 0.5;
        float _1206 = _1136 * 0.5;
        float _1207 = _1146 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_775, _776, _777), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3881 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1232 + 1.0))) + _1237) * _1159;
        float _1247 = _1127 * 0.5;
        float _1248 = _1137 * 0.5;
        float _1249 = _1147 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_775, _776, _777), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3892 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3903 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3914 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1274 + 1.0))) + _1279) * _1160;
        _1296 = _1127;
        _1298 = _1126;
        _1299 = _1125;
        _1300 = _1137;
        _1301 = _1136;
        _1302 = _1135;
        _1303 = _1147;
        _1304 = _1146;
        _1305 = _1145;
        _1306 = _1160;
        _1307 = _1159;
        _1308 = _1158;
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
    }
    else
    {
        _1296 = _1297;
        _1298 = _1297;
        _1299 = _1297;
        _1300 = _1297;
        _1301 = _1297;
        _1302 = _1297;
        _1303 = _1297;
        _1304 = _1297;
        _1305 = _1297;
        _1306 = _1297;
        _1307 = _1297;
        _1308 = _1297;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1335 = fma(_995, cbModelParam._m0[30u].z, fma(_991, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _987));
        float _1339 = fma(_995, cbModelParam._m0[31u].z, fma(_991, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _987));
        float _1343 = fma(_995, cbModelParam._m0[32u].z, fma(_991, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _987));
        float _1366 = _987 + _775;
        float _1367 = _991 + _776;
        float _1368 = _995 + _777;
        float _1378 = fma(_1368, cbModelParam._m0[30u].z, fma(_1367, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1366)) - _1335;
        float _1379 = fma(_1368, cbModelParam._m0[31u].z, fma(_1367, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1366)) - _1339;
        float _1380 = fma(_1368, cbModelParam._m0[32u].z, fma(_1367, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1366)) - _1343;
        float _1384 = inversesqrt(dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380)));
        float _1397 = ((_1384 * _1378) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1335 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1384 * _1379) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1339 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1384 * _1380) / cbModelParam._m0[35u].z) + ((((((_1343 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        float _1434 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1401.x + (-0.5));
        float _1436 = _1434 * (_1401.y + (-0.5));
        float _1437 = _1434 * (_1401.z + (-0.5));
        float _1444 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1408.x + (-0.5));
        float _1446 = _1444 * (_1408.y + (-0.5));
        float _1447 = _1444 * (_1408.z + (-0.5));
        float _1454 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1415.x + (-0.5));
        float _1456 = _1454 * (_1415.y + (-0.5));
        float _1457 = _1454 * (_1415.z + (-0.5));
        float _1464 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1422.x + (-0.5));
        float _1466 = _1464 * (_1422.y + (-0.5));
        float _1467 = _1464 * (_1422.z + (-0.5));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = _1435 * 0.5;
        float _1472 = _1445 * 0.5;
        float _1473 = _1455 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_775, _776, _777), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _3955 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _3966 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _3977 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1498 + 1.0))) + _1503) * _1468;
        float _1513 = _1436 * 0.5;
        float _1514 = _1446 * 0.5;
        float _1515 = _1456 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_775, _776, _777), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _3988 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _3999 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4010 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_1540 + 1.0))) + _1545) * _1469;
        float _1555 = _1437 * 0.5;
        float _1556 = _1447 * 0.5;
        float _1557 = _1457 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_775, _776, _777), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4043 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1582 + 1.0))) + _1587) * _1470;
        _1604 = _1437;
        _1605 = _1436;
        _1606 = _1435;
        _1607 = _1447;
        _1608 = _1446;
        _1609 = _1445;
        _1610 = _1457;
        _1611 = _1456;
        _1612 = _1455;
        _1613 = _1470;
        _1614 = _1469;
        _1615 = _1468;
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
    }
    else
    {
        _1604 = _1297;
        _1605 = _1297;
        _1606 = _1297;
        _1607 = _1297;
        _1608 = _1297;
        _1609 = _1297;
        _1610 = _1297;
        _1611 = _1297;
        _1612 = _1297;
        _1613 = _1297;
        _1614 = _1297;
        _1615 = _1297;
        _1616 = 0.0;
        _1617 = 0.0;
        _1618 = 0.0;
    }
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1309)) + _1309;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1310)) + _1310;
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1311)) + _1311;
    float _1651 = fma(_1630, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1628 * cbSceneParam._m0[89u].x));
    float _1654 = fma(_1630, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1628 * cbSceneParam._m0[90u].x));
    float _1657 = fma(_1630, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1628));
    float _1672 = _934 * 0.5;
    float _1673 = _935 * 0.5;
    float _1674 = _936 * 0.5;
    float _1675 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1678 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1681 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1715;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1688 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1296, _1300, _1303, _1306));
        float _1692 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1696 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1703 = dot(vec4(cbModelParam._m0[39u]), vec4(_1672, _1673, _1674, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1703) ? 0.0 : (isnan(0.0) ? _1703 : max(0.0, _1703))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1726;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1717 = dot(vec4(cbModelParam._m0[40u]), vec4(_1672, _1673, _1674, 1.0));
        _1726 = dot(vec3(isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1717) ? 0.0 : (isnan(0.0) ? _1717 : max(0.0, _1717))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1726 = 1.0;
    }
    float _1730 = (_1726 * cbModelParam._m0[1u].x) + (_1715 * (1.0 - cbModelParam._m0[1u].x));
    float _1740 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _778);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1740 : min(cbModelParam._m0[25u].z, _1740));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1788 = fma(_995, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987)) + cbModelParam._m0[13u].w;
        float _1792 = fma(_995, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987)) + cbModelParam._m0[14u].w;
        float _1796 = fma(_995, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987)) + cbModelParam._m0[15u].w;
        float _1799 = fma(_936, cbModelParam._m0[13u].z, fma(_935, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934));
        float _1802 = fma(_936, cbModelParam._m0[14u].z, fma(_935, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934));
        float _1805 = fma(_936, cbModelParam._m0[15u].z, fma(_935, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934));
        float _1833;
        if (_1799 > 0.0)
        {
            _1833 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1833 = frontier_phi_14_12_ladder;
        }
        float _2054;
        if (_1802 > 0.0)
        {
            _2054 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2054 = frontier_phi_23_19_ladder;
        }
        float _2300;
        if (_1805 > 0.0)
        {
            _2300 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2300 = frontier_phi_35_30_ladder;
        }
        float _2302 = isnan(_2054) ? _1833 : (isnan(_1833) ? _2054 : min(_1833, _2054));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1799) + _1788;
        float _2308 = (_2303 * _1802) + _1792;
        float _2309 = (_2303 * _1805) + _1796;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2312 = (-1.0) - _2310;
        float _2314 = _2310 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2309 > _2314) || ((_2309 < _2312) || ((_2308 > _2314) || ((_2308 < _2312) || ((_2307 < _2312) || (_2307 > _2314))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2433 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2309, cbModelParam._m0[9u].z, fma(_2308, cbModelParam._m0[9u].y, _2307 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2309, cbModelParam._m0[10u].z, fma(_2308, cbModelParam._m0[10u].y, _2307 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2309, cbModelParam._m0[11u].z, fma(_2308, cbModelParam._m0[11u].y, _2307 * cbModelParam._m0[11u].x))), _1741);
            frontier_phi_13_35_ladder = _2433.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2433.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2433.x * cbModelParam._m0[1u].y;
        }
        _1821 = frontier_phi_13_35_ladder_2;
        _1823 = frontier_phi_13_35_ladder_1;
        _1825 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_934, _935, _936), _1741);
        _1821 = _1809.x * cbModelParam._m0[1u].y;
        _1823 = _1809.y * cbModelParam._m0[1u].y;
        _1825 = _1809.z * cbModelParam._m0[1u].y;
    }
    float _1829 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _778);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1829 : min(cbModelParam._m0[25u].w, _1829));
    float _1919;
    float _1921;
    float _1923;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1883 = fma(_995, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987)) + cbModelParam._m0[21u].w;
        float _1887 = fma(_995, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987)) + cbModelParam._m0[22u].w;
        float _1891 = fma(_995, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987)) + cbModelParam._m0[23u].w;
        float _1894 = fma(_936, cbModelParam._m0[21u].z, fma(_935, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934));
        float _1897 = fma(_936, cbModelParam._m0[22u].z, fma(_935, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934));
        float _1900 = fma(_936, cbModelParam._m0[23u].z, fma(_935, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934));
        float _2059;
        if (_1894 > 0.0)
        {
            _2059 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2059 = frontier_phi_25_21_ladder;
        }
        float _2327;
        if (_1897 > 0.0)
        {
            _2327 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2327 = frontier_phi_37_32_ladder;
        }
        float _2532;
        if (_1900 > 0.0)
        {
            _2532 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2532 = frontier_phi_46_43_ladder;
        }
        float _2534 = isnan(_2327) ? _2059 : (isnan(_2059) ? _2327 : min(_2059, _2327));
        float _2535 = isnan(_2532) ? _2534 : (isnan(_2534) ? _2532 : min(_2534, _2532));
        float _2539 = (_2535 * _1894) + _1883;
        float _2540 = (_2535 * _1897) + _1887;
        float _2541 = (_2535 * _1900) + _1891;
        float _2542 = _2535 * 9.9999997473787516355514526367188e-05;
        float _2543 = (-1.0) - _2542;
        float _2545 = _2542 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2541 > _2545) || ((_2541 < _2543) || ((_2540 > _2545) || ((_2540 < _2543) || ((_2539 < _2543) || (_2539 > _2545))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2541, cbModelParam._m0[17u].z, fma(_2540, cbModelParam._m0[17u].y, _2539 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2541, cbModelParam._m0[18u].z, fma(_2540, cbModelParam._m0[18u].y, _2539 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2541, cbModelParam._m0[19u].z, fma(_2540, cbModelParam._m0[19u].y, _2539 * cbModelParam._m0[19u].x))), _1830);
            frontier_phi_22_46_ladder = _2740.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2740.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2740.x * cbModelParam._m0[1u].z;
        }
        _1919 = frontier_phi_22_46_ladder_2;
        _1921 = frontier_phi_22_46_ladder_1;
        _1923 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1903 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_934, _935, _936), _1830);
        _1919 = _1903.x * cbModelParam._m0[1u].z;
        _1921 = _1903.y * cbModelParam._m0[1u].z;
        _1923 = _1903.z * cbModelParam._m0[1u].z;
    }
    float _1935 = ((((1.0 - _955) * ((_942 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_955 * _942)) * _926;
    float _1936 = _1935 * ((cbModelParam._m0[1u].w * (_1919 - _1821)) + _1821);
    float _1937 = _1935 * ((cbModelParam._m0[1u].w * (_1921 - _1823)) + _1823);
    float _1938 = _1935 * ((cbModelParam._m0[1u].w * (_1923 - _1825)) + _1825);
    float _1941 = fma(_1938, cbSceneParam._m0[89u].z, fma(_1937, cbSceneParam._m0[89u].y, _1936 * cbSceneParam._m0[89u].x));
    float _1944 = fma(_1938, cbSceneParam._m0[90u].z, fma(_1937, cbSceneParam._m0[90u].y, _1936 * cbSceneParam._m0[90u].x));
    float _1947 = fma(_1938, cbSceneParam._m0[91u].z, fma(_1937, cbSceneParam._m0[91u].y, _1936 * cbSceneParam._m0[91u].x));
    vec4 _1955 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_863, _864));
    float _1957 = _1955.w;
    float _1969 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1957);
    float _1970 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1957);
    float _1971 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1957);
    uvec4 _1975 = floatBitsToUint(cbInstanceData._m0[_270 + 5u]);
    uint _1977 = _1975.x * 14u;
    uint _1978 = _1977 + 13u;
    float _1985 = _926 + (-1.0);
    float _1990 = (cbLight._m0[_1978].x * _1985) + 1.0;
    float _1991 = (cbLight._m0[_1978].y * _1985) + 1.0;
    float _1992 = (cbLight._m0[_1978].z * _1985) + 1.0;
    float _1993 = (cbLight._m0[_1978].w * _1985) + 1.0;
    uint _1994 = _1977 + 5u;
    float _2000 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
    uint _2004 = _1977 + 4u;
    float _2013 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2017 = _1977 | 1u;
    float _2028 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_775, _776, _777));
    float _2031 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_775, _776, _777));
    float _4179 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _4190 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2036 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * 0.3183098733425140380859375;
    float _2038 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.3183098733425140380859375;
    float _2045 = ((cbLight._m0[_1994].x * _2000) * _2038) + (((cbLight._m0[_2004].x * _1969) * _2013) * _2036);
    float _2046 = ((_2000 * cbLight._m0[_1994].y) * _2038) + (((cbLight._m0[_2004].y * _1970) * _2013) * _2036);
    float _2047 = ((_2000 * cbLight._m0[_1994].z) * _2038) + (((cbLight._m0[_2004].z * _1971) * _2013) * _2036);
    uvec4 _2051 = floatBitsToUint(cbLight._m0[_1977 + 12u]);
    bool _2053 = _2051.x == 0u;
    float _2064;
    float _2066;
    float _2068;
    if (_2053)
    {
        _2064 = _2045;
        _2066 = _2046;
        _2068 = _2047;
    }
    else
    {
        uint _2072 = _1977 + 6u;
        float _2088 = (dot(vec3(cbLight._m0[_1977 + 2u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2089 = _2088 * _2088;
        float _4201 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2090 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2091 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2064 = (((cbLight._m0[_2072].x * 0.3183098733425140380859375) * _2090) * _2091) + _2045;
        _2066 = (((cbLight._m0[_2072].y * 0.3183098733425140380859375) * _2090) * _2091) + _2046;
        _2068 = (((cbLight._m0[_2072].z * 0.3183098733425140380859375) * _2090) * _2091) + _2047;
    }
    bool _2071 = _2051.y == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2071)
    {
        _2109 = _2064;
        _2111 = _2066;
        _2113 = _2068;
    }
    else
    {
        uint _2271 = _1977 + 7u;
        float _2287 = (dot(vec3(cbLight._m0[_1977 + 3u].xyz), vec3(_775, _776, _777)) * 0.5) + 0.5;
        float _2288 = _2287 * _2287;
        float _4217 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2289 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _2290 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2109 = (((cbLight._m0[_2271].x * 0.3183098733425140380859375) * _2289) * _2290) + _2064;
        _2111 = (((cbLight._m0[_2271].y * 0.3183098733425140380859375) * _2289) * _2290) + _2066;
        _2113 = (((cbLight._m0[_2271].z * 0.3183098733425140380859375) * _2289) * _2290) + _2068;
    }
    uint _2116 = _1977 + 8u;
    float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _778) * 0.949999988079071044921875);
    float _2130 = _2129 * _2129;
    float _2131 = cbLight._m0[_1977].x + _855;
    float _2132 = cbLight._m0[_1977].y + _856;
    float _2133 = cbLight._m0[_1977].z + _857;
    float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
    float _2138 = _2137 * _2131;
    float _2139 = _2137 * _2132;
    float _2140 = _2137 * _2133;
    float _2141 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_1977].xyz));
    float _4233 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _4244 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _2145 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _2146 = dot(vec3(_775, _776, _777), vec3(_2138, _2139, _2140));
    float _4255 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _2150 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2138, _2139, _2140));
    float _4266 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2154 = _2130 * _2130;
    float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
    float _2169 = (exp2(log2(1.0 - (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2170 = 1.0 - _2130;
    float _2181 = (0.5 / (((_2145 * ((_2144 * _2170) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2170) + _2130) * _2144))) * _2144;
    float _4277 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
    uint _2197 = _1977 + 9u;
    float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _778) * 0.949999988079071044921875);
    float _2209 = _2208 * _2208;
    float _2210 = cbLight._m0[_2017].x + _855;
    float _2211 = cbLight._m0[_2017].y + _856;
    float _2212 = cbLight._m0[_2017].z + _857;
    float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
    float _2217 = _2216 * _2210;
    float _2218 = _2216 * _2211;
    float _2219 = _2216 * _2212;
    float _2220 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2017].xyz));
    float _4288 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2224 = dot(vec3(_775, _776, _777), vec3(_2217, _2218, _2219));
    float _4299 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2228 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2217, _2218, _2219));
    float _4310 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = _2209 * _2209;
    float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
    float _2245 = (exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2246 = 1.0 - _2209;
    float _2256 = (0.5 / (((_2145 * ((_2223 * _2246) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2246) + _2209) * _2223))) * _2223;
    float _4321 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
    float _2268 = (((_2245 * cbLight._m0[_2197].x) * _2258) * _2000) + ((((cbLight._m0[_2116].x * _1969) * _2169) * _2183) * _2013);
    float _2269 = (((_2245 * cbLight._m0[_2197].y) * _2258) * _2000) + ((((cbLight._m0[_2116].y * _1970) * _2169) * _2183) * _2013);
    float _2270 = (((_2245 * cbLight._m0[_2197].z) * _2258) * _2000) + ((((cbLight._m0[_2116].z * _1971) * _2169) * _2183) * _2013);
    float _2332;
    float _2334;
    float _2336;
    if (_2053)
    {
        _2332 = _2268;
        _2334 = _2269;
        _2336 = _2270;
    }
    else
    {
        uint _2338 = _1977 + 2u;
        uint _2342 = _1977 + 10u;
        float _2356 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2338].w)) * _778) * 0.949999988079071044921875);
        float _2357 = _2356 * _2356;
        float _2358 = cbLight._m0[_2338].x + _855;
        float _2359 = cbLight._m0[_2338].y + _856;
        float _2360 = cbLight._m0[_2338].z + _857;
        float _2364 = inversesqrt(dot(vec3(_2358, _2359, _2360), vec3(_2358, _2359, _2360)));
        float _2365 = _2364 * _2358;
        float _2366 = _2364 * _2359;
        float _2367 = _2364 * _2360;
        float _2368 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2338].xyz));
        float _4332 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2372 = dot(vec3(_775, _776, _777), vec3(_2365, _2366, _2367));
        float _4343 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _2376 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_2365, _2366, _2367));
        float _4354 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2380 = _2357 * _2357;
        float _2384 = ((_2375 * _2375) * (_2380 + (-1.0))) + 1.0;
        float _2393 = (exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2394 = 1.0 - _2357;
        float _2404 = (0.5 / (((_2145 * ((_2371 * _2394) + _2357)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2394) + _2357) * _2371))) * _2371;
        float _4365 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2406 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2380 / ((_2384 * _2384) * 3.141590118408203125));
        float _2407 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2332 = (((_2393 * cbLight._m0[_2342].x) * _2406) * _2407) + _2268;
        _2334 = (((_2393 * cbLight._m0[_2342].y) * _2406) * _2407) + _2269;
        _2336 = (((_2393 * cbLight._m0[_2342].z) * _2406) * _2407) + _2270;
    }
    float _2442;
    float _2444;
    float _2446;
    if (_2071)
    {
        _2442 = _2332;
        _2444 = _2334;
        _2446 = _2336;
    }
    else
    {
        uint _2453 = _1977 + 3u;
        uint _2457 = _1977 + 11u;
        float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _778) * 0.949999988079071044921875);
        float _2472 = _2471 * _2471;
        float _2473 = cbLight._m0[_2453].x + _855;
        float _2474 = cbLight._m0[_2453].y + _856;
        float _2475 = cbLight._m0[_2453].z + _857;
        float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
        float _2480 = _2479 * _2473;
        float _2481 = _2479 * _2474;
        float _2482 = _2479 * _2475;
        float _2483 = dot(vec3(_775, _776, _777), vec3(cbLight._m0[_2453].xyz));
        float _4381 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2487 = dot(vec3(_775, _776, _777), vec3(_2480, _2481, _2482));
        float _4392 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2491 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2480, _2481, _2482));
        float _4403 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2495 = _2472 * _2472;
        float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
        float _2508 = (exp2(log2(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2509 = 1.0 - _2472;
        float _2519 = (0.5 / (((_2145 * ((_2486 * _2509) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2509) + _2472) * _2486))) * _2486;
        float _4414 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2521 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
        float _2522 = isnan(1.0) ? _1993 : (isnan(_1993) ? 1.0 : min(_1993, 1.0));
        _2442 = (((_2508 * cbLight._m0[_2457].x) * _2521) * _2522) + _2332;
        _2444 = (((_2508 * cbLight._m0[_2457].y) * _2521) * _2522) + _2334;
        _2446 = (((_2508 * cbLight._m0[_2457].z) * _2521) * _2522) + _2336;
    }
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    if (_1975.y == 0u)
    {
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2597;
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2597;
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2597;
        uvec4 _2612 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2613 = _2612.x;
        uint _2624 = uint((float(_2612.y) * floor(float(uint(cbSceneParam._m0[85u].y * _864) / _2613))) + floor(float(uint(cbSceneParam._m0[85u].x * _863) / _2613)));
        float _2634 = (log2(_2600 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2635 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        uint _2638 = uint(isnan(14.0) ? _2635 : (isnan(_2635) ? 14.0 : min(_2635, 14.0)));
        uvec4 _2643 = texelFetch(g_lightClusterGridBuffer, int(((_2638 << 2u) + (_2624 << 6u)) >> 2u));
        uint _2644 = _2643.x;
        uint _2645 = _2612.z;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        if (((((1u << ((_2645 >> 4u) & 15u)) + 4294967295u) & _2644) == 0u) || ((_2645 & 240u) == 0u))
        {
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
        }
        else
        {
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2756;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            uint _2896 = 0u;
            uint _2905;
            bool _2906;
            for (;;)
            {
                _2905 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_2896 << 2u)) >> 2u)).x;
                _2906 = _2905 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2906)
                {
                    frontier_phi_61_pred = _2890;
                    frontier_phi_61_pred_1 = _2895;
                    frontier_phi_61_pred_2 = _2894;
                    frontier_phi_61_pred_3 = _2893;
                    frontier_phi_61_pred_4 = _2892;
                    frontier_phi_61_pred_5 = _2891;
                }
                else
                {
                    float _3014;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    uint _3020;
                    _3014 = _2890;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2895;
                    _3020 = _2905;
                    float _2946;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    for (;;)
                    {
                        uint _3024 = uint(findLSB(_3020)) + (_2896 << 5u);
                        uint _3021 = (_3020 + 4294967295u) & _3020;
                        uint _3026 = _3024 * 48u;
                        vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 3u)).x));
                        uint _3046 = (_3024 * 48u) + 4u;
                        vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 3u)).x));
                        uint _3065 = (_3024 * 48u) + 8u;
                        vec3 _3076 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x));
                        float _3080 = _3040.x - _2598;
                        float _3081 = _3040.y - _2599;
                        float _3082 = _3040.z - _2600;
                        float _3083 = dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082));
                        float _3086 = inversesqrt(_3083);
                        float _3087 = _3086 * _3080;
                        float _3088 = _3086 * _3081;
                        float _3089 = _3086 * _3082;
                        float _3090 = dot(vec3(_882, _885, _888), vec3(_3087, _3088, _3089));
                        float _3095 = 1.0 - (_3083 * _3040.w);
                        float _4440 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                        float _3096 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                        float _3097 = sqrt(_3083) * _3059.w;
                        float _3100 = 1.39999997615814208984375 / (_3097 + 1.39999997615814208984375);
                        float _3101 = _3100 * _3100;
                        float _3104 = ((1.0 - _3101) * _3090) + _3101;
                        float _3107 = _3097 * _3097;
                        float _3111 = ((isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0))) * _3096) / ((_3107 * 0.699999988079071044921875) + 1.0);
                        float _3115 = (-0.0) - _2598;
                        float _3116 = (-0.0) - _2599;
                        float _3117 = (-0.0) - _2600;
                        float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3132 = exp2(log2(1.0 / ((_3107 * 3.5) + 5.0)) * 0.25);
                        float _3133 = 1.0 - _942;
                        float _3140 = sqrt(1.0 - ((1.0 - (_3133 * _3133)) * (1.0 - (_3132 * _3132))));
                        float _3141 = _3140 * _3140;
                        float _3142 = _3141 * _3141;
                        float _3143 = _3122 + _3087;
                        float _3144 = _3123 + _3088;
                        float _3145 = _3124 + _3089;
                        float _3149 = inversesqrt(dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145)));
                        float _3153 = dot(vec3(_882, _885, _888), vec3(_3122, _3123, _3124));
                        float _4456 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3156 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                        float _3157 = dot(vec3(_882, _885, _888), vec3(_3149 * _3143, _3149 * _3144, _3149 * _3145));
                        float _4467 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                        float _3160 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
                        float _3164 = ((_3160 * _3160) * (_3142 + (-1.0))) + 1.0;
                        float _3165 = _3100 * _3141;
                        float _3166 = _3165 * _3165;
                        float _3169 = ((1.0 - _3166) * _3090) + _3166;
                        float _4478 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                        float _3170 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3171 = 1.0 - _3141;
                        float _3181 = (0.5 / (((_3170 * ((_3156 * _3171) + _3141)) + 9.9999999392252902907785028219223e-09) + (((_3170 * _3171) + _3141) * _3156))) * _3170;
                        float _4489 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3192 = (((_3142 * 3.1415927410125732421875) * (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) / ((_3164 * _3164) * ((_3107 * 2.1991131305694580078125) + 3.141590118408203125))) * _3096;
                        _2949 = (_3111 * _3059.x) + _3017;
                        _2950 = (_3111 * _3059.y) + _3018;
                        _2951 = (_3111 * _3059.z) + _3019;
                        _2946 = (_3192 * _3076.x) + _3014;
                        _2947 = (_3192 * _3076.y) + _3015;
                        _2948 = (_3192 * _3076.z) + _3016;
                        if (_3021 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3014 = _2946;
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _2951;
                            _3020 = _3021;
                        }
                    }
                    frontier_phi_61_pred = _2946;
                    frontier_phi_61_pred_1 = _2951;
                    frontier_phi_61_pred_2 = _2950;
                    frontier_phi_61_pred_3 = _2949;
                    frontier_phi_61_pred_4 = _2948;
                    frontier_phi_61_pred_5 = _2947;
                }
                _2746 = frontier_phi_61_pred;
                _2756 = frontier_phi_61_pred_1;
                _2754 = frontier_phi_61_pred_2;
                _2752 = frontier_phi_61_pred_3;
                _2750 = frontier_phi_61_pred_4;
                _2748 = frontier_phi_61_pred_5;
                uint _2897 = _2896 + 1u;
                if (_2897 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2890 = _2746;
                    _2891 = _2748;
                    _2892 = _2750;
                    _2893 = _2752;
                    _2894 = _2754;
                    _2895 = _2756;
                    _2896 = _2897;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
        }
        uvec4 _2759 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2760 = _2759.z;
        uint _2762 = (_2760 >> 8u) & 15u;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        if (((4294967295u << _2762) & _2644) == 0u)
        {
            _2858 = _2745;
            _2860 = _2747;
            _2862 = _2749;
            _2864 = _2751;
            _2866 = _2753;
            _2868 = _2755;
        }
        else
        {
            float _2883 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
            float _2884 = _2883 * _2598;
            float _2885 = _2883 * _2599;
            float _2886 = _2883 * _2600;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2762 < ((_2760 >> 12u) & 15u))
            {
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2997 = _2745;
                float _2998 = _2747;
                float _2999 = _2749;
                float _3000 = _2751;
                float _3001 = _2753;
                float _3002 = _2755;
                uint _3003 = _2762;
                uint _3012;
                bool _3013;
                for (;;)
                {
                    _3012 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_3003 << 2u)) >> 2u)).x;
                    _3013 = _3012 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3013)
                    {
                        frontier_phi_67_pred = _3000;
                        frontier_phi_67_pred_1 = _3001;
                        frontier_phi_67_pred_2 = _3002;
                        frontier_phi_67_pred_3 = _2999;
                        frontier_phi_67_pred_4 = _2998;
                        frontier_phi_67_pred_5 = _2997;
                    }
                    else
                    {
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3210 = _2997;
                        float _3211 = _2998;
                        float _3212 = _2999;
                        float _3213 = _3000;
                        float _3214 = _3001;
                        float _3215 = _3002;
                        uint _3216 = _3012;
                        uint _3217;
                        vec4 _3242;
                        float _3243;
                        vec4 _3258;
                        vec3 _3270;
                        vec4 _3285;
                        vec4 _3300;
                        float _3346;
                        bool _3347;
                        for (;;)
                        {
                            uint _3227 = ((_3003 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3216));
                            _3217 = (_3216 + 4294967295u) & _3216;
                            uint _3229 = _3227 * 40u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            _3243 = _3242.w;
                            uint _3245 = (_3227 * 40u) + 4u;
                            _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            uint _3260 = (_3227 * 40u) + 8u;
                            _3270 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x));
                            uint _3272 = (_3227 * 40u) + 16u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3287 = (_3227 * 40u) + 20u;
                            _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3302 = (_3227 * 40u) + 24u;
                            vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3321 = (_3227 * 40u) + 28u;
                            vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            _3346 = fma(_2600, _3334.z, fma(_2599, _3334.y, _3334.x * _2598)) + _3334.w;
                            _3347 = !((fma(_2600, _3315.z, fma(_2599, _3315.y, _3315.x * _2598)) + _3315.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3347)
                            {
                                float _3374 = _3242.x - _2598;
                                float _3375 = _3242.y - _2599;
                                float _3376 = _3242.z - _2600;
                                float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                                float _3380 = inversesqrt(_3377);
                                float _3381 = _3380 * _3374;
                                float _3382 = _3380 * _3375;
                                float _3383 = _3380 * _3376;
                                float _3387 = 1.0 - (_3377 / (_3243 * _3243));
                                float _4500 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                                float _3392 = sqrt(_3377) * _3258.w;
                                float _3394 = 1.39999997615814208984375 / (_3392 + 1.39999997615814208984375);
                                float _3395 = _3394 * _3394;
                                float _3398 = ((1.0 - _3395) * dot(vec3(_3381, _3382, _3383), vec3(_882, _885, _888))) + _3395;
                                float _3401 = _3392 * _3392;
                                float _3405 = (fma(_2600, _3285.z, fma(_2599, _3285.y, _3285.x * _2598)) + _3285.w) / _3346;
                                float _3406 = (fma(_2600, _3300.z, fma(_2599, _3300.y, _3300.x * _2598)) + _3300.w) / _3346;
                                float _3410 = 1.0 - dot(vec2(_3405, _3406), vec2(_3405, _3406));
                                float _4516 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3411 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                                float _3412 = _3411 * (((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3388) / ((_3401 * 0.699999988079071044921875) + 1.0));
                                float _3424 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                                float _3425 = 1.0 - _942;
                                float _3432 = sqrt(1.0 - ((1.0 - (_3425 * _3425)) * (1.0 - (_3424 * _3424))));
                                float _3433 = _3432 * _3432;
                                float _3434 = _3433 * _3433;
                                float _3435 = _3381 - _2884;
                                float _3436 = _3382 - _2885;
                                float _3437 = _3383 - _2886;
                                float _3441 = inversesqrt(dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437)));
                                float _3445 = dot(vec3(_882, _885, _888), vec3((-0.0) - _2884, (-0.0) - _2885, (-0.0) - _2886));
                                float _4527 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3448 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                                float _3449 = dot(vec3(_882, _885, _888), vec3(_3441 * _3435, _3441 * _3436, _3441 * _3437));
                                float _4538 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3452 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3456 = ((_3452 * _3452) * (_3434 + (-1.0))) + 1.0;
                                float _3457 = _3394 * _3433;
                                float _3458 = _3457 * _3457;
                                float _3464 = ((1.0 - _3458) * dot(vec3(_882, _885, _888), vec3(_3381, _3382, _3383))) + _3458;
                                float _4549 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3465 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3466 = 1.0 - _3433;
                                float _3476 = (0.5 / (((_3465 * ((_3448 * _3466) + _3433)) + 9.9999999392252902907785028219223e-09) + (((_3465 * _3466) + _3433) * _3448))) * _3465;
                                float _4560 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3486 = (_3411 * _3388) * (((_3434 * 3.1415927410125732421875) * (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) / ((_3456 * _3456) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3486 * _3270.x;
                                frontier_phi_73_pred_1 = _3486 * _3270.y;
                                frontier_phi_73_pred_2 = _3412 * _3258.z;
                                frontier_phi_73_pred_3 = _3412 * _3258.y;
                                frontier_phi_73_pred_4 = _3412 * _3258.x;
                                frontier_phi_73_pred_5 = _3486 * _3270.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3490 = frontier_phi_73_pred;
                            _3491 = frontier_phi_73_pred_1;
                            _3495 = frontier_phi_73_pred_2;
                            _3494 = frontier_phi_73_pred_3;
                            _3493 = frontier_phi_73_pred_4;
                            _3492 = frontier_phi_73_pred_5;
                            _3200 = _3493 + _3213;
                            _3201 = _3494 + _3214;
                            _3202 = _3495 + _3215;
                            _3197 = _3490 + _3210;
                            _3198 = _3491 + _3211;
                            _3199 = _3492 + _3212;
                            if (_3217 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3217;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3200;
                        frontier_phi_67_pred_1 = _3201;
                        frontier_phi_67_pred_2 = _3202;
                        frontier_phi_67_pred_3 = _3199;
                        frontier_phi_67_pred_4 = _3198;
                        frontier_phi_67_pred_5 = _3197;
                    }
                    _2865 = frontier_phi_67_pred;
                    _2867 = frontier_phi_67_pred_1;
                    _2869 = frontier_phi_67_pred_2;
                    _2863 = frontier_phi_67_pred_3;
                    _2861 = frontier_phi_67_pred_4;
                    _2859 = frontier_phi_67_pred_5;
                    uint _3004 = _3003 + 1u;
                    if (_3004 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2997 = _2859;
                        _2998 = _2861;
                        _2999 = _2863;
                        _3000 = _2865;
                        _3001 = _2867;
                        _3002 = _2869;
                        _3003 = _3004;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2867;
                frontier_phi_55_56_ladder_1 = _2869;
                frontier_phi_55_56_ladder_2 = _2865;
                frontier_phi_55_56_ladder_3 = _2863;
                frontier_phi_55_56_ladder_4 = _2861;
                frontier_phi_55_56_ladder_5 = _2859;
            }
            else
            {
                frontier_phi_55_56_ladder = _2753;
                frontier_phi_55_56_ladder_1 = _2755;
                frontier_phi_55_56_ladder_2 = _2751;
                frontier_phi_55_56_ladder_3 = _2749;
                frontier_phi_55_56_ladder_4 = _2747;
                frontier_phi_55_56_ladder_5 = _2745;
            }
            _2858 = frontier_phi_55_56_ladder_5;
            _2860 = frontier_phi_55_56_ladder_4;
            _2862 = frontier_phi_55_56_ladder_3;
            _2864 = frontier_phi_55_56_ladder_2;
            _2866 = frontier_phi_55_56_ladder;
            _2868 = frontier_phi_55_56_ladder_1;
        }
        float _2873 = isnan(1.0) ? _926 : (isnan(_926) ? 1.0 : min(_926, 1.0));
        _2657 = (_2873 * _2864) + _2109;
        _2659 = (_2873 * _2866) + _2111;
        _2661 = (_2873 * _2868) + _2113;
        _2663 = ((_2858 * 0.039999999105930328369140625) * _2873) + _2442;
        _2665 = ((_2860 * 0.039999999105930328369140625) * _2873) + _2444;
        _2667 = ((_2862 * 0.039999999105930328369140625) * _2873) + _2446;
    }
    else
    {
        _2657 = _2109;
        _2659 = _2111;
        _2661 = _2113;
        _2663 = _2442;
        _2665 = _2444;
        _2667 = _2446;
    }
    float _4576 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4587 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4598 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    uint _2687 = _270 + 6u;
    float _2695 = _863 / cbSceneParam._m0[86u].x;
    float _2696 = _864 / cbSceneParam._m0[86u].y;
    vec4 _2710 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2695, _2696, (log2((isnan(cbSceneParam._m0[77u].w) ? _796 : (isnan(_796) ? cbSceneParam._m0[77u].w : min(_796, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2712 = _2710.x;
    float _2713 = _2710.y;
    float _2714 = _2710.z;
    float _2715 = _2710.w;
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    if (_796 > cbSceneParam._m0[78u].w)
    {
        float _2770 = isnan(_796) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _796 : min(cbSceneParam._m0[80u].w, _796));
        float _2771 = _2770 / _796;
        float _2782 = _2771 * _848;
        float _2783 = _849 * _2771;
        float _2784 = (-0.0) - _2783;
        float _2786 = _2771 * _850;
        float _2788 = (cbSceneParam._m0[77u].w * _2784) / _2770;
        float _2789 = _2788 + cbSceneParam._m0[79u].w;
        float _2790 = cbSceneParam._m0[79u].w - _2783;
        float _2796 = sqrt(((_2782 * _2782) + (_2783 * _2783)) + (_2786 * _2786));
        float _2799 = (1.0 - (cbSceneParam._m0[77u].w / _2770)) * _2796;
        float _2804 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2806 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2959;
        if (abs((_2784 - _2788) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2959 = ((((_2789 > 0.0) ? exp2(_2804 * _2789) : (2.0 - exp2(_2806 * _2789))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2799;
        }
        else
        {
            float _2919 = 1.0 / cbSceneParam._m0[80u].x;
            float _2920 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : max(_2789, _2790));
            float _2921 = isnan(_2790) ? _2789 : (isnan(_2789) ? _2790 : min(_2789, _2790));
            float _2930 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : min(_2920, 0.0));
            float _2931 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : min(_2921, 0.0));
            _2959 = ((abs(_2796 / _2784) * cbSceneParam._m0[80u].y) * ((((_2930 - _2931) * 2.0) - ((exp2(_2804 * (isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0)))) - exp2(_2804 * (isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0))))) * _2919)) - ((exp2(_2806 * _2930) - exp2(_2806 * _2931)) * _2919))) + (_2799 * cbSceneParam._m0[80u].z);
        }
        vec4 _2961 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2695, _2696, 1.0), 0.0);
        float _2970 = exp2((_2959 * (-1.44269502162933349609375)) * (1.0 - _2961.w));
        float _2971 = log2(_2970);
        float _2987 = log2(_2715);
        _2808 = (exp2(_2987 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].x)) * _2961.x) / cbSceneParam._m0[78u].x)) + _2712;
        _2810 = (exp2(_2987 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].y)) * _2961.y) / cbSceneParam._m0[78u].y)) + _2713;
        _2812 = (exp2(_2987 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2971 * cbSceneParam._m0[78u].z)) * _2961.z) / cbSceneParam._m0[78u].z)) + _2714;
        _2814 = _2970 * _2715;
    }
    else
    {
        _2808 = _2712;
        _2810 = _2713;
        _2812 = _2714;
        _2814 = _2715;
    }
    float _2826 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2827 = _2826 == 3.0;
    float _2828 = log2(_2814);
    float _2835 = exp2(_2828 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0))) * (_2657 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _926))) + ((_2663 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1730)) * cbPerFrame._m0[3u].x));
    float _2836 = exp2(_2828 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2659 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _926))) + ((_2665 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1730)) * cbPerFrame._m0[3u].x));
    float _2837 = exp2(_2828 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2661 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _926))) + ((_2667 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1730)) * cbPerFrame._m0[3u].x));
    float _2846 = (_2826 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2846 * (_2827 ? _2835 : (_2835 + (cbSceneParam._m0[72u].w * _2808)));
    SV_Target.y = _2846 * (_2827 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2810)));
    SV_Target.z = _2846 * (_2827 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2812)));
    SV_Target.w = cbInstanceData._m0[_2687].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2687].w;
}


