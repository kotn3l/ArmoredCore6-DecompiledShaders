#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1188;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3778 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3789 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3800 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _284) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _285) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _326 = _321.x * cbMtdParam._m0[9u].x;
    float _327 = _321.y * cbMtdParam._m0[9u].y;
    float _328 = _321.z * cbMtdParam._m0[9u].z;
    float _332 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _298.x) * _326;
    float _335 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _298.y) * _327;
    float _338 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _298.z) * _328;
    float _345 = ((_326 - _332) * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) + _332;
    float _346 = ((_327 - _335) * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) + _335;
    float _347 = ((_328 - _338) * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) + _338;
    vec4 _365 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _395 = _391.z;
    float _399 = (_391.x * 2.0) + (-1.0);
    float _400 = (_391.y * 2.0) + (-1.0);
    float _401 = dot(vec2(_399, _400), vec2(_399, _400));
    float _3811 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _406 = sqrt(1.0 - (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))));
    float _411 = _399 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_365.x * 2.0) + (-1.0)));
    float _412 = _400 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_365.y * 2.0) + (-1.0)));
    float _415 = fma(_406, _234, fma(_412, _241, _411 * _227));
    float _418 = fma(_406, _235, fma(_412, _242, _411 * _228));
    float _421 = fma(_406, _236, fma(_412, _243, _411 * _229));
    float _425 = inversesqrt(dot(vec3(_415, _418, _421), vec3(_415, _418, _421)));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _463 = _461.x;
    float _464 = 1.0 - _463;
    float _473 = (cbMtdParam._m0[19u].x + dot(vec4(_425 * _415, _425 * _418, _425 * _421, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_463 - _464) * cbMtdParam._m0[24u].z) + _464) * cbMtdParam._m0[21u].z);
    float _3822 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _474 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _476 = (-0.0) - cbMtdParam._m0[24u].y;
    float _478 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _478 : (isnan(_478) ? 1.0 : min(_478, 1.0));
    float _486 = _474 - ((_474 * TEXCOORD_8.x) * _479);
    float _487 = _474 - ((_474 * TEXCOORD_8.y) * _479);
    float _488 = _474 - ((_474 * TEXCOORD_8.z) * _479);
    float _495 = (_486 * (cbMtdParam._m0[17u].x - _345)) + _345;
    float _496 = (_487 * (cbMtdParam._m0[17u].y - _346)) + _346;
    float _497 = (_488 * (cbMtdParam._m0[17u].z - _347)) + _347;
    vec4 _509 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _511 = _509.x;
    float _512 = 1.0 - _511;
    float _540 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_511 - _512) * cbMtdParam._m0[24u].w) + _512) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3843 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _549 = ((((cbMtdParam._m0[10u].x - _495) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _541) + _495;
    float _550 = ((((cbMtdParam._m0[10u].y - _496) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _541) + _496;
    float _551 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _497)) * _541) + _497;
    float _556 = (((_365.z - _395) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _395;
    vec4 _570 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _577 = (_570.x * 2.0) + (-1.0);
    float _578 = (_570.y * 2.0) + (-1.0);
    float _579 = dot(vec2(_577, _578), vec2(_577, _578));
    float _3854 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _587 = ((_570.z - _556) * _486) + _556;
    float _590 = ((cbMtdParam._m0[23u].y - _587) * _541) + _587;
    vec4 _609 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _615 = (_609.x * 2.0) + (-1.0);
    float _616 = (_609.y * 2.0) + (-1.0);
    float _617 = dot(vec2(_615, _616), vec2(_615, _616));
    float _3865 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _632 = ((sqrt(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) - _406) * _488) + _406;
    float _635 = (((_577 - _411) * _486) + _411) + (cbMtdParam._m0[21u].x * _411);
    float _636 = (((_578 - _412) * _487) + _412) + (cbMtdParam._m0[21u].x * _412);
    float _647 = (((_615 - _635) + (_635 * cbMtdParam._m0[22u].z)) * _541) + _635;
    float _648 = (((_616 - _636) + (_636 * cbMtdParam._m0[22u].z)) * _541) + _636;
    float _649 = (_541 * (sqrt(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) - _632)) + _632;
    float _651 = cbMtdParam._m0[22u].x + _391.w;
    float _654 = fma(_649, _234, fma(_648, _241, _647 * _227));
    float _657 = fma(_649, _235, fma(_648, _242, _647 * _228));
    float _660 = fma(_649, _236, fma(_648, _243, _647 * _229));
    float _664 = inversesqrt(dot(vec3(_654, _657, _660), vec3(_654, _657, _660)));
    float _665 = _664 * _654;
    float _666 = _664 * _657;
    float _667 = _664 * _660;
    float _3876 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _668 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _3898 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _3909 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3920 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _736 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _726);
    float _737 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _726);
    float _738 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _726);
    float _742 = inversesqrt(dot(vec3(_736, _737, _738), vec3(_736, _737, _738)));
    float _743 = _736 * _742;
    float _744 = _737 * _742;
    float _745 = _738 * _742;
    float _751 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _752 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _773 = fma(_667, cbSceneParam._m0[5u].z, fma(_666, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _665));
    float _776 = fma(_667, cbSceneParam._m0[6u].z, fma(_666, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _665));
    float _779 = fma(_667, cbSceneParam._m0[7u].z, fma(_666, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _665));
    uint _793 = (_265 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _799 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * cbInstanceData._m0[_793].x;
    float _800 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * cbInstanceData._m0[_793].y;
    float _801 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * cbInstanceData._m0[_793].z;
    float _3931 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _3942 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    vec4 _813 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _751, cbSceneParam._m0[86u].y * _752));
    float _817 = ((isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * TEXCOORD_5.w) * _813.x;
    float _818 = dot(vec3(_665, _666, _667), vec3(_743, _744, _745));
    float _821 = _818 * 2.0;
    float _825 = (_821 * _665) - _743;
    float _826 = (_821 * _666) - _744;
    float _827 = (_821 * _667) - _745;
    float _831 = abs(dot(vec3(_743, _744, _745), vec3(_665, _666, _667)));
    float _3964 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _833 = sqrt(_668);
    float _846 = exp2((_833 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_833 * 3.0));
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1187;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _912 = fma(_886, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _878));
        float _916 = fma(_886, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _878));
        float _920 = fma(_886, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _878));
        float _945 = _878 + _665;
        float _946 = _882 + _666;
        float _947 = _886 + _667;
        float _957 = fma(_947, cbModelParam._m0[26u].z, fma(_946, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945)) - _912;
        float _958 = fma(_947, cbModelParam._m0[27u].z, fma(_946, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945)) - _916;
        float _959 = fma(_947, cbModelParam._m0[28u].z, fma(_946, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945)) - _920;
        float _963 = inversesqrt(dot(vec3(_957, _958, _959), vec3(_957, _958, _959)));
        float _976 = ((_963 * _957) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_912 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_963 * _958) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_916 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_963 * _959) / cbModelParam._m0[34u].z) + ((((((_920 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_976, _977, _978), 0.0);
        float _1015 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_981.x + (-0.5));
        float _1017 = _1015 * (_981.y + (-0.5));
        float _1018 = _1015 * (_981.z + (-0.5));
        float _1025 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_988.x + (-0.5));
        float _1027 = _1025 * (_988.y + (-0.5));
        float _1028 = _1025 * (_988.z + (-0.5));
        float _1035 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_995.x + (-0.5));
        float _1037 = _1035 * (_995.y + (-0.5));
        float _1038 = _1035 * (_995.z + (-0.5));
        float _1045 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1002.x + (-0.5));
        float _1047 = _1045 * (_1002.y + (-0.5));
        float _1048 = _1045 * (_1002.z + (-0.5));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = _1016 * 0.5;
        float _1053 = _1026 * 0.5;
        float _1054 = _1036 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1069 = (dot(vec3(_665, _666, _667), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1079 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _4012 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1081 + 1.0))) + _1086) * _1049;
        float _1096 = _1017 * 0.5;
        float _1097 = _1027 * 0.5;
        float _1098 = _1037 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_665, _666, _667), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _4045 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1123 + 1.0))) + _1128) * _1050;
        float _1138 = _1018 * 0.5;
        float _1139 = _1028 * 0.5;
        float _1140 = _1038 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_665, _666, _667), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _4078 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1165 + 1.0))) + _1170) * _1051;
        _1187 = _1018;
        _1189 = _1017;
        _1190 = _1016;
        _1191 = _1028;
        _1192 = _1027;
        _1193 = _1026;
        _1194 = _1038;
        _1195 = _1037;
        _1196 = _1036;
        _1197 = _1051;
        _1198 = _1050;
        _1199 = _1049;
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1202 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
    }
    else
    {
        _1187 = _1188;
        _1189 = _1188;
        _1190 = _1188;
        _1191 = _1188;
        _1192 = _1188;
        _1193 = _1188;
        _1194 = _1188;
        _1195 = _1188;
        _1196 = _1188;
        _1197 = _1188;
        _1198 = _1188;
        _1199 = _1188;
        _1200 = 0.0;
        _1201 = 0.0;
        _1202 = 0.0;
    }
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1227 = fma(_886, cbModelParam._m0[30u].z, fma(_882, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878));
        float _1231 = fma(_886, cbModelParam._m0[31u].z, fma(_882, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878));
        float _1235 = fma(_886, cbModelParam._m0[32u].z, fma(_882, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878));
        float _1258 = _878 + _665;
        float _1259 = _882 + _666;
        float _1260 = _886 + _667;
        float _1270 = fma(_1260, cbModelParam._m0[30u].z, fma(_1259, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1258)) - _1227;
        float _1271 = fma(_1260, cbModelParam._m0[31u].z, fma(_1259, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1258)) - _1231;
        float _1272 = fma(_1260, cbModelParam._m0[32u].z, fma(_1259, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1258)) - _1235;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1227 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1231 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[35u].z) + ((((((_1235 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1326 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1293.x + (-0.5));
        float _1328 = _1326 * (_1293.y + (-0.5));
        float _1329 = _1326 * (_1293.z + (-0.5));
        float _1336 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1300.x + (-0.5));
        float _1338 = _1336 * (_1300.y + (-0.5));
        float _1339 = _1336 * (_1300.z + (-0.5));
        float _1346 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1307.x + (-0.5));
        float _1348 = _1346 * (_1307.y + (-0.5));
        float _1349 = _1346 * (_1307.z + (-0.5));
        float _1356 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1314.x + (-0.5));
        float _1358 = _1356 * (_1314.y + (-0.5));
        float _1359 = _1356 * (_1314.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_665, _666, _667), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4141 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1390 + 1.0))) + _1395) * _1360;
        float _1405 = _1328 * 0.5;
        float _1406 = _1338 * 0.5;
        float _1407 = _1348 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_665, _666, _667), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4174 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1432 + 1.0))) + _1437) * _1361;
        float _1447 = _1329 * 0.5;
        float _1448 = _1339 * 0.5;
        float _1449 = _1349 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_665, _666, _667), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4207 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1474 + 1.0))) + _1479) * _1362;
        _1496 = _1329;
        _1497 = _1328;
        _1498 = _1327;
        _1499 = _1339;
        _1500 = _1338;
        _1501 = _1337;
        _1502 = _1349;
        _1503 = _1348;
        _1504 = _1347;
        _1505 = _1362;
        _1506 = _1361;
        _1507 = _1360;
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1188;
        _1497 = _1188;
        _1498 = _1188;
        _1499 = _1188;
        _1500 = _1188;
        _1501 = _1188;
        _1502 = _1188;
        _1503 = _1188;
        _1504 = _1188;
        _1505 = _1188;
        _1506 = _1188;
        _1507 = _1188;
        _1508 = 0.0;
        _1509 = 0.0;
        _1510 = 0.0;
    }
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1200)) + _1200;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1201)) + _1201;
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1202)) + _1202;
    float _1543 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1520 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1520 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1520));
    float _1564 = _825 * 0.5;
    float _1565 = _826 * 0.5;
    float _1566 = _827 * 0.5;
    float _1567 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1570 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1573 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1607;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1580 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1187, _1191, _1194, _1197));
        float _1584 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1189, _1192, _1195, _1198));
        float _1588 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1190, _1193, _1196, _1199));
        float _1595 = dot(vec4(cbModelParam._m0[39u]), vec4(_1564, _1565, _1566, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1618;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1609 = dot(vec4(cbModelParam._m0[40u]), vec4(_1564, _1565, _1566, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1622 = (_1618 * cbModelParam._m0[1u].x) + (_1607 * (1.0 - cbModelParam._m0[1u].x));
    float _1632 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _668);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1632 : min(cbModelParam._m0[25u].z, _1632));
    float _1714;
    float _1716;
    float _1718;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1681 = fma(_886, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878)) + cbModelParam._m0[13u].w;
        float _1685 = fma(_886, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878)) + cbModelParam._m0[14u].w;
        float _1689 = fma(_886, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878)) + cbModelParam._m0[15u].w;
        float _1692 = fma(_827, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825));
        float _1695 = fma(_827, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825));
        float _1698 = fma(_827, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825));
        float _1726;
        if (_1692 > 0.0)
        {
            _1726 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1726 = frontier_phi_14_12_ladder;
        }
        float _1897;
        if (_1695 > 0.0)
        {
            _1897 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1897 = frontier_phi_23_19_ladder;
        }
        float _2193;
        if (_1698 > 0.0)
        {
            _2193 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2193 = frontier_phi_35_30_ladder;
        }
        float _2195 = isnan(_1897) ? _1726 : (isnan(_1726) ? _1897 : min(_1726, _1897));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1692) + _1681;
        float _2201 = (_2196 * _1695) + _1685;
        float _2202 = (_2196 * _1698) + _1689;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2203;
        float _2207 = _2203 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 > _2207) || ((_2201 < _2205) || ((_2200 < _2205) || (_2200 > _2207))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2347 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2202, cbModelParam._m0[9u].z, fma(_2201, cbModelParam._m0[9u].y, _2200 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2202, cbModelParam._m0[10u].z, fma(_2201, cbModelParam._m0[10u].y, _2200 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2202, cbModelParam._m0[11u].z, fma(_2201, cbModelParam._m0[11u].y, _2200 * cbModelParam._m0[11u].x))), _1633);
            frontier_phi_13_35_ladder = _2347.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2347.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2347.x * cbModelParam._m0[1u].y;
        }
        _1714 = frontier_phi_13_35_ladder_2;
        _1716 = frontier_phi_13_35_ladder_1;
        _1718 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1702 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_825, _826, _827), _1633);
        _1714 = _1702.x * cbModelParam._m0[1u].y;
        _1716 = _1702.y * cbModelParam._m0[1u].y;
        _1718 = _1702.z * cbModelParam._m0[1u].y;
    }
    float _1722 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _668);
    float _1723 = isnan(_1722) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1722 : min(cbModelParam._m0[25u].w, _1722));
    float _1813;
    float _1815;
    float _1817;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1777 = fma(_886, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878)) + cbModelParam._m0[21u].w;
        float _1781 = fma(_886, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878)) + cbModelParam._m0[22u].w;
        float _1785 = fma(_886, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878)) + cbModelParam._m0[23u].w;
        float _1788 = fma(_827, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825));
        float _1791 = fma(_827, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825));
        float _1794 = fma(_827, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825));
        float _1902;
        if (_1788 > 0.0)
        {
            _1902 = abs((1.0 - _1777) / _1788);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1777 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1902 = frontier_phi_25_21_ladder;
        }
        float _2220;
        if (_1791 > 0.0)
        {
            _2220 = abs((1.0 - _1781) / _1791);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1781 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2220 = frontier_phi_37_32_ladder;
        }
        float _2547;
        if (_1794 > 0.0)
        {
            _2547 = abs((1.0 - _1785) / _1794);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1785 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2547 = frontier_phi_47_44_ladder;
        }
        float _2549 = isnan(_2220) ? _1902 : (isnan(_1902) ? _2220 : min(_1902, _2220));
        float _2550 = isnan(_2547) ? _2549 : (isnan(_2549) ? _2547 : min(_2549, _2547));
        float _2554 = (_2550 * _1788) + _1777;
        float _2555 = (_2550 * _1791) + _1781;
        float _2556 = (_2550 * _1794) + _1785;
        float _2557 = _2550 * 9.9999997473787516355514526367188e-05;
        float _2558 = (-1.0) - _2557;
        float _2560 = _2557 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2556 > _2560) || ((_2556 < _2558) || ((_2555 > _2560) || ((_2555 < _2558) || ((_2554 < _2558) || (_2554 > _2560))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2556, cbModelParam._m0[17u].z, fma(_2555, cbModelParam._m0[17u].y, _2554 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2556, cbModelParam._m0[18u].z, fma(_2555, cbModelParam._m0[18u].y, _2554 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2556, cbModelParam._m0[19u].z, fma(_2555, cbModelParam._m0[19u].y, _2554 * cbModelParam._m0[19u].x))), _1723);
            frontier_phi_22_47_ladder = _2674.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2674.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2674.x * cbModelParam._m0[1u].z;
        }
        _1813 = frontier_phi_22_47_ladder_2;
        _1815 = frontier_phi_22_47_ladder_1;
        _1817 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1797 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_825, _826, _827), _1723);
        _1813 = _1797.x * cbModelParam._m0[1u].z;
        _1815 = _1797.y * cbModelParam._m0[1u].z;
        _1817 = _1797.z * cbModelParam._m0[1u].z;
    }
    float _1829 = ((((1.0 - _846) * ((_833 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_846 * _833)) * _817;
    float _1830 = _1829 * ((cbModelParam._m0[1u].w * (_1813 - _1714)) + _1714);
    float _1831 = _1829 * ((cbModelParam._m0[1u].w * (_1815 - _1716)) + _1716);
    float _1832 = _1829 * ((cbModelParam._m0[1u].w * (_1817 - _1718)) + _1718);
    float _1835 = fma(_1832, cbSceneParam._m0[89u].z, fma(_1831, cbSceneParam._m0[89u].y, _1830 * cbSceneParam._m0[89u].x));
    float _1838 = fma(_1832, cbSceneParam._m0[90u].z, fma(_1831, cbSceneParam._m0[90u].y, _1830 * cbSceneParam._m0[90u].x));
    float _1841 = fma(_1832, cbSceneParam._m0[91u].z, fma(_1831, cbSceneParam._m0[91u].y, _1830 * cbSceneParam._m0[91u].x));
    float _1876 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1880 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1884 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1888 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1889 = _1876 / _1888;
    float _1890 = _1880 / _1888;
    float _1891 = _1884 / _1888;
    float _2038;
    float _2039;
    float _2040;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1918 = ((uint(_1891 > cbSceneParam._m0[59u].y) + uint(_1891 > cbSceneParam._m0[59u].x)) + uint(_1891 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1919 = _1918 + 43u;
        uint _1927 = _1918 + 44u;
        uint _1935 = _1918 + 45u;
        uint _1943 = _1918 + 46u;
        float _1954 = fma(_1888, cbSceneParam._m0[_1919].w, fma(_1884, cbSceneParam._m0[_1919].z, fma(_1880, cbSceneParam._m0[_1919].y, _1876 * cbSceneParam._m0[_1919].x)));
        float _1958 = fma(_1888, cbSceneParam._m0[_1927].w, fma(_1884, cbSceneParam._m0[_1927].z, fma(_1880, cbSceneParam._m0[_1927].y, _1876 * cbSceneParam._m0[_1927].x)));
        float _1966 = fma(_1888, cbSceneParam._m0[_1943].w, fma(_1884, cbSceneParam._m0[_1943].z, fma(_1880, cbSceneParam._m0[_1943].y, _1876 * cbSceneParam._m0[_1943].x)));
        float _1971 = cbSceneParam._m0[33u].z * _1966;
        float _1973 = cbSceneParam._m0[33u].w * _1966;
        float _1976 = fma(_1888, cbSceneParam._m0[_1935].w, fma(_1884, cbSceneParam._m0[_1935].z, fma(_1880, cbSceneParam._m0[_1935].y, _1876 * cbSceneParam._m0[_1935].x))) / _1966;
        float _2024 = (cbSceneParam._m0[33u].x - sqrt(((_1890 * _1890) + (_1889 * _1889)) + (_1891 * _1891))) * cbSceneParam._m0[33u].y;
        float _4333 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2031 = (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1971 + _1954) / _1966, (_1973 + _1958) / _1966), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1973 + _1954) / _1966, (_1958 - _1971) / _1966), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 - _1971) / _1966, (_1958 - _1973) / _1966), _1976), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 - _1973) / _1966, (_1971 + _1958) / _1966), _1976), 0.0)).x), vec4(0.25)));
        _2038 = 1.0 - (_2031 * cbSceneParam._m0[34u].x);
        _2039 = 1.0 - (_2031 * cbSceneParam._m0[34u].y);
        _2040 = 1.0 - (_2031 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2038 = 1.0;
        _2039 = 1.0;
        _2040 = 1.0;
    }
    float _2104;
    float _2106;
    float _2108;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2092 = fma(_1888, cbSceneParam._m0[63u].w, fma(_1884, cbSceneParam._m0[63u].z, fma(_1880, cbSceneParam._m0[63u].y, _1876 * cbSceneParam._m0[63u].x)));
        float _2093 = fma(_1888, cbSceneParam._m0[60u].w, fma(_1884, cbSceneParam._m0[60u].z, fma(_1880, cbSceneParam._m0[60u].y, _1876 * cbSceneParam._m0[60u].x))) / _2092;
        float _2094 = fma(_1888, cbSceneParam._m0[61u].w, fma(_1884, cbSceneParam._m0[61u].z, fma(_1880, cbSceneParam._m0[61u].y, _1876 * cbSceneParam._m0[61u].x))) / _2092;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2093 >= cbSceneParam._m0[64u].x) && (_2094 >= cbSceneParam._m0[64u].y)) && (_2093 <= cbSceneParam._m0[64u].z)) && (_2094 <= cbSceneParam._m0[64u].w))
        {
            float _2233 = fma(_1888, cbSceneParam._m0[62u].w, fma(_1884, cbSceneParam._m0[62u].z, fma(_1880, cbSceneParam._m0[62u].y, _1876 * cbSceneParam._m0[62u].x))) / _2092;
            float _2237 = isnan(cbSceneParam._m0[41u].w) ? _2233 : (isnan(_2233) ? cbSceneParam._m0[41u].w : max(_2233, cbSceneParam._m0[41u].w));
            float _2280 = (cbSceneParam._m0[33u].x - sqrt(((_1890 * _1890) + (_1889 * _1889)) + (_1891 * _1891))) * cbSceneParam._m0[33u].y;
            float _4349 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
            float _2287 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2093, cbSceneParam._m0[33u].w + _2094), _2237), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2093, _2094 - cbSceneParam._m0[33u].z), _2237), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2093 - cbSceneParam._m0[33u].z, _2094 - cbSceneParam._m0[33u].w), _2237), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2093 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2094), _2237), 0.0)).x), vec4(0.25)));
            float _2291 = 1.0 - (_2287 * cbSceneParam._m0[34u].x);
            float _2292 = 1.0 - (_2287 * cbSceneParam._m0[34u].y);
            float _2293 = 1.0 - (_2287 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2293) ? _2040 : (isnan(_2040) ? _2293 : min(_2040, _2293));
            frontier_phi_34_33_ladder_1 = isnan(_2292) ? _2039 : (isnan(_2039) ? _2292 : min(_2039, _2292));
            frontier_phi_34_33_ladder_2 = isnan(_2291) ? _2038 : (isnan(_2038) ? _2291 : min(_2038, _2291));
        }
        else
        {
            frontier_phi_34_33_ladder = _2040;
            frontier_phi_34_33_ladder_1 = _2039;
            frontier_phi_34_33_ladder_2 = _2038;
        }
        _2104 = frontier_phi_34_33_ladder_2;
        _2106 = frontier_phi_34_33_ladder_1;
        _2108 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2104 = _2038;
        _2106 = _2039;
        _2108 = _2040;
    }
    uvec4 _2113 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2115 = _2113.x * 14u;
    uint _2116 = _2115 + 13u;
    float _2123 = _817 + (-1.0);
    float _2128 = (cbLight._m0[_2116].x * _2123) + 1.0;
    float _2129 = (cbLight._m0[_2116].y * _2123) + 1.0;
    float _2130 = (cbLight._m0[_2116].z * _2123) + 1.0;
    float _2131 = (cbLight._m0[_2116].w * _2123) + 1.0;
    uint _2132 = _2115 + 5u;
    float _2138 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
    uint _2142 = _2115 + 4u;
    float _2152 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
    uint _2156 = _2115 | 1u;
    float _2167 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_665, _666, _667));
    float _2170 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_665, _666, _667));
    float _4385 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _4396 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2175 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 0.3183098733425140380859375;
    float _2177 = (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * 0.3183098733425140380859375;
    float _2184 = ((cbLight._m0[_2132].x * _2138) * _2177) + (((cbLight._m0[_2142].x * _2104) * _2152) * _2175);
    float _2185 = ((_2138 * cbLight._m0[_2132].y) * _2177) + (((cbLight._m0[_2142].y * _2106) * _2152) * _2175);
    float _2186 = ((_2138 * cbLight._m0[_2132].z) * _2177) + (((cbLight._m0[_2142].z * _2108) * _2152) * _2175);
    uvec4 _2190 = floatBitsToUint(cbLight._m0[_2115 + 12u]);
    bool _2192 = _2190.x == 0u;
    float _2294;
    float _2296;
    float _2298;
    if (_2192)
    {
        _2294 = _2184;
        _2296 = _2185;
        _2298 = _2186;
    }
    else
    {
        uint _2302 = _2115 + 6u;
        float _2318 = (dot(vec3(cbLight._m0[_2115 + 2u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2319 = _2318 * _2318;
        float _4407 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2320 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2321 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2294 = (((cbLight._m0[_2302].x * 0.3183098733425140380859375) * _2320) * _2321) + _2184;
        _2296 = (((cbLight._m0[_2302].y * 0.3183098733425140380859375) * _2320) * _2321) + _2185;
        _2298 = (((cbLight._m0[_2302].z * 0.3183098733425140380859375) * _2320) * _2321) + _2186;
    }
    bool _2301 = _2190.y == 0u;
    float _2356;
    float _2358;
    float _2360;
    if (_2301)
    {
        _2356 = _2294;
        _2358 = _2296;
        _2360 = _2298;
    }
    else
    {
        uint _2518 = _2115 + 7u;
        float _2534 = (dot(vec3(cbLight._m0[_2115 + 3u].xyz), vec3(_665, _666, _667)) * 0.5) + 0.5;
        float _2535 = _2534 * _2534;
        float _4423 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        float _2536 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2537 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2356 = (((cbLight._m0[_2518].x * 0.3183098733425140380859375) * _2536) * _2537) + _2294;
        _2358 = (((cbLight._m0[_2518].y * 0.3183098733425140380859375) * _2536) * _2537) + _2296;
        _2360 = (((cbLight._m0[_2518].z * 0.3183098733425140380859375) * _2536) * _2537) + _2298;
    }
    uint _2363 = _2115 + 8u;
    float _2376 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _668) * 0.949999988079071044921875);
    float _2377 = _2376 * _2376;
    float _2378 = cbLight._m0[_2115].x + _743;
    float _2379 = cbLight._m0[_2115].y + _744;
    float _2380 = cbLight._m0[_2115].z + _745;
    float _2384 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
    float _2385 = _2384 * _2378;
    float _2386 = _2384 * _2379;
    float _2387 = _2384 * _2380;
    float _2388 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2115].xyz));
    float _4439 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2391 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _4450 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _2392 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2393 = dot(vec3(_665, _666, _667), vec3(_2385, _2386, _2387));
    float _4461 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
    float _2397 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2385, _2386, _2387));
    float _4472 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2401 = _2377 * _2377;
    float _2405 = ((_2396 * _2396) * (_2401 + (-1.0))) + 1.0;
    float _2416 = (exp2(log2(1.0 - (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2417 = 1.0 - _2377;
    float _2428 = (0.5 / (((_2392 * ((_2391 * _2417) + _2377)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2417) + _2377) * _2391))) * _2391;
    float _4483 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2401 / ((_2405 * _2405) * 3.141590118408203125));
    uint _2444 = _2115 + 9u;
    float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _668) * 0.949999988079071044921875);
    float _2456 = _2455 * _2455;
    float _2457 = cbLight._m0[_2156].x + _743;
    float _2458 = cbLight._m0[_2156].y + _744;
    float _2459 = cbLight._m0[_2156].z + _745;
    float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
    float _2464 = _2463 * _2457;
    float _2465 = _2463 * _2458;
    float _2466 = _2463 * _2459;
    float _2467 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2156].xyz));
    float _4494 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2471 = dot(vec3(_665, _666, _667), vec3(_2464, _2465, _2466));
    float _4505 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2475 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2464, _2465, _2466));
    float _4516 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2479 = _2456 * _2456;
    float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
    float _2492 = (exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2493 = 1.0 - _2456;
    float _2503 = (0.5 / (((_2392 * ((_2470 * _2493) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2493) + _2456) * _2470))) * _2470;
    float _4527 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2505 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
    float _2515 = (((_2492 * cbLight._m0[_2444].x) * _2505) * _2138) + ((((cbLight._m0[_2363].x * _2104) * _2416) * _2430) * _2152);
    float _2516 = (((_2492 * cbLight._m0[_2444].y) * _2505) * _2138) + ((((cbLight._m0[_2363].y * _2106) * _2416) * _2430) * _2152);
    float _2517 = (((_2492 * cbLight._m0[_2444].z) * _2505) * _2138) + ((((cbLight._m0[_2363].z * _2108) * _2416) * _2430) * _2152);
    float _2573;
    float _2575;
    float _2577;
    if (_2192)
    {
        _2573 = _2515;
        _2575 = _2516;
        _2577 = _2517;
    }
    else
    {
        uint _2579 = _2115 + 2u;
        uint _2583 = _2115 + 10u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _668) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _743;
        float _2600 = cbLight._m0[_2579].y + _744;
        float _2601 = cbLight._m0[_2579].z + _745;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2579].xyz));
        float _4538 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2613 = dot(vec3(_665, _666, _667), vec3(_2606, _2607, _2608));
        float _4549 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4560 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2634 = (exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2635 = 1.0 - _2598;
        float _2645 = (0.5 / (((_2392 * ((_2612 * _2635) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2635) + _2598) * _2612))) * _2612;
        float _4571 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2647 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2648 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
        _2573 = (((_2634 * cbLight._m0[_2583].x) * _2647) * _2648) + _2515;
        _2575 = (((_2634 * cbLight._m0[_2583].y) * _2647) * _2648) + _2516;
        _2577 = (((_2634 * cbLight._m0[_2583].z) * _2647) * _2648) + _2517;
    }
    float _2679;
    float _2681;
    float _2683;
    if (_2301)
    {
        _2679 = _2573;
        _2681 = _2575;
        _2683 = _2577;
    }
    else
    {
        uint _2690 = _2115 + 3u;
        uint _2694 = _2115 + 11u;
        float _2708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2690].w)) * _668) * 0.949999988079071044921875);
        float _2709 = _2708 * _2708;
        float _2710 = cbLight._m0[_2690].x + _743;
        float _2711 = cbLight._m0[_2690].y + _744;
        float _2712 = cbLight._m0[_2690].z + _745;
        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
        float _2717 = _2716 * _2710;
        float _2718 = _2716 * _2711;
        float _2719 = _2716 * _2712;
        float _2720 = dot(vec3(_665, _666, _667), vec3(cbLight._m0[_2690].xyz));
        float _4587 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2724 = dot(vec3(_665, _666, _667), vec3(_2717, _2718, _2719));
        float _4598 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2727 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2728 = dot(vec3(cbLight._m0[_2690].xyz), vec3(_2717, _2718, _2719));
        float _4609 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2732 = _2709 * _2709;
        float _2736 = ((_2727 * _2727) * (_2732 + (-1.0))) + 1.0;
        float _2745 = (exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2746 = 1.0 - _2709;
        float _2756 = (0.5 / (((_2392 * ((_2723 * _2746) + _2709)) + 9.9999999392252902907785028219223e-09) + (((_2392 * _2746) + _2709) * _2723))) * _2723;
        float _4620 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2758 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2732 / ((_2736 * _2736) * 3.141590118408203125));
        float _2759 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2679 = (((_2745 * cbLight._m0[_2694].x) * _2758) * _2759) + _2573;
        _2681 = (((_2745 * cbLight._m0[_2694].y) * _2758) * _2759) + _2575;
        _2683 = (((_2745 * cbLight._m0[_2694].z) * _2758) * _2759) + _2577;
    }
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_2113.y == 0u)
    {
        uvec4 _2780 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2781 = _2780.x;
        uint _2792 = uint((float(_2780.y) * floor(float(uint(cbSceneParam._m0[85u].y * _752) / _2781))) + floor(float(uint(cbSceneParam._m0[85u].x * _751) / _2781)));
        float _2802 = (log2(_1891 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2803 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        uint _2806 = uint(isnan(14.0) ? _2803 : (isnan(_2803) ? 14.0 : min(_2803, 14.0)));
        uvec4 _2811 = texelFetch(g_lightClusterGridBuffer, int(((_2806 << 2u) + (_2792 << 6u)) >> 2u));
        uint _2812 = _2811.x;
        uint _2813 = _2780.z;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        if (((((1u << ((_2813 >> 4u) & 15u)) + 4294967295u) & _2812) == 0u) || ((_2813 & 240u) == 0u))
        {
            _2892 = 0.0;
            _2894 = 0.0;
            _2896 = 0.0;
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
        }
        else
        {
            float _2893;
            float _2895;
            float _2897;
            float _2899;
            float _2901;
            float _2903;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            float _3041 = 0.0;
            uint _3042 = 0u;
            uint _3051;
            bool _3052;
            for (;;)
            {
                _3051 = texelFetch(g_lightClassification, int((((_2806 << 5u) + (_2792 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                _3052 = _3051 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3052)
                {
                    frontier_phi_66_pred = _3041;
                    frontier_phi_66_pred_1 = _3040;
                    frontier_phi_66_pred_2 = _3039;
                    frontier_phi_66_pred_3 = _3038;
                    frontier_phi_66_pred_4 = _3037;
                    frontier_phi_66_pred_5 = _3036;
                }
                else
                {
                    float _3160;
                    float _3161;
                    float _3162;
                    float _3163;
                    float _3164;
                    float _3165;
                    uint _3166;
                    _3160 = _3036;
                    _3161 = _3037;
                    _3162 = _3038;
                    _3163 = _3039;
                    _3164 = _3040;
                    _3165 = _3041;
                    _3166 = _3051;
                    float _3092;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    for (;;)
                    {
                        uint _3170 = uint(findLSB(_3166)) + (_3042 << 5u);
                        uint _3167 = (_3166 + 4294967295u) & _3166;
                        uint _3172 = _3170 * 48u;
                        vec4 _3186 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3172)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 3u)).x));
                        uint _3192 = (_3170 * 48u) + 4u;
                        vec4 _3205 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3211 = (_3170 * 48u) + 8u;
                        vec3 _3222 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3211)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3211 + 2u)).x));
                        float _3226 = _3186.x - _1889;
                        float _3227 = _3186.y - _1890;
                        float _3228 = _3186.z - _1891;
                        float _3229 = dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228));
                        float _3232 = inversesqrt(_3229);
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3236 = dot(vec3(_773, _776, _779), vec3(_3233, _3234, _3235));
                        float _3241 = 1.0 - (_3229 * _3186.w);
                        float _4646 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                        float _3242 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3243 = sqrt(_3229) * _3205.w;
                        float _3246 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                        float _3247 = _3246 * _3246;
                        float _3250 = ((1.0 - _3247) * _3236) + _3247;
                        float _3253 = _3243 * _3243;
                        float _3257 = ((isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))) * _3242) / ((_3253 * 0.699999988079071044921875) + 1.0);
                        float _3261 = (-0.0) - _1889;
                        float _3262 = (-0.0) - _1890;
                        float _3263 = (-0.0) - _1891;
                        float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                        float _3268 = _3267 * _3261;
                        float _3269 = _3267 * _3262;
                        float _3270 = _3267 * _3263;
                        float _3277 = exp2(log2(1.0 / ((_3253 * 3.5) + 5.0)) * 0.25);
                        float _3278 = 1.0 - _833;
                        float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                        float _3286 = _3285 * _3285;
                        float _3287 = _3286 * _3286;
                        float _3288 = _3268 + _3233;
                        float _3289 = _3269 + _3234;
                        float _3290 = _3270 + _3235;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3298 = dot(vec3(_773, _776, _779), vec3(_3268, _3269, _3270));
                        float _4662 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3301 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3302 = dot(vec3(_773, _776, _779), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                        float _4673 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3305 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                        float _3310 = _3246 * _3286;
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3236) + _3311;
                        float _4684 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3315 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                        float _3316 = 1.0 - _3286;
                        float _3326 = (0.5 / (((_3315 * ((_3301 * _3316) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3315 * _3316) + _3286) * _3301))) * _3315;
                        float _4695 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3337 = (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0)))) / ((_3309 * _3309) * ((_3253 * 2.1991131305694580078125) + 3.141590118408203125))) * _3242;
                        _3095 = (_3257 * _3205.x) + _3163;
                        _3096 = (_3257 * _3205.y) + _3164;
                        _3097 = (_3257 * _3205.z) + _3165;
                        _3092 = (_3337 * _3222.x) + _3160;
                        _3093 = (_3337 * _3222.y) + _3161;
                        _3094 = (_3337 * _3222.z) + _3162;
                        if (_3167 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3160 = _3092;
                            _3161 = _3093;
                            _3162 = _3094;
                            _3163 = _3095;
                            _3164 = _3096;
                            _3165 = _3097;
                            _3166 = _3167;
                        }
                    }
                    frontier_phi_66_pred = _3097;
                    frontier_phi_66_pred_1 = _3096;
                    frontier_phi_66_pred_2 = _3095;
                    frontier_phi_66_pred_3 = _3094;
                    frontier_phi_66_pred_4 = _3093;
                    frontier_phi_66_pred_5 = _3092;
                }
                _2903 = frontier_phi_66_pred;
                _2901 = frontier_phi_66_pred_1;
                _2899 = frontier_phi_66_pred_2;
                _2897 = frontier_phi_66_pred_3;
                _2895 = frontier_phi_66_pred_4;
                _2893 = frontier_phi_66_pred_5;
                uint _3043 = _3042 + 1u;
                if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3036 = _2893;
                    _3037 = _2895;
                    _3038 = _2897;
                    _3039 = _2899;
                    _3040 = _2901;
                    _3041 = _2903;
                    _3042 = _3043;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2892 = _2893;
            _2894 = _2895;
            _2896 = _2897;
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
        }
        uvec4 _2906 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2907 = _2906.z;
        uint _2909 = (_2907 >> 8u) & 15u;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        if (((4294967295u << _2909) & _2812) == 0u)
        {
            _3004 = _2892;
            _3006 = _2894;
            _3008 = _2896;
            _3010 = _2898;
            _3012 = _2900;
            _3014 = _2902;
        }
        else
        {
            float _3029 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
            float _3030 = _3029 * _1889;
            float _3031 = _3029 * _1890;
            float _3032 = _3029 * _1891;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2909 < ((_2907 >> 12u) & 15u))
            {
                float _3005;
                float _3007;
                float _3009;
                float _3011;
                float _3013;
                float _3015;
                float _3143 = _2892;
                float _3144 = _2894;
                float _3145 = _2896;
                float _3146 = _2898;
                float _3147 = _2900;
                float _3148 = _2902;
                uint _3149 = _2909;
                uint _3158;
                bool _3159;
                for (;;)
                {
                    _3158 = texelFetch(g_lightClassification, int((((_2806 << 5u) + (_2792 << 9u)) + (_3149 << 2u)) >> 2u)).x;
                    _3159 = _3158 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3159)
                    {
                        frontier_phi_72_pred = _3148;
                        frontier_phi_72_pred_1 = _3147;
                        frontier_phi_72_pred_2 = _3146;
                        frontier_phi_72_pred_3 = _3145;
                        frontier_phi_72_pred_4 = _3144;
                        frontier_phi_72_pred_5 = _3143;
                    }
                    else
                    {
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3355 = _3143;
                        float _3356 = _3144;
                        float _3357 = _3145;
                        float _3358 = _3146;
                        float _3359 = _3147;
                        float _3360 = _3148;
                        uint _3361 = _3158;
                        uint _3362;
                        vec4 _3387;
                        float _3388;
                        vec4 _3403;
                        vec3 _3415;
                        vec4 _3430;
                        vec4 _3445;
                        float _3491;
                        bool _3492;
                        for (;;)
                        {
                            uint _3372 = ((_3149 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3361));
                            _3362 = (_3361 + 4294967295u) & _3361;
                            uint _3374 = _3372 * 40u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            _3388 = _3387.w;
                            uint _3390 = (_3372 * 40u) + 4u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3405 = (_3372 * 40u) + 8u;
                            _3415 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x));
                            uint _3417 = (_3372 * 40u) + 16u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3372 * 40u) + 20u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3372 * 40u) + 24u;
                            vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3466 = (_3372 * 40u) + 28u;
                            vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            _3491 = fma(_1891, _3479.z, fma(_1890, _3479.y, _3479.x * _1889)) + _3479.w;
                            _3492 = !((fma(_1891, _3460.z, fma(_1890, _3460.y, _3460.x * _1889)) + _3460.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3492)
                            {
                                float _3519 = _3387.x - _1889;
                                float _3520 = _3387.y - _1890;
                                float _3521 = _3387.z - _1891;
                                float _3522 = dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521));
                                float _3525 = inversesqrt(_3522);
                                float _3526 = _3525 * _3519;
                                float _3527 = _3525 * _3520;
                                float _3528 = _3525 * _3521;
                                float _3532 = 1.0 - (_3522 / (_3388 * _3388));
                                float _4706 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3537 = sqrt(_3522) * _3403.w;
                                float _3539 = 1.39999997615814208984375 / (_3537 + 1.39999997615814208984375);
                                float _3540 = _3539 * _3539;
                                float _3543 = ((1.0 - _3540) * dot(vec3(_3526, _3527, _3528), vec3(_773, _776, _779))) + _3540;
                                float _3546 = _3537 * _3537;
                                float _3550 = (fma(_1891, _3430.z, fma(_1890, _3430.y, _3430.x * _1889)) + _3430.w) / _3491;
                                float _3551 = (fma(_1891, _3445.z, fma(_1890, _3445.y, _3445.x * _1889)) + _3445.w) / _3491;
                                float _3555 = 1.0 - dot(vec2(_3550, _3551), vec2(_3550, _3551));
                                float _4722 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3557 = _3556 * (((isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0))) * _3533) / ((_3546 * 0.699999988079071044921875) + 1.0));
                                float _3569 = exp2(log2(1.0 / ((_3546 * 3.5) + 5.0)) * 0.25);
                                float _3570 = 1.0 - _833;
                                float _3577 = sqrt(1.0 - ((1.0 - (_3570 * _3570)) * (1.0 - (_3569 * _3569))));
                                float _3578 = _3577 * _3577;
                                float _3579 = _3578 * _3578;
                                float _3580 = _3526 - _3030;
                                float _3581 = _3527 - _3031;
                                float _3582 = _3528 - _3032;
                                float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                                float _3590 = dot(vec3(_773, _776, _779), vec3((-0.0) - _3030, (-0.0) - _3031, (-0.0) - _3032));
                                float _4733 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3594 = dot(vec3(_773, _776, _779), vec3(_3586 * _3580, _3586 * _3581, _3586 * _3582));
                                float _4744 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3601 = ((_3597 * _3597) * (_3579 + (-1.0))) + 1.0;
                                float _3602 = _3539 * _3578;
                                float _3603 = _3602 * _3602;
                                float _3609 = ((1.0 - _3603) * dot(vec3(_773, _776, _779), vec3(_3526, _3527, _3528))) + _3603;
                                float _4755 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                                float _3611 = 1.0 - _3578;
                                float _3621 = (0.5 / (((_3610 * ((_3593 * _3611) + _3578)) + 9.9999999392252902907785028219223e-09) + (((_3610 * _3611) + _3578) * _3593))) * _3610;
                                float _4766 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3631 = (_3556 * _3533) * (((_3579 * 3.1415927410125732421875) * (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0)))) / ((_3601 * _3601) * ((_3546 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3557 * _3403.y;
                                frontier_phi_78_pred_1 = _3557 * _3403.x;
                                frontier_phi_78_pred_2 = _3631 * _3415.z;
                                frontier_phi_78_pred_3 = _3631 * _3415.y;
                                frontier_phi_78_pred_4 = _3631 * _3415.x;
                                frontier_phi_78_pred_5 = _3557 * _3403.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3639 = frontier_phi_78_pred;
                            _3638 = frontier_phi_78_pred_1;
                            _3637 = frontier_phi_78_pred_2;
                            _3636 = frontier_phi_78_pred_3;
                            _3635 = frontier_phi_78_pred_4;
                            _3640 = frontier_phi_78_pred_5;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            if (_3362 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3362;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3347;
                        frontier_phi_72_pred_1 = _3346;
                        frontier_phi_72_pred_2 = _3345;
                        frontier_phi_72_pred_3 = _3344;
                        frontier_phi_72_pred_4 = _3343;
                        frontier_phi_72_pred_5 = _3342;
                    }
                    _3015 = frontier_phi_72_pred;
                    _3013 = frontier_phi_72_pred_1;
                    _3011 = frontier_phi_72_pred_2;
                    _3009 = frontier_phi_72_pred_3;
                    _3007 = frontier_phi_72_pred_4;
                    _3005 = frontier_phi_72_pred_5;
                    uint _3150 = _3149 + 1u;
                    if (_3150 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3143 = _3005;
                        _3144 = _3007;
                        _3145 = _3009;
                        _3146 = _3011;
                        _3147 = _3013;
                        _3148 = _3015;
                        _3149 = _3150;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3015;
                frontier_phi_60_61_ladder_1 = _3013;
                frontier_phi_60_61_ladder_2 = _3009;
                frontier_phi_60_61_ladder_3 = _3007;
                frontier_phi_60_61_ladder_4 = _3005;
                frontier_phi_60_61_ladder_5 = _3011;
            }
            else
            {
                frontier_phi_60_61_ladder = _2902;
                frontier_phi_60_61_ladder_1 = _2900;
                frontier_phi_60_61_ladder_2 = _2896;
                frontier_phi_60_61_ladder_3 = _2894;
                frontier_phi_60_61_ladder_4 = _2892;
                frontier_phi_60_61_ladder_5 = _2898;
            }
            _3004 = frontier_phi_60_61_ladder_4;
            _3006 = frontier_phi_60_61_ladder_3;
            _3008 = frontier_phi_60_61_ladder_2;
            _3010 = frontier_phi_60_61_ladder_5;
            _3012 = frontier_phi_60_61_ladder_1;
            _3014 = frontier_phi_60_61_ladder;
        }
        float _3019 = isnan(1.0) ? _817 : (isnan(_817) ? 1.0 : min(_817, 1.0));
        _2825 = (_3019 * _3010) + _2356;
        _2827 = (_3019 * _3012) + _2358;
        _2829 = (_3019 * _3014) + _2360;
        _2831 = ((_3004 * 0.039999999105930328369140625) * _3019) + _2679;
        _2833 = ((_3006 * 0.039999999105930328369140625) * _3019) + _2681;
        _2835 = ((_3008 * 0.039999999105930328369140625) * _3019) + _2683;
    }
    else
    {
        _2825 = _2356;
        _2827 = _2358;
        _2829 = _2360;
        _2831 = _2679;
        _2833 = _2681;
        _2835 = _2683;
    }
    float _4782 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4793 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4804 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    uint _2855 = _265 + 6u;
    float _2863 = _751 / cbSceneParam._m0[86u].x;
    float _2864 = _752 / cbSceneParam._m0[86u].y;
    vec4 _2878 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2863, _2864, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2880 = _2878.x;
    float _2881 = _2878.y;
    float _2882 = _2878.z;
    float _2883 = _2878.w;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2917 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2918 = _2917 / _686;
        float _2929 = _2918 * _736;
        float _2930 = _737 * _2918;
        float _2931 = (-0.0) - _2930;
        float _2932 = _2918 * _738;
        float _2934 = (cbSceneParam._m0[77u].w * _2931) / _2917;
        float _2935 = _2934 + cbSceneParam._m0[79u].w;
        float _2936 = cbSceneParam._m0[79u].w - _2930;
        float _2942 = sqrt(((_2929 * _2929) + (_2930 * _2930)) + (_2932 * _2932));
        float _2945 = (1.0 - (cbSceneParam._m0[77u].w / _2917)) * _2942;
        float _2950 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2952 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3105;
        if (abs((_2931 - _2934) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3105 = ((((_2935 > 0.0) ? exp2(_2950 * _2935) : (2.0 - exp2(_2952 * _2935))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2945;
        }
        else
        {
            float _3065 = 1.0 / cbSceneParam._m0[80u].x;
            float _3066 = isnan(_2936) ? _2935 : (isnan(_2935) ? _2936 : max(_2935, _2936));
            float _3067 = isnan(_2936) ? _2935 : (isnan(_2935) ? _2936 : min(_2935, _2936));
            float _3076 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : min(_3066, 0.0));
            float _3077 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : min(_3067, 0.0));
            _3105 = ((abs(_2942 / _2931) * cbSceneParam._m0[80u].y) * ((((_3076 - _3077) * 2.0) - ((exp2(_2950 * (isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0)))) - exp2(_2950 * (isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0))))) * _3065)) - ((exp2(_2952 * _3076) - exp2(_2952 * _3077)) * _3065))) + (_2945 * cbSceneParam._m0[80u].z);
        }
        vec4 _3107 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2863, _2864, 1.0), 0.0);
        float _3116 = exp2((_3105 * (-1.44269502162933349609375)) * (1.0 - _3107.w));
        float _3117 = log2(_3116);
        float _3133 = log2(_2883);
        _2954 = (exp2(_3133 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].x)) * _3107.x) / cbSceneParam._m0[78u].x)) + _2880;
        _2956 = (exp2(_3133 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].y)) * _3107.y) / cbSceneParam._m0[78u].y)) + _2881;
        _2958 = (exp2(_3133 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3117 * cbSceneParam._m0[78u].z)) * _3107.z) / cbSceneParam._m0[78u].z)) + _2882;
        _2960 = _3116 * _2883;
    }
    else
    {
        _2954 = _2880;
        _2956 = _2881;
        _2958 = _2882;
        _2960 = _2883;
    }
    float _2972 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2973 = _2972 == 3.0;
    float _2974 = log2(_2960);
    float _2981 = exp2(_2974 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2825 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _817))) + ((_2831 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1622)) * cbPerFrame._m0[3u].x));
    float _2982 = exp2(_2974 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2827 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _817))) + ((_2833 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1622)) * cbPerFrame._m0[3u].x));
    float _2983 = exp2(_2974 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (_2829 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _817))) + ((_2835 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1622)) * cbPerFrame._m0[3u].x));
    float _2992 = (_2972 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2992 * (_2973 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2954)));
    SV_Target.y = _2992 * (_2973 ? _2982 : (_2982 + (cbSceneParam._m0[72u].w * _2956)));
    SV_Target.z = _2992 * (_2973 ? _2983 : (_2983 + (cbSceneParam._m0[72u].w * _2958)));
    SV_Target.w = cbInstanceData._m0[_2855].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2855].w;
}


