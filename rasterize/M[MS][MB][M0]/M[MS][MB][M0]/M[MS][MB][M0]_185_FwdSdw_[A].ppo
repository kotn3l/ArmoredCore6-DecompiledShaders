#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1336;
float _3978;
float _3979;
float _3980;
float _3981;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3990 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _4001 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4012 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _331 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _336 = _331.x * cbMtdParam._m0[11u].x;
    float _337 = _331.y * cbMtdParam._m0[11u].y;
    float _338 = _331.z * cbMtdParam._m0[11u].z;
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _406 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_396 - _406) * cbMtdParam._m0[24u].x) + _406) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4023 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _431 = (_424 * ((_357.x * cbMtdParam._m0[12u].x) - _336)) + _336;
    float _432 = (_424 * ((_357.y * cbMtdParam._m0[12u].y) - _337)) + _337;
    float _433 = (_424 * ((_357.z * cbMtdParam._m0[12u].z) - _338)) + _338;
    vec4 _450 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _293) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _294) + cbTextureTilingScale._m0[3u].w));
    vec4 _470 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _472 = _470.x;
    float _482 = dot(vec4(_472, _470.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _496 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_472 - _482) * cbMtdParam._m0[24u].x) + _482) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4034 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _504 = (_497 * ((_450.x * cbMtdParam._m0[13u].x) - _431)) + _431;
    float _505 = (_497 * ((_450.y * cbMtdParam._m0[13u].y) - _432)) + _432;
    float _506 = (_497 * ((_450.z * cbMtdParam._m0[13u].z) - _433)) + _433;
    float _510 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _504;
    float _513 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _505;
    float _516 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _506;
    float _523 = ((_504 - _510) * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) + _510;
    float _524 = ((_505 - _513) * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) + _513;
    float _525 = ((_506 - _516) * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) + _516;
    vec4 _542 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _565 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _582 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _584 = _582.x;
    float _585 = _582.y;
    float _586 = _582.z;
    float _593 = ((_565.x - _584) * _424) + _584;
    float _594 = ((_565.y - _585) * _424) + _585;
    float _595 = ((_565.z - _586) * _424) + _586;
    vec4 _607 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _293) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _294) + cbTextureTilingScale._m0[2u].w));
    float _620 = ((_607.z - _595) * _497) + _595;
    float _623 = ((((_607.x - _593) * _497) + _593) * 2.0) + (-1.0);
    float _624 = ((((_607.y - _594) * _497) + _594) * 2.0) + (-1.0);
    float _625 = dot(vec2(_623, _624), vec2(_623, _624));
    float _4045 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _630 = sqrt(1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))));
    vec4 _644 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _669 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _671 = _669.x;
    float _672 = 1.0 - _671;
    float _685 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_671 - _672) * cbMtdParam._m0[24u].z) + _672) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4056 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _686 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _693 = (_686 * (cbMtdParam._m0[17u].x - _523)) + _523;
    float _694 = (_686 * (cbMtdParam._m0[17u].y - _524)) + _524;
    float _695 = (_686 * (cbMtdParam._m0[17u].z - _525)) + _525;
    float _700 = (((_542.z - _620) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _620;
    float _704 = ((_644.z - _700) * cbMtdParam._m0[19u].w) + _700;
    vec4 _717 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _724 = (_717.x * 2.0) + (-1.0);
    float _725 = (_717.y * 2.0) + (-1.0);
    float _726 = dot(vec2(_724, _725), vec2(_724, _725));
    float _4067 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _734 = (_686 * (_717.z - _704)) + _704;
    float _743 = (_623 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_542.x * 2.0) + (-1.0)))) + (((_644.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _744 = (_624 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_542.y * 2.0) + (-1.0)))) + (((_644.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _756 = (((_724 - _743) + (cbMtdParam._m0[21u].x * _743)) * _686) + _743;
    float _757 = (((_725 - _744) + (cbMtdParam._m0[21u].x * _744)) * _686) + _744;
    float _758 = (_686 * (sqrt(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) - _630)) + _630;
    float _760 = cbMtdParam._m0[22u].x + _644.w;
    float _763 = fma(_758, _240 * NORMAL.x, fma(_757, _247 * TANGENT.x, (_233 * _225) * _756));
    float _766 = fma(_758, _240 * NORMAL.y, fma(_757, _247 * TANGENT.y, (_233 * _226) * _756));
    float _769 = fma(_758, _240 * NORMAL.z, fma(_757, _247 * TANGENT.z, (_233 * _227) * _756));
    float _773 = inversesqrt(dot(vec3(_763, _766, _769), vec3(_763, _766, _769)));
    float _774 = _773 * _763;
    float _775 = _773 * _766;
    float _776 = _773 * _769;
    float _4078 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _777 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4100 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4111 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _4122 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _795 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _847 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _837);
    float _848 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _837);
    float _849 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _837);
    float _853 = inversesqrt(dot(vec3(_847, _848, _849), vec3(_847, _848, _849)));
    float _854 = _847 * _853;
    float _855 = _848 * _853;
    float _856 = _849 * _853;
    vec4 _861 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _863 = _861.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1017 = sqrt(((_847 * _847) + (_848 * _848)) + (_849 * _849));
        float _1023 = (cbMatDynParam._m0[5u].x * _1017) + cbMatDynParam._m0[5u].y;
        float _4133 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1028 = (cbMatDynParam._m0[5u].z * _1017) + cbMatDynParam._m0[5u].w;
        float _4144 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) - _1024)) + _1024) < ((_863 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _874 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _875 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _893 = fma(_776, cbSceneParam._m0[5u].z, fma(_775, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _774));
    float _896 = fma(_776, cbSceneParam._m0[6u].z, fma(_775, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _774));
    float _899 = fma(_776, cbSceneParam._m0[7u].z, fma(_775, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _774));
    uint _912 = _274 + 9u;
    uint _913 = _912 + uint(cbMatDynParam._m0[0u].w);
    float _919 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * cbInstanceData._m0[_913].x;
    float _920 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * cbInstanceData._m0[_913].y;
    float _921 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * cbInstanceData._m0[_913].z;
    float _4155 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _922 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _923 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    vec4 _933 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _874, cbSceneParam._m0[86u].y * _875));
    float _937 = ((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * TEXCOORD_5.w) * _933.x;
    float _938 = dot(vec3(_774, _775, _776), vec3(_854, _855, _856));
    float _941 = _938 * 2.0;
    float _945 = (_941 * _774) - _854;
    float _946 = (_941 * _775) - _855;
    float _947 = (_941 * _776) - _856;
    float _951 = abs(dot(vec3(_854, _855, _856), vec3(_774, _775, _776)));
    float _4188 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _953 = sqrt(_777);
    float _966 = exp2((_953 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_953 * 3.0));
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1335;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1060 = fma(_1006, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998));
        float _1064 = fma(_1006, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998));
        float _1068 = fma(_1006, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998));
        float _1093 = _998 + _774;
        float _1094 = _1002 + _775;
        float _1095 = _1006 + _776;
        float _1105 = fma(_1095, cbModelParam._m0[26u].z, fma(_1094, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1093)) - _1060;
        float _1106 = fma(_1095, cbModelParam._m0[27u].z, fma(_1094, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1093)) - _1064;
        float _1107 = fma(_1095, cbModelParam._m0[28u].z, fma(_1094, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1093)) - _1068;
        float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
        float _1124 = ((_1111 * _1105) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1060 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1125 = ((_1111 * _1106) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1064 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1111 * _1107) / cbModelParam._m0[34u].z) + ((((((_1068 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1124, _1125, _1126), 0.0);
        float _1163 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1129.x + (-0.5));
        float _1165 = _1163 * (_1129.y + (-0.5));
        float _1166 = _1163 * (_1129.z + (-0.5));
        float _1173 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1136.x + (-0.5));
        float _1175 = _1173 * (_1136.y + (-0.5));
        float _1176 = _1173 * (_1136.z + (-0.5));
        float _1183 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1143.x + (-0.5));
        float _1185 = _1183 * (_1143.y + (-0.5));
        float _1186 = _1183 * (_1143.z + (-0.5));
        float _1193 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1150.x + (-0.5));
        float _1195 = _1193 * (_1150.y + (-0.5));
        float _1196 = _1193 * (_1150.z + (-0.5));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = _1164 * 0.5;
        float _1201 = _1174 * 0.5;
        float _1202 = _1184 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1217 = (dot(vec3(_774, _775, _776), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1227 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1229 + 1.0))) + _1234) * _1197;
        float _1244 = _1165 * 0.5;
        float _1245 = _1175 * 0.5;
        float _1246 = _1185 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_774, _775, _776), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4269 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1271 + 1.0))) + _1276) * _1198;
        float _1286 = _1166 * 0.5;
        float _1287 = _1176 * 0.5;
        float _1288 = _1186 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_774, _775, _776), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4302 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1313 + 1.0))) + _1318) * _1199;
        _1335 = _1166;
        _1337 = _1165;
        _1338 = _1164;
        _1339 = _1176;
        _1340 = _1175;
        _1341 = _1174;
        _1342 = _1186;
        _1343 = _1185;
        _1344 = _1184;
        _1345 = _1199;
        _1346 = _1198;
        _1347 = _1197;
        _1348 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1349 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1350 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1336;
        _1337 = _1336;
        _1338 = _1336;
        _1339 = _1336;
        _1340 = _1336;
        _1341 = _1336;
        _1342 = _1336;
        _1343 = _1336;
        _1344 = _1336;
        _1345 = _1336;
        _1346 = _1336;
        _1347 = _1336;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1377 = fma(_1006, cbModelParam._m0[30u].z, fma(_1002, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998));
        float _1381 = fma(_1006, cbModelParam._m0[31u].z, fma(_1002, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998));
        float _1385 = fma(_1006, cbModelParam._m0[32u].z, fma(_1002, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998));
        float _1408 = _998 + _774;
        float _1409 = _1002 + _775;
        float _1410 = _1006 + _776;
        float _1420 = fma(_1410, cbModelParam._m0[30u].z, fma(_1409, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1408)) - _1377;
        float _1421 = fma(_1410, cbModelParam._m0[31u].z, fma(_1409, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1408)) - _1381;
        float _1422 = fma(_1410, cbModelParam._m0[32u].z, fma(_1409, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1408)) - _1385;
        float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
        float _1439 = ((_1426 * _1420) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1377 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1426 * _1421) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1381 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1426 * _1422) / cbModelParam._m0[35u].z) + ((((((_1385 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        float _1476 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1443.x + (-0.5));
        float _1478 = _1476 * (_1443.y + (-0.5));
        float _1479 = _1476 * (_1443.z + (-0.5));
        float _1486 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1450.x + (-0.5));
        float _1488 = _1486 * (_1450.y + (-0.5));
        float _1489 = _1486 * (_1450.z + (-0.5));
        float _1496 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1457.x + (-0.5));
        float _1498 = _1496 * (_1457.y + (-0.5));
        float _1499 = _1496 * (_1457.z + (-0.5));
        float _1506 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1464.x + (-0.5));
        float _1508 = _1506 * (_1464.y + (-0.5));
        float _1509 = _1506 * (_1464.z + (-0.5));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = _1477 * 0.5;
        float _1514 = _1487 * 0.5;
        float _1515 = _1497 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_774, _775, _776), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4343 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4354 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4365 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_1540 + 1.0))) + _1545) * _1510;
        float _1555 = _1478 * 0.5;
        float _1556 = _1488 * 0.5;
        float _1557 = _1498 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_774, _775, _776), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4398 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1582 + 1.0))) + _1587) * _1511;
        float _1597 = _1479 * 0.5;
        float _1598 = _1489 * 0.5;
        float _1599 = _1499 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_774, _775, _776), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4431 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1624 + 1.0))) + _1629) * _1512;
        _1646 = _1479;
        _1647 = _1478;
        _1648 = _1477;
        _1649 = _1489;
        _1650 = _1488;
        _1651 = _1487;
        _1652 = _1499;
        _1653 = _1498;
        _1654 = _1497;
        _1655 = _1512;
        _1656 = _1511;
        _1657 = _1510;
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1660 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
    }
    else
    {
        _1646 = _1336;
        _1647 = _1336;
        _1648 = _1336;
        _1649 = _1336;
        _1650 = _1336;
        _1651 = _1336;
        _1652 = _1336;
        _1653 = _1336;
        _1654 = _1336;
        _1655 = _1336;
        _1656 = _1336;
        _1657 = _1336;
        _1658 = 0.0;
        _1659 = 0.0;
        _1660 = 0.0;
    }
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1348)) + _1348;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1349)) + _1349;
    float _1672 = (cbModelParam._m0[1u].x * (_1660 - _1350)) + _1350;
    float _1693 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1696 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1699 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1670));
    float _1714 = _945 * 0.5;
    float _1715 = _946 * 0.5;
    float _1716 = _947 * 0.5;
    float _1717 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1648, _1651, _1654, _1657));
    float _1720 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1723 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1757;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1730 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1335, _1339, _1342, _1345));
        float _1734 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1337, _1340, _1343, _1346));
        float _1738 = dot(vec4(_1714, _1715, _1716, 1.0), vec4(_1338, _1341, _1344, _1347));
        float _1745 = dot(vec4(cbModelParam._m0[39u]), vec4(_1714, _1715, _1716, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1768;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1759 = dot(vec4(cbModelParam._m0[40u]), vec4(_1714, _1715, _1716, 1.0));
        _1768 = dot(vec3(isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1759) ? 0.0 : (isnan(0.0) ? _1759 : max(0.0, _1759))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1768 = 1.0;
    }
    float _1772 = (_1768 * cbModelParam._m0[1u].x) + (_1757 * (1.0 - cbModelParam._m0[1u].x));
    float _1782 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _777);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1782 : min(cbModelParam._m0[25u].z, _1782));
    float _1864;
    float _1866;
    float _1868;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1831 = fma(_1006, cbModelParam._m0[13u].z, fma(_1002, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998)) + cbModelParam._m0[13u].w;
        float _1835 = fma(_1006, cbModelParam._m0[14u].z, fma(_1002, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998)) + cbModelParam._m0[14u].w;
        float _1839 = fma(_1006, cbModelParam._m0[15u].z, fma(_1002, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998)) + cbModelParam._m0[15u].w;
        float _1842 = fma(_947, cbModelParam._m0[13u].z, fma(_946, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945));
        float _1845 = fma(_947, cbModelParam._m0[14u].z, fma(_946, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945));
        float _1848 = fma(_947, cbModelParam._m0[15u].z, fma(_946, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945));
        float _1876;
        if (_1842 > 0.0)
        {
            _1876 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1876 = frontier_phi_17_15_ladder;
        }
        float _2046;
        if (_1845 > 0.0)
        {
            _2046 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2046 = frontier_phi_26_22_ladder;
        }
        float _2341;
        if (_1848 > 0.0)
        {
            _2341 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2341 = frontier_phi_38_33_ladder;
        }
        float _2343 = isnan(_2046) ? _1876 : (isnan(_1876) ? _2046 : min(_1876, _2046));
        float _2344 = isnan(_2341) ? _2343 : (isnan(_2343) ? _2341 : min(_2343, _2341));
        float _2348 = (_2344 * _1842) + _1831;
        float _2349 = (_2344 * _1845) + _1835;
        float _2350 = (_2344 * _1848) + _1839;
        float _2351 = _2344 * 9.9999997473787516355514526367188e-05;
        float _2353 = (-1.0) - _2351;
        float _2355 = _2351 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2350 > _2355) || ((_2350 < _2353) || ((_2349 > _2355) || ((_2349 < _2353) || ((_2348 < _2353) || (_2348 > _2355))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2350, cbModelParam._m0[9u].z, fma(_2349, cbModelParam._m0[9u].y, _2348 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2350, cbModelParam._m0[10u].z, fma(_2349, cbModelParam._m0[10u].y, _2348 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2350, cbModelParam._m0[11u].z, fma(_2349, cbModelParam._m0[11u].y, _2348 * cbModelParam._m0[11u].x))), _1783);
            frontier_phi_16_38_ladder = _2495.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2495.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2495.x * cbModelParam._m0[1u].y;
        }
        _1864 = frontier_phi_16_38_ladder_2;
        _1866 = frontier_phi_16_38_ladder_1;
        _1868 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1852 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_945, _946, _947), _1783);
        _1864 = _1852.x * cbModelParam._m0[1u].y;
        _1866 = _1852.y * cbModelParam._m0[1u].y;
        _1868 = _1852.z * cbModelParam._m0[1u].y;
    }
    float _1872 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _777);
    float _1873 = isnan(_1872) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1872 : min(cbModelParam._m0[25u].w, _1872));
    float _1963;
    float _1965;
    float _1967;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1927 = fma(_1006, cbModelParam._m0[21u].z, fma(_1002, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998)) + cbModelParam._m0[21u].w;
        float _1931 = fma(_1006, cbModelParam._m0[22u].z, fma(_1002, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998)) + cbModelParam._m0[22u].w;
        float _1935 = fma(_1006, cbModelParam._m0[23u].z, fma(_1002, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998)) + cbModelParam._m0[23u].w;
        float _1938 = fma(_947, cbModelParam._m0[21u].z, fma(_946, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945));
        float _1941 = fma(_947, cbModelParam._m0[22u].z, fma(_946, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945));
        float _1944 = fma(_947, cbModelParam._m0[23u].z, fma(_946, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945));
        float _2051;
        if (_1938 > 0.0)
        {
            _2051 = abs((1.0 - _1927) / _1938);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1927 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2051 = frontier_phi_28_24_ladder;
        }
        float _2368;
        if (_1941 > 0.0)
        {
            _2368 = abs((1.0 - _1931) / _1941);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1931 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2368 = frontier_phi_40_35_ladder;
        }
        float _2695;
        if (_1944 > 0.0)
        {
            _2695 = abs((1.0 - _1935) / _1944);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1944 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1935 + 1.0) / _1944);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2695 = frontier_phi_50_47_ladder;
        }
        float _2697 = isnan(_2368) ? _2051 : (isnan(_2051) ? _2368 : min(_2051, _2368));
        float _2698 = isnan(_2695) ? _2697 : (isnan(_2697) ? _2695 : min(_2697, _2695));
        float _2702 = (_2698 * _1938) + _1927;
        float _2703 = (_2698 * _1941) + _1931;
        float _2704 = (_2698 * _1944) + _1935;
        float _2705 = _2698 * 9.9999997473787516355514526367188e-05;
        float _2706 = (-1.0) - _2705;
        float _2708 = _2705 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2704 > _2708) || ((_2704 < _2706) || ((_2703 > _2708) || ((_2703 < _2706) || ((_2702 < _2706) || (_2702 > _2708))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2822 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2704, cbModelParam._m0[17u].z, fma(_2703, cbModelParam._m0[17u].y, _2702 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2704, cbModelParam._m0[18u].z, fma(_2703, cbModelParam._m0[18u].y, _2702 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2704, cbModelParam._m0[19u].z, fma(_2703, cbModelParam._m0[19u].y, _2702 * cbModelParam._m0[19u].x))), _1873);
            frontier_phi_25_50_ladder = _2822.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2822.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2822.x * cbModelParam._m0[1u].z;
        }
        _1963 = frontier_phi_25_50_ladder_2;
        _1965 = frontier_phi_25_50_ladder_1;
        _1967 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1947 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_945, _946, _947), _1873);
        _1963 = _1947.x * cbModelParam._m0[1u].z;
        _1965 = _1947.y * cbModelParam._m0[1u].z;
        _1967 = _1947.z * cbModelParam._m0[1u].z;
    }
    float _1979 = ((((1.0 - _966) * ((_953 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_966 * _953)) * _937;
    float _1980 = _1979 * ((cbModelParam._m0[1u].w * (_1963 - _1864)) + _1864);
    float _1981 = _1979 * ((cbModelParam._m0[1u].w * (_1965 - _1866)) + _1866);
    float _1982 = _1979 * ((cbModelParam._m0[1u].w * (_1967 - _1868)) + _1868);
    float _1985 = fma(_1982, cbSceneParam._m0[89u].z, fma(_1981, cbSceneParam._m0[89u].y, _1980 * cbSceneParam._m0[89u].x));
    float _1988 = fma(_1982, cbSceneParam._m0[90u].z, fma(_1981, cbSceneParam._m0[90u].y, _1980 * cbSceneParam._m0[90u].x));
    float _1991 = fma(_1982, cbSceneParam._m0[91u].z, fma(_1981, cbSceneParam._m0[91u].y, _1980 * cbSceneParam._m0[91u].x));
    float _2025 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2029 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2033 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2037 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2038 = _2025 / _2037;
    float _2039 = _2029 / _2037;
    float _2040 = _2033 / _2037;
    float _2187;
    float _2188;
    float _2189;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2067 = ((uint(_2040 > cbSceneParam._m0[59u].y) + uint(_2040 > cbSceneParam._m0[59u].x)) + uint(_2040 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2068 = _2067 + 43u;
        uint _2076 = _2067 + 44u;
        uint _2084 = _2067 + 45u;
        uint _2092 = _2067 + 46u;
        float _2103 = fma(_2037, cbSceneParam._m0[_2068].w, fma(_2033, cbSceneParam._m0[_2068].z, fma(_2029, cbSceneParam._m0[_2068].y, _2025 * cbSceneParam._m0[_2068].x)));
        float _2107 = fma(_2037, cbSceneParam._m0[_2076].w, fma(_2033, cbSceneParam._m0[_2076].z, fma(_2029, cbSceneParam._m0[_2076].y, _2025 * cbSceneParam._m0[_2076].x)));
        float _2115 = fma(_2037, cbSceneParam._m0[_2092].w, fma(_2033, cbSceneParam._m0[_2092].z, fma(_2029, cbSceneParam._m0[_2092].y, _2025 * cbSceneParam._m0[_2092].x)));
        float _2120 = cbSceneParam._m0[33u].z * _2115;
        float _2122 = cbSceneParam._m0[33u].w * _2115;
        float _2125 = fma(_2037, cbSceneParam._m0[_2084].w, fma(_2033, cbSceneParam._m0[_2084].z, fma(_2029, cbSceneParam._m0[_2084].y, _2025 * cbSceneParam._m0[_2084].x))) / _2115;
        float _2173 = (cbSceneParam._m0[33u].x - sqrt(((_2039 * _2039) + (_2038 * _2038)) + (_2040 * _2040))) * cbSceneParam._m0[33u].y;
        float _4557 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2180 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2120 + _2103) / _2115, (_2122 + _2107) / _2115), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2122 + _2103) / _2115, (_2107 - _2120) / _2115), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 - _2120) / _2115, (_2107 - _2122) / _2115), _2125), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 - _2122) / _2115, (_2120 + _2107) / _2115), _2125), 0.0)).x), vec4(0.25)));
        _2187 = 1.0 - (_2180 * cbSceneParam._m0[34u].x);
        _2188 = 1.0 - (_2180 * cbSceneParam._m0[34u].y);
        _2189 = 1.0 - (_2180 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2187 = 1.0;
        _2188 = 1.0;
        _2189 = 1.0;
    }
    float _2253;
    float _2255;
    float _2257;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2241 = fma(_2037, cbSceneParam._m0[63u].w, fma(_2033, cbSceneParam._m0[63u].z, fma(_2029, cbSceneParam._m0[63u].y, _2025 * cbSceneParam._m0[63u].x)));
        float _2242 = fma(_2037, cbSceneParam._m0[60u].w, fma(_2033, cbSceneParam._m0[60u].z, fma(_2029, cbSceneParam._m0[60u].y, _2025 * cbSceneParam._m0[60u].x))) / _2241;
        float _2243 = fma(_2037, cbSceneParam._m0[61u].w, fma(_2033, cbSceneParam._m0[61u].z, fma(_2029, cbSceneParam._m0[61u].y, _2025 * cbSceneParam._m0[61u].x))) / _2241;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2242 >= cbSceneParam._m0[64u].x) && (_2243 >= cbSceneParam._m0[64u].y)) && (_2242 <= cbSceneParam._m0[64u].z)) && (_2243 <= cbSceneParam._m0[64u].w))
        {
            float _2381 = fma(_2037, cbSceneParam._m0[62u].w, fma(_2033, cbSceneParam._m0[62u].z, fma(_2029, cbSceneParam._m0[62u].y, _2025 * cbSceneParam._m0[62u].x))) / _2241;
            float _2385 = isnan(cbSceneParam._m0[41u].w) ? _2381 : (isnan(_2381) ? cbSceneParam._m0[41u].w : max(_2381, cbSceneParam._m0[41u].w));
            float _2428 = (cbSceneParam._m0[33u].x - sqrt(((_2039 * _2039) + (_2038 * _2038)) + (_2040 * _2040))) * cbSceneParam._m0[33u].y;
            float _4573 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
            float _2435 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2242, cbSceneParam._m0[33u].w + _2243), _2385), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2242, _2243 - cbSceneParam._m0[33u].z), _2385), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2242 - cbSceneParam._m0[33u].z, _2243 - cbSceneParam._m0[33u].w), _2385), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2242 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2243), _2385), 0.0)).x), vec4(0.25)));
            float _2439 = 1.0 - (_2435 * cbSceneParam._m0[34u].x);
            float _2440 = 1.0 - (_2435 * cbSceneParam._m0[34u].y);
            float _2441 = 1.0 - (_2435 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2441) ? _2189 : (isnan(_2189) ? _2441 : min(_2189, _2441));
            frontier_phi_37_36_ladder_1 = isnan(_2440) ? _2188 : (isnan(_2188) ? _2440 : min(_2188, _2440));
            frontier_phi_37_36_ladder_2 = isnan(_2439) ? _2187 : (isnan(_2187) ? _2439 : min(_2187, _2439));
        }
        else
        {
            frontier_phi_37_36_ladder = _2189;
            frontier_phi_37_36_ladder_1 = _2188;
            frontier_phi_37_36_ladder_2 = _2187;
        }
        _2253 = frontier_phi_37_36_ladder_2;
        _2255 = frontier_phi_37_36_ladder_1;
        _2257 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2253 = _2187;
        _2255 = _2188;
        _2257 = _2189;
    }
    uvec4 _2262 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2264 = _2262.x * 14u;
    uint _2265 = _2264 + 13u;
    float _2272 = _937 + (-1.0);
    float _2277 = (cbLight._m0[_2265].x * _2272) + 1.0;
    float _2278 = (cbLight._m0[_2265].y * _2272) + 1.0;
    float _2279 = (cbLight._m0[_2265].z * _2272) + 1.0;
    float _2280 = (cbLight._m0[_2265].w * _2272) + 1.0;
    uint _2281 = _2264 + 5u;
    float _2287 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
    uint _2291 = _2264 + 4u;
    float _2300 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
    uint _2304 = _2264 | 1u;
    float _2315 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_774, _775, _776));
    float _2318 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_774, _775, _776));
    float _4609 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _4620 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2323 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * 0.3183098733425140380859375;
    float _2325 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * 0.3183098733425140380859375;
    float _2332 = ((cbLight._m0[_2281].x * _2287) * _2325) + (((cbLight._m0[_2291].x * _2253) * _2300) * _2323);
    float _2333 = ((_2287 * cbLight._m0[_2281].y) * _2325) + (((cbLight._m0[_2291].y * _2255) * _2300) * _2323);
    float _2334 = ((_2287 * cbLight._m0[_2281].z) * _2325) + (((cbLight._m0[_2291].z * _2257) * _2300) * _2323);
    uvec4 _2338 = floatBitsToUint(cbLight._m0[_2264 + 12u]);
    bool _2340 = _2338.x == 0u;
    float _2442;
    float _2444;
    float _2446;
    if (_2340)
    {
        _2442 = _2332;
        _2444 = _2333;
        _2446 = _2334;
    }
    else
    {
        uint _2450 = _2264 + 6u;
        float _2466 = (dot(vec3(cbLight._m0[_2264 + 2u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2467 = _2466 * _2466;
        float _4631 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2468 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2469 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2442 = (((cbLight._m0[_2450].x * 0.3183098733425140380859375) * _2468) * _2469) + _2332;
        _2444 = (((cbLight._m0[_2450].y * 0.3183098733425140380859375) * _2468) * _2469) + _2333;
        _2446 = (((cbLight._m0[_2450].z * 0.3183098733425140380859375) * _2468) * _2469) + _2334;
    }
    bool _2449 = _2338.y == 0u;
    float _2504;
    float _2506;
    float _2508;
    if (_2449)
    {
        _2504 = _2442;
        _2506 = _2444;
        _2508 = _2446;
    }
    else
    {
        uint _2666 = _2264 + 7u;
        float _2682 = (dot(vec3(cbLight._m0[_2264 + 3u].xyz), vec3(_774, _775, _776)) * 0.5) + 0.5;
        float _2683 = _2682 * _2682;
        float _4647 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2684 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2685 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2504 = (((cbLight._m0[_2666].x * 0.3183098733425140380859375) * _2684) * _2685) + _2442;
        _2506 = (((cbLight._m0[_2666].y * 0.3183098733425140380859375) * _2684) * _2685) + _2444;
        _2508 = (((cbLight._m0[_2666].z * 0.3183098733425140380859375) * _2684) * _2685) + _2446;
    }
    uint _2511 = _2264 + 8u;
    float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2264].w)) * _777) * 0.949999988079071044921875);
    float _2525 = _2524 * _2524;
    float _2526 = cbLight._m0[_2264].x + _854;
    float _2527 = cbLight._m0[_2264].y + _855;
    float _2528 = cbLight._m0[_2264].z + _856;
    float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
    float _2533 = _2532 * _2526;
    float _2534 = _2532 * _2527;
    float _2535 = _2532 * _2528;
    float _2536 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2264].xyz));
    float _4663 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _4674 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _2540 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2541 = dot(vec3(_774, _775, _776), vec3(_2533, _2534, _2535));
    float _4685 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2545 = dot(vec3(cbLight._m0[_2264].xyz), vec3(_2533, _2534, _2535));
    float _4696 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2549 = _2525 * _2525;
    float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
    float _2564 = (exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2565 = 1.0 - _2525;
    float _2576 = (0.5 / (((_2540 * ((_2539 * _2565) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2540 * _2565) + _2525) * _2539))) * _2539;
    float _4707 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2578 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
    uint _2592 = _2264 + 9u;
    float _2603 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _777) * 0.949999988079071044921875);
    float _2604 = _2603 * _2603;
    float _2605 = cbLight._m0[_2304].x + _854;
    float _2606 = cbLight._m0[_2304].y + _855;
    float _2607 = cbLight._m0[_2304].z + _856;
    float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
    float _2612 = _2611 * _2605;
    float _2613 = _2611 * _2606;
    float _2614 = _2611 * _2607;
    float _2615 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2304].xyz));
    float _4718 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2618 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2619 = dot(vec3(_774, _775, _776), vec3(_2612, _2613, _2614));
    float _4729 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2622 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2623 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2612, _2613, _2614));
    float _4740 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
    float _2627 = _2604 * _2604;
    float _2631 = ((_2622 * _2622) * (_2627 + (-1.0))) + 1.0;
    float _2640 = (exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2641 = 1.0 - _2604;
    float _2651 = (0.5 / (((_2540 * ((_2618 * _2641) + _2604)) + 9.9999999392252902907785028219223e-09) + (((_2540 * _2641) + _2604) * _2618))) * _2618;
    float _4751 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2653 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2627 / ((_2631 * _2631) * 3.141590118408203125));
    float _2663 = (((_2640 * cbLight._m0[_2592].x) * _2653) * _2287) + ((((cbLight._m0[_2511].x * _2253) * _2564) * _2578) * _2300);
    float _2664 = (((_2640 * cbLight._m0[_2592].y) * _2653) * _2287) + ((((cbLight._m0[_2511].y * _2255) * _2564) * _2578) * _2300);
    float _2665 = (((_2640 * cbLight._m0[_2592].z) * _2653) * _2287) + ((((cbLight._m0[_2511].z * _2257) * _2564) * _2578) * _2300);
    float _2721;
    float _2723;
    float _2725;
    if (_2340)
    {
        _2721 = _2663;
        _2723 = _2664;
        _2725 = _2665;
    }
    else
    {
        uint _2727 = _2264 + 2u;
        uint _2731 = _2264 + 10u;
        float _2745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2727].w)) * _777) * 0.949999988079071044921875);
        float _2746 = _2745 * _2745;
        float _2747 = cbLight._m0[_2727].x + _854;
        float _2748 = cbLight._m0[_2727].y + _855;
        float _2749 = cbLight._m0[_2727].z + _856;
        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
        float _2754 = _2753 * _2747;
        float _2755 = _2753 * _2748;
        float _2756 = _2753 * _2749;
        float _2757 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2727].xyz));
        float _4762 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2761 = dot(vec3(_774, _775, _776), vec3(_2754, _2755, _2756));
        float _4773 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2765 = dot(vec3(cbLight._m0[_2727].xyz), vec3(_2754, _2755, _2756));
        float _4784 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2769 = _2746 * _2746;
        float _2773 = ((_2764 * _2764) * (_2769 + (-1.0))) + 1.0;
        float _2782 = (exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2783 = 1.0 - _2746;
        float _2793 = (0.5 / (((_2540 * ((_2760 * _2783) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2540 * _2783) + _2746) * _2760))) * _2760;
        float _4795 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        float _2795 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2769 / ((_2773 * _2773) * 3.141590118408203125));
        float _2796 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2721 = (((_2782 * cbLight._m0[_2731].x) * _2795) * _2796) + _2663;
        _2723 = (((_2782 * cbLight._m0[_2731].y) * _2795) * _2796) + _2664;
        _2725 = (((_2782 * cbLight._m0[_2731].z) * _2795) * _2796) + _2665;
    }
    float _2827;
    float _2829;
    float _2831;
    if (_2449)
    {
        _2827 = _2721;
        _2829 = _2723;
        _2831 = _2725;
    }
    else
    {
        uint _2838 = _2264 + 3u;
        uint _2842 = _2264 + 11u;
        float _2856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2838].w)) * _777) * 0.949999988079071044921875);
        float _2857 = _2856 * _2856;
        float _2858 = cbLight._m0[_2838].x + _854;
        float _2859 = cbLight._m0[_2838].y + _855;
        float _2860 = cbLight._m0[_2838].z + _856;
        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
        float _2865 = _2864 * _2858;
        float _2866 = _2864 * _2859;
        float _2867 = _2864 * _2860;
        float _2868 = dot(vec3(_774, _775, _776), vec3(cbLight._m0[_2838].xyz));
        float _4811 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2871 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2872 = dot(vec3(_774, _775, _776), vec3(_2865, _2866, _2867));
        float _4822 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2875 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2876 = dot(vec3(cbLight._m0[_2838].xyz), vec3(_2865, _2866, _2867));
        float _4833 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2880 = _2857 * _2857;
        float _2884 = ((_2875 * _2875) * (_2880 + (-1.0))) + 1.0;
        float _2893 = (exp2(log2(1.0 - (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2894 = 1.0 - _2857;
        float _2904 = (0.5 / (((_2540 * ((_2871 * _2894) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2540 * _2894) + _2857) * _2871))) * _2871;
        float _4844 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2906 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2880 / ((_2884 * _2884) * 3.141590118408203125));
        float _2907 = isnan(1.0) ? _2280 : (isnan(_2280) ? 1.0 : min(_2280, 1.0));
        _2827 = (((_2893 * cbLight._m0[_2842].x) * _2906) * _2907) + _2721;
        _2829 = (((_2893 * cbLight._m0[_2842].y) * _2906) * _2907) + _2723;
        _2831 = (((_2893 * cbLight._m0[_2842].z) * _2906) * _2907) + _2725;
    }
    float _2973;
    float _2975;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_2262.y == 0u)
    {
        uvec4 _2928 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2929 = _2928.x;
        uint _2940 = uint((float(_2928.y) * floor(float(uint(cbSceneParam._m0[85u].y * _875) / _2929))) + floor(float(uint(cbSceneParam._m0[85u].x * _874) / _2929)));
        float _2950 = (log2(_2040 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2951 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        uint _2954 = uint(isnan(14.0) ? _2951 : (isnan(_2951) ? 14.0 : min(_2951, 14.0)));
        uvec4 _2959 = texelFetch(g_lightClusterGridBuffer, int(((_2954 << 2u) + (_2940 << 6u)) >> 2u));
        uint _2960 = _2959.x;
        uint _2961 = _2928.z;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        if (((((1u << ((_2961 >> 4u) & 15u)) + 4294967295u) & _2960) == 0u) || ((_2961 & 240u) == 0u))
        {
            _3040 = 0.0;
            _3042 = 0.0;
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
        }
        else
        {
            float _3041;
            float _3043;
            float _3045;
            float _3047;
            float _3049;
            float _3051;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            uint _3199 = 0u;
            uint _3208;
            bool _3209;
            for (;;)
            {
                _3208 = texelFetch(g_lightClassification, int((((_2954 << 5u) + (_2940 << 9u)) + (_3199 << 2u)) >> 2u)).x;
                _3209 = _3208 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3209)
                {
                    frontier_phi_71_pred = _3198;
                    frontier_phi_71_pred_1 = _3197;
                    frontier_phi_71_pred_2 = _3196;
                    frontier_phi_71_pred_3 = _3195;
                    frontier_phi_71_pred_4 = _3194;
                    frontier_phi_71_pred_5 = _3193;
                }
                else
                {
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    uint _3344;
                    _3338 = _3193;
                    _3339 = _3194;
                    _3340 = _3195;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3208;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    for (;;)
                    {
                        uint _3348 = uint(findLSB(_3344)) + (_3199 << 5u);
                        uint _3345 = (_3344 + 4294967295u) & _3344;
                        uint _3350 = _3348 * 48u;
                        vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 3u)).x));
                        uint _3370 = (_3348 * 48u) + 4u;
                        vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 3u)).x));
                        uint _3389 = (_3348 * 48u) + 8u;
                        vec3 _3400 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3389)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3389 + 2u)).x));
                        float _3404 = _3364.x - _2038;
                        float _3405 = _3364.y - _2039;
                        float _3406 = _3364.z - _2040;
                        float _3407 = dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406));
                        float _3410 = inversesqrt(_3407);
                        float _3411 = _3410 * _3404;
                        float _3412 = _3410 * _3405;
                        float _3413 = _3410 * _3406;
                        float _3414 = dot(vec3(_893, _896, _899), vec3(_3411, _3412, _3413));
                        float _3419 = 1.0 - (_3407 * _3364.w);
                        float _4870 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3420 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3421 = sqrt(_3407) * _3383.w;
                        float _3424 = 1.39999997615814208984375 / (_3421 + 1.39999997615814208984375);
                        float _3425 = _3424 * _3424;
                        float _3428 = ((1.0 - _3425) * _3414) + _3425;
                        float _3431 = _3421 * _3421;
                        float _3435 = ((isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0))) * _3420) / ((_3431 * 0.699999988079071044921875) + 1.0);
                        float _3439 = (-0.0) - _2038;
                        float _3440 = (-0.0) - _2039;
                        float _3441 = (-0.0) - _2040;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3446 = _3445 * _3439;
                        float _3447 = _3445 * _3440;
                        float _3448 = _3445 * _3441;
                        float _3455 = exp2(log2(1.0 / ((_3431 * 3.5) + 5.0)) * 0.25);
                        float _3456 = 1.0 - _953;
                        float _3463 = sqrt(1.0 - ((1.0 - (_3456 * _3456)) * (1.0 - (_3455 * _3455))));
                        float _3464 = _3463 * _3463;
                        float _3465 = _3464 * _3464;
                        float _3466 = _3446 + _3411;
                        float _3467 = _3447 + _3412;
                        float _3468 = _3448 + _3413;
                        float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                        float _3476 = dot(vec3(_893, _896, _899), vec3(_3446, _3447, _3448));
                        float _4886 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3479 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3480 = dot(vec3(_893, _896, _899), vec3(_3472 * _3466, _3472 * _3467, _3472 * _3468));
                        float _4897 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3483 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3487 = ((_3483 * _3483) * (_3465 + (-1.0))) + 1.0;
                        float _3488 = _3424 * _3464;
                        float _3489 = _3488 * _3488;
                        float _3492 = ((1.0 - _3489) * _3414) + _3489;
                        float _4908 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3493 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3494 = 1.0 - _3464;
                        float _3504 = (0.5 / (((_3493 * ((_3479 * _3494) + _3464)) + 9.9999999392252902907785028219223e-09) + (((_3493 * _3494) + _3464) * _3479))) * _3493;
                        float _4919 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3515 = (((_3465 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3487 * _3487) * ((_3431 * 2.1991131305694580078125) + 3.141590118408203125))) * _3420;
                        _3268 = (_3435 * _3383.x) + _3341;
                        _3269 = (_3435 * _3383.y) + _3342;
                        _3270 = (_3435 * _3383.z) + _3343;
                        _3265 = (_3515 * _3400.x) + _3338;
                        _3266 = (_3515 * _3400.y) + _3339;
                        _3267 = (_3515 * _3400.z) + _3340;
                        if (_3345 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3338 = _3265;
                            _3339 = _3266;
                            _3340 = _3267;
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3345;
                        }
                    }
                    frontier_phi_71_pred = _3270;
                    frontier_phi_71_pred_1 = _3269;
                    frontier_phi_71_pred_2 = _3268;
                    frontier_phi_71_pred_3 = _3267;
                    frontier_phi_71_pred_4 = _3266;
                    frontier_phi_71_pred_5 = _3265;
                }
                _3051 = frontier_phi_71_pred;
                _3049 = frontier_phi_71_pred_1;
                _3047 = frontier_phi_71_pred_2;
                _3045 = frontier_phi_71_pred_3;
                _3043 = frontier_phi_71_pred_4;
                _3041 = frontier_phi_71_pred_5;
                uint _3200 = _3199 + 1u;
                if (_3200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3193 = _3041;
                    _3194 = _3043;
                    _3195 = _3045;
                    _3196 = _3047;
                    _3197 = _3049;
                    _3198 = _3051;
                    _3199 = _3200;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3040 = _3041;
            _3042 = _3043;
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
        }
        uvec4 _3054 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3055 = _3054.z;
        uint _3057 = (_3055 >> 8u) & 15u;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        if (((4294967295u << _3057) & _2960) == 0u)
        {
            _3161 = _3040;
            _3163 = _3042;
            _3165 = _3044;
            _3167 = _3046;
            _3169 = _3048;
            _3171 = _3050;
        }
        else
        {
            float _3186 = inversesqrt(dot(vec3(_2038, _2039, _2040), vec3(_2038, _2039, _2040)));
            float _3187 = _3186 * _2038;
            float _3188 = _3186 * _2039;
            float _3189 = _3186 * _2040;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3057 < ((_3055 >> 12u) & 15u))
            {
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3321 = _3040;
                float _3322 = _3042;
                float _3323 = _3044;
                float _3324 = _3046;
                float _3325 = _3048;
                float _3326 = _3050;
                uint _3327 = _3057;
                uint _3336;
                bool _3337;
                for (;;)
                {
                    _3336 = texelFetch(g_lightClassification, int((((_2954 << 5u) + (_2940 << 9u)) + (_3327 << 2u)) >> 2u)).x;
                    _3337 = _3336 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3337)
                    {
                        frontier_phi_82_pred = _3326;
                        frontier_phi_82_pred_1 = _3325;
                        frontier_phi_82_pred_2 = _3324;
                        frontier_phi_82_pred_3 = _3323;
                        frontier_phi_82_pred_4 = _3322;
                        frontier_phi_82_pred_5 = _3321;
                    }
                    else
                    {
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _3826;
                        float _3827;
                        float _3542 = _3321;
                        float _3543 = _3322;
                        float _3544 = _3323;
                        float _3545 = _3324;
                        float _3546 = _3325;
                        float _3547 = _3326;
                        uint _3548 = _3336;
                        uint _3549;
                        vec4 _3574;
                        float _3575;
                        vec4 _3590;
                        vec3 _3602;
                        vec4 _3617;
                        vec4 _3632;
                        float _3678;
                        bool _3679;
                        for (;;)
                        {
                            uint _3559 = ((_3327 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3548));
                            _3549 = (_3548 + 4294967295u) & _3548;
                            uint _3561 = _3559 * 40u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            _3575 = _3574.w;
                            uint _3577 = (_3559 * 40u) + 4u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3592 = (_3559 * 40u) + 8u;
                            _3602 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x));
                            uint _3604 = (_3559 * 40u) + 16u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3619 = (_3559 * 40u) + 20u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3559 * 40u) + 24u;
                            vec4 _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            uint _3653 = (_3559 * 40u) + 28u;
                            vec4 _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            _3678 = fma(_2040, _3666.z, fma(_2039, _3666.y, _3666.x * _2038)) + _3666.w;
                            _3679 = !((fma(_2040, _3647.z, fma(_2039, _3647.y, _3647.x * _2038)) + _3647.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3679)
                            {
                                float _3706 = _3574.x - _2038;
                                float _3707 = _3574.y - _2039;
                                float _3708 = _3574.z - _2040;
                                float _3709 = dot(vec3(_3706, _3707, _3708), vec3(_3706, _3707, _3708));
                                float _3712 = inversesqrt(_3709);
                                float _3713 = _3712 * _3706;
                                float _3714 = _3712 * _3707;
                                float _3715 = _3712 * _3708;
                                float _3719 = 1.0 - (_3709 / (_3575 * _3575));
                                float _4930 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3724 = sqrt(_3709) * _3590.w;
                                float _3726 = 1.39999997615814208984375 / (_3724 + 1.39999997615814208984375);
                                float _3727 = _3726 * _3726;
                                float _3730 = ((1.0 - _3727) * dot(vec3(_3713, _3714, _3715), vec3(_893, _896, _899))) + _3727;
                                float _3733 = _3724 * _3724;
                                float _3737 = (fma(_2040, _3617.z, fma(_2039, _3617.y, _3617.x * _2038)) + _3617.w) / _3678;
                                float _3738 = (fma(_2040, _3632.z, fma(_2039, _3632.y, _3632.x * _2038)) + _3632.w) / _3678;
                                float _3742 = 1.0 - dot(vec2(_3737, _3738), vec2(_3737, _3738));
                                float _4946 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3743 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3744 = _3743 * (((isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0))) * _3720) / ((_3733 * 0.699999988079071044921875) + 1.0));
                                float _3756 = exp2(log2(1.0 / ((_3733 * 3.5) + 5.0)) * 0.25);
                                float _3757 = 1.0 - _953;
                                float _3764 = sqrt(1.0 - ((1.0 - (_3757 * _3757)) * (1.0 - (_3756 * _3756))));
                                float _3765 = _3764 * _3764;
                                float _3766 = _3765 * _3765;
                                float _3767 = _3713 - _3187;
                                float _3768 = _3714 - _3188;
                                float _3769 = _3715 - _3189;
                                float _3773 = inversesqrt(dot(vec3(_3767, _3768, _3769), vec3(_3767, _3768, _3769)));
                                float _3777 = dot(vec3(_893, _896, _899), vec3((-0.0) - _3187, (-0.0) - _3188, (-0.0) - _3189));
                                float _4957 = isnan(0.0) ? _3777 : (isnan(_3777) ? 0.0 : max(_3777, 0.0));
                                float _3780 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3781 = dot(vec3(_893, _896, _899), vec3(_3773 * _3767, _3773 * _3768, _3773 * _3769));
                                float _4968 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3784 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3788 = ((_3784 * _3784) * (_3766 + (-1.0))) + 1.0;
                                float _3789 = _3726 * _3765;
                                float _3790 = _3789 * _3789;
                                float _3796 = ((1.0 - _3790) * dot(vec3(_893, _896, _899), vec3(_3713, _3714, _3715))) + _3790;
                                float _4979 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3797 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3798 = 1.0 - _3765;
                                float _3808 = (0.5 / (((_3797 * ((_3780 * _3798) + _3765)) + 9.9999999392252902907785028219223e-09) + (((_3797 * _3798) + _3765) * _3780))) * _3797;
                                float _4990 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3818 = (_3743 * _3720) * (((_3766 * 3.1415927410125732421875) * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) / ((_3788 * _3788) * ((_3733 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3744 * _3590.z;
                                frontier_phi_88_pred_1 = _3744 * _3590.y;
                                frontier_phi_88_pred_2 = _3744 * _3590.x;
                                frontier_phi_88_pred_3 = _3818 * _3602.z;
                                frontier_phi_88_pred_4 = _3818 * _3602.y;
                                frontier_phi_88_pred_5 = _3818 * _3602.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3827 = frontier_phi_88_pred;
                            _3826 = frontier_phi_88_pred_1;
                            _3825 = frontier_phi_88_pred_2;
                            _3824 = frontier_phi_88_pred_3;
                            _3823 = frontier_phi_88_pred_4;
                            _3822 = frontier_phi_88_pred_5;
                            _3532 = _3825 + _3545;
                            _3533 = _3826 + _3546;
                            _3534 = _3827 + _3547;
                            _3529 = _3822 + _3542;
                            _3530 = _3823 + _3543;
                            _3531 = _3824 + _3544;
                            if (_3549 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3542 = _3529;
                                _3543 = _3530;
                                _3544 = _3531;
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3549;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3534;
                        frontier_phi_82_pred_1 = _3533;
                        frontier_phi_82_pred_2 = _3532;
                        frontier_phi_82_pred_3 = _3531;
                        frontier_phi_82_pred_4 = _3530;
                        frontier_phi_82_pred_5 = _3529;
                    }
                    _3172 = frontier_phi_82_pred;
                    _3170 = frontier_phi_82_pred_1;
                    _3168 = frontier_phi_82_pred_2;
                    _3166 = frontier_phi_82_pred_3;
                    _3164 = frontier_phi_82_pred_4;
                    _3162 = frontier_phi_82_pred_5;
                    uint _3328 = _3327 + 1u;
                    if (_3328 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3321 = _3162;
                        _3322 = _3164;
                        _3323 = _3166;
                        _3324 = _3168;
                        _3325 = _3170;
                        _3326 = _3172;
                        _3327 = _3328;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3168;
                frontier_phi_63_64_ladder_1 = _3172;
                frontier_phi_63_64_ladder_2 = _3170;
                frontier_phi_63_64_ladder_3 = _3166;
                frontier_phi_63_64_ladder_4 = _3164;
                frontier_phi_63_64_ladder_5 = _3162;
            }
            else
            {
                frontier_phi_63_64_ladder = _3046;
                frontier_phi_63_64_ladder_1 = _3050;
                frontier_phi_63_64_ladder_2 = _3048;
                frontier_phi_63_64_ladder_3 = _3044;
                frontier_phi_63_64_ladder_4 = _3042;
                frontier_phi_63_64_ladder_5 = _3040;
            }
            _3161 = frontier_phi_63_64_ladder_5;
            _3163 = frontier_phi_63_64_ladder_4;
            _3165 = frontier_phi_63_64_ladder_3;
            _3167 = frontier_phi_63_64_ladder;
            _3169 = frontier_phi_63_64_ladder_2;
            _3171 = frontier_phi_63_64_ladder_1;
        }
        float _3176 = isnan(1.0) ? _937 : (isnan(_937) ? 1.0 : min(_937, 1.0));
        _2973 = (_3176 * _3167) + _2504;
        _2975 = (_3176 * _3169) + _2506;
        _2977 = (_3176 * _3171) + _2508;
        _2979 = ((_3161 * 0.039999999105930328369140625) * _3176) + _2827;
        _2981 = ((_3163 * 0.039999999105930328369140625) * _3176) + _2829;
        _2983 = ((_3165 * 0.039999999105930328369140625) * _3176) + _2831;
    }
    else
    {
        _2973 = _2504;
        _2975 = _2506;
        _2977 = _2508;
        _2979 = _2827;
        _2981 = _2829;
        _2983 = _2831;
    }
    float _5006 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _5017 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _5028 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _3000 = ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2973 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _937))) + ((_2979 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _3001 = ((isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_2975 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _937))) + ((_2981 + ((isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    float _3002 = ((isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_2977 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _937))) + ((_2983 + ((isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))) * _1772)) * cbPerFrame._m0[3u].x);
    uint _3003 = _274 + 6u;
    float _3011 = _874 / cbSceneParam._m0[86u].x;
    float _3012 = _875 / cbSceneParam._m0[86u].y;
    vec4 _3026 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3011, _3012, (log2((isnan(cbSceneParam._m0[77u].w) ? _795 : (isnan(_795) ? cbSceneParam._m0[77u].w : min(_795, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3028 = _3026.x;
    float _3029 = _3026.y;
    float _3030 = _3026.z;
    float _3031 = _3026.w;
    float _3103;
    float _3105;
    float _3107;
    float _3109;
    if (_795 > cbSceneParam._m0[78u].w)
    {
        float _3065 = isnan(_795) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _795 : min(cbSceneParam._m0[80u].w, _795));
        float _3066 = _3065 / _795;
        float _3077 = _3066 * _847;
        float _3078 = _848 * _3066;
        float _3079 = (-0.0) - _3078;
        float _3081 = _3066 * _849;
        float _3083 = (cbSceneParam._m0[77u].w * _3079) / _3065;
        float _3084 = _3083 + cbSceneParam._m0[79u].w;
        float _3085 = cbSceneParam._m0[79u].w - _3078;
        float _3091 = sqrt(((_3077 * _3077) + (_3078 * _3078)) + (_3081 * _3081));
        float _3094 = (1.0 - (cbSceneParam._m0[77u].w / _3065)) * _3091;
        float _3099 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3101 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3278;
        if (abs((_3079 - _3083) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3278 = ((((_3084 > 0.0) ? exp2(_3099 * _3084) : (2.0 - exp2(_3101 * _3084))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3094;
        }
        else
        {
            float _3222 = 1.0 / cbSceneParam._m0[80u].x;
            float _3223 = isnan(_3085) ? _3084 : (isnan(_3084) ? _3085 : max(_3084, _3085));
            float _3224 = isnan(_3085) ? _3084 : (isnan(_3084) ? _3085 : min(_3084, _3085));
            float _3233 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : min(_3223, 0.0));
            float _3234 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : min(_3224, 0.0));
            _3278 = ((abs(_3091 / _3079) * cbSceneParam._m0[80u].y) * ((((_3233 - _3234) * 2.0) - ((exp2(_3099 * (isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0)))) - exp2(_3099 * (isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))))) * _3222)) - ((exp2(_3101 * _3233) - exp2(_3101 * _3234)) * _3222))) + (_3094 * cbSceneParam._m0[80u].z);
        }
        vec4 _3280 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3011, _3012, 1.0), 0.0);
        float _3289 = exp2((_3278 * (-1.44269502162933349609375)) * (1.0 - _3280.w));
        float _3290 = log2(_3289);
        float _3306 = log2(_3031);
        _3103 = (exp2(_3306 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].x)) * _3280.x) / cbSceneParam._m0[78u].x)) + _3028;
        _3105 = (exp2(_3306 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].y)) * _3280.y) / cbSceneParam._m0[78u].y)) + _3029;
        _3107 = (exp2(_3306 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].z)) * _3280.z) / cbSceneParam._m0[78u].z)) + _3030;
        _3109 = _3289 * _3031;
    }
    else
    {
        _3103 = _3028;
        _3105 = _3029;
        _3107 = _3030;
        _3109 = _3031;
    }
    bool _3316;
    vec4 _3119;
    vec4 _3141;
    float _3143;
    float _3147;
    float _3148;
    float _3149;
    float _3150;
    bool _3160;
    for (;;)
    {
        _3119 = cbMatDynParam._m0[0u];
        float _3121 = roundEven(_3119.y);
        bool _3122 = _3121 == 3.0;
        float _3123 = log2(_3109);
        float _3130 = exp2(_3123 * cbSceneParam._m0[78u].x) * _3000;
        float _3131 = exp2(_3123 * cbSceneParam._m0[78u].y) * _3001;
        float _3132 = exp2(_3123 * cbSceneParam._m0[78u].z) * _3002;
        float _3139 = _863 + (-0.5);
        _3141 = cbMtdParam._m0[1u];
        _3143 = _3141.y * _3139;
        float _3146 = (_3121 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3147 = _3146 * (_3122 ? _3130 : (_3130 + (cbSceneParam._m0[72u].w * _3103)));
        _3148 = _3146 * (_3122 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3105)));
        _3149 = _3146 * (_3122 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3107)));
        _3150 = _3139 * 0.999000012874603271484375;
        _3160 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3160)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _3150) < 0.5)
            {
                _3316 = true;
                break;
            }
        }
        uint _3257 = _912 + uint(_3119.w);
        if ((cbInstanceData._m0[_3257].w < 1.0) && ((cbInstanceData._m0[_3257].w + _3150) < 0.5))
        {
            _3316 = true;
            break;
        }
        if ((_3143 + 1.0) < _3141.x)
        {
            _3316 = true;
            break;
        }
        _3316 = false;
        break;
    }
    float _3520;
    if (_3316)
    {
        discard_state = true;
        _3520 = 0.0;
    }
    else
    {
        _3520 = cbInstanceData._m0[_3003].w;
    }
    SV_Target.x = _3147;
    SV_Target.y = _3148;
    SV_Target.z = _3149;
    SV_Target.w = _3520;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3003].w;
    discard_exit();
}


