#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _977;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _290 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _244) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _245) + cbTextureTilingScale._m0[20u].w));
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _320 = _316.z;
    float _324 = (_316.x * 2.0) + (-1.0);
    float _325 = (_316.y * 2.0) + (-1.0);
    float _326 = dot(vec2(_324, _325), vec2(_324, _325));
    float _3287 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _332 = sqrt(1.0 - (isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))));
    float _337 = _324 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_290.x * 2.0) + (-1.0)));
    float _338 = _325 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_290.y * 2.0) + (-1.0)));
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _357 = _355.x;
    float _358 = 1.0 - _357;
    float _374 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_357 - _358) * cbMtdParam._m0[24u].z) + _358) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3298 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _375 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _382 = (_375 * (cbMtdParam._m0[17u].x - _270)) + _270;
    float _383 = (_375 * (cbMtdParam._m0[17u].y - _271)) + _271;
    float _384 = (_375 * (cbMtdParam._m0[17u].z - _272)) + _272;
    float _389 = (((_290.z - _320) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _320;
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _409 = (_402.x * 2.0) + (-1.0);
    float _410 = (_402.y * 2.0) + (-1.0);
    float _411 = dot(vec2(_409, _410), vec2(_409, _410));
    float _3309 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _419 = (_375 * (_402.z - _389)) + _389;
    float _431 = (((_409 - _337) + (cbMtdParam._m0[21u].x * _337)) * _375) + _337;
    float _432 = (((_410 - _338) + (cbMtdParam._m0[21u].x * _338)) * _375) + _338;
    float _433 = (_375 * (sqrt(1.0 - (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) - _332)) + _332;
    float _438 = cbMtdParam._m0[22u].x + _316.w;
    float _441 = fma(_433, _211 * NORMAL.x, fma(_432, _218 * TANGENT.x, (_204 * _196) * _431));
    float _444 = fma(_433, _211 * NORMAL.y, fma(_432, _218 * TANGENT.y, (_204 * _197) * _431));
    float _447 = fma(_433, _211 * NORMAL.z, fma(_432, _218 * TANGENT.z, (_204 * _198) * _431));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    float _3320 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _455 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _3331 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _3342 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3353 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3364 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _473 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _524 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _514);
    float _525 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _514);
    float _526 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _514);
    float _530 = inversesqrt(dot(vec3(_524, _525, _526), vec3(_524, _525, _526)));
    float _531 = _524 * _530;
    float _532 = _525 * _530;
    float _533 = _526 * _530;
    float _539 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _540 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _561 = fma(_454, cbSceneParam._m0[5u].z, fma(_453, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _452));
    float _564 = fma(_454, cbSceneParam._m0[6u].z, fma(_453, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _452));
    float _567 = fma(_454, cbSceneParam._m0[7u].z, fma(_453, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _452));
    uint _581 = (_224 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _587 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0)))) * cbInstanceData._m0[_581].x;
    float _588 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_581].y;
    float _589 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_581].z;
    float _3375 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _3386 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _3397 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    vec4 _601 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _539, cbSceneParam._m0[86u].y * _540));
    float _605 = ((isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) * TEXCOORD_5.w) * _601.x;
    float _606 = dot(vec3(_452, _453, _454), vec3(_531, _532, _533));
    float _609 = _606 * 2.0;
    float _613 = (_609 * _452) - _531;
    float _614 = (_609 * _453) - _532;
    float _615 = (_609 * _454) - _533;
    float _619 = abs(dot(vec3(_531, _532, _533), vec3(_452, _453, _454)));
    float _3408 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _621 = sqrt(_455);
    float _634 = exp2((_621 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_621 * 3.0));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _976;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _701 = fma(_674, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666));
        float _705 = fma(_674, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666));
        float _709 = fma(_674, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666));
        float _734 = _666 + _452;
        float _735 = _670 + _453;
        float _736 = _674 + _454;
        float _746 = fma(_736, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734)) - _701;
        float _747 = fma(_736, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734)) - _705;
        float _748 = fma(_736, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734)) - _709;
        float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
        float _765 = ((_752 * _746) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_701 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _766 = ((_752 * _747) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_705 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _767 = ((_752 * _748) / cbModelParam._m0[34u].z) + ((((((_709 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        float _804 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_770.x + (-0.5));
        float _806 = _804 * (_770.y + (-0.5));
        float _807 = _804 * (_770.z + (-0.5));
        float _814 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_777.x + (-0.5));
        float _816 = _814 * (_777.y + (-0.5));
        float _817 = _814 * (_777.z + (-0.5));
        float _824 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_784.x + (-0.5));
        float _826 = _824 * (_784.y + (-0.5));
        float _827 = _824 * (_784.z + (-0.5));
        float _834 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_791.x + (-0.5));
        float _836 = _834 * (_791.y + (-0.5));
        float _837 = _834 * (_791.z + (-0.5));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = _805 * 0.5;
        float _842 = _815 * 0.5;
        float _843 = _825 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _858 = (dot(vec3(_452, _453, _454), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _868 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3456 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_870 + 1.0))) + _875) * _838;
        float _885 = _806 * 0.5;
        float _886 = _816 * 0.5;
        float _887 = _826 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _901 = (dot(vec3(_452, _453, _454), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _910 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3489 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_912 + 1.0))) + _917) * _839;
        float _927 = _807 * 0.5;
        float _928 = _817 * 0.5;
        float _929 = _827 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _943 = (dot(vec3(_452, _453, _454), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _952 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3522 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_954 + 1.0))) + _959) * _840;
        _976 = _807;
        _978 = _806;
        _979 = _805;
        _980 = _817;
        _981 = _816;
        _982 = _815;
        _983 = _827;
        _984 = _826;
        _985 = _825;
        _986 = _840;
        _987 = _839;
        _988 = _838;
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
    }
    else
    {
        _976 = _977;
        _978 = _977;
        _979 = _977;
        _980 = _977;
        _981 = _977;
        _982 = _977;
        _983 = _977;
        _984 = _977;
        _985 = _977;
        _986 = _977;
        _987 = _977;
        _988 = _977;
        _989 = 0.0;
        _990 = 0.0;
        _991 = 0.0;
    }
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1016 = fma(_674, cbModelParam._m0[30u].z, fma(_670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _666));
        float _1020 = fma(_674, cbModelParam._m0[31u].z, fma(_670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _666));
        float _1024 = fma(_674, cbModelParam._m0[32u].z, fma(_670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _666));
        float _1047 = _666 + _452;
        float _1048 = _670 + _453;
        float _1049 = _674 + _454;
        float _1059 = fma(_1049, cbModelParam._m0[30u].z, fma(_1048, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047)) - _1016;
        float _1060 = fma(_1049, cbModelParam._m0[31u].z, fma(_1048, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047)) - _1020;
        float _1061 = fma(_1049, cbModelParam._m0[32u].z, fma(_1048, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047)) - _1024;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1016 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1020 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[35u].z) + ((((((_1024 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1115 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1082.x + (-0.5));
        float _1117 = _1115 * (_1082.y + (-0.5));
        float _1118 = _1115 * (_1082.z + (-0.5));
        float _1125 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1089.x + (-0.5));
        float _1127 = _1125 * (_1089.y + (-0.5));
        float _1128 = _1125 * (_1089.z + (-0.5));
        float _1135 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1096.x + (-0.5));
        float _1137 = _1135 * (_1096.y + (-0.5));
        float _1138 = _1135 * (_1096.z + (-0.5));
        float _1145 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1103.x + (-0.5));
        float _1147 = _1145 * (_1103.y + (-0.5));
        float _1148 = _1145 * (_1103.z + (-0.5));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = _1116 * 0.5;
        float _1153 = _1126 * 0.5;
        float _1154 = _1136 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_452, _453, _454), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3585 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1179 + 1.0))) + _1184) * _1149;
        float _1194 = _1117 * 0.5;
        float _1195 = _1127 * 0.5;
        float _1196 = _1137 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_452, _453, _454), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3618 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1221 + 1.0))) + _1226) * _1150;
        float _1236 = _1118 * 0.5;
        float _1237 = _1128 * 0.5;
        float _1238 = _1138 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_452, _453, _454), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3651 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1263 + 1.0))) + _1268) * _1151;
        _1285 = _1118;
        _1286 = _1117;
        _1287 = _1116;
        _1288 = _1128;
        _1289 = _1127;
        _1290 = _1126;
        _1291 = _1138;
        _1292 = _1137;
        _1293 = _1136;
        _1294 = _1151;
        _1295 = _1150;
        _1296 = _1149;
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _977;
        _1286 = _977;
        _1287 = _977;
        _1288 = _977;
        _1289 = _977;
        _1290 = _977;
        _1291 = _977;
        _1292 = _977;
        _1293 = _977;
        _1294 = _977;
        _1295 = _977;
        _1296 = _977;
        _1297 = 0.0;
        _1298 = 0.0;
        _1299 = 0.0;
    }
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _989)) + _989;
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _990)) + _990;
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _991)) + _991;
    float _1332 = fma(_1311, cbSceneParam._m0[89u].z, fma(_1310, cbSceneParam._m0[89u].y, _1309 * cbSceneParam._m0[89u].x));
    float _1335 = fma(_1311, cbSceneParam._m0[90u].z, fma(_1310, cbSceneParam._m0[90u].y, _1309 * cbSceneParam._m0[90u].x));
    float _1338 = fma(_1311, cbSceneParam._m0[91u].z, fma(_1310, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1309));
    float _1353 = _613 * 0.5;
    float _1354 = _614 * 0.5;
    float _1355 = _615 * 0.5;
    float _1356 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1359 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1362 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1396;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1369 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_976, _980, _983, _986));
        float _1373 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_978, _981, _984, _987));
        float _1377 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_979, _982, _985, _988));
        float _1384 = dot(vec4(cbModelParam._m0[39u]), vec4(_1353, _1354, _1355, 1.0));
        _1396 = dot(vec3(isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1384) ? 0.0 : (isnan(0.0) ? _1384 : max(0.0, _1384))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1396 = 1.0;
    }
    float _1407;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1398 = dot(vec4(cbModelParam._m0[40u]), vec4(_1353, _1354, _1355, 1.0));
        _1407 = dot(vec3(isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1398) ? 0.0 : (isnan(0.0) ? _1398 : max(0.0, _1398))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1407 = 1.0;
    }
    float _1411 = (_1407 * cbModelParam._m0[1u].x) + (_1396 * (1.0 - cbModelParam._m0[1u].x));
    float _1421 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _455);
    float _1422 = isnan(_1421) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1421 : min(cbModelParam._m0[25u].z, _1421));
    float _1503;
    float _1505;
    float _1507;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1470 = fma(_674, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _666)) + cbModelParam._m0[13u].w;
        float _1474 = fma(_674, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _666)) + cbModelParam._m0[14u].w;
        float _1478 = fma(_674, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _666)) + cbModelParam._m0[15u].w;
        float _1481 = fma(_615, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613));
        float _1484 = fma(_615, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613));
        float _1487 = fma(_615, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613));
        float _1515;
        if (_1481 > 0.0)
        {
            _1515 = abs((1.0 - _1470) / _1481);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1481 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1470 + 1.0) / _1481);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1515 = frontier_phi_14_12_ladder;
        }
        float _1719;
        if (_1484 > 0.0)
        {
            _1719 = abs((1.0 - _1474) / _1484);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1474 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1719 = frontier_phi_23_19_ladder;
        }
        float _1962;
        if (_1487 > 0.0)
        {
            _1962 = abs((1.0 - _1478) / _1487);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1478 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1962 = frontier_phi_35_30_ladder;
        }
        float _1964 = isnan(_1719) ? _1515 : (isnan(_1515) ? _1719 : min(_1515, _1719));
        float _1965 = isnan(_1962) ? _1964 : (isnan(_1964) ? _1962 : min(_1964, _1962));
        float _1969 = (_1965 * _1481) + _1470;
        float _1970 = (_1965 * _1484) + _1474;
        float _1971 = (_1965 * _1487) + _1478;
        float _1972 = _1965 * 9.9999997473787516355514526367188e-05;
        float _1974 = (-1.0) - _1972;
        float _1976 = _1972 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1971 > _1976) || ((_1971 < _1974) || ((_1970 > _1976) || ((_1970 < _1974) || ((_1969 < _1974) || (_1969 > _1976))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2095 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1971, cbModelParam._m0[9u].z, fma(_1970, cbModelParam._m0[9u].y, _1969 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1971, cbModelParam._m0[10u].z, fma(_1970, cbModelParam._m0[10u].y, _1969 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1971, cbModelParam._m0[11u].z, fma(_1970, cbModelParam._m0[11u].y, _1969 * cbModelParam._m0[11u].x))), _1422);
            frontier_phi_13_35_ladder = _2095.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2095.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2095.x * cbModelParam._m0[1u].y;
        }
        _1503 = frontier_phi_13_35_ladder_2;
        _1505 = frontier_phi_13_35_ladder_1;
        _1507 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1491 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_613, _614, _615), _1422);
        _1503 = _1491.x * cbModelParam._m0[1u].y;
        _1505 = _1491.y * cbModelParam._m0[1u].y;
        _1507 = _1491.z * cbModelParam._m0[1u].y;
    }
    float _1511 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _455);
    float _1512 = isnan(_1511) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1511 : min(cbModelParam._m0[25u].w, _1511));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1567 = fma(_674, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _666)) + cbModelParam._m0[21u].w;
        float _1571 = fma(_674, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _666)) + cbModelParam._m0[22u].w;
        float _1575 = fma(_674, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _666)) + cbModelParam._m0[23u].w;
        float _1578 = fma(_615, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613));
        float _1581 = fma(_615, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613));
        float _1584 = fma(_615, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613));
        float _1724;
        if (_1578 > 0.0)
        {
            _1724 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1724 = frontier_phi_25_21_ladder;
        }
        float _1989;
        if (_1581 > 0.0)
        {
            _1989 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1989 = frontier_phi_37_32_ladder;
        }
        float _2194;
        if (_1584 > 0.0)
        {
            _2194 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2194 = frontier_phi_46_43_ladder;
        }
        float _2196 = isnan(_1989) ? _1724 : (isnan(_1724) ? _1989 : min(_1724, _1989));
        float _2197 = isnan(_2194) ? _2196 : (isnan(_2196) ? _2194 : min(_2196, _2194));
        float _2201 = (_2197 * _1578) + _1567;
        float _2202 = (_2197 * _1581) + _1571;
        float _2203 = (_2197 * _1584) + _1575;
        float _2204 = _2197 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2204;
        float _2207 = _2204 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2203 > _2207) || ((_2203 < _2205) || ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 < _2205) || (_2201 > _2207))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2203, cbModelParam._m0[17u].z, fma(_2202, cbModelParam._m0[17u].y, _2201 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2203, cbModelParam._m0[18u].z, fma(_2202, cbModelParam._m0[18u].y, _2201 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2203, cbModelParam._m0[19u].z, fma(_2202, cbModelParam._m0[19u].y, _2201 * cbModelParam._m0[19u].x))), _1512);
            frontier_phi_22_46_ladder = _2402.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2402.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2402.x * cbModelParam._m0[1u].z;
        }
        _1603 = frontier_phi_22_46_ladder_2;
        _1605 = frontier_phi_22_46_ladder_1;
        _1607 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_613, _614, _615), _1512);
        _1603 = _1587.x * cbModelParam._m0[1u].z;
        _1605 = _1587.y * cbModelParam._m0[1u].z;
        _1607 = _1587.z * cbModelParam._m0[1u].z;
    }
    float _1619 = ((((1.0 - _634) * ((_621 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_634 * _621)) * _605;
    float _1620 = _1619 * ((cbModelParam._m0[1u].w * (_1603 - _1503)) + _1503);
    float _1621 = _1619 * ((cbModelParam._m0[1u].w * (_1605 - _1505)) + _1505);
    float _1622 = _1619 * ((cbModelParam._m0[1u].w * (_1607 - _1507)) + _1507);
    float _1625 = fma(_1622, cbSceneParam._m0[89u].z, fma(_1621, cbSceneParam._m0[89u].y, _1620 * cbSceneParam._m0[89u].x));
    float _1628 = fma(_1622, cbSceneParam._m0[90u].z, fma(_1621, cbSceneParam._m0[90u].y, _1620 * cbSceneParam._m0[90u].x));
    float _1631 = fma(_1622, cbSceneParam._m0[91u].z, fma(_1621, cbSceneParam._m0[91u].y, _1620 * cbSceneParam._m0[91u].x));
    uvec4 _1641 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1643 = _1641.x * 14u;
    uint _1644 = _1643 + 13u;
    float _1651 = _605 + (-1.0);
    float _1656 = (cbLight._m0[_1644].x * _1651) + 1.0;
    float _1657 = (cbLight._m0[_1644].y * _1651) + 1.0;
    float _1658 = (cbLight._m0[_1644].z * _1651) + 1.0;
    float _1659 = (cbLight._m0[_1644].w * _1651) + 1.0;
    uint _1660 = _1643 + 5u;
    float _1666 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
    uint _1670 = _1643 + 4u;
    float _1677 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
    uint _1681 = _1643 | 1u;
    float _1692 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_452, _453, _454));
    float _1695 = dot(vec3(cbLight._m0[_1681].xyz), vec3(_452, _453, _454));
    float _3787 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _3798 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1700 = (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.3183098733425140380859375;
    float _1702 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * 0.3183098733425140380859375;
    float _1709 = ((cbLight._m0[_1660].x * _1666) * _1702) + ((cbLight._m0[_1670].x * _1677) * _1700);
    float _1710 = ((_1666 * cbLight._m0[_1660].y) * _1702) + ((_1677 * cbLight._m0[_1670].y) * _1700);
    float _1711 = ((_1666 * cbLight._m0[_1660].z) * _1702) + ((_1677 * cbLight._m0[_1670].z) * _1700);
    uvec4 _1716 = floatBitsToUint(cbLight._m0[_1643 + 12u]);
    bool _1718 = _1716.x == 0u;
    float _1729;
    float _1731;
    float _1733;
    if (_1718)
    {
        _1729 = _1709;
        _1731 = _1710;
        _1733 = _1711;
    }
    else
    {
        uint _1737 = _1643 + 6u;
        float _1753 = (dot(vec3(cbLight._m0[_1643 + 2u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _1754 = _1753 * _1753;
        float _3809 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1756 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _1729 = (((cbLight._m0[_1737].x * 0.3183098733425140380859375) * _1755) * _1756) + _1709;
        _1731 = (((cbLight._m0[_1737].y * 0.3183098733425140380859375) * _1755) * _1756) + _1710;
        _1733 = (((cbLight._m0[_1737].z * 0.3183098733425140380859375) * _1755) * _1756) + _1711;
    }
    bool _1736 = _1716.y == 0u;
    float _1774;
    float _1776;
    float _1778;
    if (_1736)
    {
        _1774 = _1729;
        _1776 = _1731;
        _1778 = _1733;
    }
    else
    {
        uint _1933 = _1643 + 7u;
        float _1949 = (dot(vec3(cbLight._m0[_1643 + 3u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _1950 = _1949 * _1949;
        float _3825 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1952 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _1774 = (((cbLight._m0[_1933].x * 0.3183098733425140380859375) * _1951) * _1952) + _1729;
        _1776 = (((cbLight._m0[_1933].y * 0.3183098733425140380859375) * _1951) * _1952) + _1731;
        _1778 = (((cbLight._m0[_1933].z * 0.3183098733425140380859375) * _1951) * _1952) + _1733;
    }
    uint _1781 = _1643 + 8u;
    float _1794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1643].w)) * _455) * 0.949999988079071044921875);
    float _1795 = _1794 * _1794;
    float _1796 = cbLight._m0[_1643].x + _531;
    float _1797 = cbLight._m0[_1643].y + _532;
    float _1798 = cbLight._m0[_1643].z + _533;
    float _1802 = inversesqrt(dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798)));
    float _1803 = _1802 * _1796;
    float _1804 = _1802 * _1797;
    float _1805 = _1802 * _1798;
    float _1806 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1643].xyz));
    float _3841 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _3852 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _1810 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _1811 = dot(vec3(_452, _453, _454), vec3(_1803, _1804, _1805));
    float _3863 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
    float _1814 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _1815 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_1803, _1804, _1805));
    float _3874 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1819 = _1795 * _1795;
    float _1823 = ((_1814 * _1814) * (_1819 + (-1.0))) + 1.0;
    float _1834 = (exp2(log2(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1835 = 1.0 - _1795;
    float _1846 = (0.5 / (((_1810 * ((_1809 * _1835) + _1795)) + 9.9999999392252902907785028219223e-09) + (((_1810 * _1835) + _1795) * _1809))) * _1809;
    float _3885 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1848 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1819 / ((_1823 * _1823) * 3.141590118408203125));
    uint _1859 = _1643 + 9u;
    float _1870 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1681].w)) * _455) * 0.949999988079071044921875);
    float _1871 = _1870 * _1870;
    float _1872 = cbLight._m0[_1681].x + _531;
    float _1873 = cbLight._m0[_1681].y + _532;
    float _1874 = cbLight._m0[_1681].z + _533;
    float _1878 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
    float _1879 = _1878 * _1872;
    float _1880 = _1878 * _1873;
    float _1881 = _1878 * _1874;
    float _1882 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1681].xyz));
    float _3896 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1885 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1886 = dot(vec3(_452, _453, _454), vec3(_1879, _1880, _1881));
    float _3907 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1889 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1890 = dot(vec3(cbLight._m0[_1681].xyz), vec3(_1879, _1880, _1881));
    float _3918 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1894 = _1871 * _1871;
    float _1898 = ((_1889 * _1889) * (_1894 + (-1.0))) + 1.0;
    float _1907 = (exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1908 = 1.0 - _1871;
    float _1918 = (0.5 / (((_1810 * ((_1885 * _1908) + _1871)) + 9.9999999392252902907785028219223e-09) + (((_1810 * _1908) + _1871) * _1885))) * _1885;
    float _3929 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1920 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1894 / ((_1898 * _1898) * 3.141590118408203125));
    float _1930 = (((_1907 * cbLight._m0[_1859].x) * _1920) * _1666) + (((_1834 * cbLight._m0[_1781].x) * _1848) * _1677);
    float _1931 = (((_1907 * cbLight._m0[_1859].y) * _1920) * _1666) + (((_1834 * cbLight._m0[_1781].y) * _1848) * _1677);
    float _1932 = (((_1907 * cbLight._m0[_1859].z) * _1920) * _1666) + (((_1834 * cbLight._m0[_1781].z) * _1848) * _1677);
    float _1994;
    float _1996;
    float _1998;
    if (_1718)
    {
        _1994 = _1930;
        _1996 = _1931;
        _1998 = _1932;
    }
    else
    {
        uint _2000 = _1643 + 2u;
        uint _2004 = _1643 + 10u;
        float _2018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _455) * 0.949999988079071044921875);
        float _2019 = _2018 * _2018;
        float _2020 = cbLight._m0[_2000].x + _531;
        float _2021 = cbLight._m0[_2000].y + _532;
        float _2022 = cbLight._m0[_2000].z + _533;
        float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
        float _2027 = _2026 * _2020;
        float _2028 = _2026 * _2021;
        float _2029 = _2026 * _2022;
        float _2030 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2000].xyz));
        float _3940 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2033 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _2034 = dot(vec3(_452, _453, _454), vec3(_2027, _2028, _2029));
        float _3951 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2037 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _2038 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2027, _2028, _2029));
        float _3962 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2042 = _2019 * _2019;
        float _2046 = ((_2037 * _2037) * (_2042 + (-1.0))) + 1.0;
        float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2056 = 1.0 - _2019;
        float _2066 = (0.5 / (((_1810 * ((_2033 * _2056) + _2019)) + 9.9999999392252902907785028219223e-09) + (((_1810 * _2056) + _2019) * _2033))) * _2033;
        float _3973 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2068 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_2042 / ((_2046 * _2046) * 3.141590118408203125));
        float _2069 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _1994 = (((_2055 * cbLight._m0[_2004].x) * _2068) * _2069) + _1930;
        _1996 = (((_2055 * cbLight._m0[_2004].y) * _2068) * _2069) + _1931;
        _1998 = (((_2055 * cbLight._m0[_2004].z) * _2068) * _2069) + _1932;
    }
    float _2104;
    float _2106;
    float _2108;
    if (_1736)
    {
        _2104 = _1994;
        _2106 = _1996;
        _2108 = _1998;
    }
    else
    {
        uint _2115 = _1643 + 3u;
        uint _2119 = _1643 + 11u;
        float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2115].w)) * _455) * 0.949999988079071044921875);
        float _2134 = _2133 * _2133;
        float _2135 = cbLight._m0[_2115].x + _531;
        float _2136 = cbLight._m0[_2115].y + _532;
        float _2137 = cbLight._m0[_2115].z + _533;
        float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
        float _2142 = _2141 * _2135;
        float _2143 = _2141 * _2136;
        float _2144 = _2141 * _2137;
        float _2145 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2115].xyz));
        float _3989 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2148 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _2149 = dot(vec3(_452, _453, _454), vec3(_2142, _2143, _2144));
        float _4000 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2152 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2153 = dot(vec3(cbLight._m0[_2115].xyz), vec3(_2142, _2143, _2144));
        float _4011 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2157 = _2134 * _2134;
        float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
        float _2170 = (exp2(log2(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2171 = 1.0 - _2134;
        float _2181 = (0.5 / (((_1810 * ((_2148 * _2171) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_1810 * _2171) + _2134) * _2148))) * _2148;
        float _4022 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2183 = (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
        float _2184 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _2104 = (((_2170 * cbLight._m0[_2119].x) * _2183) * _2184) + _1994;
        _2106 = (((_2170 * cbLight._m0[_2119].y) * _2183) * _2184) + _1996;
        _2108 = (((_2170 * cbLight._m0[_2119].z) * _2183) * _2184) + _1998;
    }
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    if (_1641.y == 0u)
    {
        float _2259 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2259;
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2259;
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2259;
        uvec4 _2274 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2275 = _2274.x;
        uint _2286 = uint((float(_2274.y) * floor(float(uint(cbSceneParam._m0[85u].y * _540) / _2275))) + floor(float(uint(cbSceneParam._m0[85u].x * _539) / _2275)));
        float _2296 = (log2(_2262 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2297 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        uint _2300 = uint(isnan(14.0) ? _2297 : (isnan(_2297) ? 14.0 : min(_2297, 14.0)));
        uvec4 _2305 = texelFetch(g_lightClusterGridBuffer, int(((_2300 << 2u) + (_2286 << 6u)) >> 2u));
        uint _2306 = _2305.x;
        uint _2307 = _2274.z;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        if (((((1u << ((_2307 >> 4u) & 15u)) + 4294967295u) & _2306) == 0u) || ((_2307 & 240u) == 0u))
        {
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
        }
        else
        {
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            uint _2558 = 0u;
            uint _2567;
            bool _2568;
            for (;;)
            {
                _2567 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2558 << 2u)) >> 2u)).x;
                _2568 = _2567 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2568)
                {
                    frontier_phi_61_pred = _2552;
                    frontier_phi_61_pred_1 = _2557;
                    frontier_phi_61_pred_2 = _2556;
                    frontier_phi_61_pred_3 = _2555;
                    frontier_phi_61_pred_4 = _2554;
                    frontier_phi_61_pred_5 = _2553;
                }
                else
                {
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    uint _2682;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2555;
                    _2680 = _2556;
                    _2681 = _2557;
                    _2682 = _2567;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    for (;;)
                    {
                        uint _2686 = uint(findLSB(_2682)) + (_2558 << 5u);
                        uint _2683 = (_2682 + 4294967295u) & _2682;
                        uint _2688 = _2686 * 48u;
                        vec4 _2702 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 3u)).x));
                        uint _2708 = (_2686 * 48u) + 4u;
                        vec4 _2721 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2708)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2708 + 3u)).x));
                        uint _2727 = (_2686 * 48u) + 8u;
                        vec3 _2738 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2727)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 2u)).x));
                        float _2742 = _2702.x - _2260;
                        float _2743 = _2702.y - _2261;
                        float _2744 = _2702.z - _2262;
                        float _2745 = dot(vec3(_2742, _2743, _2744), vec3(_2742, _2743, _2744));
                        float _2748 = inversesqrt(_2745);
                        float _2749 = _2748 * _2742;
                        float _2750 = _2748 * _2743;
                        float _2751 = _2748 * _2744;
                        float _2752 = dot(vec3(_561, _564, _567), vec3(_2749, _2750, _2751));
                        float _2757 = 1.0 - (_2745 * _2702.w);
                        float _4048 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
                        float _2758 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                        float _2759 = sqrt(_2745) * _2721.w;
                        float _2762 = 1.39999997615814208984375 / (_2759 + 1.39999997615814208984375);
                        float _2763 = _2762 * _2762;
                        float _2766 = ((1.0 - _2763) * _2752) + _2763;
                        float _2769 = _2759 * _2759;
                        float _2773 = ((isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0))) * _2758) / ((_2769 * 0.699999988079071044921875) + 1.0);
                        float _2777 = (-0.0) - _2260;
                        float _2778 = (-0.0) - _2261;
                        float _2779 = (-0.0) - _2262;
                        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
                        float _2784 = _2783 * _2777;
                        float _2785 = _2783 * _2778;
                        float _2786 = _2783 * _2779;
                        float _2794 = exp2(log2(1.0 / ((_2769 * 3.5) + 5.0)) * 0.25);
                        float _2795 = 1.0 - _621;
                        float _2802 = sqrt(1.0 - ((1.0 - (_2795 * _2795)) * (1.0 - (_2794 * _2794))));
                        float _2803 = _2802 * _2802;
                        float _2804 = _2803 * _2803;
                        float _2805 = _2784 + _2749;
                        float _2806 = _2785 + _2750;
                        float _2807 = _2786 + _2751;
                        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
                        float _2815 = dot(vec3(_561, _564, _567), vec3(_2784, _2785, _2786));
                        float _4064 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
                        float _2818 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                        float _2819 = dot(vec3(_561, _564, _567), vec3(_2811 * _2805, _2811 * _2806, _2811 * _2807));
                        float _4075 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2822 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                        float _2826 = ((_2822 * _2822) * (_2804 + (-1.0))) + 1.0;
                        float _2827 = _2762 * _2803;
                        float _2828 = _2827 * _2827;
                        float _2831 = ((1.0 - _2828) * _2752) + _2828;
                        float _4086 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2832 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                        float _2833 = 1.0 - _2803;
                        float _2843 = (0.5 / (((_2832 * ((_2818 * _2833) + _2803)) + 9.9999999392252902907785028219223e-09) + (((_2832 * _2833) + _2803) * _2818))) * _2832;
                        float _4097 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2854 = (((_2804 * 3.1415927410125732421875) * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) / ((_2826 * _2826) * ((_2769 * 2.1991131305694580078125) + 3.141590118408203125))) * _2758;
                        _2611 = (_2773 * _2721.x) + _2679;
                        _2612 = (_2773 * _2721.y) + _2680;
                        _2613 = (_2773 * _2721.z) + _2681;
                        _2608 = (_2854 * _2738.x) + _2676;
                        _2609 = (_2854 * _2738.y) + _2677;
                        _2610 = (_2854 * _2738.z) + _2678;
                        if (_2683 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2611;
                            _2680 = _2612;
                            _2681 = _2613;
                            _2682 = _2683;
                        }
                    }
                    frontier_phi_61_pred = _2608;
                    frontier_phi_61_pred_1 = _2613;
                    frontier_phi_61_pred_2 = _2612;
                    frontier_phi_61_pred_3 = _2611;
                    frontier_phi_61_pred_4 = _2610;
                    frontier_phi_61_pred_5 = _2609;
                }
                _2408 = frontier_phi_61_pred;
                _2418 = frontier_phi_61_pred_1;
                _2416 = frontier_phi_61_pred_2;
                _2414 = frontier_phi_61_pred_3;
                _2412 = frontier_phi_61_pred_4;
                _2410 = frontier_phi_61_pred_5;
                uint _2559 = _2558 + 1u;
                if (_2559 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2552 = _2408;
                    _2553 = _2410;
                    _2554 = _2412;
                    _2555 = _2414;
                    _2556 = _2416;
                    _2557 = _2418;
                    _2558 = _2559;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
        }
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.z;
        uint _2424 = (_2422 >> 8u) & 15u;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((4294967295u << _2424) & _2306) == 0u)
        {
            _2520 = _2407;
            _2522 = _2409;
            _2524 = _2411;
            _2526 = _2413;
            _2528 = _2415;
            _2530 = _2417;
        }
        else
        {
            float _2545 = inversesqrt(dot(vec3(_2260, _2261, _2262), vec3(_2260, _2261, _2262)));
            float _2546 = _2545 * _2260;
            float _2547 = _2545 * _2261;
            float _2548 = _2545 * _2262;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2424 < ((_2422 >> 12u) & 15u))
            {
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2529;
                float _2531;
                float _2659 = _2407;
                float _2660 = _2409;
                float _2661 = _2411;
                float _2662 = _2413;
                float _2663 = _2415;
                float _2664 = _2417;
                uint _2665 = _2424;
                uint _2674;
                bool _2675;
                for (;;)
                {
                    _2674 = texelFetch(g_lightClassification, int((((_2300 << 5u) + (_2286 << 9u)) + (_2665 << 2u)) >> 2u)).x;
                    _2675 = _2674 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2675)
                    {
                        frontier_phi_67_pred = _2662;
                        frontier_phi_67_pred_1 = _2663;
                        frontier_phi_67_pred_2 = _2664;
                        frontier_phi_67_pred_3 = _2661;
                        frontier_phi_67_pred_4 = _2660;
                        frontier_phi_67_pred_5 = _2659;
                    }
                    else
                    {
                        float _2859;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _2872 = _2659;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        float _2875 = _2662;
                        float _2876 = _2663;
                        float _2877 = _2664;
                        uint _2878 = _2674;
                        uint _2879;
                        vec4 _2904;
                        float _2905;
                        vec4 _2920;
                        vec3 _2932;
                        vec4 _2948;
                        vec4 _2963;
                        float _3009;
                        bool _3010;
                        for (;;)
                        {
                            uint _2889 = ((_2665 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2878));
                            _2879 = (_2878 + 4294967295u) & _2878;
                            uint _2891 = _2889 * 40u;
                            _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            _2905 = _2904.w;
                            uint _2907 = (_2889 * 40u) + 4u;
                            _2920 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2907)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2907 + 3u)).x));
                            uint _2922 = (_2889 * 40u) + 8u;
                            _2932 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x));
                            uint _2935 = (_2889 * 40u) + 16u;
                            _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2950 = (_2889 * 40u) + 20u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2965 = (_2889 * 40u) + 24u;
                            vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2984 = (_2889 * 40u) + 28u;
                            vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            _3009 = fma(_2262, _2997.z, fma(_2261, _2997.y, _2997.x * _2260)) + _2997.w;
                            _3010 = !((fma(_2262, _2978.z, fma(_2261, _2978.y, _2978.x * _2260)) + _2978.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3010)
                            {
                                float _3037 = _2904.x - _2260;
                                float _3038 = _2904.y - _2261;
                                float _3039 = _2904.z - _2262;
                                float _3040 = dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039));
                                float _3043 = inversesqrt(_3040);
                                float _3044 = _3043 * _3037;
                                float _3045 = _3043 * _3038;
                                float _3046 = _3043 * _3039;
                                float _3050 = 1.0 - (_3040 / (_2905 * _2905));
                                float _4108 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3051 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3055 = sqrt(_3040) * _2920.w;
                                float _3057 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                                float _3058 = _3057 * _3057;
                                float _3061 = ((1.0 - _3058) * dot(vec3(_3044, _3045, _3046), vec3(_561, _564, _567))) + _3058;
                                float _3064 = _3055 * _3055;
                                float _3068 = (fma(_2262, _2948.z, fma(_2261, _2948.y, _2948.x * _2260)) + _2948.w) / _3009;
                                float _3069 = (fma(_2262, _2963.z, fma(_2261, _2963.y, _2963.x * _2260)) + _2963.w) / _3009;
                                float _3073 = 1.0 - dot(vec2(_3068, _3069), vec2(_3068, _3069));
                                float _4124 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3074 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                                float _3075 = _3074 * (((isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))) * _3051) / ((_3064 * 0.699999988079071044921875) + 1.0));
                                float _3087 = exp2(log2(1.0 / ((_3064 * 3.5) + 5.0)) * 0.25);
                                float _3088 = 1.0 - _621;
                                float _3095 = sqrt(1.0 - ((1.0 - (_3088 * _3088)) * (1.0 - (_3087 * _3087))));
                                float _3096 = _3095 * _3095;
                                float _3097 = _3096 * _3096;
                                float _3098 = _3044 - _2546;
                                float _3099 = _3045 - _2547;
                                float _3100 = _3046 - _2548;
                                float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                                float _3108 = dot(vec3(_561, _564, _567), vec3((-0.0) - _2546, (-0.0) - _2547, (-0.0) - _2548));
                                float _4135 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3111 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                                float _3112 = dot(vec3(_561, _564, _567), vec3(_3104 * _3098, _3104 * _3099, _3104 * _3100));
                                float _4146 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3115 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                                float _3119 = ((_3115 * _3115) * (_3097 + (-1.0))) + 1.0;
                                float _3120 = _3057 * _3096;
                                float _3121 = _3120 * _3120;
                                float _3127 = ((1.0 - _3121) * dot(vec3(_561, _564, _567), vec3(_3044, _3045, _3046))) + _3121;
                                float _4157 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3129 = 1.0 - _3096;
                                float _3139 = (0.5 / (((_3128 * ((_3111 * _3129) + _3096)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3096) * _3111))) * _3128;
                                float _4168 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3149 = (_3074 * _3051) * (((_3097 * 3.1415927410125732421875) * (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) / ((_3119 * _3119) * ((_3064 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3149 * _2932.x;
                                frontier_phi_73_pred_1 = _3149 * _2932.y;
                                frontier_phi_73_pred_2 = _3075 * _2920.z;
                                frontier_phi_73_pred_3 = _3075 * _2920.y;
                                frontier_phi_73_pred_4 = _3075 * _2920.x;
                                frontier_phi_73_pred_5 = _3149 * _2932.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3153 = frontier_phi_73_pred;
                            _3154 = frontier_phi_73_pred_1;
                            _3158 = frontier_phi_73_pred_2;
                            _3157 = frontier_phi_73_pred_3;
                            _3156 = frontier_phi_73_pred_4;
                            _3155 = frontier_phi_73_pred_5;
                            _2862 = _3156 + _2875;
                            _2863 = _3157 + _2876;
                            _2864 = _3158 + _2877;
                            _2859 = _3153 + _2872;
                            _2860 = _3154 + _2873;
                            _2861 = _3155 + _2874;
                            if (_2879 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2879;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2862;
                        frontier_phi_67_pred_1 = _2863;
                        frontier_phi_67_pred_2 = _2864;
                        frontier_phi_67_pred_3 = _2861;
                        frontier_phi_67_pred_4 = _2860;
                        frontier_phi_67_pred_5 = _2859;
                    }
                    _2527 = frontier_phi_67_pred;
                    _2529 = frontier_phi_67_pred_1;
                    _2531 = frontier_phi_67_pred_2;
                    _2525 = frontier_phi_67_pred_3;
                    _2523 = frontier_phi_67_pred_4;
                    _2521 = frontier_phi_67_pred_5;
                    uint _2666 = _2665 + 1u;
                    if (_2666 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2659 = _2521;
                        _2660 = _2523;
                        _2661 = _2525;
                        _2662 = _2527;
                        _2663 = _2529;
                        _2664 = _2531;
                        _2665 = _2666;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2529;
                frontier_phi_55_56_ladder_1 = _2531;
                frontier_phi_55_56_ladder_2 = _2527;
                frontier_phi_55_56_ladder_3 = _2525;
                frontier_phi_55_56_ladder_4 = _2523;
                frontier_phi_55_56_ladder_5 = _2521;
            }
            else
            {
                frontier_phi_55_56_ladder = _2415;
                frontier_phi_55_56_ladder_1 = _2417;
                frontier_phi_55_56_ladder_2 = _2413;
                frontier_phi_55_56_ladder_3 = _2411;
                frontier_phi_55_56_ladder_4 = _2409;
                frontier_phi_55_56_ladder_5 = _2407;
            }
            _2520 = frontier_phi_55_56_ladder_5;
            _2522 = frontier_phi_55_56_ladder_4;
            _2524 = frontier_phi_55_56_ladder_3;
            _2526 = frontier_phi_55_56_ladder_2;
            _2528 = frontier_phi_55_56_ladder;
            _2530 = frontier_phi_55_56_ladder_1;
        }
        float _2535 = isnan(1.0) ? _605 : (isnan(_605) ? 1.0 : min(_605, 1.0));
        _2319 = (_2535 * _2526) + _1774;
        _2321 = (_2535 * _2528) + _1776;
        _2323 = (_2535 * _2530) + _1778;
        _2325 = ((_2520 * 0.039999999105930328369140625) * _2535) + _2104;
        _2327 = ((_2522 * 0.039999999105930328369140625) * _2535) + _2106;
        _2329 = ((_2524 * 0.039999999105930328369140625) * _2535) + _2108;
    }
    else
    {
        _2319 = _1774;
        _2321 = _1776;
        _2323 = _1778;
        _2325 = _2104;
        _2327 = _2106;
        _2329 = _2108;
    }
    float _4184 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4195 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4206 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    uint _2349 = _224 + 6u;
    float _2357 = _539 / cbSceneParam._m0[86u].x;
    float _2358 = _540 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _473 : (isnan(_473) ? cbSceneParam._m0[77u].w : min(_473, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    if (_473 > cbSceneParam._m0[78u].w)
    {
        float _2432 = isnan(_473) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _473 : min(cbSceneParam._m0[80u].w, _473));
        float _2433 = _2432 / _473;
        float _2444 = _2433 * _524;
        float _2445 = _525 * _2433;
        float _2446 = (-0.0) - _2445;
        float _2448 = _2433 * _526;
        float _2450 = (cbSceneParam._m0[77u].w * _2446) / _2432;
        float _2451 = _2450 + cbSceneParam._m0[79u].w;
        float _2452 = cbSceneParam._m0[79u].w - _2445;
        float _2458 = sqrt(((_2444 * _2444) + (_2445 * _2445)) + (_2448 * _2448));
        float _2461 = (1.0 - (cbSceneParam._m0[77u].w / _2432)) * _2458;
        float _2466 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2468 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2621;
        if (abs((_2446 - _2450) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2621 = ((((_2451 > 0.0) ? exp2(_2466 * _2451) : (2.0 - exp2(_2468 * _2451))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2461;
        }
        else
        {
            float _2581 = 1.0 / cbSceneParam._m0[80u].x;
            float _2582 = isnan(_2452) ? _2451 : (isnan(_2451) ? _2452 : max(_2451, _2452));
            float _2583 = isnan(_2452) ? _2451 : (isnan(_2451) ? _2452 : min(_2451, _2452));
            float _2592 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : min(_2582, 0.0));
            float _2593 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : min(_2583, 0.0));
            _2621 = ((abs(_2458 / _2446) * cbSceneParam._m0[80u].y) * ((((_2592 - _2593) * 2.0) - ((exp2(_2466 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0)))) - exp2(_2466 * (isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0))))) * _2581)) - ((exp2(_2468 * _2592) - exp2(_2468 * _2593)) * _2581))) + (_2461 * cbSceneParam._m0[80u].z);
        }
        vec4 _2623 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2632 = exp2((_2621 * (-1.44269502162933349609375)) * (1.0 - _2623.w));
        float _2633 = log2(_2632);
        float _2649 = log2(_2377);
        _2470 = (exp2(_2649 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2633 * cbSceneParam._m0[78u].x)) * _2623.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2472 = (exp2(_2649 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2633 * cbSceneParam._m0[78u].y)) * _2623.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2474 = (exp2(_2649 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2633 * cbSceneParam._m0[78u].z)) * _2623.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2476 = _2632 * _2377;
    }
    else
    {
        _2470 = _2374;
        _2472 = _2375;
        _2474 = _2376;
        _2476 = _2377;
    }
    float _2488 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2489 = _2488 == 3.0;
    float _2490 = log2(_2476);
    float _2497 = exp2(_2490 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2319 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _605))) + ((_2325 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _1411)) * cbPerFrame._m0[3u].x));
    float _2498 = exp2(_2490 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_2321 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _605))) + ((_2327 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1411)) * cbPerFrame._m0[3u].x));
    float _2499 = exp2(_2490 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_2323 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _605))) + ((_2329 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1411)) * cbPerFrame._m0[3u].x));
    float _2508 = (_2488 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2508 * (_2489 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2470)));
    SV_Target.y = _2508 * (_2489 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2472)));
    SV_Target.z = _2508 * (_2489 ? _2499 : (_2499 + (cbSceneParam._m0[72u].w * _2474)));
    SV_Target.w = cbInstanceData._m0[_2349].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2349].w;
}


