#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _980;
float _3370;
float _3371;
float _3372;
float _3373;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _240 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3382 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3393 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3404 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _255 = _250 + 1u;
    uint _259 = _250 + 2u;
    float _268 = sqrt(((cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x));
    float _269 = _268 * TEXCOORD.z;
    float _270 = _268 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _269) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _270) + cbTextureTilingScale._m0[13u].w));
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _311 = _306.x * cbMtdParam._m0[9u].x;
    float _312 = _306.y * cbMtdParam._m0[9u].y;
    float _313 = _306.z * cbMtdParam._m0[9u].z;
    float _317 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _283.x) * _311;
    float _320 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _283.y) * _312;
    float _323 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _283.z) * _313;
    float _330 = ((_311 - _317) * (isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0)))) + _317;
    float _331 = ((_312 - _320) * (isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0)))) + _320;
    float _332 = ((_313 - _323) * (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0)))) + _323;
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _269) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _270) + cbTextureTilingScale._m0[20u].w));
    vec4 _371 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _375 = _371.z;
    float _379 = (_371.x * 2.0) + (-1.0);
    float _380 = (_371.y * 2.0) + (-1.0);
    float _381 = dot(vec2(_379, _380), vec2(_379, _380));
    float _3415 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _386 = sqrt(1.0 - (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))));
    float _391 = _379 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_345.x * 2.0) + (-1.0)));
    float _392 = _380 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_345.y * 2.0) + (-1.0)));
    float _397 = (((_345.z - _375) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _375;
    float _399 = cbMtdParam._m0[22u].x + _371.w;
    float _402 = fma(_386, _216 * NORMAL.x, fma(_392, _223 * TANGENT.x, (_209 * _201) * _391));
    float _405 = fma(_386, _216 * NORMAL.y, fma(_392, _223 * TANGENT.y, (_209 * _202) * _391));
    float _408 = fma(_386, _216 * NORMAL.z, fma(_392, _223 * TANGENT.z, (_209 * _203) * _391));
    float _412 = inversesqrt(dot(vec3(_402, _405, _408), vec3(_402, _405, _408)));
    float _413 = _412 * _402;
    float _414 = _412 * _405;
    float _415 = _412 * _408;
    float _3426 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _416 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _3437 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _3448 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3459 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _3470 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _434 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _476 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _486 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _476);
    float _487 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _476);
    float _488 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _476);
    float _492 = inversesqrt(dot(vec3(_486, _487, _488), vec3(_486, _487, _488)));
    float _493 = _486 * _492;
    float _494 = _487 * _492;
    float _495 = _488 * _492;
    vec4 _500 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _502 = _500.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _659 = sqrt(((_486 * _486) + (_487 * _487)) + (_488 * _488));
        float _665 = (cbMatDynParam._m0[5u].x * _659) + cbMatDynParam._m0[5u].y;
        float _3481 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        float _666 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _670 = (cbMatDynParam._m0[5u].z * _659) + cbMatDynParam._m0[5u].w;
        float _3492 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) - _666)) + _666) < ((_502 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _514 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _515 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _535 = fma(_415, cbSceneParam._m0[5u].z, fma(_414, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _413));
    float _538 = fma(_415, cbSceneParam._m0[6u].z, fma(_414, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _413));
    float _541 = fma(_415, cbSceneParam._m0[7u].z, fma(_414, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _413));
    uint _554 = _250 + 9u;
    uint _555 = _554 + uint(cbMatDynParam._m0[0u].w);
    float _561 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0)))) * cbInstanceData._m0[_555].x;
    float _562 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * cbInstanceData._m0[_555].y;
    float _563 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_555].z;
    float _3503 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _3514 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    vec4 _575 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _514, cbSceneParam._m0[86u].y * _515));
    float _579 = ((isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * TEXCOORD_5.w) * _575.x;
    float _580 = dot(vec3(_413, _414, _415), vec3(_493, _494, _495));
    float _583 = _580 * 2.0;
    float _587 = (_583 * _413) - _493;
    float _588 = (_583 * _414) - _494;
    float _589 = (_583 * _415) - _495;
    float _593 = abs(dot(vec3(_493, _494, _495), vec3(_413, _414, _415)));
    float _3536 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _595 = sqrt(_416);
    float _608 = exp2((_595 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_595 * 3.0));
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _979;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _704 = fma(_648, cbModelParam._m0[26u].z, fma(_644, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _640));
        float _708 = fma(_648, cbModelParam._m0[27u].z, fma(_644, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _640));
        float _712 = fma(_648, cbModelParam._m0[28u].z, fma(_644, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _640));
        float _737 = _640 + _413;
        float _738 = _644 + _414;
        float _739 = _648 + _415;
        float _749 = fma(_739, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _737)) - _704;
        float _750 = fma(_739, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _737)) - _708;
        float _751 = fma(_739, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _737)) - _712;
        float _755 = inversesqrt(dot(vec3(_749, _750, _751), vec3(_749, _750, _751)));
        float _768 = ((_755 * _749) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_704 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _769 = ((_755 * _750) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_708 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _770 = ((_755 * _751) / cbModelParam._m0[34u].z) + ((((((_712 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_768, _769, _770), 0.0);
        float _807 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _808 = _807 * (_773.x + (-0.5));
        float _809 = _807 * (_773.y + (-0.5));
        float _810 = _807 * (_773.z + (-0.5));
        float _817 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_780.x + (-0.5));
        float _819 = _817 * (_780.y + (-0.5));
        float _820 = _817 * (_780.z + (-0.5));
        float _827 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_787.x + (-0.5));
        float _829 = _827 * (_787.y + (-0.5));
        float _830 = _827 * (_787.z + (-0.5));
        float _837 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_794.x + (-0.5));
        float _839 = _837 * (_794.y + (-0.5));
        float _840 = _837 * (_794.z + (-0.5));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = _808 * 0.5;
        float _845 = _818 * 0.5;
        float _846 = _828 * 0.5;
        float _847 = dot(vec3(_844, _845, _846), vec3(_844, _845, _846));
        float _852 = (_847 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_847);
        float _861 = (dot(vec3(_413, _414, _415), vec3(_852 * _844, _852 * _845, _852 * _846)) + 1.0) * 0.5;
        float _3562 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _871 = sqrt(((_845 * _845) + (_844 * _844)) + (_846 * _846)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3573 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _873 = _872 * 2.0;
        float _877 = (1.0 - _872) / (_872 + 1.0);
        float _3584 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _887 = ((((1.0 - _878) * (_873 + 2.0)) * exp2(log2(isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * (_873 + 1.0))) + _878) * _841;
        float _888 = _809 * 0.5;
        float _889 = _819 * 0.5;
        float _890 = _829 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _904 = (dot(vec3(_413, _414, _415), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3595 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _913 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3606 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _915 = _914 * 2.0;
        float _919 = (1.0 - _914) / (_914 + 1.0);
        float _3617 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _929 = ((((1.0 - _920) * (_915 + 2.0)) * exp2(log2(isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * (_915 + 1.0))) + _920) * _842;
        float _930 = _810 * 0.5;
        float _931 = _820 * 0.5;
        float _932 = _830 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(_413, _414, _415), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3650 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_957 + 1.0))) + _962) * _843;
        _979 = _810;
        _981 = _809;
        _982 = _808;
        _983 = _820;
        _984 = _819;
        _985 = _818;
        _986 = _830;
        _987 = _829;
        _988 = _828;
        _989 = _843;
        _990 = _842;
        _991 = _841;
        _992 = cbModelParam._m0[36u].z * (isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)));
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)));
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
    }
    else
    {
        _979 = _980;
        _981 = _980;
        _982 = _980;
        _983 = _980;
        _984 = _980;
        _985 = _980;
        _986 = _980;
        _987 = _980;
        _988 = _980;
        _989 = _980;
        _990 = _980;
        _991 = _980;
        _992 = 0.0;
        _993 = 0.0;
        _994 = 0.0;
    }
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1022 = fma(_648, cbModelParam._m0[30u].z, fma(_644, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _640));
        float _1026 = fma(_648, cbModelParam._m0[31u].z, fma(_644, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _640));
        float _1030 = fma(_648, cbModelParam._m0[32u].z, fma(_644, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _640));
        float _1053 = _640 + _413;
        float _1054 = _644 + _414;
        float _1055 = _648 + _415;
        float _1065 = fma(_1055, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1053)) - _1022;
        float _1066 = fma(_1055, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1053)) - _1026;
        float _1067 = fma(_1055, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1053)) - _1030;
        float _1071 = inversesqrt(dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067)));
        float _1084 = ((_1071 * _1065) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1022 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1071 * _1066) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1026 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1071 * _1067) / cbModelParam._m0[35u].z) + ((((((_1030 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1084, _1085, _1086), 0.0);
        float _1121 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1088.x + (-0.5));
        float _1123 = _1121 * (_1088.y + (-0.5));
        float _1124 = _1121 * (_1088.z + (-0.5));
        float _1131 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1095.x + (-0.5));
        float _1133 = _1131 * (_1095.y + (-0.5));
        float _1134 = _1131 * (_1095.z + (-0.5));
        float _1141 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1102.x + (-0.5));
        float _1143 = _1141 * (_1102.y + (-0.5));
        float _1144 = _1141 * (_1102.z + (-0.5));
        float _1151 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1109.x + (-0.5));
        float _1153 = _1151 * (_1109.y + (-0.5));
        float _1154 = _1151 * (_1109.z + (-0.5));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = _1122 * 0.5;
        float _1159 = _1132 * 0.5;
        float _1160 = _1142 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1174 = (dot(vec3(_413, _414, _415), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1183 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3713 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1185 + 1.0))) + _1190) * _1155;
        float _1200 = _1123 * 0.5;
        float _1201 = _1133 * 0.5;
        float _1202 = _1143 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_413, _414, _415), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3746 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1227 + 1.0))) + _1232) * _1156;
        float _1242 = _1124 * 0.5;
        float _1243 = _1134 * 0.5;
        float _1244 = _1144 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_413, _414, _415), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3779 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1269 + 1.0))) + _1274) * _1157;
        _1291 = _1124;
        _1292 = _1123;
        _1293 = _1122;
        _1294 = _1134;
        _1295 = _1133;
        _1296 = _1132;
        _1297 = _1144;
        _1298 = _1143;
        _1299 = _1142;
        _1300 = _1157;
        _1301 = _1156;
        _1302 = _1155;
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1304 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
    }
    else
    {
        _1291 = _980;
        _1292 = _980;
        _1293 = _980;
        _1294 = _980;
        _1295 = _980;
        _1296 = _980;
        _1297 = _980;
        _1298 = _980;
        _1299 = _980;
        _1300 = _980;
        _1301 = _980;
        _1302 = _980;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _992)) + _992;
    float _1316 = (cbModelParam._m0[1u].x * (_1304 - _993)) + _993;
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _994)) + _994;
    float _1338 = fma(_1317, cbSceneParam._m0[89u].z, fma(_1316, cbSceneParam._m0[89u].y, _1315 * cbSceneParam._m0[89u].x));
    float _1341 = fma(_1317, cbSceneParam._m0[90u].z, fma(_1316, cbSceneParam._m0[90u].y, _1315 * cbSceneParam._m0[90u].x));
    float _1344 = fma(_1317, cbSceneParam._m0[91u].z, fma(_1316, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1315));
    float _1359 = _587 * 0.5;
    float _1360 = _588 * 0.5;
    float _1361 = _589 * 0.5;
    float _1362 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1365 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1292, _1295, _1298, _1301));
    float _1368 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1402;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1375 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_979, _983, _986, _989));
        float _1379 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_981, _984, _987, _990));
        float _1383 = dot(vec4(_1359, _1360, _1361, 1.0), vec4(_982, _985, _988, _991));
        float _1390 = dot(vec4(cbModelParam._m0[39u]), vec4(_1359, _1360, _1361, 1.0));
        _1402 = dot(vec3(isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1390) ? 0.0 : (isnan(0.0) ? _1390 : max(0.0, _1390))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1402 = 1.0;
    }
    float _1413;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1404 = dot(vec4(cbModelParam._m0[40u]), vec4(_1359, _1360, _1361, 1.0));
        _1413 = dot(vec3(isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)), isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1404) ? 0.0 : (isnan(0.0) ? _1404 : max(0.0, _1404))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1413 = 1.0;
    }
    float _1417 = (_1413 * cbModelParam._m0[1u].x) + (_1402 * (1.0 - cbModelParam._m0[1u].x));
    float _1427 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _416);
    float _1428 = isnan(_1427) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1427 : min(cbModelParam._m0[25u].z, _1427));
    float _1510;
    float _1512;
    float _1514;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1477 = fma(_648, cbModelParam._m0[13u].z, fma(_644, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _640)) + cbModelParam._m0[13u].w;
        float _1481 = fma(_648, cbModelParam._m0[14u].z, fma(_644, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _640)) + cbModelParam._m0[14u].w;
        float _1485 = fma(_648, cbModelParam._m0[15u].z, fma(_644, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _640)) + cbModelParam._m0[15u].w;
        float _1488 = fma(_589, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _587));
        float _1491 = fma(_589, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _587));
        float _1494 = fma(_589, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _587));
        float _1522;
        if (_1488 > 0.0)
        {
            _1522 = abs((1.0 - _1477) / _1488);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1477 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1522 = frontier_phi_17_15_ladder;
        }
        float _1748;
        if (_1491 > 0.0)
        {
            _1748 = abs((1.0 - _1481) / _1491);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1481 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1748 = frontier_phi_26_22_ladder;
        }
        float _1994;
        if (_1494 > 0.0)
        {
            _1994 = abs((1.0 - _1485) / _1494);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1485 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1994 = frontier_phi_38_33_ladder;
        }
        float _1996 = isnan(_1748) ? _1522 : (isnan(_1522) ? _1748 : min(_1522, _1748));
        float _1997 = isnan(_1994) ? _1996 : (isnan(_1996) ? _1994 : min(_1996, _1994));
        float _2001 = (_1997 * _1488) + _1477;
        float _2002 = (_1997 * _1491) + _1481;
        float _2003 = (_1997 * _1494) + _1485;
        float _2004 = _1997 * 9.9999997473787516355514526367188e-05;
        float _2006 = (-1.0) - _2004;
        float _2008 = _2004 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2003 > _2008) || ((_2003 < _2006) || ((_2002 > _2008) || ((_2002 < _2006) || ((_2001 < _2006) || (_2001 > _2008))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2127 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2003, cbModelParam._m0[9u].z, fma(_2002, cbModelParam._m0[9u].y, _2001 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2003, cbModelParam._m0[10u].z, fma(_2002, cbModelParam._m0[10u].y, _2001 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2003, cbModelParam._m0[11u].z, fma(_2002, cbModelParam._m0[11u].y, _2001 * cbModelParam._m0[11u].x))), _1428);
            frontier_phi_16_38_ladder = _2127.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2127.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2127.x * cbModelParam._m0[1u].y;
        }
        _1510 = frontier_phi_16_38_ladder_2;
        _1512 = frontier_phi_16_38_ladder_1;
        _1514 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_587, _588, _589), _1428);
        _1510 = _1498.x * cbModelParam._m0[1u].y;
        _1512 = _1498.y * cbModelParam._m0[1u].y;
        _1514 = _1498.z * cbModelParam._m0[1u].y;
    }
    float _1518 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _416);
    float _1519 = isnan(_1518) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1518 : min(cbModelParam._m0[25u].w, _1518));
    float _1611;
    float _1613;
    float _1615;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1575 = fma(_648, cbModelParam._m0[21u].z, fma(_644, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _640)) + cbModelParam._m0[21u].w;
        float _1579 = fma(_648, cbModelParam._m0[22u].z, fma(_644, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _640)) + cbModelParam._m0[22u].w;
        float _1583 = fma(_648, cbModelParam._m0[23u].z, fma(_644, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _640)) + cbModelParam._m0[23u].w;
        float _1586 = fma(_589, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _587));
        float _1589 = fma(_589, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _587));
        float _1592 = fma(_589, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _587));
        float _1753;
        if (_1586 > 0.0)
        {
            _1753 = abs((1.0 - _1575) / _1586);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1575 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1753 = frontier_phi_28_24_ladder;
        }
        float _2021;
        if (_1589 > 0.0)
        {
            _2021 = abs((1.0 - _1579) / _1589);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1579 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2021 = frontier_phi_40_35_ladder;
        }
        float _2226;
        if (_1592 > 0.0)
        {
            _2226 = abs((1.0 - _1583) / _1592);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1583 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2226 = frontier_phi_49_46_ladder;
        }
        float _2228 = isnan(_2021) ? _1753 : (isnan(_1753) ? _2021 : min(_1753, _2021));
        float _2229 = isnan(_2226) ? _2228 : (isnan(_2228) ? _2226 : min(_2228, _2226));
        float _2233 = (_2229 * _1586) + _1575;
        float _2234 = (_2229 * _1589) + _1579;
        float _2235 = (_2229 * _1592) + _1583;
        float _2236 = _2229 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2236;
        float _2239 = _2236 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2235 > _2239) || ((_2235 < _2237) || ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 < _2237) || (_2233 > _2239))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2434 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2235, cbModelParam._m0[17u].z, fma(_2234, cbModelParam._m0[17u].y, _2233 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2235, cbModelParam._m0[18u].z, fma(_2234, cbModelParam._m0[18u].y, _2233 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2235, cbModelParam._m0[19u].z, fma(_2234, cbModelParam._m0[19u].y, _2233 * cbModelParam._m0[19u].x))), _1519);
            frontier_phi_25_49_ladder = _2434.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2434.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2434.x * cbModelParam._m0[1u].z;
        }
        _1611 = frontier_phi_25_49_ladder_2;
        _1613 = frontier_phi_25_49_ladder_1;
        _1615 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1595 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_587, _588, _589), _1519);
        _1611 = _1595.x * cbModelParam._m0[1u].z;
        _1613 = _1595.y * cbModelParam._m0[1u].z;
        _1615 = _1595.z * cbModelParam._m0[1u].z;
    }
    float _1627 = ((((1.0 - _608) * ((_595 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_608 * _595)) * _579;
    float _1628 = _1627 * ((cbModelParam._m0[1u].w * (_1611 - _1510)) + _1510);
    float _1629 = _1627 * ((cbModelParam._m0[1u].w * (_1613 - _1512)) + _1512);
    float _1630 = _1627 * ((cbModelParam._m0[1u].w * (_1615 - _1514)) + _1514);
    float _1633 = fma(_1630, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1628 * cbSceneParam._m0[89u].x));
    float _1636 = fma(_1630, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1628 * cbSceneParam._m0[90u].x));
    float _1639 = fma(_1630, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, _1628 * cbSceneParam._m0[91u].x));
    vec4 _1647 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_514, _515));
    float _1649 = _1647.w;
    float _1661 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1649);
    float _1662 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1649);
    float _1663 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1649);
    uvec4 _1667 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _1669 = _1667.x * 14u;
    uint _1670 = _1669 + 13u;
    float _1677 = _579 + (-1.0);
    float _1682 = (cbLight._m0[_1670].x * _1677) + 1.0;
    float _1683 = (cbLight._m0[_1670].y * _1677) + 1.0;
    float _1684 = (cbLight._m0[_1670].z * _1677) + 1.0;
    float _1685 = (cbLight._m0[_1670].w * _1677) + 1.0;
    uint _1686 = _1669 + 5u;
    float _1692 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
    uint _1696 = _1669 + 4u;
    float _1706 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
    uint _1710 = _1669 | 1u;
    float _1721 = dot(vec3(cbLight._m0[_1669].xyz), vec3(_413, _414, _415));
    float _1724 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_413, _414, _415));
    float _3915 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _3926 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1729 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.3183098733425140380859375;
    float _1731 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _1738 = ((cbLight._m0[_1686].x * _1692) * _1731) + (((cbLight._m0[_1696].x * _1661) * _1706) * _1729);
    float _1739 = ((_1692 * cbLight._m0[_1686].y) * _1731) + (((cbLight._m0[_1696].y * _1662) * _1706) * _1729);
    float _1740 = ((_1692 * cbLight._m0[_1686].z) * _1731) + (((cbLight._m0[_1696].z * _1663) * _1706) * _1729);
    uvec4 _1745 = floatBitsToUint(cbLight._m0[_1669 + 12u]);
    bool _1747 = _1745.x == 0u;
    float _1758;
    float _1760;
    float _1762;
    if (_1747)
    {
        _1758 = _1738;
        _1760 = _1739;
        _1762 = _1740;
    }
    else
    {
        uint _1766 = _1669 + 6u;
        float _1782 = (dot(vec3(cbLight._m0[_1669 + 2u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1783 = _1782 * _1782;
        float _3937 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1785 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _1758 = (((cbLight._m0[_1766].x * 0.3183098733425140380859375) * _1784) * _1785) + _1738;
        _1760 = (((cbLight._m0[_1766].y * 0.3183098733425140380859375) * _1784) * _1785) + _1739;
        _1762 = (((cbLight._m0[_1766].z * 0.3183098733425140380859375) * _1784) * _1785) + _1740;
    }
    bool _1765 = _1745.y == 0u;
    float _1803;
    float _1805;
    float _1807;
    if (_1765)
    {
        _1803 = _1758;
        _1805 = _1760;
        _1807 = _1762;
    }
    else
    {
        uint _1965 = _1669 + 7u;
        float _1981 = (dot(vec3(cbLight._m0[_1669 + 3u].xyz), vec3(_413, _414, _415)) * 0.5) + 0.5;
        float _1982 = _1981 * _1981;
        float _3953 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1984 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
        _1803 = (((cbLight._m0[_1965].x * 0.3183098733425140380859375) * _1983) * _1984) + _1758;
        _1805 = (((cbLight._m0[_1965].y * 0.3183098733425140380859375) * _1983) * _1984) + _1760;
        _1807 = (((cbLight._m0[_1965].z * 0.3183098733425140380859375) * _1983) * _1984) + _1762;
    }
    uint _1810 = _1669 + 8u;
    float _1823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1669].w)) * _416) * 0.949999988079071044921875);
    float _1824 = _1823 * _1823;
    float _1825 = cbLight._m0[_1669].x + _493;
    float _1826 = cbLight._m0[_1669].y + _494;
    float _1827 = cbLight._m0[_1669].z + _495;
    float _1831 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
    float _1832 = _1831 * _1825;
    float _1833 = _1831 * _1826;
    float _1834 = _1831 * _1827;
    float _1835 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1669].xyz));
    float _3969 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _1839 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _1840 = dot(vec3(_413, _414, _415), vec3(_1832, _1833, _1834));
    float _3991 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1844 = dot(vec3(cbLight._m0[_1669].xyz), vec3(_1832, _1833, _1834));
    float _4002 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1848 = _1824 * _1824;
    float _1852 = ((_1843 * _1843) * (_1848 + (-1.0))) + 1.0;
    float _1863 = (exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1864 = 1.0 - _1824;
    float _1875 = (0.5 / (((_1839 * ((_1838 * _1864) + _1824)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _1864) + _1824) * _1838))) * _1838;
    float _4013 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1877 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1848 / ((_1852 * _1852) * 3.141590118408203125));
    uint _1891 = _1669 + 9u;
    float _1902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1710].w)) * _416) * 0.949999988079071044921875);
    float _1903 = _1902 * _1902;
    float _1904 = cbLight._m0[_1710].x + _493;
    float _1905 = cbLight._m0[_1710].y + _494;
    float _1906 = cbLight._m0[_1710].z + _495;
    float _1910 = inversesqrt(dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906)));
    float _1911 = _1910 * _1904;
    float _1912 = _1910 * _1905;
    float _1913 = _1910 * _1906;
    float _1914 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_1710].xyz));
    float _4024 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _1917 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _1918 = dot(vec3(_413, _414, _415), vec3(_1911, _1912, _1913));
    float _4035 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1922 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1911, _1912, _1913));
    float _4046 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1926 = _1903 * _1903;
    float _1930 = ((_1921 * _1921) * (_1926 + (-1.0))) + 1.0;
    float _1939 = (exp2(log2(1.0 - (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1940 = 1.0 - _1903;
    float _1950 = (0.5 / (((_1839 * ((_1917 * _1940) + _1903)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _1940) + _1903) * _1917))) * _1917;
    float _4057 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1952 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1926 / ((_1930 * _1930) * 3.141590118408203125));
    float _1962 = (((_1939 * cbLight._m0[_1891].x) * _1952) * _1692) + ((((cbLight._m0[_1810].x * _1661) * _1863) * _1877) * _1706);
    float _1963 = (((_1939 * cbLight._m0[_1891].y) * _1952) * _1692) + ((((cbLight._m0[_1810].y * _1662) * _1863) * _1877) * _1706);
    float _1964 = (((_1939 * cbLight._m0[_1891].z) * _1952) * _1692) + ((((cbLight._m0[_1810].z * _1663) * _1863) * _1877) * _1706);
    float _2026;
    float _2028;
    float _2030;
    if (_1747)
    {
        _2026 = _1962;
        _2028 = _1963;
        _2030 = _1964;
    }
    else
    {
        uint _2032 = _1669 + 2u;
        uint _2036 = _1669 + 10u;
        float _2050 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _416) * 0.949999988079071044921875);
        float _2051 = _2050 * _2050;
        float _2052 = cbLight._m0[_2032].x + _493;
        float _2053 = cbLight._m0[_2032].y + _494;
        float _2054 = cbLight._m0[_2032].z + _495;
        float _2058 = inversesqrt(dot(vec3(_2052, _2053, _2054), vec3(_2052, _2053, _2054)));
        float _2059 = _2058 * _2052;
        float _2060 = _2058 * _2053;
        float _2061 = _2058 * _2054;
        float _2062 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_2032].xyz));
        float _4068 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _2066 = dot(vec3(_413, _414, _415), vec3(_2059, _2060, _2061));
        float _4079 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2069 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2070 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2059, _2060, _2061));
        float _4090 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2074 = _2051 * _2051;
        float _2078 = ((_2069 * _2069) * (_2074 + (-1.0))) + 1.0;
        float _2087 = (exp2(log2(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2088 = 1.0 - _2051;
        float _2098 = (0.5 / (((_1839 * ((_2065 * _2088) + _2051)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _2088) + _2051) * _2065))) * _2065;
        float _4101 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2100 = (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_2074 / ((_2078 * _2078) * 3.141590118408203125));
        float _2101 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _2026 = (((_2087 * cbLight._m0[_2036].x) * _2100) * _2101) + _1962;
        _2028 = (((_2087 * cbLight._m0[_2036].y) * _2100) * _2101) + _1963;
        _2030 = (((_2087 * cbLight._m0[_2036].z) * _2100) * _2101) + _1964;
    }
    float _2136;
    float _2138;
    float _2140;
    if (_1765)
    {
        _2136 = _2026;
        _2138 = _2028;
        _2140 = _2030;
    }
    else
    {
        uint _2147 = _1669 + 3u;
        uint _2151 = _1669 + 11u;
        float _2165 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _416) * 0.949999988079071044921875);
        float _2166 = _2165 * _2165;
        float _2167 = cbLight._m0[_2147].x + _493;
        float _2168 = cbLight._m0[_2147].y + _494;
        float _2169 = cbLight._m0[_2147].z + _495;
        float _2173 = inversesqrt(dot(vec3(_2167, _2168, _2169), vec3(_2167, _2168, _2169)));
        float _2174 = _2173 * _2167;
        float _2175 = _2173 * _2168;
        float _2176 = _2173 * _2169;
        float _2177 = dot(vec3(_413, _414, _415), vec3(cbLight._m0[_2147].xyz));
        float _4117 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2181 = dot(vec3(_413, _414, _415), vec3(_2174, _2175, _2176));
        float _4128 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2184 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2185 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2174, _2175, _2176));
        float _4139 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
        float _2189 = _2166 * _2166;
        float _2193 = ((_2184 * _2184) * (_2189 + (-1.0))) + 1.0;
        float _2202 = (exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2203 = 1.0 - _2166;
        float _2213 = (0.5 / (((_1839 * ((_2180 * _2203) + _2166)) + 9.9999999392252902907785028219223e-09) + (((_1839 * _2203) + _2166) * _2180))) * _2180;
        float _4150 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2215 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2189 / ((_2193 * _2193) * 3.141590118408203125));
        float _2216 = isnan(1.0) ? _1685 : (isnan(_1685) ? 1.0 : min(_1685, 1.0));
        _2136 = (((_2202 * cbLight._m0[_2151].x) * _2215) * _2216) + _2026;
        _2138 = (((_2202 * cbLight._m0[_2151].y) * _2215) * _2216) + _2028;
        _2140 = (((_2202 * cbLight._m0[_2151].z) * _2215) * _2216) + _2030;
    }
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    if (_1667.y == 0u)
    {
        float _2291 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2292 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2291;
        float _2293 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2291;
        float _2294 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2291;
        uvec4 _2306 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2307 = _2306.x;
        uint _2318 = uint((float(_2306.y) * floor(float(uint(cbSceneParam._m0[85u].y * _515) / _2307))) + floor(float(uint(cbSceneParam._m0[85u].x * _514) / _2307)));
        float _2328 = (log2(_2294 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2329 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        uint _2332 = uint(isnan(14.0) ? _2329 : (isnan(_2329) ? 14.0 : min(_2329, 14.0)));
        uvec4 _2337 = texelFetch(g_lightClusterGridBuffer, int(((_2332 << 2u) + (_2318 << 6u)) >> 2u));
        uint _2338 = _2337.x;
        uint _2339 = _2306.z;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        if (((((1u << ((_2339 >> 4u) & 15u)) + 4294967295u) & _2338) == 0u) || ((_2339 & 240u) == 0u))
        {
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
        }
        else
        {
            float _2440;
            float _2442;
            float _2444;
            float _2446;
            float _2448;
            float _2450;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            uint _2598 = 0u;
            uint _2607;
            bool _2608;
            for (;;)
            {
                _2607 = texelFetch(g_lightClassification, int((((_2332 << 5u) + (_2318 << 9u)) + (_2598 << 2u)) >> 2u)).x;
                _2608 = _2607 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2608)
                {
                    frontier_phi_66_pred = _2592;
                    frontier_phi_66_pred_1 = _2597;
                    frontier_phi_66_pred_2 = _2596;
                    frontier_phi_66_pred_3 = _2595;
                    frontier_phi_66_pred_4 = _2594;
                    frontier_phi_66_pred_5 = _2593;
                }
                else
                {
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    uint _2743;
                    _2737 = _2592;
                    _2738 = _2593;
                    _2739 = _2594;
                    _2740 = _2595;
                    _2741 = _2596;
                    _2742 = _2597;
                    _2743 = _2607;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    for (;;)
                    {
                        uint _2747 = uint(findLSB(_2743)) + (_2598 << 5u);
                        uint _2744 = (_2743 + 4294967295u) & _2743;
                        uint _2749 = _2747 * 48u;
                        vec4 _2763 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2749)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 3u)).x));
                        uint _2769 = (_2747 * 48u) + 4u;
                        vec4 _2782 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 3u)).x));
                        uint _2788 = (_2747 * 48u) + 8u;
                        vec3 _2799 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2788)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2788 + 2u)).x));
                        float _2803 = _2763.x - _2292;
                        float _2804 = _2763.y - _2293;
                        float _2805 = _2763.z - _2294;
                        float _2806 = dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805));
                        float _2809 = inversesqrt(_2806);
                        float _2810 = _2809 * _2803;
                        float _2811 = _2809 * _2804;
                        float _2812 = _2809 * _2805;
                        float _2813 = dot(vec3(_535, _538, _541), vec3(_2810, _2811, _2812));
                        float _2818 = 1.0 - (_2806 * _2763.w);
                        float _4176 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2819 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
                        float _2820 = sqrt(_2806) * _2782.w;
                        float _2823 = 1.39999997615814208984375 / (_2820 + 1.39999997615814208984375);
                        float _2824 = _2823 * _2823;
                        float _2827 = ((1.0 - _2824) * _2813) + _2824;
                        float _2830 = _2820 * _2820;
                        float _2834 = ((isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0))) * _2819) / ((_2830 * 0.699999988079071044921875) + 1.0);
                        float _2838 = (-0.0) - _2292;
                        float _2839 = (-0.0) - _2293;
                        float _2840 = (-0.0) - _2294;
                        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
                        float _2845 = _2844 * _2838;
                        float _2846 = _2844 * _2839;
                        float _2847 = _2844 * _2840;
                        float _2855 = exp2(log2(1.0 / ((_2830 * 3.5) + 5.0)) * 0.25);
                        float _2856 = 1.0 - _595;
                        float _2863 = sqrt(1.0 - ((1.0 - (_2856 * _2856)) * (1.0 - (_2855 * _2855))));
                        float _2864 = _2863 * _2863;
                        float _2865 = _2864 * _2864;
                        float _2866 = _2845 + _2810;
                        float _2867 = _2846 + _2811;
                        float _2868 = _2847 + _2812;
                        float _2872 = inversesqrt(dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868)));
                        float _2876 = dot(vec3(_535, _538, _541), vec3(_2845, _2846, _2847));
                        float _4192 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2879 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                        float _2880 = dot(vec3(_535, _538, _541), vec3(_2872 * _2866, _2872 * _2867, _2872 * _2868));
                        float _4203 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2883 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2887 = ((_2883 * _2883) * (_2865 + (-1.0))) + 1.0;
                        float _2888 = _2823 * _2864;
                        float _2889 = _2888 * _2888;
                        float _2892 = ((1.0 - _2889) * _2813) + _2889;
                        float _4214 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2893 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2894 = 1.0 - _2864;
                        float _2904 = (0.5 / (((_2893 * ((_2879 * _2894) + _2864)) + 9.9999999392252902907785028219223e-09) + (((_2893 * _2894) + _2864) * _2879))) * _2893;
                        float _4225 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2915 = (((_2865 * 3.1415927410125732421875) * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) / ((_2887 * _2887) * ((_2830 * 2.1991131305694580078125) + 3.141590118408203125))) * _2819;
                        _2667 = (_2834 * _2782.x) + _2740;
                        _2668 = (_2834 * _2782.y) + _2741;
                        _2669 = (_2834 * _2782.z) + _2742;
                        _2664 = (_2915 * _2799.x) + _2737;
                        _2665 = (_2915 * _2799.y) + _2738;
                        _2666 = (_2915 * _2799.z) + _2739;
                        if (_2744 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2737 = _2664;
                            _2738 = _2665;
                            _2739 = _2666;
                            _2740 = _2667;
                            _2741 = _2668;
                            _2742 = _2669;
                            _2743 = _2744;
                        }
                    }
                    frontier_phi_66_pred = _2664;
                    frontier_phi_66_pred_1 = _2669;
                    frontier_phi_66_pred_2 = _2668;
                    frontier_phi_66_pred_3 = _2667;
                    frontier_phi_66_pred_4 = _2666;
                    frontier_phi_66_pred_5 = _2665;
                }
                _2440 = frontier_phi_66_pred;
                _2450 = frontier_phi_66_pred_1;
                _2448 = frontier_phi_66_pred_2;
                _2446 = frontier_phi_66_pred_3;
                _2444 = frontier_phi_66_pred_4;
                _2442 = frontier_phi_66_pred_5;
                uint _2599 = _2598 + 1u;
                if (_2599 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2592 = _2440;
                    _2593 = _2442;
                    _2594 = _2444;
                    _2595 = _2446;
                    _2596 = _2448;
                    _2597 = _2450;
                    _2598 = _2599;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
        }
        uvec4 _2453 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2454 = _2453.z;
        uint _2456 = (_2454 >> 8u) & 15u;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        if (((4294967295u << _2456) & _2338) == 0u)
        {
            _2560 = _2439;
            _2562 = _2441;
            _2564 = _2443;
            _2566 = _2445;
            _2568 = _2447;
            _2570 = _2449;
        }
        else
        {
            float _2585 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
            float _2586 = _2585 * _2292;
            float _2587 = _2585 * _2293;
            float _2588 = _2585 * _2294;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2456 < ((_2454 >> 12u) & 15u))
            {
                float _2561;
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2720 = _2439;
                float _2721 = _2441;
                float _2722 = _2443;
                float _2723 = _2445;
                float _2724 = _2447;
                float _2725 = _2449;
                uint _2726 = _2456;
                uint _2735;
                bool _2736;
                for (;;)
                {
                    _2735 = texelFetch(g_lightClassification, int((((_2332 << 5u) + (_2318 << 9u)) + (_2726 << 2u)) >> 2u)).x;
                    _2736 = _2735 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2736)
                    {
                        frontier_phi_77_pred = _2725;
                        frontier_phi_77_pred_1 = _2724;
                        frontier_phi_77_pred_2 = _2723;
                        frontier_phi_77_pred_3 = _2722;
                        frontier_phi_77_pred_4 = _2721;
                        frontier_phi_77_pred_5 = _2720;
                    }
                    else
                    {
                        float _2929;
                        float _2930;
                        float _2931;
                        float _2932;
                        float _2933;
                        float _2934;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _2942 = _2720;
                        float _2943 = _2721;
                        float _2944 = _2722;
                        float _2945 = _2723;
                        float _2946 = _2724;
                        float _2947 = _2725;
                        uint _2948 = _2735;
                        uint _2949;
                        vec4 _2974;
                        float _2975;
                        vec4 _2990;
                        vec3 _3002;
                        vec4 _3017;
                        vec4 _3032;
                        float _3079;
                        bool _3080;
                        for (;;)
                        {
                            uint _2959 = ((_2726 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2948));
                            _2949 = (_2948 + 4294967295u) & _2948;
                            uint _2961 = _2959 * 40u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            _2975 = _2974.w;
                            uint _2977 = (_2959 * 40u) + 4u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            uint _2992 = (_2959 * 40u) + 8u;
                            _3002 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x));
                            uint _3004 = (_2959 * 40u) + 16u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            uint _3019 = (_2959 * 40u) + 20u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3035 = (_2959 * 40u) + 24u;
                            vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3054 = (_2959 * 40u) + 28u;
                            vec4 _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            _3079 = fma(_2294, _3067.z, fma(_2293, _3067.y, _3067.x * _2292)) + _3067.w;
                            _3080 = !((fma(_2294, _3048.z, fma(_2293, _3048.y, _3048.x * _2292)) + _3048.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3080)
                            {
                                float _3107 = _2974.x - _2292;
                                float _3108 = _2974.y - _2293;
                                float _3109 = _2974.z - _2294;
                                float _3110 = dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109));
                                float _3113 = inversesqrt(_3110);
                                float _3114 = _3113 * _3107;
                                float _3115 = _3113 * _3108;
                                float _3116 = _3113 * _3109;
                                float _3120 = 1.0 - (_3110 / (_2975 * _2975));
                                float _4236 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3125 = sqrt(_3110) * _2990.w;
                                float _3127 = 1.39999997615814208984375 / (_3125 + 1.39999997615814208984375);
                                float _3128 = _3127 * _3127;
                                float _3131 = ((1.0 - _3128) * dot(vec3(_3114, _3115, _3116), vec3(_535, _538, _541))) + _3128;
                                float _3134 = _3125 * _3125;
                                float _3138 = (fma(_2294, _3017.z, fma(_2293, _3017.y, _3017.x * _2292)) + _3017.w) / _3079;
                                float _3139 = (fma(_2294, _3032.z, fma(_2293, _3032.y, _3032.x * _2292)) + _3032.w) / _3079;
                                float _3143 = 1.0 - dot(vec2(_3138, _3139), vec2(_3138, _3139));
                                float _4252 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                                float _3144 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                                float _3145 = _3144 * (((isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))) * _3121) / ((_3134 * 0.699999988079071044921875) + 1.0));
                                float _3157 = exp2(log2(1.0 / ((_3134 * 3.5) + 5.0)) * 0.25);
                                float _3158 = 1.0 - _595;
                                float _3165 = sqrt(1.0 - ((1.0 - (_3158 * _3158)) * (1.0 - (_3157 * _3157))));
                                float _3166 = _3165 * _3165;
                                float _3167 = _3166 * _3166;
                                float _3168 = _3114 - _2586;
                                float _3169 = _3115 - _2587;
                                float _3170 = _3116 - _2588;
                                float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                                float _3178 = dot(vec3(_535, _538, _541), vec3((-0.0) - _2586, (-0.0) - _2587, (-0.0) - _2588));
                                float _4263 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3181 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3182 = dot(vec3(_535, _538, _541), vec3(_3174 * _3168, _3174 * _3169, _3174 * _3170));
                                float _4274 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3185 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3189 = ((_3185 * _3185) * (_3167 + (-1.0))) + 1.0;
                                float _3190 = _3127 * _3166;
                                float _3191 = _3190 * _3190;
                                float _3197 = ((1.0 - _3191) * dot(vec3(_535, _538, _541), vec3(_3114, _3115, _3116))) + _3191;
                                float _4285 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3198 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3199 = 1.0 - _3166;
                                float _3209 = (0.5 / (((_3198 * ((_3181 * _3199) + _3166)) + 9.9999999392252902907785028219223e-09) + (((_3198 * _3199) + _3166) * _3181))) * _3198;
                                float _4296 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3219 = (_3144 * _3121) * (((_3167 * 3.1415927410125732421875) * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) / ((_3189 * _3189) * ((_3134 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3145 * _2990.y;
                                frontier_phi_83_pred_1 = _3145 * _2990.x;
                                frontier_phi_83_pred_2 = _3219 * _3002.z;
                                frontier_phi_83_pred_3 = _3219 * _3002.y;
                                frontier_phi_83_pred_4 = _3219 * _3002.x;
                                frontier_phi_83_pred_5 = _3145 * _2990.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3227 = frontier_phi_83_pred;
                            _3226 = frontier_phi_83_pred_1;
                            _3225 = frontier_phi_83_pred_2;
                            _3224 = frontier_phi_83_pred_3;
                            _3223 = frontier_phi_83_pred_4;
                            _3228 = frontier_phi_83_pred_5;
                            _2932 = _3226 + _2945;
                            _2933 = _3227 + _2946;
                            _2934 = _3228 + _2947;
                            _2929 = _3223 + _2942;
                            _2930 = _3224 + _2943;
                            _2931 = _3225 + _2944;
                            if (_2949 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2942 = _2929;
                                _2943 = _2930;
                                _2944 = _2931;
                                _2945 = _2932;
                                _2946 = _2933;
                                _2947 = _2934;
                                _2948 = _2949;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2934;
                        frontier_phi_77_pred_1 = _2933;
                        frontier_phi_77_pred_2 = _2932;
                        frontier_phi_77_pred_3 = _2931;
                        frontier_phi_77_pred_4 = _2930;
                        frontier_phi_77_pred_5 = _2929;
                    }
                    _2571 = frontier_phi_77_pred;
                    _2569 = frontier_phi_77_pred_1;
                    _2567 = frontier_phi_77_pred_2;
                    _2565 = frontier_phi_77_pred_3;
                    _2563 = frontier_phi_77_pred_4;
                    _2561 = frontier_phi_77_pred_5;
                    uint _2727 = _2726 + 1u;
                    if (_2727 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2720 = _2561;
                        _2721 = _2563;
                        _2722 = _2565;
                        _2723 = _2567;
                        _2724 = _2569;
                        _2725 = _2571;
                        _2726 = _2727;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2565;
                frontier_phi_58_59_ladder_1 = _2571;
                frontier_phi_58_59_ladder_2 = _2569;
                frontier_phi_58_59_ladder_3 = _2567;
                frontier_phi_58_59_ladder_4 = _2563;
                frontier_phi_58_59_ladder_5 = _2561;
            }
            else
            {
                frontier_phi_58_59_ladder = _2443;
                frontier_phi_58_59_ladder_1 = _2449;
                frontier_phi_58_59_ladder_2 = _2447;
                frontier_phi_58_59_ladder_3 = _2445;
                frontier_phi_58_59_ladder_4 = _2441;
                frontier_phi_58_59_ladder_5 = _2439;
            }
            _2560 = frontier_phi_58_59_ladder_5;
            _2562 = frontier_phi_58_59_ladder_4;
            _2564 = frontier_phi_58_59_ladder;
            _2566 = frontier_phi_58_59_ladder_3;
            _2568 = frontier_phi_58_59_ladder_2;
            _2570 = frontier_phi_58_59_ladder_1;
        }
        float _2575 = isnan(1.0) ? _579 : (isnan(_579) ? 1.0 : min(_579, 1.0));
        _2351 = (_2575 * _2566) + _1803;
        _2353 = (_2575 * _2568) + _1805;
        _2355 = (_2575 * _2570) + _1807;
        _2357 = ((_2560 * 0.039999999105930328369140625) * _2575) + _2136;
        _2359 = ((_2562 * 0.039999999105930328369140625) * _2575) + _2138;
        _2361 = ((_2564 * 0.039999999105930328369140625) * _2575) + _2140;
    }
    else
    {
        _2351 = _1803;
        _2353 = _1805;
        _2355 = _1807;
        _2357 = _2136;
        _2359 = _2138;
        _2361 = _2140;
    }
    float _4312 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4323 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4334 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _2378 = ((isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2351 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _579))) + ((_2357 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1417)) * cbPerFrame._m0[3u].x);
    float _2379 = ((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2353 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _579))) + ((_2359 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1417)) * cbPerFrame._m0[3u].x);
    float _2380 = ((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2355 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _579))) + ((_2361 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _1417)) * cbPerFrame._m0[3u].x);
    uint _2381 = _250 + 6u;
    float _2389 = _514 / cbSceneParam._m0[86u].x;
    float _2390 = _515 / cbSceneParam._m0[86u].y;
    vec4 _2404 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, (log2((isnan(cbSceneParam._m0[77u].w) ? _434 : (isnan(_434) ? cbSceneParam._m0[77u].w : min(_434, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2406 = _2404.x;
    float _2407 = _2404.y;
    float _2408 = _2404.z;
    float _2409 = _2404.w;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    if (_434 > cbSceneParam._m0[78u].w)
    {
        float _2464 = isnan(_434) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _434 : min(cbSceneParam._m0[80u].w, _434));
        float _2465 = _2464 / _434;
        float _2476 = _2465 * _486;
        float _2477 = _487 * _2465;
        float _2478 = (-0.0) - _2477;
        float _2480 = _2465 * _488;
        float _2482 = (cbSceneParam._m0[77u].w * _2478) / _2464;
        float _2483 = _2482 + cbSceneParam._m0[79u].w;
        float _2484 = cbSceneParam._m0[79u].w - _2477;
        float _2490 = sqrt(((_2476 * _2476) + (_2477 * _2477)) + (_2480 * _2480));
        float _2493 = (1.0 - (cbSceneParam._m0[77u].w / _2464)) * _2490;
        float _2498 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2500 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2677;
        if (abs((_2478 - _2482) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2677 = ((((_2483 > 0.0) ? exp2(_2498 * _2483) : (2.0 - exp2(_2500 * _2483))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2493;
        }
        else
        {
            float _2621 = 1.0 / cbSceneParam._m0[80u].x;
            float _2622 = isnan(_2484) ? _2483 : (isnan(_2483) ? _2484 : max(_2483, _2484));
            float _2623 = isnan(_2484) ? _2483 : (isnan(_2483) ? _2484 : min(_2483, _2484));
            float _2632 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : min(_2622, 0.0));
            float _2633 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : min(_2623, 0.0));
            _2677 = ((abs(_2490 / _2478) * cbSceneParam._m0[80u].y) * ((((_2632 - _2633) * 2.0) - ((exp2(_2498 * (isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0)))) - exp2(_2498 * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0))))) * _2621)) - ((exp2(_2500 * _2632) - exp2(_2500 * _2633)) * _2621))) + (_2493 * cbSceneParam._m0[80u].z);
        }
        vec4 _2679 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2389, _2390, 1.0), 0.0);
        float _2688 = exp2((_2677 * (-1.44269502162933349609375)) * (1.0 - _2679.w));
        float _2689 = log2(_2688);
        float _2705 = log2(_2409);
        _2502 = (exp2(_2705 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].x)) * _2679.x) / cbSceneParam._m0[78u].x)) + _2406;
        _2504 = (exp2(_2705 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].y)) * _2679.y) / cbSceneParam._m0[78u].y)) + _2407;
        _2506 = (exp2(_2705 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2689 * cbSceneParam._m0[78u].z)) * _2679.z) / cbSceneParam._m0[78u].z)) + _2408;
        _2508 = _2688 * _2409;
    }
    else
    {
        _2502 = _2406;
        _2504 = _2407;
        _2506 = _2408;
        _2508 = _2409;
    }
    bool _2715;
    vec4 _2518;
    vec4 _2540;
    float _2542;
    float _2546;
    float _2547;
    float _2548;
    float _2549;
    bool _2559;
    for (;;)
    {
        _2518 = cbMatDynParam._m0[0u];
        float _2520 = roundEven(_2518.y);
        bool _2521 = _2520 == 3.0;
        float _2522 = log2(_2508);
        float _2529 = exp2(_2522 * cbSceneParam._m0[78u].x) * _2378;
        float _2530 = exp2(_2522 * cbSceneParam._m0[78u].y) * _2379;
        float _2531 = exp2(_2522 * cbSceneParam._m0[78u].z) * _2380;
        float _2538 = _502 + (-0.5);
        _2540 = cbMtdParam._m0[1u];
        _2542 = _2540.y * _2538;
        float _2545 = (_2520 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2546 = _2545 * (_2521 ? _2529 : (_2529 + (cbSceneParam._m0[72u].w * _2502)));
        _2547 = _2545 * (_2521 ? _2530 : (_2530 + (cbSceneParam._m0[72u].w * _2504)));
        _2548 = _2545 * (_2521 ? _2531 : (_2531 + (cbSceneParam._m0[72u].w * _2506)));
        _2549 = _2538 * 0.999000012874603271484375;
        _2559 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2559)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _2549) < 0.5)
            {
                _2715 = true;
                break;
            }
        }
        uint _2656 = _554 + uint(_2518.w);
        if ((cbInstanceData._m0[_2656].w < 1.0) && ((cbInstanceData._m0[_2656].w + _2549) < 0.5))
        {
            _2715 = true;
            break;
        }
        if ((_2542 + 1.0) < _2540.x)
        {
            _2715 = true;
            break;
        }
        _2715 = false;
        break;
    }
    float _2920;
    if (_2715)
    {
        discard_state = true;
        _2920 = 0.0;
    }
    else
    {
        _2920 = cbInstanceData._m0[_2381].w;
    }
    SV_Target.x = _2546;
    SV_Target.y = _2547;
    SV_Target.z = _2548;
    SV_Target.w = _2920;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2381].w;
    discard_exit();
}


