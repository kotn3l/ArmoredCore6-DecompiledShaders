#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1303;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _370 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3891 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _442 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _459 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _461 = _459.x;
    float _462 = _459.y;
    float _463 = _459.z;
    float _472 = ((_442.z - _463) * _388) + _463;
    float _475 = ((((_442.x - _461) * _388) + _461) * 2.0) + (-1.0);
    float _476 = ((((_442.y - _462) * _388) + _462) * 2.0) + (-1.0);
    float _477 = dot(vec2(_475, _476), vec2(_475, _476));
    float _3902 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _482 = sqrt(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))));
    vec4 _502 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _514 = (_475 + ((((_415.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_502.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _515 = (_476 + ((((_415.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_502.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _518 = fma(_482, _241, fma(_515, _248, _514 * _234));
    float _521 = fma(_482, _242, fma(_515, _249, _514 * _235));
    float _524 = fma(_482, _243, fma(_515, _250, _514 * _236));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _559 = _557.x;
    float _560 = 1.0 - _559;
    float _564 = ((_559 - _560) * cbMtdParam._m0[24u].z) + _560;
    float _566 = (cbMtdParam._m0[19u].x + dot(vec4(_528 * _518, _528 * _521, _528 * _524, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_564 * cbMtdParam._m0[21u].z);
    float _3913 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _569 = (-0.0) - cbMtdParam._m0[24u].y;
    float _571 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _572 = isnan(1.0) ? _571 : (isnan(_571) ? 1.0 : min(_571, 1.0));
    float _579 = _567 - ((_567 * TEXCOORD_8.x) * _572);
    float _580 = _567 - ((_567 * TEXCOORD_8.y) * _572);
    float _581 = _567 - ((_567 * TEXCOORD_8.z) * _572);
    float _588 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _592 = ((isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : min(_588, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _600 = (_592 - (((_564 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _592))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3944 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _605 = ((_579 * (cbMtdParam._m0[17u].x - _395)) * _601) + _395;
    float _606 = ((_580 * (cbMtdParam._m0[17u].y - _396)) * _601) + _396;
    float _607 = ((_581 * (cbMtdParam._m0[17u].z - _397)) * _601) + _397;
    vec4 _619 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _621 = _619.x;
    float _622 = 1.0 - _621;
    float _649 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_621 - _622) * cbMtdParam._m0[24u].w) + _622) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3955 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _650 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _658 = ((((cbMtdParam._m0[10u].x - _605) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _650) + _605;
    float _659 = ((((cbMtdParam._m0[10u].y - _606) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _650) + _606;
    float _660 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _607)) * _650) + _607;
    float _665 = (((_415.z - _472) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _472;
    float _669 = ((_502.z - _665) * cbMtdParam._m0[19u].w) + _665;
    vec4 _683 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _690 = (_683.x * 2.0) + (-1.0);
    float _691 = (_683.y * 2.0) + (-1.0);
    float _692 = dot(vec2(_690, _691), vec2(_690, _691));
    float _3966 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _701 = (((_683.z - _669) * _579) * _601) + _669;
    float _704 = ((cbMtdParam._m0[23u].y - _701) * _650) + _701;
    vec4 _723 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _729 = (_723.x * 2.0) + (-1.0);
    float _730 = (_723.y * 2.0) + (-1.0);
    float _731 = dot(vec2(_729, _730), vec2(_729, _730));
    float _3977 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _751 = (((cbMtdParam._m0[21u].x * _514) + ((_690 - _514) * _579)) * _601) + _514;
    float _752 = (((cbMtdParam._m0[21u].x * _515) + ((_691 - _515) * _580)) * _601) + _515;
    float _753 = (((sqrt(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) - _482) * _581) * _601) + _482;
    float _764 = (((_729 - _751) + (_751 * cbMtdParam._m0[22u].z)) * _650) + _751;
    float _765 = (((_730 - _752) + (_752 * cbMtdParam._m0[22u].z)) * _650) + _752;
    float _766 = ((sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) - _753) * _650) + _753;
    float _768 = cbMtdParam._m0[22u].x + _502.w;
    float _771 = fma(_766, _241, fma(_765, _248, _764 * _234));
    float _774 = fma(_766, _242, fma(_765, _249, _764 * _235));
    float _777 = fma(_766, _243, fma(_765, _250, _764 * _236));
    float _781 = inversesqrt(dot(vec3(_771, _774, _777), vec3(_771, _774, _777)));
    float _782 = _781 * _771;
    float _783 = _781 * _774;
    float _784 = _781 * _777;
    float _3988 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _785 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4010 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4021 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4032 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _803 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _854 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _844);
    float _855 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _844);
    float _856 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _844);
    float _860 = inversesqrt(dot(vec3(_854, _855, _856), vec3(_854, _855, _856)));
    float _861 = _854 * _860;
    float _862 = _855 * _860;
    float _863 = _856 * _860;
    float _869 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _870 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _888 = fma(_784, cbSceneParam._m0[5u].z, fma(_783, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _782));
    float _891 = fma(_784, cbSceneParam._m0[6u].z, fma(_783, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _782));
    float _894 = fma(_784, cbSceneParam._m0[7u].z, fma(_783, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _782));
    uint _908 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _914 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * cbInstanceData._m0[_908].x;
    float _915 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * cbInstanceData._m0[_908].y;
    float _916 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_908].z;
    float _4043 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    vec4 _928 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _869, cbSceneParam._m0[86u].y * _870));
    float _932 = ((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * TEXCOORD_5.w) * _928.x;
    float _933 = dot(vec3(_782, _783, _784), vec3(_861, _862, _863));
    float _936 = _933 * 2.0;
    float _940 = (_936 * _782) - _861;
    float _941 = (_936 * _783) - _862;
    float _942 = (_936 * _784) - _863;
    float _946 = abs(dot(vec3(_861, _862, _863), vec3(_782, _783, _784)));
    float _4076 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _948 = sqrt(_785);
    float _961 = exp2((_948 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_948 * 3.0));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1302;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1027 = fma(_1001, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993));
        float _1031 = fma(_1001, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993));
        float _1035 = fma(_1001, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993));
        float _1060 = _993 + _782;
        float _1061 = _997 + _783;
        float _1062 = _1001 + _784;
        float _1072 = fma(_1062, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060)) - _1027;
        float _1073 = fma(_1062, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060)) - _1031;
        float _1074 = fma(_1062, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060)) - _1035;
        float _1078 = inversesqrt(dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074)));
        float _1091 = ((_1078 * _1072) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1027 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1078 * _1073) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1031 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1078 * _1074) / cbModelParam._m0[34u].z) + ((((((_1035 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1091, _1092, _1093), 0.0);
        float _1130 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1096.x + (-0.5));
        float _1132 = _1130 * (_1096.y + (-0.5));
        float _1133 = _1130 * (_1096.z + (-0.5));
        float _1140 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1103.x + (-0.5));
        float _1142 = _1140 * (_1103.y + (-0.5));
        float _1143 = _1140 * (_1103.z + (-0.5));
        float _1150 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1110.x + (-0.5));
        float _1152 = _1150 * (_1110.y + (-0.5));
        float _1153 = _1150 * (_1110.z + (-0.5));
        float _1160 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1117.x + (-0.5));
        float _1162 = _1160 * (_1117.y + (-0.5));
        float _1163 = _1160 * (_1117.z + (-0.5));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = _1131 * 0.5;
        float _1168 = _1141 * 0.5;
        float _1169 = _1151 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1184 = (dot(vec3(_782, _783, _784), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1194 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _4124 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1196 + 1.0))) + _1201) * _1164;
        float _1211 = _1132 * 0.5;
        float _1212 = _1142 * 0.5;
        float _1213 = _1152 * 0.5;
        float _1214 = dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213));
        float _1219 = (_1214 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1214);
        float _1227 = (dot(vec3(_782, _783, _784), vec3(_1219 * _1211, _1219 * _1212, _1219 * _1213)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1236 = sqrt(((_1212 * _1212) + (_1211 * _1211)) + (_1213 * _1213)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1238 = _1237 * 2.0;
        float _1242 = (1.0 - _1237) / (_1237 + 1.0);
        float _4157 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1252 = ((((1.0 - _1243) * (_1238 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1238 + 1.0))) + _1243) * _1165;
        float _1253 = _1133 * 0.5;
        float _1254 = _1143 * 0.5;
        float _1255 = _1153 * 0.5;
        float _1256 = dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255));
        float _1261 = (_1256 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1256);
        float _1269 = (dot(vec3(_782, _783, _784), vec3(_1261 * _1253, _1261 * _1254, _1261 * _1255)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1278 = sqrt(((_1254 * _1254) + (_1253 * _1253)) + (_1255 * _1255)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4190 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1280 + 1.0))) + _1285) * _1166;
        _1302 = _1133;
        _1304 = _1132;
        _1305 = _1131;
        _1306 = _1143;
        _1307 = _1142;
        _1308 = _1141;
        _1309 = _1153;
        _1310 = _1152;
        _1311 = _1151;
        _1312 = _1166;
        _1313 = _1165;
        _1314 = _1164;
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
    }
    else
    {
        _1302 = _1303;
        _1304 = _1303;
        _1305 = _1303;
        _1306 = _1303;
        _1307 = _1303;
        _1308 = _1303;
        _1309 = _1303;
        _1310 = _1303;
        _1311 = _1303;
        _1312 = _1303;
        _1313 = _1303;
        _1314 = _1303;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1342 = fma(_1001, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993));
        float _1346 = fma(_1001, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993));
        float _1350 = fma(_1001, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993));
        float _1373 = _993 + _782;
        float _1374 = _997 + _783;
        float _1375 = _1001 + _784;
        float _1385 = fma(_1375, cbModelParam._m0[30u].z, fma(_1374, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1373)) - _1342;
        float _1386 = fma(_1375, cbModelParam._m0[31u].z, fma(_1374, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1373)) - _1346;
        float _1387 = fma(_1375, cbModelParam._m0[32u].z, fma(_1374, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1373)) - _1350;
        float _1391 = inversesqrt(dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387)));
        float _1404 = ((_1391 * _1385) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1342 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1391 * _1386) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1346 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1391 * _1387) / cbModelParam._m0[35u].z) + ((((((_1350 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1441 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1408.x + (-0.5));
        float _1443 = _1441 * (_1408.y + (-0.5));
        float _1444 = _1441 * (_1408.z + (-0.5));
        float _1451 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1415.x + (-0.5));
        float _1453 = _1451 * (_1415.y + (-0.5));
        float _1454 = _1451 * (_1415.z + (-0.5));
        float _1461 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1422.x + (-0.5));
        float _1463 = _1461 * (_1422.y + (-0.5));
        float _1464 = _1461 * (_1422.z + (-0.5));
        float _1471 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1429.x + (-0.5));
        float _1473 = _1471 * (_1429.y + (-0.5));
        float _1474 = _1471 * (_1429.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_782, _783, _784), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4253 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1505 + 1.0))) + _1510) * _1475;
        float _1520 = _1443 * 0.5;
        float _1521 = _1453 * 0.5;
        float _1522 = _1463 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_782, _783, _784), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4286 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1547 + 1.0))) + _1552) * _1476;
        float _1562 = _1444 * 0.5;
        float _1563 = _1454 * 0.5;
        float _1564 = _1464 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_782, _783, _784), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4319 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1589 + 1.0))) + _1594) * _1477;
        _1611 = _1444;
        _1612 = _1443;
        _1613 = _1442;
        _1614 = _1454;
        _1615 = _1453;
        _1616 = _1452;
        _1617 = _1464;
        _1618 = _1463;
        _1619 = _1462;
        _1620 = _1477;
        _1621 = _1476;
        _1622 = _1475;
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
    }
    else
    {
        _1611 = _1303;
        _1612 = _1303;
        _1613 = _1303;
        _1614 = _1303;
        _1615 = _1303;
        _1616 = _1303;
        _1617 = _1303;
        _1618 = _1303;
        _1619 = _1303;
        _1620 = _1303;
        _1621 = _1303;
        _1622 = _1303;
        _1623 = 0.0;
        _1624 = 0.0;
        _1625 = 0.0;
    }
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1315)) + _1315;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1316)) + _1316;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1317)) + _1317;
    float _1658 = fma(_1637, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1635 * cbSceneParam._m0[89u].x));
    float _1661 = fma(_1637, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1635 * cbSceneParam._m0[90u].x));
    float _1664 = fma(_1637, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1635));
    float _1679 = _940 * 0.5;
    float _1680 = _941 * 0.5;
    float _1681 = _942 * 0.5;
    float _1682 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1685 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1688 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1722;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1695 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1302, _1306, _1309, _1312));
        float _1699 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1703 = dot(vec4(_1679, _1680, _1681, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1710 = dot(vec4(cbModelParam._m0[39u]), vec4(_1679, _1680, _1681, 1.0));
        _1722 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1710) ? 0.0 : (isnan(0.0) ? _1710 : max(0.0, _1710))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1722 = 1.0;
    }
    float _1733;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1724 = dot(vec4(cbModelParam._m0[40u]), vec4(_1679, _1680, _1681, 1.0));
        _1733 = dot(vec3(isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1724) ? 0.0 : (isnan(0.0) ? _1724 : max(0.0, _1724))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1733 = 1.0;
    }
    float _1737 = (_1733 * cbModelParam._m0[1u].x) + (_1722 * (1.0 - cbModelParam._m0[1u].x));
    float _1747 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _785);
    float _1748 = isnan(_1747) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1747 : min(cbModelParam._m0[25u].z, _1747));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1796 = fma(_1001, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993)) + cbModelParam._m0[13u].w;
        float _1800 = fma(_1001, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993)) + cbModelParam._m0[14u].w;
        float _1804 = fma(_1001, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993)) + cbModelParam._m0[15u].w;
        float _1807 = fma(_942, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940));
        float _1810 = fma(_942, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940));
        float _1813 = fma(_942, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940));
        float _1841;
        if (_1807 > 0.0)
        {
            _1841 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1841 = frontier_phi_14_12_ladder;
        }
        float _2011;
        if (_1810 > 0.0)
        {
            _2011 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2011 = frontier_phi_23_19_ladder;
        }
        float _2306;
        if (_1813 > 0.0)
        {
            _2306 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2306 = frontier_phi_35_30_ladder;
        }
        float _2308 = isnan(_2011) ? _1841 : (isnan(_1841) ? _2011 : min(_1841, _2011));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1807) + _1796;
        float _2314 = (_2309 * _1810) + _1800;
        float _2315 = (_2309 * _1813) + _1804;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2316;
        float _2320 = _2316 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 > _2320) || ((_2314 < _2318) || ((_2313 < _2318) || (_2313 > _2320))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2315, cbModelParam._m0[9u].z, fma(_2314, cbModelParam._m0[9u].y, _2313 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2315, cbModelParam._m0[10u].z, fma(_2314, cbModelParam._m0[10u].y, _2313 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2315, cbModelParam._m0[11u].z, fma(_2314, cbModelParam._m0[11u].y, _2313 * cbModelParam._m0[11u].x))), _1748);
            frontier_phi_13_35_ladder = _2460.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2460.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2460.x * cbModelParam._m0[1u].y;
        }
        _1829 = frontier_phi_13_35_ladder_2;
        _1831 = frontier_phi_13_35_ladder_1;
        _1833 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_940, _941, _942), _1748);
        _1829 = _1817.x * cbModelParam._m0[1u].y;
        _1831 = _1817.y * cbModelParam._m0[1u].y;
        _1833 = _1817.z * cbModelParam._m0[1u].y;
    }
    float _1837 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _785);
    float _1838 = isnan(_1837) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1837 : min(cbModelParam._m0[25u].w, _1837));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1892 = fma(_1001, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993)) + cbModelParam._m0[21u].w;
        float _1896 = fma(_1001, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993)) + cbModelParam._m0[22u].w;
        float _1900 = fma(_1001, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993)) + cbModelParam._m0[23u].w;
        float _1903 = fma(_942, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940));
        float _1906 = fma(_942, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940));
        float _1909 = fma(_942, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940));
        float _2016;
        if (_1903 > 0.0)
        {
            _2016 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2016 = frontier_phi_25_21_ladder;
        }
        float _2333;
        if (_1906 > 0.0)
        {
            _2333 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2333 = frontier_phi_37_32_ladder;
        }
        float _2660;
        if (_1909 > 0.0)
        {
            _2660 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2660 = frontier_phi_47_44_ladder;
        }
        float _2662 = isnan(_2333) ? _2016 : (isnan(_2016) ? _2333 : min(_2016, _2333));
        float _2663 = isnan(_2660) ? _2662 : (isnan(_2662) ? _2660 : min(_2662, _2660));
        float _2667 = (_2663 * _1903) + _1892;
        float _2668 = (_2663 * _1906) + _1896;
        float _2669 = (_2663 * _1909) + _1900;
        float _2670 = _2663 * 9.9999997473787516355514526367188e-05;
        float _2671 = (-1.0) - _2670;
        float _2673 = _2670 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2669 > _2673) || ((_2669 < _2671) || ((_2668 > _2673) || ((_2668 < _2671) || ((_2667 < _2671) || (_2667 > _2673))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2669, cbModelParam._m0[17u].z, fma(_2668, cbModelParam._m0[17u].y, _2667 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2669, cbModelParam._m0[18u].z, fma(_2668, cbModelParam._m0[18u].y, _2667 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2669, cbModelParam._m0[19u].z, fma(_2668, cbModelParam._m0[19u].y, _2667 * cbModelParam._m0[19u].x))), _1838);
            frontier_phi_22_47_ladder = _2787.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2787.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2787.x * cbModelParam._m0[1u].z;
        }
        _1928 = frontier_phi_22_47_ladder_2;
        _1930 = frontier_phi_22_47_ladder_1;
        _1932 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_940, _941, _942), _1838);
        _1928 = _1912.x * cbModelParam._m0[1u].z;
        _1930 = _1912.y * cbModelParam._m0[1u].z;
        _1932 = _1912.z * cbModelParam._m0[1u].z;
    }
    float _1944 = ((((1.0 - _961) * ((_948 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_961 * _948)) * _932;
    float _1945 = _1944 * ((cbModelParam._m0[1u].w * (_1928 - _1829)) + _1829);
    float _1946 = _1944 * ((cbModelParam._m0[1u].w * (_1930 - _1831)) + _1831);
    float _1947 = _1944 * ((cbModelParam._m0[1u].w * (_1932 - _1833)) + _1833);
    float _1950 = fma(_1947, cbSceneParam._m0[89u].z, fma(_1946, cbSceneParam._m0[89u].y, _1945 * cbSceneParam._m0[89u].x));
    float _1953 = fma(_1947, cbSceneParam._m0[90u].z, fma(_1946, cbSceneParam._m0[90u].y, _1945 * cbSceneParam._m0[90u].x));
    float _1956 = fma(_1947, cbSceneParam._m0[91u].z, fma(_1946, cbSceneParam._m0[91u].y, _1945 * cbSceneParam._m0[91u].x));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1994 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1998 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2002 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2003 = _1990 / _2002;
    float _2004 = _1994 / _2002;
    float _2005 = _1998 / _2002;
    float _2152;
    float _2153;
    float _2154;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2032 = ((uint(_2005 > cbSceneParam._m0[59u].y) + uint(_2005 > cbSceneParam._m0[59u].x)) + uint(_2005 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2033 = _2032 + 43u;
        uint _2041 = _2032 + 44u;
        uint _2049 = _2032 + 45u;
        uint _2057 = _2032 + 46u;
        float _2068 = fma(_2002, cbSceneParam._m0[_2033].w, fma(_1998, cbSceneParam._m0[_2033].z, fma(_1994, cbSceneParam._m0[_2033].y, _1990 * cbSceneParam._m0[_2033].x)));
        float _2072 = fma(_2002, cbSceneParam._m0[_2041].w, fma(_1998, cbSceneParam._m0[_2041].z, fma(_1994, cbSceneParam._m0[_2041].y, _1990 * cbSceneParam._m0[_2041].x)));
        float _2080 = fma(_2002, cbSceneParam._m0[_2057].w, fma(_1998, cbSceneParam._m0[_2057].z, fma(_1994, cbSceneParam._m0[_2057].y, _1990 * cbSceneParam._m0[_2057].x)));
        float _2085 = cbSceneParam._m0[33u].z * _2080;
        float _2087 = cbSceneParam._m0[33u].w * _2080;
        float _2090 = fma(_2002, cbSceneParam._m0[_2049].w, fma(_1998, cbSceneParam._m0[_2049].z, fma(_1994, cbSceneParam._m0[_2049].y, _1990 * cbSceneParam._m0[_2049].x))) / _2080;
        float _2138 = (cbSceneParam._m0[33u].x - sqrt(((_2004 * _2004) + (_2003 * _2003)) + (_2005 * _2005))) * cbSceneParam._m0[33u].y;
        float _4445 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2145 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2085 + _2068) / _2080, (_2087 + _2072) / _2080), _2090), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2087 + _2068) / _2080, (_2072 - _2085) / _2080), _2090), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2068 - _2085) / _2080, (_2072 - _2087) / _2080), _2090), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2068 - _2087) / _2080, (_2085 + _2072) / _2080), _2090), 0.0)).x), vec4(0.25)));
        _2152 = 1.0 - (_2145 * cbSceneParam._m0[34u].x);
        _2153 = 1.0 - (_2145 * cbSceneParam._m0[34u].y);
        _2154 = 1.0 - (_2145 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2152 = 1.0;
        _2153 = 1.0;
        _2154 = 1.0;
    }
    float _2218;
    float _2220;
    float _2222;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2206 = fma(_2002, cbSceneParam._m0[63u].w, fma(_1998, cbSceneParam._m0[63u].z, fma(_1994, cbSceneParam._m0[63u].y, _1990 * cbSceneParam._m0[63u].x)));
        float _2207 = fma(_2002, cbSceneParam._m0[60u].w, fma(_1998, cbSceneParam._m0[60u].z, fma(_1994, cbSceneParam._m0[60u].y, _1990 * cbSceneParam._m0[60u].x))) / _2206;
        float _2208 = fma(_2002, cbSceneParam._m0[61u].w, fma(_1998, cbSceneParam._m0[61u].z, fma(_1994, cbSceneParam._m0[61u].y, _1990 * cbSceneParam._m0[61u].x))) / _2206;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2207 >= cbSceneParam._m0[64u].x) && (_2208 >= cbSceneParam._m0[64u].y)) && (_2207 <= cbSceneParam._m0[64u].z)) && (_2208 <= cbSceneParam._m0[64u].w))
        {
            float _2346 = fma(_2002, cbSceneParam._m0[62u].w, fma(_1998, cbSceneParam._m0[62u].z, fma(_1994, cbSceneParam._m0[62u].y, _1990 * cbSceneParam._m0[62u].x))) / _2206;
            float _2350 = isnan(cbSceneParam._m0[41u].w) ? _2346 : (isnan(_2346) ? cbSceneParam._m0[41u].w : max(_2346, cbSceneParam._m0[41u].w));
            float _2393 = (cbSceneParam._m0[33u].x - sqrt(((_2004 * _2004) + (_2003 * _2003)) + (_2005 * _2005))) * cbSceneParam._m0[33u].y;
            float _4461 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
            float _2400 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2207, cbSceneParam._m0[33u].w + _2208), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2207, _2208 - cbSceneParam._m0[33u].z), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2207 - cbSceneParam._m0[33u].z, _2208 - cbSceneParam._m0[33u].w), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2207 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2208), _2350), 0.0)).x), vec4(0.25)));
            float _2404 = 1.0 - (_2400 * cbSceneParam._m0[34u].x);
            float _2405 = 1.0 - (_2400 * cbSceneParam._m0[34u].y);
            float _2406 = 1.0 - (_2400 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2406) ? _2154 : (isnan(_2154) ? _2406 : min(_2154, _2406));
            frontier_phi_34_33_ladder_1 = isnan(_2405) ? _2153 : (isnan(_2153) ? _2405 : min(_2153, _2405));
            frontier_phi_34_33_ladder_2 = isnan(_2404) ? _2152 : (isnan(_2152) ? _2404 : min(_2152, _2404));
        }
        else
        {
            frontier_phi_34_33_ladder = _2154;
            frontier_phi_34_33_ladder_1 = _2153;
            frontier_phi_34_33_ladder_2 = _2152;
        }
        _2218 = frontier_phi_34_33_ladder_2;
        _2220 = frontier_phi_34_33_ladder_1;
        _2222 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2218 = _2152;
        _2220 = _2153;
        _2222 = _2154;
    }
    uvec4 _2227 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2229 = _2227.x * 14u;
    uint _2230 = _2229 + 13u;
    float _2237 = _932 + (-1.0);
    float _2242 = (cbLight._m0[_2230].x * _2237) + 1.0;
    float _2243 = (cbLight._m0[_2230].y * _2237) + 1.0;
    float _2244 = (cbLight._m0[_2230].z * _2237) + 1.0;
    float _2245 = (cbLight._m0[_2230].w * _2237) + 1.0;
    uint _2246 = _2229 + 5u;
    float _2252 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
    uint _2256 = _2229 + 4u;
    float _2265 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
    uint _2269 = _2229 | 1u;
    float _2280 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_782, _783, _784));
    float _2283 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_782, _783, _784));
    float _4497 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _4508 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2288 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * 0.3183098733425140380859375;
    float _2290 = (isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * 0.3183098733425140380859375;
    float _2297 = ((cbLight._m0[_2246].x * _2252) * _2290) + (((cbLight._m0[_2256].x * _2218) * _2265) * _2288);
    float _2298 = ((_2252 * cbLight._m0[_2246].y) * _2290) + (((cbLight._m0[_2256].y * _2220) * _2265) * _2288);
    float _2299 = ((_2252 * cbLight._m0[_2246].z) * _2290) + (((cbLight._m0[_2256].z * _2222) * _2265) * _2288);
    uvec4 _2303 = floatBitsToUint(cbLight._m0[_2229 + 12u]);
    bool _2305 = _2303.x == 0u;
    float _2407;
    float _2409;
    float _2411;
    if (_2305)
    {
        _2407 = _2297;
        _2409 = _2298;
        _2411 = _2299;
    }
    else
    {
        uint _2415 = _2229 + 6u;
        float _2431 = (dot(vec3(cbLight._m0[_2229 + 2u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4519 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2434 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2407 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2297;
        _2409 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2298;
        _2411 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2299;
    }
    bool _2414 = _2303.y == 0u;
    float _2469;
    float _2471;
    float _2473;
    if (_2414)
    {
        _2469 = _2407;
        _2471 = _2409;
        _2473 = _2411;
    }
    else
    {
        uint _2631 = _2229 + 7u;
        float _2647 = (dot(vec3(cbLight._m0[_2229 + 3u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2648 = _2647 * _2647;
        float _4535 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2649 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2650 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
        _2469 = (((cbLight._m0[_2631].x * 0.3183098733425140380859375) * _2649) * _2650) + _2407;
        _2471 = (((cbLight._m0[_2631].y * 0.3183098733425140380859375) * _2649) * _2650) + _2409;
        _2473 = (((cbLight._m0[_2631].z * 0.3183098733425140380859375) * _2649) * _2650) + _2411;
    }
    uint _2476 = _2229 + 8u;
    float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _785) * 0.949999988079071044921875);
    float _2490 = _2489 * _2489;
    float _2491 = cbLight._m0[_2229].x + _861;
    float _2492 = cbLight._m0[_2229].y + _862;
    float _2493 = cbLight._m0[_2229].z + _863;
    float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
    float _2498 = _2497 * _2491;
    float _2499 = _2497 * _2492;
    float _2500 = _2497 * _2493;
    float _2501 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2229].xyz));
    float _4551 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2504 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _4562 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _2505 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
    float _2506 = dot(vec3(_782, _783, _784), vec3(_2498, _2499, _2500));
    float _4573 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2510 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2498, _2499, _2500));
    float _4584 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2514 = _2490 * _2490;
    float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
    float _2529 = (exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2530 = 1.0 - _2490;
    float _2541 = (0.5 / (((_2505 * ((_2504 * _2530) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2530) + _2490) * _2504))) * _2504;
    float _4595 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2543 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
    uint _2557 = _2229 + 9u;
    float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _785) * 0.949999988079071044921875);
    float _2569 = _2568 * _2568;
    float _2570 = cbLight._m0[_2269].x + _861;
    float _2571 = cbLight._m0[_2269].y + _862;
    float _2572 = cbLight._m0[_2269].z + _863;
    float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
    float _2577 = _2576 * _2570;
    float _2578 = _2576 * _2571;
    float _2579 = _2576 * _2572;
    float _2580 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2269].xyz));
    float _4606 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _2584 = dot(vec3(_782, _783, _784), vec3(_2577, _2578, _2579));
    float _4617 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2588 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2577, _2578, _2579));
    float _4628 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2592 = _2569 * _2569;
    float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
    float _2605 = (exp2(log2(1.0 - (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2606 = 1.0 - _2569;
    float _2616 = (0.5 / (((_2505 * ((_2583 * _2606) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2606) + _2569) * _2583))) * _2583;
    float _4639 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2618 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
    float _2628 = (((_2605 * cbLight._m0[_2557].x) * _2618) * _2252) + ((((cbLight._m0[_2476].x * _2218) * _2529) * _2543) * _2265);
    float _2629 = (((_2605 * cbLight._m0[_2557].y) * _2618) * _2252) + ((((cbLight._m0[_2476].y * _2220) * _2529) * _2543) * _2265);
    float _2630 = (((_2605 * cbLight._m0[_2557].z) * _2618) * _2252) + ((((cbLight._m0[_2476].z * _2222) * _2529) * _2543) * _2265);
    float _2686;
    float _2688;
    float _2690;
    if (_2305)
    {
        _2686 = _2628;
        _2688 = _2629;
        _2690 = _2630;
    }
    else
    {
        uint _2692 = _2229 + 2u;
        uint _2696 = _2229 + 10u;
        float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2692].w)) * _785) * 0.949999988079071044921875);
        float _2711 = _2710 * _2710;
        float _2712 = cbLight._m0[_2692].x + _861;
        float _2713 = cbLight._m0[_2692].y + _862;
        float _2714 = cbLight._m0[_2692].z + _863;
        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
        float _2719 = _2718 * _2712;
        float _2720 = _2718 * _2713;
        float _2721 = _2718 * _2714;
        float _2722 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2692].xyz));
        float _4650 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2726 = dot(vec3(_782, _783, _784), vec3(_2719, _2720, _2721));
        float _4661 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2730 = dot(vec3(cbLight._m0[_2692].xyz), vec3(_2719, _2720, _2721));
        float _4672 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2734 = _2711 * _2711;
        float _2738 = ((_2729 * _2729) * (_2734 + (-1.0))) + 1.0;
        float _2747 = (exp2(log2(1.0 - (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2748 = 1.0 - _2711;
        float _2758 = (0.5 / (((_2505 * ((_2725 * _2748) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2748) + _2711) * _2725))) * _2725;
        float _4683 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2760 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * (_2734 / ((_2738 * _2738) * 3.141590118408203125));
        float _2761 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2686 = (((_2747 * cbLight._m0[_2696].x) * _2760) * _2761) + _2628;
        _2688 = (((_2747 * cbLight._m0[_2696].y) * _2760) * _2761) + _2629;
        _2690 = (((_2747 * cbLight._m0[_2696].z) * _2760) * _2761) + _2630;
    }
    float _2792;
    float _2794;
    float _2796;
    if (_2414)
    {
        _2792 = _2686;
        _2794 = _2688;
        _2796 = _2690;
    }
    else
    {
        uint _2803 = _2229 + 3u;
        uint _2807 = _2229 + 11u;
        float _2821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2803].w)) * _785) * 0.949999988079071044921875);
        float _2822 = _2821 * _2821;
        float _2823 = cbLight._m0[_2803].x + _861;
        float _2824 = cbLight._m0[_2803].y + _862;
        float _2825 = cbLight._m0[_2803].z + _863;
        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
        float _2830 = _2829 * _2823;
        float _2831 = _2829 * _2824;
        float _2832 = _2829 * _2825;
        float _2833 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2803].xyz));
        float _4699 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2837 = dot(vec3(_782, _783, _784), vec3(_2830, _2831, _2832));
        float _4710 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2841 = dot(vec3(cbLight._m0[_2803].xyz), vec3(_2830, _2831, _2832));
        float _4721 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2845 = _2822 * _2822;
        float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
        float _2858 = (exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2859 = 1.0 - _2822;
        float _2869 = (0.5 / (((_2505 * ((_2836 * _2859) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2859) + _2822) * _2836))) * _2836;
        float _4732 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2871 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
        float _2872 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
        _2792 = (((_2858 * cbLight._m0[_2807].x) * _2871) * _2872) + _2686;
        _2794 = (((_2858 * cbLight._m0[_2807].y) * _2871) * _2872) + _2688;
        _2796 = (((_2858 * cbLight._m0[_2807].z) * _2871) * _2872) + _2690;
    }
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_2227.y == 0u)
    {
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.x;
        uint _2905 = uint((float(_2893.y) * floor(float(uint(cbSceneParam._m0[85u].y * _870) / _2894))) + floor(float(uint(cbSceneParam._m0[85u].x * _869) / _2894)));
        float _2915 = (log2(_2005 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2916 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        uint _2919 = uint(isnan(14.0) ? _2916 : (isnan(_2916) ? 14.0 : min(_2916, 14.0)));
        uvec4 _2924 = texelFetch(g_lightClusterGridBuffer, int(((_2919 << 2u) + (_2905 << 6u)) >> 2u));
        uint _2925 = _2924.x;
        uint _2926 = _2893.z;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        float _3015;
        if (((((1u << ((_2926 >> 4u) & 15u)) + 4294967295u) & _2925) == 0u) || ((_2926 & 240u) == 0u))
        {
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
            _3015 = 0.0;
        }
        else
        {
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3016;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            uint _3155 = 0u;
            uint _3164;
            bool _3165;
            for (;;)
            {
                _3164 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                _3165 = _3164 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3165)
                {
                    frontier_phi_66_pred = _3154;
                    frontier_phi_66_pred_1 = _3153;
                    frontier_phi_66_pred_2 = _3152;
                    frontier_phi_66_pred_3 = _3151;
                    frontier_phi_66_pred_4 = _3150;
                    frontier_phi_66_pred_5 = _3149;
                }
                else
                {
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    uint _3279;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3152;
                    _3277 = _3153;
                    _3278 = _3154;
                    _3279 = _3164;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    for (;;)
                    {
                        uint _3283 = uint(findLSB(_3279)) + (_3155 << 5u);
                        uint _3280 = (_3279 + 4294967295u) & _3279;
                        uint _3285 = _3283 * 48u;
                        vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 3u)).x));
                        uint _3305 = (_3283 * 48u) + 4u;
                        vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3305)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 3u)).x));
                        uint _3324 = (_3283 * 48u) + 8u;
                        vec3 _3335 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3324)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 2u)).x));
                        float _3339 = _3299.x - _2003;
                        float _3340 = _3299.y - _2004;
                        float _3341 = _3299.z - _2005;
                        float _3342 = dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341));
                        float _3345 = inversesqrt(_3342);
                        float _3346 = _3345 * _3339;
                        float _3347 = _3345 * _3340;
                        float _3348 = _3345 * _3341;
                        float _3349 = dot(vec3(_888, _891, _894), vec3(_3346, _3347, _3348));
                        float _3354 = 1.0 - (_3342 * _3299.w);
                        float _4758 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3356 = sqrt(_3342) * _3318.w;
                        float _3359 = 1.39999997615814208984375 / (_3356 + 1.39999997615814208984375);
                        float _3360 = _3359 * _3359;
                        float _3363 = ((1.0 - _3360) * _3349) + _3360;
                        float _3366 = _3356 * _3356;
                        float _3370 = ((isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0))) * _3355) / ((_3366 * 0.699999988079071044921875) + 1.0);
                        float _3374 = (-0.0) - _2003;
                        float _3375 = (-0.0) - _2004;
                        float _3376 = (-0.0) - _2005;
                        float _3380 = inversesqrt(dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376)));
                        float _3381 = _3380 * _3374;
                        float _3382 = _3380 * _3375;
                        float _3383 = _3380 * _3376;
                        float _3390 = exp2(log2(1.0 / ((_3366 * 3.5) + 5.0)) * 0.25);
                        float _3391 = 1.0 - _948;
                        float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                        float _3399 = _3398 * _3398;
                        float _3400 = _3399 * _3399;
                        float _3401 = _3381 + _3346;
                        float _3402 = _3382 + _3347;
                        float _3403 = _3383 + _3348;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3411 = dot(vec3(_888, _891, _894), vec3(_3381, _3382, _3383));
                        float _4774 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3415 = dot(vec3(_888, _891, _894), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                        float _4785 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                        float _3423 = _3359 * _3399;
                        float _3424 = _3423 * _3423;
                        float _3427 = ((1.0 - _3424) * _3349) + _3424;
                        float _4796 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3429 = 1.0 - _3399;
                        float _3439 = (0.5 / (((_3428 * ((_3414 * _3429) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3399) * _3414))) * _3428;
                        float _4807 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3450 = (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) / ((_3422 * _3422) * ((_3366 * 2.1991131305694580078125) + 3.141590118408203125))) * _3355;
                        _3208 = (_3370 * _3318.x) + _3276;
                        _3209 = (_3370 * _3318.y) + _3277;
                        _3210 = (_3370 * _3318.z) + _3278;
                        _3205 = (_3450 * _3335.x) + _3273;
                        _3206 = (_3450 * _3335.y) + _3274;
                        _3207 = (_3450 * _3335.z) + _3275;
                        if (_3280 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3208;
                            _3277 = _3209;
                            _3278 = _3210;
                            _3279 = _3280;
                        }
                    }
                    frontier_phi_66_pred = _3210;
                    frontier_phi_66_pred_1 = _3209;
                    frontier_phi_66_pred_2 = _3208;
                    frontier_phi_66_pred_3 = _3207;
                    frontier_phi_66_pred_4 = _3206;
                    frontier_phi_66_pred_5 = _3205;
                }
                _3016 = frontier_phi_66_pred;
                _3014 = frontier_phi_66_pred_1;
                _3012 = frontier_phi_66_pred_2;
                _3010 = frontier_phi_66_pred_3;
                _3008 = frontier_phi_66_pred_4;
                _3006 = frontier_phi_66_pred_5;
                uint _3156 = _3155 + 1u;
                if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3149 = _3006;
                    _3150 = _3008;
                    _3151 = _3010;
                    _3152 = _3012;
                    _3153 = _3014;
                    _3154 = _3016;
                    _3155 = _3156;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
            _3015 = _3016;
        }
        uvec4 _3019 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3020 = _3019.z;
        uint _3022 = (_3020 >> 8u) & 15u;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        if (((4294967295u << _3022) & _2925) == 0u)
        {
            _3117 = _3005;
            _3119 = _3007;
            _3121 = _3009;
            _3123 = _3011;
            _3125 = _3013;
            _3127 = _3015;
        }
        else
        {
            float _3142 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
            float _3143 = _3142 * _2003;
            float _3144 = _3142 * _2004;
            float _3145 = _3142 * _2005;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3022 < ((_3020 >> 12u) & 15u))
            {
                float _3118;
                float _3120;
                float _3122;
                float _3124;
                float _3126;
                float _3128;
                float _3256 = _3005;
                float _3257 = _3007;
                float _3258 = _3009;
                float _3259 = _3011;
                float _3260 = _3013;
                float _3261 = _3015;
                uint _3262 = _3022;
                uint _3271;
                bool _3272;
                for (;;)
                {
                    _3271 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3262 << 2u)) >> 2u)).x;
                    _3272 = _3271 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3272)
                    {
                        frontier_phi_72_pred = _3261;
                        frontier_phi_72_pred_1 = _3260;
                        frontier_phi_72_pred_2 = _3259;
                        frontier_phi_72_pred_3 = _3258;
                        frontier_phi_72_pred_4 = _3257;
                        frontier_phi_72_pred_5 = _3256;
                    }
                    else
                    {
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3468 = _3256;
                        float _3469 = _3257;
                        float _3470 = _3258;
                        float _3471 = _3259;
                        float _3472 = _3260;
                        float _3473 = _3261;
                        uint _3474 = _3271;
                        uint _3475;
                        vec4 _3500;
                        float _3501;
                        vec4 _3516;
                        vec3 _3528;
                        vec4 _3543;
                        vec4 _3558;
                        float _3604;
                        bool _3605;
                        for (;;)
                        {
                            uint _3485 = ((_3262 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3474));
                            _3475 = (_3474 + 4294967295u) & _3474;
                            uint _3487 = _3485 * 40u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            _3501 = _3500.w;
                            uint _3503 = (_3485 * 40u) + 4u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3518 = (_3485 * 40u) + 8u;
                            _3528 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x));
                            uint _3530 = (_3485 * 40u) + 16u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3485 * 40u) + 20u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3560 = (_3485 * 40u) + 24u;
                            vec4 _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3579 = (_3485 * 40u) + 28u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            _3604 = fma(_2005, _3592.z, fma(_2004, _3592.y, _3592.x * _2003)) + _3592.w;
                            _3605 = !((fma(_2005, _3573.z, fma(_2004, _3573.y, _3573.x * _2003)) + _3573.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3605)
                            {
                                float _3632 = _3500.x - _2003;
                                float _3633 = _3500.y - _2004;
                                float _3634 = _3500.z - _2005;
                                float _3635 = dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634));
                                float _3638 = inversesqrt(_3635);
                                float _3639 = _3638 * _3632;
                                float _3640 = _3638 * _3633;
                                float _3641 = _3638 * _3634;
                                float _3645 = 1.0 - (_3635 / (_3501 * _3501));
                                float _4818 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3650 = sqrt(_3635) * _3516.w;
                                float _3652 = 1.39999997615814208984375 / (_3650 + 1.39999997615814208984375);
                                float _3653 = _3652 * _3652;
                                float _3656 = ((1.0 - _3653) * dot(vec3(_3639, _3640, _3641), vec3(_888, _891, _894))) + _3653;
                                float _3659 = _3650 * _3650;
                                float _3663 = (fma(_2005, _3543.z, fma(_2004, _3543.y, _3543.x * _2003)) + _3543.w) / _3604;
                                float _3664 = (fma(_2005, _3558.z, fma(_2004, _3558.y, _3558.x * _2003)) + _3558.w) / _3604;
                                float _3668 = 1.0 - dot(vec2(_3663, _3664), vec2(_3663, _3664));
                                float _4834 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3670 = _3669 * (((isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0))) * _3646) / ((_3659 * 0.699999988079071044921875) + 1.0));
                                float _3682 = exp2(log2(1.0 / ((_3659 * 3.5) + 5.0)) * 0.25);
                                float _3683 = 1.0 - _948;
                                float _3690 = sqrt(1.0 - ((1.0 - (_3683 * _3683)) * (1.0 - (_3682 * _3682))));
                                float _3691 = _3690 * _3690;
                                float _3692 = _3691 * _3691;
                                float _3693 = _3639 - _3143;
                                float _3694 = _3640 - _3144;
                                float _3695 = _3641 - _3145;
                                float _3699 = inversesqrt(dot(vec3(_3693, _3694, _3695), vec3(_3693, _3694, _3695)));
                                float _3703 = dot(vec3(_888, _891, _894), vec3((-0.0) - _3143, (-0.0) - _3144, (-0.0) - _3145));
                                float _4845 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                                float _3706 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3707 = dot(vec3(_888, _891, _894), vec3(_3699 * _3693, _3699 * _3694, _3699 * _3695));
                                float _4856 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3710 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3714 = ((_3710 * _3710) * (_3692 + (-1.0))) + 1.0;
                                float _3715 = _3652 * _3691;
                                float _3716 = _3715 * _3715;
                                float _3722 = ((1.0 - _3716) * dot(vec3(_888, _891, _894), vec3(_3639, _3640, _3641))) + _3716;
                                float _4867 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3723 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3724 = 1.0 - _3691;
                                float _3734 = (0.5 / (((_3723 * ((_3706 * _3724) + _3691)) + 9.9999999392252902907785028219223e-09) + (((_3723 * _3724) + _3691) * _3706))) * _3723;
                                float _4878 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3744 = (_3669 * _3646) * (((_3692 * 3.1415927410125732421875) * (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) / ((_3714 * _3714) * ((_3659 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3670 * _3516.y;
                                frontier_phi_78_pred_1 = _3670 * _3516.x;
                                frontier_phi_78_pred_2 = _3744 * _3528.z;
                                frontier_phi_78_pred_3 = _3744 * _3528.y;
                                frontier_phi_78_pred_4 = _3744 * _3528.x;
                                frontier_phi_78_pred_5 = _3670 * _3516.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3752 = frontier_phi_78_pred;
                            _3751 = frontier_phi_78_pred_1;
                            _3750 = frontier_phi_78_pred_2;
                            _3749 = frontier_phi_78_pred_3;
                            _3748 = frontier_phi_78_pred_4;
                            _3753 = frontier_phi_78_pred_5;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            _3460 = _3753 + _3473;
                            _3455 = _3748 + _3468;
                            _3456 = _3749 + _3469;
                            _3457 = _3750 + _3470;
                            if (_3475 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3475;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3460;
                        frontier_phi_72_pred_1 = _3459;
                        frontier_phi_72_pred_2 = _3458;
                        frontier_phi_72_pred_3 = _3457;
                        frontier_phi_72_pred_4 = _3456;
                        frontier_phi_72_pred_5 = _3455;
                    }
                    _3128 = frontier_phi_72_pred;
                    _3126 = frontier_phi_72_pred_1;
                    _3124 = frontier_phi_72_pred_2;
                    _3122 = frontier_phi_72_pred_3;
                    _3120 = frontier_phi_72_pred_4;
                    _3118 = frontier_phi_72_pred_5;
                    uint _3263 = _3262 + 1u;
                    if (_3263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3256 = _3118;
                        _3257 = _3120;
                        _3258 = _3122;
                        _3259 = _3124;
                        _3260 = _3126;
                        _3261 = _3128;
                        _3262 = _3263;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3128;
                frontier_phi_60_61_ladder_1 = _3126;
                frontier_phi_60_61_ladder_2 = _3122;
                frontier_phi_60_61_ladder_3 = _3120;
                frontier_phi_60_61_ladder_4 = _3118;
                frontier_phi_60_61_ladder_5 = _3124;
            }
            else
            {
                frontier_phi_60_61_ladder = _3015;
                frontier_phi_60_61_ladder_1 = _3013;
                frontier_phi_60_61_ladder_2 = _3009;
                frontier_phi_60_61_ladder_3 = _3007;
                frontier_phi_60_61_ladder_4 = _3005;
                frontier_phi_60_61_ladder_5 = _3011;
            }
            _3117 = frontier_phi_60_61_ladder_4;
            _3119 = frontier_phi_60_61_ladder_3;
            _3121 = frontier_phi_60_61_ladder_2;
            _3123 = frontier_phi_60_61_ladder_5;
            _3125 = frontier_phi_60_61_ladder_1;
            _3127 = frontier_phi_60_61_ladder;
        }
        float _3132 = isnan(1.0) ? _932 : (isnan(_932) ? 1.0 : min(_932, 1.0));
        _2938 = (_3132 * _3123) + _2469;
        _2940 = (_3132 * _3125) + _2471;
        _2942 = (_3132 * _3127) + _2473;
        _2944 = ((_3117 * 0.039999999105930328369140625) * _3132) + _2792;
        _2946 = ((_3119 * 0.039999999105930328369140625) * _3132) + _2794;
        _2948 = ((_3121 * 0.039999999105930328369140625) * _3132) + _2796;
    }
    else
    {
        _2938 = _2469;
        _2940 = _2471;
        _2942 = _2473;
        _2944 = _2792;
        _2946 = _2794;
        _2948 = _2796;
    }
    float _4894 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4905 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4916 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    uint _2968 = _253 + 6u;
    float _2976 = _869 / cbSceneParam._m0[86u].x;
    float _2977 = _870 / cbSceneParam._m0[86u].y;
    vec4 _2991 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2976, _2977, (log2((isnan(cbSceneParam._m0[77u].w) ? _803 : (isnan(_803) ? cbSceneParam._m0[77u].w : min(_803, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2993 = _2991.x;
    float _2994 = _2991.y;
    float _2995 = _2991.z;
    float _2996 = _2991.w;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    if (_803 > cbSceneParam._m0[78u].w)
    {
        float _3030 = isnan(_803) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _803 : min(cbSceneParam._m0[80u].w, _803));
        float _3031 = _3030 / _803;
        float _3042 = _3031 * _854;
        float _3043 = _855 * _3031;
        float _3044 = (-0.0) - _3043;
        float _3045 = _3031 * _856;
        float _3047 = (cbSceneParam._m0[77u].w * _3044) / _3030;
        float _3048 = _3047 + cbSceneParam._m0[79u].w;
        float _3049 = cbSceneParam._m0[79u].w - _3043;
        float _3055 = sqrt(((_3042 * _3042) + (_3043 * _3043)) + (_3045 * _3045));
        float _3058 = (1.0 - (cbSceneParam._m0[77u].w / _3030)) * _3055;
        float _3063 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3065 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3218;
        if (abs((_3044 - _3047) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3218 = ((((_3048 > 0.0) ? exp2(_3063 * _3048) : (2.0 - exp2(_3065 * _3048))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3058;
        }
        else
        {
            float _3178 = 1.0 / cbSceneParam._m0[80u].x;
            float _3179 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : max(_3048, _3049));
            float _3180 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : min(_3048, _3049));
            float _3189 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : min(_3179, 0.0));
            float _3190 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : min(_3180, 0.0));
            _3218 = ((abs(_3055 / _3044) * cbSceneParam._m0[80u].y) * ((((_3189 - _3190) * 2.0) - ((exp2(_3063 * (isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0)))) - exp2(_3063 * (isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))))) * _3178)) - ((exp2(_3065 * _3189) - exp2(_3065 * _3190)) * _3178))) + (_3058 * cbSceneParam._m0[80u].z);
        }
        vec4 _3220 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2976, _2977, 1.0), 0.0);
        float _3229 = exp2((_3218 * (-1.44269502162933349609375)) * (1.0 - _3220.w));
        float _3230 = log2(_3229);
        float _3246 = log2(_2996);
        _3067 = (exp2(_3246 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].x)) * _3220.x) / cbSceneParam._m0[78u].x)) + _2993;
        _3069 = (exp2(_3246 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].y)) * _3220.y) / cbSceneParam._m0[78u].y)) + _2994;
        _3071 = (exp2(_3246 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].z)) * _3220.z) / cbSceneParam._m0[78u].z)) + _2995;
        _3073 = _3229 * _2996;
    }
    else
    {
        _3067 = _2993;
        _3069 = _2994;
        _3071 = _2995;
        _3073 = _2996;
    }
    float _3085 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3086 = _3085 == 3.0;
    float _3087 = log2(_3073);
    float _3094 = exp2(_3087 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2938 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _932))) + ((_2944 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1737)) * cbPerFrame._m0[3u].x));
    float _3095 = exp2(_3087 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0))) * (_2940 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _932))) + ((_2946 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1737)) * cbPerFrame._m0[3u].x));
    float _3096 = exp2(_3087 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2942 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _932))) + ((_2948 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1737)) * cbPerFrame._m0[3u].x));
    float _3105 = (_3085 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3105 * (_3086 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3067)));
    SV_Target.y = _3105 * (_3086 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3069)));
    SV_Target.z = _3105 * (_3086 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3071)));
    SV_Target.w = cbInstanceData._m0[_2968].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2968].w;
}


