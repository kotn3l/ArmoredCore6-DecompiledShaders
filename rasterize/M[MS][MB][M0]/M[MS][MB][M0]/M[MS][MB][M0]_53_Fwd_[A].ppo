#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1044;
float _3406;
float _3407;
float _3408;
float _3409;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _244) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _245) + cbTextureTilingScale._m0[14u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _315 = _311.z;
    float _320 = (_311.x * 2.0) + (-1.0);
    float _322 = (_311.y * 2.0) + (-1.0);
    float _323 = dot(vec2(_320, _322), vec2(_320, _322));
    float _3418 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _329 = sqrt(1.0 - (isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))));
    float _332 = fma(_329, _212, fma(_322, _219, _320 * _205));
    float _335 = fma(_329, _213, fma(_322, _220, _320 * _206));
    float _338 = fma(_329, _214, fma(_322, _221, _320 * _207));
    float _342 = inversesqrt(dot(vec3(_332, _335, _338), vec3(_332, _335, _338)));
    vec4 _378 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _380 = _378.x;
    float _381 = 1.0 - _380;
    float _388 = ((_380 - _381) * cbMtdParam._m0[24u].z) + _381;
    float _390 = (cbMtdParam._m0[19u].x + dot(vec4(_342 * _332, _342 * _335, _342 * _338, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_388 * cbMtdParam._m0[21u].z);
    float _3429 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _406 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_388 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3440 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _411 = ((_391 * ((_291.x * cbMtdParam._m0[18u].x) - _270)) * _407) + _270;
    float _412 = ((_391 * ((_291.y * cbMtdParam._m0[18u].y) - _271)) * _407) + _271;
    float _413 = ((_391 * ((_291.z * cbMtdParam._m0[18u].z) - _272)) * _407) + _272;
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _433 = (_426.x * 2.0) + (-1.0);
    float _434 = (_426.y * 2.0) + (-1.0);
    float _435 = dot(vec2(_433, _434), vec2(_433, _434));
    float _3451 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _444 = (((_426.z - _315) * _391) * _407) + _315;
    float _459 = (((cbMtdParam._m0[21u].x * _320) + ((_433 - _320) * _391)) * _407) + _320;
    float _460 = (((cbMtdParam._m0[21u].x * _322) + ((_434 - _322) * _391)) * _407) + _322;
    float _461 = (((sqrt(1.0 - (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) - _329) * _391) * _407) + _329;
    float _466 = cbMtdParam._m0[22u].x + _311.w;
    float _469 = fma(_461, _212, fma(_460, _219, _459 * _205));
    float _472 = fma(_461, _213, fma(_460, _220, _459 * _206));
    float _475 = fma(_461, _214, fma(_460, _221, _459 * _207));
    float _479 = inversesqrt(dot(vec3(_469, _472, _475), vec3(_469, _472, _475)));
    float _480 = _479 * _469;
    float _481 = _479 * _472;
    float _482 = _479 * _475;
    float _3462 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _483 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3484 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _3495 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _3506 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _501 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _552 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _542);
    float _553 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _542);
    float _554 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _542);
    float _558 = inversesqrt(dot(vec3(_552, _553, _554), vec3(_552, _553, _554)));
    float _559 = _552 * _558;
    float _560 = _553 * _558;
    float _561 = _554 * _558;
    vec4 _566 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _568 = _566.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _725 = sqrt(((_552 * _552) + (_553 * _553)) + (_554 * _554));
        float _731 = (cbMatDynParam._m0[5u].x * _725) + cbMatDynParam._m0[5u].y;
        float _3517 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _736 = (cbMatDynParam._m0[5u].z * _725) + cbMatDynParam._m0[5u].w;
        float _3528 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) - _732)) + _732) < ((_568 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _580 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _581 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _601 = fma(_482, cbSceneParam._m0[5u].z, fma(_481, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _480));
    float _604 = fma(_482, cbSceneParam._m0[6u].z, fma(_481, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _480));
    float _607 = fma(_482, cbSceneParam._m0[7u].z, fma(_481, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _480));
    uint _620 = _224 + 9u;
    uint _621 = _620 + uint(cbMatDynParam._m0[0u].w);
    float _627 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * cbInstanceData._m0[_621].x;
    float _628 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_621].y;
    float _629 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) * cbInstanceData._m0[_621].z;
    float _3539 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    vec4 _641 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _580, cbSceneParam._m0[86u].y * _581));
    float _645 = ((isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * TEXCOORD_5.w) * _641.x;
    float _646 = dot(vec3(_480, _481, _482), vec3(_559, _560, _561));
    float _649 = _646 * 2.0;
    float _653 = (_649 * _480) - _559;
    float _654 = (_649 * _481) - _560;
    float _655 = (_649 * _482) - _561;
    float _659 = abs(dot(vec3(_559, _560, _561), vec3(_480, _481, _482)));
    float _3572 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _661 = sqrt(_483);
    float _674 = exp2((_661 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_661 * 3.0));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1043;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _768 = fma(_714, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _706));
        float _772 = fma(_714, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _706));
        float _776 = fma(_714, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _706));
        float _801 = _706 + _480;
        float _802 = _710 + _481;
        float _803 = _714 + _482;
        float _813 = fma(_803, cbModelParam._m0[26u].z, fma(_802, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _801)) - _768;
        float _814 = fma(_803, cbModelParam._m0[27u].z, fma(_802, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _801)) - _772;
        float _815 = fma(_803, cbModelParam._m0[28u].z, fma(_802, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _801)) - _776;
        float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
        float _832 = ((_819 * _813) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_768 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_819 * _814) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_772 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_819 * _815) / cbModelParam._m0[34u].z) + ((((((_776 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        float _871 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_837.x + (-0.5));
        float _873 = _871 * (_837.y + (-0.5));
        float _874 = _871 * (_837.z + (-0.5));
        float _881 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_844.x + (-0.5));
        float _883 = _881 * (_844.y + (-0.5));
        float _884 = _881 * (_844.z + (-0.5));
        float _891 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_851.x + (-0.5));
        float _893 = _891 * (_851.y + (-0.5));
        float _894 = _891 * (_851.z + (-0.5));
        float _901 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_858.x + (-0.5));
        float _903 = _901 * (_858.y + (-0.5));
        float _904 = _901 * (_858.z + (-0.5));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = _872 * 0.5;
        float _909 = _882 * 0.5;
        float _910 = _892 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _925 = (dot(vec3(_480, _481, _482), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _935 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3620 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_937 + 1.0))) + _942) * _905;
        float _952 = _873 * 0.5;
        float _953 = _883 * 0.5;
        float _954 = _893 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_480, _481, _482), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3653 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_979 + 1.0))) + _984) * _906;
        float _994 = _874 * 0.5;
        float _995 = _884 * 0.5;
        float _996 = _894 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_480, _481, _482), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3686 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1021 + 1.0))) + _1026) * _907;
        _1043 = _874;
        _1045 = _873;
        _1046 = _872;
        _1047 = _884;
        _1048 = _883;
        _1049 = _882;
        _1050 = _894;
        _1051 = _893;
        _1052 = _892;
        _1053 = _907;
        _1054 = _906;
        _1055 = _905;
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
    }
    else
    {
        _1043 = _1044;
        _1045 = _1044;
        _1046 = _1044;
        _1047 = _1044;
        _1048 = _1044;
        _1049 = _1044;
        _1050 = _1044;
        _1051 = _1044;
        _1052 = _1044;
        _1053 = _1044;
        _1054 = _1044;
        _1055 = _1044;
        _1056 = 0.0;
        _1057 = 0.0;
        _1058 = 0.0;
    }
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1086 = fma(_714, cbModelParam._m0[30u].z, fma(_710, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _706));
        float _1090 = fma(_714, cbModelParam._m0[31u].z, fma(_710, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _706));
        float _1094 = fma(_714, cbModelParam._m0[32u].z, fma(_710, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _706));
        float _1117 = _706 + _480;
        float _1118 = _710 + _481;
        float _1119 = _714 + _482;
        float _1129 = fma(_1119, cbModelParam._m0[30u].z, fma(_1118, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1117)) - _1086;
        float _1130 = fma(_1119, cbModelParam._m0[31u].z, fma(_1118, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1117)) - _1090;
        float _1131 = fma(_1119, cbModelParam._m0[32u].z, fma(_1118, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1117)) - _1094;
        float _1135 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
        float _1148 = ((_1135 * _1129) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1086 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1135 * _1130) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1090 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1135 * _1131) / cbModelParam._m0[35u].z) + ((((((_1094 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1148, _1149, _1150), 0.0);
        float _1185 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1152.x + (-0.5));
        float _1187 = _1185 * (_1152.y + (-0.5));
        float _1188 = _1185 * (_1152.z + (-0.5));
        float _1195 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1159.x + (-0.5));
        float _1197 = _1195 * (_1159.y + (-0.5));
        float _1198 = _1195 * (_1159.z + (-0.5));
        float _1205 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1166.x + (-0.5));
        float _1207 = _1205 * (_1166.y + (-0.5));
        float _1208 = _1205 * (_1166.z + (-0.5));
        float _1215 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1173.x + (-0.5));
        float _1217 = _1215 * (_1173.y + (-0.5));
        float _1218 = _1215 * (_1173.z + (-0.5));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = _1186 * 0.5;
        float _1223 = _1196 * 0.5;
        float _1224 = _1206 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_480, _481, _482), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3749 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1249 + 1.0))) + _1254) * _1219;
        float _1264 = _1187 * 0.5;
        float _1265 = _1197 * 0.5;
        float _1266 = _1207 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_480, _481, _482), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _3782 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1291 + 1.0))) + _1296) * _1220;
        float _1306 = _1188 * 0.5;
        float _1307 = _1198 * 0.5;
        float _1308 = _1208 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_480, _481, _482), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3815 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1333 + 1.0))) + _1338) * _1221;
        _1355 = _1188;
        _1356 = _1187;
        _1357 = _1186;
        _1358 = _1198;
        _1359 = _1197;
        _1360 = _1196;
        _1361 = _1208;
        _1362 = _1207;
        _1363 = _1206;
        _1364 = _1221;
        _1365 = _1220;
        _1366 = _1219;
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
    }
    else
    {
        _1355 = _1044;
        _1356 = _1044;
        _1357 = _1044;
        _1358 = _1044;
        _1359 = _1044;
        _1360 = _1044;
        _1361 = _1044;
        _1362 = _1044;
        _1363 = _1044;
        _1364 = _1044;
        _1365 = _1044;
        _1366 = _1044;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1056)) + _1056;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1057)) + _1057;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1058)) + _1058;
    float _1402 = fma(_1381, cbSceneParam._m0[89u].z, fma(_1380, cbSceneParam._m0[89u].y, _1379 * cbSceneParam._m0[89u].x));
    float _1405 = fma(_1381, cbSceneParam._m0[90u].z, fma(_1380, cbSceneParam._m0[90u].y, _1379 * cbSceneParam._m0[90u].x));
    float _1408 = fma(_1381, cbSceneParam._m0[91u].z, fma(_1380, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1379));
    float _1423 = _653 * 0.5;
    float _1424 = _654 * 0.5;
    float _1425 = _655 * 0.5;
    float _1426 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1429 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1432 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1466;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1439 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1043, _1047, _1050, _1053));
        float _1443 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1447 = dot(vec4(_1423, _1424, _1425, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1454 = dot(vec4(cbModelParam._m0[39u]), vec4(_1423, _1424, _1425, 1.0));
        _1466 = dot(vec3(isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1466 = 1.0;
    }
    float _1477;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1468 = dot(vec4(cbModelParam._m0[40u]), vec4(_1423, _1424, _1425, 1.0));
        _1477 = dot(vec3(isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1468) ? 0.0 : (isnan(0.0) ? _1468 : max(0.0, _1468))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1477 = 1.0;
    }
    float _1481 = (_1477 * cbModelParam._m0[1u].x) + (_1466 * (1.0 - cbModelParam._m0[1u].x));
    float _1491 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _483);
    float _1492 = isnan(_1491) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1491 : min(cbModelParam._m0[25u].z, _1491));
    float _1572;
    float _1574;
    float _1576;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1539 = fma(_714, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706)) + cbModelParam._m0[13u].w;
        float _1543 = fma(_714, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706)) + cbModelParam._m0[14u].w;
        float _1547 = fma(_714, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706)) + cbModelParam._m0[15u].w;
        float _1550 = fma(_655, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653));
        float _1553 = fma(_655, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653));
        float _1556 = fma(_655, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653));
        float _1584;
        if (_1550 > 0.0)
        {
            _1584 = abs((1.0 - _1539) / _1550);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1539 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1584 = frontier_phi_17_15_ladder;
        }
        float _1786;
        if (_1553 > 0.0)
        {
            _1786 = abs((1.0 - _1543) / _1553);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1543 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1786 = frontier_phi_26_22_ladder;
        }
        float _2029;
        if (_1556 > 0.0)
        {
            _2029 = abs((1.0 - _1547) / _1556);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1547 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2029 = frontier_phi_38_33_ladder;
        }
        float _2031 = isnan(_1786) ? _1584 : (isnan(_1584) ? _1786 : min(_1584, _1786));
        float _2032 = isnan(_2029) ? _2031 : (isnan(_2031) ? _2029 : min(_2031, _2029));
        float _2036 = (_2032 * _1550) + _1539;
        float _2037 = (_2032 * _1553) + _1543;
        float _2038 = (_2032 * _1556) + _1547;
        float _2039 = _2032 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2039;
        float _2043 = _2039 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 > _2043) || ((_2037 < _2041) || ((_2036 < _2041) || (_2036 > _2043))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2162 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2038, cbModelParam._m0[9u].z, fma(_2037, cbModelParam._m0[9u].y, _2036 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2038, cbModelParam._m0[10u].z, fma(_2037, cbModelParam._m0[10u].y, _2036 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2038, cbModelParam._m0[11u].z, fma(_2037, cbModelParam._m0[11u].y, _2036 * cbModelParam._m0[11u].x))), _1492);
            frontier_phi_16_38_ladder = _2162.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2162.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2162.x * cbModelParam._m0[1u].y;
        }
        _1572 = frontier_phi_16_38_ladder_2;
        _1574 = frontier_phi_16_38_ladder_1;
        _1576 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1560 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_653, _654, _655), _1492);
        _1572 = _1560.x * cbModelParam._m0[1u].y;
        _1574 = _1560.y * cbModelParam._m0[1u].y;
        _1576 = _1560.z * cbModelParam._m0[1u].y;
    }
    float _1580 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _483);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1580 : min(cbModelParam._m0[25u].w, _1580));
    float _1670;
    float _1672;
    float _1674;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1634 = fma(_714, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706)) + cbModelParam._m0[21u].w;
        float _1638 = fma(_714, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706)) + cbModelParam._m0[22u].w;
        float _1642 = fma(_714, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706)) + cbModelParam._m0[23u].w;
        float _1645 = fma(_655, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653));
        float _1648 = fma(_655, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653));
        float _1651 = fma(_655, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653));
        float _1791;
        if (_1645 > 0.0)
        {
            _1791 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1791 = frontier_phi_28_24_ladder;
        }
        float _2056;
        if (_1648 > 0.0)
        {
            _2056 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2056 = frontier_phi_40_35_ladder;
        }
        float _2261;
        if (_1651 > 0.0)
        {
            _2261 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2261 = frontier_phi_49_46_ladder;
        }
        float _2263 = isnan(_2056) ? _1791 : (isnan(_1791) ? _2056 : min(_1791, _2056));
        float _2264 = isnan(_2261) ? _2263 : (isnan(_2263) ? _2261 : min(_2263, _2261));
        float _2268 = (_2264 * _1645) + _1634;
        float _2269 = (_2264 * _1648) + _1638;
        float _2270 = (_2264 * _1651) + _1642;
        float _2271 = _2264 * 9.9999997473787516355514526367188e-05;
        float _2272 = (-1.0) - _2271;
        float _2274 = _2271 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2270 > _2274) || ((_2270 < _2272) || ((_2269 > _2274) || ((_2269 < _2272) || ((_2268 < _2272) || (_2268 > _2274))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2469 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2270, cbModelParam._m0[17u].z, fma(_2269, cbModelParam._m0[17u].y, _2268 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2270, cbModelParam._m0[18u].z, fma(_2269, cbModelParam._m0[18u].y, _2268 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2270, cbModelParam._m0[19u].z, fma(_2269, cbModelParam._m0[19u].y, _2268 * cbModelParam._m0[19u].x))), _1581);
            frontier_phi_25_49_ladder = _2469.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2469.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2469.x * cbModelParam._m0[1u].z;
        }
        _1670 = frontier_phi_25_49_ladder_2;
        _1672 = frontier_phi_25_49_ladder_1;
        _1674 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_653, _654, _655), _1581);
        _1670 = _1654.x * cbModelParam._m0[1u].z;
        _1672 = _1654.y * cbModelParam._m0[1u].z;
        _1674 = _1654.z * cbModelParam._m0[1u].z;
    }
    float _1686 = ((((1.0 - _674) * ((_661 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_674 * _661)) * _645;
    float _1687 = _1686 * ((cbModelParam._m0[1u].w * (_1670 - _1572)) + _1572);
    float _1688 = _1686 * ((cbModelParam._m0[1u].w * (_1672 - _1574)) + _1574);
    float _1689 = _1686 * ((cbModelParam._m0[1u].w * (_1674 - _1576)) + _1576);
    float _1692 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, _1687 * cbSceneParam._m0[91u].x));
    uvec4 _1708 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1710 = _1708.x * 14u;
    uint _1711 = _1710 + 13u;
    float _1718 = _645 + (-1.0);
    float _1723 = (cbLight._m0[_1711].x * _1718) + 1.0;
    float _1724 = (cbLight._m0[_1711].y * _1718) + 1.0;
    float _1725 = (cbLight._m0[_1711].z * _1718) + 1.0;
    float _1726 = (cbLight._m0[_1711].w * _1718) + 1.0;
    uint _1727 = _1710 + 5u;
    float _1733 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1737 = _1710 + 4u;
    float _1744 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1748 = _1710 | 1u;
    float _1759 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_480, _481, _482));
    float _1762 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_480, _481, _482));
    float _3951 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _3962 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1767 = (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) * 0.3183098733425140380859375;
    float _1769 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.3183098733425140380859375;
    float _1776 = ((cbLight._m0[_1727].x * _1733) * _1769) + ((cbLight._m0[_1737].x * _1744) * _1767);
    float _1777 = ((_1733 * cbLight._m0[_1727].y) * _1769) + ((_1744 * cbLight._m0[_1737].y) * _1767);
    float _1778 = ((_1733 * cbLight._m0[_1727].z) * _1769) + ((_1744 * cbLight._m0[_1737].z) * _1767);
    uvec4 _1783 = floatBitsToUint(cbLight._m0[_1710 + 12u]);
    bool _1785 = _1783.x == 0u;
    float _1796;
    float _1798;
    float _1800;
    if (_1785)
    {
        _1796 = _1776;
        _1798 = _1777;
        _1800 = _1778;
    }
    else
    {
        uint _1804 = _1710 + 6u;
        float _1820 = (dot(vec3(cbLight._m0[_1710 + 2u].xyz), vec3(_480, _481, _482)) * 0.5) + 0.5;
        float _1821 = _1820 * _1820;
        float _3973 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1823 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _1796 = (((cbLight._m0[_1804].x * 0.3183098733425140380859375) * _1822) * _1823) + _1776;
        _1798 = (((cbLight._m0[_1804].y * 0.3183098733425140380859375) * _1822) * _1823) + _1777;
        _1800 = (((cbLight._m0[_1804].z * 0.3183098733425140380859375) * _1822) * _1823) + _1778;
    }
    bool _1803 = _1783.y == 0u;
    float _1841;
    float _1843;
    float _1845;
    if (_1803)
    {
        _1841 = _1796;
        _1843 = _1798;
        _1845 = _1800;
    }
    else
    {
        uint _2000 = _1710 + 7u;
        float _2016 = (dot(vec3(cbLight._m0[_1710 + 3u].xyz), vec3(_480, _481, _482)) * 0.5) + 0.5;
        float _2017 = _2016 * _2016;
        float _3989 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2018 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _2019 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _1841 = (((cbLight._m0[_2000].x * 0.3183098733425140380859375) * _2018) * _2019) + _1796;
        _1843 = (((cbLight._m0[_2000].y * 0.3183098733425140380859375) * _2018) * _2019) + _1798;
        _1845 = (((cbLight._m0[_2000].z * 0.3183098733425140380859375) * _2018) * _2019) + _1800;
    }
    uint _1848 = _1710 + 8u;
    float _1861 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1710].w)) * _483) * 0.949999988079071044921875);
    float _1862 = _1861 * _1861;
    float _1863 = cbLight._m0[_1710].x + _559;
    float _1864 = cbLight._m0[_1710].y + _560;
    float _1865 = cbLight._m0[_1710].z + _561;
    float _1869 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
    float _1870 = _1869 * _1863;
    float _1871 = _1869 * _1864;
    float _1872 = _1869 * _1865;
    float _1873 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_1710].xyz));
    float _4005 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1876 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _1877 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _1878 = dot(vec3(_480, _481, _482), vec3(_1870, _1871, _1872));
    float _4027 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1881 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1882 = dot(vec3(cbLight._m0[_1710].xyz), vec3(_1870, _1871, _1872));
    float _4038 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1886 = _1862 * _1862;
    float _1890 = ((_1881 * _1881) * (_1886 + (-1.0))) + 1.0;
    float _1901 = (exp2(log2(1.0 - (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1902 = 1.0 - _1862;
    float _1913 = (0.5 / (((_1877 * ((_1876 * _1902) + _1862)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1902) + _1862) * _1876))) * _1876;
    float _4049 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1915 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1886 / ((_1890 * _1890) * 3.141590118408203125));
    uint _1926 = _1710 + 9u;
    float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1748].w)) * _483) * 0.949999988079071044921875);
    float _1938 = _1937 * _1937;
    float _1939 = cbLight._m0[_1748].x + _559;
    float _1940 = cbLight._m0[_1748].y + _560;
    float _1941 = cbLight._m0[_1748].z + _561;
    float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
    float _1946 = _1945 * _1939;
    float _1947 = _1945 * _1940;
    float _1948 = _1945 * _1941;
    float _1949 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_1748].xyz));
    float _4060 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _1953 = dot(vec3(_480, _481, _482), vec3(_1946, _1947, _1948));
    float _4071 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1946, _1947, _1948));
    float _4082 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1938 * _1938;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1974 = (exp2(log2(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1975 = 1.0 - _1938;
    float _1985 = (0.5 / (((_1877 * ((_1952 * _1975) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _1975) + _1938) * _1952))) * _1952;
    float _4093 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1987 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    float _1997 = (((_1974 * cbLight._m0[_1926].x) * _1987) * _1733) + (((_1901 * cbLight._m0[_1848].x) * _1915) * _1744);
    float _1998 = (((_1974 * cbLight._m0[_1926].y) * _1987) * _1733) + (((_1901 * cbLight._m0[_1848].y) * _1915) * _1744);
    float _1999 = (((_1974 * cbLight._m0[_1926].z) * _1987) * _1733) + (((_1901 * cbLight._m0[_1848].z) * _1915) * _1744);
    float _2061;
    float _2063;
    float _2065;
    if (_1785)
    {
        _2061 = _1997;
        _2063 = _1998;
        _2065 = _1999;
    }
    else
    {
        uint _2067 = _1710 + 2u;
        uint _2071 = _1710 + 10u;
        float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _483) * 0.949999988079071044921875);
        float _2086 = _2085 * _2085;
        float _2087 = cbLight._m0[_2067].x + _559;
        float _2088 = cbLight._m0[_2067].y + _560;
        float _2089 = cbLight._m0[_2067].z + _561;
        float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
        float _2094 = _2093 * _2087;
        float _2095 = _2093 * _2088;
        float _2096 = _2093 * _2089;
        float _2097 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2067].xyz));
        float _4104 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _2101 = dot(vec3(_480, _481, _482), vec3(_2094, _2095, _2096));
        float _4115 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2104 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2105 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2094, _2095, _2096));
        float _4126 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2109 = _2086 * _2086;
        float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
        float _2122 = (exp2(log2(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2123 = 1.0 - _2086;
        float _2133 = (0.5 / (((_1877 * ((_2100 * _2123) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _2123) + _2086) * _2100))) * _2100;
        float _4137 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2135 = (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
        float _2136 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _2061 = (((_2122 * cbLight._m0[_2071].x) * _2135) * _2136) + _1997;
        _2063 = (((_2122 * cbLight._m0[_2071].y) * _2135) * _2136) + _1998;
        _2065 = (((_2122 * cbLight._m0[_2071].z) * _2135) * _2136) + _1999;
    }
    float _2171;
    float _2173;
    float _2175;
    if (_1803)
    {
        _2171 = _2061;
        _2173 = _2063;
        _2175 = _2065;
    }
    else
    {
        uint _2182 = _1710 + 3u;
        uint _2186 = _1710 + 11u;
        float _2200 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _483) * 0.949999988079071044921875);
        float _2201 = _2200 * _2200;
        float _2202 = cbLight._m0[_2182].x + _559;
        float _2203 = cbLight._m0[_2182].y + _560;
        float _2204 = cbLight._m0[_2182].z + _561;
        float _2208 = inversesqrt(dot(vec3(_2202, _2203, _2204), vec3(_2202, _2203, _2204)));
        float _2209 = _2208 * _2202;
        float _2210 = _2208 * _2203;
        float _2211 = _2208 * _2204;
        float _2212 = dot(vec3(_480, _481, _482), vec3(cbLight._m0[_2182].xyz));
        float _4153 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2215 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2216 = dot(vec3(_480, _481, _482), vec3(_2209, _2210, _2211));
        float _4164 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2219 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2220 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2209, _2210, _2211));
        float _4175 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2224 = _2201 * _2201;
        float _2228 = ((_2219 * _2219) * (_2224 + (-1.0))) + 1.0;
        float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2238 = 1.0 - _2201;
        float _2248 = (0.5 / (((_1877 * ((_2215 * _2238) + _2201)) + 9.9999999392252902907785028219223e-09) + (((_1877 * _2238) + _2201) * _2215))) * _2215;
        float _4186 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2250 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2224 / ((_2228 * _2228) * 3.141590118408203125));
        float _2251 = isnan(1.0) ? _1726 : (isnan(_1726) ? 1.0 : min(_1726, 1.0));
        _2171 = (((_2237 * cbLight._m0[_2186].x) * _2250) * _2251) + _2061;
        _2173 = (((_2237 * cbLight._m0[_2186].y) * _2250) * _2251) + _2063;
        _2175 = (((_2237 * cbLight._m0[_2186].z) * _2250) * _2251) + _2065;
    }
    float _2386;
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    if (_1708.y == 0u)
    {
        float _2326 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2327 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2326;
        float _2328 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2326;
        float _2329 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2326;
        uvec4 _2341 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2342 = _2341.x;
        uint _2353 = uint((float(_2341.y) * floor(float(uint(cbSceneParam._m0[85u].y * _581) / _2342))) + floor(float(uint(cbSceneParam._m0[85u].x * _580) / _2342)));
        float _2363 = (log2(_2329 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2364 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        uint _2367 = uint(isnan(14.0) ? _2364 : (isnan(_2364) ? 14.0 : min(_2364, 14.0)));
        uvec4 _2372 = texelFetch(g_lightClusterGridBuffer, int(((_2367 << 2u) + (_2353 << 6u)) >> 2u));
        uint _2373 = _2372.x;
        uint _2374 = _2341.z;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        if (((((1u << ((_2374 >> 4u) & 15u)) + 4294967295u) & _2373) == 0u) || ((_2374 & 240u) == 0u))
        {
            _2474 = 0.0;
            _2476 = 0.0;
            _2478 = 0.0;
            _2480 = 0.0;
            _2482 = 0.0;
            _2484 = 0.0;
        }
        else
        {
            float _2475;
            float _2477;
            float _2479;
            float _2481;
            float _2483;
            float _2485;
            float _2627 = 0.0;
            float _2628 = 0.0;
            float _2629 = 0.0;
            float _2630 = 0.0;
            float _2631 = 0.0;
            float _2632 = 0.0;
            uint _2633 = 0u;
            uint _2642;
            bool _2643;
            for (;;)
            {
                _2642 = texelFetch(g_lightClassification, int((((_2367 << 5u) + (_2353 << 9u)) + (_2633 << 2u)) >> 2u)).x;
                _2643 = _2642 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2643)
                {
                    frontier_phi_66_pred = _2627;
                    frontier_phi_66_pred_1 = _2632;
                    frontier_phi_66_pred_2 = _2631;
                    frontier_phi_66_pred_3 = _2630;
                    frontier_phi_66_pred_4 = _2629;
                    frontier_phi_66_pred_5 = _2628;
                }
                else
                {
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    uint _2778;
                    _2772 = _2627;
                    _2773 = _2628;
                    _2774 = _2629;
                    _2775 = _2630;
                    _2776 = _2631;
                    _2777 = _2632;
                    _2778 = _2642;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    for (;;)
                    {
                        uint _2782 = uint(findLSB(_2778)) + (_2633 << 5u);
                        uint _2779 = (_2778 + 4294967295u) & _2778;
                        uint _2784 = _2782 * 48u;
                        vec4 _2798 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 3u)).x));
                        uint _2804 = (_2782 * 48u) + 4u;
                        vec4 _2817 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2804)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 3u)).x));
                        uint _2823 = (_2782 * 48u) + 8u;
                        vec3 _2834 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x));
                        float _2838 = _2798.x - _2327;
                        float _2839 = _2798.y - _2328;
                        float _2840 = _2798.z - _2329;
                        float _2841 = dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840));
                        float _2844 = inversesqrt(_2841);
                        float _2845 = _2844 * _2838;
                        float _2846 = _2844 * _2839;
                        float _2847 = _2844 * _2840;
                        float _2848 = dot(vec3(_601, _604, _607), vec3(_2845, _2846, _2847));
                        float _2853 = 1.0 - (_2841 * _2798.w);
                        float _4212 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
                        float _2854 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2855 = sqrt(_2841) * _2817.w;
                        float _2858 = 1.39999997615814208984375 / (_2855 + 1.39999997615814208984375);
                        float _2859 = _2858 * _2858;
                        float _2862 = ((1.0 - _2859) * _2848) + _2859;
                        float _2865 = _2855 * _2855;
                        float _2869 = ((isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0))) * _2854) / ((_2865 * 0.699999988079071044921875) + 1.0);
                        float _2873 = (-0.0) - _2327;
                        float _2874 = (-0.0) - _2328;
                        float _2875 = (-0.0) - _2329;
                        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
                        float _2880 = _2879 * _2873;
                        float _2881 = _2879 * _2874;
                        float _2882 = _2879 * _2875;
                        float _2890 = exp2(log2(1.0 / ((_2865 * 3.5) + 5.0)) * 0.25);
                        float _2891 = 1.0 - _661;
                        float _2898 = sqrt(1.0 - ((1.0 - (_2891 * _2891)) * (1.0 - (_2890 * _2890))));
                        float _2899 = _2898 * _2898;
                        float _2900 = _2899 * _2899;
                        float _2901 = _2880 + _2845;
                        float _2902 = _2881 + _2846;
                        float _2903 = _2882 + _2847;
                        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                        float _2911 = dot(vec3(_601, _604, _607), vec3(_2880, _2881, _2882));
                        float _4228 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2914 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                        float _2915 = dot(vec3(_601, _604, _607), vec3(_2907 * _2901, _2907 * _2902, _2907 * _2903));
                        float _4239 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2918 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2922 = ((_2918 * _2918) * (_2900 + (-1.0))) + 1.0;
                        float _2923 = _2858 * _2899;
                        float _2924 = _2923 * _2923;
                        float _2927 = ((1.0 - _2924) * _2848) + _2924;
                        float _4250 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2928 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                        float _2929 = 1.0 - _2899;
                        float _2939 = (0.5 / (((_2928 * ((_2914 * _2929) + _2899)) + 9.9999999392252902907785028219223e-09) + (((_2928 * _2929) + _2899) * _2914))) * _2928;
                        float _4261 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2950 = (((_2900 * 3.1415927410125732421875) * (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) / ((_2922 * _2922) * ((_2865 * 2.1991131305694580078125) + 3.141590118408203125))) * _2854;
                        _2702 = (_2869 * _2817.x) + _2775;
                        _2703 = (_2869 * _2817.y) + _2776;
                        _2704 = (_2869 * _2817.z) + _2777;
                        _2699 = (_2950 * _2834.x) + _2772;
                        _2700 = (_2950 * _2834.y) + _2773;
                        _2701 = (_2950 * _2834.z) + _2774;
                        if (_2779 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2772 = _2699;
                            _2773 = _2700;
                            _2774 = _2701;
                            _2775 = _2702;
                            _2776 = _2703;
                            _2777 = _2704;
                            _2778 = _2779;
                        }
                    }
                    frontier_phi_66_pred = _2699;
                    frontier_phi_66_pred_1 = _2704;
                    frontier_phi_66_pred_2 = _2703;
                    frontier_phi_66_pred_3 = _2702;
                    frontier_phi_66_pred_4 = _2701;
                    frontier_phi_66_pred_5 = _2700;
                }
                _2475 = frontier_phi_66_pred;
                _2485 = frontier_phi_66_pred_1;
                _2483 = frontier_phi_66_pred_2;
                _2481 = frontier_phi_66_pred_3;
                _2479 = frontier_phi_66_pred_4;
                _2477 = frontier_phi_66_pred_5;
                uint _2634 = _2633 + 1u;
                if (_2634 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2627 = _2475;
                    _2628 = _2477;
                    _2629 = _2479;
                    _2630 = _2481;
                    _2631 = _2483;
                    _2632 = _2485;
                    _2633 = _2634;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2474 = _2475;
            _2476 = _2477;
            _2478 = _2479;
            _2480 = _2481;
            _2482 = _2483;
            _2484 = _2485;
        }
        uvec4 _2488 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2489 = _2488.z;
        uint _2491 = (_2489 >> 8u) & 15u;
        float _2595;
        float _2597;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        if (((4294967295u << _2491) & _2373) == 0u)
        {
            _2595 = _2474;
            _2597 = _2476;
            _2599 = _2478;
            _2601 = _2480;
            _2603 = _2482;
            _2605 = _2484;
        }
        else
        {
            float _2620 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
            float _2621 = _2620 * _2327;
            float _2622 = _2620 * _2328;
            float _2623 = _2620 * _2329;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2491 < ((_2489 >> 12u) & 15u))
            {
                float _2596;
                float _2598;
                float _2600;
                float _2602;
                float _2604;
                float _2606;
                float _2755 = _2474;
                float _2756 = _2476;
                float _2757 = _2478;
                float _2758 = _2480;
                float _2759 = _2482;
                float _2760 = _2484;
                uint _2761 = _2491;
                uint _2770;
                bool _2771;
                for (;;)
                {
                    _2770 = texelFetch(g_lightClassification, int((((_2367 << 5u) + (_2353 << 9u)) + (_2761 << 2u)) >> 2u)).x;
                    _2771 = _2770 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2771)
                    {
                        frontier_phi_77_pred = _2760;
                        frontier_phi_77_pred_1 = _2759;
                        frontier_phi_77_pred_2 = _2758;
                        frontier_phi_77_pred_3 = _2757;
                        frontier_phi_77_pred_4 = _2756;
                        frontier_phi_77_pred_5 = _2755;
                    }
                    else
                    {
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _2977 = _2755;
                        float _2978 = _2756;
                        float _2979 = _2757;
                        float _2980 = _2758;
                        float _2981 = _2759;
                        float _2982 = _2760;
                        uint _2983 = _2770;
                        uint _2984;
                        vec4 _3009;
                        float _3010;
                        vec4 _3025;
                        vec3 _3037;
                        vec4 _3053;
                        vec4 _3069;
                        float _3115;
                        bool _3116;
                        for (;;)
                        {
                            uint _2994 = ((_2761 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2983));
                            _2984 = (_2983 + 4294967295u) & _2983;
                            uint _2996 = _2994 * 40u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3010 = _3009.w;
                            uint _3012 = (_2994 * 40u) + 4u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3027 = (_2994 * 40u) + 8u;
                            _3037 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x));
                            uint _3040 = (_2994 * 40u) + 16u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3056 = (_2994 * 40u) + 20u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3071 = (_2994 * 40u) + 24u;
                            vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3090 = (_2994 * 40u) + 28u;
                            vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            _3115 = fma(_2329, _3103.z, fma(_2328, _3103.y, _3103.x * _2327)) + _3103.w;
                            _3116 = !((fma(_2329, _3084.z, fma(_2328, _3084.y, _3084.x * _2327)) + _3084.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3116)
                            {
                                float _3143 = _3009.x - _2327;
                                float _3144 = _3009.y - _2328;
                                float _3145 = _3009.z - _2329;
                                float _3146 = dot(vec3(_3143, _3144, _3145), vec3(_3143, _3144, _3145));
                                float _3149 = inversesqrt(_3146);
                                float _3150 = _3149 * _3143;
                                float _3151 = _3149 * _3144;
                                float _3152 = _3149 * _3145;
                                float _3156 = 1.0 - (_3146 / (_3010 * _3010));
                                float _4272 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3157 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3161 = sqrt(_3146) * _3025.w;
                                float _3163 = 1.39999997615814208984375 / (_3161 + 1.39999997615814208984375);
                                float _3164 = _3163 * _3163;
                                float _3167 = ((1.0 - _3164) * dot(vec3(_3150, _3151, _3152), vec3(_601, _604, _607))) + _3164;
                                float _3170 = _3161 * _3161;
                                float _3174 = (fma(_2329, _3053.z, fma(_2328, _3053.y, _3053.x * _2327)) + _3053.w) / _3115;
                                float _3175 = (fma(_2329, _3069.z, fma(_2328, _3069.y, _3069.x * _2327)) + _3069.w) / _3115;
                                float _3179 = 1.0 - dot(vec2(_3174, _3175), vec2(_3174, _3175));
                                float _4288 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3180 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3181 = _3180 * (((isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0))) * _3157) / ((_3170 * 0.699999988079071044921875) + 1.0));
                                float _3193 = exp2(log2(1.0 / ((_3170 * 3.5) + 5.0)) * 0.25);
                                float _3194 = 1.0 - _661;
                                float _3201 = sqrt(1.0 - ((1.0 - (_3194 * _3194)) * (1.0 - (_3193 * _3193))));
                                float _3202 = _3201 * _3201;
                                float _3203 = _3202 * _3202;
                                float _3204 = _3150 - _2621;
                                float _3205 = _3151 - _2622;
                                float _3206 = _3152 - _2623;
                                float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                                float _3214 = dot(vec3(_601, _604, _607), vec3((-0.0) - _2621, (-0.0) - _2622, (-0.0) - _2623));
                                float _4299 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3217 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3218 = dot(vec3(_601, _604, _607), vec3(_3210 * _3204, _3210 * _3205, _3210 * _3206));
                                float _4310 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3221 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3225 = ((_3221 * _3221) * (_3203 + (-1.0))) + 1.0;
                                float _3226 = _3163 * _3202;
                                float _3227 = _3226 * _3226;
                                float _3233 = ((1.0 - _3227) * dot(vec3(_601, _604, _607), vec3(_3150, _3151, _3152))) + _3227;
                                float _4321 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3234 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3235 = 1.0 - _3202;
                                float _3245 = (0.5 / (((_3234 * ((_3217 * _3235) + _3202)) + 9.9999999392252902907785028219223e-09) + (((_3234 * _3235) + _3202) * _3217))) * _3234;
                                float _4332 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0));
                                float _3255 = (_3180 * _3157) * (((_3203 * 3.1415927410125732421875) * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) / ((_3225 * _3225) * ((_3170 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3181 * _3025.y;
                                frontier_phi_83_pred_1 = _3181 * _3025.x;
                                frontier_phi_83_pred_2 = _3255 * _3037.z;
                                frontier_phi_83_pred_3 = _3255 * _3037.y;
                                frontier_phi_83_pred_4 = _3255 * _3037.x;
                                frontier_phi_83_pred_5 = _3181 * _3025.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3263 = frontier_phi_83_pred;
                            _3262 = frontier_phi_83_pred_1;
                            _3261 = frontier_phi_83_pred_2;
                            _3260 = frontier_phi_83_pred_3;
                            _3259 = frontier_phi_83_pred_4;
                            _3264 = frontier_phi_83_pred_5;
                            _2967 = _3262 + _2980;
                            _2968 = _3263 + _2981;
                            _2969 = _3264 + _2982;
                            _2964 = _3259 + _2977;
                            _2965 = _3260 + _2978;
                            _2966 = _3261 + _2979;
                            if (_2984 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2984;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2969;
                        frontier_phi_77_pred_1 = _2968;
                        frontier_phi_77_pred_2 = _2967;
                        frontier_phi_77_pred_3 = _2966;
                        frontier_phi_77_pred_4 = _2965;
                        frontier_phi_77_pred_5 = _2964;
                    }
                    _2606 = frontier_phi_77_pred;
                    _2604 = frontier_phi_77_pred_1;
                    _2602 = frontier_phi_77_pred_2;
                    _2600 = frontier_phi_77_pred_3;
                    _2598 = frontier_phi_77_pred_4;
                    _2596 = frontier_phi_77_pred_5;
                    uint _2762 = _2761 + 1u;
                    if (_2762 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2755 = _2596;
                        _2756 = _2598;
                        _2757 = _2600;
                        _2758 = _2602;
                        _2759 = _2604;
                        _2760 = _2606;
                        _2761 = _2762;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2600;
                frontier_phi_58_59_ladder_1 = _2606;
                frontier_phi_58_59_ladder_2 = _2604;
                frontier_phi_58_59_ladder_3 = _2602;
                frontier_phi_58_59_ladder_4 = _2598;
                frontier_phi_58_59_ladder_5 = _2596;
            }
            else
            {
                frontier_phi_58_59_ladder = _2478;
                frontier_phi_58_59_ladder_1 = _2484;
                frontier_phi_58_59_ladder_2 = _2482;
                frontier_phi_58_59_ladder_3 = _2480;
                frontier_phi_58_59_ladder_4 = _2476;
                frontier_phi_58_59_ladder_5 = _2474;
            }
            _2595 = frontier_phi_58_59_ladder_5;
            _2597 = frontier_phi_58_59_ladder_4;
            _2599 = frontier_phi_58_59_ladder;
            _2601 = frontier_phi_58_59_ladder_3;
            _2603 = frontier_phi_58_59_ladder_2;
            _2605 = frontier_phi_58_59_ladder_1;
        }
        float _2610 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
        _2386 = (_2610 * _2601) + _1841;
        _2388 = (_2610 * _2603) + _1843;
        _2390 = (_2610 * _2605) + _1845;
        _2392 = ((_2595 * 0.039999999105930328369140625) * _2610) + _2171;
        _2394 = ((_2597 * 0.039999999105930328369140625) * _2610) + _2173;
        _2396 = ((_2599 * 0.039999999105930328369140625) * _2610) + _2175;
    }
    else
    {
        _2386 = _1841;
        _2388 = _1843;
        _2390 = _1845;
        _2392 = _2171;
        _2394 = _2173;
        _2396 = _2175;
    }
    float _4348 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4359 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4370 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2413 = ((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2386 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _645))) + ((_2392 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1481)) * cbPerFrame._m0[3u].x);
    float _2414 = ((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2388 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _645))) + ((_2394 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1481)) * cbPerFrame._m0[3u].x);
    float _2415 = ((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2390 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _645))) + ((_2396 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1481)) * cbPerFrame._m0[3u].x);
    uint _2416 = _224 + 6u;
    float _2424 = _580 / cbSceneParam._m0[86u].x;
    float _2425 = _581 / cbSceneParam._m0[86u].y;
    vec4 _2439 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2424, _2425, (log2((isnan(cbSceneParam._m0[77u].w) ? _501 : (isnan(_501) ? cbSceneParam._m0[77u].w : min(_501, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2441 = _2439.x;
    float _2442 = _2439.y;
    float _2443 = _2439.z;
    float _2444 = _2439.w;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    if (_501 > cbSceneParam._m0[78u].w)
    {
        float _2499 = isnan(_501) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _501 : min(cbSceneParam._m0[80u].w, _501));
        float _2500 = _2499 / _501;
        float _2511 = _2500 * _552;
        float _2512 = _553 * _2500;
        float _2513 = (-0.0) - _2512;
        float _2515 = _2500 * _554;
        float _2517 = (cbSceneParam._m0[77u].w * _2513) / _2499;
        float _2518 = _2517 + cbSceneParam._m0[79u].w;
        float _2519 = cbSceneParam._m0[79u].w - _2512;
        float _2525 = sqrt(((_2511 * _2511) + (_2512 * _2512)) + (_2515 * _2515));
        float _2528 = (1.0 - (cbSceneParam._m0[77u].w / _2499)) * _2525;
        float _2533 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2535 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2712;
        if (abs((_2513 - _2517) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2712 = ((((_2518 > 0.0) ? exp2(_2533 * _2518) : (2.0 - exp2(_2535 * _2518))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2528;
        }
        else
        {
            float _2656 = 1.0 / cbSceneParam._m0[80u].x;
            float _2657 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : max(_2518, _2519));
            float _2658 = isnan(_2519) ? _2518 : (isnan(_2518) ? _2519 : min(_2518, _2519));
            float _2667 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : min(_2657, 0.0));
            float _2668 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : min(_2658, 0.0));
            _2712 = ((abs(_2525 / _2513) * cbSceneParam._m0[80u].y) * ((((_2667 - _2668) * 2.0) - ((exp2(_2533 * (isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0)))) - exp2(_2533 * (isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0))))) * _2656)) - ((exp2(_2535 * _2667) - exp2(_2535 * _2668)) * _2656))) + (_2528 * cbSceneParam._m0[80u].z);
        }
        vec4 _2714 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2424, _2425, 1.0), 0.0);
        float _2723 = exp2((_2712 * (-1.44269502162933349609375)) * (1.0 - _2714.w));
        float _2724 = log2(_2723);
        float _2740 = log2(_2444);
        _2537 = (exp2(_2740 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2724 * cbSceneParam._m0[78u].x)) * _2714.x) / cbSceneParam._m0[78u].x)) + _2441;
        _2539 = (exp2(_2740 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2724 * cbSceneParam._m0[78u].y)) * _2714.y) / cbSceneParam._m0[78u].y)) + _2442;
        _2541 = (exp2(_2740 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2724 * cbSceneParam._m0[78u].z)) * _2714.z) / cbSceneParam._m0[78u].z)) + _2443;
        _2543 = _2723 * _2444;
    }
    else
    {
        _2537 = _2441;
        _2539 = _2442;
        _2541 = _2443;
        _2543 = _2444;
    }
    bool _2750;
    vec4 _2553;
    vec4 _2575;
    float _2577;
    float _2581;
    float _2582;
    float _2583;
    float _2584;
    bool _2594;
    for (;;)
    {
        _2553 = cbMatDynParam._m0[0u];
        float _2555 = roundEven(_2553.y);
        bool _2556 = _2555 == 3.0;
        float _2557 = log2(_2543);
        float _2564 = exp2(_2557 * cbSceneParam._m0[78u].x) * _2413;
        float _2565 = exp2(_2557 * cbSceneParam._m0[78u].y) * _2414;
        float _2566 = exp2(_2557 * cbSceneParam._m0[78u].z) * _2415;
        float _2573 = _568 + (-0.5);
        _2575 = cbMtdParam._m0[1u];
        _2577 = _2575.y * _2573;
        float _2580 = (_2555 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2581 = _2580 * (_2556 ? _2564 : (_2564 + (cbSceneParam._m0[72u].w * _2537)));
        _2582 = _2580 * (_2556 ? _2565 : (_2565 + (cbSceneParam._m0[72u].w * _2539)));
        _2583 = _2580 * (_2556 ? _2566 : (_2566 + (cbSceneParam._m0[72u].w * _2541)));
        _2584 = _2573 * 0.999000012874603271484375;
        _2594 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2594)
        {
            if ((cbInstanceData._m0[_224 + 7u].x + _2584) < 0.5)
            {
                _2750 = true;
                break;
            }
        }
        uint _2691 = _620 + uint(_2553.w);
        if ((cbInstanceData._m0[_2691].w < 1.0) && ((cbInstanceData._m0[_2691].w + _2584) < 0.5))
        {
            _2750 = true;
            break;
        }
        if ((_2577 + 1.0) < _2575.x)
        {
            _2750 = true;
            break;
        }
        _2750 = false;
        break;
    }
    float _2955;
    if (_2750)
    {
        discard_state = true;
        _2955 = 0.0;
    }
    else
    {
        _2955 = cbInstanceData._m0[_2416].w;
    }
    SV_Target.x = _2581;
    SV_Target.y = _2582;
    SV_Target.z = _2583;
    SV_Target.w = _2955;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2416].w;
    discard_exit();
}


