#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1301;
float _3683;
float _3684;
float _3685;
float _3686;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _364 = _362.x;
    float _374 = dot(vec4(_364, _362.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _391 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_364 - _374) * cbMtdParam._m0[24u].x) + _374) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3695 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _392 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _399 = (_392 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _400 = (_392 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _401 = (_392 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _484 = _482.x;
    float _485 = _482.y;
    float _486 = _482.z;
    float _495 = ((_465.z - _486) * _392) + _486;
    float _498 = ((((_465.x - _484) * _392) + _484) * 2.0) + (-1.0);
    float _499 = ((((_465.y - _485) * _392) + _485) * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3706 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))));
    vec4 _518 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _536 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _538 = _536.x;
    float _539 = 1.0 - _538;
    float _545 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _548 = ((isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : min(_545, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _557 = (_548 - ((((((_538 - _539) * cbMtdParam._m0[24u].z) + _539) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _548))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3727 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _565 = (_558 * ((_420.x * cbMtdParam._m0[18u].x) - _399)) + _399;
    float _566 = (_558 * ((_420.y * cbMtdParam._m0[18u].y) - _400)) + _400;
    float _567 = (_558 * ((_420.z * cbMtdParam._m0[18u].z) - _401)) + _401;
    vec4 _579 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _581 = _579.x;
    float _582 = 1.0 - _581;
    float _609 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_581 - _582) * cbMtdParam._m0[24u].w) + _582) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3738 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _610 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _618 = ((((cbMtdParam._m0[10u].x - _565) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _610) + _565;
    float _619 = ((((cbMtdParam._m0[10u].y - _566) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _610) + _566;
    float _620 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _567)) * _610) + _567;
    float _625 = (((_440.z - _495) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _495;
    vec4 _639 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _646 = (_639.x * 2.0) + (-1.0);
    float _647 = (_639.y * 2.0) + (-1.0);
    float _648 = dot(vec2(_646, _647), vec2(_646, _647));
    float _3749 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _656 = (_558 * (_639.z - _625)) + _625;
    float _659 = ((cbMtdParam._m0[23u].y - _656) * _610) + _656;
    vec4 _678 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _684 = (_678.x * 2.0) + (-1.0);
    float _685 = (_678.y * 2.0) + (-1.0);
    float _686 = dot(vec2(_684, _685), vec2(_684, _685));
    float _3760 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _696 = _498 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_440.x * 2.0) + (-1.0)));
    float _697 = _499 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_440.y * 2.0) + (-1.0)));
    float _709 = (((_646 - _696) + (cbMtdParam._m0[21u].x * _696)) * _558) + _696;
    float _710 = (((_647 - _697) + (cbMtdParam._m0[21u].x * _697)) * _558) + _697;
    float _711 = (_558 * (sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) - _505)) + _505;
    float _722 = (((_684 - _709) + (_709 * cbMtdParam._m0[22u].z)) * _610) + _709;
    float _723 = (((_685 - _710) + (_710 * cbMtdParam._m0[22u].z)) * _610) + _710;
    float _724 = ((sqrt(1.0 - (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0)))) - _711) * _610) + _711;
    float _726 = cbMtdParam._m0[22u].x + _518.w;
    float _729 = fma(_724, _244 * NORMAL.x, fma(_723, _251 * TANGENT.x, (_237 * _229) * _722));
    float _732 = fma(_724, _244 * NORMAL.y, fma(_723, _251 * TANGENT.y, (_237 * _230) * _722));
    float _735 = fma(_724, _244 * NORMAL.z, fma(_723, _251 * TANGENT.z, (_237 * _231) * _722));
    float _739 = inversesqrt(dot(vec3(_729, _732, _735), vec3(_729, _732, _735)));
    float _740 = _739 * _729;
    float _741 = _739 * _732;
    float _742 = _739 * _735;
    float _3771 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _743 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _3793 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3804 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3815 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _761 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _812 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _802);
    float _813 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _802);
    float _814 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _802);
    float _818 = inversesqrt(dot(vec3(_812, _813, _814), vec3(_812, _813, _814)));
    float _819 = _812 * _818;
    float _820 = _813 * _818;
    float _821 = _814 * _818;
    vec4 _826 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _828 = _826.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _982 = sqrt(((_812 * _812) + (_813 * _813)) + (_814 * _814));
        float _988 = (cbMatDynParam._m0[5u].x * _982) + cbMatDynParam._m0[5u].y;
        float _3826 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _993 = (cbMatDynParam._m0[5u].z * _982) + cbMatDynParam._m0[5u].w;
        float _3837 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) - _989)) + _989) < ((_828 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _839 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _840 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _858 = fma(_742, cbSceneParam._m0[5u].z, fma(_741, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _740));
    float _861 = fma(_742, cbSceneParam._m0[6u].z, fma(_741, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _740));
    float _864 = fma(_742, cbSceneParam._m0[7u].z, fma(_741, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _740));
    uint _877 = _257 + 9u;
    uint _878 = _877 + uint(cbMatDynParam._m0[0u].w);
    float _884 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_878].x;
    float _885 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_878].y;
    float _886 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * cbInstanceData._m0[_878].z;
    float _3848 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _3870 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    vec4 _898 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _839, cbSceneParam._m0[86u].y * _840));
    float _902 = ((isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * TEXCOORD_5.w) * _898.x;
    float _903 = dot(vec3(_740, _741, _742), vec3(_819, _820, _821));
    float _906 = _903 * 2.0;
    float _910 = (_906 * _740) - _819;
    float _911 = (_906 * _741) - _820;
    float _912 = (_906 * _742) - _821;
    float _916 = abs(dot(vec3(_819, _820, _821), vec3(_740, _741, _742)));
    float _3881 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _918 = sqrt(_743);
    float _931 = exp2((_918 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_918 * 3.0));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1300;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1025 = fma(_971, cbModelParam._m0[26u].z, fma(_967, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _963));
        float _1029 = fma(_971, cbModelParam._m0[27u].z, fma(_967, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _963));
        float _1033 = fma(_971, cbModelParam._m0[28u].z, fma(_967, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _963));
        float _1058 = _963 + _740;
        float _1059 = _967 + _741;
        float _1060 = _971 + _742;
        float _1070 = fma(_1060, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058)) - _1025;
        float _1071 = fma(_1060, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058)) - _1029;
        float _1072 = fma(_1060, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058)) - _1033;
        float _1076 = inversesqrt(dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072)));
        float _1089 = ((_1076 * _1070) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1025 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1076 * _1071) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1029 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1076 * _1072) / cbModelParam._m0[34u].z) + ((((((_1033 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1089, _1090, _1091), 0.0);
        float _1128 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1094.x + (-0.5));
        float _1130 = _1128 * (_1094.y + (-0.5));
        float _1131 = _1128 * (_1094.z + (-0.5));
        float _1138 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1101.x + (-0.5));
        float _1140 = _1138 * (_1101.y + (-0.5));
        float _1141 = _1138 * (_1101.z + (-0.5));
        float _1148 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1108.x + (-0.5));
        float _1150 = _1148 * (_1108.y + (-0.5));
        float _1151 = _1148 * (_1108.z + (-0.5));
        float _1158 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1115.x + (-0.5));
        float _1160 = _1158 * (_1115.y + (-0.5));
        float _1161 = _1158 * (_1115.z + (-0.5));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = _1129 * 0.5;
        float _1166 = _1139 * 0.5;
        float _1167 = _1149 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1182 = (dot(vec3(_740, _741, _742), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1192 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3929 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1194 + 1.0))) + _1199) * _1162;
        float _1209 = _1130 * 0.5;
        float _1210 = _1140 * 0.5;
        float _1211 = _1150 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_740, _741, _742), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3962 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1236 + 1.0))) + _1241) * _1163;
        float _1251 = _1131 * 0.5;
        float _1252 = _1141 * 0.5;
        float _1253 = _1151 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_740, _741, _742), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3995 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1278 + 1.0))) + _1283) * _1164;
        _1300 = _1131;
        _1302 = _1130;
        _1303 = _1129;
        _1304 = _1141;
        _1305 = _1140;
        _1306 = _1139;
        _1307 = _1151;
        _1308 = _1150;
        _1309 = _1149;
        _1310 = _1164;
        _1311 = _1163;
        _1312 = _1162;
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
    }
    else
    {
        _1300 = _1301;
        _1302 = _1301;
        _1303 = _1301;
        _1304 = _1301;
        _1305 = _1301;
        _1306 = _1301;
        _1307 = _1301;
        _1308 = _1301;
        _1309 = _1301;
        _1310 = _1301;
        _1311 = _1301;
        _1312 = _1301;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1343 = fma(_971, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963));
        float _1347 = fma(_971, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963));
        float _1351 = fma(_971, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963));
        float _1374 = _963 + _740;
        float _1375 = _967 + _741;
        float _1376 = _971 + _742;
        float _1386 = fma(_1376, cbModelParam._m0[30u].z, fma(_1375, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1374)) - _1343;
        float _1387 = fma(_1376, cbModelParam._m0[31u].z, fma(_1375, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1374)) - _1347;
        float _1388 = fma(_1376, cbModelParam._m0[32u].z, fma(_1375, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1374)) - _1351;
        float _1392 = inversesqrt(dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388)));
        float _1405 = ((_1392 * _1386) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1343 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1392 * _1387) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1347 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1392 * _1388) / cbModelParam._m0[35u].z) + ((((((_1351 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        float _1442 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1409.x + (-0.5));
        float _1444 = _1442 * (_1409.y + (-0.5));
        float _1445 = _1442 * (_1409.z + (-0.5));
        float _1452 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1416.x + (-0.5));
        float _1454 = _1452 * (_1416.y + (-0.5));
        float _1455 = _1452 * (_1416.z + (-0.5));
        float _1462 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1423.x + (-0.5));
        float _1464 = _1462 * (_1423.y + (-0.5));
        float _1465 = _1462 * (_1423.z + (-0.5));
        float _1472 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1430.x + (-0.5));
        float _1474 = _1472 * (_1430.y + (-0.5));
        float _1475 = _1472 * (_1430.z + (-0.5));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = _1443 * 0.5;
        float _1480 = _1453 * 0.5;
        float _1481 = _1463 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_740, _741, _742), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4058 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1506 + 1.0))) + _1511) * _1476;
        float _1521 = _1444 * 0.5;
        float _1522 = _1454 * 0.5;
        float _1523 = _1464 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_740, _741, _742), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4091 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1548 + 1.0))) + _1553) * _1477;
        float _1563 = _1445 * 0.5;
        float _1564 = _1455 * 0.5;
        float _1565 = _1465 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_740, _741, _742), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4124 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1590 + 1.0))) + _1595) * _1478;
        _1612 = _1445;
        _1613 = _1444;
        _1614 = _1443;
        _1615 = _1455;
        _1616 = _1454;
        _1617 = _1453;
        _1618 = _1465;
        _1619 = _1464;
        _1620 = _1463;
        _1621 = _1478;
        _1622 = _1477;
        _1623 = _1476;
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
    }
    else
    {
        _1612 = _1301;
        _1613 = _1301;
        _1614 = _1301;
        _1615 = _1301;
        _1616 = _1301;
        _1617 = _1301;
        _1618 = _1301;
        _1619 = _1301;
        _1620 = _1301;
        _1621 = _1301;
        _1622 = _1301;
        _1623 = _1301;
        _1624 = 0.0;
        _1625 = 0.0;
        _1626 = 0.0;
    }
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1313)) + _1313;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1314)) + _1314;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1315)) + _1315;
    float _1659 = fma(_1638, cbSceneParam._m0[89u].z, fma(_1637, cbSceneParam._m0[89u].y, _1636 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1638, cbSceneParam._m0[90u].z, fma(_1637, cbSceneParam._m0[90u].y, _1636 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1638, cbSceneParam._m0[91u].z, fma(_1637, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1636));
    float _1680 = _910 * 0.5;
    float _1681 = _911 * 0.5;
    float _1682 = _912 * 0.5;
    float _1683 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1686 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1689 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1723;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1696 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1300, _1304, _1307, _1310));
        float _1700 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1704 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1711 = dot(vec4(cbModelParam._m0[39u]), vec4(_1680, _1681, _1682, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1734;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1725 = dot(vec4(cbModelParam._m0[40u]), vec4(_1680, _1681, _1682, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1738 = (_1734 * cbModelParam._m0[1u].x) + (_1723 * (1.0 - cbModelParam._m0[1u].x));
    float _1748 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _743);
    float _1749 = isnan(_1748) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1748 : min(cbModelParam._m0[25u].z, _1748));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1796 = fma(_971, cbModelParam._m0[13u].z, fma(_967, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _963)) + cbModelParam._m0[13u].w;
        float _1800 = fma(_971, cbModelParam._m0[14u].z, fma(_967, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _963)) + cbModelParam._m0[14u].w;
        float _1804 = fma(_971, cbModelParam._m0[15u].z, fma(_967, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _963)) + cbModelParam._m0[15u].w;
        float _1807 = fma(_912, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910));
        float _1810 = fma(_912, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910));
        float _1813 = fma(_912, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910));
        float _1841;
        if (_1807 > 0.0)
        {
            _1841 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1841 = frontier_phi_17_15_ladder;
        }
        float _2062;
        if (_1810 > 0.0)
        {
            _2062 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2062 = frontier_phi_26_22_ladder;
        }
        float _2308;
        if (_1813 > 0.0)
        {
            _2308 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2308 = frontier_phi_38_33_ladder;
        }
        float _2310 = isnan(_2062) ? _1841 : (isnan(_1841) ? _2062 : min(_1841, _2062));
        float _2311 = isnan(_2308) ? _2310 : (isnan(_2310) ? _2308 : min(_2310, _2308));
        float _2315 = (_2311 * _1807) + _1796;
        float _2316 = (_2311 * _1810) + _1800;
        float _2317 = (_2311 * _1813) + _1804;
        float _2318 = _2311 * 9.9999997473787516355514526367188e-05;
        float _2320 = (-1.0) - _2318;
        float _2322 = _2318 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2317 > _2322) || ((_2317 < _2320) || ((_2316 > _2322) || ((_2316 < _2320) || ((_2315 < _2320) || (_2315 > _2322))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2441 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2317, cbModelParam._m0[9u].z, fma(_2316, cbModelParam._m0[9u].y, _2315 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2317, cbModelParam._m0[10u].z, fma(_2316, cbModelParam._m0[10u].y, _2315 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2317, cbModelParam._m0[11u].z, fma(_2316, cbModelParam._m0[11u].y, _2315 * cbModelParam._m0[11u].x))), _1749);
            frontier_phi_16_38_ladder = _2441.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2441.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2441.x * cbModelParam._m0[1u].y;
        }
        _1829 = frontier_phi_16_38_ladder_2;
        _1831 = frontier_phi_16_38_ladder_1;
        _1833 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_910, _911, _912), _1749);
        _1829 = _1817.x * cbModelParam._m0[1u].y;
        _1831 = _1817.y * cbModelParam._m0[1u].y;
        _1833 = _1817.z * cbModelParam._m0[1u].y;
    }
    float _1837 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _743);
    float _1838 = isnan(_1837) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1837 : min(cbModelParam._m0[25u].w, _1837));
    float _1927;
    float _1929;
    float _1931;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1891 = fma(_971, cbModelParam._m0[21u].z, fma(_967, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _963)) + cbModelParam._m0[21u].w;
        float _1895 = fma(_971, cbModelParam._m0[22u].z, fma(_967, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _963)) + cbModelParam._m0[22u].w;
        float _1899 = fma(_971, cbModelParam._m0[23u].z, fma(_967, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _963)) + cbModelParam._m0[23u].w;
        float _1902 = fma(_912, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910));
        float _1905 = fma(_912, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910));
        float _1908 = fma(_912, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910));
        float _2067;
        if (_1902 > 0.0)
        {
            _2067 = abs((1.0 - _1891) / _1902);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1891 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2067 = frontier_phi_28_24_ladder;
        }
        float _2335;
        if (_1905 > 0.0)
        {
            _2335 = abs((1.0 - _1895) / _1905);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1895 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2335 = frontier_phi_40_35_ladder;
        }
        float _2540;
        if (_1908 > 0.0)
        {
            _2540 = abs((1.0 - _1899) / _1908);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1899 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2540 = frontier_phi_49_46_ladder;
        }
        float _2542 = isnan(_2335) ? _2067 : (isnan(_2067) ? _2335 : min(_2067, _2335));
        float _2543 = isnan(_2540) ? _2542 : (isnan(_2542) ? _2540 : min(_2542, _2540));
        float _2547 = (_2543 * _1902) + _1891;
        float _2548 = (_2543 * _1905) + _1895;
        float _2549 = (_2543 * _1908) + _1899;
        float _2550 = _2543 * 9.9999997473787516355514526367188e-05;
        float _2551 = (-1.0) - _2550;
        float _2553 = _2550 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2549 > _2553) || ((_2549 < _2551) || ((_2548 > _2553) || ((_2548 < _2551) || ((_2547 < _2551) || (_2547 > _2553))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2748 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2549, cbModelParam._m0[17u].z, fma(_2548, cbModelParam._m0[17u].y, _2547 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2549, cbModelParam._m0[18u].z, fma(_2548, cbModelParam._m0[18u].y, _2547 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2549, cbModelParam._m0[19u].z, fma(_2548, cbModelParam._m0[19u].y, _2547 * cbModelParam._m0[19u].x))), _1838);
            frontier_phi_25_49_ladder = _2748.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2748.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2748.x * cbModelParam._m0[1u].z;
        }
        _1927 = frontier_phi_25_49_ladder_2;
        _1929 = frontier_phi_25_49_ladder_1;
        _1931 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1911 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_910, _911, _912), _1838);
        _1927 = _1911.x * cbModelParam._m0[1u].z;
        _1929 = _1911.y * cbModelParam._m0[1u].z;
        _1931 = _1911.z * cbModelParam._m0[1u].z;
    }
    float _1943 = ((((1.0 - _931) * ((_918 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_931 * _918)) * _902;
    float _1944 = _1943 * ((cbModelParam._m0[1u].w * (_1927 - _1829)) + _1829);
    float _1945 = _1943 * ((cbModelParam._m0[1u].w * (_1929 - _1831)) + _1831);
    float _1946 = _1943 * ((cbModelParam._m0[1u].w * (_1931 - _1833)) + _1833);
    float _1949 = fma(_1946, cbSceneParam._m0[89u].z, fma(_1945, cbSceneParam._m0[89u].y, _1944 * cbSceneParam._m0[89u].x));
    float _1952 = fma(_1946, cbSceneParam._m0[90u].z, fma(_1945, cbSceneParam._m0[90u].y, _1944 * cbSceneParam._m0[90u].x));
    float _1955 = fma(_1946, cbSceneParam._m0[91u].z, fma(_1945, cbSceneParam._m0[91u].y, _1944 * cbSceneParam._m0[91u].x));
    vec4 _1963 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_839, _840));
    float _1965 = _1963.w;
    float _1977 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1965);
    float _1978 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1965);
    float _1979 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1965);
    uvec4 _1983 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _1985 = _1983.x * 14u;
    uint _1986 = _1985 + 13u;
    float _1993 = _902 + (-1.0);
    float _1998 = (cbLight._m0[_1986].x * _1993) + 1.0;
    float _1999 = (cbLight._m0[_1986].y * _1993) + 1.0;
    float _2000 = (cbLight._m0[_1986].z * _1993) + 1.0;
    float _2001 = (cbLight._m0[_1986].w * _1993) + 1.0;
    uint _2002 = _1985 + 5u;
    float _2008 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
    uint _2012 = _1985 + 4u;
    float _2021 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
    uint _2025 = _1985 | 1u;
    float _2036 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_740, _741, _742));
    float _2039 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_740, _741, _742));
    float _4260 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _4271 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2044 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * 0.3183098733425140380859375;
    float _2046 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.3183098733425140380859375;
    float _2053 = ((cbLight._m0[_2002].x * _2008) * _2046) + (((cbLight._m0[_2012].x * _1977) * _2021) * _2044);
    float _2054 = ((_2008 * cbLight._m0[_2002].y) * _2046) + (((cbLight._m0[_2012].y * _1978) * _2021) * _2044);
    float _2055 = ((_2008 * cbLight._m0[_2002].z) * _2046) + (((cbLight._m0[_2012].z * _1979) * _2021) * _2044);
    uvec4 _2059 = floatBitsToUint(cbLight._m0[_1985 + 12u]);
    bool _2061 = _2059.x == 0u;
    float _2072;
    float _2074;
    float _2076;
    if (_2061)
    {
        _2072 = _2053;
        _2074 = _2054;
        _2076 = _2055;
    }
    else
    {
        uint _2080 = _1985 + 6u;
        float _2096 = (dot(vec3(cbLight._m0[_1985 + 2u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2097 = _2096 * _2096;
        float _4282 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2099 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
        _2072 = (((cbLight._m0[_2080].x * 0.3183098733425140380859375) * _2098) * _2099) + _2053;
        _2074 = (((cbLight._m0[_2080].y * 0.3183098733425140380859375) * _2098) * _2099) + _2054;
        _2076 = (((cbLight._m0[_2080].z * 0.3183098733425140380859375) * _2098) * _2099) + _2055;
    }
    bool _2079 = _2059.y == 0u;
    float _2117;
    float _2119;
    float _2121;
    if (_2079)
    {
        _2117 = _2072;
        _2119 = _2074;
        _2121 = _2076;
    }
    else
    {
        uint _2279 = _1985 + 7u;
        float _2295 = (dot(vec3(cbLight._m0[_1985 + 3u].xyz), vec3(_740, _741, _742)) * 0.5) + 0.5;
        float _2296 = _2295 * _2295;
        float _4298 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2297 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2298 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2117 = (((cbLight._m0[_2279].x * 0.3183098733425140380859375) * _2297) * _2298) + _2072;
        _2119 = (((cbLight._m0[_2279].y * 0.3183098733425140380859375) * _2297) * _2298) + _2074;
        _2121 = (((cbLight._m0[_2279].z * 0.3183098733425140380859375) * _2297) * _2298) + _2076;
    }
    uint _2124 = _1985 + 8u;
    float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _743) * 0.949999988079071044921875);
    float _2138 = _2137 * _2137;
    float _2139 = cbLight._m0[_1985].x + _819;
    float _2140 = cbLight._m0[_1985].y + _820;
    float _2141 = cbLight._m0[_1985].z + _821;
    float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
    float _2146 = _2145 * _2139;
    float _2147 = _2145 * _2140;
    float _2148 = _2145 * _2141;
    float _2149 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_1985].xyz));
    float _4314 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _2153 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _2154 = dot(vec3(_740, _741, _742), vec3(_2146, _2147, _2148));
    float _4336 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _2158 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2146, _2147, _2148));
    float _4347 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2162 = _2138 * _2138;
    float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
    float _2177 = (exp2(log2(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2178 = 1.0 - _2138;
    float _2189 = (0.5 / (((_2153 * ((_2152 * _2178) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2178) + _2138) * _2152))) * _2152;
    float _4358 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2191 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
    uint _2205 = _1985 + 9u;
    float _2216 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _743) * 0.949999988079071044921875);
    float _2217 = _2216 * _2216;
    float _2218 = cbLight._m0[_2025].x + _819;
    float _2219 = cbLight._m0[_2025].y + _820;
    float _2220 = cbLight._m0[_2025].z + _821;
    float _2224 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
    float _2225 = _2224 * _2218;
    float _2226 = _2224 * _2219;
    float _2227 = _2224 * _2220;
    float _2228 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2025].xyz));
    float _4369 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _2232 = dot(vec3(_740, _741, _742), vec3(_2225, _2226, _2227));
    float _4380 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _2236 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2225, _2226, _2227));
    float _4391 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2240 = _2217 * _2217;
    float _2244 = ((_2235 * _2235) * (_2240 + (-1.0))) + 1.0;
    float _2253 = (exp2(log2(1.0 - (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2254 = 1.0 - _2217;
    float _2264 = (0.5 / (((_2153 * ((_2231 * _2254) + _2217)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2254) + _2217) * _2231))) * _2231;
    float _4402 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2266 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_2240 / ((_2244 * _2244) * 3.141590118408203125));
    float _2276 = (((_2253 * cbLight._m0[_2205].x) * _2266) * _2008) + ((((cbLight._m0[_2124].x * _1977) * _2177) * _2191) * _2021);
    float _2277 = (((_2253 * cbLight._m0[_2205].y) * _2266) * _2008) + ((((cbLight._m0[_2124].y * _1978) * _2177) * _2191) * _2021);
    float _2278 = (((_2253 * cbLight._m0[_2205].z) * _2266) * _2008) + ((((cbLight._m0[_2124].z * _1979) * _2177) * _2191) * _2021);
    float _2340;
    float _2342;
    float _2344;
    if (_2061)
    {
        _2340 = _2276;
        _2342 = _2277;
        _2344 = _2278;
    }
    else
    {
        uint _2346 = _1985 + 2u;
        uint _2350 = _1985 + 10u;
        float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _743) * 0.949999988079071044921875);
        float _2365 = _2364 * _2364;
        float _2366 = cbLight._m0[_2346].x + _819;
        float _2367 = cbLight._m0[_2346].y + _820;
        float _2368 = cbLight._m0[_2346].z + _821;
        float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
        float _2373 = _2372 * _2366;
        float _2374 = _2372 * _2367;
        float _2375 = _2372 * _2368;
        float _2376 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2346].xyz));
        float _4413 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2380 = dot(vec3(_740, _741, _742), vec3(_2373, _2374, _2375));
        float _4424 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2384 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2373, _2374, _2375));
        float _4435 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2388 = _2365 * _2365;
        float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
        float _2401 = (exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2402 = 1.0 - _2365;
        float _2412 = (0.5 / (((_2153 * ((_2379 * _2402) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2402) + _2365) * _2379))) * _2379;
        float _4446 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2414 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
        float _2415 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
        _2340 = (((_2401 * cbLight._m0[_2350].x) * _2414) * _2415) + _2276;
        _2342 = (((_2401 * cbLight._m0[_2350].y) * _2414) * _2415) + _2277;
        _2344 = (((_2401 * cbLight._m0[_2350].z) * _2414) * _2415) + _2278;
    }
    float _2450;
    float _2452;
    float _2454;
    if (_2079)
    {
        _2450 = _2340;
        _2452 = _2342;
        _2454 = _2344;
    }
    else
    {
        uint _2461 = _1985 + 3u;
        uint _2465 = _1985 + 11u;
        float _2479 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _743) * 0.949999988079071044921875);
        float _2480 = _2479 * _2479;
        float _2481 = cbLight._m0[_2461].x + _819;
        float _2482 = cbLight._m0[_2461].y + _820;
        float _2483 = cbLight._m0[_2461].z + _821;
        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
        float _2488 = _2487 * _2481;
        float _2489 = _2487 * _2482;
        float _2490 = _2487 * _2483;
        float _2491 = dot(vec3(_740, _741, _742), vec3(cbLight._m0[_2461].xyz));
        float _4462 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2494 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _2495 = dot(vec3(_740, _741, _742), vec3(_2488, _2489, _2490));
        float _4473 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2498 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _2499 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2488, _2489, _2490));
        float _4484 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2503 = _2480 * _2480;
        float _2507 = ((_2498 * _2498) * (_2503 + (-1.0))) + 1.0;
        float _2516 = (exp2(log2(1.0 - (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2517 = 1.0 - _2480;
        float _2527 = (0.5 / (((_2153 * ((_2494 * _2517) + _2480)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2517) + _2480) * _2494))) * _2494;
        float _4495 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2529 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_2503 / ((_2507 * _2507) * 3.141590118408203125));
        float _2530 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2450 = (((_2516 * cbLight._m0[_2465].x) * _2529) * _2530) + _2340;
        _2452 = (((_2516 * cbLight._m0[_2465].y) * _2529) * _2530) + _2342;
        _2454 = (((_2516 * cbLight._m0[_2465].z) * _2529) * _2530) + _2344;
    }
    float _2665;
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    if (_1983.y == 0u)
    {
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2606 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2605;
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2605;
        float _2608 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2605;
        uvec4 _2620 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2621 = _2620.x;
        uint _2632 = uint((float(_2620.y) * floor(float(uint(cbSceneParam._m0[85u].y * _840) / _2621))) + floor(float(uint(cbSceneParam._m0[85u].x * _839) / _2621)));
        float _2642 = (log2(_2608 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2643 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        uint _2646 = uint(isnan(14.0) ? _2643 : (isnan(_2643) ? 14.0 : min(_2643, 14.0)));
        uvec4 _2651 = texelFetch(g_lightClusterGridBuffer, int(((_2646 << 2u) + (_2632 << 6u)) >> 2u));
        uint _2652 = _2651.x;
        uint _2653 = _2620.z;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        if (((((1u << ((_2653 >> 4u) & 15u)) + 4294967295u) & _2652) == 0u) || ((_2653 & 240u) == 0u))
        {
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
            _2759 = 0.0;
            _2761 = 0.0;
            _2763 = 0.0;
        }
        else
        {
            float _2754;
            float _2756;
            float _2758;
            float _2760;
            float _2762;
            float _2764;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            uint _2912 = 0u;
            uint _2921;
            bool _2922;
            for (;;)
            {
                _2921 = texelFetch(g_lightClassification, int((((_2646 << 5u) + (_2632 << 9u)) + (_2912 << 2u)) >> 2u)).x;
                _2922 = _2921 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2922)
                {
                    frontier_phi_66_pred = _2906;
                    frontier_phi_66_pred_1 = _2911;
                    frontier_phi_66_pred_2 = _2910;
                    frontier_phi_66_pred_3 = _2909;
                    frontier_phi_66_pred_4 = _2908;
                    frontier_phi_66_pred_5 = _2907;
                }
                else
                {
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    uint _3057;
                    _3051 = _2906;
                    _3052 = _2907;
                    _3053 = _2908;
                    _3054 = _2909;
                    _3055 = _2910;
                    _3056 = _2911;
                    _3057 = _2921;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    for (;;)
                    {
                        uint _3061 = uint(findLSB(_3057)) + (_2912 << 5u);
                        uint _3058 = (_3057 + 4294967295u) & _3057;
                        uint _3063 = _3061 * 48u;
                        vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3063)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3063 + 3u)).x));
                        uint _3083 = (_3061 * 48u) + 4u;
                        vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3102 = (_3061 * 48u) + 8u;
                        vec3 _3113 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x));
                        float _3117 = _3077.x - _2606;
                        float _3118 = _3077.y - _2607;
                        float _3119 = _3077.z - _2608;
                        float _3120 = dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119));
                        float _3123 = inversesqrt(_3120);
                        float _3124 = _3123 * _3117;
                        float _3125 = _3123 * _3118;
                        float _3126 = _3123 * _3119;
                        float _3127 = dot(vec3(_858, _861, _864), vec3(_3124, _3125, _3126));
                        float _3132 = 1.0 - (_3120 * _3077.w);
                        float _4521 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3133 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3134 = sqrt(_3120) * _3096.w;
                        float _3137 = 1.39999997615814208984375 / (_3134 + 1.39999997615814208984375);
                        float _3138 = _3137 * _3137;
                        float _3141 = ((1.0 - _3138) * _3127) + _3138;
                        float _3144 = _3134 * _3134;
                        float _3148 = ((isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * _3133) / ((_3144 * 0.699999988079071044921875) + 1.0);
                        float _3152 = (-0.0) - _2606;
                        float _3153 = (-0.0) - _2607;
                        float _3154 = (-0.0) - _2608;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3159 = _3158 * _3152;
                        float _3160 = _3158 * _3153;
                        float _3161 = _3158 * _3154;
                        float _3169 = exp2(log2(1.0 / ((_3144 * 3.5) + 5.0)) * 0.25);
                        float _3170 = 1.0 - _918;
                        float _3177 = sqrt(1.0 - ((1.0 - (_3170 * _3170)) * (1.0 - (_3169 * _3169))));
                        float _3178 = _3177 * _3177;
                        float _3179 = _3178 * _3178;
                        float _3180 = _3159 + _3124;
                        float _3181 = _3160 + _3125;
                        float _3182 = _3161 + _3126;
                        float _3186 = inversesqrt(dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182)));
                        float _3190 = dot(vec3(_858, _861, _864), vec3(_3159, _3160, _3161));
                        float _4537 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3193 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                        float _3194 = dot(vec3(_858, _861, _864), vec3(_3186 * _3180, _3186 * _3181, _3186 * _3182));
                        float _4548 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3197 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                        float _3201 = ((_3197 * _3197) * (_3179 + (-1.0))) + 1.0;
                        float _3202 = _3137 * _3178;
                        float _3203 = _3202 * _3202;
                        float _3206 = ((1.0 - _3203) * _3127) + _3203;
                        float _4559 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                        float _3208 = 1.0 - _3178;
                        float _3218 = (0.5 / (((_3207 * ((_3193 * _3208) + _3178)) + 9.9999999392252902907785028219223e-09) + (((_3207 * _3208) + _3178) * _3193))) * _3207;
                        float _4570 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3229 = (((_3179 * 3.1415927410125732421875) * (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) / ((_3201 * _3201) * ((_3144 * 2.1991131305694580078125) + 3.141590118408203125))) * _3133;
                        _2981 = (_3148 * _3096.x) + _3054;
                        _2982 = (_3148 * _3096.y) + _3055;
                        _2983 = (_3148 * _3096.z) + _3056;
                        _2978 = (_3229 * _3113.x) + _3051;
                        _2979 = (_3229 * _3113.y) + _3052;
                        _2980 = (_3229 * _3113.z) + _3053;
                        if (_3058 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3051 = _2978;
                            _3052 = _2979;
                            _3053 = _2980;
                            _3054 = _2981;
                            _3055 = _2982;
                            _3056 = _2983;
                            _3057 = _3058;
                        }
                    }
                    frontier_phi_66_pred = _2978;
                    frontier_phi_66_pred_1 = _2983;
                    frontier_phi_66_pred_2 = _2982;
                    frontier_phi_66_pred_3 = _2981;
                    frontier_phi_66_pred_4 = _2980;
                    frontier_phi_66_pred_5 = _2979;
                }
                _2754 = frontier_phi_66_pred;
                _2764 = frontier_phi_66_pred_1;
                _2762 = frontier_phi_66_pred_2;
                _2760 = frontier_phi_66_pred_3;
                _2758 = frontier_phi_66_pred_4;
                _2756 = frontier_phi_66_pred_5;
                uint _2913 = _2912 + 1u;
                if (_2913 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2906 = _2754;
                    _2907 = _2756;
                    _2908 = _2758;
                    _2909 = _2760;
                    _2910 = _2762;
                    _2911 = _2764;
                    _2912 = _2913;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
            _2759 = _2760;
            _2761 = _2762;
            _2763 = _2764;
        }
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.z;
        uint _2770 = (_2768 >> 8u) & 15u;
        float _2874;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        if (((4294967295u << _2770) & _2652) == 0u)
        {
            _2874 = _2753;
            _2876 = _2755;
            _2878 = _2757;
            _2880 = _2759;
            _2882 = _2761;
            _2884 = _2763;
        }
        else
        {
            float _2899 = inversesqrt(dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608)));
            float _2900 = _2899 * _2606;
            float _2901 = _2899 * _2607;
            float _2902 = _2899 * _2608;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2770 < ((_2768 >> 12u) & 15u))
            {
                float _2875;
                float _2877;
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _3034 = _2753;
                float _3035 = _2755;
                float _3036 = _2757;
                float _3037 = _2759;
                float _3038 = _2761;
                float _3039 = _2763;
                uint _3040 = _2770;
                uint _3049;
                bool _3050;
                for (;;)
                {
                    _3049 = texelFetch(g_lightClassification, int((((_2646 << 5u) + (_2632 << 9u)) + (_3040 << 2u)) >> 2u)).x;
                    _3050 = _3049 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3050)
                    {
                        frontier_phi_77_pred = _3039;
                        frontier_phi_77_pred_1 = _3038;
                        frontier_phi_77_pred_2 = _3037;
                        frontier_phi_77_pred_3 = _3036;
                        frontier_phi_77_pred_4 = _3035;
                        frontier_phi_77_pred_5 = _3034;
                    }
                    else
                    {
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3256 = _3034;
                        float _3257 = _3035;
                        float _3258 = _3036;
                        float _3259 = _3037;
                        float _3260 = _3038;
                        float _3261 = _3039;
                        uint _3262 = _3049;
                        uint _3263;
                        vec4 _3288;
                        float _3289;
                        vec4 _3304;
                        vec3 _3316;
                        vec4 _3331;
                        vec4 _3346;
                        float _3392;
                        bool _3393;
                        for (;;)
                        {
                            uint _3273 = ((_3040 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3262));
                            _3263 = (_3262 + 4294967295u) & _3262;
                            uint _3275 = _3273 * 40u;
                            _3288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3275 + 3u)).x));
                            _3289 = _3288.w;
                            uint _3291 = (_3273 * 40u) + 4u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3306 = (_3273 * 40u) + 8u;
                            _3316 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x));
                            uint _3318 = (_3273 * 40u) + 16u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3333 = (_3273 * 40u) + 20u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3273 * 40u) + 24u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3367 = (_3273 * 40u) + 28u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            _3392 = fma(_2608, _3380.z, fma(_2607, _3380.y, _3380.x * _2606)) + _3380.w;
                            _3393 = !((fma(_2608, _3361.z, fma(_2607, _3361.y, _3361.x * _2606)) + _3361.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3393)
                            {
                                float _3420 = _3288.x - _2606;
                                float _3421 = _3288.y - _2607;
                                float _3422 = _3288.z - _2608;
                                float _3423 = dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422));
                                float _3426 = inversesqrt(_3423);
                                float _3427 = _3426 * _3420;
                                float _3428 = _3426 * _3421;
                                float _3429 = _3426 * _3422;
                                float _3433 = 1.0 - (_3423 / (_3289 * _3289));
                                float _4581 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3434 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3438 = sqrt(_3423) * _3304.w;
                                float _3440 = 1.39999997615814208984375 / (_3438 + 1.39999997615814208984375);
                                float _3441 = _3440 * _3440;
                                float _3444 = ((1.0 - _3441) * dot(vec3(_3427, _3428, _3429), vec3(_858, _861, _864))) + _3441;
                                float _3447 = _3438 * _3438;
                                float _3451 = (fma(_2608, _3331.z, fma(_2607, _3331.y, _3331.x * _2606)) + _3331.w) / _3392;
                                float _3452 = (fma(_2608, _3346.z, fma(_2607, _3346.y, _3346.x * _2606)) + _3346.w) / _3392;
                                float _3456 = 1.0 - dot(vec2(_3451, _3452), vec2(_3451, _3452));
                                float _4597 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                                float _3458 = _3457 * (((isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))) * _3434) / ((_3447 * 0.699999988079071044921875) + 1.0));
                                float _3470 = exp2(log2(1.0 / ((_3447 * 3.5) + 5.0)) * 0.25);
                                float _3471 = 1.0 - _918;
                                float _3478 = sqrt(1.0 - ((1.0 - (_3471 * _3471)) * (1.0 - (_3470 * _3470))));
                                float _3479 = _3478 * _3478;
                                float _3480 = _3479 * _3479;
                                float _3481 = _3427 - _2900;
                                float _3482 = _3428 - _2901;
                                float _3483 = _3429 - _2902;
                                float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                                float _3491 = dot(vec3(_858, _861, _864), vec3((-0.0) - _2900, (-0.0) - _2901, (-0.0) - _2902));
                                float _4608 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
                                float _3495 = dot(vec3(_858, _861, _864), vec3(_3487 * _3481, _3487 * _3482, _3487 * _3483));
                                float _4619 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3498 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                                float _3502 = ((_3498 * _3498) * (_3480 + (-1.0))) + 1.0;
                                float _3503 = _3440 * _3479;
                                float _3504 = _3503 * _3503;
                                float _3510 = ((1.0 - _3504) * dot(vec3(_858, _861, _864), vec3(_3427, _3428, _3429))) + _3504;
                                float _4630 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
                                float _3512 = 1.0 - _3479;
                                float _3522 = (0.5 / (((_3511 * ((_3494 * _3512) + _3479)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3479) * _3494))) * _3511;
                                float _4641 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3532 = (_3457 * _3434) * (((_3480 * 3.1415927410125732421875) * (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) / ((_3502 * _3502) * ((_3447 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3458 * _3304.y;
                                frontier_phi_83_pred_1 = _3458 * _3304.x;
                                frontier_phi_83_pred_2 = _3532 * _3316.z;
                                frontier_phi_83_pred_3 = _3532 * _3316.y;
                                frontier_phi_83_pred_4 = _3532 * _3316.x;
                                frontier_phi_83_pred_5 = _3458 * _3304.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3540 = frontier_phi_83_pred;
                            _3539 = frontier_phi_83_pred_1;
                            _3538 = frontier_phi_83_pred_2;
                            _3537 = frontier_phi_83_pred_3;
                            _3536 = frontier_phi_83_pred_4;
                            _3541 = frontier_phi_83_pred_5;
                            _3246 = _3539 + _3259;
                            _3247 = _3540 + _3260;
                            _3248 = _3541 + _3261;
                            _3243 = _3536 + _3256;
                            _3244 = _3537 + _3257;
                            _3245 = _3538 + _3258;
                            if (_3263 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3263;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3248;
                        frontier_phi_77_pred_1 = _3247;
                        frontier_phi_77_pred_2 = _3246;
                        frontier_phi_77_pred_3 = _3245;
                        frontier_phi_77_pred_4 = _3244;
                        frontier_phi_77_pred_5 = _3243;
                    }
                    _2885 = frontier_phi_77_pred;
                    _2883 = frontier_phi_77_pred_1;
                    _2881 = frontier_phi_77_pred_2;
                    _2879 = frontier_phi_77_pred_3;
                    _2877 = frontier_phi_77_pred_4;
                    _2875 = frontier_phi_77_pred_5;
                    uint _3041 = _3040 + 1u;
                    if (_3041 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3034 = _2875;
                        _3035 = _2877;
                        _3036 = _2879;
                        _3037 = _2881;
                        _3038 = _2883;
                        _3039 = _2885;
                        _3040 = _3041;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2879;
                frontier_phi_58_59_ladder_1 = _2885;
                frontier_phi_58_59_ladder_2 = _2883;
                frontier_phi_58_59_ladder_3 = _2881;
                frontier_phi_58_59_ladder_4 = _2877;
                frontier_phi_58_59_ladder_5 = _2875;
            }
            else
            {
                frontier_phi_58_59_ladder = _2757;
                frontier_phi_58_59_ladder_1 = _2763;
                frontier_phi_58_59_ladder_2 = _2761;
                frontier_phi_58_59_ladder_3 = _2759;
                frontier_phi_58_59_ladder_4 = _2755;
                frontier_phi_58_59_ladder_5 = _2753;
            }
            _2874 = frontier_phi_58_59_ladder_5;
            _2876 = frontier_phi_58_59_ladder_4;
            _2878 = frontier_phi_58_59_ladder;
            _2880 = frontier_phi_58_59_ladder_3;
            _2882 = frontier_phi_58_59_ladder_2;
            _2884 = frontier_phi_58_59_ladder_1;
        }
        float _2889 = isnan(1.0) ? _902 : (isnan(_902) ? 1.0 : min(_902, 1.0));
        _2665 = (_2889 * _2880) + _2117;
        _2667 = (_2889 * _2882) + _2119;
        _2669 = (_2889 * _2884) + _2121;
        _2671 = ((_2874 * 0.039999999105930328369140625) * _2889) + _2450;
        _2673 = ((_2876 * 0.039999999105930328369140625) * _2889) + _2452;
        _2675 = ((_2878 * 0.039999999105930328369140625) * _2889) + _2454;
    }
    else
    {
        _2665 = _2117;
        _2667 = _2119;
        _2669 = _2121;
        _2671 = _2450;
        _2673 = _2452;
        _2675 = _2454;
    }
    float _4657 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4668 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4679 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2692 = ((isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2665 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _902))) + ((_2671 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1738)) * cbPerFrame._m0[3u].x);
    float _2693 = ((isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0))) * (_2667 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _902))) + ((_2673 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1738)) * cbPerFrame._m0[3u].x);
    float _2694 = ((isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2669 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _902))) + ((_2675 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1738)) * cbPerFrame._m0[3u].x);
    uint _2695 = _257 + 6u;
    float _2703 = _839 / cbSceneParam._m0[86u].x;
    float _2704 = _840 / cbSceneParam._m0[86u].y;
    vec4 _2718 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2703, _2704, (log2((isnan(cbSceneParam._m0[77u].w) ? _761 : (isnan(_761) ? cbSceneParam._m0[77u].w : min(_761, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2720 = _2718.x;
    float _2721 = _2718.y;
    float _2722 = _2718.z;
    float _2723 = _2718.w;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    if (_761 > cbSceneParam._m0[78u].w)
    {
        float _2778 = isnan(_761) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _761 : min(cbSceneParam._m0[80u].w, _761));
        float _2779 = _2778 / _761;
        float _2790 = _2779 * _812;
        float _2791 = _813 * _2779;
        float _2792 = (-0.0) - _2791;
        float _2794 = _2779 * _814;
        float _2796 = (cbSceneParam._m0[77u].w * _2792) / _2778;
        float _2797 = _2796 + cbSceneParam._m0[79u].w;
        float _2798 = cbSceneParam._m0[79u].w - _2791;
        float _2804 = sqrt(((_2790 * _2790) + (_2791 * _2791)) + (_2794 * _2794));
        float _2807 = (1.0 - (cbSceneParam._m0[77u].w / _2778)) * _2804;
        float _2812 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2814 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2991;
        if (abs((_2792 - _2796) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2991 = ((((_2797 > 0.0) ? exp2(_2812 * _2797) : (2.0 - exp2(_2814 * _2797))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2807;
        }
        else
        {
            float _2935 = 1.0 / cbSceneParam._m0[80u].x;
            float _2936 = isnan(_2798) ? _2797 : (isnan(_2797) ? _2798 : max(_2797, _2798));
            float _2937 = isnan(_2798) ? _2797 : (isnan(_2797) ? _2798 : min(_2797, _2798));
            float _2946 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : min(_2936, 0.0));
            float _2947 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : min(_2937, 0.0));
            _2991 = ((abs(_2804 / _2792) * cbSceneParam._m0[80u].y) * ((((_2946 - _2947) * 2.0) - ((exp2(_2812 * (isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0)))) - exp2(_2812 * (isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0))))) * _2935)) - ((exp2(_2814 * _2946) - exp2(_2814 * _2947)) * _2935))) + (_2807 * cbSceneParam._m0[80u].z);
        }
        vec4 _2993 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2703, _2704, 1.0), 0.0);
        float _3002 = exp2((_2991 * (-1.44269502162933349609375)) * (1.0 - _2993.w));
        float _3003 = log2(_3002);
        float _3019 = log2(_2723);
        _2816 = (exp2(_3019 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3003 * cbSceneParam._m0[78u].x)) * _2993.x) / cbSceneParam._m0[78u].x)) + _2720;
        _2818 = (exp2(_3019 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3003 * cbSceneParam._m0[78u].y)) * _2993.y) / cbSceneParam._m0[78u].y)) + _2721;
        _2820 = (exp2(_3019 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3003 * cbSceneParam._m0[78u].z)) * _2993.z) / cbSceneParam._m0[78u].z)) + _2722;
        _2822 = _3002 * _2723;
    }
    else
    {
        _2816 = _2720;
        _2818 = _2721;
        _2820 = _2722;
        _2822 = _2723;
    }
    bool _3029;
    vec4 _2832;
    vec4 _2854;
    float _2856;
    float _2860;
    float _2861;
    float _2862;
    float _2863;
    bool _2873;
    for (;;)
    {
        _2832 = cbMatDynParam._m0[0u];
        float _2834 = roundEven(_2832.y);
        bool _2835 = _2834 == 3.0;
        float _2836 = log2(_2822);
        float _2843 = exp2(_2836 * cbSceneParam._m0[78u].x) * _2692;
        float _2844 = exp2(_2836 * cbSceneParam._m0[78u].y) * _2693;
        float _2845 = exp2(_2836 * cbSceneParam._m0[78u].z) * _2694;
        float _2852 = _828 + (-0.5);
        _2854 = cbMtdParam._m0[1u];
        _2856 = _2854.y * _2852;
        float _2859 = (_2834 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2860 = _2859 * (_2835 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2816)));
        _2861 = _2859 * (_2835 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2818)));
        _2862 = _2859 * (_2835 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2820)));
        _2863 = _2852 * 0.999000012874603271484375;
        _2873 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2873)
        {
            if ((cbInstanceData._m0[_257 + 7u].x + _2863) < 0.5)
            {
                _3029 = true;
                break;
            }
        }
        uint _2970 = _877 + uint(_2832.w);
        if ((cbInstanceData._m0[_2970].w < 1.0) && ((cbInstanceData._m0[_2970].w + _2863) < 0.5))
        {
            _3029 = true;
            break;
        }
        if ((_2856 + 1.0) < _2854.x)
        {
            _3029 = true;
            break;
        }
        _3029 = false;
        break;
    }
    float _3234;
    if (_3029)
    {
        discard_state = true;
        _3234 = 0.0;
    }
    else
    {
        _3234 = cbInstanceData._m0[_2695].w;
    }
    SV_Target.x = _2860;
    SV_Target.y = _2861;
    SV_Target.z = _2862;
    SV_Target.w = _3234;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2695].w;
    discard_exit();
}


