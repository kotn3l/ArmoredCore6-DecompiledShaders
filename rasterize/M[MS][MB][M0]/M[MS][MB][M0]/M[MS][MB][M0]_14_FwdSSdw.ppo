#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _979;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _292 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _246) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _247) + cbTextureTilingScale._m0[20u].w));
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _322 = _318.z;
    float _326 = (_318.x * 2.0) + (-1.0);
    float _327 = (_318.y * 2.0) + (-1.0);
    float _328 = dot(vec2(_326, _327), vec2(_326, _327));
    float _3313 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _334 = sqrt(1.0 - (isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))));
    float _339 = _326 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_292.x * 2.0) + (-1.0)));
    float _340 = _327 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_292.y * 2.0) + (-1.0)));
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _359 = _357.x;
    float _360 = 1.0 - _359;
    float _376 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_359 - _360) * cbMtdParam._m0[24u].z) + _360) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3324 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _384 = (_377 * (cbMtdParam._m0[17u].x - _272)) + _272;
    float _385 = (_377 * (cbMtdParam._m0[17u].y - _273)) + _273;
    float _386 = (_377 * (cbMtdParam._m0[17u].z - _274)) + _274;
    float _391 = (((_292.z - _322) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _322;
    vec4 _404 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _411 = (_404.x * 2.0) + (-1.0);
    float _412 = (_404.y * 2.0) + (-1.0);
    float _413 = dot(vec2(_411, _412), vec2(_411, _412));
    float _3335 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _421 = (_377 * (_404.z - _391)) + _391;
    float _433 = (((_411 - _339) + (cbMtdParam._m0[21u].x * _339)) * _377) + _339;
    float _434 = (((_412 - _340) + (cbMtdParam._m0[21u].x * _340)) * _377) + _340;
    float _435 = (_377 * (sqrt(1.0 - (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) - _334)) + _334;
    float _440 = cbMtdParam._m0[22u].x + _318.w;
    float _443 = fma(_435, _213 * NORMAL.x, fma(_434, _220 * TANGENT.x, (_206 * _198) * _433));
    float _446 = fma(_435, _213 * NORMAL.y, fma(_434, _220 * TANGENT.y, (_206 * _199) * _433));
    float _449 = fma(_435, _213 * NORMAL.z, fma(_434, _220 * TANGENT.z, (_206 * _200) * _433));
    float _453 = inversesqrt(dot(vec3(_443, _446, _449), vec3(_443, _446, _449)));
    float _454 = _453 * _443;
    float _455 = _453 * _446;
    float _456 = _453 * _449;
    float _3346 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _457 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _3357 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3368 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _3379 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3390 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _475 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _526 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _516);
    float _527 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _516);
    float _528 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _516);
    float _532 = inversesqrt(dot(vec3(_526, _527, _528), vec3(_526, _527, _528)));
    float _533 = _526 * _532;
    float _534 = _527 * _532;
    float _535 = _528 * _532;
    float _541 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _542 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _563 = fma(_456, cbSceneParam._m0[5u].z, fma(_455, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _454));
    float _566 = fma(_456, cbSceneParam._m0[6u].z, fma(_455, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _454));
    float _569 = fma(_456, cbSceneParam._m0[7u].z, fma(_455, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _454));
    uint _583 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _589 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0)))) * cbInstanceData._m0[_583].x;
    float _590 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_583].y;
    float _591 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_583].z;
    float _3401 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _3423 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    vec4 _603 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _541, cbSceneParam._m0[86u].y * _542));
    float _607 = ((isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) * TEXCOORD_5.w) * _603.x;
    float _608 = dot(vec3(_454, _455, _456), vec3(_533, _534, _535));
    float _611 = _608 * 2.0;
    float _615 = (_611 * _454) - _533;
    float _616 = (_611 * _455) - _534;
    float _617 = (_611 * _456) - _535;
    float _621 = abs(dot(vec3(_533, _534, _535), vec3(_454, _455, _456)));
    float _3434 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _623 = sqrt(_457);
    float _636 = exp2((_623 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_623 * 3.0));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _978;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _703 = fma(_676, cbModelParam._m0[26u].z, fma(_672, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _668));
        float _707 = fma(_676, cbModelParam._m0[27u].z, fma(_672, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _668));
        float _711 = fma(_676, cbModelParam._m0[28u].z, fma(_672, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _668));
        float _736 = _668 + _454;
        float _737 = _672 + _455;
        float _738 = _676 + _456;
        float _748 = fma(_738, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _736)) - _703;
        float _749 = fma(_738, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _736)) - _707;
        float _750 = fma(_738, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _736)) - _711;
        float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
        float _767 = ((_754 * _748) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_703 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _768 = ((_754 * _749) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_707 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _769 = ((_754 * _750) / cbModelParam._m0[34u].z) + ((((((_711 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        float _806 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_772.x + (-0.5));
        float _808 = _806 * (_772.y + (-0.5));
        float _809 = _806 * (_772.z + (-0.5));
        float _816 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_779.x + (-0.5));
        float _818 = _816 * (_779.y + (-0.5));
        float _819 = _816 * (_779.z + (-0.5));
        float _826 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_786.x + (-0.5));
        float _828 = _826 * (_786.y + (-0.5));
        float _829 = _826 * (_786.z + (-0.5));
        float _836 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_793.x + (-0.5));
        float _838 = _836 * (_793.y + (-0.5));
        float _839 = _836 * (_793.z + (-0.5));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = _807 * 0.5;
        float _844 = _817 * 0.5;
        float _845 = _827 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _860 = (dot(vec3(_454, _455, _456), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _870 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3482 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_872 + 1.0))) + _877) * _840;
        float _887 = _808 * 0.5;
        float _888 = _818 * 0.5;
        float _889 = _828 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _903 = (dot(vec3(_454, _455, _456), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _912 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3515 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_914 + 1.0))) + _919) * _841;
        float _929 = _809 * 0.5;
        float _930 = _819 * 0.5;
        float _931 = _829 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _945 = (dot(vec3(_454, _455, _456), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _954 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3548 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_956 + 1.0))) + _961) * _842;
        _978 = _809;
        _980 = _808;
        _981 = _807;
        _982 = _819;
        _983 = _818;
        _984 = _817;
        _985 = _829;
        _986 = _828;
        _987 = _827;
        _988 = _842;
        _989 = _841;
        _990 = _840;
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
        _992 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
    }
    else
    {
        _978 = _979;
        _980 = _979;
        _981 = _979;
        _982 = _979;
        _983 = _979;
        _984 = _979;
        _985 = _979;
        _986 = _979;
        _987 = _979;
        _988 = _979;
        _989 = _979;
        _990 = _979;
        _991 = 0.0;
        _992 = 0.0;
        _993 = 0.0;
    }
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1018 = fma(_676, cbModelParam._m0[30u].z, fma(_672, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _668));
        float _1022 = fma(_676, cbModelParam._m0[31u].z, fma(_672, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _668));
        float _1026 = fma(_676, cbModelParam._m0[32u].z, fma(_672, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _668));
        float _1049 = _668 + _454;
        float _1050 = _672 + _455;
        float _1051 = _676 + _456;
        float _1061 = fma(_1051, cbModelParam._m0[30u].z, fma(_1050, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049)) - _1018;
        float _1062 = fma(_1051, cbModelParam._m0[31u].z, fma(_1050, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049)) - _1022;
        float _1063 = fma(_1051, cbModelParam._m0[32u].z, fma(_1050, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049)) - _1026;
        float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
        float _1080 = ((_1067 * _1061) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1018 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1067 * _1062) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1022 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1067 * _1063) / cbModelParam._m0[35u].z) + ((((((_1026 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        float _1117 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1084.x + (-0.5));
        float _1119 = _1117 * (_1084.y + (-0.5));
        float _1120 = _1117 * (_1084.z + (-0.5));
        float _1127 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1091.x + (-0.5));
        float _1129 = _1127 * (_1091.y + (-0.5));
        float _1130 = _1127 * (_1091.z + (-0.5));
        float _1137 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1098.x + (-0.5));
        float _1139 = _1137 * (_1098.y + (-0.5));
        float _1140 = _1137 * (_1098.z + (-0.5));
        float _1147 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1105.x + (-0.5));
        float _1149 = _1147 * (_1105.y + (-0.5));
        float _1150 = _1147 * (_1105.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_454, _455, _456), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3611 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1181 + 1.0))) + _1186) * _1151;
        float _1196 = _1119 * 0.5;
        float _1197 = _1129 * 0.5;
        float _1198 = _1139 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_454, _455, _456), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3644 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1223 + 1.0))) + _1228) * _1152;
        float _1238 = _1120 * 0.5;
        float _1239 = _1130 * 0.5;
        float _1240 = _1140 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_454, _455, _456), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3677 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1265 + 1.0))) + _1270) * _1153;
        _1287 = _1120;
        _1288 = _1119;
        _1289 = _1118;
        _1290 = _1130;
        _1291 = _1129;
        _1292 = _1128;
        _1293 = _1140;
        _1294 = _1139;
        _1295 = _1138;
        _1296 = _1153;
        _1297 = _1152;
        _1298 = _1151;
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
    }
    else
    {
        _1287 = _979;
        _1288 = _979;
        _1289 = _979;
        _1290 = _979;
        _1291 = _979;
        _1292 = _979;
        _1293 = _979;
        _1294 = _979;
        _1295 = _979;
        _1296 = _979;
        _1297 = _979;
        _1298 = _979;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _991)) + _991;
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _992)) + _992;
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _993)) + _993;
    float _1334 = fma(_1313, cbSceneParam._m0[89u].z, fma(_1312, cbSceneParam._m0[89u].y, _1311 * cbSceneParam._m0[89u].x));
    float _1337 = fma(_1313, cbSceneParam._m0[90u].z, fma(_1312, cbSceneParam._m0[90u].y, _1311 * cbSceneParam._m0[90u].x));
    float _1340 = fma(_1313, cbSceneParam._m0[91u].z, fma(_1312, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1311));
    float _1355 = _615 * 0.5;
    float _1356 = _616 * 0.5;
    float _1357 = _617 * 0.5;
    float _1358 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1361 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1364 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1398;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1371 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_978, _982, _985, _988));
        float _1375 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_980, _983, _986, _989));
        float _1379 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_981, _984, _987, _990));
        float _1386 = dot(vec4(cbModelParam._m0[39u]), vec4(_1355, _1356, _1357, 1.0));
        _1398 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1386) ? 0.0 : (isnan(0.0) ? _1386 : max(0.0, _1386))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1398 = 1.0;
    }
    float _1409;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1400 = dot(vec4(cbModelParam._m0[40u]), vec4(_1355, _1356, _1357, 1.0));
        _1409 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1400) ? 0.0 : (isnan(0.0) ? _1400 : max(0.0, _1400))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1409 = 1.0;
    }
    float _1413 = (_1409 * cbModelParam._m0[1u].x) + (_1398 * (1.0 - cbModelParam._m0[1u].x));
    float _1423 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _457);
    float _1424 = isnan(_1423) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1423 : min(cbModelParam._m0[25u].z, _1423));
    float _1505;
    float _1507;
    float _1509;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1472 = fma(_676, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _668)) + cbModelParam._m0[13u].w;
        float _1476 = fma(_676, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _668)) + cbModelParam._m0[14u].w;
        float _1480 = fma(_676, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _668)) + cbModelParam._m0[15u].w;
        float _1483 = fma(_617, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _615));
        float _1486 = fma(_617, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _615));
        float _1489 = fma(_617, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _615));
        float _1517;
        if (_1483 > 0.0)
        {
            _1517 = abs((1.0 - _1472) / _1483);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1472 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1517 = frontier_phi_14_12_ladder;
        }
        float _1742;
        if (_1486 > 0.0)
        {
            _1742 = abs((1.0 - _1476) / _1486);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1476 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1742 = frontier_phi_23_19_ladder;
        }
        float _1988;
        if (_1489 > 0.0)
        {
            _1988 = abs((1.0 - _1480) / _1489);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1480 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1988 = frontier_phi_35_30_ladder;
        }
        float _1990 = isnan(_1742) ? _1517 : (isnan(_1517) ? _1742 : min(_1517, _1742));
        float _1991 = isnan(_1988) ? _1990 : (isnan(_1990) ? _1988 : min(_1990, _1988));
        float _1995 = (_1991 * _1483) + _1472;
        float _1996 = (_1991 * _1486) + _1476;
        float _1997 = (_1991 * _1489) + _1480;
        float _1998 = _1991 * 9.9999997473787516355514526367188e-05;
        float _2000 = (-1.0) - _1998;
        float _2002 = _1998 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1997 > _2002) || ((_1997 < _2000) || ((_1996 > _2002) || ((_1996 < _2000) || ((_1995 < _2000) || (_1995 > _2002))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2121 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1997, cbModelParam._m0[9u].z, fma(_1996, cbModelParam._m0[9u].y, _1995 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1997, cbModelParam._m0[10u].z, fma(_1996, cbModelParam._m0[10u].y, _1995 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1997, cbModelParam._m0[11u].z, fma(_1996, cbModelParam._m0[11u].y, _1995 * cbModelParam._m0[11u].x))), _1424);
            frontier_phi_13_35_ladder = _2121.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2121.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2121.x * cbModelParam._m0[1u].y;
        }
        _1505 = frontier_phi_13_35_ladder_2;
        _1507 = frontier_phi_13_35_ladder_1;
        _1509 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_615, _616, _617), _1424);
        _1505 = _1493.x * cbModelParam._m0[1u].y;
        _1507 = _1493.y * cbModelParam._m0[1u].y;
        _1509 = _1493.z * cbModelParam._m0[1u].y;
    }
    float _1513 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _457);
    float _1514 = isnan(_1513) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1513 : min(cbModelParam._m0[25u].w, _1513));
    float _1605;
    float _1607;
    float _1609;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1569 = fma(_676, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _668)) + cbModelParam._m0[21u].w;
        float _1573 = fma(_676, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _668)) + cbModelParam._m0[22u].w;
        float _1577 = fma(_676, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _668)) + cbModelParam._m0[23u].w;
        float _1580 = fma(_617, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _615));
        float _1583 = fma(_617, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _615));
        float _1586 = fma(_617, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _615));
        float _1747;
        if (_1580 > 0.0)
        {
            _1747 = abs((1.0 - _1569) / _1580);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1569 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1747 = frontier_phi_25_21_ladder;
        }
        float _2015;
        if (_1583 > 0.0)
        {
            _2015 = abs((1.0 - _1573) / _1583);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1573 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2015 = frontier_phi_37_32_ladder;
        }
        float _2220;
        if (_1586 > 0.0)
        {
            _2220 = abs((1.0 - _1577) / _1586);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1577 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2220 = frontier_phi_46_43_ladder;
        }
        float _2222 = isnan(_2015) ? _1747 : (isnan(_1747) ? _2015 : min(_1747, _2015));
        float _2223 = isnan(_2220) ? _2222 : (isnan(_2222) ? _2220 : min(_2222, _2220));
        float _2227 = (_2223 * _1580) + _1569;
        float _2228 = (_2223 * _1583) + _1573;
        float _2229 = (_2223 * _1586) + _1577;
        float _2230 = _2223 * 9.9999997473787516355514526367188e-05;
        float _2231 = (-1.0) - _2230;
        float _2233 = _2230 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2229 > _2233) || ((_2229 < _2231) || ((_2228 > _2233) || ((_2228 < _2231) || ((_2227 < _2231) || (_2227 > _2233))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2428 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2229, cbModelParam._m0[17u].z, fma(_2228, cbModelParam._m0[17u].y, _2227 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2229, cbModelParam._m0[18u].z, fma(_2228, cbModelParam._m0[18u].y, _2227 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2229, cbModelParam._m0[19u].z, fma(_2228, cbModelParam._m0[19u].y, _2227 * cbModelParam._m0[19u].x))), _1514);
            frontier_phi_22_46_ladder = _2428.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2428.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2428.x * cbModelParam._m0[1u].z;
        }
        _1605 = frontier_phi_22_46_ladder_2;
        _1607 = frontier_phi_22_46_ladder_1;
        _1609 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1589 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_615, _616, _617), _1514);
        _1605 = _1589.x * cbModelParam._m0[1u].z;
        _1607 = _1589.y * cbModelParam._m0[1u].z;
        _1609 = _1589.z * cbModelParam._m0[1u].z;
    }
    float _1621 = ((((1.0 - _636) * ((_623 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_636 * _623)) * _607;
    float _1622 = _1621 * ((cbModelParam._m0[1u].w * (_1605 - _1505)) + _1505);
    float _1623 = _1621 * ((cbModelParam._m0[1u].w * (_1607 - _1507)) + _1507);
    float _1624 = _1621 * ((cbModelParam._m0[1u].w * (_1609 - _1509)) + _1509);
    float _1627 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1630 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1633 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, _1622 * cbSceneParam._m0[91u].x));
    vec4 _1641 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_541, _542));
    float _1643 = _1641.w;
    float _1655 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1643);
    float _1656 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1643);
    float _1657 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1643);
    uvec4 _1661 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1663 = _1661.x * 14u;
    uint _1664 = _1663 + 13u;
    float _1671 = _607 + (-1.0);
    float _1676 = (cbLight._m0[_1664].x * _1671) + 1.0;
    float _1677 = (cbLight._m0[_1664].y * _1671) + 1.0;
    float _1678 = (cbLight._m0[_1664].z * _1671) + 1.0;
    float _1679 = (cbLight._m0[_1664].w * _1671) + 1.0;
    uint _1680 = _1663 + 5u;
    float _1686 = isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0));
    uint _1690 = _1663 + 4u;
    float _1700 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1704 = _1663 | 1u;
    float _1715 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_454, _455, _456));
    float _1718 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_454, _455, _456));
    float _3813 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _3824 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1723 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.3183098733425140380859375;
    float _1725 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.3183098733425140380859375;
    float _1732 = ((cbLight._m0[_1680].x * _1686) * _1725) + (((cbLight._m0[_1690].x * _1655) * _1700) * _1723);
    float _1733 = ((_1686 * cbLight._m0[_1680].y) * _1725) + (((cbLight._m0[_1690].y * _1656) * _1700) * _1723);
    float _1734 = ((_1686 * cbLight._m0[_1680].z) * _1725) + (((cbLight._m0[_1690].z * _1657) * _1700) * _1723);
    uvec4 _1739 = floatBitsToUint(cbLight._m0[_1663 + 12u]);
    bool _1741 = _1739.x == 0u;
    float _1752;
    float _1754;
    float _1756;
    if (_1741)
    {
        _1752 = _1732;
        _1754 = _1733;
        _1756 = _1734;
    }
    else
    {
        uint _1760 = _1663 + 6u;
        float _1776 = (dot(vec3(cbLight._m0[_1663 + 2u].xyz), vec3(_454, _455, _456)) * 0.5) + 0.5;
        float _1777 = _1776 * _1776;
        float _3835 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1779 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _1752 = (((cbLight._m0[_1760].x * 0.3183098733425140380859375) * _1778) * _1779) + _1732;
        _1754 = (((cbLight._m0[_1760].y * 0.3183098733425140380859375) * _1778) * _1779) + _1733;
        _1756 = (((cbLight._m0[_1760].z * 0.3183098733425140380859375) * _1778) * _1779) + _1734;
    }
    bool _1759 = _1739.y == 0u;
    float _1797;
    float _1799;
    float _1801;
    if (_1759)
    {
        _1797 = _1752;
        _1799 = _1754;
        _1801 = _1756;
    }
    else
    {
        uint _1959 = _1663 + 7u;
        float _1975 = (dot(vec3(cbLight._m0[_1663 + 3u].xyz), vec3(_454, _455, _456)) * 0.5) + 0.5;
        float _1976 = _1975 * _1975;
        float _3851 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1977 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1978 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _1797 = (((cbLight._m0[_1959].x * 0.3183098733425140380859375) * _1977) * _1978) + _1752;
        _1799 = (((cbLight._m0[_1959].y * 0.3183098733425140380859375) * _1977) * _1978) + _1754;
        _1801 = (((cbLight._m0[_1959].z * 0.3183098733425140380859375) * _1977) * _1978) + _1756;
    }
    uint _1804 = _1663 + 8u;
    float _1817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1663].w)) * _457) * 0.949999988079071044921875);
    float _1818 = _1817 * _1817;
    float _1819 = cbLight._m0[_1663].x + _533;
    float _1820 = cbLight._m0[_1663].y + _534;
    float _1821 = cbLight._m0[_1663].z + _535;
    float _1825 = inversesqrt(dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821)));
    float _1826 = _1825 * _1819;
    float _1827 = _1825 * _1820;
    float _1828 = _1825 * _1821;
    float _1829 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_1663].xyz));
    float _3867 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _3878 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _1833 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _1834 = dot(vec3(_454, _455, _456), vec3(_1826, _1827, _1828));
    float _3889 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1837 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _1838 = dot(vec3(cbLight._m0[_1663].xyz), vec3(_1826, _1827, _1828));
    float _3900 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1842 = _1818 * _1818;
    float _1846 = ((_1837 * _1837) * (_1842 + (-1.0))) + 1.0;
    float _1857 = (exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1858 = 1.0 - _1818;
    float _1869 = (0.5 / (((_1833 * ((_1832 * _1858) + _1818)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _1858) + _1818) * _1832))) * _1832;
    float _3911 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1871 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1842 / ((_1846 * _1846) * 3.141590118408203125));
    uint _1885 = _1663 + 9u;
    float _1896 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1704].w)) * _457) * 0.949999988079071044921875);
    float _1897 = _1896 * _1896;
    float _1898 = cbLight._m0[_1704].x + _533;
    float _1899 = cbLight._m0[_1704].y + _534;
    float _1900 = cbLight._m0[_1704].z + _535;
    float _1904 = inversesqrt(dot(vec3(_1898, _1899, _1900), vec3(_1898, _1899, _1900)));
    float _1905 = _1904 * _1898;
    float _1906 = _1904 * _1899;
    float _1907 = _1904 * _1900;
    float _1908 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_1704].xyz));
    float _3922 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _1912 = dot(vec3(_454, _455, _456), vec3(_1905, _1906, _1907));
    float _3933 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _1916 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1905, _1906, _1907));
    float _3944 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1920 = _1897 * _1897;
    float _1924 = ((_1915 * _1915) * (_1920 + (-1.0))) + 1.0;
    float _1933 = (exp2(log2(1.0 - (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1934 = 1.0 - _1897;
    float _1944 = (0.5 / (((_1833 * ((_1911 * _1934) + _1897)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _1934) + _1897) * _1911))) * _1911;
    float _3955 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1946 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_1920 / ((_1924 * _1924) * 3.141590118408203125));
    float _1956 = (((_1933 * cbLight._m0[_1885].x) * _1946) * _1686) + ((((cbLight._m0[_1804].x * _1655) * _1857) * _1871) * _1700);
    float _1957 = (((_1933 * cbLight._m0[_1885].y) * _1946) * _1686) + ((((cbLight._m0[_1804].y * _1656) * _1857) * _1871) * _1700);
    float _1958 = (((_1933 * cbLight._m0[_1885].z) * _1946) * _1686) + ((((cbLight._m0[_1804].z * _1657) * _1857) * _1871) * _1700);
    float _2020;
    float _2022;
    float _2024;
    if (_1741)
    {
        _2020 = _1956;
        _2022 = _1957;
        _2024 = _1958;
    }
    else
    {
        uint _2026 = _1663 + 2u;
        uint _2030 = _1663 + 10u;
        float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2026].w)) * _457) * 0.949999988079071044921875);
        float _2045 = _2044 * _2044;
        float _2046 = cbLight._m0[_2026].x + _533;
        float _2047 = cbLight._m0[_2026].y + _534;
        float _2048 = cbLight._m0[_2026].z + _535;
        float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
        float _2053 = _2052 * _2046;
        float _2054 = _2052 * _2047;
        float _2055 = _2052 * _2048;
        float _2056 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_2026].xyz));
        float _3966 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2059 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _2060 = dot(vec3(_454, _455, _456), vec3(_2053, _2054, _2055));
        float _3977 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2063 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2064 = dot(vec3(cbLight._m0[_2026].xyz), vec3(_2053, _2054, _2055));
        float _3988 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2068 = _2045 * _2045;
        float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
        float _2081 = (exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2082 = 1.0 - _2045;
        float _2092 = (0.5 / (((_1833 * ((_2059 * _2082) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _2082) + _2045) * _2059))) * _2059;
        float _3999 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2094 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
        float _2095 = isnan(1.0) ? _1678 : (isnan(_1678) ? 1.0 : min(_1678, 1.0));
        _2020 = (((_2081 * cbLight._m0[_2030].x) * _2094) * _2095) + _1956;
        _2022 = (((_2081 * cbLight._m0[_2030].y) * _2094) * _2095) + _1957;
        _2024 = (((_2081 * cbLight._m0[_2030].z) * _2094) * _2095) + _1958;
    }
    float _2130;
    float _2132;
    float _2134;
    if (_1759)
    {
        _2130 = _2020;
        _2132 = _2022;
        _2134 = _2024;
    }
    else
    {
        uint _2141 = _1663 + 3u;
        uint _2145 = _1663 + 11u;
        float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _457) * 0.949999988079071044921875);
        float _2160 = _2159 * _2159;
        float _2161 = cbLight._m0[_2141].x + _533;
        float _2162 = cbLight._m0[_2141].y + _534;
        float _2163 = cbLight._m0[_2141].z + _535;
        float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
        float _2168 = _2167 * _2161;
        float _2169 = _2167 * _2162;
        float _2170 = _2167 * _2163;
        float _2171 = dot(vec3(_454, _455, _456), vec3(cbLight._m0[_2141].xyz));
        float _4015 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2174 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _2175 = dot(vec3(_454, _455, _456), vec3(_2168, _2169, _2170));
        float _4026 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2178 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _2179 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2168, _2169, _2170));
        float _4037 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2183 = _2160 * _2160;
        float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
        float _2196 = (exp2(log2(1.0 - (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2197 = 1.0 - _2160;
        float _2207 = (0.5 / (((_1833 * ((_2174 * _2197) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _2197) + _2160) * _2174))) * _2174;
        float _4048 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2209 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
        float _2210 = isnan(1.0) ? _1679 : (isnan(_1679) ? 1.0 : min(_1679, 1.0));
        _2130 = (((_2196 * cbLight._m0[_2145].x) * _2209) * _2210) + _2020;
        _2132 = (((_2196 * cbLight._m0[_2145].y) * _2209) * _2210) + _2022;
        _2134 = (((_2196 * cbLight._m0[_2145].z) * _2209) * _2210) + _2024;
    }
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    if (_1661.y == 0u)
    {
        float _2285 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2286 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2285;
        float _2287 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2285;
        float _2288 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2285;
        uvec4 _2300 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2301 = _2300.x;
        uint _2312 = uint((float(_2300.y) * floor(float(uint(cbSceneParam._m0[85u].y * _542) / _2301))) + floor(float(uint(cbSceneParam._m0[85u].x * _541) / _2301)));
        float _2322 = (log2(_2288 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2323 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        uint _2326 = uint(isnan(14.0) ? _2323 : (isnan(_2323) ? 14.0 : min(_2323, 14.0)));
        uvec4 _2331 = texelFetch(g_lightClusterGridBuffer, int(((_2326 << 2u) + (_2312 << 6u)) >> 2u));
        uint _2332 = _2331.x;
        uint _2333 = _2300.z;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        if (((((1u << ((_2333 >> 4u) & 15u)) + 4294967295u) & _2332) == 0u) || ((_2333 & 240u) == 0u))
        {
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
            _2443 = 0.0;
        }
        else
        {
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2444;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            uint _2584 = 0u;
            uint _2593;
            bool _2594;
            for (;;)
            {
                _2593 = texelFetch(g_lightClassification, int((((_2326 << 5u) + (_2312 << 9u)) + (_2584 << 2u)) >> 2u)).x;
                _2594 = _2593 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2594)
                {
                    frontier_phi_61_pred = _2578;
                    frontier_phi_61_pred_1 = _2583;
                    frontier_phi_61_pred_2 = _2582;
                    frontier_phi_61_pred_3 = _2581;
                    frontier_phi_61_pred_4 = _2580;
                    frontier_phi_61_pred_5 = _2579;
                }
                else
                {
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    uint _2708;
                    _2702 = _2578;
                    _2703 = _2579;
                    _2704 = _2580;
                    _2705 = _2581;
                    _2706 = _2582;
                    _2707 = _2583;
                    _2708 = _2593;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    for (;;)
                    {
                        uint _2712 = uint(findLSB(_2708)) + (_2584 << 5u);
                        uint _2709 = (_2708 + 4294967295u) & _2708;
                        uint _2714 = _2712 * 48u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        uint _2734 = (_2712 * 48u) + 4u;
                        vec4 _2747 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 3u)).x));
                        uint _2753 = (_2712 * 48u) + 8u;
                        vec3 _2764 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x));
                        float _2768 = _2728.x - _2286;
                        float _2769 = _2728.y - _2287;
                        float _2770 = _2728.z - _2288;
                        float _2771 = dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770));
                        float _2774 = inversesqrt(_2771);
                        float _2775 = _2774 * _2768;
                        float _2776 = _2774 * _2769;
                        float _2777 = _2774 * _2770;
                        float _2778 = dot(vec3(_563, _566, _569), vec3(_2775, _2776, _2777));
                        float _2783 = 1.0 - (_2771 * _2728.w);
                        float _4074 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2784 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2785 = sqrt(_2771) * _2747.w;
                        float _2788 = 1.39999997615814208984375 / (_2785 + 1.39999997615814208984375);
                        float _2789 = _2788 * _2788;
                        float _2792 = ((1.0 - _2789) * _2778) + _2789;
                        float _2795 = _2785 * _2785;
                        float _2799 = ((isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0))) * _2784) / ((_2795 * 0.699999988079071044921875) + 1.0);
                        float _2803 = (-0.0) - _2286;
                        float _2804 = (-0.0) - _2287;
                        float _2805 = (-0.0) - _2288;
                        float _2809 = inversesqrt(dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805)));
                        float _2810 = _2809 * _2803;
                        float _2811 = _2809 * _2804;
                        float _2812 = _2809 * _2805;
                        float _2820 = exp2(log2(1.0 / ((_2795 * 3.5) + 5.0)) * 0.25);
                        float _2821 = 1.0 - _623;
                        float _2828 = sqrt(1.0 - ((1.0 - (_2821 * _2821)) * (1.0 - (_2820 * _2820))));
                        float _2829 = _2828 * _2828;
                        float _2830 = _2829 * _2829;
                        float _2831 = _2810 + _2775;
                        float _2832 = _2811 + _2776;
                        float _2833 = _2812 + _2777;
                        float _2837 = inversesqrt(dot(vec3(_2831, _2832, _2833), vec3(_2831, _2832, _2833)));
                        float _2841 = dot(vec3(_563, _566, _569), vec3(_2810, _2811, _2812));
                        float _4090 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
                        float _2844 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                        float _2845 = dot(vec3(_563, _566, _569), vec3(_2837 * _2831, _2837 * _2832, _2837 * _2833));
                        float _4101 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2848 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                        float _2852 = ((_2848 * _2848) * (_2830 + (-1.0))) + 1.0;
                        float _2853 = _2788 * _2829;
                        float _2854 = _2853 * _2853;
                        float _2857 = ((1.0 - _2854) * _2778) + _2854;
                        float _4112 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2858 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2859 = 1.0 - _2829;
                        float _2869 = (0.5 / (((_2858 * ((_2844 * _2859) + _2829)) + 9.9999999392252902907785028219223e-09) + (((_2858 * _2859) + _2829) * _2844))) * _2858;
                        float _4123 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2880 = (((_2830 * 3.1415927410125732421875) * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) / ((_2852 * _2852) * ((_2795 * 2.1991131305694580078125) + 3.141590118408203125))) * _2784;
                        _2637 = (_2799 * _2747.x) + _2705;
                        _2638 = (_2799 * _2747.y) + _2706;
                        _2639 = (_2799 * _2747.z) + _2707;
                        _2634 = (_2880 * _2764.x) + _2702;
                        _2635 = (_2880 * _2764.y) + _2703;
                        _2636 = (_2880 * _2764.z) + _2704;
                        if (_2709 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2702 = _2634;
                            _2703 = _2635;
                            _2704 = _2636;
                            _2705 = _2637;
                            _2706 = _2638;
                            _2707 = _2639;
                            _2708 = _2709;
                        }
                    }
                    frontier_phi_61_pred = _2634;
                    frontier_phi_61_pred_1 = _2639;
                    frontier_phi_61_pred_2 = _2638;
                    frontier_phi_61_pred_3 = _2637;
                    frontier_phi_61_pred_4 = _2636;
                    frontier_phi_61_pred_5 = _2635;
                }
                _2434 = frontier_phi_61_pred;
                _2444 = frontier_phi_61_pred_1;
                _2442 = frontier_phi_61_pred_2;
                _2440 = frontier_phi_61_pred_3;
                _2438 = frontier_phi_61_pred_4;
                _2436 = frontier_phi_61_pred_5;
                uint _2585 = _2584 + 1u;
                if (_2585 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2578 = _2434;
                    _2579 = _2436;
                    _2580 = _2438;
                    _2581 = _2440;
                    _2582 = _2442;
                    _2583 = _2444;
                    _2584 = _2585;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
            _2443 = _2444;
        }
        uvec4 _2447 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2448 = _2447.z;
        uint _2450 = (_2448 >> 8u) & 15u;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        if (((4294967295u << _2450) & _2332) == 0u)
        {
            _2546 = _2433;
            _2548 = _2435;
            _2550 = _2437;
            _2552 = _2439;
            _2554 = _2441;
            _2556 = _2443;
        }
        else
        {
            float _2571 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
            float _2572 = _2571 * _2286;
            float _2573 = _2571 * _2287;
            float _2574 = _2571 * _2288;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2450 < ((_2448 >> 12u) & 15u))
            {
                float _2547;
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2685 = _2433;
                float _2686 = _2435;
                float _2687 = _2437;
                float _2688 = _2439;
                float _2689 = _2441;
                float _2690 = _2443;
                uint _2691 = _2450;
                uint _2700;
                bool _2701;
                for (;;)
                {
                    _2700 = texelFetch(g_lightClassification, int((((_2326 << 5u) + (_2312 << 9u)) + (_2691 << 2u)) >> 2u)).x;
                    _2701 = _2700 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2701)
                    {
                        frontier_phi_67_pred = _2688;
                        frontier_phi_67_pred_1 = _2689;
                        frontier_phi_67_pred_2 = _2690;
                        frontier_phi_67_pred_3 = _2687;
                        frontier_phi_67_pred_4 = _2686;
                        frontier_phi_67_pred_5 = _2685;
                    }
                    else
                    {
                        float _2885;
                        float _2886;
                        float _2887;
                        float _2888;
                        float _2889;
                        float _2890;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _2898 = _2685;
                        float _2899 = _2686;
                        float _2900 = _2687;
                        float _2901 = _2688;
                        float _2902 = _2689;
                        float _2903 = _2690;
                        uint _2904 = _2700;
                        uint _2905;
                        vec4 _2930;
                        float _2931;
                        vec4 _2946;
                        vec3 _2958;
                        vec4 _2974;
                        vec4 _2989;
                        float _3035;
                        bool _3036;
                        for (;;)
                        {
                            uint _2915 = ((_2691 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2904));
                            _2905 = (_2904 + 4294967295u) & _2904;
                            uint _2917 = _2915 * 40u;
                            _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            _2931 = _2930.w;
                            uint _2933 = (_2915 * 40u) + 4u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2948 = (_2915 * 40u) + 8u;
                            _2958 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x));
                            uint _2961 = (_2915 * 40u) + 16u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2976 = (_2915 * 40u) + 20u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2991 = (_2915 * 40u) + 24u;
                            vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3010 = (_2915 * 40u) + 28u;
                            vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            _3035 = fma(_2288, _3023.z, fma(_2287, _3023.y, _3023.x * _2286)) + _3023.w;
                            _3036 = !((fma(_2288, _3004.z, fma(_2287, _3004.y, _3004.x * _2286)) + _3004.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3036)
                            {
                                float _3063 = _2930.x - _2286;
                                float _3064 = _2930.y - _2287;
                                float _3065 = _2930.z - _2288;
                                float _3066 = dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065));
                                float _3069 = inversesqrt(_3066);
                                float _3070 = _3069 * _3063;
                                float _3071 = _3069 * _3064;
                                float _3072 = _3069 * _3065;
                                float _3076 = 1.0 - (_3066 / (_2931 * _2931));
                                float _4134 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3077 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3081 = sqrt(_3066) * _2946.w;
                                float _3083 = 1.39999997615814208984375 / (_3081 + 1.39999997615814208984375);
                                float _3084 = _3083 * _3083;
                                float _3087 = ((1.0 - _3084) * dot(vec3(_3070, _3071, _3072), vec3(_563, _566, _569))) + _3084;
                                float _3090 = _3081 * _3081;
                                float _3094 = (fma(_2288, _2974.z, fma(_2287, _2974.y, _2974.x * _2286)) + _2974.w) / _3035;
                                float _3095 = (fma(_2288, _2989.z, fma(_2287, _2989.y, _2989.x * _2286)) + _2989.w) / _3035;
                                float _3099 = 1.0 - dot(vec2(_3094, _3095), vec2(_3094, _3095));
                                float _4150 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
                                float _3101 = _3100 * (((isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))) * _3077) / ((_3090 * 0.699999988079071044921875) + 1.0));
                                float _3113 = exp2(log2(1.0 / ((_3090 * 3.5) + 5.0)) * 0.25);
                                float _3114 = 1.0 - _623;
                                float _3121 = sqrt(1.0 - ((1.0 - (_3114 * _3114)) * (1.0 - (_3113 * _3113))));
                                float _3122 = _3121 * _3121;
                                float _3123 = _3122 * _3122;
                                float _3124 = _3070 - _2572;
                                float _3125 = _3071 - _2573;
                                float _3126 = _3072 - _2574;
                                float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                                float _3134 = dot(vec3(_563, _566, _569), vec3((-0.0) - _2572, (-0.0) - _2573, (-0.0) - _2574));
                                float _4161 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
                                float _3138 = dot(vec3(_563, _566, _569), vec3(_3130 * _3124, _3130 * _3125, _3130 * _3126));
                                float _4172 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3141 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3145 = ((_3141 * _3141) * (_3123 + (-1.0))) + 1.0;
                                float _3146 = _3083 * _3122;
                                float _3147 = _3146 * _3146;
                                float _3153 = ((1.0 - _3147) * dot(vec3(_563, _566, _569), vec3(_3070, _3071, _3072))) + _3147;
                                float _4183 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3154 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3155 = 1.0 - _3122;
                                float _3165 = (0.5 / (((_3154 * ((_3137 * _3155) + _3122)) + 9.9999999392252902907785028219223e-09) + (((_3154 * _3155) + _3122) * _3137))) * _3154;
                                float _4194 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3175 = (_3100 * _3077) * (((_3123 * 3.1415927410125732421875) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) / ((_3145 * _3145) * ((_3090 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3175 * _2958.x;
                                frontier_phi_73_pred_1 = _3175 * _2958.y;
                                frontier_phi_73_pred_2 = _3101 * _2946.z;
                                frontier_phi_73_pred_3 = _3101 * _2946.y;
                                frontier_phi_73_pred_4 = _3101 * _2946.x;
                                frontier_phi_73_pred_5 = _3175 * _2958.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3179 = frontier_phi_73_pred;
                            _3180 = frontier_phi_73_pred_1;
                            _3184 = frontier_phi_73_pred_2;
                            _3183 = frontier_phi_73_pred_3;
                            _3182 = frontier_phi_73_pred_4;
                            _3181 = frontier_phi_73_pred_5;
                            _2888 = _3182 + _2901;
                            _2889 = _3183 + _2902;
                            _2890 = _3184 + _2903;
                            _2885 = _3179 + _2898;
                            _2886 = _3180 + _2899;
                            _2887 = _3181 + _2900;
                            if (_2905 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2888;
                                _2902 = _2889;
                                _2903 = _2890;
                                _2904 = _2905;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2888;
                        frontier_phi_67_pred_1 = _2889;
                        frontier_phi_67_pred_2 = _2890;
                        frontier_phi_67_pred_3 = _2887;
                        frontier_phi_67_pred_4 = _2886;
                        frontier_phi_67_pred_5 = _2885;
                    }
                    _2553 = frontier_phi_67_pred;
                    _2555 = frontier_phi_67_pred_1;
                    _2557 = frontier_phi_67_pred_2;
                    _2551 = frontier_phi_67_pred_3;
                    _2549 = frontier_phi_67_pred_4;
                    _2547 = frontier_phi_67_pred_5;
                    uint _2692 = _2691 + 1u;
                    if (_2692 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2685 = _2547;
                        _2686 = _2549;
                        _2687 = _2551;
                        _2688 = _2553;
                        _2689 = _2555;
                        _2690 = _2557;
                        _2691 = _2692;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2555;
                frontier_phi_55_56_ladder_1 = _2557;
                frontier_phi_55_56_ladder_2 = _2553;
                frontier_phi_55_56_ladder_3 = _2551;
                frontier_phi_55_56_ladder_4 = _2549;
                frontier_phi_55_56_ladder_5 = _2547;
            }
            else
            {
                frontier_phi_55_56_ladder = _2441;
                frontier_phi_55_56_ladder_1 = _2443;
                frontier_phi_55_56_ladder_2 = _2439;
                frontier_phi_55_56_ladder_3 = _2437;
                frontier_phi_55_56_ladder_4 = _2435;
                frontier_phi_55_56_ladder_5 = _2433;
            }
            _2546 = frontier_phi_55_56_ladder_5;
            _2548 = frontier_phi_55_56_ladder_4;
            _2550 = frontier_phi_55_56_ladder_3;
            _2552 = frontier_phi_55_56_ladder_2;
            _2554 = frontier_phi_55_56_ladder;
            _2556 = frontier_phi_55_56_ladder_1;
        }
        float _2561 = isnan(1.0) ? _607 : (isnan(_607) ? 1.0 : min(_607, 1.0));
        _2345 = (_2561 * _2552) + _1797;
        _2347 = (_2561 * _2554) + _1799;
        _2349 = (_2561 * _2556) + _1801;
        _2351 = ((_2546 * 0.039999999105930328369140625) * _2561) + _2130;
        _2353 = ((_2548 * 0.039999999105930328369140625) * _2561) + _2132;
        _2355 = ((_2550 * 0.039999999105930328369140625) * _2561) + _2134;
    }
    else
    {
        _2345 = _1797;
        _2347 = _1799;
        _2349 = _1801;
        _2351 = _2130;
        _2353 = _2132;
        _2355 = _2134;
    }
    float _4210 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4221 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4232 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    uint _2375 = _226 + 6u;
    float _2383 = _541 / cbSceneParam._m0[86u].x;
    float _2384 = _542 / cbSceneParam._m0[86u].y;
    vec4 _2398 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, (log2((isnan(cbSceneParam._m0[77u].w) ? _475 : (isnan(_475) ? cbSceneParam._m0[77u].w : min(_475, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2400 = _2398.x;
    float _2401 = _2398.y;
    float _2402 = _2398.z;
    float _2403 = _2398.w;
    float _2496;
    float _2498;
    float _2500;
    float _2502;
    if (_475 > cbSceneParam._m0[78u].w)
    {
        float _2458 = isnan(_475) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _475 : min(cbSceneParam._m0[80u].w, _475));
        float _2459 = _2458 / _475;
        float _2470 = _2459 * _526;
        float _2471 = _527 * _2459;
        float _2472 = (-0.0) - _2471;
        float _2474 = _2459 * _528;
        float _2476 = (cbSceneParam._m0[77u].w * _2472) / _2458;
        float _2477 = _2476 + cbSceneParam._m0[79u].w;
        float _2478 = cbSceneParam._m0[79u].w - _2471;
        float _2484 = sqrt(((_2470 * _2470) + (_2471 * _2471)) + (_2474 * _2474));
        float _2487 = (1.0 - (cbSceneParam._m0[77u].w / _2458)) * _2484;
        float _2492 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2494 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2647;
        if (abs((_2472 - _2476) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2647 = ((((_2477 > 0.0) ? exp2(_2492 * _2477) : (2.0 - exp2(_2494 * _2477))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2487;
        }
        else
        {
            float _2607 = 1.0 / cbSceneParam._m0[80u].x;
            float _2608 = isnan(_2478) ? _2477 : (isnan(_2477) ? _2478 : max(_2477, _2478));
            float _2609 = isnan(_2478) ? _2477 : (isnan(_2477) ? _2478 : min(_2477, _2478));
            float _2618 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : min(_2608, 0.0));
            float _2619 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : min(_2609, 0.0));
            _2647 = ((abs(_2484 / _2472) * cbSceneParam._m0[80u].y) * ((((_2618 - _2619) * 2.0) - ((exp2(_2492 * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0)))) - exp2(_2492 * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0))))) * _2607)) - ((exp2(_2494 * _2618) - exp2(_2494 * _2619)) * _2607))) + (_2487 * cbSceneParam._m0[80u].z);
        }
        vec4 _2649 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, 1.0), 0.0);
        float _2658 = exp2((_2647 * (-1.44269502162933349609375)) * (1.0 - _2649.w));
        float _2659 = log2(_2658);
        float _2675 = log2(_2403);
        _2496 = (exp2(_2675 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].x)) * _2649.x) / cbSceneParam._m0[78u].x)) + _2400;
        _2498 = (exp2(_2675 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].y)) * _2649.y) / cbSceneParam._m0[78u].y)) + _2401;
        _2500 = (exp2(_2675 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2659 * cbSceneParam._m0[78u].z)) * _2649.z) / cbSceneParam._m0[78u].z)) + _2402;
        _2502 = _2658 * _2403;
    }
    else
    {
        _2496 = _2400;
        _2498 = _2401;
        _2500 = _2402;
        _2502 = _2403;
    }
    float _2514 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2515 = _2514 == 3.0;
    float _2516 = log2(_2502);
    float _2523 = exp2(_2516 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2345 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _607))) + ((_2351 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _1413)) * cbPerFrame._m0[3u].x));
    float _2524 = exp2(_2516 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2347 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _607))) + ((_2353 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1413)) * cbPerFrame._m0[3u].x));
    float _2525 = exp2(_2516 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2349 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _607))) + ((_2355 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1413)) * cbPerFrame._m0[3u].x));
    float _2534 = (_2514 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2534 * (_2515 ? _2523 : (_2523 + (cbSceneParam._m0[72u].w * _2496)));
    SV_Target.y = _2534 * (_2515 ? _2524 : (_2524 + (cbSceneParam._m0[72u].w * _2498)));
    SV_Target.z = _2534 * (_2515 ? _2525 : (_2525 + (cbSceneParam._m0[72u].w * _2500)));
    SV_Target.w = cbInstanceData._m0[_2375].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2375].w;
}


