#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1175;
float _3561;
float _3562;
float _3563;
float _3564;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3573 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3584 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3595 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _284) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _285) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _326 = _321.x * cbMtdParam._m0[9u].x;
    float _327 = _321.y * cbMtdParam._m0[9u].y;
    float _328 = _321.z * cbMtdParam._m0[9u].z;
    float _332 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _298.x) * _326;
    float _335 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _298.y) * _327;
    float _338 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _298.z) * _328;
    float _345 = ((_326 - _332) * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) + _332;
    float _346 = ((_327 - _335) * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) + _335;
    float _347 = ((_328 - _338) * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) + _338;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _386 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _390 = _386.z;
    float _394 = (_386.x * 2.0) + (-1.0);
    float _395 = (_386.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_394, _395), vec2(_394, _395));
    float _3606 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _401 = sqrt(1.0 - (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))));
    float _406 = _394 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_360.x * 2.0) + (-1.0)));
    float _407 = _395 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_360.y * 2.0) + (-1.0)));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _422 = _420.x;
    float _423 = 1.0 - _422;
    float _454 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_422 - _423) * cbMtdParam._m0[24u].w) + _423) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3617 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _463 = ((((cbMtdParam._m0[10u].x - _345) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _455) + _345;
    float _464 = ((((cbMtdParam._m0[10u].y - _346) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _455) + _346;
    float _465 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _347)) * _455) + _347;
    float _470 = (((_360.z - _390) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _390;
    float _474 = ((cbMtdParam._m0[23u].y - _470) * _455) + _470;
    vec4 _496 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _498 = _496.x;
    float _499 = _496.y;
    float _508 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_234, _235, _236, 0.0));
    vec4 _523 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _284) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _285) + cbTextureTilingScale._m0[18u].w));
    float _525 = _523.x;
    float _530 = fract(_523.w + cbPerFrame._m0[22u].x);
    float _532 = (1.0 - _530) * _525;
    float _537 = ((_530 + (-1.0)) + _525) * 9.0;
    float _539 = ((_525 + (-1.0)) + _530) * 9.0;
    float _540 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _541 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _555 = (_532 * ((_523.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _540 : (isnan(_540) ? 3.0 : min(_540, 3.0))) * 3.1415927410125732421875);
    float _557 = (_532 * ((_523.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _541 : (isnan(_541) ? 3.0 : min(_541, 3.0))) * 3.1415927410125732421875);
    float _561 = inversesqrt(dot(vec3(_555, _557, 1.0), vec3(_555, _557, 1.0)));
    float _577 = (((((0.5 - _498) + ((_555 * 0.5) * _561)) * _508) + _498) * 2.0) + (-1.0);
    float _578 = (((((0.5 - _499) + ((_561 * 0.5) * _557)) * _508) + _499) * 2.0) + (-1.0);
    float _579 = dot(vec2(_577, _578), vec2(_577, _578));
    float _3648 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _595 = ((((cbMtdParam._m0[22u].z * _406) - _406) + _577) * _455) + _406;
    float _596 = ((((cbMtdParam._m0[22u].z * _407) - _407) + _578) * _455) + _407;
    float _597 = (_455 * (sqrt(1.0 - (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) - _401)) + _401;
    float _599 = cbMtdParam._m0[22u].x + _386.w;
    float _602 = fma(_597, _234, fma(_596, _240 * TANGENT.x, (_226 * _218) * _595));
    float _605 = fma(_597, _235, fma(_596, _240 * TANGENT.y, (_226 * _219) * _595));
    float _608 = fma(_597, _236, fma(_596, _240 * TANGENT.z, (_226 * _220) * _595));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    float _613 = _612 * _602;
    float _614 = _612 * _605;
    float _615 = _612 * _608;
    float _3659 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _616 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3681 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3692 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3703 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _634 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _685 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _675);
    float _686 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _675);
    float _687 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _675);
    float _691 = inversesqrt(dot(vec3(_685, _686, _687), vec3(_685, _686, _687)));
    float _692 = _685 * _691;
    float _693 = _686 * _691;
    float _694 = _687 * _691;
    vec4 _699 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _701 = _699.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _857 = sqrt(((_685 * _685) + (_686 * _686)) + (_687 * _687));
        float _863 = (cbMatDynParam._m0[5u].x * _857) + cbMatDynParam._m0[5u].y;
        float _3714 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _868 = (cbMatDynParam._m0[5u].z * _857) + cbMatDynParam._m0[5u].w;
        float _3725 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) - _864)) + _864) < ((_701 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _713 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _714 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _734 = fma(_615, cbSceneParam._m0[5u].z, fma(_614, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _613));
    float _737 = fma(_615, cbSceneParam._m0[6u].z, fma(_614, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _613));
    float _740 = fma(_615, cbSceneParam._m0[7u].z, fma(_614, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _613));
    uint _753 = _265 + 9u;
    uint _754 = _753 + uint(cbMatDynParam._m0[0u].w);
    float _760 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_754].x;
    float _761 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_754].y;
    float _762 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * cbInstanceData._m0[_754].z;
    float _3736 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    vec4 _774 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _713, cbSceneParam._m0[86u].y * _714));
    float _778 = ((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * TEXCOORD_5.w) * _774.x;
    float _779 = dot(vec3(_613, _614, _615), vec3(_692, _693, _694));
    float _782 = _779 * 2.0;
    float _786 = (_782 * _613) - _692;
    float _787 = (_782 * _614) - _693;
    float _788 = (_782 * _615) - _694;
    float _792 = abs(dot(vec3(_692, _693, _694), vec3(_613, _614, _615)));
    float _3769 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _794 = sqrt(_616);
    float _806 = exp2((_794 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_794 * 3.0));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1174;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _900 = fma(_846, cbModelParam._m0[26u].z, fma(_842, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _838));
        float _904 = fma(_846, cbModelParam._m0[27u].z, fma(_842, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _838));
        float _908 = fma(_846, cbModelParam._m0[28u].z, fma(_842, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _838));
        float _932 = _838 + _613;
        float _933 = _842 + _614;
        float _934 = _846 + _615;
        float _944 = fma(_934, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932)) - _900;
        float _945 = fma(_934, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932)) - _904;
        float _946 = fma(_934, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932)) - _908;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_900 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_904 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[34u].z) + ((((((_908 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1002 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_968.x + (-0.5));
        float _1004 = _1002 * (_968.y + (-0.5));
        float _1005 = _1002 * (_968.z + (-0.5));
        float _1012 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_975.x + (-0.5));
        float _1014 = _1012 * (_975.y + (-0.5));
        float _1015 = _1012 * (_975.z + (-0.5));
        float _1022 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_982.x + (-0.5));
        float _1024 = _1022 * (_982.y + (-0.5));
        float _1025 = _1022 * (_982.z + (-0.5));
        float _1032 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_989.x + (-0.5));
        float _1034 = _1032 * (_989.y + (-0.5));
        float _1035 = _1032 * (_989.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1056 = (dot(vec3(_613, _614, _615), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1066 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3817 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1068 + 1.0))) + _1073) * _1036;
        float _1083 = _1004 * 0.5;
        float _1084 = _1014 * 0.5;
        float _1085 = _1024 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_613, _614, _615), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3850 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1110 + 1.0))) + _1115) * _1037;
        float _1125 = _1005 * 0.5;
        float _1126 = _1015 * 0.5;
        float _1127 = _1025 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_613, _614, _615), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3883 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1152 + 1.0))) + _1157) * _1038;
        _1174 = _1005;
        _1176 = _1004;
        _1177 = _1003;
        _1178 = _1015;
        _1179 = _1014;
        _1180 = _1013;
        _1181 = _1025;
        _1182 = _1024;
        _1183 = _1023;
        _1184 = _1038;
        _1185 = _1037;
        _1186 = _1036;
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _1175;
        _1176 = _1175;
        _1177 = _1175;
        _1178 = _1175;
        _1179 = _1175;
        _1180 = _1175;
        _1181 = _1175;
        _1182 = _1175;
        _1183 = _1175;
        _1184 = _1175;
        _1185 = _1175;
        _1186 = _1175;
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
    }
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1217 = fma(_846, cbModelParam._m0[30u].z, fma(_842, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _838));
        float _1221 = fma(_846, cbModelParam._m0[31u].z, fma(_842, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _838));
        float _1225 = fma(_846, cbModelParam._m0[32u].z, fma(_842, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _838));
        float _1248 = _838 + _613;
        float _1249 = _842 + _614;
        float _1250 = _846 + _615;
        float _1260 = fma(_1250, cbModelParam._m0[30u].z, fma(_1249, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1248)) - _1217;
        float _1261 = fma(_1250, cbModelParam._m0[31u].z, fma(_1249, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1248)) - _1221;
        float _1262 = fma(_1250, cbModelParam._m0[32u].z, fma(_1249, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1248)) - _1225;
        float _1266 = inversesqrt(dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262)));
        float _1279 = ((_1266 * _1260) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1217 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1266 * _1261) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1221 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1266 * _1262) / cbModelParam._m0[35u].z) + ((((((_1225 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        float _1316 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1283.x + (-0.5));
        float _1318 = _1316 * (_1283.y + (-0.5));
        float _1319 = _1316 * (_1283.z + (-0.5));
        float _1326 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1290.x + (-0.5));
        float _1328 = _1326 * (_1290.y + (-0.5));
        float _1329 = _1326 * (_1290.z + (-0.5));
        float _1336 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1297.x + (-0.5));
        float _1338 = _1336 * (_1297.y + (-0.5));
        float _1339 = _1336 * (_1297.z + (-0.5));
        float _1346 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1304.x + (-0.5));
        float _1348 = _1346 * (_1304.y + (-0.5));
        float _1349 = _1346 * (_1304.z + (-0.5));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = _1317 * 0.5;
        float _1354 = _1327 * 0.5;
        float _1355 = _1337 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_613, _614, _615), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3946 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1380 + 1.0))) + _1385) * _1350;
        float _1395 = _1318 * 0.5;
        float _1396 = _1328 * 0.5;
        float _1397 = _1338 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_613, _614, _615), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _3979 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1422 + 1.0))) + _1427) * _1351;
        float _1437 = _1319 * 0.5;
        float _1438 = _1329 * 0.5;
        float _1439 = _1339 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_613, _614, _615), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4012 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1464 + 1.0))) + _1469) * _1352;
        _1486 = _1319;
        _1487 = _1318;
        _1488 = _1317;
        _1489 = _1329;
        _1490 = _1328;
        _1491 = _1327;
        _1492 = _1339;
        _1493 = _1338;
        _1494 = _1337;
        _1495 = _1352;
        _1496 = _1351;
        _1497 = _1350;
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
    }
    else
    {
        _1486 = _1175;
        _1487 = _1175;
        _1488 = _1175;
        _1489 = _1175;
        _1490 = _1175;
        _1491 = _1175;
        _1492 = _1175;
        _1493 = _1175;
        _1494 = _1175;
        _1495 = _1175;
        _1496 = _1175;
        _1497 = _1175;
        _1498 = 0.0;
        _1499 = 0.0;
        _1500 = 0.0;
    }
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1187)) + _1187;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1188)) + _1188;
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1189)) + _1189;
    float _1533 = fma(_1512, cbSceneParam._m0[89u].z, fma(_1511, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1536 = fma(_1512, cbSceneParam._m0[90u].z, fma(_1511, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1539 = fma(_1512, cbSceneParam._m0[91u].z, fma(_1511, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1510));
    float _1554 = _786 * 0.5;
    float _1555 = _787 * 0.5;
    float _1556 = _788 * 0.5;
    float _1557 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1560 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1563 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1597;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1570 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1174, _1178, _1181, _1184));
        float _1574 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1578 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1585 = dot(vec4(cbModelParam._m0[39u]), vec4(_1554, _1555, _1556, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1585) ? 0.0 : (isnan(0.0) ? _1585 : max(0.0, _1585))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1608;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1599 = dot(vec4(cbModelParam._m0[40u]), vec4(_1554, _1555, _1556, 1.0));
        _1608 = dot(vec3(isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1599) ? 0.0 : (isnan(0.0) ? _1599 : max(0.0, _1599))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1608 = 1.0;
    }
    float _1612 = (_1608 * cbModelParam._m0[1u].x) + (_1597 * (1.0 - cbModelParam._m0[1u].x));
    float _1622 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _616);
    float _1623 = isnan(_1622) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1622 : min(cbModelParam._m0[25u].z, _1622));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1672 = fma(_846, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _838)) + cbModelParam._m0[13u].w;
        float _1676 = fma(_846, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _838)) + cbModelParam._m0[14u].w;
        float _1680 = fma(_846, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _838)) + cbModelParam._m0[15u].w;
        float _1683 = fma(_788, cbModelParam._m0[13u].z, fma(_787, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _786));
        float _1686 = fma(_788, cbModelParam._m0[14u].z, fma(_787, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _786));
        float _1689 = fma(_788, cbModelParam._m0[15u].z, fma(_787, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _786));
        float _1717;
        if (_1683 > 0.0)
        {
            _1717 = abs((1.0 - _1672) / _1683);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1672 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1717 = frontier_phi_17_15_ladder;
        }
        float _1941;
        if (_1686 > 0.0)
        {
            _1941 = abs((1.0 - _1676) / _1686);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1676 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1941 = frontier_phi_26_22_ladder;
        }
        float _2187;
        if (_1689 > 0.0)
        {
            _2187 = abs((1.0 - _1680) / _1689);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1680 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2187 = frontier_phi_38_33_ladder;
        }
        float _2189 = isnan(_1941) ? _1717 : (isnan(_1717) ? _1941 : min(_1717, _1941));
        float _2190 = isnan(_2187) ? _2189 : (isnan(_2189) ? _2187 : min(_2189, _2187));
        float _2194 = (_2190 * _1683) + _1672;
        float _2195 = (_2190 * _1686) + _1676;
        float _2196 = (_2190 * _1689) + _1680;
        float _2197 = _2190 * 9.9999997473787516355514526367188e-05;
        float _2199 = (-1.0) - _2197;
        float _2201 = _2197 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2196 > _2201) || ((_2196 < _2199) || ((_2195 > _2201) || ((_2195 < _2199) || ((_2194 < _2199) || (_2194 > _2201))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2320 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2196, cbModelParam._m0[9u].z, fma(_2195, cbModelParam._m0[9u].y, _2194 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2196, cbModelParam._m0[10u].z, fma(_2195, cbModelParam._m0[10u].y, _2194 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2196, cbModelParam._m0[11u].z, fma(_2195, cbModelParam._m0[11u].y, _2194 * cbModelParam._m0[11u].x))), _1623);
            frontier_phi_16_38_ladder = _2320.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2320.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2320.x * cbModelParam._m0[1u].y;
        }
        _1705 = frontier_phi_16_38_ladder_2;
        _1707 = frontier_phi_16_38_ladder_1;
        _1709 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_786, _787, _788), _1623);
        _1705 = _1693.x * cbModelParam._m0[1u].y;
        _1707 = _1693.y * cbModelParam._m0[1u].y;
        _1709 = _1693.z * cbModelParam._m0[1u].y;
    }
    float _1713 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _616);
    float _1714 = isnan(_1713) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1713 : min(cbModelParam._m0[25u].w, _1713));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1768 = fma(_846, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _838)) + cbModelParam._m0[21u].w;
        float _1772 = fma(_846, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _838)) + cbModelParam._m0[22u].w;
        float _1776 = fma(_846, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _838)) + cbModelParam._m0[23u].w;
        float _1779 = fma(_788, cbModelParam._m0[21u].z, fma(_787, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _786));
        float _1782 = fma(_788, cbModelParam._m0[22u].z, fma(_787, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _786));
        float _1785 = fma(_788, cbModelParam._m0[23u].z, fma(_787, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _786));
        float _1946;
        if (_1779 > 0.0)
        {
            _1946 = abs((1.0 - _1768) / _1779);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1768 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1946 = frontier_phi_28_24_ladder;
        }
        float _2214;
        if (_1782 > 0.0)
        {
            _2214 = abs((1.0 - _1772) / _1782);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1772 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2214 = frontier_phi_40_35_ladder;
        }
        float _2419;
        if (_1785 > 0.0)
        {
            _2419 = abs((1.0 - _1776) / _1785);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1776 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2419 = frontier_phi_49_46_ladder;
        }
        float _2421 = isnan(_2214) ? _1946 : (isnan(_1946) ? _2214 : min(_1946, _2214));
        float _2422 = isnan(_2419) ? _2421 : (isnan(_2421) ? _2419 : min(_2421, _2419));
        float _2426 = (_2422 * _1779) + _1768;
        float _2427 = (_2422 * _1782) + _1772;
        float _2428 = (_2422 * _1785) + _1776;
        float _2429 = _2422 * 9.9999997473787516355514526367188e-05;
        float _2430 = (-1.0) - _2429;
        float _2432 = _2429 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2428 > _2432) || ((_2428 < _2430) || ((_2427 > _2432) || ((_2427 < _2430) || ((_2426 < _2430) || (_2426 > _2432))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2428, cbModelParam._m0[17u].z, fma(_2427, cbModelParam._m0[17u].y, _2426 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2428, cbModelParam._m0[18u].z, fma(_2427, cbModelParam._m0[18u].y, _2426 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2428, cbModelParam._m0[19u].z, fma(_2427, cbModelParam._m0[19u].y, _2426 * cbModelParam._m0[19u].x))), _1714);
            frontier_phi_25_49_ladder = _2627.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2627.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2627.x * cbModelParam._m0[1u].z;
        }
        _1804 = frontier_phi_25_49_ladder_2;
        _1806 = frontier_phi_25_49_ladder_1;
        _1808 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1788 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_786, _787, _788), _1714);
        _1804 = _1788.x * cbModelParam._m0[1u].z;
        _1806 = _1788.y * cbModelParam._m0[1u].z;
        _1808 = _1788.z * cbModelParam._m0[1u].z;
    }
    float _1820 = ((((1.0 - _806) * ((_794 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_806 * _794)) * _778;
    float _1821 = _1820 * ((cbModelParam._m0[1u].w * (_1804 - _1705)) + _1705);
    float _1822 = _1820 * ((cbModelParam._m0[1u].w * (_1806 - _1707)) + _1707);
    float _1823 = _1820 * ((cbModelParam._m0[1u].w * (_1808 - _1709)) + _1709);
    float _1826 = fma(_1823, cbSceneParam._m0[89u].z, fma(_1822, cbSceneParam._m0[89u].y, _1821 * cbSceneParam._m0[89u].x));
    float _1829 = fma(_1823, cbSceneParam._m0[90u].z, fma(_1822, cbSceneParam._m0[90u].y, _1821 * cbSceneParam._m0[90u].x));
    float _1832 = fma(_1823, cbSceneParam._m0[91u].z, fma(_1822, cbSceneParam._m0[91u].y, _1821 * cbSceneParam._m0[91u].x));
    vec4 _1840 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_713, _714));
    float _1842 = _1840.w;
    float _1854 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1842);
    float _1855 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1842);
    float _1856 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1842);
    uvec4 _1860 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _1862 = _1860.x * 14u;
    uint _1863 = _1862 + 13u;
    float _1870 = _778 + (-1.0);
    float _1875 = (cbLight._m0[_1863].x * _1870) + 1.0;
    float _1876 = (cbLight._m0[_1863].y * _1870) + 1.0;
    float _1877 = (cbLight._m0[_1863].z * _1870) + 1.0;
    float _1878 = (cbLight._m0[_1863].w * _1870) + 1.0;
    uint _1879 = _1862 + 5u;
    float _1885 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
    uint _1889 = _1862 + 4u;
    float _1899 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
    uint _1903 = _1862 | 1u;
    float _1914 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_613, _614, _615));
    float _1917 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_613, _614, _615));
    float _4148 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _4159 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1922 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * 0.3183098733425140380859375;
    float _1924 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 0.3183098733425140380859375;
    float _1931 = ((cbLight._m0[_1879].x * _1885) * _1924) + (((cbLight._m0[_1889].x * _1854) * _1899) * _1922);
    float _1932 = ((_1885 * cbLight._m0[_1879].y) * _1924) + (((cbLight._m0[_1889].y * _1855) * _1899) * _1922);
    float _1933 = ((_1885 * cbLight._m0[_1879].z) * _1924) + (((cbLight._m0[_1889].z * _1856) * _1899) * _1922);
    uvec4 _1938 = floatBitsToUint(cbLight._m0[_1862 + 12u]);
    bool _1940 = _1938.x == 0u;
    float _1951;
    float _1953;
    float _1955;
    if (_1940)
    {
        _1951 = _1931;
        _1953 = _1932;
        _1955 = _1933;
    }
    else
    {
        uint _1959 = _1862 + 6u;
        float _1975 = (dot(vec3(cbLight._m0[_1862 + 2u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _1976 = _1975 * _1975;
        float _4170 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1977 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1978 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _1951 = (((cbLight._m0[_1959].x * 0.3183098733425140380859375) * _1977) * _1978) + _1931;
        _1953 = (((cbLight._m0[_1959].y * 0.3183098733425140380859375) * _1977) * _1978) + _1932;
        _1955 = (((cbLight._m0[_1959].z * 0.3183098733425140380859375) * _1977) * _1978) + _1933;
    }
    bool _1958 = _1938.y == 0u;
    float _1996;
    float _1998;
    float _2000;
    if (_1958)
    {
        _1996 = _1951;
        _1998 = _1953;
        _2000 = _1955;
    }
    else
    {
        uint _2158 = _1862 + 7u;
        float _2174 = (dot(vec3(cbLight._m0[_1862 + 3u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2175 = _2174 * _2174;
        float _4186 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2176 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2177 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _1996 = (((cbLight._m0[_2158].x * 0.3183098733425140380859375) * _2176) * _2177) + _1951;
        _1998 = (((cbLight._m0[_2158].y * 0.3183098733425140380859375) * _2176) * _2177) + _1953;
        _2000 = (((cbLight._m0[_2158].z * 0.3183098733425140380859375) * _2176) * _2177) + _1955;
    }
    uint _2003 = _1862 + 8u;
    float _2016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1862].w)) * _616) * 0.949999988079071044921875);
    float _2017 = _2016 * _2016;
    float _2018 = cbLight._m0[_1862].x + _692;
    float _2019 = cbLight._m0[_1862].y + _693;
    float _2020 = cbLight._m0[_1862].z + _694;
    float _2024 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
    float _2025 = _2024 * _2018;
    float _2026 = _2024 * _2019;
    float _2027 = _2024 * _2020;
    float _2028 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_1862].xyz));
    float _4202 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _4213 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _2032 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2033 = dot(vec3(_613, _614, _615), vec3(_2025, _2026, _2027));
    float _4224 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2037 = dot(vec3(cbLight._m0[_1862].xyz), vec3(_2025, _2026, _2027));
    float _4235 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2041 = _2017 * _2017;
    float _2045 = ((_2036 * _2036) * (_2041 + (-1.0))) + 1.0;
    float _2056 = (exp2(log2(1.0 - (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2057 = 1.0 - _2017;
    float _2068 = (0.5 / (((_2032 * ((_2031 * _2057) + _2017)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2057) + _2017) * _2031))) * _2031;
    float _4246 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2070 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_2041 / ((_2045 * _2045) * 3.141590118408203125));
    uint _2084 = _1862 + 9u;
    float _2095 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _616) * 0.949999988079071044921875);
    float _2096 = _2095 * _2095;
    float _2097 = cbLight._m0[_1903].x + _692;
    float _2098 = cbLight._m0[_1903].y + _693;
    float _2099 = cbLight._m0[_1903].z + _694;
    float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
    float _2104 = _2103 * _2097;
    float _2105 = _2103 * _2098;
    float _2106 = _2103 * _2099;
    float _2107 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_1903].xyz));
    float _4257 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _2111 = dot(vec3(_613, _614, _615), vec3(_2104, _2105, _2106));
    float _4268 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2114 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2115 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2104, _2105, _2106));
    float _4279 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2119 = _2096 * _2096;
    float _2123 = ((_2114 * _2114) * (_2119 + (-1.0))) + 1.0;
    float _2132 = (exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2133 = 1.0 - _2096;
    float _2143 = (0.5 / (((_2032 * ((_2110 * _2133) + _2096)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2133) + _2096) * _2110))) * _2110;
    float _4290 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2119 / ((_2123 * _2123) * 3.141590118408203125));
    float _2155 = (((_2132 * cbLight._m0[_2084].x) * _2145) * _1885) + ((((cbLight._m0[_2003].x * _1854) * _2056) * _2070) * _1899);
    float _2156 = (((_2132 * cbLight._m0[_2084].y) * _2145) * _1885) + ((((cbLight._m0[_2003].y * _1855) * _2056) * _2070) * _1899);
    float _2157 = (((_2132 * cbLight._m0[_2084].z) * _2145) * _1885) + ((((cbLight._m0[_2003].z * _1856) * _2056) * _2070) * _1899);
    float _2219;
    float _2221;
    float _2223;
    if (_1940)
    {
        _2219 = _2155;
        _2221 = _2156;
        _2223 = _2157;
    }
    else
    {
        uint _2225 = _1862 + 2u;
        uint _2229 = _1862 + 10u;
        float _2243 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _616) * 0.949999988079071044921875);
        float _2244 = _2243 * _2243;
        float _2245 = cbLight._m0[_2225].x + _692;
        float _2246 = cbLight._m0[_2225].y + _693;
        float _2247 = cbLight._m0[_2225].z + _694;
        float _2251 = inversesqrt(dot(vec3(_2245, _2246, _2247), vec3(_2245, _2246, _2247)));
        float _2252 = _2251 * _2245;
        float _2253 = _2251 * _2246;
        float _2254 = _2251 * _2247;
        float _2255 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2225].xyz));
        float _4301 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2258 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2259 = dot(vec3(_613, _614, _615), vec3(_2252, _2253, _2254));
        float _4312 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2263 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2252, _2253, _2254));
        float _4323 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2267 = _2244 * _2244;
        float _2271 = ((_2262 * _2262) * (_2267 + (-1.0))) + 1.0;
        float _2280 = (exp2(log2(1.0 - (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2281 = 1.0 - _2244;
        float _2291 = (0.5 / (((_2032 * ((_2258 * _2281) + _2244)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2281) + _2244) * _2258))) * _2258;
        float _4334 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2293 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2267 / ((_2271 * _2271) * 3.141590118408203125));
        float _2294 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _2219 = (((_2280 * cbLight._m0[_2229].x) * _2293) * _2294) + _2155;
        _2221 = (((_2280 * cbLight._m0[_2229].y) * _2293) * _2294) + _2156;
        _2223 = (((_2280 * cbLight._m0[_2229].z) * _2293) * _2294) + _2157;
    }
    float _2329;
    float _2331;
    float _2333;
    if (_1958)
    {
        _2329 = _2219;
        _2331 = _2221;
        _2333 = _2223;
    }
    else
    {
        uint _2340 = _1862 + 3u;
        uint _2344 = _1862 + 11u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _616) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _692;
        float _2361 = cbLight._m0[_2340].y + _693;
        float _2362 = cbLight._m0[_2340].z + _694;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2340].xyz));
        float _4350 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2374 = dot(vec3(_613, _614, _615), vec3(_2367, _2368, _2369));
        float _4361 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4372 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2395 = (exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2396 = 1.0 - _2359;
        float _2406 = (0.5 / (((_2032 * ((_2373 * _2396) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2032 * _2396) + _2359) * _2373))) * _2373;
        float _4383 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2408 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2409 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
        _2329 = (((_2395 * cbLight._m0[_2344].x) * _2408) * _2409) + _2219;
        _2331 = (((_2395 * cbLight._m0[_2344].y) * _2408) * _2409) + _2221;
        _2333 = (((_2395 * cbLight._m0[_2344].z) * _2408) * _2409) + _2223;
    }
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    if (_1860.y == 0u)
    {
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2484;
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2484;
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2484;
        uvec4 _2499 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2500 = _2499.x;
        uint _2511 = uint((float(_2499.y) * floor(float(uint(cbSceneParam._m0[85u].y * _714) / _2500))) + floor(float(uint(cbSceneParam._m0[85u].x * _713) / _2500)));
        float _2521 = (log2(_2487 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2522 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        uint _2525 = uint(isnan(14.0) ? _2522 : (isnan(_2522) ? 14.0 : min(_2522, 14.0)));
        uvec4 _2530 = texelFetch(g_lightClusterGridBuffer, int(((_2525 << 2u) + (_2511 << 6u)) >> 2u));
        uint _2531 = _2530.x;
        uint _2532 = _2499.z;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        if (((((1u << ((_2532 >> 4u) & 15u)) + 4294967295u) & _2531) == 0u) || ((_2532 & 240u) == 0u))
        {
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
        }
        else
        {
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            uint _2791 = 0u;
            uint _2800;
            bool _2801;
            for (;;)
            {
                _2800 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2791 << 2u)) >> 2u)).x;
                _2801 = _2800 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2801)
                {
                    frontier_phi_66_pred = _2785;
                    frontier_phi_66_pred_1 = _2790;
                    frontier_phi_66_pred_2 = _2789;
                    frontier_phi_66_pred_3 = _2788;
                    frontier_phi_66_pred_4 = _2787;
                    frontier_phi_66_pred_5 = _2786;
                }
                else
                {
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    uint _2936;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2787;
                    _2933 = _2788;
                    _2934 = _2789;
                    _2935 = _2790;
                    _2936 = _2800;
                    float _2857;
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    for (;;)
                    {
                        uint _2940 = uint(findLSB(_2936)) + (_2791 << 5u);
                        uint _2937 = (_2936 + 4294967295u) & _2936;
                        uint _2942 = _2940 * 48u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 3u)).x));
                        uint _2962 = (_2940 * 48u) + 4u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2981 = (_2940 * 48u) + 8u;
                        vec3 _2992 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x));
                        float _2996 = _2956.x - _2485;
                        float _2997 = _2956.y - _2486;
                        float _2998 = _2956.z - _2487;
                        float _2999 = dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998));
                        float _3002 = inversesqrt(_2999);
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3006 = dot(vec3(_734, _737, _740), vec3(_3003, _3004, _3005));
                        float _3011 = 1.0 - (_2999 * _2956.w);
                        float _4409 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3013 = sqrt(_2999) * _2975.w;
                        float _3016 = 1.39999997615814208984375 / (_3013 + 1.39999997615814208984375);
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _3006) + _3017;
                        float _3023 = _3013 * _3013;
                        float _3027 = ((isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))) * _3012) / ((_3023 * 0.699999988079071044921875) + 1.0);
                        float _3031 = (-0.0) - _2485;
                        float _3032 = (-0.0) - _2486;
                        float _3033 = (-0.0) - _2487;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3038 = _3037 * _3031;
                        float _3039 = _3037 * _3032;
                        float _3040 = _3037 * _3033;
                        float _3048 = exp2(log2(1.0 / ((_3023 * 3.5) + 5.0)) * 0.25);
                        float _3049 = 1.0 - _794;
                        float _3056 = sqrt(1.0 - ((1.0 - (_3049 * _3049)) * (1.0 - (_3048 * _3048))));
                        float _3057 = _3056 * _3056;
                        float _3058 = _3057 * _3057;
                        float _3059 = _3038 + _3003;
                        float _3060 = _3039 + _3004;
                        float _3061 = _3040 + _3005;
                        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
                        float _3069 = dot(vec3(_734, _737, _740), vec3(_3038, _3039, _3040));
                        float _4425 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3072 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3073 = dot(vec3(_734, _737, _740), vec3(_3065 * _3059, _3065 * _3060, _3065 * _3061));
                        float _4436 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3076 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3080 = ((_3076 * _3076) * (_3058 + (-1.0))) + 1.0;
                        float _3081 = _3016 * _3057;
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3006) + _3082;
                        float _4447 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3086 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3087 = 1.0 - _3057;
                        float _3097 = (0.5 / (((_3086 * ((_3072 * _3087) + _3057)) + 9.9999999392252902907785028219223e-09) + (((_3086 * _3087) + _3057) * _3072))) * _3086;
                        float _4458 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3107 = (((_3058 * 3.1415927410125732421875) * (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) / ((_3080 * _3080) * ((_3023 * 2.1991131305694580078125) + 3.141590118408203125))) * _3012;
                        _2860 = (_3027 * _2975.x) + _2933;
                        _2861 = (_3027 * _2975.y) + _2934;
                        _2862 = (_3027 * _2975.z) + _2935;
                        _2857 = (_3107 * _2992.x) + _2930;
                        _2858 = (_3107 * _2992.y) + _2931;
                        _2859 = (_3107 * _2992.z) + _2932;
                        if (_2937 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2859;
                            _2933 = _2860;
                            _2934 = _2861;
                            _2935 = _2862;
                            _2936 = _2937;
                        }
                    }
                    frontier_phi_66_pred = _2857;
                    frontier_phi_66_pred_1 = _2862;
                    frontier_phi_66_pred_2 = _2861;
                    frontier_phi_66_pred_3 = _2860;
                    frontier_phi_66_pred_4 = _2859;
                    frontier_phi_66_pred_5 = _2858;
                }
                _2633 = frontier_phi_66_pred;
                _2643 = frontier_phi_66_pred_1;
                _2641 = frontier_phi_66_pred_2;
                _2639 = frontier_phi_66_pred_3;
                _2637 = frontier_phi_66_pred_4;
                _2635 = frontier_phi_66_pred_5;
                uint _2792 = _2791 + 1u;
                if (_2792 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2785 = _2633;
                    _2786 = _2635;
                    _2787 = _2637;
                    _2788 = _2639;
                    _2789 = _2641;
                    _2790 = _2643;
                    _2791 = _2792;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
        }
        uvec4 _2646 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2647 = _2646.z;
        uint _2649 = (_2647 >> 8u) & 15u;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        if (((4294967295u << _2649) & _2531) == 0u)
        {
            _2753 = _2632;
            _2755 = _2634;
            _2757 = _2636;
            _2759 = _2638;
            _2761 = _2640;
            _2763 = _2642;
        }
        else
        {
            float _2778 = inversesqrt(dot(vec3(_2485, _2486, _2487), vec3(_2485, _2486, _2487)));
            float _2779 = _2778 * _2485;
            float _2780 = _2778 * _2486;
            float _2781 = _2778 * _2487;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2649 < ((_2647 >> 12u) & 15u))
            {
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2913 = _2632;
                float _2914 = _2634;
                float _2915 = _2636;
                float _2916 = _2638;
                float _2917 = _2640;
                float _2918 = _2642;
                uint _2919 = _2649;
                uint _2928;
                bool _2929;
                for (;;)
                {
                    _2928 = texelFetch(g_lightClassification, int((((_2525 << 5u) + (_2511 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                    _2929 = _2928 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2929)
                    {
                        frontier_phi_77_pred = _2918;
                        frontier_phi_77_pred_1 = _2917;
                        frontier_phi_77_pred_2 = _2916;
                        frontier_phi_77_pred_3 = _2915;
                        frontier_phi_77_pred_4 = _2914;
                        frontier_phi_77_pred_5 = _2913;
                    }
                    else
                    {
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3134 = _2913;
                        float _3135 = _2914;
                        float _3136 = _2915;
                        float _3137 = _2916;
                        float _3138 = _2917;
                        float _3139 = _2918;
                        uint _3140 = _2928;
                        uint _3141;
                        vec4 _3166;
                        float _3167;
                        vec4 _3182;
                        vec3 _3194;
                        vec4 _3209;
                        vec4 _3224;
                        float _3270;
                        bool _3271;
                        for (;;)
                        {
                            uint _3151 = ((_2919 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3140));
                            _3141 = (_3140 + 4294967295u) & _3140;
                            uint _3153 = _3151 * 40u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            _3167 = _3166.w;
                            uint _3169 = (_3151 * 40u) + 4u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3184 = (_3151 * 40u) + 8u;
                            _3194 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x));
                            uint _3196 = (_3151 * 40u) + 16u;
                            _3209 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3196)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3196 + 3u)).x));
                            uint _3211 = (_3151 * 40u) + 20u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3226 = (_3151 * 40u) + 24u;
                            vec4 _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3245 = (_3151 * 40u) + 28u;
                            vec4 _3258 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3245)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3245 + 3u)).x));
                            _3270 = fma(_2487, _3258.z, fma(_2486, _3258.y, _3258.x * _2485)) + _3258.w;
                            _3271 = !((fma(_2487, _3239.z, fma(_2486, _3239.y, _3239.x * _2485)) + _3239.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3271)
                            {
                                float _3298 = _3166.x - _2485;
                                float _3299 = _3166.y - _2486;
                                float _3300 = _3166.z - _2487;
                                float _3301 = dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300));
                                float _3304 = inversesqrt(_3301);
                                float _3305 = _3304 * _3298;
                                float _3306 = _3304 * _3299;
                                float _3307 = _3304 * _3300;
                                float _3311 = 1.0 - (_3301 / (_3167 * _3167));
                                float _4469 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                                float _3312 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3316 = sqrt(_3301) * _3182.w;
                                float _3318 = 1.39999997615814208984375 / (_3316 + 1.39999997615814208984375);
                                float _3319 = _3318 * _3318;
                                float _3322 = ((1.0 - _3319) * dot(vec3(_3305, _3306, _3307), vec3(_734, _737, _740))) + _3319;
                                float _3325 = _3316 * _3316;
                                float _3329 = (fma(_2487, _3209.z, fma(_2486, _3209.y, _3209.x * _2485)) + _3209.w) / _3270;
                                float _3330 = (fma(_2487, _3224.z, fma(_2486, _3224.y, _3224.x * _2485)) + _3224.w) / _3270;
                                float _3334 = 1.0 - dot(vec2(_3329, _3330), vec2(_3329, _3330));
                                float _4485 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                                float _3335 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3336 = _3335 * (((isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0))) * _3312) / ((_3325 * 0.699999988079071044921875) + 1.0));
                                float _3348 = exp2(log2(1.0 / ((_3325 * 3.5) + 5.0)) * 0.25);
                                float _3349 = 1.0 - _794;
                                float _3356 = sqrt(1.0 - ((1.0 - (_3349 * _3349)) * (1.0 - (_3348 * _3348))));
                                float _3357 = _3356 * _3356;
                                float _3358 = _3357 * _3357;
                                float _3359 = _3305 - _2779;
                                float _3360 = _3306 - _2780;
                                float _3361 = _3307 - _2781;
                                float _3365 = inversesqrt(dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361)));
                                float _3369 = dot(vec3(_734, _737, _740), vec3((-0.0) - _2779, (-0.0) - _2780, (-0.0) - _2781));
                                float _4496 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3372 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3373 = dot(vec3(_734, _737, _740), vec3(_3365 * _3359, _3365 * _3360, _3365 * _3361));
                                float _4507 = isnan(0.0) ? _3373 : (isnan(_3373) ? 0.0 : max(_3373, 0.0));
                                float _3376 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3380 = ((_3376 * _3376) * (_3358 + (-1.0))) + 1.0;
                                float _3381 = _3318 * _3357;
                                float _3382 = _3381 * _3381;
                                float _3388 = ((1.0 - _3382) * dot(vec3(_734, _737, _740), vec3(_3305, _3306, _3307))) + _3382;
                                float _4518 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3390 = 1.0 - _3357;
                                float _3400 = (0.5 / (((_3389 * ((_3372 * _3390) + _3357)) + 9.9999999392252902907785028219223e-09) + (((_3389 * _3390) + _3357) * _3372))) * _3389;
                                float _4529 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3410 = (_3335 * _3312) * (((_3358 * 3.1415927410125732421875) * (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) / ((_3380 * _3380) * ((_3325 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3336 * _3182.y;
                                frontier_phi_83_pred_1 = _3336 * _3182.x;
                                frontier_phi_83_pred_2 = _3410 * _3194.z;
                                frontier_phi_83_pred_3 = _3410 * _3194.y;
                                frontier_phi_83_pred_4 = _3410 * _3194.x;
                                frontier_phi_83_pred_5 = _3336 * _3182.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3418 = frontier_phi_83_pred;
                            _3417 = frontier_phi_83_pred_1;
                            _3416 = frontier_phi_83_pred_2;
                            _3415 = frontier_phi_83_pred_3;
                            _3414 = frontier_phi_83_pred_4;
                            _3419 = frontier_phi_83_pred_5;
                            _3124 = _3417 + _3137;
                            _3125 = _3418 + _3138;
                            _3126 = _3419 + _3139;
                            _3121 = _3414 + _3134;
                            _3122 = _3415 + _3135;
                            _3123 = _3416 + _3136;
                            if (_3141 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3126;
                                _3140 = _3141;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3126;
                        frontier_phi_77_pred_1 = _3125;
                        frontier_phi_77_pred_2 = _3124;
                        frontier_phi_77_pred_3 = _3123;
                        frontier_phi_77_pred_4 = _3122;
                        frontier_phi_77_pred_5 = _3121;
                    }
                    _2764 = frontier_phi_77_pred;
                    _2762 = frontier_phi_77_pred_1;
                    _2760 = frontier_phi_77_pred_2;
                    _2758 = frontier_phi_77_pred_3;
                    _2756 = frontier_phi_77_pred_4;
                    _2754 = frontier_phi_77_pred_5;
                    uint _2920 = _2919 + 1u;
                    if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2913 = _2754;
                        _2914 = _2756;
                        _2915 = _2758;
                        _2916 = _2760;
                        _2917 = _2762;
                        _2918 = _2764;
                        _2919 = _2920;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2758;
                frontier_phi_58_59_ladder_1 = _2764;
                frontier_phi_58_59_ladder_2 = _2762;
                frontier_phi_58_59_ladder_3 = _2760;
                frontier_phi_58_59_ladder_4 = _2756;
                frontier_phi_58_59_ladder_5 = _2754;
            }
            else
            {
                frontier_phi_58_59_ladder = _2636;
                frontier_phi_58_59_ladder_1 = _2642;
                frontier_phi_58_59_ladder_2 = _2640;
                frontier_phi_58_59_ladder_3 = _2638;
                frontier_phi_58_59_ladder_4 = _2634;
                frontier_phi_58_59_ladder_5 = _2632;
            }
            _2753 = frontier_phi_58_59_ladder_5;
            _2755 = frontier_phi_58_59_ladder_4;
            _2757 = frontier_phi_58_59_ladder;
            _2759 = frontier_phi_58_59_ladder_3;
            _2761 = frontier_phi_58_59_ladder_2;
            _2763 = frontier_phi_58_59_ladder_1;
        }
        float _2768 = isnan(1.0) ? _778 : (isnan(_778) ? 1.0 : min(_778, 1.0));
        _2544 = (_2768 * _2759) + _1996;
        _2546 = (_2768 * _2761) + _1998;
        _2548 = (_2768 * _2763) + _2000;
        _2550 = ((_2753 * 0.039999999105930328369140625) * _2768) + _2329;
        _2552 = ((_2755 * 0.039999999105930328369140625) * _2768) + _2331;
        _2554 = ((_2757 * 0.039999999105930328369140625) * _2768) + _2333;
    }
    else
    {
        _2544 = _1996;
        _2546 = _1998;
        _2548 = _2000;
        _2550 = _2329;
        _2552 = _2331;
        _2554 = _2333;
    }
    float _4545 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4556 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4567 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _2571 = ((isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2544 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _778))) + ((_2550 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1612)) * cbPerFrame._m0[3u].x);
    float _2572 = ((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2546 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _778))) + ((_2552 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1612)) * cbPerFrame._m0[3u].x);
    float _2573 = ((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2548 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _778))) + ((_2554 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1612)) * cbPerFrame._m0[3u].x);
    uint _2574 = _265 + 6u;
    float _2582 = _713 / cbSceneParam._m0[86u].x;
    float _2583 = _714 / cbSceneParam._m0[86u].y;
    vec4 _2597 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2582, _2583, (log2((isnan(cbSceneParam._m0[77u].w) ? _634 : (isnan(_634) ? cbSceneParam._m0[77u].w : min(_634, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2599 = _2597.x;
    float _2600 = _2597.y;
    float _2601 = _2597.z;
    float _2602 = _2597.w;
    float _2695;
    float _2697;
    float _2699;
    float _2701;
    if (_634 > cbSceneParam._m0[78u].w)
    {
        float _2657 = isnan(_634) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _634 : min(cbSceneParam._m0[80u].w, _634));
        float _2658 = _2657 / _634;
        float _2669 = _2658 * _685;
        float _2670 = _686 * _2658;
        float _2671 = (-0.0) - _2670;
        float _2673 = _2658 * _687;
        float _2675 = (cbSceneParam._m0[77u].w * _2671) / _2657;
        float _2676 = _2675 + cbSceneParam._m0[79u].w;
        float _2677 = cbSceneParam._m0[79u].w - _2670;
        float _2683 = sqrt(((_2669 * _2669) + (_2670 * _2670)) + (_2673 * _2673));
        float _2686 = (1.0 - (cbSceneParam._m0[77u].w / _2657)) * _2683;
        float _2691 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2693 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2870;
        if (abs((_2671 - _2675) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2870 = ((((_2676 > 0.0) ? exp2(_2691 * _2676) : (2.0 - exp2(_2693 * _2676))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2686;
        }
        else
        {
            float _2814 = 1.0 / cbSceneParam._m0[80u].x;
            float _2815 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : max(_2676, _2677));
            float _2816 = isnan(_2677) ? _2676 : (isnan(_2676) ? _2677 : min(_2676, _2677));
            float _2825 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : min(_2815, 0.0));
            float _2826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : min(_2816, 0.0));
            _2870 = ((abs(_2683 / _2671) * cbSceneParam._m0[80u].y) * ((((_2825 - _2826) * 2.0) - ((exp2(_2691 * (isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0)))) - exp2(_2691 * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))))) * _2814)) - ((exp2(_2693 * _2825) - exp2(_2693 * _2826)) * _2814))) + (_2686 * cbSceneParam._m0[80u].z);
        }
        vec4 _2872 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2582, _2583, 1.0), 0.0);
        float _2881 = exp2((_2870 * (-1.44269502162933349609375)) * (1.0 - _2872.w));
        float _2882 = log2(_2881);
        float _2898 = log2(_2602);
        _2695 = (exp2(_2898 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].x)) * _2872.x) / cbSceneParam._m0[78u].x)) + _2599;
        _2697 = (exp2(_2898 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].y)) * _2872.y) / cbSceneParam._m0[78u].y)) + _2600;
        _2699 = (exp2(_2898 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2882 * cbSceneParam._m0[78u].z)) * _2872.z) / cbSceneParam._m0[78u].z)) + _2601;
        _2701 = _2881 * _2602;
    }
    else
    {
        _2695 = _2599;
        _2697 = _2600;
        _2699 = _2601;
        _2701 = _2602;
    }
    bool _2908;
    vec4 _2711;
    vec4 _2733;
    float _2735;
    float _2739;
    float _2740;
    float _2741;
    float _2742;
    bool _2752;
    for (;;)
    {
        _2711 = cbMatDynParam._m0[0u];
        float _2713 = roundEven(_2711.y);
        bool _2714 = _2713 == 3.0;
        float _2715 = log2(_2701);
        float _2722 = exp2(_2715 * cbSceneParam._m0[78u].x) * _2571;
        float _2723 = exp2(_2715 * cbSceneParam._m0[78u].y) * _2572;
        float _2724 = exp2(_2715 * cbSceneParam._m0[78u].z) * _2573;
        float _2731 = _701 + (-0.5);
        _2733 = cbMtdParam._m0[1u];
        _2735 = _2733.y * _2731;
        float _2738 = (_2713 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2739 = _2738 * (_2714 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2695)));
        _2740 = _2738 * (_2714 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2697)));
        _2741 = _2738 * (_2714 ? _2724 : (_2724 + (cbSceneParam._m0[72u].w * _2699)));
        _2742 = _2731 * 0.999000012874603271484375;
        _2752 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2752)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _2742) < 0.5)
            {
                _2908 = true;
                break;
            }
        }
        uint _2849 = _753 + uint(_2711.w);
        if ((cbInstanceData._m0[_2849].w < 1.0) && ((cbInstanceData._m0[_2849].w + _2742) < 0.5))
        {
            _2908 = true;
            break;
        }
        if ((_2735 + 1.0) < _2733.x)
        {
            _2908 = true;
            break;
        }
        _2908 = false;
        break;
    }
    float _3112;
    if (_2908)
    {
        discard_state = true;
        _3112 = 0.0;
    }
    else
    {
        _3112 = cbInstanceData._m0[_2574].w;
    }
    SV_Target.x = _2739;
    SV_Target.y = _2740;
    SV_Target.z = _2741;
    SV_Target.w = _3112;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2574].w;
    discard_exit();
}


