#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1104;
float _3492;
float _3493;
float _3494;
float _3495;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _308 = _304.z;
    float _313 = (_304.x * 2.0) + (-1.0);
    float _315 = (_304.y * 2.0) + (-1.0);
    float _316 = dot(vec2(_313, _315), vec2(_313, _315));
    float _3504 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _322 = sqrt(1.0 - (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))));
    vec4 _339 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _341 = _339.x;
    float _342 = 1.0 - _341;
    float _351 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _354 = ((isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : min(_351, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _363 = (_354 - ((((((_341 - _342) * cbMtdParam._m0[24u].z) + _342) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _354))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3525 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _371 = (_364 * (cbMtdParam._m0[17u].x - _284)) + _284;
    float _372 = (_364 * (cbMtdParam._m0[17u].y - _285)) + _285;
    float _373 = (_364 * (cbMtdParam._m0[17u].z - _286)) + _286;
    vec4 _386 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _388 = _386.x;
    float _389 = 1.0 - _388;
    float _418 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_388 - _389) * cbMtdParam._m0[24u].w) + _389) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3536 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _427 = ((((cbMtdParam._m0[10u].x - _371) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _419) + _371;
    float _428 = ((((cbMtdParam._m0[10u].y - _372) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _419) + _372;
    float _429 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _373)) * _419) + _373;
    vec4 _443 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _450 = (_443.x * 2.0) + (-1.0);
    float _451 = (_443.y * 2.0) + (-1.0);
    float _452 = dot(vec2(_450, _451), vec2(_450, _451));
    float _3547 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _460 = (_364 * (_443.z - _308)) + _308;
    float _463 = ((cbMtdParam._m0[23u].y - _460) * _419) + _460;
    vec4 _485 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _491 = (_485.x * 2.0) + (-1.0);
    float _492 = (_485.y * 2.0) + (-1.0);
    float _493 = dot(vec2(_491, _492), vec2(_491, _492));
    float _3558 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _510 = (((_450 - _313) + (cbMtdParam._m0[21u].x * _313)) * _364) + _313;
    float _511 = (((_451 - _315) + (cbMtdParam._m0[21u].x * _315)) * _364) + _315;
    float _512 = (_364 * (sqrt(1.0 - (isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0)))) - _322)) + _322;
    float _523 = (((_491 - _510) + (_510 * cbMtdParam._m0[22u].z)) * _419) + _510;
    float _524 = (((_492 - _511) + (_511 * cbMtdParam._m0[22u].z)) * _419) + _511;
    float _525 = ((sqrt(1.0 - (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) - _512) * _419) + _512;
    float _527 = cbMtdParam._m0[22u].x + _304.w;
    float _530 = fma(_525, _226 * NORMAL.x, fma(_524, _233 * TANGENT.x, (_219 * _211) * _523));
    float _533 = fma(_525, _226 * NORMAL.y, fma(_524, _233 * TANGENT.y, (_219 * _212) * _523));
    float _536 = fma(_525, _226 * NORMAL.z, fma(_524, _233 * TANGENT.z, (_219 * _213) * _523));
    float _540 = inversesqrt(dot(vec3(_530, _533, _536), vec3(_530, _533, _536)));
    float _541 = _540 * _530;
    float _542 = _540 * _533;
    float _543 = _540 * _536;
    float _3569 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _544 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3591 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3602 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3613 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _562 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _612 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _602);
    float _613 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _602);
    float _614 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _602);
    float _618 = inversesqrt(dot(vec3(_612, _613, _614), vec3(_612, _613, _614)));
    float _619 = _612 * _618;
    float _620 = _613 * _618;
    float _621 = _614 * _618;
    vec4 _626 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _628 = _626.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _785 = sqrt(((_612 * _612) + (_613 * _613)) + (_614 * _614));
        float _791 = (cbMatDynParam._m0[5u].x * _785) + cbMatDynParam._m0[5u].y;
        float _3624 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _796 = (cbMatDynParam._m0[5u].z * _785) + cbMatDynParam._m0[5u].w;
        float _3635 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) - _792)) + _792) < ((_628 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _640 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _641 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _661 = fma(_543, cbSceneParam._m0[5u].z, fma(_542, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _541));
    float _664 = fma(_543, cbSceneParam._m0[6u].z, fma(_542, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _541));
    float _667 = fma(_543, cbSceneParam._m0[7u].z, fma(_542, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _541));
    uint _680 = _239 + 9u;
    uint _681 = _680 + uint(cbMatDynParam._m0[0u].w);
    float _687 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_681].x;
    float _688 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_681].y;
    float _689 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_681].z;
    float _3646 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    vec4 _701 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _640, cbSceneParam._m0[86u].y * _641));
    float _705 = ((isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * TEXCOORD_5.w) * _701.x;
    float _706 = dot(vec3(_541, _542, _543), vec3(_619, _620, _621));
    float _709 = _706 * 2.0;
    float _713 = (_709 * _541) - _619;
    float _714 = (_709 * _542) - _620;
    float _715 = (_709 * _543) - _621;
    float _719 = abs(dot(vec3(_619, _620, _621), vec3(_541, _542, _543)));
    float _3679 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _721 = sqrt(_544);
    float _734 = exp2((_721 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_721 * 3.0));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1103;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _828 = fma(_774, cbModelParam._m0[26u].z, fma(_770, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _766));
        float _832 = fma(_774, cbModelParam._m0[27u].z, fma(_770, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _766));
        float _836 = fma(_774, cbModelParam._m0[28u].z, fma(_770, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _766));
        float _861 = _766 + _541;
        float _862 = _770 + _542;
        float _863 = _774 + _543;
        float _873 = fma(_863, cbModelParam._m0[26u].z, fma(_862, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861)) - _828;
        float _874 = fma(_863, cbModelParam._m0[27u].z, fma(_862, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861)) - _832;
        float _875 = fma(_863, cbModelParam._m0[28u].z, fma(_862, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861)) - _836;
        float _879 = inversesqrt(dot(vec3(_873, _874, _875), vec3(_873, _874, _875)));
        float _892 = ((_879 * _873) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_828 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _893 = ((_879 * _874) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_832 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _894 = ((_879 * _875) / cbModelParam._m0[34u].z) + ((((((_836 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_892, _893, _894), 0.0);
        float _931 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_897.x + (-0.5));
        float _933 = _931 * (_897.y + (-0.5));
        float _934 = _931 * (_897.z + (-0.5));
        float _941 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_904.x + (-0.5));
        float _943 = _941 * (_904.y + (-0.5));
        float _944 = _941 * (_904.z + (-0.5));
        float _951 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_911.x + (-0.5));
        float _953 = _951 * (_911.y + (-0.5));
        float _954 = _951 * (_911.z + (-0.5));
        float _961 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_918.x + (-0.5));
        float _963 = _961 * (_918.y + (-0.5));
        float _964 = _961 * (_918.z + (-0.5));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = _932 * 0.5;
        float _969 = _942 * 0.5;
        float _970 = _952 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _985 = (dot(vec3(_541, _542, _543), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _995 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3727 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_997 + 1.0))) + _1002) * _965;
        float _1012 = _933 * 0.5;
        float _1013 = _943 * 0.5;
        float _1014 = _953 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_541, _542, _543), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3760 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1039 + 1.0))) + _1044) * _966;
        float _1054 = _934 * 0.5;
        float _1055 = _944 * 0.5;
        float _1056 = _954 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_541, _542, _543), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3793 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1081 + 1.0))) + _1086) * _967;
        _1103 = _934;
        _1105 = _933;
        _1106 = _932;
        _1107 = _944;
        _1108 = _943;
        _1109 = _942;
        _1110 = _954;
        _1111 = _953;
        _1112 = _952;
        _1113 = _967;
        _1114 = _966;
        _1115 = _965;
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1117 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
    }
    else
    {
        _1103 = _1104;
        _1105 = _1104;
        _1106 = _1104;
        _1107 = _1104;
        _1108 = _1104;
        _1109 = _1104;
        _1110 = _1104;
        _1111 = _1104;
        _1112 = _1104;
        _1113 = _1104;
        _1114 = _1104;
        _1115 = _1104;
        _1116 = 0.0;
        _1117 = 0.0;
        _1118 = 0.0;
    }
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1146 = fma(_774, cbModelParam._m0[30u].z, fma(_770, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _766));
        float _1150 = fma(_774, cbModelParam._m0[31u].z, fma(_770, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _766));
        float _1154 = fma(_774, cbModelParam._m0[32u].z, fma(_770, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _766));
        float _1177 = _766 + _541;
        float _1178 = _770 + _542;
        float _1179 = _774 + _543;
        float _1189 = fma(_1179, cbModelParam._m0[30u].z, fma(_1178, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1177)) - _1146;
        float _1190 = fma(_1179, cbModelParam._m0[31u].z, fma(_1178, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1177)) - _1150;
        float _1191 = fma(_1179, cbModelParam._m0[32u].z, fma(_1178, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1177)) - _1154;
        float _1195 = inversesqrt(dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191)));
        float _1208 = ((_1195 * _1189) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1146 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1195 * _1190) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1150 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1195 * _1191) / cbModelParam._m0[35u].z) + ((((((_1154 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        float _1245 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1212.x + (-0.5));
        float _1247 = _1245 * (_1212.y + (-0.5));
        float _1248 = _1245 * (_1212.z + (-0.5));
        float _1255 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1219.x + (-0.5));
        float _1257 = _1255 * (_1219.y + (-0.5));
        float _1258 = _1255 * (_1219.z + (-0.5));
        float _1265 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1226.x + (-0.5));
        float _1267 = _1265 * (_1226.y + (-0.5));
        float _1268 = _1265 * (_1226.z + (-0.5));
        float _1275 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1233.x + (-0.5));
        float _1277 = _1275 * (_1233.y + (-0.5));
        float _1278 = _1275 * (_1233.z + (-0.5));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = _1246 * 0.5;
        float _1283 = _1256 * 0.5;
        float _1284 = _1266 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_541, _542, _543), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _3856 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1309 + 1.0))) + _1314) * _1279;
        float _1324 = _1247 * 0.5;
        float _1325 = _1257 * 0.5;
        float _1326 = _1267 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_541, _542, _543), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3889 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1351 + 1.0))) + _1356) * _1280;
        float _1366 = _1248 * 0.5;
        float _1367 = _1258 * 0.5;
        float _1368 = _1268 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_541, _542, _543), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _3922 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1393 + 1.0))) + _1398) * _1281;
        _1415 = _1248;
        _1416 = _1247;
        _1417 = _1246;
        _1418 = _1258;
        _1419 = _1257;
        _1420 = _1256;
        _1421 = _1268;
        _1422 = _1267;
        _1423 = _1266;
        _1424 = _1281;
        _1425 = _1280;
        _1426 = _1279;
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
    }
    else
    {
        _1415 = _1104;
        _1416 = _1104;
        _1417 = _1104;
        _1418 = _1104;
        _1419 = _1104;
        _1420 = _1104;
        _1421 = _1104;
        _1422 = _1104;
        _1423 = _1104;
        _1424 = _1104;
        _1425 = _1104;
        _1426 = _1104;
        _1427 = 0.0;
        _1428 = 0.0;
        _1429 = 0.0;
    }
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1116)) + _1116;
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1117)) + _1117;
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1118)) + _1118;
    float _1462 = fma(_1441, cbSceneParam._m0[89u].z, fma(_1440, cbSceneParam._m0[89u].y, _1439 * cbSceneParam._m0[89u].x));
    float _1465 = fma(_1441, cbSceneParam._m0[90u].z, fma(_1440, cbSceneParam._m0[90u].y, _1439 * cbSceneParam._m0[90u].x));
    float _1468 = fma(_1441, cbSceneParam._m0[91u].z, fma(_1440, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1439));
    float _1483 = _713 * 0.5;
    float _1484 = _714 * 0.5;
    float _1485 = _715 * 0.5;
    float _1486 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1489 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1492 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1526;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1499 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1103, _1107, _1110, _1113));
        float _1503 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1105, _1108, _1111, _1114));
        float _1507 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1106, _1109, _1112, _1115));
        float _1514 = dot(vec4(cbModelParam._m0[39u]), vec4(_1483, _1484, _1485, 1.0));
        _1526 = dot(vec3(isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1514) ? 0.0 : (isnan(0.0) ? _1514 : max(0.0, _1514))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1526 = 1.0;
    }
    float _1537;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1528 = dot(vec4(cbModelParam._m0[40u]), vec4(_1483, _1484, _1485, 1.0));
        _1537 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1537 = 1.0;
    }
    float _1541 = (_1537 * cbModelParam._m0[1u].x) + (_1526 * (1.0 - cbModelParam._m0[1u].x));
    float _1551 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _544);
    float _1552 = isnan(_1551) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1551 : min(cbModelParam._m0[25u].z, _1551));
    float _1633;
    float _1635;
    float _1637;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1600 = fma(_774, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766)) + cbModelParam._m0[13u].w;
        float _1604 = fma(_774, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766)) + cbModelParam._m0[14u].w;
        float _1608 = fma(_774, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766)) + cbModelParam._m0[15u].w;
        float _1611 = fma(_715, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713));
        float _1614 = fma(_715, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713));
        float _1617 = fma(_715, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713));
        float _1645;
        if (_1611 > 0.0)
        {
            _1645 = abs((1.0 - _1600) / _1611);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1600 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1645 = frontier_phi_17_15_ladder;
        }
        float _1869;
        if (_1614 > 0.0)
        {
            _1869 = abs((1.0 - _1604) / _1614);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1604 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1869 = frontier_phi_26_22_ladder;
        }
        float _2115;
        if (_1617 > 0.0)
        {
            _2115 = abs((1.0 - _1608) / _1617);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1608 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2115 = frontier_phi_38_33_ladder;
        }
        float _2117 = isnan(_1869) ? _1645 : (isnan(_1645) ? _1869 : min(_1645, _1869));
        float _2118 = isnan(_2115) ? _2117 : (isnan(_2117) ? _2115 : min(_2117, _2115));
        float _2122 = (_2118 * _1611) + _1600;
        float _2123 = (_2118 * _1614) + _1604;
        float _2124 = (_2118 * _1617) + _1608;
        float _2125 = _2118 * 9.9999997473787516355514526367188e-05;
        float _2127 = (-1.0) - _2125;
        float _2129 = _2125 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2124 > _2129) || ((_2124 < _2127) || ((_2123 > _2129) || ((_2123 < _2127) || ((_2122 < _2127) || (_2122 > _2129))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2248 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2124, cbModelParam._m0[9u].z, fma(_2123, cbModelParam._m0[9u].y, _2122 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2124, cbModelParam._m0[10u].z, fma(_2123, cbModelParam._m0[10u].y, _2122 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2124, cbModelParam._m0[11u].z, fma(_2123, cbModelParam._m0[11u].y, _2122 * cbModelParam._m0[11u].x))), _1552);
            frontier_phi_16_38_ladder = _2248.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2248.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2248.x * cbModelParam._m0[1u].y;
        }
        _1633 = frontier_phi_16_38_ladder_2;
        _1635 = frontier_phi_16_38_ladder_1;
        _1637 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1621 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_713, _714, _715), _1552);
        _1633 = _1621.x * cbModelParam._m0[1u].y;
        _1635 = _1621.y * cbModelParam._m0[1u].y;
        _1637 = _1621.z * cbModelParam._m0[1u].y;
    }
    float _1641 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _544);
    float _1642 = isnan(_1641) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1641 : min(cbModelParam._m0[25u].w, _1641));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1696 = fma(_774, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766)) + cbModelParam._m0[21u].w;
        float _1700 = fma(_774, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766)) + cbModelParam._m0[22u].w;
        float _1704 = fma(_774, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766)) + cbModelParam._m0[23u].w;
        float _1707 = fma(_715, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713));
        float _1710 = fma(_715, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713));
        float _1713 = fma(_715, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713));
        float _1874;
        if (_1707 > 0.0)
        {
            _1874 = abs((1.0 - _1696) / _1707);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1696 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1874 = frontier_phi_28_24_ladder;
        }
        float _2142;
        if (_1710 > 0.0)
        {
            _2142 = abs((1.0 - _1700) / _1710);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1700 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2142 = frontier_phi_40_35_ladder;
        }
        float _2347;
        if (_1713 > 0.0)
        {
            _2347 = abs((1.0 - _1704) / _1713);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1704 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2347 = frontier_phi_49_46_ladder;
        }
        float _2349 = isnan(_2142) ? _1874 : (isnan(_1874) ? _2142 : min(_1874, _2142));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1707) + _1696;
        float _2355 = (_2350 * _1710) + _1700;
        float _2356 = (_2350 * _1713) + _1704;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2357;
        float _2360 = _2357 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2356 > _2360) || ((_2356 < _2358) || ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 < _2358) || (_2354 > _2360))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2555 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2356, cbModelParam._m0[17u].z, fma(_2355, cbModelParam._m0[17u].y, _2354 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2356, cbModelParam._m0[18u].z, fma(_2355, cbModelParam._m0[18u].y, _2354 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2356, cbModelParam._m0[19u].z, fma(_2355, cbModelParam._m0[19u].y, _2354 * cbModelParam._m0[19u].x))), _1642);
            frontier_phi_25_49_ladder = _2555.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2555.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2555.x * cbModelParam._m0[1u].z;
        }
        _1732 = frontier_phi_25_49_ladder_2;
        _1734 = frontier_phi_25_49_ladder_1;
        _1736 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1716 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_713, _714, _715), _1642);
        _1732 = _1716.x * cbModelParam._m0[1u].z;
        _1734 = _1716.y * cbModelParam._m0[1u].z;
        _1736 = _1716.z * cbModelParam._m0[1u].z;
    }
    float _1748 = ((((1.0 - _734) * ((_721 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_734 * _721)) * _705;
    float _1749 = _1748 * ((cbModelParam._m0[1u].w * (_1732 - _1633)) + _1633);
    float _1750 = _1748 * ((cbModelParam._m0[1u].w * (_1734 - _1635)) + _1635);
    float _1751 = _1748 * ((cbModelParam._m0[1u].w * (_1736 - _1637)) + _1637);
    float _1754 = fma(_1751, cbSceneParam._m0[89u].z, fma(_1750, cbSceneParam._m0[89u].y, _1749 * cbSceneParam._m0[89u].x));
    float _1757 = fma(_1751, cbSceneParam._m0[90u].z, fma(_1750, cbSceneParam._m0[90u].y, _1749 * cbSceneParam._m0[90u].x));
    float _1760 = fma(_1751, cbSceneParam._m0[91u].z, fma(_1750, cbSceneParam._m0[91u].y, _1749 * cbSceneParam._m0[91u].x));
    vec4 _1768 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_640, _641));
    float _1770 = _1768.w;
    float _1782 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1770);
    float _1783 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1770);
    float _1784 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1770);
    uvec4 _1788 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1790 = _1788.x * 14u;
    uint _1791 = _1790 + 13u;
    float _1798 = _705 + (-1.0);
    float _1803 = (cbLight._m0[_1791].x * _1798) + 1.0;
    float _1804 = (cbLight._m0[_1791].y * _1798) + 1.0;
    float _1805 = (cbLight._m0[_1791].z * _1798) + 1.0;
    float _1806 = (cbLight._m0[_1791].w * _1798) + 1.0;
    uint _1807 = _1790 + 5u;
    float _1813 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
    uint _1817 = _1790 + 4u;
    float _1827 = isnan(1.0) ? _1803 : (isnan(_1803) ? 1.0 : min(_1803, 1.0));
    uint _1831 = _1790 | 1u;
    float _1842 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_541, _542, _543));
    float _1845 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_541, _542, _543));
    float _4058 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _4069 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1850 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1852 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1859 = ((cbLight._m0[_1807].x * _1813) * _1852) + (((cbLight._m0[_1817].x * _1782) * _1827) * _1850);
    float _1860 = ((_1813 * cbLight._m0[_1807].y) * _1852) + (((cbLight._m0[_1817].y * _1783) * _1827) * _1850);
    float _1861 = ((_1813 * cbLight._m0[_1807].z) * _1852) + (((cbLight._m0[_1817].z * _1784) * _1827) * _1850);
    uvec4 _1866 = floatBitsToUint(cbLight._m0[_1790 + 12u]);
    bool _1868 = _1866.x == 0u;
    float _1879;
    float _1881;
    float _1883;
    if (_1868)
    {
        _1879 = _1859;
        _1881 = _1860;
        _1883 = _1861;
    }
    else
    {
        uint _1887 = _1790 + 6u;
        float _1903 = (dot(vec3(cbLight._m0[_1790 + 2u].xyz), vec3(_541, _542, _543)) * 0.5) + 0.5;
        float _1904 = _1903 * _1903;
        float _4080 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1906 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
        _1879 = (((cbLight._m0[_1887].x * 0.3183098733425140380859375) * _1905) * _1906) + _1859;
        _1881 = (((cbLight._m0[_1887].y * 0.3183098733425140380859375) * _1905) * _1906) + _1860;
        _1883 = (((cbLight._m0[_1887].z * 0.3183098733425140380859375) * _1905) * _1906) + _1861;
    }
    bool _1886 = _1866.y == 0u;
    float _1924;
    float _1926;
    float _1928;
    if (_1886)
    {
        _1924 = _1879;
        _1926 = _1881;
        _1928 = _1883;
    }
    else
    {
        uint _2086 = _1790 + 7u;
        float _2102 = (dot(vec3(cbLight._m0[_1790 + 3u].xyz), vec3(_541, _542, _543)) * 0.5) + 0.5;
        float _2103 = _2102 * _2102;
        float _4096 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2104 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2105 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _1924 = (((cbLight._m0[_2086].x * 0.3183098733425140380859375) * _2104) * _2105) + _1879;
        _1926 = (((cbLight._m0[_2086].y * 0.3183098733425140380859375) * _2104) * _2105) + _1881;
        _1928 = (((cbLight._m0[_2086].z * 0.3183098733425140380859375) * _2104) * _2105) + _1883;
    }
    uint _1931 = _1790 + 8u;
    float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * _544) * 0.949999988079071044921875);
    float _1945 = _1944 * _1944;
    float _1946 = cbLight._m0[_1790].x + _619;
    float _1947 = cbLight._m0[_1790].y + _620;
    float _1948 = cbLight._m0[_1790].z + _621;
    float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
    float _1953 = _1952 * _1946;
    float _1954 = _1952 * _1947;
    float _1955 = _1952 * _1948;
    float _1956 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_1790].xyz));
    float _4112 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _1960 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _1961 = dot(vec3(_541, _542, _543), vec3(_1953, _1954, _1955));
    float _4134 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _1965 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1953, _1954, _1955));
    float _4145 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1969 = _1945 * _1945;
    float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
    float _1984 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1985 = 1.0 - _1945;
    float _1996 = (0.5 / (((_1960 * ((_1959 * _1985) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _1985) + _1945) * _1959))) * _1959;
    float _4156 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1998 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
    uint _2012 = _1790 + 9u;
    float _2023 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _544) * 0.949999988079071044921875);
    float _2024 = _2023 * _2023;
    float _2025 = cbLight._m0[_1831].x + _619;
    float _2026 = cbLight._m0[_1831].y + _620;
    float _2027 = cbLight._m0[_1831].z + _621;
    float _2031 = inversesqrt(dot(vec3(_2025, _2026, _2027), vec3(_2025, _2026, _2027)));
    float _2032 = _2031 * _2025;
    float _2033 = _2031 * _2026;
    float _2034 = _2031 * _2027;
    float _2035 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_1831].xyz));
    float _4167 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2039 = dot(vec3(_541, _542, _543), vec3(_2032, _2033, _2034));
    float _4178 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2043 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_2032, _2033, _2034));
    float _4189 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2047 = _2024 * _2024;
    float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
    float _2060 = (exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2061 = 1.0 - _2024;
    float _2071 = (0.5 / (((_1960 * ((_2038 * _2061) + _2024)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2061) + _2024) * _2038))) * _2038;
    float _4200 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
    float _2083 = (((_2060 * cbLight._m0[_2012].x) * _2073) * _1813) + ((((cbLight._m0[_1931].x * _1782) * _1984) * _1998) * _1827);
    float _2084 = (((_2060 * cbLight._m0[_2012].y) * _2073) * _1813) + ((((cbLight._m0[_1931].y * _1783) * _1984) * _1998) * _1827);
    float _2085 = (((_2060 * cbLight._m0[_2012].z) * _2073) * _1813) + ((((cbLight._m0[_1931].z * _1784) * _1984) * _1998) * _1827);
    float _2147;
    float _2149;
    float _2151;
    if (_1868)
    {
        _2147 = _2083;
        _2149 = _2084;
        _2151 = _2085;
    }
    else
    {
        uint _2153 = _1790 + 2u;
        uint _2157 = _1790 + 10u;
        float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _544) * 0.949999988079071044921875);
        float _2172 = _2171 * _2171;
        float _2173 = cbLight._m0[_2153].x + _619;
        float _2174 = cbLight._m0[_2153].y + _620;
        float _2175 = cbLight._m0[_2153].z + _621;
        float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
        float _2180 = _2179 * _2173;
        float _2181 = _2179 * _2174;
        float _2182 = _2179 * _2175;
        float _2183 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2153].xyz));
        float _4211 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2186 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2187 = dot(vec3(_541, _542, _543), vec3(_2180, _2181, _2182));
        float _4222 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2190 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2191 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2180, _2181, _2182));
        float _4233 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2195 = _2172 * _2172;
        float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
        float _2208 = (exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2209 = 1.0 - _2172;
        float _2219 = (0.5 / (((_1960 * ((_2186 * _2209) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2209) + _2172) * _2186))) * _2186;
        float _4244 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2221 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
        float _2222 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
        _2147 = (((_2208 * cbLight._m0[_2157].x) * _2221) * _2222) + _2083;
        _2149 = (((_2208 * cbLight._m0[_2157].y) * _2221) * _2222) + _2084;
        _2151 = (((_2208 * cbLight._m0[_2157].z) * _2221) * _2222) + _2085;
    }
    float _2257;
    float _2259;
    float _2261;
    if (_1886)
    {
        _2257 = _2147;
        _2259 = _2149;
        _2261 = _2151;
    }
    else
    {
        uint _2268 = _1790 + 3u;
        uint _2272 = _1790 + 11u;
        float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _544) * 0.949999988079071044921875);
        float _2287 = _2286 * _2286;
        float _2288 = cbLight._m0[_2268].x + _619;
        float _2289 = cbLight._m0[_2268].y + _620;
        float _2290 = cbLight._m0[_2268].z + _621;
        float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
        float _2295 = _2294 * _2288;
        float _2296 = _2294 * _2289;
        float _2297 = _2294 * _2290;
        float _2298 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_2268].xyz));
        float _4260 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2302 = dot(vec3(_541, _542, _543), vec3(_2295, _2296, _2297));
        float _4271 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2306 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2295, _2296, _2297));
        float _4282 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2310 = _2287 * _2287;
        float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
        float _2323 = (exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2324 = 1.0 - _2287;
        float _2334 = (0.5 / (((_1960 * ((_2301 * _2324) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2324) + _2287) * _2301))) * _2301;
        float _4293 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2336 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
        float _2337 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _2257 = (((_2323 * cbLight._m0[_2272].x) * _2336) * _2337) + _2147;
        _2259 = (((_2323 * cbLight._m0[_2272].y) * _2336) * _2337) + _2149;
        _2261 = (((_2323 * cbLight._m0[_2272].z) * _2336) * _2337) + _2151;
    }
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    if (_1788.y == 0u)
    {
        float _2412 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2413 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2412;
        float _2414 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2412;
        float _2415 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2412;
        uvec4 _2427 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2428 = _2427.x;
        uint _2439 = uint((float(_2427.y) * floor(float(uint(cbSceneParam._m0[85u].y * _641) / _2428))) + floor(float(uint(cbSceneParam._m0[85u].x * _640) / _2428)));
        float _2449 = (log2(_2415 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2450 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        uint _2453 = uint(isnan(14.0) ? _2450 : (isnan(_2450) ? 14.0 : min(_2450, 14.0)));
        uvec4 _2458 = texelFetch(g_lightClusterGridBuffer, int(((_2453 << 2u) + (_2439 << 6u)) >> 2u));
        uint _2459 = _2458.x;
        uint _2460 = _2427.z;
        float _2560;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        if (((((1u << ((_2460 >> 4u) & 15u)) + 4294967295u) & _2459) == 0u) || ((_2460 & 240u) == 0u))
        {
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
        }
        else
        {
            float _2561;
            float _2563;
            float _2565;
            float _2567;
            float _2569;
            float _2571;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            uint _2719 = 0u;
            uint _2728;
            bool _2729;
            for (;;)
            {
                _2728 = texelFetch(g_lightClassification, int((((_2453 << 5u) + (_2439 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                _2729 = _2728 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2729)
                {
                    frontier_phi_66_pred = _2713;
                    frontier_phi_66_pred_1 = _2718;
                    frontier_phi_66_pred_2 = _2717;
                    frontier_phi_66_pred_3 = _2716;
                    frontier_phi_66_pred_4 = _2715;
                    frontier_phi_66_pred_5 = _2714;
                }
                else
                {
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    uint _2864;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2728;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    float _2790;
                    for (;;)
                    {
                        uint _2868 = uint(findLSB(_2864)) + (_2719 << 5u);
                        uint _2865 = (_2864 + 4294967295u) & _2864;
                        uint _2870 = _2868 * 48u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2890 = (_2868 * 48u) + 4u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2909 = (_2868 * 48u) + 8u;
                        vec3 _2920 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x));
                        float _2924 = _2884.x - _2413;
                        float _2925 = _2884.y - _2414;
                        float _2926 = _2884.z - _2415;
                        float _2927 = dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926));
                        float _2930 = inversesqrt(_2927);
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2934 = dot(vec3(_661, _664, _667), vec3(_2931, _2932, _2933));
                        float _2939 = 1.0 - (_2927 * _2884.w);
                        float _4319 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _2941 = sqrt(_2927) * _2903.w;
                        float _2944 = 1.39999997615814208984375 / (_2941 + 1.39999997615814208984375);
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2934) + _2945;
                        float _2951 = _2941 * _2941;
                        float _2955 = ((isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))) * _2940) / ((_2951 * 0.699999988079071044921875) + 1.0);
                        float _2959 = (-0.0) - _2413;
                        float _2960 = (-0.0) - _2414;
                        float _2961 = (-0.0) - _2415;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2976 = exp2(log2(1.0 / ((_2951 * 3.5) + 5.0)) * 0.25);
                        float _2977 = 1.0 - _721;
                        float _2984 = sqrt(1.0 - ((1.0 - (_2977 * _2977)) * (1.0 - (_2976 * _2976))));
                        float _2985 = _2984 * _2984;
                        float _2986 = _2985 * _2985;
                        float _2987 = _2966 + _2931;
                        float _2988 = _2967 + _2932;
                        float _2989 = _2968 + _2933;
                        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
                        float _2997 = dot(vec3(_661, _664, _667), vec3(_2966, _2967, _2968));
                        float _4335 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                        float _3000 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3001 = dot(vec3(_661, _664, _667), vec3(_2993 * _2987, _2993 * _2988, _2993 * _2989));
                        float _4346 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3004 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3008 = ((_3004 * _3004) * (_2986 + (-1.0))) + 1.0;
                        float _3009 = _2944 * _2985;
                        float _3010 = _3009 * _3009;
                        float _3013 = ((1.0 - _3010) * _2934) + _3010;
                        float _4357 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3014 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3015 = 1.0 - _2985;
                        float _3025 = (0.5 / (((_3014 * ((_3000 * _3015) + _2985)) + 9.9999999392252902907785028219223e-09) + (((_3014 * _3015) + _2985) * _3000))) * _3014;
                        float _4368 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3036 = (((_2986 * 3.1415927410125732421875) * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) / ((_3008 * _3008) * ((_2951 * 2.1991131305694580078125) + 3.141590118408203125))) * _2940;
                        _2788 = (_2955 * _2903.x) + _2861;
                        _2789 = (_2955 * _2903.y) + _2862;
                        _2790 = (_2955 * _2903.z) + _2863;
                        _2785 = (_3036 * _2920.x) + _2858;
                        _2786 = (_3036 * _2920.y) + _2859;
                        _2787 = (_3036 * _2920.z) + _2860;
                        if (_2865 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2858 = _2785;
                            _2859 = _2786;
                            _2860 = _2787;
                            _2861 = _2788;
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2865;
                        }
                    }
                    frontier_phi_66_pred = _2785;
                    frontier_phi_66_pred_1 = _2790;
                    frontier_phi_66_pred_2 = _2789;
                    frontier_phi_66_pred_3 = _2788;
                    frontier_phi_66_pred_4 = _2787;
                    frontier_phi_66_pred_5 = _2786;
                }
                _2561 = frontier_phi_66_pred;
                _2571 = frontier_phi_66_pred_1;
                _2569 = frontier_phi_66_pred_2;
                _2567 = frontier_phi_66_pred_3;
                _2565 = frontier_phi_66_pred_4;
                _2563 = frontier_phi_66_pred_5;
                uint _2720 = _2719 + 1u;
                if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2713 = _2561;
                    _2714 = _2563;
                    _2715 = _2565;
                    _2716 = _2567;
                    _2717 = _2569;
                    _2718 = _2571;
                    _2719 = _2720;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
        }
        uvec4 _2574 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2575 = _2574.z;
        uint _2577 = (_2575 >> 8u) & 15u;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((4294967295u << _2577) & _2459) == 0u)
        {
            _2681 = _2560;
            _2683 = _2562;
            _2685 = _2564;
            _2687 = _2566;
            _2689 = _2568;
            _2691 = _2570;
        }
        else
        {
            float _2706 = inversesqrt(dot(vec3(_2413, _2414, _2415), vec3(_2413, _2414, _2415)));
            float _2707 = _2706 * _2413;
            float _2708 = _2706 * _2414;
            float _2709 = _2706 * _2415;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2577 < ((_2575 >> 12u) & 15u))
            {
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2841 = _2560;
                float _2842 = _2562;
                float _2843 = _2564;
                float _2844 = _2566;
                float _2845 = _2568;
                float _2846 = _2570;
                uint _2847 = _2577;
                uint _2856;
                bool _2857;
                for (;;)
                {
                    _2856 = texelFetch(g_lightClassification, int((((_2453 << 5u) + (_2439 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                    _2857 = _2856 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2857)
                    {
                        frontier_phi_77_pred = _2846;
                        frontier_phi_77_pred_1 = _2845;
                        frontier_phi_77_pred_2 = _2844;
                        frontier_phi_77_pred_3 = _2843;
                        frontier_phi_77_pred_4 = _2842;
                        frontier_phi_77_pred_5 = _2841;
                    }
                    else
                    {
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3063 = _2841;
                        float _3064 = _2842;
                        float _3065 = _2843;
                        float _3066 = _2844;
                        float _3067 = _2845;
                        float _3068 = _2846;
                        uint _3069 = _2856;
                        uint _3070;
                        vec4 _3095;
                        float _3096;
                        vec4 _3111;
                        vec3 _3123;
                        vec4 _3139;
                        vec4 _3155;
                        float _3201;
                        bool _3202;
                        for (;;)
                        {
                            uint _3080 = ((_2847 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3069));
                            _3070 = (_3069 + 4294967295u) & _3069;
                            uint _3082 = _3080 * 40u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            _3096 = _3095.w;
                            uint _3098 = (_3080 * 40u) + 4u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3113 = (_3080 * 40u) + 8u;
                            _3123 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x));
                            uint _3126 = (_3080 * 40u) + 16u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3142 = (_3080 * 40u) + 20u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3157 = (_3080 * 40u) + 24u;
                            vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3176 = (_3080 * 40u) + 28u;
                            vec4 _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            _3201 = fma(_2415, _3189.z, fma(_2414, _3189.y, _3189.x * _2413)) + _3189.w;
                            _3202 = !((fma(_2415, _3170.z, fma(_2414, _3170.y, _3170.x * _2413)) + _3170.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3202)
                            {
                                float _3229 = _3095.x - _2413;
                                float _3230 = _3095.y - _2414;
                                float _3231 = _3095.z - _2415;
                                float _3232 = dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231));
                                float _3235 = inversesqrt(_3232);
                                float _3236 = _3235 * _3229;
                                float _3237 = _3235 * _3230;
                                float _3238 = _3235 * _3231;
                                float _3242 = 1.0 - (_3232 / (_3096 * _3096));
                                float _4379 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3247 = sqrt(_3232) * _3111.w;
                                float _3249 = 1.39999997615814208984375 / (_3247 + 1.39999997615814208984375);
                                float _3250 = _3249 * _3249;
                                float _3253 = ((1.0 - _3250) * dot(vec3(_3236, _3237, _3238), vec3(_661, _664, _667))) + _3250;
                                float _3256 = _3247 * _3247;
                                float _3260 = (fma(_2415, _3139.z, fma(_2414, _3139.y, _3139.x * _2413)) + _3139.w) / _3201;
                                float _3261 = (fma(_2415, _3155.z, fma(_2414, _3155.y, _3155.x * _2413)) + _3155.w) / _3201;
                                float _3265 = 1.0 - dot(vec2(_3260, _3261), vec2(_3260, _3261));
                                float _4395 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3266 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3267 = _3266 * (((isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))) * _3243) / ((_3256 * 0.699999988079071044921875) + 1.0));
                                float _3279 = exp2(log2(1.0 / ((_3256 * 3.5) + 5.0)) * 0.25);
                                float _3280 = 1.0 - _721;
                                float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                                float _3288 = _3287 * _3287;
                                float _3289 = _3288 * _3288;
                                float _3290 = _3236 - _2707;
                                float _3291 = _3237 - _2708;
                                float _3292 = _3238 - _2709;
                                float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                                float _3300 = dot(vec3(_661, _664, _667), vec3((-0.0) - _2707, (-0.0) - _2708, (-0.0) - _2709));
                                float _4406 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3304 = dot(vec3(_661, _664, _667), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                                float _4417 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3307 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                                float _3312 = _3249 * _3288;
                                float _3313 = _3312 * _3312;
                                float _3319 = ((1.0 - _3313) * dot(vec3(_661, _664, _667), vec3(_3236, _3237, _3238))) + _3313;
                                float _4428 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3321 = 1.0 - _3288;
                                float _3331 = (0.5 / (((_3320 * ((_3303 * _3321) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3320 * _3321) + _3288) * _3303))) * _3320;
                                float _4439 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3341 = (_3266 * _3243) * (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) / ((_3311 * _3311) * ((_3256 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3267 * _3111.y;
                                frontier_phi_83_pred_1 = _3267 * _3111.x;
                                frontier_phi_83_pred_2 = _3341 * _3123.z;
                                frontier_phi_83_pred_3 = _3341 * _3123.y;
                                frontier_phi_83_pred_4 = _3341 * _3123.x;
                                frontier_phi_83_pred_5 = _3267 * _3111.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3349 = frontier_phi_83_pred;
                            _3348 = frontier_phi_83_pred_1;
                            _3347 = frontier_phi_83_pred_2;
                            _3346 = frontier_phi_83_pred_3;
                            _3345 = frontier_phi_83_pred_4;
                            _3350 = frontier_phi_83_pred_5;
                            _3053 = _3348 + _3066;
                            _3054 = _3349 + _3067;
                            _3055 = _3350 + _3068;
                            _3050 = _3345 + _3063;
                            _3051 = _3346 + _3064;
                            _3052 = _3347 + _3065;
                            if (_3070 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3070;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3055;
                        frontier_phi_77_pred_1 = _3054;
                        frontier_phi_77_pred_2 = _3053;
                        frontier_phi_77_pred_3 = _3052;
                        frontier_phi_77_pred_4 = _3051;
                        frontier_phi_77_pred_5 = _3050;
                    }
                    _2692 = frontier_phi_77_pred;
                    _2690 = frontier_phi_77_pred_1;
                    _2688 = frontier_phi_77_pred_2;
                    _2686 = frontier_phi_77_pred_3;
                    _2684 = frontier_phi_77_pred_4;
                    _2682 = frontier_phi_77_pred_5;
                    uint _2848 = _2847 + 1u;
                    if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2841 = _2682;
                        _2842 = _2684;
                        _2843 = _2686;
                        _2844 = _2688;
                        _2845 = _2690;
                        _2846 = _2692;
                        _2847 = _2848;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2686;
                frontier_phi_58_59_ladder_1 = _2692;
                frontier_phi_58_59_ladder_2 = _2690;
                frontier_phi_58_59_ladder_3 = _2688;
                frontier_phi_58_59_ladder_4 = _2684;
                frontier_phi_58_59_ladder_5 = _2682;
            }
            else
            {
                frontier_phi_58_59_ladder = _2564;
                frontier_phi_58_59_ladder_1 = _2570;
                frontier_phi_58_59_ladder_2 = _2568;
                frontier_phi_58_59_ladder_3 = _2566;
                frontier_phi_58_59_ladder_4 = _2562;
                frontier_phi_58_59_ladder_5 = _2560;
            }
            _2681 = frontier_phi_58_59_ladder_5;
            _2683 = frontier_phi_58_59_ladder_4;
            _2685 = frontier_phi_58_59_ladder;
            _2687 = frontier_phi_58_59_ladder_3;
            _2689 = frontier_phi_58_59_ladder_2;
            _2691 = frontier_phi_58_59_ladder_1;
        }
        float _2696 = isnan(1.0) ? _705 : (isnan(_705) ? 1.0 : min(_705, 1.0));
        _2472 = (_2696 * _2687) + _1924;
        _2474 = (_2696 * _2689) + _1926;
        _2476 = (_2696 * _2691) + _1928;
        _2478 = ((_2681 * 0.039999999105930328369140625) * _2696) + _2257;
        _2480 = ((_2683 * 0.039999999105930328369140625) * _2696) + _2259;
        _2482 = ((_2685 * 0.039999999105930328369140625) * _2696) + _2261;
    }
    else
    {
        _2472 = _1924;
        _2474 = _1926;
        _2476 = _1928;
        _2478 = _2257;
        _2480 = _2259;
        _2482 = _2261;
    }
    float _4455 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4466 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4477 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _2499 = ((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2472 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _705))) + ((_2478 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1541)) * cbPerFrame._m0[3u].x);
    float _2500 = ((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2474 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _705))) + ((_2480 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1541)) * cbPerFrame._m0[3u].x);
    float _2501 = ((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2476 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _705))) + ((_2482 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1541)) * cbPerFrame._m0[3u].x);
    uint _2502 = _239 + 6u;
    float _2510 = _640 / cbSceneParam._m0[86u].x;
    float _2511 = _641 / cbSceneParam._m0[86u].y;
    vec4 _2525 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2510, _2511, (log2((isnan(cbSceneParam._m0[77u].w) ? _562 : (isnan(_562) ? cbSceneParam._m0[77u].w : min(_562, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2527 = _2525.x;
    float _2528 = _2525.y;
    float _2529 = _2525.z;
    float _2530 = _2525.w;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_562 > cbSceneParam._m0[78u].w)
    {
        float _2585 = isnan(_562) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _562 : min(cbSceneParam._m0[80u].w, _562));
        float _2586 = _2585 / _562;
        float _2597 = _2586 * _612;
        float _2598 = _613 * _2586;
        float _2599 = (-0.0) - _2598;
        float _2601 = _2586 * _614;
        float _2603 = (cbSceneParam._m0[77u].w * _2599) / _2585;
        float _2604 = _2603 + cbSceneParam._m0[79u].w;
        float _2605 = cbSceneParam._m0[79u].w - _2598;
        float _2611 = sqrt(((_2597 * _2597) + (_2598 * _2598)) + (_2601 * _2601));
        float _2614 = (1.0 - (cbSceneParam._m0[77u].w / _2585)) * _2611;
        float _2619 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2621 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2798;
        if (abs((_2599 - _2603) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2798 = ((((_2604 > 0.0) ? exp2(_2619 * _2604) : (2.0 - exp2(_2621 * _2604))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2614;
        }
        else
        {
            float _2742 = 1.0 / cbSceneParam._m0[80u].x;
            float _2743 = isnan(_2605) ? _2604 : (isnan(_2604) ? _2605 : max(_2604, _2605));
            float _2744 = isnan(_2605) ? _2604 : (isnan(_2604) ? _2605 : min(_2604, _2605));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            _2798 = ((abs(_2611 / _2599) * cbSceneParam._m0[80u].y) * ((((_2753 - _2754) * 2.0) - ((exp2(_2619 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0)))) - exp2(_2619 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))))) * _2742)) - ((exp2(_2621 * _2753) - exp2(_2621 * _2754)) * _2742))) + (_2614 * cbSceneParam._m0[80u].z);
        }
        vec4 _2800 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2510, _2511, 1.0), 0.0);
        float _2809 = exp2((_2798 * (-1.44269502162933349609375)) * (1.0 - _2800.w));
        float _2810 = log2(_2809);
        float _2826 = log2(_2530);
        _2623 = (exp2(_2826 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].x)) * _2800.x) / cbSceneParam._m0[78u].x)) + _2527;
        _2625 = (exp2(_2826 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].y)) * _2800.y) / cbSceneParam._m0[78u].y)) + _2528;
        _2627 = (exp2(_2826 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2810 * cbSceneParam._m0[78u].z)) * _2800.z) / cbSceneParam._m0[78u].z)) + _2529;
        _2629 = _2809 * _2530;
    }
    else
    {
        _2623 = _2527;
        _2625 = _2528;
        _2627 = _2529;
        _2629 = _2530;
    }
    bool _2836;
    vec4 _2639;
    vec4 _2661;
    float _2663;
    float _2667;
    float _2668;
    float _2669;
    float _2670;
    bool _2680;
    for (;;)
    {
        _2639 = cbMatDynParam._m0[0u];
        float _2641 = roundEven(_2639.y);
        bool _2642 = _2641 == 3.0;
        float _2643 = log2(_2629);
        float _2650 = exp2(_2643 * cbSceneParam._m0[78u].x) * _2499;
        float _2651 = exp2(_2643 * cbSceneParam._m0[78u].y) * _2500;
        float _2652 = exp2(_2643 * cbSceneParam._m0[78u].z) * _2501;
        float _2659 = _628 + (-0.5);
        _2661 = cbMtdParam._m0[1u];
        _2663 = _2661.y * _2659;
        float _2666 = (_2641 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2667 = _2666 * (_2642 ? _2650 : (_2650 + (cbSceneParam._m0[72u].w * _2623)));
        _2668 = _2666 * (_2642 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2625)));
        _2669 = _2666 * (_2642 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2627)));
        _2670 = _2659 * 0.999000012874603271484375;
        _2680 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2680)
        {
            if ((cbInstanceData._m0[_239 + 7u].x + _2670) < 0.5)
            {
                _2836 = true;
                break;
            }
        }
        uint _2777 = _680 + uint(_2639.w);
        if ((cbInstanceData._m0[_2777].w < 1.0) && ((cbInstanceData._m0[_2777].w + _2670) < 0.5))
        {
            _2836 = true;
            break;
        }
        if ((_2663 + 1.0) < _2661.x)
        {
            _2836 = true;
            break;
        }
        _2836 = false;
        break;
    }
    float _3041;
    if (_2836)
    {
        discard_state = true;
        _3041 = 0.0;
    }
    else
    {
        _3041 = cbInstanceData._m0[_2502].w;
    }
    SV_Target.x = _2667;
    SV_Target.y = _2668;
    SV_Target.z = _2669;
    SV_Target.w = _3041;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2502].w;
    discard_exit();
}


