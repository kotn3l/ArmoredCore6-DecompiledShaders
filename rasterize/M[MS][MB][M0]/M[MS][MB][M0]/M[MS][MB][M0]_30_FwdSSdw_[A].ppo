#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1064;
float _3451;
float _3452;
float _3453;
float _3454;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    uint _230 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _230 + 1u;
    uint _240 = _230 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _250) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _251) + cbTextureTilingScale._m0[20u].w));
    vec4 _322 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _326 = _322.z;
    float _330 = (_322.x * 2.0) + (-1.0);
    float _331 = (_322.y * 2.0) + (-1.0);
    float _332 = dot(vec2(_330, _331), vec2(_330, _331));
    float _3463 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _338 = sqrt(1.0 - (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))));
    float _343 = _330 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_296.x * 2.0) + (-1.0)));
    float _344 = _331 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_296.y * 2.0) + (-1.0)));
    float _347 = fma(_338, _218, fma(_344, _225, _343 * _211));
    float _350 = fma(_338, _219, fma(_344, _226, _343 * _212));
    float _353 = fma(_338, _220, fma(_344, _227, _343 * _213));
    float _357 = inversesqrt(dot(vec3(_347, _350, _353), vec3(_347, _350, _353)));
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _395 = _393.x;
    float _396 = 1.0 - _395;
    float _403 = ((_395 - _396) * cbMtdParam._m0[24u].z) + _396;
    float _405 = (cbMtdParam._m0[19u].x + dot(vec4(_357 * _347, _357 * _350, _357 * _353, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_403 * cbMtdParam._m0[21u].z);
    float _3474 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _421 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_403 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3485 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _426 = ((_406 * (cbMtdParam._m0[17u].x - _276)) * _422) + _276;
    float _427 = ((_406 * (cbMtdParam._m0[17u].y - _277)) * _422) + _277;
    float _428 = ((_406 * (cbMtdParam._m0[17u].z - _278)) * _422) + _278;
    float _433 = (((_296.z - _326) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _326;
    vec4 _446 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _453 = (_446.x * 2.0) + (-1.0);
    float _454 = (_446.y * 2.0) + (-1.0);
    float _455 = dot(vec2(_453, _454), vec2(_453, _454));
    float _3496 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _464 = (((_446.z - _433) * _406) * _422) + _433;
    float _479 = (((cbMtdParam._m0[21u].x * _343) + ((_453 - _343) * _406)) * _422) + _343;
    float _480 = (((cbMtdParam._m0[21u].x * _344) + ((_454 - _344) * _406)) * _422) + _344;
    float _481 = (((sqrt(1.0 - (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) - _338) * _406) * _422) + _338;
    float _486 = cbMtdParam._m0[22u].x + _322.w;
    float _489 = fma(_481, _218, fma(_480, _225, _479 * _211));
    float _492 = fma(_481, _219, fma(_480, _226, _479 * _212));
    float _495 = fma(_481, _220, fma(_480, _227, _479 * _213));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _500 = _499 * _489;
    float _501 = _499 * _492;
    float _502 = _499 * _495;
    float _3507 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _503 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3529 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3540 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3551 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _521 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _572 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _562);
    float _573 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _562);
    float _574 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _562);
    float _578 = inversesqrt(dot(vec3(_572, _573, _574), vec3(_572, _573, _574)));
    float _579 = _572 * _578;
    float _580 = _573 * _578;
    float _581 = _574 * _578;
    vec4 _586 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _588 = _586.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _745 = sqrt(((_572 * _572) + (_573 * _573)) + (_574 * _574));
        float _751 = (cbMatDynParam._m0[5u].x * _745) + cbMatDynParam._m0[5u].y;
        float _3562 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _756 = (cbMatDynParam._m0[5u].z * _745) + cbMatDynParam._m0[5u].w;
        float _3573 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) - _752)) + _752) < ((_588 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _600 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _601 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _621 = fma(_502, cbSceneParam._m0[5u].z, fma(_501, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _500));
    float _624 = fma(_502, cbSceneParam._m0[6u].z, fma(_501, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _500));
    float _627 = fma(_502, cbSceneParam._m0[7u].z, fma(_501, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _500));
    uint _640 = _230 + 9u;
    uint _641 = _640 + uint(cbMatDynParam._m0[0u].w);
    float _647 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * cbInstanceData._m0[_641].x;
    float _648 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * cbInstanceData._m0[_641].y;
    float _649 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_641].z;
    float _3584 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _650 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    vec4 _661 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _600, cbSceneParam._m0[86u].y * _601));
    float _665 = ((isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * TEXCOORD_5.w) * _661.x;
    float _666 = dot(vec3(_500, _501, _502), vec3(_579, _580, _581));
    float _669 = _666 * 2.0;
    float _673 = (_669 * _500) - _579;
    float _674 = (_669 * _501) - _580;
    float _675 = (_669 * _502) - _581;
    float _679 = abs(dot(vec3(_579, _580, _581), vec3(_500, _501, _502)));
    float _3617 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _681 = sqrt(_503);
    float _694 = exp2((_681 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_681 * 3.0));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1063;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _788 = fma(_734, cbModelParam._m0[26u].z, fma(_730, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _726));
        float _792 = fma(_734, cbModelParam._m0[27u].z, fma(_730, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _726));
        float _796 = fma(_734, cbModelParam._m0[28u].z, fma(_730, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _726));
        float _821 = _726 + _500;
        float _822 = _730 + _501;
        float _823 = _734 + _502;
        float _833 = fma(_823, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _821)) - _788;
        float _834 = fma(_823, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _821)) - _792;
        float _835 = fma(_823, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _821)) - _796;
        float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
        float _852 = ((_839 * _833) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_788 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_839 * _834) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_792 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_839 * _835) / cbModelParam._m0[34u].z) + ((((((_796 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        float _891 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_857.x + (-0.5));
        float _893 = _891 * (_857.y + (-0.5));
        float _894 = _891 * (_857.z + (-0.5));
        float _901 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_864.x + (-0.5));
        float _903 = _901 * (_864.y + (-0.5));
        float _904 = _901 * (_864.z + (-0.5));
        float _911 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_871.x + (-0.5));
        float _913 = _911 * (_871.y + (-0.5));
        float _914 = _911 * (_871.z + (-0.5));
        float _921 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_878.x + (-0.5));
        float _923 = _921 * (_878.y + (-0.5));
        float _924 = _921 * (_878.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _945 = (dot(vec3(_500, _501, _502), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _955 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3665 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_957 + 1.0))) + _962) * _925;
        float _972 = _893 * 0.5;
        float _973 = _903 * 0.5;
        float _974 = _913 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_500, _501, _502), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3698 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_999 + 1.0))) + _1004) * _926;
        float _1014 = _894 * 0.5;
        float _1015 = _904 * 0.5;
        float _1016 = _914 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_500, _501, _502), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3731 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1041 + 1.0))) + _1046) * _927;
        _1063 = _894;
        _1065 = _893;
        _1066 = _892;
        _1067 = _904;
        _1068 = _903;
        _1069 = _902;
        _1070 = _914;
        _1071 = _913;
        _1072 = _912;
        _1073 = _927;
        _1074 = _926;
        _1075 = _925;
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _1064;
        _1065 = _1064;
        _1066 = _1064;
        _1067 = _1064;
        _1068 = _1064;
        _1069 = _1064;
        _1070 = _1064;
        _1071 = _1064;
        _1072 = _1064;
        _1073 = _1064;
        _1074 = _1064;
        _1075 = _1064;
        _1076 = 0.0;
        _1077 = 0.0;
        _1078 = 0.0;
    }
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1106 = fma(_734, cbModelParam._m0[30u].z, fma(_730, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _726));
        float _1110 = fma(_734, cbModelParam._m0[31u].z, fma(_730, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _726));
        float _1114 = fma(_734, cbModelParam._m0[32u].z, fma(_730, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _726));
        float _1137 = _726 + _500;
        float _1138 = _730 + _501;
        float _1139 = _734 + _502;
        float _1149 = fma(_1139, cbModelParam._m0[30u].z, fma(_1138, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137)) - _1106;
        float _1150 = fma(_1139, cbModelParam._m0[31u].z, fma(_1138, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137)) - _1110;
        float _1151 = fma(_1139, cbModelParam._m0[32u].z, fma(_1138, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137)) - _1114;
        float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
        float _1168 = ((_1155 * _1149) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1106 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1155 * _1150) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1110 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1155 * _1151) / cbModelParam._m0[35u].z) + ((((((_1114 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1168, _1169, _1170), 0.0);
        float _1205 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1172.x + (-0.5));
        float _1207 = _1205 * (_1172.y + (-0.5));
        float _1208 = _1205 * (_1172.z + (-0.5));
        float _1215 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1179.x + (-0.5));
        float _1217 = _1215 * (_1179.y + (-0.5));
        float _1218 = _1215 * (_1179.z + (-0.5));
        float _1225 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1186.x + (-0.5));
        float _1227 = _1225 * (_1186.y + (-0.5));
        float _1228 = _1225 * (_1186.z + (-0.5));
        float _1235 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1193.x + (-0.5));
        float _1237 = _1235 * (_1193.y + (-0.5));
        float _1238 = _1235 * (_1193.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_500, _501, _502), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3794 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1269 + 1.0))) + _1274) * _1239;
        float _1284 = _1207 * 0.5;
        float _1285 = _1217 * 0.5;
        float _1286 = _1227 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_500, _501, _502), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3805 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3816 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3827 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * (_1311 + 1.0))) + _1316) * _1240;
        float _1326 = _1208 * 0.5;
        float _1327 = _1218 * 0.5;
        float _1328 = _1228 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_500, _501, _502), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3860 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1353 + 1.0))) + _1358) * _1241;
        _1375 = _1208;
        _1376 = _1207;
        _1377 = _1206;
        _1378 = _1218;
        _1379 = _1217;
        _1380 = _1216;
        _1381 = _1228;
        _1382 = _1227;
        _1383 = _1226;
        _1384 = _1241;
        _1385 = _1240;
        _1386 = _1239;
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
    }
    else
    {
        _1375 = _1064;
        _1376 = _1064;
        _1377 = _1064;
        _1378 = _1064;
        _1379 = _1064;
        _1380 = _1064;
        _1381 = _1064;
        _1382 = _1064;
        _1383 = _1064;
        _1384 = _1064;
        _1385 = _1064;
        _1386 = _1064;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1076)) + _1076;
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1077)) + _1077;
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1078)) + _1078;
    float _1422 = fma(_1401, cbSceneParam._m0[89u].z, fma(_1400, cbSceneParam._m0[89u].y, _1399 * cbSceneParam._m0[89u].x));
    float _1425 = fma(_1401, cbSceneParam._m0[90u].z, fma(_1400, cbSceneParam._m0[90u].y, _1399 * cbSceneParam._m0[90u].x));
    float _1428 = fma(_1401, cbSceneParam._m0[91u].z, fma(_1400, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1399));
    float _1443 = _673 * 0.5;
    float _1444 = _674 * 0.5;
    float _1445 = _675 * 0.5;
    float _1446 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1449 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1452 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1486;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1459 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1063, _1067, _1070, _1073));
        float _1463 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1467 = dot(vec4(_1443, _1444, _1445, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1474 = dot(vec4(cbModelParam._m0[39u]), vec4(_1443, _1444, _1445, 1.0));
        _1486 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1474) ? 0.0 : (isnan(0.0) ? _1474 : max(0.0, _1474))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1486 = 1.0;
    }
    float _1497;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1488 = dot(vec4(cbModelParam._m0[40u]), vec4(_1443, _1444, _1445, 1.0));
        _1497 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1488) ? 0.0 : (isnan(0.0) ? _1488 : max(0.0, _1488))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1497 = 1.0;
    }
    float _1501 = (_1497 * cbModelParam._m0[1u].x) + (_1486 * (1.0 - cbModelParam._m0[1u].x));
    float _1511 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _503);
    float _1512 = isnan(_1511) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1511 : min(cbModelParam._m0[25u].z, _1511));
    float _1593;
    float _1595;
    float _1597;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1560 = fma(_734, cbModelParam._m0[13u].z, fma(_730, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _726)) + cbModelParam._m0[13u].w;
        float _1564 = fma(_734, cbModelParam._m0[14u].z, fma(_730, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _726)) + cbModelParam._m0[14u].w;
        float _1568 = fma(_734, cbModelParam._m0[15u].z, fma(_730, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _726)) + cbModelParam._m0[15u].w;
        float _1571 = fma(_675, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673));
        float _1574 = fma(_675, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673));
        float _1577 = fma(_675, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673));
        float _1605;
        if (_1571 > 0.0)
        {
            _1605 = abs((1.0 - _1560) / _1571);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1560 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1605 = frontier_phi_17_15_ladder;
        }
        float _1829;
        if (_1574 > 0.0)
        {
            _1829 = abs((1.0 - _1564) / _1574);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1564 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1829 = frontier_phi_26_22_ladder;
        }
        float _2075;
        if (_1577 > 0.0)
        {
            _2075 = abs((1.0 - _1568) / _1577);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1568 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2075 = frontier_phi_38_33_ladder;
        }
        float _2077 = isnan(_1829) ? _1605 : (isnan(_1605) ? _1829 : min(_1605, _1829));
        float _2078 = isnan(_2075) ? _2077 : (isnan(_2077) ? _2075 : min(_2077, _2075));
        float _2082 = (_2078 * _1571) + _1560;
        float _2083 = (_2078 * _1574) + _1564;
        float _2084 = (_2078 * _1577) + _1568;
        float _2085 = _2078 * 9.9999997473787516355514526367188e-05;
        float _2087 = (-1.0) - _2085;
        float _2089 = _2085 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2084 > _2089) || ((_2084 < _2087) || ((_2083 > _2089) || ((_2083 < _2087) || ((_2082 < _2087) || (_2082 > _2089))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2208 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2084, cbModelParam._m0[9u].z, fma(_2083, cbModelParam._m0[9u].y, _2082 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2084, cbModelParam._m0[10u].z, fma(_2083, cbModelParam._m0[10u].y, _2082 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2084, cbModelParam._m0[11u].z, fma(_2083, cbModelParam._m0[11u].y, _2082 * cbModelParam._m0[11u].x))), _1512);
            frontier_phi_16_38_ladder = _2208.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2208.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2208.x * cbModelParam._m0[1u].y;
        }
        _1593 = frontier_phi_16_38_ladder_2;
        _1595 = frontier_phi_16_38_ladder_1;
        _1597 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_673, _674, _675), _1512);
        _1593 = _1581.x * cbModelParam._m0[1u].y;
        _1595 = _1581.y * cbModelParam._m0[1u].y;
        _1597 = _1581.z * cbModelParam._m0[1u].y;
    }
    float _1601 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _503);
    float _1602 = isnan(_1601) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1601 : min(cbModelParam._m0[25u].w, _1601));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1656 = fma(_734, cbModelParam._m0[21u].z, fma(_730, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _726)) + cbModelParam._m0[21u].w;
        float _1660 = fma(_734, cbModelParam._m0[22u].z, fma(_730, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _726)) + cbModelParam._m0[22u].w;
        float _1664 = fma(_734, cbModelParam._m0[23u].z, fma(_730, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _726)) + cbModelParam._m0[23u].w;
        float _1667 = fma(_675, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673));
        float _1670 = fma(_675, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673));
        float _1673 = fma(_675, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673));
        float _1834;
        if (_1667 > 0.0)
        {
            _1834 = abs((1.0 - _1656) / _1667);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1656 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1834 = frontier_phi_28_24_ladder;
        }
        float _2102;
        if (_1670 > 0.0)
        {
            _2102 = abs((1.0 - _1660) / _1670);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1660 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2102 = frontier_phi_40_35_ladder;
        }
        float _2307;
        if (_1673 > 0.0)
        {
            _2307 = abs((1.0 - _1664) / _1673);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1664 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2307 = frontier_phi_49_46_ladder;
        }
        float _2309 = isnan(_2102) ? _1834 : (isnan(_1834) ? _2102 : min(_1834, _2102));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1667) + _1656;
        float _2315 = (_2310 * _1670) + _1660;
        float _2316 = (_2310 * _1673) + _1664;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2317;
        float _2320 = _2317 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2316 > _2320) || ((_2316 < _2318) || ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 < _2318) || (_2314 > _2320))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2316, cbModelParam._m0[17u].z, fma(_2315, cbModelParam._m0[17u].y, _2314 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2316, cbModelParam._m0[18u].z, fma(_2315, cbModelParam._m0[18u].y, _2314 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2316, cbModelParam._m0[19u].z, fma(_2315, cbModelParam._m0[19u].y, _2314 * cbModelParam._m0[19u].x))), _1602);
            frontier_phi_25_49_ladder = _2515.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2515.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2515.x * cbModelParam._m0[1u].z;
        }
        _1692 = frontier_phi_25_49_ladder_2;
        _1694 = frontier_phi_25_49_ladder_1;
        _1696 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_673, _674, _675), _1602);
        _1692 = _1676.x * cbModelParam._m0[1u].z;
        _1694 = _1676.y * cbModelParam._m0[1u].z;
        _1696 = _1676.z * cbModelParam._m0[1u].z;
    }
    float _1708 = ((((1.0 - _694) * ((_681 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_694 * _681)) * _665;
    float _1709 = _1708 * ((cbModelParam._m0[1u].w * (_1692 - _1593)) + _1593);
    float _1710 = _1708 * ((cbModelParam._m0[1u].w * (_1694 - _1595)) + _1595);
    float _1711 = _1708 * ((cbModelParam._m0[1u].w * (_1696 - _1597)) + _1597);
    float _1714 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1710, cbSceneParam._m0[89u].y, _1709 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1710, cbSceneParam._m0[90u].y, _1709 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1710, cbSceneParam._m0[91u].y, _1709 * cbSceneParam._m0[91u].x));
    vec4 _1728 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_600, _601));
    float _1730 = _1728.w;
    float _1742 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1730);
    float _1743 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1730);
    float _1744 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1730);
    uvec4 _1748 = floatBitsToUint(cbInstanceData._m0[_230 + 5u]);
    uint _1750 = _1748.x * 14u;
    uint _1751 = _1750 + 13u;
    float _1758 = _665 + (-1.0);
    float _1763 = (cbLight._m0[_1751].x * _1758) + 1.0;
    float _1764 = (cbLight._m0[_1751].y * _1758) + 1.0;
    float _1765 = (cbLight._m0[_1751].z * _1758) + 1.0;
    float _1766 = (cbLight._m0[_1751].w * _1758) + 1.0;
    uint _1767 = _1750 + 5u;
    float _1773 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
    uint _1777 = _1750 + 4u;
    float _1787 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
    uint _1791 = _1750 | 1u;
    float _1802 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_500, _501, _502));
    float _1805 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_500, _501, _502));
    float _3996 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _4007 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1810 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.3183098733425140380859375;
    float _1812 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * 0.3183098733425140380859375;
    float _1819 = ((cbLight._m0[_1767].x * _1773) * _1812) + (((cbLight._m0[_1777].x * _1742) * _1787) * _1810);
    float _1820 = ((_1773 * cbLight._m0[_1767].y) * _1812) + (((cbLight._m0[_1777].y * _1743) * _1787) * _1810);
    float _1821 = ((_1773 * cbLight._m0[_1767].z) * _1812) + (((cbLight._m0[_1777].z * _1744) * _1787) * _1810);
    uvec4 _1826 = floatBitsToUint(cbLight._m0[_1750 + 12u]);
    bool _1828 = _1826.x == 0u;
    float _1839;
    float _1841;
    float _1843;
    if (_1828)
    {
        _1839 = _1819;
        _1841 = _1820;
        _1843 = _1821;
    }
    else
    {
        uint _1847 = _1750 + 6u;
        float _1863 = (dot(vec3(cbLight._m0[_1750 + 2u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _1864 = _1863 * _1863;
        float _4018 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1866 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _1839 = (((cbLight._m0[_1847].x * 0.3183098733425140380859375) * _1865) * _1866) + _1819;
        _1841 = (((cbLight._m0[_1847].y * 0.3183098733425140380859375) * _1865) * _1866) + _1820;
        _1843 = (((cbLight._m0[_1847].z * 0.3183098733425140380859375) * _1865) * _1866) + _1821;
    }
    bool _1846 = _1826.y == 0u;
    float _1884;
    float _1886;
    float _1888;
    if (_1846)
    {
        _1884 = _1839;
        _1886 = _1841;
        _1888 = _1843;
    }
    else
    {
        uint _2046 = _1750 + 7u;
        float _2062 = (dot(vec3(cbLight._m0[_1750 + 3u].xyz), vec3(_500, _501, _502)) * 0.5) + 0.5;
        float _2063 = _2062 * _2062;
        float _4034 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2064 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _2065 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _1884 = (((cbLight._m0[_2046].x * 0.3183098733425140380859375) * _2064) * _2065) + _1839;
        _1886 = (((cbLight._m0[_2046].y * 0.3183098733425140380859375) * _2064) * _2065) + _1841;
        _1888 = (((cbLight._m0[_2046].z * 0.3183098733425140380859375) * _2064) * _2065) + _1843;
    }
    uint _1891 = _1750 + 8u;
    float _1904 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1750].w)) * _503) * 0.949999988079071044921875);
    float _1905 = _1904 * _1904;
    float _1906 = cbLight._m0[_1750].x + _579;
    float _1907 = cbLight._m0[_1750].y + _580;
    float _1908 = cbLight._m0[_1750].z + _581;
    float _1912 = inversesqrt(dot(vec3(_1906, _1907, _1908), vec3(_1906, _1907, _1908)));
    float _1913 = _1912 * _1906;
    float _1914 = _1912 * _1907;
    float _1915 = _1912 * _1908;
    float _1916 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1750].xyz));
    float _4050 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _1920 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _1921 = dot(vec3(_500, _501, _502), vec3(_1913, _1914, _1915));
    float _4072 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1924 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _1925 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_1913, _1914, _1915));
    float _4083 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1929 = _1905 * _1905;
    float _1933 = ((_1924 * _1924) * (_1929 + (-1.0))) + 1.0;
    float _1944 = (exp2(log2(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1945 = 1.0 - _1905;
    float _1956 = (0.5 / (((_1920 * ((_1919 * _1945) + _1905)) + 9.9999999392252902907785028219223e-09) + (((_1920 * _1945) + _1905) * _1919))) * _1919;
    float _4094 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1958 = (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_1929 / ((_1933 * _1933) * 3.141590118408203125));
    uint _1972 = _1750 + 9u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _503) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1791].x + _579;
    float _1986 = cbLight._m0[_1791].y + _580;
    float _1987 = cbLight._m0[_1791].z + _581;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1791].xyz));
    float _4105 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _1999 = dot(vec3(_500, _501, _502), vec3(_1992, _1993, _1994));
    float _4116 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _2003 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1992, _1993, _1994));
    float _4127 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2007 = _1984 * _1984;
    float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
    float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2021 = 1.0 - _1984;
    float _2031 = (0.5 / (((_1920 * ((_1998 * _2021) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1920 * _2021) + _1984) * _1998))) * _1998;
    float _4138 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
    float _2043 = (((_2020 * cbLight._m0[_1972].x) * _2033) * _1773) + ((((cbLight._m0[_1891].x * _1742) * _1944) * _1958) * _1787);
    float _2044 = (((_2020 * cbLight._m0[_1972].y) * _2033) * _1773) + ((((cbLight._m0[_1891].y * _1743) * _1944) * _1958) * _1787);
    float _2045 = (((_2020 * cbLight._m0[_1972].z) * _2033) * _1773) + ((((cbLight._m0[_1891].z * _1744) * _1944) * _1958) * _1787);
    float _2107;
    float _2109;
    float _2111;
    if (_1828)
    {
        _2107 = _2043;
        _2109 = _2044;
        _2111 = _2045;
    }
    else
    {
        uint _2113 = _1750 + 2u;
        uint _2117 = _1750 + 10u;
        float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _503) * 0.949999988079071044921875);
        float _2132 = _2131 * _2131;
        float _2133 = cbLight._m0[_2113].x + _579;
        float _2134 = cbLight._m0[_2113].y + _580;
        float _2135 = cbLight._m0[_2113].z + _581;
        float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
        float _2140 = _2139 * _2133;
        float _2141 = _2139 * _2134;
        float _2142 = _2139 * _2135;
        float _2143 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2113].xyz));
        float _4149 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2147 = dot(vec3(_500, _501, _502), vec3(_2140, _2141, _2142));
        float _4160 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2151 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2140, _2141, _2142));
        float _4171 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2155 = _2132 * _2132;
        float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
        float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2169 = 1.0 - _2132;
        float _2179 = (0.5 / (((_1920 * ((_2146 * _2169) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_1920 * _2169) + _2132) * _2146))) * _2146;
        float _4182 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2181 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
        float _2182 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
        _2107 = (((_2168 * cbLight._m0[_2117].x) * _2181) * _2182) + _2043;
        _2109 = (((_2168 * cbLight._m0[_2117].y) * _2181) * _2182) + _2044;
        _2111 = (((_2168 * cbLight._m0[_2117].z) * _2181) * _2182) + _2045;
    }
    float _2217;
    float _2219;
    float _2221;
    if (_1846)
    {
        _2217 = _2107;
        _2219 = _2109;
        _2221 = _2111;
    }
    else
    {
        uint _2228 = _1750 + 3u;
        uint _2232 = _1750 + 11u;
        float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _503) * 0.949999988079071044921875);
        float _2247 = _2246 * _2246;
        float _2248 = cbLight._m0[_2228].x + _579;
        float _2249 = cbLight._m0[_2228].y + _580;
        float _2250 = cbLight._m0[_2228].z + _581;
        float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
        float _2255 = _2254 * _2248;
        float _2256 = _2254 * _2249;
        float _2257 = _2254 * _2250;
        float _2258 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_2228].xyz));
        float _4198 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2261 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2262 = dot(vec3(_500, _501, _502), vec3(_2255, _2256, _2257));
        float _4209 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2266 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2255, _2256, _2257));
        float _4220 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2270 = _2247 * _2247;
        float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
        float _2283 = (exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2284 = 1.0 - _2247;
        float _2294 = (0.5 / (((_1920 * ((_2261 * _2284) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_1920 * _2284) + _2247) * _2261))) * _2261;
        float _4231 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2296 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
        float _2297 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _2217 = (((_2283 * cbLight._m0[_2232].x) * _2296) * _2297) + _2107;
        _2219 = (((_2283 * cbLight._m0[_2232].y) * _2296) * _2297) + _2109;
        _2221 = (((_2283 * cbLight._m0[_2232].z) * _2296) * _2297) + _2111;
    }
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    if (_1748.y == 0u)
    {
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2372;
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2372;
        float _2375 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2372;
        uvec4 _2387 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2388 = _2387.x;
        uint _2399 = uint((float(_2387.y) * floor(float(uint(cbSceneParam._m0[85u].y * _601) / _2388))) + floor(float(uint(cbSceneParam._m0[85u].x * _600) / _2388)));
        float _2409 = (log2(_2375 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2410 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        uint _2413 = uint(isnan(14.0) ? _2410 : (isnan(_2410) ? 14.0 : min(_2410, 14.0)));
        uvec4 _2418 = texelFetch(g_lightClusterGridBuffer, int(((_2413 << 2u) + (_2399 << 6u)) >> 2u));
        uint _2419 = _2418.x;
        uint _2420 = _2387.z;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((((1u << ((_2420 >> 4u) & 15u)) + 4294967295u) & _2419) == 0u) || ((_2420 & 240u) == 0u))
        {
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
        }
        else
        {
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2673 = 0.0;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            uint _2679 = 0u;
            uint _2688;
            bool _2689;
            for (;;)
            {
                _2688 = texelFetch(g_lightClassification, int((((_2413 << 5u) + (_2399 << 9u)) + (_2679 << 2u)) >> 2u)).x;
                _2689 = _2688 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2689)
                {
                    frontier_phi_66_pred = _2673;
                    frontier_phi_66_pred_1 = _2678;
                    frontier_phi_66_pred_2 = _2677;
                    frontier_phi_66_pred_3 = _2676;
                    frontier_phi_66_pred_4 = _2675;
                    frontier_phi_66_pred_5 = _2674;
                }
                else
                {
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    uint _2824;
                    _2818 = _2673;
                    _2819 = _2674;
                    _2820 = _2675;
                    _2821 = _2676;
                    _2822 = _2677;
                    _2823 = _2678;
                    _2824 = _2688;
                    float _2745;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    for (;;)
                    {
                        uint _2828 = uint(findLSB(_2824)) + (_2679 << 5u);
                        uint _2825 = (_2824 + 4294967295u) & _2824;
                        uint _2830 = _2828 * 48u;
                        vec4 _2844 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2830)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 3u)).x));
                        uint _2850 = (_2828 * 48u) + 4u;
                        vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 3u)).x));
                        uint _2869 = (_2828 * 48u) + 8u;
                        vec3 _2880 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x));
                        float _2884 = _2844.x - _2373;
                        float _2885 = _2844.y - _2374;
                        float _2886 = _2844.z - _2375;
                        float _2887 = dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886));
                        float _2890 = inversesqrt(_2887);
                        float _2891 = _2890 * _2884;
                        float _2892 = _2890 * _2885;
                        float _2893 = _2890 * _2886;
                        float _2894 = dot(vec3(_621, _624, _627), vec3(_2891, _2892, _2893));
                        float _2899 = 1.0 - (_2887 * _2844.w);
                        float _4257 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2900 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                        float _2901 = sqrt(_2887) * _2863.w;
                        float _2904 = 1.39999997615814208984375 / (_2901 + 1.39999997615814208984375);
                        float _2905 = _2904 * _2904;
                        float _2908 = ((1.0 - _2905) * _2894) + _2905;
                        float _2911 = _2901 * _2901;
                        float _2915 = ((isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0))) * _2900) / ((_2911 * 0.699999988079071044921875) + 1.0);
                        float _2919 = (-0.0) - _2373;
                        float _2920 = (-0.0) - _2374;
                        float _2921 = (-0.0) - _2375;
                        float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
                        float _2926 = _2925 * _2919;
                        float _2927 = _2925 * _2920;
                        float _2928 = _2925 * _2921;
                        float _2936 = exp2(log2(1.0 / ((_2911 * 3.5) + 5.0)) * 0.25);
                        float _2937 = 1.0 - _681;
                        float _2944 = sqrt(1.0 - ((1.0 - (_2937 * _2937)) * (1.0 - (_2936 * _2936))));
                        float _2945 = _2944 * _2944;
                        float _2946 = _2945 * _2945;
                        float _2947 = _2926 + _2891;
                        float _2948 = _2927 + _2892;
                        float _2949 = _2928 + _2893;
                        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
                        float _2957 = dot(vec3(_621, _624, _627), vec3(_2926, _2927, _2928));
                        float _4273 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2960 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                        float _2961 = dot(vec3(_621, _624, _627), vec3(_2953 * _2947, _2953 * _2948, _2953 * _2949));
                        float _4284 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2968 = ((_2964 * _2964) * (_2946 + (-1.0))) + 1.0;
                        float _2969 = _2904 * _2945;
                        float _2970 = _2969 * _2969;
                        float _2973 = ((1.0 - _2970) * _2894) + _2970;
                        float _4295 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2974 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _2975 = 1.0 - _2945;
                        float _2985 = (0.5 / (((_2974 * ((_2960 * _2975) + _2945)) + 9.9999999392252902907785028219223e-09) + (((_2974 * _2975) + _2945) * _2960))) * _2974;
                        float _4306 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2996 = (((_2946 * 3.1415927410125732421875) * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) / ((_2968 * _2968) * ((_2911 * 2.1991131305694580078125) + 3.141590118408203125))) * _2900;
                        _2748 = (_2915 * _2863.x) + _2821;
                        _2749 = (_2915 * _2863.y) + _2822;
                        _2750 = (_2915 * _2863.z) + _2823;
                        _2745 = (_2996 * _2880.x) + _2818;
                        _2746 = (_2996 * _2880.y) + _2819;
                        _2747 = (_2996 * _2880.z) + _2820;
                        if (_2825 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2818 = _2745;
                            _2819 = _2746;
                            _2820 = _2747;
                            _2821 = _2748;
                            _2822 = _2749;
                            _2823 = _2750;
                            _2824 = _2825;
                        }
                    }
                    frontier_phi_66_pred = _2745;
                    frontier_phi_66_pred_1 = _2750;
                    frontier_phi_66_pred_2 = _2749;
                    frontier_phi_66_pred_3 = _2748;
                    frontier_phi_66_pred_4 = _2747;
                    frontier_phi_66_pred_5 = _2746;
                }
                _2521 = frontier_phi_66_pred;
                _2531 = frontier_phi_66_pred_1;
                _2529 = frontier_phi_66_pred_2;
                _2527 = frontier_phi_66_pred_3;
                _2525 = frontier_phi_66_pred_4;
                _2523 = frontier_phi_66_pred_5;
                uint _2680 = _2679 + 1u;
                if (_2680 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2673 = _2521;
                    _2674 = _2523;
                    _2675 = _2525;
                    _2676 = _2527;
                    _2677 = _2529;
                    _2678 = _2531;
                    _2679 = _2680;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
        }
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.z;
        uint _2537 = (_2535 >> 8u) & 15u;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        if (((4294967295u << _2537) & _2419) == 0u)
        {
            _2641 = _2520;
            _2643 = _2522;
            _2645 = _2524;
            _2647 = _2526;
            _2649 = _2528;
            _2651 = _2530;
        }
        else
        {
            float _2666 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
            float _2667 = _2666 * _2373;
            float _2668 = _2666 * _2374;
            float _2669 = _2666 * _2375;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2537 < ((_2535 >> 12u) & 15u))
            {
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2650;
                float _2652;
                float _2801 = _2520;
                float _2802 = _2522;
                float _2803 = _2524;
                float _2804 = _2526;
                float _2805 = _2528;
                float _2806 = _2530;
                uint _2807 = _2537;
                uint _2816;
                bool _2817;
                for (;;)
                {
                    _2816 = texelFetch(g_lightClassification, int((((_2413 << 5u) + (_2399 << 9u)) + (_2807 << 2u)) >> 2u)).x;
                    _2817 = _2816 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2817)
                    {
                        frontier_phi_77_pred = _2806;
                        frontier_phi_77_pred_1 = _2805;
                        frontier_phi_77_pred_2 = _2804;
                        frontier_phi_77_pred_3 = _2803;
                        frontier_phi_77_pred_4 = _2802;
                        frontier_phi_77_pred_5 = _2801;
                    }
                    else
                    {
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3023 = _2801;
                        float _3024 = _2802;
                        float _3025 = _2803;
                        float _3026 = _2804;
                        float _3027 = _2805;
                        float _3028 = _2806;
                        uint _3029 = _2816;
                        uint _3030;
                        vec4 _3055;
                        float _3056;
                        vec4 _3071;
                        vec3 _3083;
                        vec4 _3099;
                        vec4 _3114;
                        float _3160;
                        bool _3161;
                        for (;;)
                        {
                            uint _3040 = ((_2807 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3029));
                            _3030 = (_3029 + 4294967295u) & _3029;
                            uint _3042 = _3040 * 40u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3056 = _3055.w;
                            uint _3058 = (_3040 * 40u) + 4u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3073 = (_3040 * 40u) + 8u;
                            _3083 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x));
                            uint _3086 = (_3040 * 40u) + 16u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3101 = (_3040 * 40u) + 20u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3040 * 40u) + 24u;
                            vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3135 = (_3040 * 40u) + 28u;
                            vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            _3160 = fma(_2375, _3148.z, fma(_2374, _3148.y, _3148.x * _2373)) + _3148.w;
                            _3161 = !((fma(_2375, _3129.z, fma(_2374, _3129.y, _3129.x * _2373)) + _3129.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3161)
                            {
                                float _3188 = _3055.x - _2373;
                                float _3189 = _3055.y - _2374;
                                float _3190 = _3055.z - _2375;
                                float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                                float _3194 = inversesqrt(_3191);
                                float _3195 = _3194 * _3188;
                                float _3196 = _3194 * _3189;
                                float _3197 = _3194 * _3190;
                                float _3201 = 1.0 - (_3191 / (_3056 * _3056));
                                float _4317 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3202 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                                float _3206 = sqrt(_3191) * _3071.w;
                                float _3208 = 1.39999997615814208984375 / (_3206 + 1.39999997615814208984375);
                                float _3209 = _3208 * _3208;
                                float _3212 = ((1.0 - _3209) * dot(vec3(_3195, _3196, _3197), vec3(_621, _624, _627))) + _3209;
                                float _3215 = _3206 * _3206;
                                float _3219 = (fma(_2375, _3099.z, fma(_2374, _3099.y, _3099.x * _2373)) + _3099.w) / _3160;
                                float _3220 = (fma(_2375, _3114.z, fma(_2374, _3114.y, _3114.x * _2373)) + _3114.w) / _3160;
                                float _3224 = 1.0 - dot(vec2(_3219, _3220), vec2(_3219, _3220));
                                float _4333 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3226 = _3225 * (((isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0))) * _3202) / ((_3215 * 0.699999988079071044921875) + 1.0));
                                float _3238 = exp2(log2(1.0 / ((_3215 * 3.5) + 5.0)) * 0.25);
                                float _3239 = 1.0 - _681;
                                float _3246 = sqrt(1.0 - ((1.0 - (_3239 * _3239)) * (1.0 - (_3238 * _3238))));
                                float _3247 = _3246 * _3246;
                                float _3248 = _3247 * _3247;
                                float _3249 = _3195 - _2667;
                                float _3250 = _3196 - _2668;
                                float _3251 = _3197 - _2669;
                                float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                                float _3259 = dot(vec3(_621, _624, _627), vec3((-0.0) - _2667, (-0.0) - _2668, (-0.0) - _2669));
                                float _4344 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3262 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3263 = dot(vec3(_621, _624, _627), vec3(_3255 * _3249, _3255 * _3250, _3255 * _3251));
                                float _4355 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3270 = ((_3266 * _3266) * (_3248 + (-1.0))) + 1.0;
                                float _3271 = _3208 * _3247;
                                float _3272 = _3271 * _3271;
                                float _3278 = ((1.0 - _3272) * dot(vec3(_621, _624, _627), vec3(_3195, _3196, _3197))) + _3272;
                                float _4366 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3280 = 1.0 - _3247;
                                float _3290 = (0.5 / (((_3279 * ((_3262 * _3280) + _3247)) + 9.9999999392252902907785028219223e-09) + (((_3279 * _3280) + _3247) * _3262))) * _3279;
                                float _4377 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3300 = (_3225 * _3202) * (((_3248 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3270 * _3270) * ((_3215 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3226 * _3071.y;
                                frontier_phi_83_pred_1 = _3226 * _3071.x;
                                frontier_phi_83_pred_2 = _3300 * _3083.z;
                                frontier_phi_83_pred_3 = _3300 * _3083.y;
                                frontier_phi_83_pred_4 = _3300 * _3083.x;
                                frontier_phi_83_pred_5 = _3226 * _3071.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3308 = frontier_phi_83_pred;
                            _3307 = frontier_phi_83_pred_1;
                            _3306 = frontier_phi_83_pred_2;
                            _3305 = frontier_phi_83_pred_3;
                            _3304 = frontier_phi_83_pred_4;
                            _3309 = frontier_phi_83_pred_5;
                            _3013 = _3307 + _3026;
                            _3014 = _3308 + _3027;
                            _3015 = _3309 + _3028;
                            _3010 = _3304 + _3023;
                            _3011 = _3305 + _3024;
                            _3012 = _3306 + _3025;
                            if (_3030 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3030;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3015;
                        frontier_phi_77_pred_1 = _3014;
                        frontier_phi_77_pred_2 = _3013;
                        frontier_phi_77_pred_3 = _3012;
                        frontier_phi_77_pred_4 = _3011;
                        frontier_phi_77_pred_5 = _3010;
                    }
                    _2652 = frontier_phi_77_pred;
                    _2650 = frontier_phi_77_pred_1;
                    _2648 = frontier_phi_77_pred_2;
                    _2646 = frontier_phi_77_pred_3;
                    _2644 = frontier_phi_77_pred_4;
                    _2642 = frontier_phi_77_pred_5;
                    uint _2808 = _2807 + 1u;
                    if (_2808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2801 = _2642;
                        _2802 = _2644;
                        _2803 = _2646;
                        _2804 = _2648;
                        _2805 = _2650;
                        _2806 = _2652;
                        _2807 = _2808;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2646;
                frontier_phi_58_59_ladder_1 = _2652;
                frontier_phi_58_59_ladder_2 = _2650;
                frontier_phi_58_59_ladder_3 = _2648;
                frontier_phi_58_59_ladder_4 = _2644;
                frontier_phi_58_59_ladder_5 = _2642;
            }
            else
            {
                frontier_phi_58_59_ladder = _2524;
                frontier_phi_58_59_ladder_1 = _2530;
                frontier_phi_58_59_ladder_2 = _2528;
                frontier_phi_58_59_ladder_3 = _2526;
                frontier_phi_58_59_ladder_4 = _2522;
                frontier_phi_58_59_ladder_5 = _2520;
            }
            _2641 = frontier_phi_58_59_ladder_5;
            _2643 = frontier_phi_58_59_ladder_4;
            _2645 = frontier_phi_58_59_ladder;
            _2647 = frontier_phi_58_59_ladder_3;
            _2649 = frontier_phi_58_59_ladder_2;
            _2651 = frontier_phi_58_59_ladder_1;
        }
        float _2656 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
        _2432 = (_2656 * _2647) + _1884;
        _2434 = (_2656 * _2649) + _1886;
        _2436 = (_2656 * _2651) + _1888;
        _2438 = ((_2641 * 0.039999999105930328369140625) * _2656) + _2217;
        _2440 = ((_2643 * 0.039999999105930328369140625) * _2656) + _2219;
        _2442 = ((_2645 * 0.039999999105930328369140625) * _2656) + _2221;
    }
    else
    {
        _2432 = _1884;
        _2434 = _1886;
        _2436 = _1888;
        _2438 = _2217;
        _2440 = _2219;
        _2442 = _2221;
    }
    float _4393 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _4404 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4415 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _2459 = ((isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2432 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _665))) + ((_2438 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1501)) * cbPerFrame._m0[3u].x);
    float _2460 = ((isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2434 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _665))) + ((_2440 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1501)) * cbPerFrame._m0[3u].x);
    float _2461 = ((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2436 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _665))) + ((_2442 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1501)) * cbPerFrame._m0[3u].x);
    uint _2462 = _230 + 6u;
    float _2470 = _600 / cbSceneParam._m0[86u].x;
    float _2471 = _601 / cbSceneParam._m0[86u].y;
    vec4 _2485 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2470, _2471, (log2((isnan(cbSceneParam._m0[77u].w) ? _521 : (isnan(_521) ? cbSceneParam._m0[77u].w : min(_521, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2487 = _2485.x;
    float _2488 = _2485.y;
    float _2489 = _2485.z;
    float _2490 = _2485.w;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_521 > cbSceneParam._m0[78u].w)
    {
        float _2545 = isnan(_521) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _521 : min(cbSceneParam._m0[80u].w, _521));
        float _2546 = _2545 / _521;
        float _2557 = _2546 * _572;
        float _2558 = _573 * _2546;
        float _2559 = (-0.0) - _2558;
        float _2561 = _2546 * _574;
        float _2563 = (cbSceneParam._m0[77u].w * _2559) / _2545;
        float _2564 = _2563 + cbSceneParam._m0[79u].w;
        float _2565 = cbSceneParam._m0[79u].w - _2558;
        float _2571 = sqrt(((_2557 * _2557) + (_2558 * _2558)) + (_2561 * _2561));
        float _2574 = (1.0 - (cbSceneParam._m0[77u].w / _2545)) * _2571;
        float _2579 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2581 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2758;
        if (abs((_2559 - _2563) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2758 = ((((_2564 > 0.0) ? exp2(_2579 * _2564) : (2.0 - exp2(_2581 * _2564))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2574;
        }
        else
        {
            float _2702 = 1.0 / cbSceneParam._m0[80u].x;
            float _2703 = isnan(_2565) ? _2564 : (isnan(_2564) ? _2565 : max(_2564, _2565));
            float _2704 = isnan(_2565) ? _2564 : (isnan(_2564) ? _2565 : min(_2564, _2565));
            float _2713 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : min(_2703, 0.0));
            float _2714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : min(_2704, 0.0));
            _2758 = ((abs(_2571 / _2559) * cbSceneParam._m0[80u].y) * ((((_2713 - _2714) * 2.0) - ((exp2(_2579 * (isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0)))) - exp2(_2579 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0))))) * _2702)) - ((exp2(_2581 * _2713) - exp2(_2581 * _2714)) * _2702))) + (_2574 * cbSceneParam._m0[80u].z);
        }
        vec4 _2760 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2470, _2471, 1.0), 0.0);
        float _2769 = exp2((_2758 * (-1.44269502162933349609375)) * (1.0 - _2760.w));
        float _2770 = log2(_2769);
        float _2786 = log2(_2490);
        _2583 = (exp2(_2786 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].x)) * _2760.x) / cbSceneParam._m0[78u].x)) + _2487;
        _2585 = (exp2(_2786 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].y)) * _2760.y) / cbSceneParam._m0[78u].y)) + _2488;
        _2587 = (exp2(_2786 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2770 * cbSceneParam._m0[78u].z)) * _2760.z) / cbSceneParam._m0[78u].z)) + _2489;
        _2589 = _2769 * _2490;
    }
    else
    {
        _2583 = _2487;
        _2585 = _2488;
        _2587 = _2489;
        _2589 = _2490;
    }
    bool _2796;
    vec4 _2599;
    vec4 _2621;
    float _2623;
    float _2627;
    float _2628;
    float _2629;
    float _2630;
    bool _2640;
    for (;;)
    {
        _2599 = cbMatDynParam._m0[0u];
        float _2601 = roundEven(_2599.y);
        bool _2602 = _2601 == 3.0;
        float _2603 = log2(_2589);
        float _2610 = exp2(_2603 * cbSceneParam._m0[78u].x) * _2459;
        float _2611 = exp2(_2603 * cbSceneParam._m0[78u].y) * _2460;
        float _2612 = exp2(_2603 * cbSceneParam._m0[78u].z) * _2461;
        float _2619 = _588 + (-0.5);
        _2621 = cbMtdParam._m0[1u];
        _2623 = _2621.y * _2619;
        float _2626 = (_2601 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2627 = _2626 * (_2602 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2583)));
        _2628 = _2626 * (_2602 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2585)));
        _2629 = _2626 * (_2602 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2587)));
        _2630 = _2619 * 0.999000012874603271484375;
        _2640 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2640)
        {
            if ((cbInstanceData._m0[_230 + 7u].x + _2630) < 0.5)
            {
                _2796 = true;
                break;
            }
        }
        uint _2737 = _640 + uint(_2599.w);
        if ((cbInstanceData._m0[_2737].w < 1.0) && ((cbInstanceData._m0[_2737].w + _2630) < 0.5))
        {
            _2796 = true;
            break;
        }
        if ((_2623 + 1.0) < _2621.x)
        {
            _2796 = true;
            break;
        }
        _2796 = false;
        break;
    }
    float _3001;
    if (_2796)
    {
        discard_state = true;
        _3001 = 0.0;
    }
    else
    {
        _3001 = cbInstanceData._m0[_2462].w;
    }
    SV_Target.x = _2627;
    SV_Target.y = _2628;
    SV_Target.z = _2629;
    SV_Target.w = _3001;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2462].w;
    discard_exit();
}


