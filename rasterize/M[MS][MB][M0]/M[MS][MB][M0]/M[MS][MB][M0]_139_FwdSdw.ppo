#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1159;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    uint _238 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _238 + 1u;
    uint _248 = _238 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3746 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _402 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _258) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _259) + cbTextureTilingScale._m0[14u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _258) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _259) + cbTextureTilingScale._m0[20u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _468 = _466.x;
    float _469 = _466.y;
    float _470 = _466.z;
    float _479 = ((_449.z - _470) * _374) + _470;
    float _482 = ((((_449.x - _468) * _374) + _468) * 2.0) + (-1.0);
    float _483 = ((((_449.y - _469) * _374) + _469) * 2.0) + (-1.0);
    float _484 = dot(vec2(_482, _483), vec2(_482, _483));
    float _3757 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _489 = sqrt(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))));
    float _492 = _482 + ((((_422.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _493 = _483 + ((((_422.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _496 = fma(_489, _226, fma(_493, _233, _492 * _219));
    float _499 = fma(_489, _227, fma(_493, _234, _492 * _220));
    float _502 = fma(_489, _228, fma(_493, _235, _492 * _221));
    float _506 = inversesqrt(dot(vec3(_496, _499, _502), vec3(_496, _499, _502)));
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _550 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _258) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _552 = _550.x;
    float _553 = 1.0 - _552;
    float _559 = (cbMtdParam._m0[19u].x + dot(vec4(_506 * _496, _506 * _499, _506 * _502, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_552 - _553) * cbMtdParam._m0[24u].z) + _553) * cbMtdParam._m0[21u].z);
    float _3768 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _567 = (_560 * ((_402.x * cbMtdParam._m0[18u].x) - _381)) + _381;
    float _568 = (_560 * ((_402.y * cbMtdParam._m0[18u].y) - _382)) + _382;
    float _569 = (_560 * ((_402.z * cbMtdParam._m0[18u].z) - _383)) + _383;
    float _574 = (((_422.z - _479) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _479;
    vec4 _587 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _258) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _259) + cbTextureTilingScale._m0[15u].w));
    float _594 = (_587.x * 2.0) + (-1.0);
    float _595 = (_587.y * 2.0) + (-1.0);
    float _596 = dot(vec2(_594, _595), vec2(_594, _595));
    float _3779 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _604 = ((_587.z - _574) * _560) + _574;
    float _614 = ((sqrt(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) - _489) * _560) + _489;
    float _617 = (((_594 - _492) * _560) + _492) + (cbMtdParam._m0[21u].x * _492);
    float _618 = (((_595 - _493) * _560) + _493) + (cbMtdParam._m0[21u].x * _493);
    float _623 = cbMtdParam._m0[22u].x + _522.w;
    float _626 = fma(_614, _226, fma(_618, _233, _617 * _219));
    float _629 = fma(_614, _227, fma(_618, _234, _617 * _220));
    float _632 = fma(_614, _228, fma(_618, _235, _617 * _221));
    float _636 = inversesqrt(dot(vec3(_626, _629, _632), vec3(_626, _629, _632)));
    float _637 = _636 * _626;
    float _638 = _636 * _629;
    float _639 = _636 * _632;
    float _3790 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _640 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _3801 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3812 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3823 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3834 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _658 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _700 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _710 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _700);
    float _711 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _700);
    float _712 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _700);
    float _716 = inversesqrt(dot(vec3(_710, _711, _712), vec3(_710, _711, _712)));
    float _717 = _710 * _716;
    float _718 = _711 * _716;
    float _719 = _712 * _716;
    float _725 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _726 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _744 = fma(_639, cbSceneParam._m0[5u].z, fma(_638, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _637));
    float _747 = fma(_639, cbSceneParam._m0[6u].z, fma(_638, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _637));
    float _750 = fma(_639, cbSceneParam._m0[7u].z, fma(_638, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _637));
    uint _764 = (_238 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _770 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_764].x;
    float _771 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) * cbInstanceData._m0[_764].y;
    float _772 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0)))) * cbInstanceData._m0[_764].z;
    float _3845 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _3867 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    vec4 _784 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _725, cbSceneParam._m0[86u].y * _726));
    float _788 = ((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * TEXCOORD_5.w) * _784.x;
    float _789 = dot(vec3(_637, _638, _639), vec3(_717, _718, _719));
    float _792 = _789 * 2.0;
    float _796 = (_792 * _637) - _717;
    float _797 = (_792 * _638) - _718;
    float _798 = (_792 * _639) - _719;
    float _802 = abs(dot(vec3(_717, _718, _719), vec3(_637, _638, _639)));
    float _3878 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _804 = sqrt(_640);
    float _817 = exp2((_804 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_804 * 3.0));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1158;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _883 = fma(_857, cbModelParam._m0[26u].z, fma(_853, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849));
        float _887 = fma(_857, cbModelParam._m0[27u].z, fma(_853, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849));
        float _891 = fma(_857, cbModelParam._m0[28u].z, fma(_853, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849));
        float _916 = _849 + _637;
        float _917 = _853 + _638;
        float _918 = _857 + _639;
        float _928 = fma(_918, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916)) - _883;
        float _929 = fma(_918, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916)) - _887;
        float _930 = fma(_918, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916)) - _891;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_883 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_887 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[34u].z) + ((((((_891 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _986 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_952.x + (-0.5));
        float _988 = _986 * (_952.y + (-0.5));
        float _989 = _986 * (_952.z + (-0.5));
        float _996 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_959.x + (-0.5));
        float _998 = _996 * (_959.y + (-0.5));
        float _999 = _996 * (_959.z + (-0.5));
        float _1006 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_966.x + (-0.5));
        float _1008 = _1006 * (_966.y + (-0.5));
        float _1009 = _1006 * (_966.z + (-0.5));
        float _1016 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_973.x + (-0.5));
        float _1018 = _1016 * (_973.y + (-0.5));
        float _1019 = _1016 * (_973.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1040 = (dot(vec3(_637, _638, _639), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1050 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3926 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1052 + 1.0))) + _1057) * _1020;
        float _1067 = _988 * 0.5;
        float _1068 = _998 * 0.5;
        float _1069 = _1008 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_637, _638, _639), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3959 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1094 + 1.0))) + _1099) * _1021;
        float _1109 = _989 * 0.5;
        float _1110 = _999 * 0.5;
        float _1111 = _1009 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_637, _638, _639), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3992 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1136 + 1.0))) + _1141) * _1022;
        _1158 = _989;
        _1160 = _988;
        _1161 = _987;
        _1162 = _999;
        _1163 = _998;
        _1164 = _997;
        _1165 = _1009;
        _1166 = _1008;
        _1167 = _1007;
        _1168 = _1022;
        _1169 = _1021;
        _1170 = _1020;
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _1159;
        _1160 = _1159;
        _1161 = _1159;
        _1162 = _1159;
        _1163 = _1159;
        _1164 = _1159;
        _1165 = _1159;
        _1166 = _1159;
        _1167 = _1159;
        _1168 = _1159;
        _1169 = _1159;
        _1170 = _1159;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1198 = fma(_857, cbModelParam._m0[30u].z, fma(_853, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _849));
        float _1202 = fma(_857, cbModelParam._m0[31u].z, fma(_853, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _849));
        float _1206 = fma(_857, cbModelParam._m0[32u].z, fma(_853, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _849));
        float _1229 = _849 + _637;
        float _1230 = _853 + _638;
        float _1231 = _857 + _639;
        float _1241 = fma(_1231, cbModelParam._m0[30u].z, fma(_1230, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1229)) - _1198;
        float _1242 = fma(_1231, cbModelParam._m0[31u].z, fma(_1230, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1229)) - _1202;
        float _1243 = fma(_1231, cbModelParam._m0[32u].z, fma(_1230, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1229)) - _1206;
        float _1247 = inversesqrt(dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243)));
        float _1260 = ((_1247 * _1241) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1198 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1247 * _1242) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1202 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1247 * _1243) / cbModelParam._m0[35u].z) + ((((((_1206 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        float _1297 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1264.x + (-0.5));
        float _1299 = _1297 * (_1264.y + (-0.5));
        float _1300 = _1297 * (_1264.z + (-0.5));
        float _1307 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1271.x + (-0.5));
        float _1309 = _1307 * (_1271.y + (-0.5));
        float _1310 = _1307 * (_1271.z + (-0.5));
        float _1317 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1278.x + (-0.5));
        float _1319 = _1317 * (_1278.y + (-0.5));
        float _1320 = _1317 * (_1278.z + (-0.5));
        float _1327 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1285.x + (-0.5));
        float _1329 = _1327 * (_1285.y + (-0.5));
        float _1330 = _1327 * (_1285.z + (-0.5));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = _1298 * 0.5;
        float _1335 = _1308 * 0.5;
        float _1336 = _1318 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_637, _638, _639), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4055 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1361 + 1.0))) + _1366) * _1331;
        float _1376 = _1299 * 0.5;
        float _1377 = _1309 * 0.5;
        float _1378 = _1319 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_637, _638, _639), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4088 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1403 + 1.0))) + _1408) * _1332;
        float _1418 = _1300 * 0.5;
        float _1419 = _1310 * 0.5;
        float _1420 = _1320 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_637, _638, _639), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4121 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1445 + 1.0))) + _1450) * _1333;
        _1467 = _1300;
        _1468 = _1299;
        _1469 = _1298;
        _1470 = _1310;
        _1471 = _1309;
        _1472 = _1308;
        _1473 = _1320;
        _1474 = _1319;
        _1475 = _1318;
        _1476 = _1333;
        _1477 = _1332;
        _1478 = _1331;
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
    }
    else
    {
        _1467 = _1159;
        _1468 = _1159;
        _1469 = _1159;
        _1470 = _1159;
        _1471 = _1159;
        _1472 = _1159;
        _1473 = _1159;
        _1474 = _1159;
        _1475 = _1159;
        _1476 = _1159;
        _1477 = _1159;
        _1478 = _1159;
        _1479 = 0.0;
        _1480 = 0.0;
        _1481 = 0.0;
    }
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1171)) + _1171;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1172)) + _1172;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1173)) + _1173;
    float _1514 = fma(_1493, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1493, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1493, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1491));
    float _1535 = _796 * 0.5;
    float _1536 = _797 * 0.5;
    float _1537 = _798 * 0.5;
    float _1538 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1541 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1544 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1578;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1551 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1158, _1162, _1165, _1168));
        float _1555 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1559 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1566 = dot(vec4(cbModelParam._m0[39u]), vec4(_1535, _1536, _1537, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1566) ? 0.0 : (isnan(0.0) ? _1566 : max(0.0, _1566))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1589;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1580 = dot(vec4(cbModelParam._m0[40u]), vec4(_1535, _1536, _1537, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1593 = (_1589 * cbModelParam._m0[1u].x) + (_1578 * (1.0 - cbModelParam._m0[1u].x));
    float _1603 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _640);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1603 : min(cbModelParam._m0[25u].z, _1603));
    float _1684;
    float _1686;
    float _1688;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1651 = fma(_857, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _849)) + cbModelParam._m0[13u].w;
        float _1655 = fma(_857, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _849)) + cbModelParam._m0[14u].w;
        float _1659 = fma(_857, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _849)) + cbModelParam._m0[15u].w;
        float _1662 = fma(_798, cbModelParam._m0[13u].z, fma(_797, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _796));
        float _1665 = fma(_798, cbModelParam._m0[14u].z, fma(_797, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _796));
        float _1668 = fma(_798, cbModelParam._m0[15u].z, fma(_797, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _796));
        float _1696;
        if (_1662 > 0.0)
        {
            _1696 = abs((1.0 - _1651) / _1662);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1651 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1696 = frontier_phi_14_12_ladder;
        }
        float _1865;
        if (_1665 > 0.0)
        {
            _1865 = abs((1.0 - _1655) / _1665);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1655 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1865 = frontier_phi_23_19_ladder;
        }
        float _2160;
        if (_1668 > 0.0)
        {
            _2160 = abs((1.0 - _1659) / _1668);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1659 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2160 = frontier_phi_35_30_ladder;
        }
        float _2162 = isnan(_1865) ? _1696 : (isnan(_1696) ? _1865 : min(_1696, _1865));
        float _2163 = isnan(_2160) ? _2162 : (isnan(_2162) ? _2160 : min(_2162, _2160));
        float _2167 = (_2163 * _1662) + _1651;
        float _2168 = (_2163 * _1665) + _1655;
        float _2169 = (_2163 * _1668) + _1659;
        float _2170 = _2163 * 9.9999997473787516355514526367188e-05;
        float _2172 = (-1.0) - _2170;
        float _2174 = _2170 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2169 > _2174) || ((_2169 < _2172) || ((_2168 > _2174) || ((_2168 < _2172) || ((_2167 < _2172) || (_2167 > _2174))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2314 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2169, cbModelParam._m0[9u].z, fma(_2168, cbModelParam._m0[9u].y, _2167 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2169, cbModelParam._m0[10u].z, fma(_2168, cbModelParam._m0[10u].y, _2167 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2169, cbModelParam._m0[11u].z, fma(_2168, cbModelParam._m0[11u].y, _2167 * cbModelParam._m0[11u].x))), _1604);
            frontier_phi_13_35_ladder = _2314.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2314.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2314.x * cbModelParam._m0[1u].y;
        }
        _1684 = frontier_phi_13_35_ladder_2;
        _1686 = frontier_phi_13_35_ladder_1;
        _1688 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1672 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_796, _797, _798), _1604);
        _1684 = _1672.x * cbModelParam._m0[1u].y;
        _1686 = _1672.y * cbModelParam._m0[1u].y;
        _1688 = _1672.z * cbModelParam._m0[1u].y;
    }
    float _1692 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _640);
    float _1693 = isnan(_1692) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1692 : min(cbModelParam._m0[25u].w, _1692));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1746 = fma(_857, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _849)) + cbModelParam._m0[21u].w;
        float _1750 = fma(_857, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _849)) + cbModelParam._m0[22u].w;
        float _1754 = fma(_857, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _849)) + cbModelParam._m0[23u].w;
        float _1757 = fma(_798, cbModelParam._m0[21u].z, fma(_797, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _796));
        float _1760 = fma(_798, cbModelParam._m0[22u].z, fma(_797, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _796));
        float _1763 = fma(_798, cbModelParam._m0[23u].z, fma(_797, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _796));
        float _1870;
        if (_1757 > 0.0)
        {
            _1870 = abs((1.0 - _1746) / _1757);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1746 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1870 = frontier_phi_25_21_ladder;
        }
        float _2187;
        if (_1760 > 0.0)
        {
            _2187 = abs((1.0 - _1750) / _1760);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1750 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2187 = frontier_phi_37_32_ladder;
        }
        float _2514;
        if (_1763 > 0.0)
        {
            _2514 = abs((1.0 - _1754) / _1763);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1754 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2514 = frontier_phi_47_44_ladder;
        }
        float _2516 = isnan(_2187) ? _1870 : (isnan(_1870) ? _2187 : min(_1870, _2187));
        float _2517 = isnan(_2514) ? _2516 : (isnan(_2516) ? _2514 : min(_2516, _2514));
        float _2521 = (_2517 * _1757) + _1746;
        float _2522 = (_2517 * _1760) + _1750;
        float _2523 = (_2517 * _1763) + _1754;
        float _2524 = _2517 * 9.9999997473787516355514526367188e-05;
        float _2525 = (-1.0) - _2524;
        float _2527 = _2524 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2523 > _2527) || ((_2523 < _2525) || ((_2522 > _2527) || ((_2522 < _2525) || ((_2521 < _2525) || (_2521 > _2527))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2641 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2523, cbModelParam._m0[17u].z, fma(_2522, cbModelParam._m0[17u].y, _2521 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2523, cbModelParam._m0[18u].z, fma(_2522, cbModelParam._m0[18u].y, _2521 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2523, cbModelParam._m0[19u].z, fma(_2522, cbModelParam._m0[19u].y, _2521 * cbModelParam._m0[19u].x))), _1693);
            frontier_phi_22_47_ladder = _2641.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2641.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2641.x * cbModelParam._m0[1u].z;
        }
        _1782 = frontier_phi_22_47_ladder_2;
        _1784 = frontier_phi_22_47_ladder_1;
        _1786 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_796, _797, _798), _1693);
        _1782 = _1766.x * cbModelParam._m0[1u].z;
        _1784 = _1766.y * cbModelParam._m0[1u].z;
        _1786 = _1766.z * cbModelParam._m0[1u].z;
    }
    float _1798 = ((((1.0 - _817) * ((_804 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_817 * _804)) * _788;
    float _1799 = _1798 * ((cbModelParam._m0[1u].w * (_1782 - _1684)) + _1684);
    float _1800 = _1798 * ((cbModelParam._m0[1u].w * (_1784 - _1686)) + _1686);
    float _1801 = _1798 * ((cbModelParam._m0[1u].w * (_1786 - _1688)) + _1688);
    float _1804 = fma(_1801, cbSceneParam._m0[89u].z, fma(_1800, cbSceneParam._m0[89u].y, _1799 * cbSceneParam._m0[89u].x));
    float _1807 = fma(_1801, cbSceneParam._m0[90u].z, fma(_1800, cbSceneParam._m0[90u].y, _1799 * cbSceneParam._m0[90u].x));
    float _1810 = fma(_1801, cbSceneParam._m0[91u].z, fma(_1800, cbSceneParam._m0[91u].y, _1799 * cbSceneParam._m0[91u].x));
    float _1844 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1848 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1852 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1856 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1857 = _1844 / _1856;
    float _1858 = _1848 / _1856;
    float _1859 = _1852 / _1856;
    float _2006;
    float _2007;
    float _2008;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1886 = ((uint(_1859 > cbSceneParam._m0[59u].y) + uint(_1859 > cbSceneParam._m0[59u].x)) + uint(_1859 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1887 = _1886 + 43u;
        uint _1895 = _1886 + 44u;
        uint _1903 = _1886 + 45u;
        uint _1911 = _1886 + 46u;
        float _1922 = fma(_1856, cbSceneParam._m0[_1887].w, fma(_1852, cbSceneParam._m0[_1887].z, fma(_1848, cbSceneParam._m0[_1887].y, _1844 * cbSceneParam._m0[_1887].x)));
        float _1926 = fma(_1856, cbSceneParam._m0[_1895].w, fma(_1852, cbSceneParam._m0[_1895].z, fma(_1848, cbSceneParam._m0[_1895].y, _1844 * cbSceneParam._m0[_1895].x)));
        float _1934 = fma(_1856, cbSceneParam._m0[_1911].w, fma(_1852, cbSceneParam._m0[_1911].z, fma(_1848, cbSceneParam._m0[_1911].y, _1844 * cbSceneParam._m0[_1911].x)));
        float _1939 = cbSceneParam._m0[33u].z * _1934;
        float _1941 = cbSceneParam._m0[33u].w * _1934;
        float _1944 = fma(_1856, cbSceneParam._m0[_1903].w, fma(_1852, cbSceneParam._m0[_1903].z, fma(_1848, cbSceneParam._m0[_1903].y, _1844 * cbSceneParam._m0[_1903].x))) / _1934;
        float _1992 = (cbSceneParam._m0[33u].x - sqrt(((_1858 * _1858) + (_1857 * _1857)) + (_1859 * _1859))) * cbSceneParam._m0[33u].y;
        float _4247 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1999 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1939 + _1922) / _1934, (_1941 + _1926) / _1934), _1944), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1941 + _1922) / _1934, (_1926 - _1939) / _1934), _1944), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1922 - _1939) / _1934, (_1926 - _1941) / _1934), _1944), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1922 - _1941) / _1934, (_1939 + _1926) / _1934), _1944), 0.0)).x), vec4(0.25)));
        _2006 = 1.0 - (_1999 * cbSceneParam._m0[34u].x);
        _2007 = 1.0 - (_1999 * cbSceneParam._m0[34u].y);
        _2008 = 1.0 - (_1999 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2006 = 1.0;
        _2007 = 1.0;
        _2008 = 1.0;
    }
    float _2072;
    float _2074;
    float _2076;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2060 = fma(_1856, cbSceneParam._m0[63u].w, fma(_1852, cbSceneParam._m0[63u].z, fma(_1848, cbSceneParam._m0[63u].y, _1844 * cbSceneParam._m0[63u].x)));
        float _2061 = fma(_1856, cbSceneParam._m0[60u].w, fma(_1852, cbSceneParam._m0[60u].z, fma(_1848, cbSceneParam._m0[60u].y, _1844 * cbSceneParam._m0[60u].x))) / _2060;
        float _2062 = fma(_1856, cbSceneParam._m0[61u].w, fma(_1852, cbSceneParam._m0[61u].z, fma(_1848, cbSceneParam._m0[61u].y, _1844 * cbSceneParam._m0[61u].x))) / _2060;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2061 >= cbSceneParam._m0[64u].x) && (_2062 >= cbSceneParam._m0[64u].y)) && (_2061 <= cbSceneParam._m0[64u].z)) && (_2062 <= cbSceneParam._m0[64u].w))
        {
            float _2200 = fma(_1856, cbSceneParam._m0[62u].w, fma(_1852, cbSceneParam._m0[62u].z, fma(_1848, cbSceneParam._m0[62u].y, _1844 * cbSceneParam._m0[62u].x))) / _2060;
            float _2204 = isnan(cbSceneParam._m0[41u].w) ? _2200 : (isnan(_2200) ? cbSceneParam._m0[41u].w : max(_2200, cbSceneParam._m0[41u].w));
            float _2247 = (cbSceneParam._m0[33u].x - sqrt(((_1858 * _1858) + (_1857 * _1857)) + (_1859 * _1859))) * cbSceneParam._m0[33u].y;
            float _4263 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
            float _2254 = (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2061, cbSceneParam._m0[33u].w + _2062), _2204), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2061, _2062 - cbSceneParam._m0[33u].z), _2204), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2061 - cbSceneParam._m0[33u].z, _2062 - cbSceneParam._m0[33u].w), _2204), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2061 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2062), _2204), 0.0)).x), vec4(0.25)));
            float _2258 = 1.0 - (_2254 * cbSceneParam._m0[34u].x);
            float _2259 = 1.0 - (_2254 * cbSceneParam._m0[34u].y);
            float _2260 = 1.0 - (_2254 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2260) ? _2008 : (isnan(_2008) ? _2260 : min(_2008, _2260));
            frontier_phi_34_33_ladder_1 = isnan(_2259) ? _2007 : (isnan(_2007) ? _2259 : min(_2007, _2259));
            frontier_phi_34_33_ladder_2 = isnan(_2258) ? _2006 : (isnan(_2006) ? _2258 : min(_2006, _2258));
        }
        else
        {
            frontier_phi_34_33_ladder = _2008;
            frontier_phi_34_33_ladder_1 = _2007;
            frontier_phi_34_33_ladder_2 = _2006;
        }
        _2072 = frontier_phi_34_33_ladder_2;
        _2074 = frontier_phi_34_33_ladder_1;
        _2076 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2072 = _2006;
        _2074 = _2007;
        _2076 = _2008;
    }
    uvec4 _2081 = floatBitsToUint(cbInstanceData._m0[_238 + 5u]);
    uint _2083 = _2081.x * 14u;
    uint _2084 = _2083 + 13u;
    float _2091 = _788 + (-1.0);
    float _2096 = (cbLight._m0[_2084].x * _2091) + 1.0;
    float _2097 = (cbLight._m0[_2084].y * _2091) + 1.0;
    float _2098 = (cbLight._m0[_2084].z * _2091) + 1.0;
    float _2099 = (cbLight._m0[_2084].w * _2091) + 1.0;
    uint _2100 = _2083 + 5u;
    float _2106 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
    uint _2110 = _2083 + 4u;
    float _2119 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
    uint _2123 = _2083 | 1u;
    float _2134 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_637, _638, _639));
    float _2137 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_637, _638, _639));
    float _4299 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _4310 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2142 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * 0.3183098733425140380859375;
    float _2144 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * 0.3183098733425140380859375;
    float _2151 = ((cbLight._m0[_2100].x * _2106) * _2144) + (((cbLight._m0[_2110].x * _2072) * _2119) * _2142);
    float _2152 = ((_2106 * cbLight._m0[_2100].y) * _2144) + (((cbLight._m0[_2110].y * _2074) * _2119) * _2142);
    float _2153 = ((_2106 * cbLight._m0[_2100].z) * _2144) + (((cbLight._m0[_2110].z * _2076) * _2119) * _2142);
    uvec4 _2157 = floatBitsToUint(cbLight._m0[_2083 + 12u]);
    bool _2159 = _2157.x == 0u;
    float _2261;
    float _2263;
    float _2265;
    if (_2159)
    {
        _2261 = _2151;
        _2263 = _2152;
        _2265 = _2153;
    }
    else
    {
        uint _2269 = _2083 + 6u;
        float _2285 = (dot(vec3(cbLight._m0[_2083 + 2u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2286 = _2285 * _2285;
        float _4321 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2287 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _2288 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2261 = (((cbLight._m0[_2269].x * 0.3183098733425140380859375) * _2287) * _2288) + _2151;
        _2263 = (((cbLight._m0[_2269].y * 0.3183098733425140380859375) * _2287) * _2288) + _2152;
        _2265 = (((cbLight._m0[_2269].z * 0.3183098733425140380859375) * _2287) * _2288) + _2153;
    }
    bool _2268 = _2157.y == 0u;
    float _2323;
    float _2325;
    float _2327;
    if (_2268)
    {
        _2323 = _2261;
        _2325 = _2263;
        _2327 = _2265;
    }
    else
    {
        uint _2485 = _2083 + 7u;
        float _2501 = (dot(vec3(cbLight._m0[_2083 + 3u].xyz), vec3(_637, _638, _639)) * 0.5) + 0.5;
        float _2502 = _2501 * _2501;
        float _4337 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2503 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2504 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2323 = (((cbLight._m0[_2485].x * 0.3183098733425140380859375) * _2503) * _2504) + _2261;
        _2325 = (((cbLight._m0[_2485].y * 0.3183098733425140380859375) * _2503) * _2504) + _2263;
        _2327 = (((cbLight._m0[_2485].z * 0.3183098733425140380859375) * _2503) * _2504) + _2265;
    }
    uint _2330 = _2083 + 8u;
    float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _640) * 0.949999988079071044921875);
    float _2344 = _2343 * _2343;
    float _2345 = cbLight._m0[_2083].x + _717;
    float _2346 = cbLight._m0[_2083].y + _718;
    float _2347 = cbLight._m0[_2083].z + _719;
    float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
    float _2352 = _2351 * _2345;
    float _2353 = _2351 * _2346;
    float _2354 = _2351 * _2347;
    float _2355 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2083].xyz));
    float _4353 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _4364 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _2359 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2360 = dot(vec3(_637, _638, _639), vec3(_2352, _2353, _2354));
    float _4375 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2364 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2352, _2353, _2354));
    float _4386 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = _2344 * _2344;
    float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
    float _2383 = (exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2384 = 1.0 - _2344;
    float _2395 = (0.5 / (((_2359 * ((_2358 * _2384) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2384) + _2344) * _2358))) * _2358;
    float _4397 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2397 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
    uint _2411 = _2083 + 9u;
    float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _640) * 0.949999988079071044921875);
    float _2423 = _2422 * _2422;
    float _2424 = cbLight._m0[_2123].x + _717;
    float _2425 = cbLight._m0[_2123].y + _718;
    float _2426 = cbLight._m0[_2123].z + _719;
    float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
    float _2431 = _2430 * _2424;
    float _2432 = _2430 * _2425;
    float _2433 = _2430 * _2426;
    float _2434 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2123].xyz));
    float _4408 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2438 = dot(vec3(_637, _638, _639), vec3(_2431, _2432, _2433));
    float _4419 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2442 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2431, _2432, _2433));
    float _4430 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2446 = _2423 * _2423;
    float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
    float _2459 = (exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2460 = 1.0 - _2423;
    float _2470 = (0.5 / (((_2359 * ((_2437 * _2460) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2460) + _2423) * _2437))) * _2437;
    float _4441 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
    float _2482 = (((_2459 * cbLight._m0[_2411].x) * _2472) * _2106) + ((((cbLight._m0[_2330].x * _2072) * _2383) * _2397) * _2119);
    float _2483 = (((_2459 * cbLight._m0[_2411].y) * _2472) * _2106) + ((((cbLight._m0[_2330].y * _2074) * _2383) * _2397) * _2119);
    float _2484 = (((_2459 * cbLight._m0[_2411].z) * _2472) * _2106) + ((((cbLight._m0[_2330].z * _2076) * _2383) * _2397) * _2119);
    float _2540;
    float _2542;
    float _2544;
    if (_2159)
    {
        _2540 = _2482;
        _2542 = _2483;
        _2544 = _2484;
    }
    else
    {
        uint _2546 = _2083 + 2u;
        uint _2550 = _2083 + 10u;
        float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2546].w)) * _640) * 0.949999988079071044921875);
        float _2565 = _2564 * _2564;
        float _2566 = cbLight._m0[_2546].x + _717;
        float _2567 = cbLight._m0[_2546].y + _718;
        float _2568 = cbLight._m0[_2546].z + _719;
        float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
        float _2573 = _2572 * _2566;
        float _2574 = _2572 * _2567;
        float _2575 = _2572 * _2568;
        float _2576 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2546].xyz));
        float _4452 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2580 = dot(vec3(_637, _638, _639), vec3(_2573, _2574, _2575));
        float _4463 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2584 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_2573, _2574, _2575));
        float _4474 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2588 = _2565 * _2565;
        float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
        float _2601 = (exp2(log2(1.0 - (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2602 = 1.0 - _2565;
        float _2612 = (0.5 / (((_2359 * ((_2579 * _2602) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2602) + _2565) * _2579))) * _2579;
        float _4485 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2614 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
        float _2615 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2540 = (((_2601 * cbLight._m0[_2550].x) * _2614) * _2615) + _2482;
        _2542 = (((_2601 * cbLight._m0[_2550].y) * _2614) * _2615) + _2483;
        _2544 = (((_2601 * cbLight._m0[_2550].z) * _2614) * _2615) + _2484;
    }
    float _2646;
    float _2648;
    float _2650;
    if (_2268)
    {
        _2646 = _2540;
        _2648 = _2542;
        _2650 = _2544;
    }
    else
    {
        uint _2657 = _2083 + 3u;
        uint _2661 = _2083 + 11u;
        float _2675 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2657].w)) * _640) * 0.949999988079071044921875);
        float _2676 = _2675 * _2675;
        float _2677 = cbLight._m0[_2657].x + _717;
        float _2678 = cbLight._m0[_2657].y + _718;
        float _2679 = cbLight._m0[_2657].z + _719;
        float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
        float _2684 = _2683 * _2677;
        float _2685 = _2683 * _2678;
        float _2686 = _2683 * _2679;
        float _2687 = dot(vec3(_637, _638, _639), vec3(cbLight._m0[_2657].xyz));
        float _4501 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2690 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2691 = dot(vec3(_637, _638, _639), vec3(_2684, _2685, _2686));
        float _4512 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2695 = dot(vec3(cbLight._m0[_2657].xyz), vec3(_2684, _2685, _2686));
        float _4523 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2699 = _2676 * _2676;
        float _2703 = ((_2694 * _2694) * (_2699 + (-1.0))) + 1.0;
        float _2712 = (exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2713 = 1.0 - _2676;
        float _2723 = (0.5 / (((_2359 * ((_2690 * _2713) + _2676)) + 9.9999999392252902907785028219223e-09) + (((_2359 * _2713) + _2676) * _2690))) * _2690;
        float _4534 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2725 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2699 / ((_2703 * _2703) * 3.141590118408203125));
        float _2726 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2646 = (((_2712 * cbLight._m0[_2661].x) * _2725) * _2726) + _2540;
        _2648 = (((_2712 * cbLight._m0[_2661].y) * _2725) * _2726) + _2542;
        _2650 = (((_2712 * cbLight._m0[_2661].z) * _2725) * _2726) + _2544;
    }
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    if (_2081.y == 0u)
    {
        uvec4 _2747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2748 = _2747.x;
        uint _2759 = uint((float(_2747.y) * floor(float(uint(cbSceneParam._m0[85u].y * _726) / _2748))) + floor(float(uint(cbSceneParam._m0[85u].x * _725) / _2748)));
        float _2769 = (log2(_1859 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2770 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        uint _2773 = uint(isnan(14.0) ? _2770 : (isnan(_2770) ? 14.0 : min(_2770, 14.0)));
        uvec4 _2778 = texelFetch(g_lightClusterGridBuffer, int(((_2773 << 2u) + (_2759 << 6u)) >> 2u));
        uint _2779 = _2778.x;
        uint _2780 = _2747.z;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        if (((((1u << ((_2780 >> 4u) & 15u)) + 4294967295u) & _2779) == 0u) || ((_2780 & 240u) == 0u))
        {
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
        }
        else
        {
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            uint _3010 = 0u;
            uint _3019;
            bool _3020;
            for (;;)
            {
                _3019 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3010 << 2u)) >> 2u)).x;
                _3020 = _3019 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3020)
                {
                    frontier_phi_66_pred = _3009;
                    frontier_phi_66_pred_1 = _3008;
                    frontier_phi_66_pred_2 = _3007;
                    frontier_phi_66_pred_3 = _3006;
                    frontier_phi_66_pred_4 = _3005;
                    frontier_phi_66_pred_5 = _3004;
                }
                else
                {
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    uint _3134;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3019;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    for (;;)
                    {
                        uint _3138 = uint(findLSB(_3134)) + (_3010 << 5u);
                        uint _3135 = (_3134 + 4294967295u) & _3134;
                        uint _3140 = _3138 * 48u;
                        vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3140)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3140 + 3u)).x));
                        uint _3160 = (_3138 * 48u) + 4u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3160)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 3u)).x));
                        uint _3179 = (_3138 * 48u) + 8u;
                        vec3 _3190 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x));
                        float _3194 = _3154.x - _1857;
                        float _3195 = _3154.y - _1858;
                        float _3196 = _3154.z - _1859;
                        float _3197 = dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196));
                        float _3200 = inversesqrt(_3197);
                        float _3201 = _3200 * _3194;
                        float _3202 = _3200 * _3195;
                        float _3203 = _3200 * _3196;
                        float _3204 = dot(vec3(_744, _747, _750), vec3(_3201, _3202, _3203));
                        float _3209 = 1.0 - (_3197 * _3154.w);
                        float _4560 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3210 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3211 = sqrt(_3197) * _3173.w;
                        float _3214 = 1.39999997615814208984375 / (_3211 + 1.39999997615814208984375);
                        float _3215 = _3214 * _3214;
                        float _3218 = ((1.0 - _3215) * _3204) + _3215;
                        float _3221 = _3211 * _3211;
                        float _3225 = ((isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))) * _3210) / ((_3221 * 0.699999988079071044921875) + 1.0);
                        float _3229 = (-0.0) - _1857;
                        float _3230 = (-0.0) - _1858;
                        float _3231 = (-0.0) - _1859;
                        float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                        float _3236 = _3235 * _3229;
                        float _3237 = _3235 * _3230;
                        float _3238 = _3235 * _3231;
                        float _3245 = exp2(log2(1.0 / ((_3221 * 3.5) + 5.0)) * 0.25);
                        float _3246 = 1.0 - _804;
                        float _3253 = sqrt(1.0 - ((1.0 - (_3246 * _3246)) * (1.0 - (_3245 * _3245))));
                        float _3254 = _3253 * _3253;
                        float _3255 = _3254 * _3254;
                        float _3256 = _3236 + _3201;
                        float _3257 = _3237 + _3202;
                        float _3258 = _3238 + _3203;
                        float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                        float _3266 = dot(vec3(_744, _747, _750), vec3(_3236, _3237, _3238));
                        float _4576 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3270 = dot(vec3(_744, _747, _750), vec3(_3262 * _3256, _3262 * _3257, _3262 * _3258));
                        float _4587 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3273 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3277 = ((_3273 * _3273) * (_3255 + (-1.0))) + 1.0;
                        float _3278 = _3214 * _3254;
                        float _3279 = _3278 * _3278;
                        float _3282 = ((1.0 - _3279) * _3204) + _3279;
                        float _4598 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3284 = 1.0 - _3254;
                        float _3294 = (0.5 / (((_3283 * ((_3269 * _3284) + _3254)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3254) * _3269))) * _3283;
                        float _4609 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3305 = (((_3255 * 3.1415927410125732421875) * (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) / ((_3277 * _3277) * ((_3221 * 2.1991131305694580078125) + 3.141590118408203125))) * _3210;
                        _3063 = (_3225 * _3173.x) + _3131;
                        _3064 = (_3225 * _3173.y) + _3132;
                        _3065 = (_3225 * _3173.z) + _3133;
                        _3060 = (_3305 * _3190.x) + _3128;
                        _3061 = (_3305 * _3190.y) + _3129;
                        _3062 = (_3305 * _3190.z) + _3130;
                        if (_3135 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3135;
                        }
                    }
                    frontier_phi_66_pred = _3065;
                    frontier_phi_66_pred_1 = _3064;
                    frontier_phi_66_pred_2 = _3063;
                    frontier_phi_66_pred_3 = _3062;
                    frontier_phi_66_pred_4 = _3061;
                    frontier_phi_66_pred_5 = _3060;
                }
                _2870 = frontier_phi_66_pred;
                _2868 = frontier_phi_66_pred_1;
                _2866 = frontier_phi_66_pred_2;
                _2864 = frontier_phi_66_pred_3;
                _2862 = frontier_phi_66_pred_4;
                _2860 = frontier_phi_66_pred_5;
                uint _3011 = _3010 + 1u;
                if (_3011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3004 = _2860;
                    _3005 = _2862;
                    _3006 = _2864;
                    _3007 = _2866;
                    _3008 = _2868;
                    _3009 = _2870;
                    _3010 = _3011;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
        }
        uvec4 _2873 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2874 = _2873.z;
        uint _2876 = (_2874 >> 8u) & 15u;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        if (((4294967295u << _2876) & _2779) == 0u)
        {
            _2972 = _2859;
            _2974 = _2861;
            _2976 = _2863;
            _2978 = _2865;
            _2980 = _2867;
            _2982 = _2869;
        }
        else
        {
            float _2997 = inversesqrt(dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859)));
            float _2998 = _2997 * _1857;
            float _2999 = _2997 * _1858;
            float _3000 = _2997 * _1859;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2876 < ((_2874 >> 12u) & 15u))
            {
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _3111 = _2859;
                float _3112 = _2861;
                float _3113 = _2863;
                float _3114 = _2865;
                float _3115 = _2867;
                float _3116 = _2869;
                uint _3117 = _2876;
                uint _3126;
                bool _3127;
                for (;;)
                {
                    _3126 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3117 << 2u)) >> 2u)).x;
                    _3127 = _3126 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3127)
                    {
                        frontier_phi_72_pred = _3116;
                        frontier_phi_72_pred_1 = _3115;
                        frontier_phi_72_pred_2 = _3114;
                        frontier_phi_72_pred_3 = _3113;
                        frontier_phi_72_pred_4 = _3112;
                        frontier_phi_72_pred_5 = _3111;
                    }
                    else
                    {
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3323 = _3111;
                        float _3324 = _3112;
                        float _3325 = _3113;
                        float _3326 = _3114;
                        float _3327 = _3115;
                        float _3328 = _3116;
                        uint _3329 = _3126;
                        uint _3330;
                        vec4 _3355;
                        float _3356;
                        vec4 _3371;
                        vec3 _3383;
                        vec4 _3398;
                        vec4 _3413;
                        float _3459;
                        bool _3460;
                        for (;;)
                        {
                            uint _3340 = ((_3117 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3329));
                            _3330 = (_3329 + 4294967295u) & _3329;
                            uint _3342 = _3340 * 40u;
                            _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            _3356 = _3355.w;
                            uint _3358 = (_3340 * 40u) + 4u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3340 * 40u) + 8u;
                            _3383 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x));
                            uint _3385 = (_3340 * 40u) + 16u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3400 = (_3340 * 40u) + 20u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3415 = (_3340 * 40u) + 24u;
                            vec4 _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3434 = (_3340 * 40u) + 28u;
                            vec4 _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            _3459 = fma(_1859, _3447.z, fma(_1858, _3447.y, _3447.x * _1857)) + _3447.w;
                            _3460 = !((fma(_1859, _3428.z, fma(_1858, _3428.y, _3428.x * _1857)) + _3428.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3460)
                            {
                                float _3487 = _3355.x - _1857;
                                float _3488 = _3355.y - _1858;
                                float _3489 = _3355.z - _1859;
                                float _3490 = dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489));
                                float _3493 = inversesqrt(_3490);
                                float _3494 = _3493 * _3487;
                                float _3495 = _3493 * _3488;
                                float _3496 = _3493 * _3489;
                                float _3500 = 1.0 - (_3490 / (_3356 * _3356));
                                float _4620 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3505 = sqrt(_3490) * _3371.w;
                                float _3507 = 1.39999997615814208984375 / (_3505 + 1.39999997615814208984375);
                                float _3508 = _3507 * _3507;
                                float _3511 = ((1.0 - _3508) * dot(vec3(_3494, _3495, _3496), vec3(_744, _747, _750))) + _3508;
                                float _3514 = _3505 * _3505;
                                float _3518 = (fma(_1859, _3398.z, fma(_1858, _3398.y, _3398.x * _1857)) + _3398.w) / _3459;
                                float _3519 = (fma(_1859, _3413.z, fma(_1858, _3413.y, _3413.x * _1857)) + _3413.w) / _3459;
                                float _3523 = 1.0 - dot(vec2(_3518, _3519), vec2(_3518, _3519));
                                float _4636 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3524 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3525 = _3524 * (((isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0))) * _3501) / ((_3514 * 0.699999988079071044921875) + 1.0));
                                float _3537 = exp2(log2(1.0 / ((_3514 * 3.5) + 5.0)) * 0.25);
                                float _3538 = 1.0 - _804;
                                float _3545 = sqrt(1.0 - ((1.0 - (_3538 * _3538)) * (1.0 - (_3537 * _3537))));
                                float _3546 = _3545 * _3545;
                                float _3547 = _3546 * _3546;
                                float _3548 = _3494 - _2998;
                                float _3549 = _3495 - _2999;
                                float _3550 = _3496 - _3000;
                                float _3554 = inversesqrt(dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550)));
                                float _3558 = dot(vec3(_744, _747, _750), vec3((-0.0) - _2998, (-0.0) - _2999, (-0.0) - _3000));
                                float _4647 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                                float _3561 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3562 = dot(vec3(_744, _747, _750), vec3(_3554 * _3548, _3554 * _3549, _3554 * _3550));
                                float _4658 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3565 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3569 = ((_3565 * _3565) * (_3547 + (-1.0))) + 1.0;
                                float _3570 = _3507 * _3546;
                                float _3571 = _3570 * _3570;
                                float _3577 = ((1.0 - _3571) * dot(vec3(_744, _747, _750), vec3(_3494, _3495, _3496))) + _3571;
                                float _4669 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3579 = 1.0 - _3546;
                                float _3589 = (0.5 / (((_3578 * ((_3561 * _3579) + _3546)) + 9.9999999392252902907785028219223e-09) + (((_3578 * _3579) + _3546) * _3561))) * _3578;
                                float _4680 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3599 = (_3524 * _3501) * (((_3547 * 3.1415927410125732421875) * (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) / ((_3569 * _3569) * ((_3514 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3525 * _3371.y;
                                frontier_phi_78_pred_1 = _3525 * _3371.x;
                                frontier_phi_78_pred_2 = _3599 * _3383.z;
                                frontier_phi_78_pred_3 = _3599 * _3383.y;
                                frontier_phi_78_pred_4 = _3599 * _3383.x;
                                frontier_phi_78_pred_5 = _3525 * _3371.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3607 = frontier_phi_78_pred;
                            _3606 = frontier_phi_78_pred_1;
                            _3605 = frontier_phi_78_pred_2;
                            _3604 = frontier_phi_78_pred_3;
                            _3603 = frontier_phi_78_pred_4;
                            _3608 = frontier_phi_78_pred_5;
                            _3313 = _3606 + _3326;
                            _3314 = _3607 + _3327;
                            _3315 = _3608 + _3328;
                            _3310 = _3603 + _3323;
                            _3311 = _3604 + _3324;
                            _3312 = _3605 + _3325;
                            if (_3330 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3330;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3315;
                        frontier_phi_72_pred_1 = _3314;
                        frontier_phi_72_pred_2 = _3313;
                        frontier_phi_72_pred_3 = _3312;
                        frontier_phi_72_pred_4 = _3311;
                        frontier_phi_72_pred_5 = _3310;
                    }
                    _2983 = frontier_phi_72_pred;
                    _2981 = frontier_phi_72_pred_1;
                    _2979 = frontier_phi_72_pred_2;
                    _2977 = frontier_phi_72_pred_3;
                    _2975 = frontier_phi_72_pred_4;
                    _2973 = frontier_phi_72_pred_5;
                    uint _3118 = _3117 + 1u;
                    if (_3118 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3111 = _2973;
                        _3112 = _2975;
                        _3113 = _2977;
                        _3114 = _2979;
                        _3115 = _2981;
                        _3116 = _2983;
                        _3117 = _3118;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2983;
                frontier_phi_60_61_ladder_1 = _2981;
                frontier_phi_60_61_ladder_2 = _2977;
                frontier_phi_60_61_ladder_3 = _2975;
                frontier_phi_60_61_ladder_4 = _2973;
                frontier_phi_60_61_ladder_5 = _2979;
            }
            else
            {
                frontier_phi_60_61_ladder = _2869;
                frontier_phi_60_61_ladder_1 = _2867;
                frontier_phi_60_61_ladder_2 = _2863;
                frontier_phi_60_61_ladder_3 = _2861;
                frontier_phi_60_61_ladder_4 = _2859;
                frontier_phi_60_61_ladder_5 = _2865;
            }
            _2972 = frontier_phi_60_61_ladder_4;
            _2974 = frontier_phi_60_61_ladder_3;
            _2976 = frontier_phi_60_61_ladder_2;
            _2978 = frontier_phi_60_61_ladder_5;
            _2980 = frontier_phi_60_61_ladder_1;
            _2982 = frontier_phi_60_61_ladder;
        }
        float _2987 = isnan(1.0) ? _788 : (isnan(_788) ? 1.0 : min(_788, 1.0));
        _2792 = (_2987 * _2978) + _2323;
        _2794 = (_2987 * _2980) + _2325;
        _2796 = (_2987 * _2982) + _2327;
        _2798 = ((_2972 * 0.039999999105930328369140625) * _2987) + _2646;
        _2800 = ((_2974 * 0.039999999105930328369140625) * _2987) + _2648;
        _2802 = ((_2976 * 0.039999999105930328369140625) * _2987) + _2650;
    }
    else
    {
        _2792 = _2323;
        _2794 = _2325;
        _2796 = _2327;
        _2798 = _2646;
        _2800 = _2648;
        _2802 = _2650;
    }
    float _4696 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4707 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4718 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    uint _2822 = _238 + 6u;
    float _2830 = _725 / cbSceneParam._m0[86u].x;
    float _2831 = _726 / cbSceneParam._m0[86u].y;
    vec4 _2845 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, (log2((isnan(cbSceneParam._m0[77u].w) ? _658 : (isnan(_658) ? cbSceneParam._m0[77u].w : min(_658, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2847 = _2845.x;
    float _2848 = _2845.y;
    float _2849 = _2845.z;
    float _2850 = _2845.w;
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    if (_658 > cbSceneParam._m0[78u].w)
    {
        float _2884 = isnan(_658) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _658 : min(cbSceneParam._m0[80u].w, _658));
        float _2885 = _2884 / _658;
        float _2896 = _2885 * _710;
        float _2897 = _711 * _2885;
        float _2898 = (-0.0) - _2897;
        float _2900 = _2885 * _712;
        float _2902 = (cbSceneParam._m0[77u].w * _2898) / _2884;
        float _2903 = _2902 + cbSceneParam._m0[79u].w;
        float _2904 = cbSceneParam._m0[79u].w - _2897;
        float _2910 = sqrt(((_2896 * _2896) + (_2897 * _2897)) + (_2900 * _2900));
        float _2913 = (1.0 - (cbSceneParam._m0[77u].w / _2884)) * _2910;
        float _2918 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2920 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3073;
        if (abs((_2898 - _2902) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3073 = ((((_2903 > 0.0) ? exp2(_2918 * _2903) : (2.0 - exp2(_2920 * _2903))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2913;
        }
        else
        {
            float _3033 = 1.0 / cbSceneParam._m0[80u].x;
            float _3034 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : max(_2903, _2904));
            float _3035 = isnan(_2904) ? _2903 : (isnan(_2903) ? _2904 : min(_2903, _2904));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            _3073 = ((abs(_2910 / _2898) * cbSceneParam._m0[80u].y) * ((((_3044 - _3045) * 2.0) - ((exp2(_2918 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0)))) - exp2(_2918 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0))))) * _3033)) - ((exp2(_2920 * _3044) - exp2(_2920 * _3045)) * _3033))) + (_2913 * cbSceneParam._m0[80u].z);
        }
        vec4 _3075 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, 1.0), 0.0);
        float _3084 = exp2((_3073 * (-1.44269502162933349609375)) * (1.0 - _3075.w));
        float _3085 = log2(_3084);
        float _3101 = log2(_2850);
        _2922 = (exp2(_3101 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].x)) * _3075.x) / cbSceneParam._m0[78u].x)) + _2847;
        _2924 = (exp2(_3101 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].y)) * _3075.y) / cbSceneParam._m0[78u].y)) + _2848;
        _2926 = (exp2(_3101 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3085 * cbSceneParam._m0[78u].z)) * _3075.z) / cbSceneParam._m0[78u].z)) + _2849;
        _2928 = _3084 * _2850;
    }
    else
    {
        _2922 = _2847;
        _2924 = _2848;
        _2926 = _2849;
        _2928 = _2850;
    }
    float _2940 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2941 = _2940 == 3.0;
    float _2942 = log2(_2928);
    float _2949 = exp2(_2942 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2792 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _788))) + ((_2798 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1593)) * cbPerFrame._m0[3u].x));
    float _2950 = exp2(_2942 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2794 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _788))) + ((_2800 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1593)) * cbPerFrame._m0[3u].x));
    float _2951 = exp2(_2942 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2796 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _788))) + ((_2802 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1593)) * cbPerFrame._m0[3u].x));
    float _2960 = (_2940 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2960 * (_2941 ? _2949 : (_2949 + (cbSceneParam._m0[72u].w * _2922)));
    SV_Target.y = _2960 * (_2941 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2924)));
    SV_Target.z = _2960 * (_2941 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2926)));
    SV_Target.w = cbInstanceData._m0[_2822].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2822].w;
}


