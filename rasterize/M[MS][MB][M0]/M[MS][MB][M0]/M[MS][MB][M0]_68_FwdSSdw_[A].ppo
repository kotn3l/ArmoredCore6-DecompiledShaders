#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1136;
float _3523;
float _3524;
float _3525;
float _3526;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _283 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _289 = _283.x * cbMtdParam._m0[11u].x;
    float _290 = _283.y * cbMtdParam._m0[11u].y;
    float _291 = _283.z * cbMtdParam._m0[11u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _262) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _350 = _348.x;
    float _360 = dot(vec4(_350, _348.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _377 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_350 - _360) * cbMtdParam._m0[24u].x) + _360) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3535 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _385 = (_378 * ((_310.x * cbMtdParam._m0[12u].x) - _289)) + _289;
    float _386 = (_378 * ((_310.y * cbMtdParam._m0[12u].y) - _290)) + _290;
    float _387 = (_378 * ((_310.z * cbMtdParam._m0[12u].z) - _291)) + _291;
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _262) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _263) + cbTextureTilingScale._m0[4u].w));
    vec4 _417 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _419 = _417.x;
    float _420 = _417.y;
    float _421 = _417.z;
    float _430 = ((_400.z - _421) * _378) + _421;
    float _433 = ((((_400.x - _419) * _378) + _419) * 2.0) + (-1.0);
    float _435 = ((((_400.y - _420) * _378) + _420) * 2.0) + (-1.0);
    float _436 = dot(vec2(_433, _435), vec2(_433, _435));
    float _3546 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _441 = sqrt(1.0 - (isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))));
    vec4 _454 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _468 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _470 = _468.x;
    float _471 = 1.0 - _470;
    float _499 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_470 - _471) * cbMtdParam._m0[24u].w) + _471) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3557 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _500 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _508 = ((((cbMtdParam._m0[10u].x - _385) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _500) + _385;
    float _509 = ((((cbMtdParam._m0[10u].y - _386) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _500) + _386;
    float _510 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _387)) * _500) + _387;
    float _514 = ((cbMtdParam._m0[23u].y - _430) * _500) + _430;
    vec4 _533 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _539 = (_533.x * 2.0) + (-1.0);
    float _540 = (_533.y * 2.0) + (-1.0);
    float _541 = dot(vec2(_539, _540), vec2(_539, _540));
    float _3568 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _557 = (_500 * (((cbMtdParam._m0[22u].z * _433) - _433) + _539)) + _433;
    float _558 = (_500 * (((cbMtdParam._m0[22u].z * _435) - _435) + _540)) + _435;
    float _559 = (_500 * (sqrt(1.0 - (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0)))) - _441)) + _441;
    float _561 = cbMtdParam._m0[22u].x + _454.w;
    float _564 = fma(_559, _230 * NORMAL.x, fma(_558, _237 * TANGENT.x, (_223 * _215) * _557));
    float _567 = fma(_559, _230 * NORMAL.y, fma(_558, _237 * TANGENT.y, (_223 * _216) * _557));
    float _570 = fma(_559, _230 * NORMAL.z, fma(_558, _237 * TANGENT.z, (_223 * _217) * _557));
    float _574 = inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570)));
    float _575 = _574 * _564;
    float _576 = _574 * _567;
    float _577 = _574 * _570;
    float _3579 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _578 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _3590 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3601 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _3612 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _3623 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _596 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _647 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _637);
    float _648 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _637);
    float _649 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _637);
    float _653 = inversesqrt(dot(vec3(_647, _648, _649), vec3(_647, _648, _649)));
    float _654 = _647 * _653;
    float _655 = _648 * _653;
    float _656 = _649 * _653;
    vec4 _661 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _663 = _661.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _817 = sqrt(((_647 * _647) + (_648 * _648)) + (_649 * _649));
        float _823 = (cbMatDynParam._m0[5u].x * _817) + cbMatDynParam._m0[5u].y;
        float _3634 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _828 = (cbMatDynParam._m0[5u].z * _817) + cbMatDynParam._m0[5u].w;
        float _3645 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) - _824)) + _824) < ((_663 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _674 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _675 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _693 = fma(_577, cbSceneParam._m0[5u].z, fma(_576, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _575));
    float _696 = fma(_577, cbSceneParam._m0[6u].z, fma(_576, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _575));
    float _699 = fma(_577, cbSceneParam._m0[7u].z, fma(_576, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _575));
    uint _712 = _243 + 9u;
    uint _713 = _712 + uint(cbMatDynParam._m0[0u].w);
    float _719 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0)))) * cbInstanceData._m0[_713].x;
    float _720 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0)))) * cbInstanceData._m0[_713].y;
    float _721 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0)))) * cbInstanceData._m0[_713].z;
    float _3656 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _3678 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    vec4 _733 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _674, cbSceneParam._m0[86u].y * _675));
    float _737 = ((isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0))) * TEXCOORD_5.w) * _733.x;
    float _738 = dot(vec3(_575, _576, _577), vec3(_654, _655, _656));
    float _741 = _738 * 2.0;
    float _745 = (_741 * _575) - _654;
    float _746 = (_741 * _576) - _655;
    float _747 = (_741 * _577) - _656;
    float _751 = abs(dot(vec3(_654, _655, _656), vec3(_575, _576, _577)));
    float _3689 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _753 = sqrt(_578);
    float _766 = exp2((_753 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_753 * 3.0));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1135;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _860 = fma(_806, cbModelParam._m0[26u].z, fma(_802, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798));
        float _864 = fma(_806, cbModelParam._m0[27u].z, fma(_802, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798));
        float _868 = fma(_806, cbModelParam._m0[28u].z, fma(_802, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798));
        float _893 = _798 + _575;
        float _894 = _802 + _576;
        float _895 = _806 + _577;
        float _905 = fma(_895, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _893)) - _860;
        float _906 = fma(_895, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _893)) - _864;
        float _907 = fma(_895, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _893)) - _868;
        float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
        float _924 = ((_911 * _905) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_860 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_911 * _906) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_864 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_911 * _907) / cbModelParam._m0[34u].z) + ((((((_868 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        float _963 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_929.x + (-0.5));
        float _965 = _963 * (_929.y + (-0.5));
        float _966 = _963 * (_929.z + (-0.5));
        float _973 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_936.x + (-0.5));
        float _975 = _973 * (_936.y + (-0.5));
        float _976 = _973 * (_936.z + (-0.5));
        float _983 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_943.x + (-0.5));
        float _985 = _983 * (_943.y + (-0.5));
        float _986 = _983 * (_943.z + (-0.5));
        float _993 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_950.x + (-0.5));
        float _995 = _993 * (_950.y + (-0.5));
        float _996 = _993 * (_950.z + (-0.5));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = _964 * 0.5;
        float _1001 = _974 * 0.5;
        float _1002 = _984 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1017 = (dot(vec3(_575, _576, _577), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1027 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3737 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1029 + 1.0))) + _1034) * _997;
        float _1044 = _965 * 0.5;
        float _1045 = _975 * 0.5;
        float _1046 = _985 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_575, _576, _577), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3748 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3759 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3770 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1071 + 1.0))) + _1076) * _998;
        float _1086 = _966 * 0.5;
        float _1087 = _976 * 0.5;
        float _1088 = _986 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_575, _576, _577), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3781 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3792 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3803 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * (_1113 + 1.0))) + _1118) * _999;
        _1135 = _966;
        _1137 = _965;
        _1138 = _964;
        _1139 = _976;
        _1140 = _975;
        _1141 = _974;
        _1142 = _986;
        _1143 = _985;
        _1144 = _984;
        _1145 = _999;
        _1146 = _998;
        _1147 = _997;
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _1136;
        _1137 = _1136;
        _1138 = _1136;
        _1139 = _1136;
        _1140 = _1136;
        _1141 = _1136;
        _1142 = _1136;
        _1143 = _1136;
        _1144 = _1136;
        _1145 = _1136;
        _1146 = _1136;
        _1147 = _1136;
        _1148 = 0.0;
        _1149 = 0.0;
        _1150 = 0.0;
    }
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1178 = fma(_806, cbModelParam._m0[30u].z, fma(_802, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _798));
        float _1182 = fma(_806, cbModelParam._m0[31u].z, fma(_802, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _798));
        float _1186 = fma(_806, cbModelParam._m0[32u].z, fma(_802, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _798));
        float _1209 = _798 + _575;
        float _1210 = _802 + _576;
        float _1211 = _806 + _577;
        float _1221 = fma(_1211, cbModelParam._m0[30u].z, fma(_1210, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1209)) - _1178;
        float _1222 = fma(_1211, cbModelParam._m0[31u].z, fma(_1210, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1209)) - _1182;
        float _1223 = fma(_1211, cbModelParam._m0[32u].z, fma(_1210, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1209)) - _1186;
        float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
        float _1240 = ((_1227 * _1221) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1178 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1227 * _1222) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1182 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1227 * _1223) / cbModelParam._m0[35u].z) + ((((((_1186 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1240, _1241, _1242), 0.0);
        float _1277 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1244.x + (-0.5));
        float _1279 = _1277 * (_1244.y + (-0.5));
        float _1280 = _1277 * (_1244.z + (-0.5));
        float _1287 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1251.x + (-0.5));
        float _1289 = _1287 * (_1251.y + (-0.5));
        float _1290 = _1287 * (_1251.z + (-0.5));
        float _1297 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1258.x + (-0.5));
        float _1299 = _1297 * (_1258.y + (-0.5));
        float _1300 = _1297 * (_1258.z + (-0.5));
        float _1307 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1265.x + (-0.5));
        float _1309 = _1307 * (_1265.y + (-0.5));
        float _1310 = _1307 * (_1265.z + (-0.5));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = _1278 * 0.5;
        float _1315 = _1288 * 0.5;
        float _1316 = _1298 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_575, _576, _577), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _3866 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1341 + 1.0))) + _1346) * _1311;
        float _1356 = _1279 * 0.5;
        float _1357 = _1289 * 0.5;
        float _1358 = _1299 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_575, _576, _577), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _3899 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1383 + 1.0))) + _1388) * _1312;
        float _1398 = _1280 * 0.5;
        float _1399 = _1290 * 0.5;
        float _1400 = _1300 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_575, _576, _577), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _3932 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1425 + 1.0))) + _1430) * _1313;
        _1447 = _1280;
        _1448 = _1279;
        _1449 = _1278;
        _1450 = _1290;
        _1451 = _1289;
        _1452 = _1288;
        _1453 = _1300;
        _1454 = _1299;
        _1455 = _1298;
        _1456 = _1313;
        _1457 = _1312;
        _1458 = _1311;
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
    }
    else
    {
        _1447 = _1136;
        _1448 = _1136;
        _1449 = _1136;
        _1450 = _1136;
        _1451 = _1136;
        _1452 = _1136;
        _1453 = _1136;
        _1454 = _1136;
        _1455 = _1136;
        _1456 = _1136;
        _1457 = _1136;
        _1458 = _1136;
        _1459 = 0.0;
        _1460 = 0.0;
        _1461 = 0.0;
    }
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1148)) + _1148;
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1149)) + _1149;
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1150)) + _1150;
    float _1494 = fma(_1473, cbSceneParam._m0[89u].z, fma(_1472, cbSceneParam._m0[89u].y, _1471 * cbSceneParam._m0[89u].x));
    float _1497 = fma(_1473, cbSceneParam._m0[90u].z, fma(_1472, cbSceneParam._m0[90u].y, _1471 * cbSceneParam._m0[90u].x));
    float _1500 = fma(_1473, cbSceneParam._m0[91u].z, fma(_1472, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1471));
    float _1515 = _745 * 0.5;
    float _1516 = _746 * 0.5;
    float _1517 = _747 * 0.5;
    float _1518 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1521 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1524 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1558;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1531 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1135, _1139, _1142, _1145));
        float _1535 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1539 = dot(vec4(_1515, _1516, _1517, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1546 = dot(vec4(cbModelParam._m0[39u]), vec4(_1515, _1516, _1517, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1569;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1560 = dot(vec4(cbModelParam._m0[40u]), vec4(_1515, _1516, _1517, 1.0));
        _1569 = dot(vec3(isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1560) ? 0.0 : (isnan(0.0) ? _1560 : max(0.0, _1560))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1569 = 1.0;
    }
    float _1573 = (_1569 * cbModelParam._m0[1u].x) + (_1558 * (1.0 - cbModelParam._m0[1u].x));
    float _1583 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _578);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1583 : min(cbModelParam._m0[25u].z, _1583));
    float _1666;
    float _1668;
    float _1670;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1633 = fma(_806, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _798)) + cbModelParam._m0[13u].w;
        float _1637 = fma(_806, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _798)) + cbModelParam._m0[14u].w;
        float _1641 = fma(_806, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _798)) + cbModelParam._m0[15u].w;
        float _1644 = fma(_747, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745));
        float _1647 = fma(_747, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745));
        float _1650 = fma(_747, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745));
        float _1678;
        if (_1644 > 0.0)
        {
            _1678 = abs((1.0 - _1633) / _1644);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1633 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1678 = frontier_phi_17_15_ladder;
        }
        float _1901;
        if (_1647 > 0.0)
        {
            _1901 = abs((1.0 - _1637) / _1647);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1637 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1901 = frontier_phi_26_22_ladder;
        }
        float _2147;
        if (_1650 > 0.0)
        {
            _2147 = abs((1.0 - _1641) / _1650);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1641 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2147 = frontier_phi_38_33_ladder;
        }
        float _2149 = isnan(_1901) ? _1678 : (isnan(_1678) ? _1901 : min(_1678, _1901));
        float _2150 = isnan(_2147) ? _2149 : (isnan(_2149) ? _2147 : min(_2149, _2147));
        float _2154 = (_2150 * _1644) + _1633;
        float _2155 = (_2150 * _1647) + _1637;
        float _2156 = (_2150 * _1650) + _1641;
        float _2157 = _2150 * 9.9999997473787516355514526367188e-05;
        float _2159 = (-1.0) - _2157;
        float _2161 = _2157 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2156 > _2161) || ((_2156 < _2159) || ((_2155 > _2161) || ((_2155 < _2159) || ((_2154 < _2159) || (_2154 > _2161))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2280 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2156, cbModelParam._m0[9u].z, fma(_2155, cbModelParam._m0[9u].y, _2154 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2156, cbModelParam._m0[10u].z, fma(_2155, cbModelParam._m0[10u].y, _2154 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2156, cbModelParam._m0[11u].z, fma(_2155, cbModelParam._m0[11u].y, _2154 * cbModelParam._m0[11u].x))), _1584);
            frontier_phi_16_38_ladder = _2280.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2280.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2280.x * cbModelParam._m0[1u].y;
        }
        _1666 = frontier_phi_16_38_ladder_2;
        _1668 = frontier_phi_16_38_ladder_1;
        _1670 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1654 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_745, _746, _747), _1584);
        _1666 = _1654.x * cbModelParam._m0[1u].y;
        _1668 = _1654.y * cbModelParam._m0[1u].y;
        _1670 = _1654.z * cbModelParam._m0[1u].y;
    }
    float _1674 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _578);
    float _1675 = isnan(_1674) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1674 : min(cbModelParam._m0[25u].w, _1674));
    float _1766;
    float _1768;
    float _1770;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1730 = fma(_806, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _798)) + cbModelParam._m0[21u].w;
        float _1734 = fma(_806, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _798)) + cbModelParam._m0[22u].w;
        float _1738 = fma(_806, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _798)) + cbModelParam._m0[23u].w;
        float _1741 = fma(_747, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745));
        float _1744 = fma(_747, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745));
        float _1747 = fma(_747, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745));
        float _1906;
        if (_1741 > 0.0)
        {
            _1906 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1906 = frontier_phi_28_24_ladder;
        }
        float _2174;
        if (_1744 > 0.0)
        {
            _2174 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2174 = frontier_phi_40_35_ladder;
        }
        float _2379;
        if (_1747 > 0.0)
        {
            _2379 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2379 = frontier_phi_49_46_ladder;
        }
        float _2381 = isnan(_2174) ? _1906 : (isnan(_1906) ? _2174 : min(_1906, _2174));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1741) + _1730;
        float _2387 = (_2382 * _1744) + _1734;
        float _2388 = (_2382 * _1747) + _1738;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2389;
        float _2392 = _2389 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2388 > _2392) || ((_2388 < _2390) || ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 < _2390) || (_2386 > _2392))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2388, cbModelParam._m0[17u].z, fma(_2387, cbModelParam._m0[17u].y, _2386 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2388, cbModelParam._m0[18u].z, fma(_2387, cbModelParam._m0[18u].y, _2386 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2388, cbModelParam._m0[19u].z, fma(_2387, cbModelParam._m0[19u].y, _2386 * cbModelParam._m0[19u].x))), _1675);
            frontier_phi_25_49_ladder = _2587.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2587.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2587.x * cbModelParam._m0[1u].z;
        }
        _1766 = frontier_phi_25_49_ladder_2;
        _1768 = frontier_phi_25_49_ladder_1;
        _1770 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1750 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_745, _746, _747), _1675);
        _1766 = _1750.x * cbModelParam._m0[1u].z;
        _1768 = _1750.y * cbModelParam._m0[1u].z;
        _1770 = _1750.z * cbModelParam._m0[1u].z;
    }
    float _1782 = ((((1.0 - _766) * ((_753 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_766 * _753)) * _737;
    float _1783 = _1782 * ((cbModelParam._m0[1u].w * (_1766 - _1666)) + _1666);
    float _1784 = _1782 * ((cbModelParam._m0[1u].w * (_1768 - _1668)) + _1668);
    float _1785 = _1782 * ((cbModelParam._m0[1u].w * (_1770 - _1670)) + _1670);
    float _1788 = fma(_1785, cbSceneParam._m0[89u].z, fma(_1784, cbSceneParam._m0[89u].y, _1783 * cbSceneParam._m0[89u].x));
    float _1791 = fma(_1785, cbSceneParam._m0[90u].z, fma(_1784, cbSceneParam._m0[90u].y, _1783 * cbSceneParam._m0[90u].x));
    float _1794 = fma(_1785, cbSceneParam._m0[91u].z, fma(_1784, cbSceneParam._m0[91u].y, _1783 * cbSceneParam._m0[91u].x));
    vec4 _1802 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_674, _675));
    float _1804 = _1802.w;
    float _1816 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1804);
    float _1817 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1804);
    float _1818 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1804);
    uvec4 _1822 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _1824 = _1822.x * 14u;
    uint _1825 = _1824 + 13u;
    float _1832 = _737 + (-1.0);
    float _1837 = (cbLight._m0[_1825].x * _1832) + 1.0;
    float _1838 = (cbLight._m0[_1825].y * _1832) + 1.0;
    float _1839 = (cbLight._m0[_1825].z * _1832) + 1.0;
    float _1840 = (cbLight._m0[_1825].w * _1832) + 1.0;
    uint _1841 = _1824 + 5u;
    float _1847 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
    uint _1851 = _1824 + 4u;
    float _1860 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
    uint _1864 = _1824 | 1u;
    float _1875 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_575, _576, _577));
    float _1878 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_575, _576, _577));
    float _4068 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _4079 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1883 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.3183098733425140380859375;
    float _1885 = (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.3183098733425140380859375;
    float _1892 = ((cbLight._m0[_1841].x * _1847) * _1885) + (((cbLight._m0[_1851].x * _1816) * _1860) * _1883);
    float _1893 = ((_1847 * cbLight._m0[_1841].y) * _1885) + (((cbLight._m0[_1851].y * _1817) * _1860) * _1883);
    float _1894 = ((_1847 * cbLight._m0[_1841].z) * _1885) + (((cbLight._m0[_1851].z * _1818) * _1860) * _1883);
    uvec4 _1898 = floatBitsToUint(cbLight._m0[_1824 + 12u]);
    bool _1900 = _1898.x == 0u;
    float _1911;
    float _1913;
    float _1915;
    if (_1900)
    {
        _1911 = _1892;
        _1913 = _1893;
        _1915 = _1894;
    }
    else
    {
        uint _1919 = _1824 + 6u;
        float _1935 = (dot(vec3(cbLight._m0[_1824 + 2u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _1936 = _1935 * _1935;
        float _4090 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1937 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1938 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _1911 = (((cbLight._m0[_1919].x * 0.3183098733425140380859375) * _1937) * _1938) + _1892;
        _1913 = (((cbLight._m0[_1919].y * 0.3183098733425140380859375) * _1937) * _1938) + _1893;
        _1915 = (((cbLight._m0[_1919].z * 0.3183098733425140380859375) * _1937) * _1938) + _1894;
    }
    bool _1918 = _1898.y == 0u;
    float _1956;
    float _1958;
    float _1960;
    if (_1918)
    {
        _1956 = _1911;
        _1958 = _1913;
        _1960 = _1915;
    }
    else
    {
        uint _2118 = _1824 + 7u;
        float _2134 = (dot(vec3(cbLight._m0[_1824 + 3u].xyz), vec3(_575, _576, _577)) * 0.5) + 0.5;
        float _2135 = _2134 * _2134;
        float _4106 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2136 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2137 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _1956 = (((cbLight._m0[_2118].x * 0.3183098733425140380859375) * _2136) * _2137) + _1911;
        _1958 = (((cbLight._m0[_2118].y * 0.3183098733425140380859375) * _2136) * _2137) + _1913;
        _1960 = (((cbLight._m0[_2118].z * 0.3183098733425140380859375) * _2136) * _2137) + _1915;
    }
    uint _1963 = _1824 + 8u;
    float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _578) * 0.949999988079071044921875);
    float _1977 = _1976 * _1976;
    float _1978 = cbLight._m0[_1824].x + _654;
    float _1979 = cbLight._m0[_1824].y + _655;
    float _1980 = cbLight._m0[_1824].z + _656;
    float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
    float _1985 = _1984 * _1978;
    float _1986 = _1984 * _1979;
    float _1987 = _1984 * _1980;
    float _1988 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1824].xyz));
    float _4122 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _1992 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _1993 = dot(vec3(_575, _576, _577), vec3(_1985, _1986, _1987));
    float _4144 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _1997 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_1985, _1986, _1987));
    float _4155 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2001 = _1977 * _1977;
    float _2005 = ((_1996 * _1996) * (_2001 + (-1.0))) + 1.0;
    float _2016 = (exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2017 = 1.0 - _1977;
    float _2028 = (0.5 / (((_1992 * ((_1991 * _2017) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1992 * _2017) + _1977) * _1991))) * _1991;
    float _4166 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2030 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2001 / ((_2005 * _2005) * 3.141590118408203125));
    uint _2044 = _1824 + 9u;
    float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1864].w)) * _578) * 0.949999988079071044921875);
    float _2056 = _2055 * _2055;
    float _2057 = cbLight._m0[_1864].x + _654;
    float _2058 = cbLight._m0[_1864].y + _655;
    float _2059 = cbLight._m0[_1864].z + _656;
    float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
    float _2064 = _2063 * _2057;
    float _2065 = _2063 * _2058;
    float _2066 = _2063 * _2059;
    float _2067 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1864].xyz));
    float _4177 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2070 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2071 = dot(vec3(_575, _576, _577), vec3(_2064, _2065, _2066));
    float _4188 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1864].xyz), vec3(_2064, _2065, _2066));
    float _4199 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2056 * _2056;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2092 = (exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2093 = 1.0 - _2056;
    float _2103 = (0.5 / (((_1992 * ((_2070 * _2093) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_1992 * _2093) + _2056) * _2070))) * _2070;
    float _4210 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    float _2115 = (((_2092 * cbLight._m0[_2044].x) * _2105) * _1847) + ((((cbLight._m0[_1963].x * _1816) * _2016) * _2030) * _1860);
    float _2116 = (((_2092 * cbLight._m0[_2044].y) * _2105) * _1847) + ((((cbLight._m0[_1963].y * _1817) * _2016) * _2030) * _1860);
    float _2117 = (((_2092 * cbLight._m0[_2044].z) * _2105) * _1847) + ((((cbLight._m0[_1963].z * _1818) * _2016) * _2030) * _1860);
    float _2179;
    float _2181;
    float _2183;
    if (_1900)
    {
        _2179 = _2115;
        _2181 = _2116;
        _2183 = _2117;
    }
    else
    {
        uint _2185 = _1824 + 2u;
        uint _2189 = _1824 + 10u;
        float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2185].w)) * _578) * 0.949999988079071044921875);
        float _2204 = _2203 * _2203;
        float _2205 = cbLight._m0[_2185].x + _654;
        float _2206 = cbLight._m0[_2185].y + _655;
        float _2207 = cbLight._m0[_2185].z + _656;
        float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
        float _2212 = _2211 * _2205;
        float _2213 = _2211 * _2206;
        float _2214 = _2211 * _2207;
        float _2215 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2185].xyz));
        float _4221 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2218 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _2219 = dot(vec3(_575, _576, _577), vec3(_2212, _2213, _2214));
        float _4232 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2222 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _2223 = dot(vec3(cbLight._m0[_2185].xyz), vec3(_2212, _2213, _2214));
        float _4243 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2227 = _2204 * _2204;
        float _2231 = ((_2222 * _2222) * (_2227 + (-1.0))) + 1.0;
        float _2240 = (exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2241 = 1.0 - _2204;
        float _2251 = (0.5 / (((_1992 * ((_2218 * _2241) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_1992 * _2241) + _2204) * _2218))) * _2218;
        float _4254 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2253 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2227 / ((_2231 * _2231) * 3.141590118408203125));
        float _2254 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
        _2179 = (((_2240 * cbLight._m0[_2189].x) * _2253) * _2254) + _2115;
        _2181 = (((_2240 * cbLight._m0[_2189].y) * _2253) * _2254) + _2116;
        _2183 = (((_2240 * cbLight._m0[_2189].z) * _2253) * _2254) + _2117;
    }
    float _2289;
    float _2291;
    float _2293;
    if (_1918)
    {
        _2289 = _2179;
        _2291 = _2181;
        _2293 = _2183;
    }
    else
    {
        uint _2300 = _1824 + 3u;
        uint _2304 = _1824 + 11u;
        float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _578) * 0.949999988079071044921875);
        float _2319 = _2318 * _2318;
        float _2320 = cbLight._m0[_2300].x + _654;
        float _2321 = cbLight._m0[_2300].y + _655;
        float _2322 = cbLight._m0[_2300].z + _656;
        float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
        float _2327 = _2326 * _2320;
        float _2328 = _2326 * _2321;
        float _2329 = _2326 * _2322;
        float _2330 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_2300].xyz));
        float _4270 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _2334 = dot(vec3(_575, _576, _577), vec3(_2327, _2328, _2329));
        float _4281 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2338 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2327, _2328, _2329));
        float _4292 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2342 = _2319 * _2319;
        float _2346 = ((_2337 * _2337) * (_2342 + (-1.0))) + 1.0;
        float _2355 = (exp2(log2(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2356 = 1.0 - _2319;
        float _2366 = (0.5 / (((_1992 * ((_2333 * _2356) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_1992 * _2356) + _2319) * _2333))) * _2333;
        float _4303 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2368 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2342 / ((_2346 * _2346) * 3.141590118408203125));
        float _2369 = isnan(1.0) ? _1840 : (isnan(_1840) ? 1.0 : min(_1840, 1.0));
        _2289 = (((_2355 * cbLight._m0[_2304].x) * _2368) * _2369) + _2179;
        _2291 = (((_2355 * cbLight._m0[_2304].y) * _2368) * _2369) + _2181;
        _2293 = (((_2355 * cbLight._m0[_2304].z) * _2368) * _2369) + _2183;
    }
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    if (_1822.y == 0u)
    {
        float _2444 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2445 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2444;
        float _2446 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2444;
        float _2447 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2444;
        uvec4 _2459 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2460 = _2459.x;
        uint _2471 = uint((float(_2459.y) * floor(float(uint(cbSceneParam._m0[85u].y * _675) / _2460))) + floor(float(uint(cbSceneParam._m0[85u].x * _674) / _2460)));
        float _2481 = (log2(_2447 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2482 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        uint _2485 = uint(isnan(14.0) ? _2482 : (isnan(_2482) ? 14.0 : min(_2482, 14.0)));
        uvec4 _2490 = texelFetch(g_lightClusterGridBuffer, int(((_2485 << 2u) + (_2471 << 6u)) >> 2u));
        uint _2491 = _2490.x;
        uint _2492 = _2459.z;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        if (((((1u << ((_2492 >> 4u) & 15u)) + 4294967295u) & _2491) == 0u) || ((_2492 & 240u) == 0u))
        {
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
        }
        else
        {
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            uint _2751 = 0u;
            uint _2760;
            bool _2761;
            for (;;)
            {
                _2760 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2751 << 2u)) >> 2u)).x;
                _2761 = _2760 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2761)
                {
                    frontier_phi_66_pred = _2745;
                    frontier_phi_66_pred_1 = _2750;
                    frontier_phi_66_pred_2 = _2749;
                    frontier_phi_66_pred_3 = _2748;
                    frontier_phi_66_pred_4 = _2747;
                    frontier_phi_66_pred_5 = _2746;
                }
                else
                {
                    float _2890;
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    uint _2896;
                    _2890 = _2745;
                    _2891 = _2746;
                    _2892 = _2747;
                    _2893 = _2748;
                    _2894 = _2749;
                    _2895 = _2750;
                    _2896 = _2760;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    for (;;)
                    {
                        uint _2900 = uint(findLSB(_2896)) + (_2751 << 5u);
                        uint _2897 = (_2896 + 4294967295u) & _2896;
                        uint _2902 = _2900 * 48u;
                        vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2902)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2902 + 3u)).x));
                        uint _2922 = (_2900 * 48u) + 4u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2922)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2922 + 3u)).x));
                        uint _2941 = (_2900 * 48u) + 8u;
                        vec3 _2952 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x));
                        float _2956 = _2916.x - _2445;
                        float _2957 = _2916.y - _2446;
                        float _2958 = _2916.z - _2447;
                        float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                        float _2962 = inversesqrt(_2959);
                        float _2963 = _2962 * _2956;
                        float _2964 = _2962 * _2957;
                        float _2965 = _2962 * _2958;
                        float _2966 = dot(vec3(_693, _696, _699), vec3(_2963, _2964, _2965));
                        float _2971 = 1.0 - (_2959 * _2916.w);
                        float _4329 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                        float _2972 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _2973 = sqrt(_2959) * _2935.w;
                        float _2976 = 1.39999997615814208984375 / (_2973 + 1.39999997615814208984375);
                        float _2977 = _2976 * _2976;
                        float _2980 = ((1.0 - _2977) * _2966) + _2977;
                        float _2983 = _2973 * _2973;
                        float _2987 = ((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2972) / ((_2983 * 0.699999988079071044921875) + 1.0);
                        float _2991 = (-0.0) - _2445;
                        float _2992 = (-0.0) - _2446;
                        float _2993 = (-0.0) - _2447;
                        float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3008 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                        float _3009 = 1.0 - _753;
                        float _3016 = sqrt(1.0 - ((1.0 - (_3009 * _3009)) * (1.0 - (_3008 * _3008))));
                        float _3017 = _3016 * _3016;
                        float _3018 = _3017 * _3017;
                        float _3019 = _2998 + _2963;
                        float _3020 = _2999 + _2964;
                        float _3021 = _3000 + _2965;
                        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
                        float _3029 = dot(vec3(_693, _696, _699), vec3(_2998, _2999, _3000));
                        float _4345 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
                        float _3033 = dot(vec3(_693, _696, _699), vec3(_3025 * _3019, _3025 * _3020, _3025 * _3021));
                        float _4356 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                        float _3036 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3040 = ((_3036 * _3036) * (_3018 + (-1.0))) + 1.0;
                        float _3041 = _2976 * _3017;
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _2966) + _3042;
                        float _4367 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                        float _3046 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                        float _3047 = 1.0 - _3017;
                        float _3057 = (0.5 / (((_3046 * ((_3032 * _3047) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_3046 * _3047) + _3017) * _3032))) * _3046;
                        float _4378 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                        float _3068 = (((_3018 * 3.1415927410125732421875) * (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) / ((_3040 * _3040) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125))) * _2972;
                        _2820 = (_2987 * _2935.x) + _2893;
                        _2821 = (_2987 * _2935.y) + _2894;
                        _2822 = (_2987 * _2935.z) + _2895;
                        _2817 = (_3068 * _2952.x) + _2890;
                        _2818 = (_3068 * _2952.y) + _2891;
                        _2819 = (_3068 * _2952.z) + _2892;
                        if (_2897 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2890 = _2817;
                            _2891 = _2818;
                            _2892 = _2819;
                            _2893 = _2820;
                            _2894 = _2821;
                            _2895 = _2822;
                            _2896 = _2897;
                        }
                    }
                    frontier_phi_66_pred = _2817;
                    frontier_phi_66_pred_1 = _2822;
                    frontier_phi_66_pred_2 = _2821;
                    frontier_phi_66_pred_3 = _2820;
                    frontier_phi_66_pred_4 = _2819;
                    frontier_phi_66_pred_5 = _2818;
                }
                _2593 = frontier_phi_66_pred;
                _2603 = frontier_phi_66_pred_1;
                _2601 = frontier_phi_66_pred_2;
                _2599 = frontier_phi_66_pred_3;
                _2597 = frontier_phi_66_pred_4;
                _2595 = frontier_phi_66_pred_5;
                uint _2752 = _2751 + 1u;
                if (_2752 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2745 = _2593;
                    _2746 = _2595;
                    _2747 = _2597;
                    _2748 = _2599;
                    _2749 = _2601;
                    _2750 = _2603;
                    _2751 = _2752;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
        }
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.z;
        uint _2609 = (_2607 >> 8u) & 15u;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((4294967295u << _2609) & _2491) == 0u)
        {
            _2713 = _2592;
            _2715 = _2594;
            _2717 = _2596;
            _2719 = _2598;
            _2721 = _2600;
            _2723 = _2602;
        }
        else
        {
            float _2738 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
            float _2739 = _2738 * _2445;
            float _2740 = _2738 * _2446;
            float _2741 = _2738 * _2447;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2609 < ((_2607 >> 12u) & 15u))
            {
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2873 = _2592;
                float _2874 = _2594;
                float _2875 = _2596;
                float _2876 = _2598;
                float _2877 = _2600;
                float _2878 = _2602;
                uint _2879 = _2609;
                uint _2888;
                bool _2889;
                for (;;)
                {
                    _2888 = texelFetch(g_lightClassification, int((((_2485 << 5u) + (_2471 << 9u)) + (_2879 << 2u)) >> 2u)).x;
                    _2889 = _2888 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2889)
                    {
                        frontier_phi_77_pred = _2878;
                        frontier_phi_77_pred_1 = _2877;
                        frontier_phi_77_pred_2 = _2876;
                        frontier_phi_77_pred_3 = _2875;
                        frontier_phi_77_pred_4 = _2874;
                        frontier_phi_77_pred_5 = _2873;
                    }
                    else
                    {
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3095 = _2873;
                        float _3096 = _2874;
                        float _3097 = _2875;
                        float _3098 = _2876;
                        float _3099 = _2877;
                        float _3100 = _2878;
                        uint _3101 = _2888;
                        uint _3102;
                        vec4 _3127;
                        float _3128;
                        vec4 _3143;
                        vec3 _3155;
                        vec4 _3170;
                        vec4 _3186;
                        float _3232;
                        bool _3233;
                        for (;;)
                        {
                            uint _3112 = ((_2879 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3101));
                            _3102 = (_3101 + 4294967295u) & _3101;
                            uint _3114 = _3112 * 40u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3128 = _3127.w;
                            uint _3130 = (_3112 * 40u) + 4u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3112 * 40u) + 8u;
                            _3155 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x));
                            uint _3157 = (_3112 * 40u) + 16u;
                            _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            uint _3173 = (_3112 * 40u) + 20u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3188 = (_3112 * 40u) + 24u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3207 = (_3112 * 40u) + 28u;
                            vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            _3232 = fma(_2447, _3220.z, fma(_2446, _3220.y, _3220.x * _2445)) + _3220.w;
                            _3233 = !((fma(_2447, _3201.z, fma(_2446, _3201.y, _3201.x * _2445)) + _3201.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3233)
                            {
                                float _3260 = _3127.x - _2445;
                                float _3261 = _3127.y - _2446;
                                float _3262 = _3127.z - _2447;
                                float _3263 = dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262));
                                float _3266 = inversesqrt(_3263);
                                float _3267 = _3266 * _3260;
                                float _3268 = _3266 * _3261;
                                float _3269 = _3266 * _3262;
                                float _3273 = 1.0 - (_3263 / (_3128 * _3128));
                                float _4389 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3278 = sqrt(_3263) * _3143.w;
                                float _3280 = 1.39999997615814208984375 / (_3278 + 1.39999997615814208984375);
                                float _3281 = _3280 * _3280;
                                float _3284 = ((1.0 - _3281) * dot(vec3(_3267, _3268, _3269), vec3(_693, _696, _699))) + _3281;
                                float _3287 = _3278 * _3278;
                                float _3291 = (fma(_2447, _3170.z, fma(_2446, _3170.y, _3170.x * _2445)) + _3170.w) / _3232;
                                float _3292 = (fma(_2447, _3186.z, fma(_2446, _3186.y, _3186.x * _2445)) + _3186.w) / _3232;
                                float _3296 = 1.0 - dot(vec2(_3291, _3292), vec2(_3291, _3292));
                                float _4405 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
                                float _3298 = _3297 * (((isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0))) * _3274) / ((_3287 * 0.699999988079071044921875) + 1.0));
                                float _3310 = exp2(log2(1.0 / ((_3287 * 3.5) + 5.0)) * 0.25);
                                float _3311 = 1.0 - _753;
                                float _3318 = sqrt(1.0 - ((1.0 - (_3311 * _3311)) * (1.0 - (_3310 * _3310))));
                                float _3319 = _3318 * _3318;
                                float _3320 = _3319 * _3319;
                                float _3321 = _3267 - _2739;
                                float _3322 = _3268 - _2740;
                                float _3323 = _3269 - _2741;
                                float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                                float _3331 = dot(vec3(_693, _696, _699), vec3((-0.0) - _2739, (-0.0) - _2740, (-0.0) - _2741));
                                float _4416 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3334 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3335 = dot(vec3(_693, _696, _699), vec3(_3327 * _3321, _3327 * _3322, _3327 * _3323));
                                float _4427 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3338 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                                float _3342 = ((_3338 * _3338) * (_3320 + (-1.0))) + 1.0;
                                float _3343 = _3280 * _3319;
                                float _3344 = _3343 * _3343;
                                float _3350 = ((1.0 - _3344) * dot(vec3(_693, _696, _699), vec3(_3267, _3268, _3269))) + _3344;
                                float _4438 = isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0));
                                float _3351 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                                float _3352 = 1.0 - _3319;
                                float _3362 = (0.5 / (((_3351 * ((_3334 * _3352) + _3319)) + 9.9999999392252902907785028219223e-09) + (((_3351 * _3352) + _3319) * _3334))) * _3351;
                                float _4449 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3372 = (_3297 * _3274) * (((_3320 * 3.1415927410125732421875) * (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) / ((_3342 * _3342) * ((_3287 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3298 * _3143.y;
                                frontier_phi_83_pred_1 = _3298 * _3143.x;
                                frontier_phi_83_pred_2 = _3372 * _3155.z;
                                frontier_phi_83_pred_3 = _3372 * _3155.y;
                                frontier_phi_83_pred_4 = _3372 * _3155.x;
                                frontier_phi_83_pred_5 = _3298 * _3143.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3380 = frontier_phi_83_pred;
                            _3379 = frontier_phi_83_pred_1;
                            _3378 = frontier_phi_83_pred_2;
                            _3377 = frontier_phi_83_pred_3;
                            _3376 = frontier_phi_83_pred_4;
                            _3381 = frontier_phi_83_pred_5;
                            _3085 = _3379 + _3098;
                            _3086 = _3380 + _3099;
                            _3087 = _3381 + _3100;
                            _3082 = _3376 + _3095;
                            _3083 = _3377 + _3096;
                            _3084 = _3378 + _3097;
                            if (_3102 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3102;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3087;
                        frontier_phi_77_pred_1 = _3086;
                        frontier_phi_77_pred_2 = _3085;
                        frontier_phi_77_pred_3 = _3084;
                        frontier_phi_77_pred_4 = _3083;
                        frontier_phi_77_pred_5 = _3082;
                    }
                    _2724 = frontier_phi_77_pred;
                    _2722 = frontier_phi_77_pred_1;
                    _2720 = frontier_phi_77_pred_2;
                    _2718 = frontier_phi_77_pred_3;
                    _2716 = frontier_phi_77_pred_4;
                    _2714 = frontier_phi_77_pred_5;
                    uint _2880 = _2879 + 1u;
                    if (_2880 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2873 = _2714;
                        _2874 = _2716;
                        _2875 = _2718;
                        _2876 = _2720;
                        _2877 = _2722;
                        _2878 = _2724;
                        _2879 = _2880;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2718;
                frontier_phi_58_59_ladder_1 = _2724;
                frontier_phi_58_59_ladder_2 = _2722;
                frontier_phi_58_59_ladder_3 = _2720;
                frontier_phi_58_59_ladder_4 = _2716;
                frontier_phi_58_59_ladder_5 = _2714;
            }
            else
            {
                frontier_phi_58_59_ladder = _2596;
                frontier_phi_58_59_ladder_1 = _2602;
                frontier_phi_58_59_ladder_2 = _2600;
                frontier_phi_58_59_ladder_3 = _2598;
                frontier_phi_58_59_ladder_4 = _2594;
                frontier_phi_58_59_ladder_5 = _2592;
            }
            _2713 = frontier_phi_58_59_ladder_5;
            _2715 = frontier_phi_58_59_ladder_4;
            _2717 = frontier_phi_58_59_ladder;
            _2719 = frontier_phi_58_59_ladder_3;
            _2721 = frontier_phi_58_59_ladder_2;
            _2723 = frontier_phi_58_59_ladder_1;
        }
        float _2728 = isnan(1.0) ? _737 : (isnan(_737) ? 1.0 : min(_737, 1.0));
        _2504 = (_2728 * _2719) + _1956;
        _2506 = (_2728 * _2721) + _1958;
        _2508 = (_2728 * _2723) + _1960;
        _2510 = ((_2713 * 0.039999999105930328369140625) * _2728) + _2289;
        _2512 = ((_2715 * 0.039999999105930328369140625) * _2728) + _2291;
        _2514 = ((_2717 * 0.039999999105930328369140625) * _2728) + _2293;
    }
    else
    {
        _2504 = _1956;
        _2506 = _1958;
        _2508 = _1960;
        _2510 = _2289;
        _2512 = _2291;
        _2514 = _2293;
    }
    float _4465 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4476 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4487 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _2531 = ((isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2504 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _737))) + ((_2510 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1573)) * cbPerFrame._m0[3u].x);
    float _2532 = ((isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2506 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _737))) + ((_2512 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1573)) * cbPerFrame._m0[3u].x);
    float _2533 = ((isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2508 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _737))) + ((_2514 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1573)) * cbPerFrame._m0[3u].x);
    uint _2534 = _243 + 6u;
    float _2542 = _674 / cbSceneParam._m0[86u].x;
    float _2543 = _675 / cbSceneParam._m0[86u].y;
    vec4 _2557 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2542, _2543, (log2((isnan(cbSceneParam._m0[77u].w) ? _596 : (isnan(_596) ? cbSceneParam._m0[77u].w : min(_596, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2559 = _2557.x;
    float _2560 = _2557.y;
    float _2561 = _2557.z;
    float _2562 = _2557.w;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_596 > cbSceneParam._m0[78u].w)
    {
        float _2617 = isnan(_596) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _596 : min(cbSceneParam._m0[80u].w, _596));
        float _2618 = _2617 / _596;
        float _2629 = _2618 * _647;
        float _2630 = _648 * _2618;
        float _2631 = (-0.0) - _2630;
        float _2633 = _2618 * _649;
        float _2635 = (cbSceneParam._m0[77u].w * _2631) / _2617;
        float _2636 = _2635 + cbSceneParam._m0[79u].w;
        float _2637 = cbSceneParam._m0[79u].w - _2630;
        float _2643 = sqrt(((_2629 * _2629) + (_2630 * _2630)) + (_2633 * _2633));
        float _2646 = (1.0 - (cbSceneParam._m0[77u].w / _2617)) * _2643;
        float _2651 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2653 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2830;
        if (abs((_2631 - _2635) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2830 = ((((_2636 > 0.0) ? exp2(_2651 * _2636) : (2.0 - exp2(_2653 * _2636))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2646;
        }
        else
        {
            float _2774 = 1.0 / cbSceneParam._m0[80u].x;
            float _2775 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : max(_2636, _2637));
            float _2776 = isnan(_2637) ? _2636 : (isnan(_2636) ? _2637 : min(_2636, _2637));
            float _2785 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : min(_2775, 0.0));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            _2830 = ((abs(_2643 / _2631) * cbSceneParam._m0[80u].y) * ((((_2785 - _2786) * 2.0) - ((exp2(_2651 * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0)))) - exp2(_2651 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))))) * _2774)) - ((exp2(_2653 * _2785) - exp2(_2653 * _2786)) * _2774))) + (_2646 * cbSceneParam._m0[80u].z);
        }
        vec4 _2832 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2542, _2543, 1.0), 0.0);
        float _2841 = exp2((_2830 * (-1.44269502162933349609375)) * (1.0 - _2832.w));
        float _2842 = log2(_2841);
        float _2858 = log2(_2562);
        _2655 = (exp2(_2858 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].x)) * _2832.x) / cbSceneParam._m0[78u].x)) + _2559;
        _2657 = (exp2(_2858 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].y)) * _2832.y) / cbSceneParam._m0[78u].y)) + _2560;
        _2659 = (exp2(_2858 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2842 * cbSceneParam._m0[78u].z)) * _2832.z) / cbSceneParam._m0[78u].z)) + _2561;
        _2661 = _2841 * _2562;
    }
    else
    {
        _2655 = _2559;
        _2657 = _2560;
        _2659 = _2561;
        _2661 = _2562;
    }
    bool _2868;
    vec4 _2671;
    vec4 _2693;
    float _2695;
    float _2699;
    float _2700;
    float _2701;
    float _2702;
    bool _2712;
    for (;;)
    {
        _2671 = cbMatDynParam._m0[0u];
        float _2673 = roundEven(_2671.y);
        bool _2674 = _2673 == 3.0;
        float _2675 = log2(_2661);
        float _2682 = exp2(_2675 * cbSceneParam._m0[78u].x) * _2531;
        float _2683 = exp2(_2675 * cbSceneParam._m0[78u].y) * _2532;
        float _2684 = exp2(_2675 * cbSceneParam._m0[78u].z) * _2533;
        float _2691 = _663 + (-0.5);
        _2693 = cbMtdParam._m0[1u];
        _2695 = _2693.y * _2691;
        float _2698 = (_2673 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2699 = _2698 * (_2674 ? _2682 : (_2682 + (cbSceneParam._m0[72u].w * _2655)));
        _2700 = _2698 * (_2674 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2657)));
        _2701 = _2698 * (_2674 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2659)));
        _2702 = _2691 * 0.999000012874603271484375;
        _2712 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2712)
        {
            if ((cbInstanceData._m0[_243 + 7u].x + _2702) < 0.5)
            {
                _2868 = true;
                break;
            }
        }
        uint _2809 = _712 + uint(_2671.w);
        if ((cbInstanceData._m0[_2809].w < 1.0) && ((cbInstanceData._m0[_2809].w + _2702) < 0.5))
        {
            _2868 = true;
            break;
        }
        if ((_2695 + 1.0) < _2693.x)
        {
            _2868 = true;
            break;
        }
        _2868 = false;
        break;
    }
    float _3073;
    if (_2868)
    {
        discard_state = true;
        _3073 = 0.0;
    }
    else
    {
        _3073 = cbInstanceData._m0[_2534].w;
    }
    SV_Target.x = _2699;
    SV_Target.y = _2700;
    SV_Target.z = _2701;
    SV_Target.w = _3073;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2534].w;
    discard_exit();
}


