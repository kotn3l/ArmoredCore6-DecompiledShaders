#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1155;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _224 = _223 * _215;
    float _225 = _223 * _216;
    float _226 = _223 * _217;
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = _230 * NORMAL.x;
    float _232 = _230 * NORMAL.y;
    float _233 = _230 * NORMAL.z;
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = _237 * TANGENT.x;
    float _239 = _237 * TANGENT.y;
    float _240 = _237 * TANGENT.z;
    uint _243 = uint(roundEven(NORMAL.w)) * 13u;
    uint _248 = _243 + 1u;
    uint _252 = _243 + 2u;
    float _261 = sqrt(((cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x) + (cbInstanceData._m0[_243].x * cbInstanceData._m0[_243].x)) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x));
    float _262 = _261 * TEXCOORD.z;
    float _263 = _261 * TEXCOORD.w;
    vec4 _282 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _282.x * cbMtdParam._m0[9u].x;
    float _289 = _282.y * cbMtdParam._m0[9u].y;
    float _290 = _282.z * cbMtdParam._m0[9u].z;
    vec4 _309 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _262) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _263) + cbTextureTilingScale._m0[14u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _262) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _263) + cbTextureTilingScale._m0[20u].w));
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _359 = _355.z;
    float _363 = (_355.x * 2.0) + (-1.0);
    float _364 = (_355.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_363, _364), vec2(_363, _364));
    float _3744 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _371 = sqrt(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))));
    float _376 = _363 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_329.x * 2.0) + (-1.0)));
    float _377 = _364 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_329.y * 2.0) + (-1.0)));
    float _380 = fma(_371, _231, fma(_377, _238, _376 * _224));
    float _383 = fma(_371, _232, fma(_377, _239, _376 * _225));
    float _386 = fma(_371, _233, fma(_377, _240, _376 * _226));
    float _390 = inversesqrt(dot(vec3(_380, _383, _386), vec3(_380, _383, _386)));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _262) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _428 = _426.x;
    float _429 = 1.0 - _428;
    float _438 = (cbMtdParam._m0[19u].x + dot(vec4(_390 * _380, _390 * _383, _390 * _386, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_428 - _429) * cbMtdParam._m0[24u].z) + _429) * cbMtdParam._m0[21u].z);
    float _3755 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _441 = (-0.0) - cbMtdParam._m0[24u].y;
    float _443 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _443 : (isnan(_443) ? 1.0 : min(_443, 1.0));
    float _451 = _439 - ((_439 * TEXCOORD_8.x) * _444);
    float _452 = _439 - ((_439 * TEXCOORD_8.y) * _444);
    float _453 = _439 - ((_439 * TEXCOORD_8.z) * _444);
    float _460 = (_451 * ((_309.x * cbMtdParam._m0[18u].x) - _288)) + _288;
    float _461 = (_452 * ((_309.y * cbMtdParam._m0[18u].y) - _289)) + _289;
    float _462 = (_453 * ((_309.z * cbMtdParam._m0[18u].z) - _290)) + _290;
    vec4 _474 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _262) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _263) + cbTextureTilingScale._m0[19u].w));
    float _476 = _474.x;
    float _477 = 1.0 - _476;
    float _507 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_476 - _477) * cbMtdParam._m0[24u].w) + _477) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3776 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _516 = ((((cbMtdParam._m0[10u].x - _460) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _508) + _460;
    float _517 = ((((cbMtdParam._m0[10u].y - _461) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _508) + _461;
    float _518 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _462)) * _508) + _462;
    float _523 = (((_329.z - _359) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _359;
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _262) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _263) + cbTextureTilingScale._m0[15u].w));
    float _544 = (_537.x * 2.0) + (-1.0);
    float _545 = (_537.y * 2.0) + (-1.0);
    float _546 = dot(vec2(_544, _545), vec2(_544, _545));
    float _3787 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _554 = ((_537.z - _523) * _451) + _523;
    float _557 = ((cbMtdParam._m0[23u].y - _554) * _508) + _554;
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _262) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _263) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _582 = (_576.x * 2.0) + (-1.0);
    float _583 = (_576.y * 2.0) + (-1.0);
    float _584 = dot(vec2(_582, _583), vec2(_582, _583));
    float _3798 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _599 = ((sqrt(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) - _371) * _453) + _371;
    float _602 = (((_544 - _376) * _451) + _376) + (cbMtdParam._m0[21u].x * _376);
    float _603 = (((_545 - _377) * _452) + _377) + (cbMtdParam._m0[21u].x * _377);
    float _614 = (((_582 - _602) + (_602 * cbMtdParam._m0[22u].z)) * _508) + _602;
    float _615 = (((_583 - _603) + (_603 * cbMtdParam._m0[22u].z)) * _508) + _603;
    float _616 = (_508 * (sqrt(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) - _599)) + _599;
    float _618 = cbMtdParam._m0[22u].x + _355.w;
    float _621 = fma(_616, _231, fma(_615, _238, _614 * _224));
    float _624 = fma(_616, _232, fma(_615, _239, _614 * _225));
    float _627 = fma(_616, _233, fma(_615, _240, _614 * _226));
    float _631 = inversesqrt(dot(vec3(_621, _624, _627), vec3(_621, _624, _627)));
    float _632 = _631 * _621;
    float _633 = _631 * _624;
    float _634 = _631 * _627;
    float _3809 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _635 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3831 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3842 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3853 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _703 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _693);
    float _704 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _693);
    float _705 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _693);
    float _709 = inversesqrt(dot(vec3(_703, _704, _705), vec3(_703, _704, _705)));
    float _710 = _703 * _709;
    float _711 = _704 * _709;
    float _712 = _705 * _709;
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _740 = fma(_634, cbSceneParam._m0[5u].z, fma(_633, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _632));
    float _743 = fma(_634, cbSceneParam._m0[6u].z, fma(_633, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _632));
    float _746 = fma(_634, cbSceneParam._m0[7u].z, fma(_633, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _632));
    uint _760 = (_243 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _766 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_760].x;
    float _767 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_760].y;
    float _768 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_760].z;
    float _3864 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _3875 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _3886 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    vec4 _780 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _784 = ((isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * TEXCOORD_5.w) * _780.x;
    float _785 = dot(vec3(_632, _633, _634), vec3(_710, _711, _712));
    float _788 = _785 * 2.0;
    float _792 = (_788 * _632) - _710;
    float _793 = (_788 * _633) - _711;
    float _794 = (_788 * _634) - _712;
    float _798 = abs(dot(vec3(_710, _711, _712), vec3(_632, _633, _634)));
    float _3897 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _800 = sqrt(_635);
    float _813 = exp2((_800 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_800 * 3.0));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1154;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _879 = fma(_853, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _845));
        float _883 = fma(_853, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _845));
        float _887 = fma(_853, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _845));
        float _912 = _845 + _632;
        float _913 = _849 + _633;
        float _914 = _853 + _634;
        float _924 = fma(_914, cbModelParam._m0[26u].z, fma(_913, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _912)) - _879;
        float _925 = fma(_914, cbModelParam._m0[27u].z, fma(_913, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _912)) - _883;
        float _926 = fma(_914, cbModelParam._m0[28u].z, fma(_913, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _912)) - _887;
        float _930 = inversesqrt(dot(vec3(_924, _925, _926), vec3(_924, _925, _926)));
        float _943 = ((_930 * _924) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_879 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_930 * _925) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_883 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _945 = ((_930 * _926) / cbModelParam._m0[34u].z) + ((((((_887 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_943, _944, _945), 0.0);
        float _982 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_948.x + (-0.5));
        float _984 = _982 * (_948.y + (-0.5));
        float _985 = _982 * (_948.z + (-0.5));
        float _992 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_955.x + (-0.5));
        float _994 = _992 * (_955.y + (-0.5));
        float _995 = _992 * (_955.z + (-0.5));
        float _1002 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_962.x + (-0.5));
        float _1004 = _1002 * (_962.y + (-0.5));
        float _1005 = _1002 * (_962.z + (-0.5));
        float _1012 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_969.x + (-0.5));
        float _1014 = _1012 * (_969.y + (-0.5));
        float _1015 = _1012 * (_969.z + (-0.5));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = _983 * 0.5;
        float _1020 = _993 * 0.5;
        float _1021 = _1003 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1036 = (dot(vec3(_632, _633, _634), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1046 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3945 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1048 + 1.0))) + _1053) * _1016;
        float _1063 = _984 * 0.5;
        float _1064 = _994 * 0.5;
        float _1065 = _1004 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_632, _633, _634), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3978 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1090 + 1.0))) + _1095) * _1017;
        float _1105 = _985 * 0.5;
        float _1106 = _995 * 0.5;
        float _1107 = _1005 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_632, _633, _634), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3989 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _4000 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _4011 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1132 + 1.0))) + _1137) * _1018;
        _1154 = _985;
        _1156 = _984;
        _1157 = _983;
        _1158 = _995;
        _1159 = _994;
        _1160 = _993;
        _1161 = _1005;
        _1162 = _1004;
        _1163 = _1003;
        _1164 = _1018;
        _1165 = _1017;
        _1166 = _1016;
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _1155;
        _1156 = _1155;
        _1157 = _1155;
        _1158 = _1155;
        _1159 = _1155;
        _1160 = _1155;
        _1161 = _1155;
        _1162 = _1155;
        _1163 = _1155;
        _1164 = _1155;
        _1165 = _1155;
        _1166 = _1155;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1194 = fma(_853, cbModelParam._m0[30u].z, fma(_849, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845));
        float _1198 = fma(_853, cbModelParam._m0[31u].z, fma(_849, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845));
        float _1202 = fma(_853, cbModelParam._m0[32u].z, fma(_849, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845));
        float _1225 = _845 + _632;
        float _1226 = _849 + _633;
        float _1227 = _853 + _634;
        float _1237 = fma(_1227, cbModelParam._m0[30u].z, fma(_1226, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1225)) - _1194;
        float _1238 = fma(_1227, cbModelParam._m0[31u].z, fma(_1226, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1225)) - _1198;
        float _1239 = fma(_1227, cbModelParam._m0[32u].z, fma(_1226, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1225)) - _1202;
        float _1243 = inversesqrt(dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239)));
        float _1256 = ((_1243 * _1237) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1194 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1243 * _1238) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1198 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1243 * _1239) / cbModelParam._m0[35u].z) + ((((((_1202 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1260 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1256, _1257, _1258), 0.0);
        float _1293 = exp2((_1260.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1260.x + (-0.5));
        float _1295 = _1293 * (_1260.y + (-0.5));
        float _1296 = _1293 * (_1260.z + (-0.5));
        float _1303 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1267.x + (-0.5));
        float _1305 = _1303 * (_1267.y + (-0.5));
        float _1306 = _1303 * (_1267.z + (-0.5));
        float _1313 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1274.x + (-0.5));
        float _1315 = _1313 * (_1274.y + (-0.5));
        float _1316 = _1313 * (_1274.z + (-0.5));
        float _1323 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1281.x + (-0.5));
        float _1325 = _1323 * (_1281.y + (-0.5));
        float _1326 = _1323 * (_1281.z + (-0.5));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1330 = _1294 * 0.5;
        float _1331 = _1304 * 0.5;
        float _1332 = _1314 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_632, _633, _634), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _4074 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1357 + 1.0))) + _1362) * _1327;
        float _1372 = _1295 * 0.5;
        float _1373 = _1305 * 0.5;
        float _1374 = _1315 * 0.5;
        float _1375 = dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374));
        float _1380 = (_1375 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1375);
        float _1388 = (dot(vec3(_632, _633, _634), vec3(_1380 * _1372, _1380 * _1373, _1380 * _1374)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1397 = sqrt(((_1373 * _1373) + (_1372 * _1372)) + (_1374 * _1374)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1399 = _1398 * 2.0;
        float _1403 = (1.0 - _1398) / (_1398 + 1.0);
        float _4107 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1413 = ((((1.0 - _1404) * (_1399 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1399 + 1.0))) + _1404) * _1328;
        float _1414 = _1296 * 0.5;
        float _1415 = _1306 * 0.5;
        float _1416 = _1316 * 0.5;
        float _1417 = dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416));
        float _1422 = (_1417 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1417);
        float _1430 = (dot(vec3(_632, _633, _634), vec3(_1422 * _1414, _1422 * _1415, _1422 * _1416)) + 1.0) * 0.5;
        float _4118 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1439 = sqrt(((_1415 * _1415) + (_1414 * _1414)) + (_1416 * _1416)) / (_1329 + 9.9999997473787516355514526367188e-06);
        float _4129 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4140 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_1441 + 1.0))) + _1446) * _1329;
        _1463 = _1296;
        _1464 = _1295;
        _1465 = _1294;
        _1466 = _1306;
        _1467 = _1305;
        _1468 = _1304;
        _1469 = _1316;
        _1470 = _1315;
        _1471 = _1314;
        _1472 = _1329;
        _1473 = _1328;
        _1474 = _1327;
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)));
        _1477 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
    }
    else
    {
        _1463 = _1155;
        _1464 = _1155;
        _1465 = _1155;
        _1466 = _1155;
        _1467 = _1155;
        _1468 = _1155;
        _1469 = _1155;
        _1470 = _1155;
        _1471 = _1155;
        _1472 = _1155;
        _1473 = _1155;
        _1474 = _1155;
        _1475 = 0.0;
        _1476 = 0.0;
        _1477 = 0.0;
    }
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1167)) + _1167;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1168)) + _1168;
    float _1489 = (cbModelParam._m0[1u].x * (_1477 - _1169)) + _1169;
    float _1510 = fma(_1489, cbSceneParam._m0[89u].z, fma(_1488, cbSceneParam._m0[89u].y, _1487 * cbSceneParam._m0[89u].x));
    float _1513 = fma(_1489, cbSceneParam._m0[90u].z, fma(_1488, cbSceneParam._m0[90u].y, _1487 * cbSceneParam._m0[90u].x));
    float _1516 = fma(_1489, cbSceneParam._m0[91u].z, fma(_1488, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1487));
    float _1531 = _792 * 0.5;
    float _1532 = _793 * 0.5;
    float _1533 = _794 * 0.5;
    float _1534 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1465, _1468, _1471, _1474));
    float _1537 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1540 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1574;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1547 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1154, _1158, _1161, _1164));
        float _1551 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1555 = dot(vec4(_1531, _1532, _1533, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1562 = dot(vec4(cbModelParam._m0[39u]), vec4(_1531, _1532, _1533, 1.0));
        _1574 = dot(vec3(isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1562) ? 0.0 : (isnan(0.0) ? _1562 : max(0.0, _1562))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1574 = 1.0;
    }
    float _1585;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1576 = dot(vec4(cbModelParam._m0[40u]), vec4(_1531, _1532, _1533, 1.0));
        _1585 = dot(vec3(isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1585 = 1.0;
    }
    float _1589 = (_1585 * cbModelParam._m0[1u].x) + (_1574 * (1.0 - cbModelParam._m0[1u].x));
    float _1599 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _635);
    float _1600 = isnan(_1599) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1599 : min(cbModelParam._m0[25u].z, _1599));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1647 = fma(_853, cbModelParam._m0[13u].z, fma(_849, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _845)) + cbModelParam._m0[13u].w;
        float _1651 = fma(_853, cbModelParam._m0[14u].z, fma(_849, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _845)) + cbModelParam._m0[14u].w;
        float _1655 = fma(_853, cbModelParam._m0[15u].z, fma(_849, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _845)) + cbModelParam._m0[15u].w;
        float _1658 = fma(_794, cbModelParam._m0[13u].z, fma(_793, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _792));
        float _1661 = fma(_794, cbModelParam._m0[14u].z, fma(_793, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _792));
        float _1664 = fma(_794, cbModelParam._m0[15u].z, fma(_793, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _792));
        float _1692;
        if (_1658 > 0.0)
        {
            _1692 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1692 = frontier_phi_14_12_ladder;
        }
        float _1862;
        if (_1661 > 0.0)
        {
            _1862 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1862 = frontier_phi_23_19_ladder;
        }
        float _2158;
        if (_1664 > 0.0)
        {
            _2158 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2158 = frontier_phi_35_30_ladder;
        }
        float _2160 = isnan(_1862) ? _1692 : (isnan(_1692) ? _1862 : min(_1692, _1862));
        float _2161 = isnan(_2158) ? _2160 : (isnan(_2160) ? _2158 : min(_2160, _2158));
        float _2165 = (_2161 * _1658) + _1647;
        float _2166 = (_2161 * _1661) + _1651;
        float _2167 = (_2161 * _1664) + _1655;
        float _2168 = _2161 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2168;
        float _2172 = _2168 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 > _2172) || ((_2166 < _2170) || ((_2165 < _2170) || (_2165 > _2172))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2312 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2167, cbModelParam._m0[9u].z, fma(_2166, cbModelParam._m0[9u].y, _2165 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2167, cbModelParam._m0[10u].z, fma(_2166, cbModelParam._m0[10u].y, _2165 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2167, cbModelParam._m0[11u].z, fma(_2166, cbModelParam._m0[11u].y, _2165 * cbModelParam._m0[11u].x))), _1600);
            frontier_phi_13_35_ladder = _2312.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2312.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2312.x * cbModelParam._m0[1u].y;
        }
        _1680 = frontier_phi_13_35_ladder_2;
        _1682 = frontier_phi_13_35_ladder_1;
        _1684 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_792, _793, _794), _1600);
        _1680 = _1668.x * cbModelParam._m0[1u].y;
        _1682 = _1668.y * cbModelParam._m0[1u].y;
        _1684 = _1668.z * cbModelParam._m0[1u].y;
    }
    float _1688 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _635);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1688 : min(cbModelParam._m0[25u].w, _1688));
    float _1778;
    float _1780;
    float _1782;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1742 = fma(_853, cbModelParam._m0[21u].z, fma(_849, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _845)) + cbModelParam._m0[21u].w;
        float _1746 = fma(_853, cbModelParam._m0[22u].z, fma(_849, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _845)) + cbModelParam._m0[22u].w;
        float _1750 = fma(_853, cbModelParam._m0[23u].z, fma(_849, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _845)) + cbModelParam._m0[23u].w;
        float _1753 = fma(_794, cbModelParam._m0[21u].z, fma(_793, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _792));
        float _1756 = fma(_794, cbModelParam._m0[22u].z, fma(_793, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _792));
        float _1759 = fma(_794, cbModelParam._m0[23u].z, fma(_793, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _792));
        float _1867;
        if (_1753 > 0.0)
        {
            _1867 = abs((1.0 - _1742) / _1753);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1742 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1867 = frontier_phi_25_21_ladder;
        }
        float _2185;
        if (_1756 > 0.0)
        {
            _2185 = abs((1.0 - _1746) / _1756);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1746 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2185 = frontier_phi_37_32_ladder;
        }
        float _2512;
        if (_1759 > 0.0)
        {
            _2512 = abs((1.0 - _1750) / _1759);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1750 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2512 = frontier_phi_47_44_ladder;
        }
        float _2514 = isnan(_2185) ? _1867 : (isnan(_1867) ? _2185 : min(_1867, _2185));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _1753) + _1742;
        float _2520 = (_2515 * _1756) + _1746;
        float _2521 = (_2515 * _1759) + _1750;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2522;
        float _2525 = _2522 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2521 > _2525) || ((_2521 < _2523) || ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 < _2523) || (_2519 > _2525))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2639 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2521, cbModelParam._m0[17u].z, fma(_2520, cbModelParam._m0[17u].y, _2519 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2521, cbModelParam._m0[18u].z, fma(_2520, cbModelParam._m0[18u].y, _2519 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2521, cbModelParam._m0[19u].z, fma(_2520, cbModelParam._m0[19u].y, _2519 * cbModelParam._m0[19u].x))), _1689);
            frontier_phi_22_47_ladder = _2639.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2639.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2639.x * cbModelParam._m0[1u].z;
        }
        _1778 = frontier_phi_22_47_ladder_2;
        _1780 = frontier_phi_22_47_ladder_1;
        _1782 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_792, _793, _794), _1689);
        _1778 = _1762.x * cbModelParam._m0[1u].z;
        _1780 = _1762.y * cbModelParam._m0[1u].z;
        _1782 = _1762.z * cbModelParam._m0[1u].z;
    }
    float _1794 = ((((1.0 - _813) * ((_800 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_813 * _800)) * _784;
    float _1795 = _1794 * ((cbModelParam._m0[1u].w * (_1778 - _1680)) + _1680);
    float _1796 = _1794 * ((cbModelParam._m0[1u].w * (_1780 - _1682)) + _1682);
    float _1797 = _1794 * ((cbModelParam._m0[1u].w * (_1782 - _1684)) + _1684);
    float _1800 = fma(_1797, cbSceneParam._m0[89u].z, fma(_1796, cbSceneParam._m0[89u].y, _1795 * cbSceneParam._m0[89u].x));
    float _1803 = fma(_1797, cbSceneParam._m0[90u].z, fma(_1796, cbSceneParam._m0[90u].y, _1795 * cbSceneParam._m0[90u].x));
    float _1806 = fma(_1797, cbSceneParam._m0[91u].z, fma(_1796, cbSceneParam._m0[91u].y, _1795 * cbSceneParam._m0[91u].x));
    float _1841 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1854 = _1841 / _1853;
    float _1855 = _1845 / _1853;
    float _1856 = _1849 / _1853;
    float _2003;
    float _2004;
    float _2005;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1883 = ((uint(_1856 > cbSceneParam._m0[59u].y) + uint(_1856 > cbSceneParam._m0[59u].x)) + uint(_1856 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1884 = _1883 + 43u;
        uint _1892 = _1883 + 44u;
        uint _1900 = _1883 + 45u;
        uint _1908 = _1883 + 46u;
        float _1919 = fma(_1853, cbSceneParam._m0[_1884].w, fma(_1849, cbSceneParam._m0[_1884].z, fma(_1845, cbSceneParam._m0[_1884].y, _1841 * cbSceneParam._m0[_1884].x)));
        float _1923 = fma(_1853, cbSceneParam._m0[_1892].w, fma(_1849, cbSceneParam._m0[_1892].z, fma(_1845, cbSceneParam._m0[_1892].y, _1841 * cbSceneParam._m0[_1892].x)));
        float _1931 = fma(_1853, cbSceneParam._m0[_1908].w, fma(_1849, cbSceneParam._m0[_1908].z, fma(_1845, cbSceneParam._m0[_1908].y, _1841 * cbSceneParam._m0[_1908].x)));
        float _1936 = cbSceneParam._m0[33u].z * _1931;
        float _1938 = cbSceneParam._m0[33u].w * _1931;
        float _1941 = fma(_1853, cbSceneParam._m0[_1900].w, fma(_1849, cbSceneParam._m0[_1900].z, fma(_1845, cbSceneParam._m0[_1900].y, _1841 * cbSceneParam._m0[_1900].x))) / _1931;
        float _1989 = (cbSceneParam._m0[33u].x - sqrt(((_1855 * _1855) + (_1854 * _1854)) + (_1856 * _1856))) * cbSceneParam._m0[33u].y;
        float _4266 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1996 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1936 + _1919) / _1931, (_1938 + _1923) / _1931), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1938 + _1919) / _1931, (_1923 - _1936) / _1931), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 - _1936) / _1931, (_1923 - _1938) / _1931), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 - _1938) / _1931, (_1936 + _1923) / _1931), _1941), 0.0)).x), vec4(0.25)));
        _2003 = 1.0 - (_1996 * cbSceneParam._m0[34u].x);
        _2004 = 1.0 - (_1996 * cbSceneParam._m0[34u].y);
        _2005 = 1.0 - (_1996 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2003 = 1.0;
        _2004 = 1.0;
        _2005 = 1.0;
    }
    float _2069;
    float _2071;
    float _2073;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2057 = fma(_1853, cbSceneParam._m0[63u].w, fma(_1849, cbSceneParam._m0[63u].z, fma(_1845, cbSceneParam._m0[63u].y, _1841 * cbSceneParam._m0[63u].x)));
        float _2058 = fma(_1853, cbSceneParam._m0[60u].w, fma(_1849, cbSceneParam._m0[60u].z, fma(_1845, cbSceneParam._m0[60u].y, _1841 * cbSceneParam._m0[60u].x))) / _2057;
        float _2059 = fma(_1853, cbSceneParam._m0[61u].w, fma(_1849, cbSceneParam._m0[61u].z, fma(_1845, cbSceneParam._m0[61u].y, _1841 * cbSceneParam._m0[61u].x))) / _2057;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2058 >= cbSceneParam._m0[64u].x) && (_2059 >= cbSceneParam._m0[64u].y)) && (_2058 <= cbSceneParam._m0[64u].z)) && (_2059 <= cbSceneParam._m0[64u].w))
        {
            float _2198 = fma(_1853, cbSceneParam._m0[62u].w, fma(_1849, cbSceneParam._m0[62u].z, fma(_1845, cbSceneParam._m0[62u].y, _1841 * cbSceneParam._m0[62u].x))) / _2057;
            float _2202 = isnan(cbSceneParam._m0[41u].w) ? _2198 : (isnan(_2198) ? cbSceneParam._m0[41u].w : max(_2198, cbSceneParam._m0[41u].w));
            float _2245 = (cbSceneParam._m0[33u].x - sqrt(((_1855 * _1855) + (_1854 * _1854)) + (_1856 * _1856))) * cbSceneParam._m0[33u].y;
            float _4282 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
            float _2252 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2058, cbSceneParam._m0[33u].w + _2059), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2058, _2059 - cbSceneParam._m0[33u].z), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2058 - cbSceneParam._m0[33u].z, _2059 - cbSceneParam._m0[33u].w), _2202), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2058 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2059), _2202), 0.0)).x), vec4(0.25)));
            float _2256 = 1.0 - (_2252 * cbSceneParam._m0[34u].x);
            float _2257 = 1.0 - (_2252 * cbSceneParam._m0[34u].y);
            float _2258 = 1.0 - (_2252 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2258) ? _2005 : (isnan(_2005) ? _2258 : min(_2005, _2258));
            frontier_phi_34_33_ladder_1 = isnan(_2257) ? _2004 : (isnan(_2004) ? _2257 : min(_2004, _2257));
            frontier_phi_34_33_ladder_2 = isnan(_2256) ? _2003 : (isnan(_2003) ? _2256 : min(_2003, _2256));
        }
        else
        {
            frontier_phi_34_33_ladder = _2005;
            frontier_phi_34_33_ladder_1 = _2004;
            frontier_phi_34_33_ladder_2 = _2003;
        }
        _2069 = frontier_phi_34_33_ladder_2;
        _2071 = frontier_phi_34_33_ladder_1;
        _2073 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2069 = _2003;
        _2071 = _2004;
        _2073 = _2005;
    }
    uvec4 _2078 = floatBitsToUint(cbInstanceData._m0[_243 + 5u]);
    uint _2080 = _2078.x * 14u;
    uint _2081 = _2080 + 13u;
    float _2088 = _784 + (-1.0);
    float _2093 = (cbLight._m0[_2081].x * _2088) + 1.0;
    float _2094 = (cbLight._m0[_2081].y * _2088) + 1.0;
    float _2095 = (cbLight._m0[_2081].z * _2088) + 1.0;
    float _2096 = (cbLight._m0[_2081].w * _2088) + 1.0;
    uint _2097 = _2080 + 5u;
    float _2103 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
    uint _2107 = _2080 + 4u;
    float _2117 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    uint _2121 = _2080 | 1u;
    float _2132 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_632, _633, _634));
    float _2135 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_632, _633, _634));
    float _4318 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _4329 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2140 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * 0.3183098733425140380859375;
    float _2142 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * 0.3183098733425140380859375;
    float _2149 = ((cbLight._m0[_2097].x * _2103) * _2142) + (((cbLight._m0[_2107].x * _2069) * _2117) * _2140);
    float _2150 = ((_2103 * cbLight._m0[_2097].y) * _2142) + (((cbLight._m0[_2107].y * _2071) * _2117) * _2140);
    float _2151 = ((_2103 * cbLight._m0[_2097].z) * _2142) + (((cbLight._m0[_2107].z * _2073) * _2117) * _2140);
    uvec4 _2155 = floatBitsToUint(cbLight._m0[_2080 + 12u]);
    bool _2157 = _2155.x == 0u;
    float _2259;
    float _2261;
    float _2263;
    if (_2157)
    {
        _2259 = _2149;
        _2261 = _2150;
        _2263 = _2151;
    }
    else
    {
        uint _2267 = _2080 + 6u;
        float _2283 = (dot(vec3(cbLight._m0[_2080 + 2u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _2284 = _2283 * _2283;
        float _4340 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2285 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _2286 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2259 = (((cbLight._m0[_2267].x * 0.3183098733425140380859375) * _2285) * _2286) + _2149;
        _2261 = (((cbLight._m0[_2267].y * 0.3183098733425140380859375) * _2285) * _2286) + _2150;
        _2263 = (((cbLight._m0[_2267].z * 0.3183098733425140380859375) * _2285) * _2286) + _2151;
    }
    bool _2266 = _2155.y == 0u;
    float _2321;
    float _2323;
    float _2325;
    if (_2266)
    {
        _2321 = _2259;
        _2323 = _2261;
        _2325 = _2263;
    }
    else
    {
        uint _2483 = _2080 + 7u;
        float _2499 = (dot(vec3(cbLight._m0[_2080 + 3u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _2500 = _2499 * _2499;
        float _4356 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2501 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2502 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2321 = (((cbLight._m0[_2483].x * 0.3183098733425140380859375) * _2501) * _2502) + _2259;
        _2323 = (((cbLight._m0[_2483].y * 0.3183098733425140380859375) * _2501) * _2502) + _2261;
        _2325 = (((cbLight._m0[_2483].z * 0.3183098733425140380859375) * _2501) * _2502) + _2263;
    }
    uint _2328 = _2080 + 8u;
    float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _635) * 0.949999988079071044921875);
    float _2342 = _2341 * _2341;
    float _2343 = cbLight._m0[_2080].x + _710;
    float _2344 = cbLight._m0[_2080].y + _711;
    float _2345 = cbLight._m0[_2080].z + _712;
    float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
    float _2350 = _2349 * _2343;
    float _2351 = _2349 * _2344;
    float _2352 = _2349 * _2345;
    float _2353 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2080].xyz));
    float _4372 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _4383 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _2357 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _2358 = dot(vec3(_632, _633, _634), vec3(_2350, _2351, _2352));
    float _4394 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2350, _2351, _2352));
    float _4405 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2342 * _2342;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2381 = (exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2382 = 1.0 - _2342;
    float _2393 = (0.5 / (((_2357 * ((_2356 * _2382) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2382) + _2342) * _2356))) * _2356;
    float _4416 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2395 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    uint _2409 = _2080 + 9u;
    float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _635) * 0.949999988079071044921875);
    float _2421 = _2420 * _2420;
    float _2422 = cbLight._m0[_2121].x + _710;
    float _2423 = cbLight._m0[_2121].y + _711;
    float _2424 = cbLight._m0[_2121].z + _712;
    float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
    float _2429 = _2428 * _2422;
    float _2430 = _2428 * _2423;
    float _2431 = _2428 * _2424;
    float _2432 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2121].xyz));
    float _4427 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2436 = dot(vec3(_632, _633, _634), vec3(_2429, _2430, _2431));
    float _4438 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2440 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2429, _2430, _2431));
    float _4449 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2444 = _2421 * _2421;
    float _2448 = ((_2439 * _2439) * (_2444 + (-1.0))) + 1.0;
    float _2457 = (exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2458 = 1.0 - _2421;
    float _2468 = (0.5 / (((_2357 * ((_2435 * _2458) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2458) + _2421) * _2435))) * _2435;
    float _4460 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2470 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2444 / ((_2448 * _2448) * 3.141590118408203125));
    float _2480 = (((_2457 * cbLight._m0[_2409].x) * _2470) * _2103) + ((((cbLight._m0[_2328].x * _2069) * _2381) * _2395) * _2117);
    float _2481 = (((_2457 * cbLight._m0[_2409].y) * _2470) * _2103) + ((((cbLight._m0[_2328].y * _2071) * _2381) * _2395) * _2117);
    float _2482 = (((_2457 * cbLight._m0[_2409].z) * _2470) * _2103) + ((((cbLight._m0[_2328].z * _2073) * _2381) * _2395) * _2117);
    float _2538;
    float _2540;
    float _2542;
    if (_2157)
    {
        _2538 = _2480;
        _2540 = _2481;
        _2542 = _2482;
    }
    else
    {
        uint _2544 = _2080 + 2u;
        uint _2548 = _2080 + 10u;
        float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2544].w)) * _635) * 0.949999988079071044921875);
        float _2563 = _2562 * _2562;
        float _2564 = cbLight._m0[_2544].x + _710;
        float _2565 = cbLight._m0[_2544].y + _711;
        float _2566 = cbLight._m0[_2544].z + _712;
        float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
        float _2571 = _2570 * _2564;
        float _2572 = _2570 * _2565;
        float _2573 = _2570 * _2566;
        float _2574 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2544].xyz));
        float _4471 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2577 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2578 = dot(vec3(_632, _633, _634), vec3(_2571, _2572, _2573));
        float _4482 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2582 = dot(vec3(cbLight._m0[_2544].xyz), vec3(_2571, _2572, _2573));
        float _4493 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2586 = _2563 * _2563;
        float _2590 = ((_2581 * _2581) * (_2586 + (-1.0))) + 1.0;
        float _2599 = (exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2600 = 1.0 - _2563;
        float _2610 = (0.5 / (((_2357 * ((_2577 * _2600) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2600) + _2563) * _2577))) * _2577;
        float _4504 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2612 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2586 / ((_2590 * _2590) * 3.141590118408203125));
        float _2613 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2538 = (((_2599 * cbLight._m0[_2548].x) * _2612) * _2613) + _2480;
        _2540 = (((_2599 * cbLight._m0[_2548].y) * _2612) * _2613) + _2481;
        _2542 = (((_2599 * cbLight._m0[_2548].z) * _2612) * _2613) + _2482;
    }
    float _2644;
    float _2646;
    float _2648;
    if (_2266)
    {
        _2644 = _2538;
        _2646 = _2540;
        _2648 = _2542;
    }
    else
    {
        uint _2655 = _2080 + 3u;
        uint _2659 = _2080 + 11u;
        float _2673 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2655].w)) * _635) * 0.949999988079071044921875);
        float _2674 = _2673 * _2673;
        float _2675 = cbLight._m0[_2655].x + _710;
        float _2676 = cbLight._m0[_2655].y + _711;
        float _2677 = cbLight._m0[_2655].z + _712;
        float _2681 = inversesqrt(dot(vec3(_2675, _2676, _2677), vec3(_2675, _2676, _2677)));
        float _2682 = _2681 * _2675;
        float _2683 = _2681 * _2676;
        float _2684 = _2681 * _2677;
        float _2685 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2655].xyz));
        float _4520 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2689 = dot(vec3(_632, _633, _634), vec3(_2682, _2683, _2684));
        float _4531 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2693 = dot(vec3(cbLight._m0[_2655].xyz), vec3(_2682, _2683, _2684));
        float _4542 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2697 = _2674 * _2674;
        float _2701 = ((_2692 * _2692) * (_2697 + (-1.0))) + 1.0;
        float _2710 = (exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2711 = 1.0 - _2674;
        float _2721 = (0.5 / (((_2357 * ((_2688 * _2711) + _2674)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2711) + _2674) * _2688))) * _2688;
        float _4553 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2723 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2697 / ((_2701 * _2701) * 3.141590118408203125));
        float _2724 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2644 = (((_2710 * cbLight._m0[_2659].x) * _2723) * _2724) + _2538;
        _2646 = (((_2710 * cbLight._m0[_2659].y) * _2723) * _2724) + _2540;
        _2648 = (((_2710 * cbLight._m0[_2659].z) * _2723) * _2724) + _2542;
    }
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    if (_2078.y == 0u)
    {
        uvec4 _2745 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2746 = _2745.x;
        uint _2757 = uint((float(_2745.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2746))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2746)));
        float _2767 = (log2(_1856 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2768 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        uint _2771 = uint(isnan(14.0) ? _2768 : (isnan(_2768) ? 14.0 : min(_2768, 14.0)));
        uvec4 _2776 = texelFetch(g_lightClusterGridBuffer, int(((_2771 << 2u) + (_2757 << 6u)) >> 2u));
        uint _2777 = _2776.x;
        uint _2778 = _2745.z;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((((1u << ((_2778 >> 4u) & 15u)) + 4294967295u) & _2777) == 0u) || ((_2778 & 240u) == 0u))
        {
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
        }
        else
        {
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _2868;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            uint _3007 = 0u;
            uint _3016;
            bool _3017;
            for (;;)
            {
                _3016 = texelFetch(g_lightClassification, int((((_2771 << 5u) + (_2757 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                _3017 = _3016 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3017)
                {
                    frontier_phi_66_pred = _3006;
                    frontier_phi_66_pred_1 = _3005;
                    frontier_phi_66_pred_2 = _3004;
                    frontier_phi_66_pred_3 = _3003;
                    frontier_phi_66_pred_4 = _3002;
                    frontier_phi_66_pred_5 = _3001;
                }
                else
                {
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    uint _3131;
                    _3125 = _3001;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3016;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    for (;;)
                    {
                        uint _3135 = uint(findLSB(_3131)) + (_3007 << 5u);
                        uint _3132 = (_3131 + 4294967295u) & _3131;
                        uint _3137 = _3135 * 48u;
                        vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3157 = (_3135 * 48u) + 4u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 3u)).x));
                        uint _3176 = (_3135 * 48u) + 8u;
                        vec3 _3187 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x));
                        float _3191 = _3151.x - _1854;
                        float _3192 = _3151.y - _1855;
                        float _3193 = _3151.z - _1856;
                        float _3194 = dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193));
                        float _3197 = inversesqrt(_3194);
                        float _3198 = _3197 * _3191;
                        float _3199 = _3197 * _3192;
                        float _3200 = _3197 * _3193;
                        float _3201 = dot(vec3(_740, _743, _746), vec3(_3198, _3199, _3200));
                        float _3206 = 1.0 - (_3194 * _3151.w);
                        float _4579 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3208 = sqrt(_3194) * _3170.w;
                        float _3211 = 1.39999997615814208984375 / (_3208 + 1.39999997615814208984375);
                        float _3212 = _3211 * _3211;
                        float _3215 = ((1.0 - _3212) * _3201) + _3212;
                        float _3218 = _3208 * _3208;
                        float _3222 = ((isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * _3207) / ((_3218 * 0.699999988079071044921875) + 1.0);
                        float _3226 = (-0.0) - _1854;
                        float _3227 = (-0.0) - _1855;
                        float _3228 = (-0.0) - _1856;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3242 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                        float _3243 = 1.0 - _800;
                        float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                        float _3251 = _3250 * _3250;
                        float _3252 = _3251 * _3251;
                        float _3253 = _3233 + _3198;
                        float _3254 = _3234 + _3199;
                        float _3255 = _3235 + _3200;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3263 = dot(vec3(_740, _743, _746), vec3(_3233, _3234, _3235));
                        float _4595 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3267 = dot(vec3(_740, _743, _746), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                        float _4606 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                        float _3275 = _3211 * _3251;
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3201) + _3276;
                        float _4617 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3280 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3281 = 1.0 - _3251;
                        float _3291 = (0.5 / (((_3280 * ((_3266 * _3281) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3251) * _3266))) * _3280;
                        float _4628 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3302 = (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0)))) / ((_3274 * _3274) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125))) * _3207;
                        _3060 = (_3222 * _3170.x) + _3128;
                        _3061 = (_3222 * _3170.y) + _3129;
                        _3062 = (_3222 * _3170.z) + _3130;
                        _3057 = (_3302 * _3187.x) + _3125;
                        _3058 = (_3302 * _3187.y) + _3126;
                        _3059 = (_3302 * _3187.z) + _3127;
                        if (_3132 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3125 = _3057;
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3132;
                        }
                    }
                    frontier_phi_66_pred = _3062;
                    frontier_phi_66_pred_1 = _3061;
                    frontier_phi_66_pred_2 = _3060;
                    frontier_phi_66_pred_3 = _3059;
                    frontier_phi_66_pred_4 = _3058;
                    frontier_phi_66_pred_5 = _3057;
                }
                _2868 = frontier_phi_66_pred;
                _2866 = frontier_phi_66_pred_1;
                _2864 = frontier_phi_66_pred_2;
                _2862 = frontier_phi_66_pred_3;
                _2860 = frontier_phi_66_pred_4;
                _2858 = frontier_phi_66_pred_5;
                uint _3008 = _3007 + 1u;
                if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3001 = _2858;
                    _3002 = _2860;
                    _3003 = _2862;
                    _3004 = _2864;
                    _3005 = _2866;
                    _3006 = _2868;
                    _3007 = _3008;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
        }
        uvec4 _2871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2872 = _2871.z;
        uint _2874 = (_2872 >> 8u) & 15u;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((4294967295u << _2874) & _2777) == 0u)
        {
            _2969 = _2857;
            _2971 = _2859;
            _2973 = _2861;
            _2975 = _2863;
            _2977 = _2865;
            _2979 = _2867;
        }
        else
        {
            float _2994 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
            float _2995 = _2994 * _1854;
            float _2996 = _2994 * _1855;
            float _2997 = _2994 * _1856;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2874 < ((_2872 >> 12u) & 15u))
            {
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _3108 = _2857;
                float _3109 = _2859;
                float _3110 = _2861;
                float _3111 = _2863;
                float _3112 = _2865;
                float _3113 = _2867;
                uint _3114 = _2874;
                uint _3123;
                bool _3124;
                for (;;)
                {
                    _3123 = texelFetch(g_lightClassification, int((((_2771 << 5u) + (_2757 << 9u)) + (_3114 << 2u)) >> 2u)).x;
                    _3124 = _3123 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3124)
                    {
                        frontier_phi_72_pred = _3113;
                        frontier_phi_72_pred_1 = _3112;
                        frontier_phi_72_pred_2 = _3111;
                        frontier_phi_72_pred_3 = _3110;
                        frontier_phi_72_pred_4 = _3109;
                        frontier_phi_72_pred_5 = _3108;
                    }
                    else
                    {
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3320 = _3108;
                        float _3321 = _3109;
                        float _3322 = _3110;
                        float _3323 = _3111;
                        float _3324 = _3112;
                        float _3325 = _3113;
                        uint _3326 = _3123;
                        uint _3327;
                        vec4 _3352;
                        float _3353;
                        vec4 _3368;
                        vec3 _3380;
                        vec4 _3396;
                        vec4 _3411;
                        float _3457;
                        bool _3458;
                        for (;;)
                        {
                            uint _3337 = ((_3114 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3326));
                            _3327 = (_3326 + 4294967295u) & _3326;
                            uint _3339 = _3337 * 40u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            _3353 = _3352.w;
                            uint _3355 = (_3337 * 40u) + 4u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3370 = (_3337 * 40u) + 8u;
                            _3380 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x));
                            uint _3383 = (_3337 * 40u) + 16u;
                            _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3398 = (_3337 * 40u) + 20u;
                            _3411 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3398)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3398 + 3u)).x));
                            uint _3413 = (_3337 * 40u) + 24u;
                            vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3432 = (_3337 * 40u) + 28u;
                            vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            _3457 = fma(_1856, _3445.z, fma(_1855, _3445.y, _3445.x * _1854)) + _3445.w;
                            _3458 = !((fma(_1856, _3426.z, fma(_1855, _3426.y, _3426.x * _1854)) + _3426.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3458)
                            {
                                float _3485 = _3352.x - _1854;
                                float _3486 = _3352.y - _1855;
                                float _3487 = _3352.z - _1856;
                                float _3488 = dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487));
                                float _3491 = inversesqrt(_3488);
                                float _3492 = _3491 * _3485;
                                float _3493 = _3491 * _3486;
                                float _3494 = _3491 * _3487;
                                float _3498 = 1.0 - (_3488 / (_3353 * _3353));
                                float _4639 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3503 = sqrt(_3488) * _3368.w;
                                float _3505 = 1.39999997615814208984375 / (_3503 + 1.39999997615814208984375);
                                float _3506 = _3505 * _3505;
                                float _3509 = ((1.0 - _3506) * dot(vec3(_3492, _3493, _3494), vec3(_740, _743, _746))) + _3506;
                                float _3512 = _3503 * _3503;
                                float _3516 = (fma(_1856, _3396.z, fma(_1855, _3396.y, _3396.x * _1854)) + _3396.w) / _3457;
                                float _3517 = (fma(_1856, _3411.z, fma(_1855, _3411.y, _3411.x * _1854)) + _3411.w) / _3457;
                                float _3521 = 1.0 - dot(vec2(_3516, _3517), vec2(_3516, _3517));
                                float _4655 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                                float _3522 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3523 = _3522 * (((isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0))) * _3499) / ((_3512 * 0.699999988079071044921875) + 1.0));
                                float _3535 = exp2(log2(1.0 / ((_3512 * 3.5) + 5.0)) * 0.25);
                                float _3536 = 1.0 - _800;
                                float _3543 = sqrt(1.0 - ((1.0 - (_3536 * _3536)) * (1.0 - (_3535 * _3535))));
                                float _3544 = _3543 * _3543;
                                float _3545 = _3544 * _3544;
                                float _3546 = _3492 - _2995;
                                float _3547 = _3493 - _2996;
                                float _3548 = _3494 - _2997;
                                float _3552 = inversesqrt(dot(vec3(_3546, _3547, _3548), vec3(_3546, _3547, _3548)));
                                float _3556 = dot(vec3(_740, _743, _746), vec3((-0.0) - _2995, (-0.0) - _2996, (-0.0) - _2997));
                                float _4666 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3559 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3560 = dot(vec3(_740, _743, _746), vec3(_3552 * _3546, _3552 * _3547, _3552 * _3548));
                                float _4677 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3563 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3567 = ((_3563 * _3563) * (_3545 + (-1.0))) + 1.0;
                                float _3568 = _3505 * _3544;
                                float _3569 = _3568 * _3568;
                                float _3575 = ((1.0 - _3569) * dot(vec3(_740, _743, _746), vec3(_3492, _3493, _3494))) + _3569;
                                float _4688 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3577 = 1.0 - _3544;
                                float _3587 = (0.5 / (((_3576 * ((_3559 * _3577) + _3544)) + 9.9999999392252902907785028219223e-09) + (((_3576 * _3577) + _3544) * _3559))) * _3576;
                                float _4699 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3597 = (_3522 * _3499) * (((_3545 * 3.1415927410125732421875) * (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) / ((_3567 * _3567) * ((_3512 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3523 * _3368.y;
                                frontier_phi_78_pred_1 = _3523 * _3368.x;
                                frontier_phi_78_pred_2 = _3597 * _3380.z;
                                frontier_phi_78_pred_3 = _3597 * _3380.y;
                                frontier_phi_78_pred_4 = _3597 * _3380.x;
                                frontier_phi_78_pred_5 = _3523 * _3368.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3605 = frontier_phi_78_pred;
                            _3604 = frontier_phi_78_pred_1;
                            _3603 = frontier_phi_78_pred_2;
                            _3602 = frontier_phi_78_pred_3;
                            _3601 = frontier_phi_78_pred_4;
                            _3606 = frontier_phi_78_pred_5;
                            _3310 = _3604 + _3323;
                            _3311 = _3605 + _3324;
                            _3312 = _3606 + _3325;
                            _3307 = _3601 + _3320;
                            _3308 = _3602 + _3321;
                            _3309 = _3603 + _3322;
                            if (_3327 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3327;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3312;
                        frontier_phi_72_pred_1 = _3311;
                        frontier_phi_72_pred_2 = _3310;
                        frontier_phi_72_pred_3 = _3309;
                        frontier_phi_72_pred_4 = _3308;
                        frontier_phi_72_pred_5 = _3307;
                    }
                    _2980 = frontier_phi_72_pred;
                    _2978 = frontier_phi_72_pred_1;
                    _2976 = frontier_phi_72_pred_2;
                    _2974 = frontier_phi_72_pred_3;
                    _2972 = frontier_phi_72_pred_4;
                    _2970 = frontier_phi_72_pred_5;
                    uint _3115 = _3114 + 1u;
                    if (_3115 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3108 = _2970;
                        _3109 = _2972;
                        _3110 = _2974;
                        _3111 = _2976;
                        _3112 = _2978;
                        _3113 = _2980;
                        _3114 = _3115;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2980;
                frontier_phi_60_61_ladder_1 = _2978;
                frontier_phi_60_61_ladder_2 = _2974;
                frontier_phi_60_61_ladder_3 = _2972;
                frontier_phi_60_61_ladder_4 = _2970;
                frontier_phi_60_61_ladder_5 = _2976;
            }
            else
            {
                frontier_phi_60_61_ladder = _2867;
                frontier_phi_60_61_ladder_1 = _2865;
                frontier_phi_60_61_ladder_2 = _2861;
                frontier_phi_60_61_ladder_3 = _2859;
                frontier_phi_60_61_ladder_4 = _2857;
                frontier_phi_60_61_ladder_5 = _2863;
            }
            _2969 = frontier_phi_60_61_ladder_4;
            _2971 = frontier_phi_60_61_ladder_3;
            _2973 = frontier_phi_60_61_ladder_2;
            _2975 = frontier_phi_60_61_ladder_5;
            _2977 = frontier_phi_60_61_ladder_1;
            _2979 = frontier_phi_60_61_ladder;
        }
        float _2984 = isnan(1.0) ? _784 : (isnan(_784) ? 1.0 : min(_784, 1.0));
        _2790 = (_2984 * _2975) + _2321;
        _2792 = (_2984 * _2977) + _2323;
        _2794 = (_2984 * _2979) + _2325;
        _2796 = ((_2969 * 0.039999999105930328369140625) * _2984) + _2644;
        _2798 = ((_2971 * 0.039999999105930328369140625) * _2984) + _2646;
        _2800 = ((_2973 * 0.039999999105930328369140625) * _2984) + _2648;
    }
    else
    {
        _2790 = _2321;
        _2792 = _2323;
        _2794 = _2325;
        _2796 = _2644;
        _2798 = _2646;
        _2800 = _2648;
    }
    float _4715 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4726 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4737 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    uint _2820 = _243 + 6u;
    float _2828 = _718 / cbSceneParam._m0[86u].x;
    float _2829 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2843 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2828, _2829, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2845 = _2843.x;
    float _2846 = _2843.y;
    float _2847 = _2843.z;
    float _2848 = _2843.w;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2882 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2883 = _2882 / _653;
        float _2894 = _2883 * _703;
        float _2895 = _704 * _2883;
        float _2896 = (-0.0) - _2895;
        float _2897 = _2883 * _705;
        float _2899 = (cbSceneParam._m0[77u].w * _2896) / _2882;
        float _2900 = _2899 + cbSceneParam._m0[79u].w;
        float _2901 = cbSceneParam._m0[79u].w - _2895;
        float _2907 = sqrt(((_2894 * _2894) + (_2895 * _2895)) + (_2897 * _2897));
        float _2910 = (1.0 - (cbSceneParam._m0[77u].w / _2882)) * _2907;
        float _2915 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2917 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3070;
        if (abs((_2896 - _2899) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3070 = ((((_2900 > 0.0) ? exp2(_2915 * _2900) : (2.0 - exp2(_2917 * _2900))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2910;
        }
        else
        {
            float _3030 = 1.0 / cbSceneParam._m0[80u].x;
            float _3031 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : max(_2900, _2901));
            float _3032 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : min(_2900, _2901));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            _3070 = ((abs(_2907 / _2896) * cbSceneParam._m0[80u].y) * ((((_3041 - _3042) * 2.0) - ((exp2(_2915 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0)))) - exp2(_2915 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))))) * _3030)) - ((exp2(_2917 * _3041) - exp2(_2917 * _3042)) * _3030))) + (_2910 * cbSceneParam._m0[80u].z);
        }
        vec4 _3072 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2828, _2829, 1.0), 0.0);
        float _3081 = exp2((_3070 * (-1.44269502162933349609375)) * (1.0 - _3072.w));
        float _3082 = log2(_3081);
        float _3098 = log2(_2848);
        _2919 = (exp2(_3098 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].x)) * _3072.x) / cbSceneParam._m0[78u].x)) + _2845;
        _2921 = (exp2(_3098 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].y)) * _3072.y) / cbSceneParam._m0[78u].y)) + _2846;
        _2923 = (exp2(_3098 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].z)) * _3072.z) / cbSceneParam._m0[78u].z)) + _2847;
        _2925 = _3081 * _2848;
    }
    else
    {
        _2919 = _2845;
        _2921 = _2846;
        _2923 = _2847;
        _2925 = _2848;
    }
    float _2937 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2938 = _2937 == 3.0;
    float _2939 = log2(_2925);
    float _2946 = exp2(_2939 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2790 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _784))) + ((_2796 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1589)) * cbPerFrame._m0[3u].x));
    float _2947 = exp2(_2939 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2792 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _784))) + ((_2798 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1589)) * cbPerFrame._m0[3u].x));
    float _2948 = exp2(_2939 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2794 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _784))) + ((_2800 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1589)) * cbPerFrame._m0[3u].x));
    float _2957 = (_2937 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2957 * (_2938 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2919)));
    SV_Target.y = _2957 * (_2938 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2921)));
    SV_Target.z = _2957 * (_2938 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2923)));
    SV_Target.w = cbInstanceData._m0[_2820].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2820].w;
}


