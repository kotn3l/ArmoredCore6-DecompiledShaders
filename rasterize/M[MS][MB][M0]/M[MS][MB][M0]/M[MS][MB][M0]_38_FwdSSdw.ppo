#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _961;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    float _242 = _241 * TEXCOORD.z;
    float _243 = _241 * TEXCOORD.w;
    vec4 _262 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _242) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _243) + cbTextureTilingScale._m0[14u].w));
    vec4 _309 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _313 = _309.z;
    float _318 = (_309.x * 2.0) + (-1.0);
    float _320 = (_309.y * 2.0) + (-1.0);
    float _321 = dot(vec2(_318, _320), vec2(_318, _320));
    float _3294 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _327 = sqrt(1.0 - (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _242) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _243) + cbTextureTilingScale._m0[11u].w));
    float _346 = _344.x;
    float _347 = 1.0 - _346;
    float _363 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_346 - _347) * cbMtdParam._m0[24u].z) + _347) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3305 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _371 = (_364 * ((_289.x * cbMtdParam._m0[18u].x) - _268)) + _268;
    float _372 = (_364 * ((_289.y * cbMtdParam._m0[18u].y) - _269)) + _269;
    float _373 = (_364 * ((_289.z * cbMtdParam._m0[18u].z) - _270)) + _270;
    vec4 _386 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _242) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _243) + cbTextureTilingScale._m0[15u].w));
    float _393 = (_386.x * 2.0) + (-1.0);
    float _394 = (_386.y * 2.0) + (-1.0);
    float _395 = dot(vec2(_393, _394), vec2(_393, _394));
    float _3316 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _403 = (_364 * (_386.z - _313)) + _313;
    float _415 = (((_393 - _318) + (cbMtdParam._m0[21u].x * _318)) * _364) + _318;
    float _416 = (((_394 - _320) + (cbMtdParam._m0[21u].x * _320)) * _364) + _320;
    float _417 = (_364 * (sqrt(1.0 - (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) - _327)) + _327;
    float _422 = cbMtdParam._m0[22u].x + _309.w;
    float _425 = fma(_417, _209 * NORMAL.x, fma(_416, _216 * TANGENT.x, (_202 * _194) * _415));
    float _428 = fma(_417, _209 * NORMAL.y, fma(_416, _216 * TANGENT.y, (_202 * _195) * _415));
    float _431 = fma(_417, _209 * NORMAL.z, fma(_416, _216 * TANGENT.z, (_202 * _196) * _415));
    float _435 = inversesqrt(dot(vec3(_425, _428, _431), vec3(_425, _428, _431)));
    float _436 = _435 * _425;
    float _437 = _435 * _428;
    float _438 = _435 * _431;
    float _3327 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _439 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _3338 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3349 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _3360 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _3371 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _457 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _508 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _498);
    float _509 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _498);
    float _510 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _498);
    float _514 = inversesqrt(dot(vec3(_508, _509, _510), vec3(_508, _509, _510)));
    float _515 = _508 * _514;
    float _516 = _509 * _514;
    float _517 = _510 * _514;
    float _523 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _524 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _545 = fma(_438, cbSceneParam._m0[5u].z, fma(_437, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _436));
    float _548 = fma(_438, cbSceneParam._m0[6u].z, fma(_437, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _436));
    float _551 = fma(_438, cbSceneParam._m0[7u].z, fma(_437, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _436));
    uint _565 = (_222 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _571 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_565].x;
    float _572 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_565].y;
    float _573 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0)))) * cbInstanceData._m0[_565].z;
    float _3382 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _574 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _575 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    vec4 _585 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _523, cbSceneParam._m0[86u].y * _524));
    float _589 = ((isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0))) * TEXCOORD_5.w) * _585.x;
    float _590 = dot(vec3(_436, _437, _438), vec3(_515, _516, _517));
    float _593 = _590 * 2.0;
    float _597 = (_593 * _436) - _515;
    float _598 = (_593 * _437) - _516;
    float _599 = (_593 * _438) - _517;
    float _603 = abs(dot(vec3(_515, _516, _517), vec3(_436, _437, _438)));
    float _3415 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _605 = sqrt(_439);
    float _618 = exp2((_605 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_605 * 3.0));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _654 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _960;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _685 = fma(_658, cbModelParam._m0[26u].z, fma(_654, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _650));
        float _689 = fma(_658, cbModelParam._m0[27u].z, fma(_654, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _650));
        float _693 = fma(_658, cbModelParam._m0[28u].z, fma(_654, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _650));
        float _718 = _650 + _436;
        float _719 = _654 + _437;
        float _720 = _658 + _438;
        float _730 = fma(_720, cbModelParam._m0[26u].z, fma(_719, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _718)) - _685;
        float _731 = fma(_720, cbModelParam._m0[27u].z, fma(_719, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _718)) - _689;
        float _732 = fma(_720, cbModelParam._m0[28u].z, fma(_719, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _718)) - _693;
        float _736 = inversesqrt(dot(vec3(_730, _731, _732), vec3(_730, _731, _732)));
        float _749 = ((_736 * _730) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_685 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _750 = ((_736 * _731) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_689 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _751 = ((_736 * _732) / cbModelParam._m0[34u].z) + ((((((_693 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_749, _750, _751), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_749, _750, _751), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_749, _750, _751), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_749, _750, _751), 0.0);
        float _788 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_754.x + (-0.5));
        float _790 = _788 * (_754.y + (-0.5));
        float _791 = _788 * (_754.z + (-0.5));
        float _798 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_761.x + (-0.5));
        float _800 = _798 * (_761.y + (-0.5));
        float _801 = _798 * (_761.z + (-0.5));
        float _808 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_768.x + (-0.5));
        float _810 = _808 * (_768.y + (-0.5));
        float _811 = _808 * (_768.z + (-0.5));
        float _818 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_775.x + (-0.5));
        float _820 = _818 * (_775.y + (-0.5));
        float _821 = _818 * (_775.z + (-0.5));
        float _822 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _825 = _789 * 0.5;
        float _826 = _799 * 0.5;
        float _827 = _809 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _842 = (dot(vec3(_436, _437, _438), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _852 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_822 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3463 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_854 + 1.0))) + _859) * _822;
        float _869 = _790 * 0.5;
        float _870 = _800 * 0.5;
        float _871 = _810 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _885 = (dot(vec3(_436, _437, _438), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _894 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3496 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_896 + 1.0))) + _901) * _823;
        float _911 = _791 * 0.5;
        float _912 = _801 * 0.5;
        float _913 = _811 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(_436, _437, _438), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_824 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3529 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_938 + 1.0))) + _943) * _824;
        _960 = _791;
        _962 = _790;
        _963 = _789;
        _964 = _801;
        _965 = _800;
        _966 = _799;
        _967 = _811;
        _968 = _810;
        _969 = _809;
        _970 = _824;
        _971 = _823;
        _972 = _822;
        _973 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
        _975 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
    }
    else
    {
        _960 = _961;
        _962 = _961;
        _963 = _961;
        _964 = _961;
        _965 = _961;
        _966 = _961;
        _967 = _961;
        _968 = _961;
        _969 = _961;
        _970 = _961;
        _971 = _961;
        _972 = _961;
        _973 = 0.0;
        _974 = 0.0;
        _975 = 0.0;
    }
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1000 = fma(_658, cbModelParam._m0[30u].z, fma(_654, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _650));
        float _1004 = fma(_658, cbModelParam._m0[31u].z, fma(_654, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _650));
        float _1008 = fma(_658, cbModelParam._m0[32u].z, fma(_654, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _650));
        float _1031 = _650 + _436;
        float _1032 = _654 + _437;
        float _1033 = _658 + _438;
        float _1043 = fma(_1033, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1031)) - _1000;
        float _1044 = fma(_1033, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1031)) - _1004;
        float _1045 = fma(_1033, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1031)) - _1008;
        float _1049 = inversesqrt(dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045)));
        float _1062 = ((_1049 * _1043) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1000 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1063 = ((_1049 * _1044) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1004 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1064 = ((_1049 * _1045) / cbModelParam._m0[35u].z) + ((((((_1008 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1062, _1063, _1064), 0.0);
        float _1099 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1066.x + (-0.5));
        float _1101 = _1099 * (_1066.y + (-0.5));
        float _1102 = _1099 * (_1066.z + (-0.5));
        float _1109 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1073.x + (-0.5));
        float _1111 = _1109 * (_1073.y + (-0.5));
        float _1112 = _1109 * (_1073.z + (-0.5));
        float _1119 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1080.x + (-0.5));
        float _1121 = _1119 * (_1080.y + (-0.5));
        float _1122 = _1119 * (_1080.z + (-0.5));
        float _1129 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1087.x + (-0.5));
        float _1131 = _1129 * (_1087.y + (-0.5));
        float _1132 = _1129 * (_1087.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_436, _437, _438), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3592 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1163 + 1.0))) + _1168) * _1133;
        float _1178 = _1101 * 0.5;
        float _1179 = _1111 * 0.5;
        float _1180 = _1121 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_436, _437, _438), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3625 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1205 + 1.0))) + _1210) * _1134;
        float _1220 = _1102 * 0.5;
        float _1221 = _1112 * 0.5;
        float _1222 = _1122 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_436, _437, _438), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3658 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_1247 + 1.0))) + _1252) * _1135;
        _1269 = _1102;
        _1270 = _1101;
        _1271 = _1100;
        _1272 = _1112;
        _1273 = _1111;
        _1274 = _1110;
        _1275 = _1122;
        _1276 = _1121;
        _1277 = _1120;
        _1278 = _1135;
        _1279 = _1134;
        _1280 = _1133;
        _1281 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1282 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1283 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
    }
    else
    {
        _1269 = _961;
        _1270 = _961;
        _1271 = _961;
        _1272 = _961;
        _1273 = _961;
        _1274 = _961;
        _1275 = _961;
        _1276 = _961;
        _1277 = _961;
        _1278 = _961;
        _1279 = _961;
        _1280 = _961;
        _1281 = 0.0;
        _1282 = 0.0;
        _1283 = 0.0;
    }
    float _1293 = (cbModelParam._m0[1u].x * (_1281 - _973)) + _973;
    float _1294 = (cbModelParam._m0[1u].x * (_1282 - _974)) + _974;
    float _1295 = (cbModelParam._m0[1u].x * (_1283 - _975)) + _975;
    float _1316 = fma(_1295, cbSceneParam._m0[89u].z, fma(_1294, cbSceneParam._m0[89u].y, _1293 * cbSceneParam._m0[89u].x));
    float _1319 = fma(_1295, cbSceneParam._m0[90u].z, fma(_1294, cbSceneParam._m0[90u].y, _1293 * cbSceneParam._m0[90u].x));
    float _1322 = fma(_1295, cbSceneParam._m0[91u].z, fma(_1294, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1293));
    float _1337 = _597 * 0.5;
    float _1338 = _598 * 0.5;
    float _1339 = _599 * 0.5;
    float _1340 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1271, _1274, _1277, _1280));
    float _1343 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1270, _1273, _1276, _1279));
    float _1346 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_1269, _1272, _1275, _1278));
    float _1380;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1353 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_960, _964, _967, _970));
        float _1357 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_962, _965, _968, _971));
        float _1361 = dot(vec4(_1337, _1338, _1339, 1.0), vec4(_963, _966, _969, _972));
        float _1368 = dot(vec4(cbModelParam._m0[39u]), vec4(_1337, _1338, _1339, 1.0));
        _1380 = dot(vec3(isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)), isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1368) ? 0.0 : (isnan(0.0) ? _1368 : max(0.0, _1368))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1380 = 1.0;
    }
    float _1391;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1382 = dot(vec4(cbModelParam._m0[40u]), vec4(_1337, _1338, _1339, 1.0));
        _1391 = dot(vec3(isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)), isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)), isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1382) ? 0.0 : (isnan(0.0) ? _1382 : max(0.0, _1382))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1391 = 1.0;
    }
    float _1395 = (_1391 * cbModelParam._m0[1u].x) + (_1380 * (1.0 - cbModelParam._m0[1u].x));
    float _1405 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _439);
    float _1406 = isnan(_1405) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1405 : min(cbModelParam._m0[25u].z, _1405));
    float _1486;
    float _1488;
    float _1490;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1453 = fma(_658, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _650)) + cbModelParam._m0[13u].w;
        float _1457 = fma(_658, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _650)) + cbModelParam._m0[14u].w;
        float _1461 = fma(_658, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _650)) + cbModelParam._m0[15u].w;
        float _1464 = fma(_599, cbModelParam._m0[13u].z, fma(_598, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _597));
        float _1467 = fma(_599, cbModelParam._m0[14u].z, fma(_598, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _597));
        float _1470 = fma(_599, cbModelParam._m0[15u].z, fma(_598, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _597));
        float _1498;
        if (_1464 > 0.0)
        {
            _1498 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1498 = frontier_phi_14_12_ladder;
        }
        float _1722;
        if (_1467 > 0.0)
        {
            _1722 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1722 = frontier_phi_23_19_ladder;
        }
        float _1968;
        if (_1470 > 0.0)
        {
            _1968 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1968 = frontier_phi_35_30_ladder;
        }
        float _1970 = isnan(_1722) ? _1498 : (isnan(_1498) ? _1722 : min(_1498, _1722));
        float _1971 = isnan(_1968) ? _1970 : (isnan(_1970) ? _1968 : min(_1970, _1968));
        float _1975 = (_1971 * _1464) + _1453;
        float _1976 = (_1971 * _1467) + _1457;
        float _1977 = (_1971 * _1470) + _1461;
        float _1978 = _1971 * 9.9999997473787516355514526367188e-05;
        float _1980 = (-1.0) - _1978;
        float _1982 = _1978 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1977 > _1982) || ((_1977 < _1980) || ((_1976 > _1982) || ((_1976 < _1980) || ((_1975 < _1980) || (_1975 > _1982))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2101 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1977, cbModelParam._m0[9u].z, fma(_1976, cbModelParam._m0[9u].y, _1975 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1977, cbModelParam._m0[10u].z, fma(_1976, cbModelParam._m0[10u].y, _1975 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1977, cbModelParam._m0[11u].z, fma(_1976, cbModelParam._m0[11u].y, _1975 * cbModelParam._m0[11u].x))), _1406);
            frontier_phi_13_35_ladder = _2101.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2101.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2101.x * cbModelParam._m0[1u].y;
        }
        _1486 = frontier_phi_13_35_ladder_2;
        _1488 = frontier_phi_13_35_ladder_1;
        _1490 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_597, _598, _599), _1406);
        _1486 = _1474.x * cbModelParam._m0[1u].y;
        _1488 = _1474.y * cbModelParam._m0[1u].y;
        _1490 = _1474.z * cbModelParam._m0[1u].y;
    }
    float _1494 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _439);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1494 : min(cbModelParam._m0[25u].w, _1494));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1549 = fma(_658, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _650)) + cbModelParam._m0[21u].w;
        float _1553 = fma(_658, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _650)) + cbModelParam._m0[22u].w;
        float _1557 = fma(_658, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _650)) + cbModelParam._m0[23u].w;
        float _1560 = fma(_599, cbModelParam._m0[21u].z, fma(_598, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _597));
        float _1563 = fma(_599, cbModelParam._m0[22u].z, fma(_598, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _597));
        float _1566 = fma(_599, cbModelParam._m0[23u].z, fma(_598, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _597));
        float _1727;
        if (_1560 > 0.0)
        {
            _1727 = abs((1.0 - _1549) / _1560);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1549 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1727 = frontier_phi_25_21_ladder;
        }
        float _1995;
        if (_1563 > 0.0)
        {
            _1995 = abs((1.0 - _1553) / _1563);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1553 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1995 = frontier_phi_37_32_ladder;
        }
        float _2200;
        if (_1566 > 0.0)
        {
            _2200 = abs((1.0 - _1557) / _1566);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1557 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2200 = frontier_phi_46_43_ladder;
        }
        float _2202 = isnan(_1995) ? _1727 : (isnan(_1727) ? _1995 : min(_1727, _1995));
        float _2203 = isnan(_2200) ? _2202 : (isnan(_2202) ? _2200 : min(_2202, _2200));
        float _2207 = (_2203 * _1560) + _1549;
        float _2208 = (_2203 * _1563) + _1553;
        float _2209 = (_2203 * _1566) + _1557;
        float _2210 = _2203 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2210;
        float _2213 = _2210 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2209 > _2213) || ((_2209 < _2211) || ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 < _2211) || (_2207 > _2213))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2209, cbModelParam._m0[17u].z, fma(_2208, cbModelParam._m0[17u].y, _2207 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2209, cbModelParam._m0[18u].z, fma(_2208, cbModelParam._m0[18u].y, _2207 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2209, cbModelParam._m0[19u].z, fma(_2208, cbModelParam._m0[19u].y, _2207 * cbModelParam._m0[19u].x))), _1495);
            frontier_phi_22_46_ladder = _2408.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2408.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2408.x * cbModelParam._m0[1u].z;
        }
        _1585 = frontier_phi_22_46_ladder_2;
        _1587 = frontier_phi_22_46_ladder_1;
        _1589 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_597, _598, _599), _1495);
        _1585 = _1569.x * cbModelParam._m0[1u].z;
        _1587 = _1569.y * cbModelParam._m0[1u].z;
        _1589 = _1569.z * cbModelParam._m0[1u].z;
    }
    float _1601 = ((((1.0 - _618) * ((_605 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_618 * _605)) * _589;
    float _1602 = _1601 * ((cbModelParam._m0[1u].w * (_1585 - _1486)) + _1486);
    float _1603 = _1601 * ((cbModelParam._m0[1u].w * (_1587 - _1488)) + _1488);
    float _1604 = _1601 * ((cbModelParam._m0[1u].w * (_1589 - _1490)) + _1490);
    float _1607 = fma(_1604, cbSceneParam._m0[89u].z, fma(_1603, cbSceneParam._m0[89u].y, _1602 * cbSceneParam._m0[89u].x));
    float _1610 = fma(_1604, cbSceneParam._m0[90u].z, fma(_1603, cbSceneParam._m0[90u].y, _1602 * cbSceneParam._m0[90u].x));
    float _1613 = fma(_1604, cbSceneParam._m0[91u].z, fma(_1603, cbSceneParam._m0[91u].y, _1602 * cbSceneParam._m0[91u].x));
    vec4 _1621 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_523, _524));
    float _1623 = _1621.w;
    float _1635 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1623);
    float _1636 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1623);
    float _1637 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1623);
    uvec4 _1641 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1643 = _1641.x * 14u;
    uint _1644 = _1643 + 13u;
    float _1651 = _589 + (-1.0);
    float _1656 = (cbLight._m0[_1644].x * _1651) + 1.0;
    float _1657 = (cbLight._m0[_1644].y * _1651) + 1.0;
    float _1658 = (cbLight._m0[_1644].z * _1651) + 1.0;
    float _1659 = (cbLight._m0[_1644].w * _1651) + 1.0;
    uint _1660 = _1643 + 5u;
    float _1666 = isnan(1.0) ? _1657 : (isnan(_1657) ? 1.0 : min(_1657, 1.0));
    uint _1670 = _1643 + 4u;
    float _1680 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
    uint _1684 = _1643 | 1u;
    float _1695 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_436, _437, _438));
    float _1698 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_436, _437, _438));
    float _3794 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _3805 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1703 = (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.3183098733425140380859375;
    float _1705 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
    float _1712 = ((cbLight._m0[_1660].x * _1666) * _1705) + (((cbLight._m0[_1670].x * _1635) * _1680) * _1703);
    float _1713 = ((_1666 * cbLight._m0[_1660].y) * _1705) + (((cbLight._m0[_1670].y * _1636) * _1680) * _1703);
    float _1714 = ((_1666 * cbLight._m0[_1660].z) * _1705) + (((cbLight._m0[_1670].z * _1637) * _1680) * _1703);
    uvec4 _1719 = floatBitsToUint(cbLight._m0[_1643 + 12u]);
    bool _1721 = _1719.x == 0u;
    float _1732;
    float _1734;
    float _1736;
    if (_1721)
    {
        _1732 = _1712;
        _1734 = _1713;
        _1736 = _1714;
    }
    else
    {
        uint _1740 = _1643 + 6u;
        float _1756 = (dot(vec3(cbLight._m0[_1643 + 2u].xyz), vec3(_436, _437, _438)) * 0.5) + 0.5;
        float _1757 = _1756 * _1756;
        float _3816 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
        float _1758 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1759 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _1732 = (((cbLight._m0[_1740].x * 0.3183098733425140380859375) * _1758) * _1759) + _1712;
        _1734 = (((cbLight._m0[_1740].y * 0.3183098733425140380859375) * _1758) * _1759) + _1713;
        _1736 = (((cbLight._m0[_1740].z * 0.3183098733425140380859375) * _1758) * _1759) + _1714;
    }
    bool _1739 = _1719.y == 0u;
    float _1777;
    float _1779;
    float _1781;
    if (_1739)
    {
        _1777 = _1732;
        _1779 = _1734;
        _1781 = _1736;
    }
    else
    {
        uint _1939 = _1643 + 7u;
        float _1955 = (dot(vec3(cbLight._m0[_1643 + 3u].xyz), vec3(_436, _437, _438)) * 0.5) + 0.5;
        float _1956 = _1955 * _1955;
        float _3832 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1957 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1958 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _1777 = (((cbLight._m0[_1939].x * 0.3183098733425140380859375) * _1957) * _1958) + _1732;
        _1779 = (((cbLight._m0[_1939].y * 0.3183098733425140380859375) * _1957) * _1958) + _1734;
        _1781 = (((cbLight._m0[_1939].z * 0.3183098733425140380859375) * _1957) * _1958) + _1736;
    }
    uint _1784 = _1643 + 8u;
    float _1797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1643].w)) * _439) * 0.949999988079071044921875);
    float _1798 = _1797 * _1797;
    float _1799 = cbLight._m0[_1643].x + _515;
    float _1800 = cbLight._m0[_1643].y + _516;
    float _1801 = cbLight._m0[_1643].z + _517;
    float _1805 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
    float _1806 = _1805 * _1799;
    float _1807 = _1805 * _1800;
    float _1808 = _1805 * _1801;
    float _1809 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_1643].xyz));
    float _3848 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _1813 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _1814 = dot(vec3(_436, _437, _438), vec3(_1806, _1807, _1808));
    float _3870 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1817 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1818 = dot(vec3(cbLight._m0[_1643].xyz), vec3(_1806, _1807, _1808));
    float _3881 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1822 = _1798 * _1798;
    float _1826 = ((_1817 * _1817) * (_1822 + (-1.0))) + 1.0;
    float _1837 = (exp2(log2(1.0 - (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1838 = 1.0 - _1798;
    float _1849 = (0.5 / (((_1813 * ((_1812 * _1838) + _1798)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _1838) + _1798) * _1812))) * _1812;
    float _3892 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1851 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * (_1822 / ((_1826 * _1826) * 3.141590118408203125));
    uint _1865 = _1643 + 9u;
    float _1876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1684].w)) * _439) * 0.949999988079071044921875);
    float _1877 = _1876 * _1876;
    float _1878 = cbLight._m0[_1684].x + _515;
    float _1879 = cbLight._m0[_1684].y + _516;
    float _1880 = cbLight._m0[_1684].z + _517;
    float _1884 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
    float _1885 = _1884 * _1878;
    float _1886 = _1884 * _1879;
    float _1887 = _1884 * _1880;
    float _1888 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_1684].xyz));
    float _3903 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1892 = dot(vec3(_436, _437, _438), vec3(_1885, _1886, _1887));
    float _3914 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _1896 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_1885, _1886, _1887));
    float _3925 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1900 = _1877 * _1877;
    float _1904 = ((_1895 * _1895) * (_1900 + (-1.0))) + 1.0;
    float _1913 = (exp2(log2(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1914 = 1.0 - _1877;
    float _1924 = (0.5 / (((_1813 * ((_1891 * _1914) + _1877)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _1914) + _1877) * _1891))) * _1891;
    float _3936 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1926 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1900 / ((_1904 * _1904) * 3.141590118408203125));
    float _1936 = (((_1913 * cbLight._m0[_1865].x) * _1926) * _1666) + ((((cbLight._m0[_1784].x * _1635) * _1837) * _1851) * _1680);
    float _1937 = (((_1913 * cbLight._m0[_1865].y) * _1926) * _1666) + ((((cbLight._m0[_1784].y * _1636) * _1837) * _1851) * _1680);
    float _1938 = (((_1913 * cbLight._m0[_1865].z) * _1926) * _1666) + ((((cbLight._m0[_1784].z * _1637) * _1837) * _1851) * _1680);
    float _2000;
    float _2002;
    float _2004;
    if (_1721)
    {
        _2000 = _1936;
        _2002 = _1937;
        _2004 = _1938;
    }
    else
    {
        uint _2006 = _1643 + 2u;
        uint _2010 = _1643 + 10u;
        float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _439) * 0.949999988079071044921875);
        float _2025 = _2024 * _2024;
        float _2026 = cbLight._m0[_2006].x + _515;
        float _2027 = cbLight._m0[_2006].y + _516;
        float _2028 = cbLight._m0[_2006].z + _517;
        float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
        float _2033 = _2032 * _2026;
        float _2034 = _2032 * _2027;
        float _2035 = _2032 * _2028;
        float _2036 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_2006].xyz));
        float _3947 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2039 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _2040 = dot(vec3(_436, _437, _438), vec3(_2033, _2034, _2035));
        float _3958 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2043 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2044 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2033, _2034, _2035));
        float _3969 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2048 = _2025 * _2025;
        float _2052 = ((_2043 * _2043) * (_2048 + (-1.0))) + 1.0;
        float _2061 = (exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2062 = 1.0 - _2025;
        float _2072 = (0.5 / (((_1813 * ((_2039 * _2062) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _2062) + _2025) * _2039))) * _2039;
        float _3980 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2074 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_2048 / ((_2052 * _2052) * 3.141590118408203125));
        float _2075 = isnan(1.0) ? _1658 : (isnan(_1658) ? 1.0 : min(_1658, 1.0));
        _2000 = (((_2061 * cbLight._m0[_2010].x) * _2074) * _2075) + _1936;
        _2002 = (((_2061 * cbLight._m0[_2010].y) * _2074) * _2075) + _1937;
        _2004 = (((_2061 * cbLight._m0[_2010].z) * _2074) * _2075) + _1938;
    }
    float _2110;
    float _2112;
    float _2114;
    if (_1739)
    {
        _2110 = _2000;
        _2112 = _2002;
        _2114 = _2004;
    }
    else
    {
        uint _2121 = _1643 + 3u;
        uint _2125 = _1643 + 11u;
        float _2139 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _439) * 0.949999988079071044921875);
        float _2140 = _2139 * _2139;
        float _2141 = cbLight._m0[_2121].x + _515;
        float _2142 = cbLight._m0[_2121].y + _516;
        float _2143 = cbLight._m0[_2121].z + _517;
        float _2147 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
        float _2148 = _2147 * _2141;
        float _2149 = _2147 * _2142;
        float _2150 = _2147 * _2143;
        float _2151 = dot(vec3(_436, _437, _438), vec3(cbLight._m0[_2121].xyz));
        float _3996 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2154 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _2155 = dot(vec3(_436, _437, _438), vec3(_2148, _2149, _2150));
        float _4007 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2158 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _2159 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2148, _2149, _2150));
        float _4018 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2163 = _2140 * _2140;
        float _2167 = ((_2158 * _2158) * (_2163 + (-1.0))) + 1.0;
        float _2176 = (exp2(log2(1.0 - (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2177 = 1.0 - _2140;
        float _2187 = (0.5 / (((_1813 * ((_2154 * _2177) + _2140)) + 9.9999999392252902907785028219223e-09) + (((_1813 * _2177) + _2140) * _2154))) * _2154;
        float _4029 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2189 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2163 / ((_2167 * _2167) * 3.141590118408203125));
        float _2190 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
        _2110 = (((_2176 * cbLight._m0[_2125].x) * _2189) * _2190) + _2000;
        _2112 = (((_2176 * cbLight._m0[_2125].y) * _2189) * _2190) + _2002;
        _2114 = (((_2176 * cbLight._m0[_2125].z) * _2189) * _2190) + _2004;
    }
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    if (_1641.y == 0u)
    {
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2265;
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2265;
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2265;
        uvec4 _2280 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2281 = _2280.x;
        uint _2292 = uint((float(_2280.y) * floor(float(uint(cbSceneParam._m0[85u].y * _524) / _2281))) + floor(float(uint(cbSceneParam._m0[85u].x * _523) / _2281)));
        float _2302 = (log2(_2268 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2303 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        uint _2306 = uint(isnan(14.0) ? _2303 : (isnan(_2303) ? 14.0 : min(_2303, 14.0)));
        uvec4 _2311 = texelFetch(g_lightClusterGridBuffer, int(((_2306 << 2u) + (_2292 << 6u)) >> 2u));
        uint _2312 = _2311.x;
        uint _2313 = _2280.z;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        if (((((1u << ((_2313 >> 4u) & 15u)) + 4294967295u) & _2312) == 0u) || ((_2313 & 240u) == 0u))
        {
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
        }
        else
        {
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2558 = 0.0;
            float _2559 = 0.0;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            uint _2564 = 0u;
            uint _2573;
            bool _2574;
            for (;;)
            {
                _2573 = texelFetch(g_lightClassification, int((((_2306 << 5u) + (_2292 << 9u)) + (_2564 << 2u)) >> 2u)).x;
                _2574 = _2573 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2574)
                {
                    frontier_phi_61_pred = _2558;
                    frontier_phi_61_pred_1 = _2563;
                    frontier_phi_61_pred_2 = _2562;
                    frontier_phi_61_pred_3 = _2561;
                    frontier_phi_61_pred_4 = _2560;
                    frontier_phi_61_pred_5 = _2559;
                }
                else
                {
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    uint _2688;
                    _2682 = _2558;
                    _2683 = _2559;
                    _2684 = _2560;
                    _2685 = _2561;
                    _2686 = _2562;
                    _2687 = _2563;
                    _2688 = _2573;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    for (;;)
                    {
                        uint _2692 = uint(findLSB(_2688)) + (_2564 << 5u);
                        uint _2689 = (_2688 + 4294967295u) & _2688;
                        uint _2694 = _2692 * 48u;
                        vec4 _2708 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 3u)).x));
                        uint _2714 = (_2692 * 48u) + 4u;
                        vec4 _2727 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        uint _2733 = (_2692 * 48u) + 8u;
                        vec3 _2744 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2733)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 2u)).x));
                        float _2748 = _2708.x - _2266;
                        float _2749 = _2708.y - _2267;
                        float _2750 = _2708.z - _2268;
                        float _2751 = dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750));
                        float _2754 = inversesqrt(_2751);
                        float _2755 = _2754 * _2748;
                        float _2756 = _2754 * _2749;
                        float _2757 = _2754 * _2750;
                        float _2758 = dot(vec3(_545, _548, _551), vec3(_2755, _2756, _2757));
                        float _2763 = 1.0 - (_2751 * _2708.w);
                        float _4055 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2764 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2765 = sqrt(_2751) * _2727.w;
                        float _2768 = 1.39999997615814208984375 / (_2765 + 1.39999997615814208984375);
                        float _2769 = _2768 * _2768;
                        float _2772 = ((1.0 - _2769) * _2758) + _2769;
                        float _2775 = _2765 * _2765;
                        float _2779 = ((isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0))) * _2764) / ((_2775 * 0.699999988079071044921875) + 1.0);
                        float _2783 = (-0.0) - _2266;
                        float _2784 = (-0.0) - _2267;
                        float _2785 = (-0.0) - _2268;
                        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
                        float _2790 = _2789 * _2783;
                        float _2791 = _2789 * _2784;
                        float _2792 = _2789 * _2785;
                        float _2800 = exp2(log2(1.0 / ((_2775 * 3.5) + 5.0)) * 0.25);
                        float _2801 = 1.0 - _605;
                        float _2808 = sqrt(1.0 - ((1.0 - (_2801 * _2801)) * (1.0 - (_2800 * _2800))));
                        float _2809 = _2808 * _2808;
                        float _2810 = _2809 * _2809;
                        float _2811 = _2790 + _2755;
                        float _2812 = _2791 + _2756;
                        float _2813 = _2792 + _2757;
                        float _2817 = inversesqrt(dot(vec3(_2811, _2812, _2813), vec3(_2811, _2812, _2813)));
                        float _2821 = dot(vec3(_545, _548, _551), vec3(_2790, _2791, _2792));
                        float _4071 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2824 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2825 = dot(vec3(_545, _548, _551), vec3(_2817 * _2811, _2817 * _2812, _2817 * _2813));
                        float _4082 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2828 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2832 = ((_2828 * _2828) * (_2810 + (-1.0))) + 1.0;
                        float _2833 = _2768 * _2809;
                        float _2834 = _2833 * _2833;
                        float _2837 = ((1.0 - _2834) * _2758) + _2834;
                        float _4093 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2838 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                        float _2839 = 1.0 - _2809;
                        float _2849 = (0.5 / (((_2838 * ((_2824 * _2839) + _2809)) + 9.9999999392252902907785028219223e-09) + (((_2838 * _2839) + _2809) * _2824))) * _2838;
                        float _4104 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2860 = (((_2810 * 3.1415927410125732421875) * (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0)))) / ((_2832 * _2832) * ((_2775 * 2.1991131305694580078125) + 3.141590118408203125))) * _2764;
                        _2617 = (_2779 * _2727.x) + _2685;
                        _2618 = (_2779 * _2727.y) + _2686;
                        _2619 = (_2779 * _2727.z) + _2687;
                        _2614 = (_2860 * _2744.x) + _2682;
                        _2615 = (_2860 * _2744.y) + _2683;
                        _2616 = (_2860 * _2744.z) + _2684;
                        if (_2689 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2682 = _2614;
                            _2683 = _2615;
                            _2684 = _2616;
                            _2685 = _2617;
                            _2686 = _2618;
                            _2687 = _2619;
                            _2688 = _2689;
                        }
                    }
                    frontier_phi_61_pred = _2614;
                    frontier_phi_61_pred_1 = _2619;
                    frontier_phi_61_pred_2 = _2618;
                    frontier_phi_61_pred_3 = _2617;
                    frontier_phi_61_pred_4 = _2616;
                    frontier_phi_61_pred_5 = _2615;
                }
                _2414 = frontier_phi_61_pred;
                _2424 = frontier_phi_61_pred_1;
                _2422 = frontier_phi_61_pred_2;
                _2420 = frontier_phi_61_pred_3;
                _2418 = frontier_phi_61_pred_4;
                _2416 = frontier_phi_61_pred_5;
                uint _2565 = _2564 + 1u;
                if (_2565 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2558 = _2414;
                    _2559 = _2416;
                    _2560 = _2418;
                    _2561 = _2420;
                    _2562 = _2422;
                    _2563 = _2424;
                    _2564 = _2565;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
        }
        uvec4 _2427 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2428 = _2427.z;
        uint _2430 = (_2428 >> 8u) & 15u;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        if (((4294967295u << _2430) & _2312) == 0u)
        {
            _2526 = _2413;
            _2528 = _2415;
            _2530 = _2417;
            _2532 = _2419;
            _2534 = _2421;
            _2536 = _2423;
        }
        else
        {
            float _2551 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
            float _2552 = _2551 * _2266;
            float _2553 = _2551 * _2267;
            float _2554 = _2551 * _2268;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2430 < ((_2428 >> 12u) & 15u))
            {
                float _2527;
                float _2529;
                float _2531;
                float _2533;
                float _2535;
                float _2537;
                float _2665 = _2413;
                float _2666 = _2415;
                float _2667 = _2417;
                float _2668 = _2419;
                float _2669 = _2421;
                float _2670 = _2423;
                uint _2671 = _2430;
                uint _2680;
                bool _2681;
                for (;;)
                {
                    _2680 = texelFetch(g_lightClassification, int((((_2306 << 5u) + (_2292 << 9u)) + (_2671 << 2u)) >> 2u)).x;
                    _2681 = _2680 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2681)
                    {
                        frontier_phi_67_pred = _2668;
                        frontier_phi_67_pred_1 = _2669;
                        frontier_phi_67_pred_2 = _2670;
                        frontier_phi_67_pred_3 = _2667;
                        frontier_phi_67_pred_4 = _2666;
                        frontier_phi_67_pred_5 = _2665;
                    }
                    else
                    {
                        float _2865;
                        float _2866;
                        float _2867;
                        float _2868;
                        float _2869;
                        float _2870;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3164;
                        float _3165;
                        float _2878 = _2665;
                        float _2879 = _2666;
                        float _2880 = _2667;
                        float _2881 = _2668;
                        float _2882 = _2669;
                        float _2883 = _2670;
                        uint _2884 = _2680;
                        uint _2885;
                        vec4 _2910;
                        float _2911;
                        vec4 _2926;
                        vec3 _2938;
                        vec4 _2954;
                        vec4 _2970;
                        float _3016;
                        bool _3017;
                        for (;;)
                        {
                            uint _2895 = ((_2671 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2884));
                            _2885 = (_2884 + 4294967295u) & _2884;
                            uint _2897 = _2895 * 40u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            _2911 = _2910.w;
                            uint _2913 = (_2895 * 40u) + 4u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2928 = (_2895 * 40u) + 8u;
                            _2938 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x));
                            uint _2941 = (_2895 * 40u) + 16u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2957 = (_2895 * 40u) + 20u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2972 = (_2895 * 40u) + 24u;
                            vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2991 = (_2895 * 40u) + 28u;
                            vec4 _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            _3016 = fma(_2268, _3004.z, fma(_2267, _3004.y, _3004.x * _2266)) + _3004.w;
                            _3017 = !((fma(_2268, _2985.z, fma(_2267, _2985.y, _2985.x * _2266)) + _2985.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3017)
                            {
                                float _3044 = _2910.x - _2266;
                                float _3045 = _2910.y - _2267;
                                float _3046 = _2910.z - _2268;
                                float _3047 = dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046));
                                float _3050 = inversesqrt(_3047);
                                float _3051 = _3050 * _3044;
                                float _3052 = _3050 * _3045;
                                float _3053 = _3050 * _3046;
                                float _3057 = 1.0 - (_3047 / (_2911 * _2911));
                                float _4115 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
                                float _3058 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3062 = sqrt(_3047) * _2926.w;
                                float _3064 = 1.39999997615814208984375 / (_3062 + 1.39999997615814208984375);
                                float _3065 = _3064 * _3064;
                                float _3068 = ((1.0 - _3065) * dot(vec3(_3051, _3052, _3053), vec3(_545, _548, _551))) + _3065;
                                float _3071 = _3062 * _3062;
                                float _3075 = (fma(_2268, _2954.z, fma(_2267, _2954.y, _2954.x * _2266)) + _2954.w) / _3016;
                                float _3076 = (fma(_2268, _2970.z, fma(_2267, _2970.y, _2970.x * _2266)) + _2970.w) / _3016;
                                float _3080 = 1.0 - dot(vec2(_3075, _3076), vec2(_3075, _3076));
                                float _4131 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                                float _3081 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3082 = _3081 * (((isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0))) * _3058) / ((_3071 * 0.699999988079071044921875) + 1.0));
                                float _3094 = exp2(log2(1.0 / ((_3071 * 3.5) + 5.0)) * 0.25);
                                float _3095 = 1.0 - _605;
                                float _3102 = sqrt(1.0 - ((1.0 - (_3095 * _3095)) * (1.0 - (_3094 * _3094))));
                                float _3103 = _3102 * _3102;
                                float _3104 = _3103 * _3103;
                                float _3105 = _3051 - _2552;
                                float _3106 = _3052 - _2553;
                                float _3107 = _3053 - _2554;
                                float _3111 = inversesqrt(dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107)));
                                float _3115 = dot(vec3(_545, _548, _551), vec3((-0.0) - _2552, (-0.0) - _2553, (-0.0) - _2554));
                                float _4142 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3118 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3119 = dot(vec3(_545, _548, _551), vec3(_3111 * _3105, _3111 * _3106, _3111 * _3107));
                                float _4153 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3122 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3126 = ((_3122 * _3122) * (_3104 + (-1.0))) + 1.0;
                                float _3127 = _3064 * _3103;
                                float _3128 = _3127 * _3127;
                                float _3134 = ((1.0 - _3128) * dot(vec3(_545, _548, _551), vec3(_3051, _3052, _3053))) + _3128;
                                float _4164 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                                float _3136 = 1.0 - _3103;
                                float _3146 = (0.5 / (((_3135 * ((_3118 * _3136) + _3103)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3136) + _3103) * _3118))) * _3135;
                                float _4175 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3156 = (_3081 * _3058) * (((_3104 * 3.1415927410125732421875) * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) / ((_3126 * _3126) * ((_3071 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3156 * _2938.x;
                                frontier_phi_73_pred_1 = _3156 * _2938.y;
                                frontier_phi_73_pred_2 = _3082 * _2926.z;
                                frontier_phi_73_pred_3 = _3082 * _2926.y;
                                frontier_phi_73_pred_4 = _3082 * _2926.x;
                                frontier_phi_73_pred_5 = _3156 * _2938.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3160 = frontier_phi_73_pred;
                            _3161 = frontier_phi_73_pred_1;
                            _3165 = frontier_phi_73_pred_2;
                            _3164 = frontier_phi_73_pred_3;
                            _3163 = frontier_phi_73_pred_4;
                            _3162 = frontier_phi_73_pred_5;
                            _2868 = _3163 + _2881;
                            _2869 = _3164 + _2882;
                            _2870 = _3165 + _2883;
                            _2865 = _3160 + _2878;
                            _2866 = _3161 + _2879;
                            _2867 = _3162 + _2880;
                            if (_2885 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2868;
                                _2882 = _2869;
                                _2883 = _2870;
                                _2884 = _2885;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2868;
                        frontier_phi_67_pred_1 = _2869;
                        frontier_phi_67_pred_2 = _2870;
                        frontier_phi_67_pred_3 = _2867;
                        frontier_phi_67_pred_4 = _2866;
                        frontier_phi_67_pred_5 = _2865;
                    }
                    _2533 = frontier_phi_67_pred;
                    _2535 = frontier_phi_67_pred_1;
                    _2537 = frontier_phi_67_pred_2;
                    _2531 = frontier_phi_67_pred_3;
                    _2529 = frontier_phi_67_pred_4;
                    _2527 = frontier_phi_67_pred_5;
                    uint _2672 = _2671 + 1u;
                    if (_2672 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2665 = _2527;
                        _2666 = _2529;
                        _2667 = _2531;
                        _2668 = _2533;
                        _2669 = _2535;
                        _2670 = _2537;
                        _2671 = _2672;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2535;
                frontier_phi_55_56_ladder_1 = _2537;
                frontier_phi_55_56_ladder_2 = _2533;
                frontier_phi_55_56_ladder_3 = _2531;
                frontier_phi_55_56_ladder_4 = _2529;
                frontier_phi_55_56_ladder_5 = _2527;
            }
            else
            {
                frontier_phi_55_56_ladder = _2421;
                frontier_phi_55_56_ladder_1 = _2423;
                frontier_phi_55_56_ladder_2 = _2419;
                frontier_phi_55_56_ladder_3 = _2417;
                frontier_phi_55_56_ladder_4 = _2415;
                frontier_phi_55_56_ladder_5 = _2413;
            }
            _2526 = frontier_phi_55_56_ladder_5;
            _2528 = frontier_phi_55_56_ladder_4;
            _2530 = frontier_phi_55_56_ladder_3;
            _2532 = frontier_phi_55_56_ladder_2;
            _2534 = frontier_phi_55_56_ladder;
            _2536 = frontier_phi_55_56_ladder_1;
        }
        float _2541 = isnan(1.0) ? _589 : (isnan(_589) ? 1.0 : min(_589, 1.0));
        _2325 = (_2541 * _2532) + _1777;
        _2327 = (_2541 * _2534) + _1779;
        _2329 = (_2541 * _2536) + _1781;
        _2331 = ((_2526 * 0.039999999105930328369140625) * _2541) + _2110;
        _2333 = ((_2528 * 0.039999999105930328369140625) * _2541) + _2112;
        _2335 = ((_2530 * 0.039999999105930328369140625) * _2541) + _2114;
    }
    else
    {
        _2325 = _1777;
        _2327 = _1779;
        _2329 = _1781;
        _2331 = _2110;
        _2333 = _2112;
        _2335 = _2114;
    }
    float _4191 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4202 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4213 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    uint _2355 = _222 + 6u;
    float _2363 = _523 / cbSceneParam._m0[86u].x;
    float _2364 = _524 / cbSceneParam._m0[86u].y;
    vec4 _2378 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, (log2((isnan(cbSceneParam._m0[77u].w) ? _457 : (isnan(_457) ? cbSceneParam._m0[77u].w : min(_457, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2380 = _2378.x;
    float _2381 = _2378.y;
    float _2382 = _2378.z;
    float _2383 = _2378.w;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    if (_457 > cbSceneParam._m0[78u].w)
    {
        float _2438 = isnan(_457) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _457 : min(cbSceneParam._m0[80u].w, _457));
        float _2439 = _2438 / _457;
        float _2450 = _2439 * _508;
        float _2451 = _509 * _2439;
        float _2452 = (-0.0) - _2451;
        float _2454 = _2439 * _510;
        float _2456 = (cbSceneParam._m0[77u].w * _2452) / _2438;
        float _2457 = _2456 + cbSceneParam._m0[79u].w;
        float _2458 = cbSceneParam._m0[79u].w - _2451;
        float _2464 = sqrt(((_2450 * _2450) + (_2451 * _2451)) + (_2454 * _2454));
        float _2467 = (1.0 - (cbSceneParam._m0[77u].w / _2438)) * _2464;
        float _2472 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2474 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2627;
        if (abs((_2452 - _2456) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2627 = ((((_2457 > 0.0) ? exp2(_2472 * _2457) : (2.0 - exp2(_2474 * _2457))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2467;
        }
        else
        {
            float _2587 = 1.0 / cbSceneParam._m0[80u].x;
            float _2588 = isnan(_2458) ? _2457 : (isnan(_2457) ? _2458 : max(_2457, _2458));
            float _2589 = isnan(_2458) ? _2457 : (isnan(_2457) ? _2458 : min(_2457, _2458));
            float _2598 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : min(_2588, 0.0));
            float _2599 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : min(_2589, 0.0));
            _2627 = ((abs(_2464 / _2452) * cbSceneParam._m0[80u].y) * ((((_2598 - _2599) * 2.0) - ((exp2(_2472 * (isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0)))) - exp2(_2472 * (isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0))))) * _2587)) - ((exp2(_2474 * _2598) - exp2(_2474 * _2599)) * _2587))) + (_2467 * cbSceneParam._m0[80u].z);
        }
        vec4 _2629 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2363, _2364, 1.0), 0.0);
        float _2638 = exp2((_2627 * (-1.44269502162933349609375)) * (1.0 - _2629.w));
        float _2639 = log2(_2638);
        float _2655 = log2(_2383);
        _2476 = (exp2(_2655 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].x)) * _2629.x) / cbSceneParam._m0[78u].x)) + _2380;
        _2478 = (exp2(_2655 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].y)) * _2629.y) / cbSceneParam._m0[78u].y)) + _2381;
        _2480 = (exp2(_2655 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].z)) * _2629.z) / cbSceneParam._m0[78u].z)) + _2382;
        _2482 = _2638 * _2383;
    }
    else
    {
        _2476 = _2380;
        _2478 = _2381;
        _2480 = _2382;
        _2482 = _2383;
    }
    float _2494 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2495 = _2494 == 3.0;
    float _2496 = log2(_2482);
    float _2503 = exp2(_2496 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2325 + ((isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))) * _589))) + ((_2331 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _1395)) * cbPerFrame._m0[3u].x));
    float _2504 = exp2(_2496 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2327 + ((isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0))) * _589))) + ((_2333 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _1395)) * cbPerFrame._m0[3u].x));
    float _2505 = exp2(_2496 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_2329 + ((isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))) * _589))) + ((_2335 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _1395)) * cbPerFrame._m0[3u].x));
    float _2514 = (_2494 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2514 * (_2495 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2476)));
    SV_Target.y = _2514 * (_2495 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2478)));
    SV_Target.z = _2514 * (_2495 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2480)));
    SV_Target.w = cbInstanceData._m0[_2355].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2355].w;
}


