#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1141;
float _3500;
float _3501;
float _3502;
float _3503;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3512 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _439 = _435.z;
    float _448 = ((_418.z - _439) * _370) + _439;
    float _451 = ((((_418.x - _437) * _370) + _437) * 2.0) + (-1.0);
    float _453 = ((((_418.y - _438) * _370) + _438) * 2.0) + (-1.0);
    float _454 = dot(vec2(_451, _453), vec2(_451, _453));
    float _3523 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))));
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _492 = _490.x;
    float _493 = 1.0 - _492;
    float _506 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_492 - _493) * cbMtdParam._m0[24u].z) + _493) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3534 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _514 = (_507 * ((_398.x * cbMtdParam._m0[18u].x) - _377)) + _377;
    float _515 = (_507 * ((_398.y * cbMtdParam._m0[18u].y) - _378)) + _378;
    float _516 = (_507 * ((_398.z * cbMtdParam._m0[18u].z) - _379)) + _379;
    vec4 _529 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _536 = (_529.x * 2.0) + (-1.0);
    float _537 = (_529.y * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3545 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _546 = (_507 * (_529.z - _448)) + _448;
    float _558 = (((_536 - _451) + (cbMtdParam._m0[21u].x * _451)) * _507) + _451;
    float _559 = (((_537 - _453) + (cbMtdParam._m0[21u].x * _453)) * _507) + _453;
    float _560 = (_507 * (sqrt(1.0 - (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) - _459)) + _459;
    float _565 = cbMtdParam._m0[22u].x + _472.w;
    float _568 = fma(_560, _221 * NORMAL.x, fma(_559, _228 * TANGENT.x, (_214 * _206) * _558));
    float _571 = fma(_560, _221 * NORMAL.y, fma(_559, _228 * TANGENT.y, (_214 * _207) * _558));
    float _574 = fma(_560, _221 * NORMAL.z, fma(_559, _228 * TANGENT.z, (_214 * _208) * _558));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3556 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _582 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3578 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _3589 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _3600 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _600 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _652 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _642);
    float _653 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _642);
    float _654 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _642);
    float _658 = inversesqrt(dot(vec3(_652, _653, _654), vec3(_652, _653, _654)));
    float _659 = _652 * _658;
    float _660 = _653 * _658;
    float _661 = _654 * _658;
    vec4 _666 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _668 = _666.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _822 = sqrt(((_652 * _652) + (_653 * _653)) + (_654 * _654));
        float _828 = (cbMatDynParam._m0[5u].x * _822) + cbMatDynParam._m0[5u].y;
        float _3611 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _833 = (cbMatDynParam._m0[5u].z * _822) + cbMatDynParam._m0[5u].w;
        float _3622 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) - _829)) + _829) < ((_668 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _679 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _680 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _698 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _701 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _704 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    uint _717 = _234 + 9u;
    uint _718 = _717 + uint(cbMatDynParam._m0[0u].w);
    float _724 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * cbInstanceData._m0[_718].x;
    float _725 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * cbInstanceData._m0[_718].y;
    float _726 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_718].z;
    float _3633 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    vec4 _738 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _679, cbSceneParam._m0[86u].y * _680));
    float _742 = ((isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * TEXCOORD_5.w) * _738.x;
    float _743 = dot(vec3(_579, _580, _581), vec3(_659, _660, _661));
    float _746 = _743 * 2.0;
    float _750 = (_746 * _579) - _659;
    float _751 = (_746 * _580) - _660;
    float _752 = (_746 * _581) - _661;
    float _756 = abs(dot(vec3(_659, _660, _661), vec3(_579, _580, _581)));
    float _3666 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _758 = sqrt(_582);
    float _771 = exp2((_758 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_758 * 3.0));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1140;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _865 = fma(_811, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803));
        float _869 = fma(_811, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803));
        float _873 = fma(_811, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803));
        float _898 = _803 + _579;
        float _899 = _807 + _580;
        float _900 = _811 + _581;
        float _910 = fma(_900, cbModelParam._m0[26u].z, fma(_899, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _898)) - _865;
        float _911 = fma(_900, cbModelParam._m0[27u].z, fma(_899, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _898)) - _869;
        float _912 = fma(_900, cbModelParam._m0[28u].z, fma(_899, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _898)) - _873;
        float _916 = inversesqrt(dot(vec3(_910, _911, _912), vec3(_910, _911, _912)));
        float _929 = ((_916 * _910) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_865 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_916 * _911) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_869 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_916 * _912) / cbModelParam._m0[34u].z) + ((((((_873 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _948 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_929, _930, _931), 0.0);
        float _968 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_934.x + (-0.5));
        float _970 = _968 * (_934.y + (-0.5));
        float _971 = _968 * (_934.z + (-0.5));
        float _978 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_941.x + (-0.5));
        float _980 = _978 * (_941.y + (-0.5));
        float _981 = _978 * (_941.z + (-0.5));
        float _988 = exp2((_948.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_948.x + (-0.5));
        float _990 = _988 * (_948.y + (-0.5));
        float _991 = _988 * (_948.z + (-0.5));
        float _998 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_955.x + (-0.5));
        float _1000 = _998 * (_955.y + (-0.5));
        float _1001 = _998 * (_955.z + (-0.5));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = _969 * 0.5;
        float _1006 = _979 * 0.5;
        float _1007 = _989 * 0.5;
        float _1008 = dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007));
        float _1013 = (_1008 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1008);
        float _1022 = (dot(vec3(_579, _580, _581), vec3(_1013 * _1005, _1013 * _1006, _1013 * _1007)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1032 = sqrt(((_1006 * _1006) + (_1005 * _1005)) + (_1007 * _1007)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3714 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1034 + 1.0))) + _1039) * _1002;
        float _1049 = _970 * 0.5;
        float _1050 = _980 * 0.5;
        float _1051 = _990 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1065 = (dot(vec3(_579, _580, _581), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1074 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3747 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1076 + 1.0))) + _1081) * _1003;
        float _1091 = _971 * 0.5;
        float _1092 = _981 * 0.5;
        float _1093 = _991 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_579, _580, _581), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3780 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1118 + 1.0))) + _1123) * _1004;
        _1140 = _971;
        _1142 = _970;
        _1143 = _969;
        _1144 = _981;
        _1145 = _980;
        _1146 = _979;
        _1147 = _991;
        _1148 = _990;
        _1149 = _989;
        _1150 = _1004;
        _1151 = _1003;
        _1152 = _1002;
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
    }
    else
    {
        _1140 = _1141;
        _1142 = _1141;
        _1143 = _1141;
        _1144 = _1141;
        _1145 = _1141;
        _1146 = _1141;
        _1147 = _1141;
        _1148 = _1141;
        _1149 = _1141;
        _1150 = _1141;
        _1151 = _1141;
        _1152 = _1141;
        _1153 = 0.0;
        _1154 = 0.0;
        _1155 = 0.0;
    }
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1183 = fma(_811, cbModelParam._m0[30u].z, fma(_807, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _803));
        float _1187 = fma(_811, cbModelParam._m0[31u].z, fma(_807, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _803));
        float _1191 = fma(_811, cbModelParam._m0[32u].z, fma(_807, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _803));
        float _1214 = _803 + _579;
        float _1215 = _807 + _580;
        float _1216 = _811 + _581;
        float _1226 = fma(_1216, cbModelParam._m0[30u].z, fma(_1215, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1214)) - _1183;
        float _1227 = fma(_1216, cbModelParam._m0[31u].z, fma(_1215, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1214)) - _1187;
        float _1228 = fma(_1216, cbModelParam._m0[32u].z, fma(_1215, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1214)) - _1191;
        float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
        float _1245 = ((_1232 * _1226) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1183 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1232 * _1227) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1187 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1232 * _1228) / cbModelParam._m0[35u].z) + ((((((_1191 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        float _1282 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1249.x + (-0.5));
        float _1284 = _1282 * (_1249.y + (-0.5));
        float _1285 = _1282 * (_1249.z + (-0.5));
        float _1292 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1256.x + (-0.5));
        float _1294 = _1292 * (_1256.y + (-0.5));
        float _1295 = _1292 * (_1256.z + (-0.5));
        float _1302 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1263.x + (-0.5));
        float _1304 = _1302 * (_1263.y + (-0.5));
        float _1305 = _1302 * (_1263.z + (-0.5));
        float _1312 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1270.x + (-0.5));
        float _1314 = _1312 * (_1270.y + (-0.5));
        float _1315 = _1312 * (_1270.z + (-0.5));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = _1283 * 0.5;
        float _1320 = _1293 * 0.5;
        float _1321 = _1303 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_579, _580, _581), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3843 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1346 + 1.0))) + _1351) * _1316;
        float _1361 = _1284 * 0.5;
        float _1362 = _1294 * 0.5;
        float _1363 = _1304 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_579, _580, _581), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3876 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1388 + 1.0))) + _1393) * _1317;
        float _1403 = _1285 * 0.5;
        float _1404 = _1295 * 0.5;
        float _1405 = _1305 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_579, _580, _581), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3909 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1430 + 1.0))) + _1435) * _1318;
        _1452 = _1285;
        _1453 = _1284;
        _1454 = _1283;
        _1455 = _1295;
        _1456 = _1294;
        _1457 = _1293;
        _1458 = _1305;
        _1459 = _1304;
        _1460 = _1303;
        _1461 = _1318;
        _1462 = _1317;
        _1463 = _1316;
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
    }
    else
    {
        _1452 = _1141;
        _1453 = _1141;
        _1454 = _1141;
        _1455 = _1141;
        _1456 = _1141;
        _1457 = _1141;
        _1458 = _1141;
        _1459 = _1141;
        _1460 = _1141;
        _1461 = _1141;
        _1462 = _1141;
        _1463 = _1141;
        _1464 = 0.0;
        _1465 = 0.0;
        _1466 = 0.0;
    }
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1153)) + _1153;
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1154)) + _1154;
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1155)) + _1155;
    float _1499 = fma(_1478, cbSceneParam._m0[89u].z, fma(_1477, cbSceneParam._m0[89u].y, _1476 * cbSceneParam._m0[89u].x));
    float _1502 = fma(_1478, cbSceneParam._m0[90u].z, fma(_1477, cbSceneParam._m0[90u].y, _1476 * cbSceneParam._m0[90u].x));
    float _1505 = fma(_1478, cbSceneParam._m0[91u].z, fma(_1477, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1476));
    float _1520 = _750 * 0.5;
    float _1521 = _751 * 0.5;
    float _1522 = _752 * 0.5;
    float _1523 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1526 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1529 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1563;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1536 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1140, _1144, _1147, _1150));
        float _1540 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1544 = dot(vec4(_1520, _1521, _1522, 1.0), vec4(_1143, _1146, _1149, _1152));
        float _1551 = dot(vec4(cbModelParam._m0[39u]), vec4(_1520, _1521, _1522, 1.0));
        _1563 = dot(vec3(isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1551) ? 0.0 : (isnan(0.0) ? _1551 : max(0.0, _1551))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1563 = 1.0;
    }
    float _1574;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1565 = dot(vec4(cbModelParam._m0[40u]), vec4(_1520, _1521, _1522, 1.0));
        _1574 = dot(vec3(isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1565) ? 0.0 : (isnan(0.0) ? _1565 : max(0.0, _1565))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1574 = 1.0;
    }
    float _1578 = (_1574 * cbModelParam._m0[1u].x) + (_1563 * (1.0 - cbModelParam._m0[1u].x));
    float _1588 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _582);
    float _1589 = isnan(_1588) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1588 : min(cbModelParam._m0[25u].z, _1588));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1636 = fma(_811, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803)) + cbModelParam._m0[13u].w;
        float _1640 = fma(_811, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803)) + cbModelParam._m0[14u].w;
        float _1644 = fma(_811, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803)) + cbModelParam._m0[15u].w;
        float _1647 = fma(_752, cbModelParam._m0[13u].z, fma(_751, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750));
        float _1650 = fma(_752, cbModelParam._m0[14u].z, fma(_751, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750));
        float _1653 = fma(_752, cbModelParam._m0[15u].z, fma(_751, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750));
        float _1681;
        if (_1647 > 0.0)
        {
            _1681 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1681 = frontier_phi_17_15_ladder;
        }
        float _1881;
        if (_1650 > 0.0)
        {
            _1881 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1881 = frontier_phi_26_22_ladder;
        }
        float _2124;
        if (_1653 > 0.0)
        {
            _2124 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2124 = frontier_phi_38_33_ladder;
        }
        float _2126 = isnan(_1881) ? _1681 : (isnan(_1681) ? _1881 : min(_1681, _1881));
        float _2127 = isnan(_2124) ? _2126 : (isnan(_2126) ? _2124 : min(_2126, _2124));
        float _2131 = (_2127 * _1647) + _1636;
        float _2132 = (_2127 * _1650) + _1640;
        float _2133 = (_2127 * _1653) + _1644;
        float _2134 = _2127 * 9.9999997473787516355514526367188e-05;
        float _2136 = (-1.0) - _2134;
        float _2138 = _2134 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2133 > _2138) || ((_2133 < _2136) || ((_2132 > _2138) || ((_2132 < _2136) || ((_2131 < _2136) || (_2131 > _2138))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2257 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2133, cbModelParam._m0[9u].z, fma(_2132, cbModelParam._m0[9u].y, _2131 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2133, cbModelParam._m0[10u].z, fma(_2132, cbModelParam._m0[10u].y, _2131 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2133, cbModelParam._m0[11u].z, fma(_2132, cbModelParam._m0[11u].y, _2131 * cbModelParam._m0[11u].x))), _1589);
            frontier_phi_16_38_ladder = _2257.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2257.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2257.x * cbModelParam._m0[1u].y;
        }
        _1669 = frontier_phi_16_38_ladder_2;
        _1671 = frontier_phi_16_38_ladder_1;
        _1673 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_750, _751, _752), _1589);
        _1669 = _1657.x * cbModelParam._m0[1u].y;
        _1671 = _1657.y * cbModelParam._m0[1u].y;
        _1673 = _1657.z * cbModelParam._m0[1u].y;
    }
    float _1677 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _582);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1677 : min(cbModelParam._m0[25u].w, _1677));
    float _1767;
    float _1769;
    float _1771;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1731 = fma(_811, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803)) + cbModelParam._m0[21u].w;
        float _1735 = fma(_811, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803)) + cbModelParam._m0[22u].w;
        float _1739 = fma(_811, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803)) + cbModelParam._m0[23u].w;
        float _1742 = fma(_752, cbModelParam._m0[21u].z, fma(_751, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750));
        float _1745 = fma(_752, cbModelParam._m0[22u].z, fma(_751, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750));
        float _1748 = fma(_752, cbModelParam._m0[23u].z, fma(_751, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750));
        float _1886;
        if (_1742 > 0.0)
        {
            _1886 = abs((1.0 - _1731) / _1742);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1731 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1886 = frontier_phi_28_24_ladder;
        }
        float _2151;
        if (_1745 > 0.0)
        {
            _2151 = abs((1.0 - _1735) / _1745);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1735 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2151 = frontier_phi_40_35_ladder;
        }
        float _2356;
        if (_1748 > 0.0)
        {
            _2356 = abs((1.0 - _1739) / _1748);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1739 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2356 = frontier_phi_49_46_ladder;
        }
        float _2358 = isnan(_2151) ? _1886 : (isnan(_1886) ? _2151 : min(_1886, _2151));
        float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
        float _2363 = (_2359 * _1742) + _1731;
        float _2364 = (_2359 * _1745) + _1735;
        float _2365 = (_2359 * _1748) + _1739;
        float _2366 = _2359 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2366;
        float _2369 = _2366 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2365 > _2369) || ((_2365 < _2367) || ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 < _2367) || (_2363 > _2369))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2365, cbModelParam._m0[17u].z, fma(_2364, cbModelParam._m0[17u].y, _2363 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2365, cbModelParam._m0[18u].z, fma(_2364, cbModelParam._m0[18u].y, _2363 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2365, cbModelParam._m0[19u].z, fma(_2364, cbModelParam._m0[19u].y, _2363 * cbModelParam._m0[19u].x))), _1678);
            frontier_phi_25_49_ladder = _2564.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2564.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2564.x * cbModelParam._m0[1u].z;
        }
        _1767 = frontier_phi_25_49_ladder_2;
        _1769 = frontier_phi_25_49_ladder_1;
        _1771 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_750, _751, _752), _1678);
        _1767 = _1751.x * cbModelParam._m0[1u].z;
        _1769 = _1751.y * cbModelParam._m0[1u].z;
        _1771 = _1751.z * cbModelParam._m0[1u].z;
    }
    float _1783 = ((((1.0 - _771) * ((_758 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_771 * _758)) * _742;
    float _1784 = _1783 * ((cbModelParam._m0[1u].w * (_1767 - _1669)) + _1669);
    float _1785 = _1783 * ((cbModelParam._m0[1u].w * (_1769 - _1671)) + _1671);
    float _1786 = _1783 * ((cbModelParam._m0[1u].w * (_1771 - _1673)) + _1673);
    float _1789 = fma(_1786, cbSceneParam._m0[89u].z, fma(_1785, cbSceneParam._m0[89u].y, _1784 * cbSceneParam._m0[89u].x));
    float _1792 = fma(_1786, cbSceneParam._m0[90u].z, fma(_1785, cbSceneParam._m0[90u].y, _1784 * cbSceneParam._m0[90u].x));
    float _1795 = fma(_1786, cbSceneParam._m0[91u].z, fma(_1785, cbSceneParam._m0[91u].y, _1784 * cbSceneParam._m0[91u].x));
    uvec4 _1805 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1807 = _1805.x * 14u;
    uint _1808 = _1807 + 13u;
    float _1815 = _742 + (-1.0);
    float _1820 = (cbLight._m0[_1808].x * _1815) + 1.0;
    float _1821 = (cbLight._m0[_1808].y * _1815) + 1.0;
    float _1822 = (cbLight._m0[_1808].z * _1815) + 1.0;
    float _1823 = (cbLight._m0[_1808].w * _1815) + 1.0;
    uint _1824 = _1807 + 5u;
    float _1830 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1834 = _1807 + 4u;
    float _1840 = isnan(1.0) ? _1820 : (isnan(_1820) ? 1.0 : min(_1820, 1.0));
    uint _1844 = _1807 | 1u;
    float _1855 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_579, _580, _581));
    float _1858 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_579, _580, _581));
    float _4045 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
    float _4056 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1863 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * 0.3183098733425140380859375;
    float _1865 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.3183098733425140380859375;
    float _1872 = ((cbLight._m0[_1824].x * _1830) * _1865) + ((cbLight._m0[_1834].x * _1840) * _1863);
    float _1873 = ((_1830 * cbLight._m0[_1824].y) * _1865) + ((_1840 * cbLight._m0[_1834].y) * _1863);
    float _1874 = ((_1830 * cbLight._m0[_1824].z) * _1865) + ((_1840 * cbLight._m0[_1834].z) * _1863);
    uvec4 _1878 = floatBitsToUint(cbLight._m0[_1807 + 12u]);
    bool _1880 = _1878.x == 0u;
    float _1891;
    float _1893;
    float _1895;
    if (_1880)
    {
        _1891 = _1872;
        _1893 = _1873;
        _1895 = _1874;
    }
    else
    {
        uint _1899 = _1807 + 6u;
        float _1915 = (dot(vec3(cbLight._m0[_1807 + 2u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _1916 = _1915 * _1915;
        float _4067 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1917 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1918 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _1891 = (((cbLight._m0[_1899].x * 0.3183098733425140380859375) * _1917) * _1918) + _1872;
        _1893 = (((cbLight._m0[_1899].y * 0.3183098733425140380859375) * _1917) * _1918) + _1873;
        _1895 = (((cbLight._m0[_1899].z * 0.3183098733425140380859375) * _1917) * _1918) + _1874;
    }
    bool _1898 = _1878.y == 0u;
    float _1936;
    float _1938;
    float _1940;
    if (_1898)
    {
        _1936 = _1891;
        _1938 = _1893;
        _1940 = _1895;
    }
    else
    {
        uint _2095 = _1807 + 7u;
        float _2111 = (dot(vec3(cbLight._m0[_1807 + 3u].xyz), vec3(_579, _580, _581)) * 0.5) + 0.5;
        float _2112 = _2111 * _2111;
        float _4083 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2113 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2114 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _1936 = (((cbLight._m0[_2095].x * 0.3183098733425140380859375) * _2113) * _2114) + _1891;
        _1938 = (((cbLight._m0[_2095].y * 0.3183098733425140380859375) * _2113) * _2114) + _1893;
        _1940 = (((cbLight._m0[_2095].z * 0.3183098733425140380859375) * _2113) * _2114) + _1895;
    }
    uint _1943 = _1807 + 8u;
    float _1956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _582) * 0.949999988079071044921875);
    float _1957 = _1956 * _1956;
    float _1958 = cbLight._m0[_1807].x + _659;
    float _1959 = cbLight._m0[_1807].y + _660;
    float _1960 = cbLight._m0[_1807].z + _661;
    float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
    float _1965 = _1964 * _1958;
    float _1966 = _1964 * _1959;
    float _1967 = _1964 * _1960;
    float _1968 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1807].xyz));
    float _4099 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _1972 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _1973 = dot(vec3(_579, _580, _581), vec3(_1965, _1966, _1967));
    float _4121 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
    float _1976 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _1977 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_1965, _1966, _1967));
    float _4132 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1981 = _1957 * _1957;
    float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
    float _1996 = (exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1997 = 1.0 - _1957;
    float _2008 = (0.5 / (((_1972 * ((_1971 * _1997) + _1957)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _1997) + _1957) * _1971))) * _1971;
    float _4143 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2010 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
    uint _2021 = _1807 + 9u;
    float _2032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _582) * 0.949999988079071044921875);
    float _2033 = _2032 * _2032;
    float _2034 = cbLight._m0[_1844].x + _659;
    float _2035 = cbLight._m0[_1844].y + _660;
    float _2036 = cbLight._m0[_1844].z + _661;
    float _2040 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
    float _2041 = _2040 * _2034;
    float _2042 = _2040 * _2035;
    float _2043 = _2040 * _2036;
    float _2044 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_1844].xyz));
    float _4154 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2048 = dot(vec3(_579, _580, _581), vec3(_2041, _2042, _2043));
    float _4165 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _2052 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_2041, _2042, _2043));
    float _4176 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2056 = _2033 * _2033;
    float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
    float _2069 = (exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2070 = 1.0 - _2033;
    float _2080 = (0.5 / (((_1972 * ((_2047 * _2070) + _2033)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _2070) + _2033) * _2047))) * _2047;
    float _4187 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2082 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
    float _2092 = (((_2069 * cbLight._m0[_2021].x) * _2082) * _1830) + (((_1996 * cbLight._m0[_1943].x) * _2010) * _1840);
    float _2093 = (((_2069 * cbLight._m0[_2021].y) * _2082) * _1830) + (((_1996 * cbLight._m0[_1943].y) * _2010) * _1840);
    float _2094 = (((_2069 * cbLight._m0[_2021].z) * _2082) * _1830) + (((_1996 * cbLight._m0[_1943].z) * _2010) * _1840);
    float _2156;
    float _2158;
    float _2160;
    if (_1880)
    {
        _2156 = _2092;
        _2158 = _2093;
        _2160 = _2094;
    }
    else
    {
        uint _2162 = _1807 + 2u;
        uint _2166 = _1807 + 10u;
        float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _582) * 0.949999988079071044921875);
        float _2181 = _2180 * _2180;
        float _2182 = cbLight._m0[_2162].x + _659;
        float _2183 = cbLight._m0[_2162].y + _660;
        float _2184 = cbLight._m0[_2162].z + _661;
        float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
        float _2189 = _2188 * _2182;
        float _2190 = _2188 * _2183;
        float _2191 = _2188 * _2184;
        float _2192 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2162].xyz));
        float _4198 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2196 = dot(vec3(_579, _580, _581), vec3(_2189, _2190, _2191));
        float _4209 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2200 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2189, _2190, _2191));
        float _4220 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2204 = _2181 * _2181;
        float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
        float _2217 = (exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2218 = 1.0 - _2181;
        float _2228 = (0.5 / (((_1972 * ((_2195 * _2218) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _2218) + _2181) * _2195))) * _2195;
        float _4231 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2230 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
        float _2231 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
        _2156 = (((_2217 * cbLight._m0[_2166].x) * _2230) * _2231) + _2092;
        _2158 = (((_2217 * cbLight._m0[_2166].y) * _2230) * _2231) + _2093;
        _2160 = (((_2217 * cbLight._m0[_2166].z) * _2230) * _2231) + _2094;
    }
    float _2266;
    float _2268;
    float _2270;
    if (_1898)
    {
        _2266 = _2156;
        _2268 = _2158;
        _2270 = _2160;
    }
    else
    {
        uint _2277 = _1807 + 3u;
        uint _2281 = _1807 + 11u;
        float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _582) * 0.949999988079071044921875);
        float _2296 = _2295 * _2295;
        float _2297 = cbLight._m0[_2277].x + _659;
        float _2298 = cbLight._m0[_2277].y + _660;
        float _2299 = cbLight._m0[_2277].z + _661;
        float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
        float _2304 = _2303 * _2297;
        float _2305 = _2303 * _2298;
        float _2306 = _2303 * _2299;
        float _2307 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2277].xyz));
        float _4247 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2310 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2311 = dot(vec3(_579, _580, _581), vec3(_2304, _2305, _2306));
        float _4258 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2314 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _2315 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2304, _2305, _2306));
        float _4269 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2319 = _2296 * _2296;
        float _2323 = ((_2314 * _2314) * (_2319 + (-1.0))) + 1.0;
        float _2332 = (exp2(log2(1.0 - (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2333 = 1.0 - _2296;
        float _2343 = (0.5 / (((_1972 * ((_2310 * _2333) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_1972 * _2333) + _2296) * _2310))) * _2310;
        float _4280 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2345 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_2319 / ((_2323 * _2323) * 3.141590118408203125));
        float _2346 = isnan(1.0) ? _1823 : (isnan(_1823) ? 1.0 : min(_1823, 1.0));
        _2266 = (((_2332 * cbLight._m0[_2281].x) * _2345) * _2346) + _2156;
        _2268 = (((_2332 * cbLight._m0[_2281].y) * _2345) * _2346) + _2158;
        _2270 = (((_2332 * cbLight._m0[_2281].z) * _2345) * _2346) + _2160;
    }
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    float _2491;
    if (_1805.y == 0u)
    {
        float _2421 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2421;
        float _2423 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2421;
        float _2424 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2421;
        uvec4 _2436 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2437 = _2436.x;
        uint _2448 = uint((float(_2436.y) * floor(float(uint(cbSceneParam._m0[85u].y * _680) / _2437))) + floor(float(uint(cbSceneParam._m0[85u].x * _679) / _2437)));
        float _2458 = (log2(_2424 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2459 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        uint _2462 = uint(isnan(14.0) ? _2459 : (isnan(_2459) ? 14.0 : min(_2459, 14.0)));
        uvec4 _2467 = texelFetch(g_lightClusterGridBuffer, int(((_2462 << 2u) + (_2448 << 6u)) >> 2u));
        uint _2468 = _2467.x;
        uint _2469 = _2436.z;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        if (((((1u << ((_2469 >> 4u) & 15u)) + 4294967295u) & _2468) == 0u) || ((_2469 & 240u) == 0u))
        {
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
        }
        else
        {
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            uint _2728 = 0u;
            uint _2737;
            bool _2738;
            for (;;)
            {
                _2737 = texelFetch(g_lightClassification, int((((_2462 << 5u) + (_2448 << 9u)) + (_2728 << 2u)) >> 2u)).x;
                _2738 = _2737 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2738)
                {
                    frontier_phi_66_pred = _2722;
                    frontier_phi_66_pred_1 = _2727;
                    frontier_phi_66_pred_2 = _2726;
                    frontier_phi_66_pred_3 = _2725;
                    frontier_phi_66_pred_4 = _2724;
                    frontier_phi_66_pred_5 = _2723;
                }
                else
                {
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    uint _2873;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2727;
                    _2873 = _2737;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    for (;;)
                    {
                        uint _2877 = uint(findLSB(_2873)) + (_2728 << 5u);
                        uint _2874 = (_2873 + 4294967295u) & _2873;
                        uint _2879 = _2877 * 48u;
                        vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2879)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2879 + 3u)).x));
                        uint _2899 = (_2877 * 48u) + 4u;
                        vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 3u)).x));
                        uint _2918 = (_2877 * 48u) + 8u;
                        vec3 _2929 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x));
                        float _2933 = _2893.x - _2422;
                        float _2934 = _2893.y - _2423;
                        float _2935 = _2893.z - _2424;
                        float _2936 = dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935));
                        float _2939 = inversesqrt(_2936);
                        float _2940 = _2939 * _2933;
                        float _2941 = _2939 * _2934;
                        float _2942 = _2939 * _2935;
                        float _2943 = dot(vec3(_698, _701, _704), vec3(_2940, _2941, _2942));
                        float _2948 = 1.0 - (_2936 * _2893.w);
                        float _4306 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2949 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _2950 = sqrt(_2936) * _2912.w;
                        float _2953 = 1.39999997615814208984375 / (_2950 + 1.39999997615814208984375);
                        float _2954 = _2953 * _2953;
                        float _2957 = ((1.0 - _2954) * _2943) + _2954;
                        float _2960 = _2950 * _2950;
                        float _2964 = ((isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0))) * _2949) / ((_2960 * 0.699999988079071044921875) + 1.0);
                        float _2968 = (-0.0) - _2422;
                        float _2969 = (-0.0) - _2423;
                        float _2970 = (-0.0) - _2424;
                        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
                        float _2975 = _2974 * _2968;
                        float _2976 = _2974 * _2969;
                        float _2977 = _2974 * _2970;
                        float _2985 = exp2(log2(1.0 / ((_2960 * 3.5) + 5.0)) * 0.25);
                        float _2986 = 1.0 - _758;
                        float _2993 = sqrt(1.0 - ((1.0 - (_2986 * _2986)) * (1.0 - (_2985 * _2985))));
                        float _2994 = _2993 * _2993;
                        float _2995 = _2994 * _2994;
                        float _2996 = _2975 + _2940;
                        float _2997 = _2976 + _2941;
                        float _2998 = _2977 + _2942;
                        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                        float _3006 = dot(vec3(_698, _701, _704), vec3(_2975, _2976, _2977));
                        float _4322 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3009 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3010 = dot(vec3(_698, _701, _704), vec3(_3002 * _2996, _3002 * _2997, _3002 * _2998));
                        float _4333 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                        float _3013 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _3017 = ((_3013 * _3013) * (_2995 + (-1.0))) + 1.0;
                        float _3018 = _2953 * _2994;
                        float _3019 = _3018 * _3018;
                        float _3022 = ((1.0 - _3019) * _2943) + _3019;
                        float _4344 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                        float _3023 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3024 = 1.0 - _2994;
                        float _3034 = (0.5 / (((_3023 * ((_3009 * _3024) + _2994)) + 9.9999999392252902907785028219223e-09) + (((_3023 * _3024) + _2994) * _3009))) * _3023;
                        float _4355 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3045 = (((_2995 * 3.1415927410125732421875) * (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) / ((_3017 * _3017) * ((_2960 * 2.1991131305694580078125) + 3.141590118408203125))) * _2949;
                        _2797 = (_2964 * _2912.x) + _2870;
                        _2798 = (_2964 * _2912.y) + _2871;
                        _2799 = (_2964 * _2912.z) + _2872;
                        _2794 = (_3045 * _2929.x) + _2867;
                        _2795 = (_3045 * _2929.y) + _2868;
                        _2796 = (_3045 * _2929.z) + _2869;
                        if (_2874 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2867 = _2794;
                            _2868 = _2795;
                            _2869 = _2796;
                            _2870 = _2797;
                            _2871 = _2798;
                            _2872 = _2799;
                            _2873 = _2874;
                        }
                    }
                    frontier_phi_66_pred = _2794;
                    frontier_phi_66_pred_1 = _2799;
                    frontier_phi_66_pred_2 = _2798;
                    frontier_phi_66_pred_3 = _2797;
                    frontier_phi_66_pred_4 = _2796;
                    frontier_phi_66_pred_5 = _2795;
                }
                _2570 = frontier_phi_66_pred;
                _2580 = frontier_phi_66_pred_1;
                _2578 = frontier_phi_66_pred_2;
                _2576 = frontier_phi_66_pred_3;
                _2574 = frontier_phi_66_pred_4;
                _2572 = frontier_phi_66_pred_5;
                uint _2729 = _2728 + 1u;
                if (_2729 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2722 = _2570;
                    _2723 = _2572;
                    _2724 = _2574;
                    _2725 = _2576;
                    _2726 = _2578;
                    _2727 = _2580;
                    _2728 = _2729;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
        }
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.z;
        uint _2586 = (_2584 >> 8u) & 15u;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        if (((4294967295u << _2586) & _2468) == 0u)
        {
            _2690 = _2569;
            _2692 = _2571;
            _2694 = _2573;
            _2696 = _2575;
            _2698 = _2577;
            _2700 = _2579;
        }
        else
        {
            float _2715 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
            float _2716 = _2715 * _2422;
            float _2717 = _2715 * _2423;
            float _2718 = _2715 * _2424;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2586 < ((_2584 >> 12u) & 15u))
            {
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2850 = _2569;
                float _2851 = _2571;
                float _2852 = _2573;
                float _2853 = _2575;
                float _2854 = _2577;
                float _2855 = _2579;
                uint _2856 = _2586;
                uint _2865;
                bool _2866;
                for (;;)
                {
                    _2865 = texelFetch(g_lightClassification, int((((_2462 << 5u) + (_2448 << 9u)) + (_2856 << 2u)) >> 2u)).x;
                    _2866 = _2865 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2866)
                    {
                        frontier_phi_77_pred = _2855;
                        frontier_phi_77_pred_1 = _2854;
                        frontier_phi_77_pred_2 = _2853;
                        frontier_phi_77_pred_3 = _2852;
                        frontier_phi_77_pred_4 = _2851;
                        frontier_phi_77_pred_5 = _2850;
                    }
                    else
                    {
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3072 = _2850;
                        float _3073 = _2851;
                        float _3074 = _2852;
                        float _3075 = _2853;
                        float _3076 = _2854;
                        float _3077 = _2855;
                        uint _3078 = _2865;
                        uint _3079;
                        vec4 _3104;
                        float _3105;
                        vec4 _3120;
                        vec3 _3132;
                        vec4 _3147;
                        vec4 _3163;
                        float _3209;
                        bool _3210;
                        for (;;)
                        {
                            uint _3089 = ((_2856 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3078));
                            _3079 = (_3078 + 4294967295u) & _3078;
                            uint _3091 = _3089 * 40u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            _3105 = _3104.w;
                            uint _3107 = (_3089 * 40u) + 4u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3122 = (_3089 * 40u) + 8u;
                            _3132 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x));
                            uint _3134 = (_3089 * 40u) + 16u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3150 = (_3089 * 40u) + 20u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3165 = (_3089 * 40u) + 24u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3184 = (_3089 * 40u) + 28u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3209 = fma(_2424, _3197.z, fma(_2423, _3197.y, _3197.x * _2422)) + _3197.w;
                            _3210 = !((fma(_2424, _3178.z, fma(_2423, _3178.y, _3178.x * _2422)) + _3178.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3210)
                            {
                                float _3237 = _3104.x - _2422;
                                float _3238 = _3104.y - _2423;
                                float _3239 = _3104.z - _2424;
                                float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                                float _3243 = inversesqrt(_3240);
                                float _3244 = _3243 * _3237;
                                float _3245 = _3243 * _3238;
                                float _3246 = _3243 * _3239;
                                float _3250 = 1.0 - (_3240 / (_3105 * _3105));
                                float _4366 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3255 = sqrt(_3240) * _3120.w;
                                float _3257 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                                float _3258 = _3257 * _3257;
                                float _3261 = ((1.0 - _3258) * dot(vec3(_3244, _3245, _3246), vec3(_698, _701, _704))) + _3258;
                                float _3264 = _3255 * _3255;
                                float _3268 = (fma(_2424, _3147.z, fma(_2423, _3147.y, _3147.x * _2422)) + _3147.w) / _3209;
                                float _3269 = (fma(_2424, _3163.z, fma(_2423, _3163.y, _3163.x * _2422)) + _3163.w) / _3209;
                                float _3273 = 1.0 - dot(vec2(_3268, _3269), vec2(_3268, _3269));
                                float _4382 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3275 = _3274 * (((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3251) / ((_3264 * 0.699999988079071044921875) + 1.0));
                                float _3287 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                                float _3288 = 1.0 - _758;
                                float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                                float _3296 = _3295 * _3295;
                                float _3297 = _3296 * _3296;
                                float _3298 = _3244 - _2716;
                                float _3299 = _3245 - _2717;
                                float _3300 = _3246 - _2718;
                                float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                                float _3308 = dot(vec3(_698, _701, _704), vec3((-0.0) - _2716, (-0.0) - _2717, (-0.0) - _2718));
                                float _4393 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3311 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3312 = dot(vec3(_698, _701, _704), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                                float _4404 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                                float _3320 = _3257 * _3296;
                                float _3321 = _3320 * _3320;
                                float _3327 = ((1.0 - _3321) * dot(vec3(_698, _701, _704), vec3(_3244, _3245, _3246))) + _3321;
                                float _4415 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3329 = 1.0 - _3296;
                                float _3339 = (0.5 / (((_3328 * ((_3311 * _3329) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3296) * _3311))) * _3328;
                                float _4426 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3349 = (_3274 * _3251) * (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) / ((_3319 * _3319) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3275 * _3120.y;
                                frontier_phi_83_pred_1 = _3275 * _3120.x;
                                frontier_phi_83_pred_2 = _3349 * _3132.z;
                                frontier_phi_83_pred_3 = _3349 * _3132.y;
                                frontier_phi_83_pred_4 = _3349 * _3132.x;
                                frontier_phi_83_pred_5 = _3275 * _3120.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3357 = frontier_phi_83_pred;
                            _3356 = frontier_phi_83_pred_1;
                            _3355 = frontier_phi_83_pred_2;
                            _3354 = frontier_phi_83_pred_3;
                            _3353 = frontier_phi_83_pred_4;
                            _3358 = frontier_phi_83_pred_5;
                            _3062 = _3356 + _3075;
                            _3063 = _3357 + _3076;
                            _3064 = _3358 + _3077;
                            _3059 = _3353 + _3072;
                            _3060 = _3354 + _3073;
                            _3061 = _3355 + _3074;
                            if (_3079 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3079;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3064;
                        frontier_phi_77_pred_1 = _3063;
                        frontier_phi_77_pred_2 = _3062;
                        frontier_phi_77_pred_3 = _3061;
                        frontier_phi_77_pred_4 = _3060;
                        frontier_phi_77_pred_5 = _3059;
                    }
                    _2701 = frontier_phi_77_pred;
                    _2699 = frontier_phi_77_pred_1;
                    _2697 = frontier_phi_77_pred_2;
                    _2695 = frontier_phi_77_pred_3;
                    _2693 = frontier_phi_77_pred_4;
                    _2691 = frontier_phi_77_pred_5;
                    uint _2857 = _2856 + 1u;
                    if (_2857 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2850 = _2691;
                        _2851 = _2693;
                        _2852 = _2695;
                        _2853 = _2697;
                        _2854 = _2699;
                        _2855 = _2701;
                        _2856 = _2857;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2695;
                frontier_phi_58_59_ladder_1 = _2701;
                frontier_phi_58_59_ladder_2 = _2699;
                frontier_phi_58_59_ladder_3 = _2697;
                frontier_phi_58_59_ladder_4 = _2693;
                frontier_phi_58_59_ladder_5 = _2691;
            }
            else
            {
                frontier_phi_58_59_ladder = _2573;
                frontier_phi_58_59_ladder_1 = _2579;
                frontier_phi_58_59_ladder_2 = _2577;
                frontier_phi_58_59_ladder_3 = _2575;
                frontier_phi_58_59_ladder_4 = _2571;
                frontier_phi_58_59_ladder_5 = _2569;
            }
            _2690 = frontier_phi_58_59_ladder_5;
            _2692 = frontier_phi_58_59_ladder_4;
            _2694 = frontier_phi_58_59_ladder;
            _2696 = frontier_phi_58_59_ladder_3;
            _2698 = frontier_phi_58_59_ladder_2;
            _2700 = frontier_phi_58_59_ladder_1;
        }
        float _2705 = isnan(1.0) ? _742 : (isnan(_742) ? 1.0 : min(_742, 1.0));
        _2481 = (_2705 * _2696) + _1936;
        _2483 = (_2705 * _2698) + _1938;
        _2485 = (_2705 * _2700) + _1940;
        _2487 = ((_2690 * 0.039999999105930328369140625) * _2705) + _2266;
        _2489 = ((_2692 * 0.039999999105930328369140625) * _2705) + _2268;
        _2491 = ((_2694 * 0.039999999105930328369140625) * _2705) + _2270;
    }
    else
    {
        _2481 = _1936;
        _2483 = _1938;
        _2485 = _1940;
        _2487 = _2266;
        _2489 = _2268;
        _2491 = _2270;
    }
    float _4442 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4453 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4464 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _2508 = ((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2481 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _742))) + ((_2487 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1578)) * cbPerFrame._m0[3u].x);
    float _2509 = ((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2483 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _742))) + ((_2489 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1578)) * cbPerFrame._m0[3u].x);
    float _2510 = ((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2485 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _742))) + ((_2491 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1578)) * cbPerFrame._m0[3u].x);
    uint _2511 = _234 + 6u;
    float _2519 = _679 / cbSceneParam._m0[86u].x;
    float _2520 = _680 / cbSceneParam._m0[86u].y;
    vec4 _2534 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2519, _2520, (log2((isnan(cbSceneParam._m0[77u].w) ? _600 : (isnan(_600) ? cbSceneParam._m0[77u].w : min(_600, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2536 = _2534.x;
    float _2537 = _2534.y;
    float _2538 = _2534.z;
    float _2539 = _2534.w;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    if (_600 > cbSceneParam._m0[78u].w)
    {
        float _2594 = isnan(_600) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _600 : min(cbSceneParam._m0[80u].w, _600));
        float _2595 = _2594 / _600;
        float _2606 = _2595 * _652;
        float _2607 = _653 * _2595;
        float _2608 = (-0.0) - _2607;
        float _2610 = _2595 * _654;
        float _2612 = (cbSceneParam._m0[77u].w * _2608) / _2594;
        float _2613 = _2612 + cbSceneParam._m0[79u].w;
        float _2614 = cbSceneParam._m0[79u].w - _2607;
        float _2620 = sqrt(((_2606 * _2606) + (_2607 * _2607)) + (_2610 * _2610));
        float _2623 = (1.0 - (cbSceneParam._m0[77u].w / _2594)) * _2620;
        float _2628 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2630 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2807;
        if (abs((_2608 - _2612) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2807 = ((((_2613 > 0.0) ? exp2(_2628 * _2613) : (2.0 - exp2(_2630 * _2613))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2623;
        }
        else
        {
            float _2751 = 1.0 / cbSceneParam._m0[80u].x;
            float _2752 = isnan(_2614) ? _2613 : (isnan(_2613) ? _2614 : max(_2613, _2614));
            float _2753 = isnan(_2614) ? _2613 : (isnan(_2613) ? _2614 : min(_2613, _2614));
            float _2762 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : min(_2752, 0.0));
            float _2763 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : min(_2753, 0.0));
            _2807 = ((abs(_2620 / _2608) * cbSceneParam._m0[80u].y) * ((((_2762 - _2763) * 2.0) - ((exp2(_2628 * (isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0)))) - exp2(_2628 * (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))))) * _2751)) - ((exp2(_2630 * _2762) - exp2(_2630 * _2763)) * _2751))) + (_2623 * cbSceneParam._m0[80u].z);
        }
        vec4 _2809 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2519, _2520, 1.0), 0.0);
        float _2818 = exp2((_2807 * (-1.44269502162933349609375)) * (1.0 - _2809.w));
        float _2819 = log2(_2818);
        float _2835 = log2(_2539);
        _2632 = (exp2(_2835 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].x)) * _2809.x) / cbSceneParam._m0[78u].x)) + _2536;
        _2634 = (exp2(_2835 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].y)) * _2809.y) / cbSceneParam._m0[78u].y)) + _2537;
        _2636 = (exp2(_2835 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2819 * cbSceneParam._m0[78u].z)) * _2809.z) / cbSceneParam._m0[78u].z)) + _2538;
        _2638 = _2818 * _2539;
    }
    else
    {
        _2632 = _2536;
        _2634 = _2537;
        _2636 = _2538;
        _2638 = _2539;
    }
    bool _2845;
    vec4 _2648;
    vec4 _2670;
    float _2672;
    float _2676;
    float _2677;
    float _2678;
    float _2679;
    bool _2689;
    for (;;)
    {
        _2648 = cbMatDynParam._m0[0u];
        float _2650 = roundEven(_2648.y);
        bool _2651 = _2650 == 3.0;
        float _2652 = log2(_2638);
        float _2659 = exp2(_2652 * cbSceneParam._m0[78u].x) * _2508;
        float _2660 = exp2(_2652 * cbSceneParam._m0[78u].y) * _2509;
        float _2661 = exp2(_2652 * cbSceneParam._m0[78u].z) * _2510;
        float _2668 = _668 + (-0.5);
        _2670 = cbMtdParam._m0[1u];
        _2672 = _2670.y * _2668;
        float _2675 = (_2650 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2676 = _2675 * (_2651 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2632)));
        _2677 = _2675 * (_2651 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2634)));
        _2678 = _2675 * (_2651 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2636)));
        _2679 = _2668 * 0.999000012874603271484375;
        _2689 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2689)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2679) < 0.5)
            {
                _2845 = true;
                break;
            }
        }
        uint _2786 = _717 + uint(_2648.w);
        if ((cbInstanceData._m0[_2786].w < 1.0) && ((cbInstanceData._m0[_2786].w + _2679) < 0.5))
        {
            _2845 = true;
            break;
        }
        if ((_2672 + 1.0) < _2670.x)
        {
            _2845 = true;
            break;
        }
        _2845 = false;
        break;
    }
    float _3050;
    if (_2845)
    {
        discard_state = true;
        _3050 = 0.0;
    }
    else
    {
        _3050 = cbInstanceData._m0[_2511].w;
    }
    SV_Target.x = _2676;
    SV_Target.y = _2677;
    SV_Target.z = _2678;
    SV_Target.w = _3050;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2511].w;
    discard_exit();
}


