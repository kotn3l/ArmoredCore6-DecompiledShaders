#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1117;
float _3480;
float _3481;
float _3482;
float _3483;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _278 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _284 = _278.x * cbMtdParam._m0[9u].x;
    float _285 = _278.y * cbMtdParam._m0[9u].y;
    float _286 = _278.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((_258 * cbTextureTilingScale._m0[20u].x) + cbTextureTilingScale._m0[20u].z, (_259 * cbTextureTilingScale._m0[20u].y) + cbTextureTilingScale._m0[20u].w));
    vec4 _325 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _329 = _325.z;
    float _333 = (_325.x * 2.0) + (-1.0);
    float _334 = (_325.y * 2.0) + (-1.0);
    float _335 = dot(vec2(_333, _334), vec2(_333, _334));
    float _3492 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _341 = sqrt(1.0 - (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))));
    float _346 = _333 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_299.x * 2.0) + (-1.0)));
    float _347 = _334 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_299.y * 2.0) + (-1.0)));
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _362 = _360.x;
    float _363 = 1.0 - _362;
    float _396 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_362 - _363) * cbMtdParam._m0[24u].w) + _363) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3503 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _405 = ((((cbMtdParam._m0[10u].x - _284) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _397) + _284;
    float _406 = ((((cbMtdParam._m0[10u].y - _285) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _397) + _285;
    float _407 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _286)) * _397) + _286;
    float _412 = (((_299.z - _329) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _329;
    float _416 = ((cbMtdParam._m0[23u].y - _412) * _397) + _412;
    vec4 _438 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _440 = _438.x;
    float _441 = _438.y;
    float _450 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_227, _228, _229, 0.0));
    vec4 _465 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _258) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _259) + cbTextureTilingScale._m0[18u].w));
    float _467 = _465.x;
    float _472 = fract(_465.w + cbPerFrame._m0[22u].x);
    float _474 = (1.0 - _472) * _467;
    float _479 = ((_472 + (-1.0)) + _467) * 9.0;
    float _481 = ((_467 + (-1.0)) + _472) * 9.0;
    float _482 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _483 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _497 = (_474 * ((_465.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _482 : (isnan(_482) ? 3.0 : min(_482, 3.0))) * 3.1415927410125732421875);
    float _499 = (_474 * ((_465.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _483 : (isnan(_483) ? 3.0 : min(_483, 3.0))) * 3.1415927410125732421875);
    float _503 = inversesqrt(dot(vec3(_497, _499, 1.0), vec3(_497, _499, 1.0)));
    float _519 = (((((0.5 - _440) + ((_497 * 0.5) * _503)) * _450) + _440) * 2.0) + (-1.0);
    float _520 = (((((0.5 - _441) + ((_503 * 0.5) * _499)) * _450) + _441) * 2.0) + (-1.0);
    float _521 = dot(vec2(_519, _520), vec2(_519, _520));
    float _3534 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _537 = ((((cbMtdParam._m0[22u].z * _346) - _346) + _519) * _397) + _346;
    float _538 = ((((cbMtdParam._m0[22u].z * _347) - _347) + _520) * _397) + _347;
    float _539 = (_397 * (sqrt(1.0 - (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) - _341)) + _341;
    float _541 = cbMtdParam._m0[22u].x + _325.w;
    float _544 = fma(_539, _227, fma(_538, _233 * TANGENT.x, (_219 * _211) * _537));
    float _547 = fma(_539, _228, fma(_538, _233 * TANGENT.y, (_219 * _212) * _537));
    float _550 = fma(_539, _229, fma(_538, _233 * TANGENT.z, (_219 * _213) * _537));
    float _554 = inversesqrt(dot(vec3(_544, _547, _550), vec3(_544, _547, _550)));
    float _555 = _554 * _544;
    float _556 = _554 * _547;
    float _557 = _554 * _550;
    float _3545 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _558 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _3556 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3567 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _3578 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _3589 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _576 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _627 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _617);
    float _628 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _617);
    float _629 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _617);
    float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
    float _634 = _627 * _633;
    float _635 = _628 * _633;
    float _636 = _629 * _633;
    vec4 _641 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _643 = _641.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _799 = sqrt(((_627 * _627) + (_628 * _628)) + (_629 * _629));
        float _805 = (cbMatDynParam._m0[5u].x * _799) + cbMatDynParam._m0[5u].y;
        float _3600 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _810 = (cbMatDynParam._m0[5u].z * _799) + cbMatDynParam._m0[5u].w;
        float _3611 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) - _806)) + _806) < ((_643 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _655 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _656 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _676 = fma(_557, cbSceneParam._m0[5u].z, fma(_556, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _555));
    float _679 = fma(_557, cbSceneParam._m0[6u].z, fma(_556, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _555));
    float _682 = fma(_557, cbSceneParam._m0[7u].z, fma(_556, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _555));
    uint _695 = _239 + 9u;
    uint _696 = _695 + uint(cbMatDynParam._m0[0u].w);
    float _702 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_696].x;
    float _703 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * cbInstanceData._m0[_696].y;
    float _704 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * cbInstanceData._m0[_696].z;
    float _3622 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    vec4 _716 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _655, cbSceneParam._m0[86u].y * _656));
    float _720 = ((isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * TEXCOORD_5.w) * _716.x;
    float _721 = dot(vec3(_555, _556, _557), vec3(_634, _635, _636));
    float _724 = _721 * 2.0;
    float _728 = (_724 * _555) - _634;
    float _729 = (_724 * _556) - _635;
    float _730 = (_724 * _557) - _636;
    float _734 = abs(dot(vec3(_634, _635, _636), vec3(_555, _556, _557)));
    float _3655 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _736 = sqrt(_558);
    float _748 = exp2((_736 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_736 * 3.0));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1116;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _842 = fma(_788, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _780));
        float _846 = fma(_788, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _780));
        float _850 = fma(_788, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _780));
        float _874 = _780 + _555;
        float _875 = _784 + _556;
        float _876 = _788 + _557;
        float _886 = fma(_876, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _874)) - _842;
        float _887 = fma(_876, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _874)) - _846;
        float _888 = fma(_876, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _874)) - _850;
        float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
        float _905 = ((_892 * _886) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_842 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_892 * _887) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_846 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_892 * _888) / cbModelParam._m0[34u].z) + ((((((_850 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        float _944 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_910.x + (-0.5));
        float _946 = _944 * (_910.y + (-0.5));
        float _947 = _944 * (_910.z + (-0.5));
        float _954 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_917.x + (-0.5));
        float _956 = _954 * (_917.y + (-0.5));
        float _957 = _954 * (_917.z + (-0.5));
        float _964 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_924.x + (-0.5));
        float _966 = _964 * (_924.y + (-0.5));
        float _967 = _964 * (_924.z + (-0.5));
        float _974 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_931.x + (-0.5));
        float _976 = _974 * (_931.y + (-0.5));
        float _977 = _974 * (_931.z + (-0.5));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = _945 * 0.5;
        float _982 = _955 * 0.5;
        float _983 = _965 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _998 = (dot(vec3(_555, _556, _557), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1008 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3703 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1010 + 1.0))) + _1015) * _978;
        float _1025 = _946 * 0.5;
        float _1026 = _956 * 0.5;
        float _1027 = _966 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_555, _556, _557), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3736 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1052 + 1.0))) + _1057) * _979;
        float _1067 = _947 * 0.5;
        float _1068 = _957 * 0.5;
        float _1069 = _967 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_555, _556, _557), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3769 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1094 + 1.0))) + _1099) * _980;
        _1116 = _947;
        _1118 = _946;
        _1119 = _945;
        _1120 = _957;
        _1121 = _956;
        _1122 = _955;
        _1123 = _967;
        _1124 = _966;
        _1125 = _965;
        _1126 = _980;
        _1127 = _979;
        _1128 = _978;
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _1117;
        _1118 = _1117;
        _1119 = _1117;
        _1120 = _1117;
        _1121 = _1117;
        _1122 = _1117;
        _1123 = _1117;
        _1124 = _1117;
        _1125 = _1117;
        _1126 = _1117;
        _1127 = _1117;
        _1128 = _1117;
        _1129 = 0.0;
        _1130 = 0.0;
        _1131 = 0.0;
    }
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1159 = fma(_788, cbModelParam._m0[30u].z, fma(_784, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _780));
        float _1163 = fma(_788, cbModelParam._m0[31u].z, fma(_784, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _780));
        float _1167 = fma(_788, cbModelParam._m0[32u].z, fma(_784, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _780));
        float _1190 = _780 + _555;
        float _1191 = _784 + _556;
        float _1192 = _788 + _557;
        float _1202 = fma(_1192, cbModelParam._m0[30u].z, fma(_1191, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1190)) - _1159;
        float _1203 = fma(_1192, cbModelParam._m0[31u].z, fma(_1191, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1190)) - _1163;
        float _1204 = fma(_1192, cbModelParam._m0[32u].z, fma(_1191, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1190)) - _1167;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1159 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1163 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[35u].z) + ((((((_1167 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1258 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1225.x + (-0.5));
        float _1260 = _1258 * (_1225.y + (-0.5));
        float _1261 = _1258 * (_1225.z + (-0.5));
        float _1268 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1232.x + (-0.5));
        float _1270 = _1268 * (_1232.y + (-0.5));
        float _1271 = _1268 * (_1232.z + (-0.5));
        float _1278 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1239.x + (-0.5));
        float _1280 = _1278 * (_1239.y + (-0.5));
        float _1281 = _1278 * (_1239.z + (-0.5));
        float _1288 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1246.x + (-0.5));
        float _1290 = _1288 * (_1246.y + (-0.5));
        float _1291 = _1288 * (_1246.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_555, _556, _557), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3832 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1322 + 1.0))) + _1327) * _1292;
        float _1337 = _1260 * 0.5;
        float _1338 = _1270 * 0.5;
        float _1339 = _1280 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_555, _556, _557), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _3865 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1364 + 1.0))) + _1369) * _1293;
        float _1379 = _1261 * 0.5;
        float _1380 = _1271 * 0.5;
        float _1381 = _1281 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_555, _556, _557), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _3898 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1406 + 1.0))) + _1411) * _1294;
        _1428 = _1261;
        _1429 = _1260;
        _1430 = _1259;
        _1431 = _1271;
        _1432 = _1270;
        _1433 = _1269;
        _1434 = _1281;
        _1435 = _1280;
        _1436 = _1279;
        _1437 = _1294;
        _1438 = _1293;
        _1439 = _1292;
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
    }
    else
    {
        _1428 = _1117;
        _1429 = _1117;
        _1430 = _1117;
        _1431 = _1117;
        _1432 = _1117;
        _1433 = _1117;
        _1434 = _1117;
        _1435 = _1117;
        _1436 = _1117;
        _1437 = _1117;
        _1438 = _1117;
        _1439 = _1117;
        _1440 = 0.0;
        _1441 = 0.0;
        _1442 = 0.0;
    }
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1129)) + _1129;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1130)) + _1130;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1131)) + _1131;
    float _1475 = fma(_1454, cbSceneParam._m0[89u].z, fma(_1453, cbSceneParam._m0[89u].y, _1452 * cbSceneParam._m0[89u].x));
    float _1478 = fma(_1454, cbSceneParam._m0[90u].z, fma(_1453, cbSceneParam._m0[90u].y, _1452 * cbSceneParam._m0[90u].x));
    float _1481 = fma(_1454, cbSceneParam._m0[91u].z, fma(_1453, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1452));
    float _1496 = _728 * 0.5;
    float _1497 = _729 * 0.5;
    float _1498 = _730 * 0.5;
    float _1499 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1502 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1505 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1539;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1512 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1116, _1120, _1123, _1126));
        float _1516 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1520 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1527 = dot(vec4(cbModelParam._m0[39u]), vec4(_1496, _1497, _1498, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1527) ? 0.0 : (isnan(0.0) ? _1527 : max(0.0, _1527))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1550;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1541 = dot(vec4(cbModelParam._m0[40u]), vec4(_1496, _1497, _1498, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1554 = (_1550 * cbModelParam._m0[1u].x) + (_1539 * (1.0 - cbModelParam._m0[1u].x));
    float _1564 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _558);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1564 : min(cbModelParam._m0[25u].z, _1564));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1614 = fma(_788, cbModelParam._m0[13u].z, fma(_784, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _780)) + cbModelParam._m0[13u].w;
        float _1618 = fma(_788, cbModelParam._m0[14u].z, fma(_784, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _780)) + cbModelParam._m0[14u].w;
        float _1622 = fma(_788, cbModelParam._m0[15u].z, fma(_784, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _780)) + cbModelParam._m0[15u].w;
        float _1625 = fma(_730, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728));
        float _1628 = fma(_730, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728));
        float _1631 = fma(_730, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728));
        float _1659;
        if (_1625 > 0.0)
        {
            _1659 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1659 = frontier_phi_17_15_ladder;
        }
        float _1862;
        if (_1628 > 0.0)
        {
            _1862 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1862 = frontier_phi_26_22_ladder;
        }
        float _2105;
        if (_1631 > 0.0)
        {
            _2105 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2105 = frontier_phi_38_33_ladder;
        }
        float _2107 = isnan(_1862) ? _1659 : (isnan(_1659) ? _1862 : min(_1659, _1862));
        float _2108 = isnan(_2105) ? _2107 : (isnan(_2107) ? _2105 : min(_2107, _2105));
        float _2112 = (_2108 * _1625) + _1614;
        float _2113 = (_2108 * _1628) + _1618;
        float _2114 = (_2108 * _1631) + _1622;
        float _2115 = _2108 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2115;
        float _2119 = _2115 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 > _2119) || ((_2113 < _2117) || ((_2112 < _2117) || (_2112 > _2119))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2238 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2114, cbModelParam._m0[9u].z, fma(_2113, cbModelParam._m0[9u].y, _2112 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2114, cbModelParam._m0[10u].z, fma(_2113, cbModelParam._m0[10u].y, _2112 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2114, cbModelParam._m0[11u].z, fma(_2113, cbModelParam._m0[11u].y, _2112 * cbModelParam._m0[11u].x))), _1565);
            frontier_phi_16_38_ladder = _2238.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2238.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2238.x * cbModelParam._m0[1u].y;
        }
        _1647 = frontier_phi_16_38_ladder_2;
        _1649 = frontier_phi_16_38_ladder_1;
        _1651 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_728, _729, _730), _1565);
        _1647 = _1635.x * cbModelParam._m0[1u].y;
        _1649 = _1635.y * cbModelParam._m0[1u].y;
        _1651 = _1635.z * cbModelParam._m0[1u].y;
    }
    float _1655 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _558);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1655 : min(cbModelParam._m0[25u].w, _1655));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1710 = fma(_788, cbModelParam._m0[21u].z, fma(_784, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _780)) + cbModelParam._m0[21u].w;
        float _1714 = fma(_788, cbModelParam._m0[22u].z, fma(_784, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _780)) + cbModelParam._m0[22u].w;
        float _1718 = fma(_788, cbModelParam._m0[23u].z, fma(_784, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _780)) + cbModelParam._m0[23u].w;
        float _1721 = fma(_730, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728));
        float _1724 = fma(_730, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728));
        float _1727 = fma(_730, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728));
        float _1867;
        if (_1721 > 0.0)
        {
            _1867 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1867 = frontier_phi_28_24_ladder;
        }
        float _2132;
        if (_1724 > 0.0)
        {
            _2132 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2132 = frontier_phi_40_35_ladder;
        }
        float _2337;
        if (_1727 > 0.0)
        {
            _2337 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2337 = frontier_phi_49_46_ladder;
        }
        float _2339 = isnan(_2132) ? _1867 : (isnan(_1867) ? _2132 : min(_1867, _2132));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1721) + _1710;
        float _2345 = (_2340 * _1724) + _1714;
        float _2346 = (_2340 * _1727) + _1718;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2347;
        float _2350 = _2347 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2346 > _2350) || ((_2346 < _2348) || ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 < _2348) || (_2344 > _2350))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2545 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2346, cbModelParam._m0[17u].z, fma(_2345, cbModelParam._m0[17u].y, _2344 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2346, cbModelParam._m0[18u].z, fma(_2345, cbModelParam._m0[18u].y, _2344 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2346, cbModelParam._m0[19u].z, fma(_2345, cbModelParam._m0[19u].y, _2344 * cbModelParam._m0[19u].x))), _1656);
            frontier_phi_25_49_ladder = _2545.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2545.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2545.x * cbModelParam._m0[1u].z;
        }
        _1746 = frontier_phi_25_49_ladder_2;
        _1748 = frontier_phi_25_49_ladder_1;
        _1750 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_728, _729, _730), _1656);
        _1746 = _1730.x * cbModelParam._m0[1u].z;
        _1748 = _1730.y * cbModelParam._m0[1u].z;
        _1750 = _1730.z * cbModelParam._m0[1u].z;
    }
    float _1762 = ((((1.0 - _748) * ((_736 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_748 * _736)) * _720;
    float _1763 = _1762 * ((cbModelParam._m0[1u].w * (_1746 - _1647)) + _1647);
    float _1764 = _1762 * ((cbModelParam._m0[1u].w * (_1748 - _1649)) + _1649);
    float _1765 = _1762 * ((cbModelParam._m0[1u].w * (_1750 - _1651)) + _1651);
    float _1768 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, _1763 * cbSceneParam._m0[91u].x));
    uvec4 _1784 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1786 = _1784.x * 14u;
    uint _1787 = _1786 + 13u;
    float _1794 = _720 + (-1.0);
    float _1799 = (cbLight._m0[_1787].x * _1794) + 1.0;
    float _1800 = (cbLight._m0[_1787].y * _1794) + 1.0;
    float _1801 = (cbLight._m0[_1787].z * _1794) + 1.0;
    float _1802 = (cbLight._m0[_1787].w * _1794) + 1.0;
    uint _1803 = _1786 + 5u;
    float _1809 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1813 = _1786 + 4u;
    float _1820 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1824 = _1786 | 1u;
    float _1835 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_555, _556, _557));
    float _1838 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_555, _556, _557));
    float _4034 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _4045 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1843 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.3183098733425140380859375;
    float _1845 = (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * 0.3183098733425140380859375;
    float _1852 = ((cbLight._m0[_1803].x * _1809) * _1845) + ((cbLight._m0[_1813].x * _1820) * _1843);
    float _1853 = ((_1809 * cbLight._m0[_1803].y) * _1845) + ((_1820 * cbLight._m0[_1813].y) * _1843);
    float _1854 = ((_1809 * cbLight._m0[_1803].z) * _1845) + ((_1820 * cbLight._m0[_1813].z) * _1843);
    uvec4 _1859 = floatBitsToUint(cbLight._m0[_1786 + 12u]);
    bool _1861 = _1859.x == 0u;
    float _1872;
    float _1874;
    float _1876;
    if (_1861)
    {
        _1872 = _1852;
        _1874 = _1853;
        _1876 = _1854;
    }
    else
    {
        uint _1880 = _1786 + 6u;
        float _1896 = (dot(vec3(cbLight._m0[_1786 + 2u].xyz), vec3(_555, _556, _557)) * 0.5) + 0.5;
        float _1897 = _1896 * _1896;
        float _4056 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1899 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1872 = (((cbLight._m0[_1880].x * 0.3183098733425140380859375) * _1898) * _1899) + _1852;
        _1874 = (((cbLight._m0[_1880].y * 0.3183098733425140380859375) * _1898) * _1899) + _1853;
        _1876 = (((cbLight._m0[_1880].z * 0.3183098733425140380859375) * _1898) * _1899) + _1854;
    }
    bool _1879 = _1859.y == 0u;
    float _1917;
    float _1919;
    float _1921;
    if (_1879)
    {
        _1917 = _1872;
        _1919 = _1874;
        _1921 = _1876;
    }
    else
    {
        uint _2076 = _1786 + 7u;
        float _2092 = (dot(vec3(cbLight._m0[_1786 + 3u].xyz), vec3(_555, _556, _557)) * 0.5) + 0.5;
        float _2093 = _2092 * _2092;
        float _4072 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2095 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _1917 = (((cbLight._m0[_2076].x * 0.3183098733425140380859375) * _2094) * _2095) + _1872;
        _1919 = (((cbLight._m0[_2076].y * 0.3183098733425140380859375) * _2094) * _2095) + _1874;
        _1921 = (((cbLight._m0[_2076].z * 0.3183098733425140380859375) * _2094) * _2095) + _1876;
    }
    uint _1924 = _1786 + 8u;
    float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _558) * 0.949999988079071044921875);
    float _1938 = _1937 * _1937;
    float _1939 = cbLight._m0[_1786].x + _634;
    float _1940 = cbLight._m0[_1786].y + _635;
    float _1941 = cbLight._m0[_1786].z + _636;
    float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
    float _1946 = _1945 * _1939;
    float _1947 = _1945 * _1940;
    float _1948 = _1945 * _1941;
    float _1949 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_1786].xyz));
    float _4088 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _4099 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _1953 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _1954 = dot(vec3(_555, _556, _557), vec3(_1946, _1947, _1948));
    float _4110 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _1958 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1946, _1947, _1948));
    float _4121 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1962 = _1938 * _1938;
    float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
    float _1977 = (exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1978 = 1.0 - _1938;
    float _1989 = (0.5 / (((_1953 * ((_1952 * _1978) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _1978) + _1938) * _1952))) * _1952;
    float _4132 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1991 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
    uint _2002 = _1786 + 9u;
    float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _558) * 0.949999988079071044921875);
    float _2014 = _2013 * _2013;
    float _2015 = cbLight._m0[_1824].x + _634;
    float _2016 = cbLight._m0[_1824].y + _635;
    float _2017 = cbLight._m0[_1824].z + _636;
    float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
    float _2022 = _2021 * _2015;
    float _2023 = _2021 * _2016;
    float _2024 = _2021 * _2017;
    float _2025 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_1824].xyz));
    float _4143 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2029 = dot(vec3(_555, _556, _557), vec3(_2022, _2023, _2024));
    float _4154 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_2022, _2023, _2024));
    float _4165 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2014 * _2014;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2050 = (exp2(log2(1.0 - (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2051 = 1.0 - _2014;
    float _2061 = (0.5 / (((_1953 * ((_2028 * _2051) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2051) + _2014) * _2028))) * _2028;
    float _4176 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2063 = (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    float _2073 = (((_2050 * cbLight._m0[_2002].x) * _2063) * _1809) + (((_1977 * cbLight._m0[_1924].x) * _1991) * _1820);
    float _2074 = (((_2050 * cbLight._m0[_2002].y) * _2063) * _1809) + (((_1977 * cbLight._m0[_1924].y) * _1991) * _1820);
    float _2075 = (((_2050 * cbLight._m0[_2002].z) * _2063) * _1809) + (((_1977 * cbLight._m0[_1924].z) * _1991) * _1820);
    float _2137;
    float _2139;
    float _2141;
    if (_1861)
    {
        _2137 = _2073;
        _2139 = _2074;
        _2141 = _2075;
    }
    else
    {
        uint _2143 = _1786 + 2u;
        uint _2147 = _1786 + 10u;
        float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _558) * 0.949999988079071044921875);
        float _2162 = _2161 * _2161;
        float _2163 = cbLight._m0[_2143].x + _634;
        float _2164 = cbLight._m0[_2143].y + _635;
        float _2165 = cbLight._m0[_2143].z + _636;
        float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
        float _2170 = _2169 * _2163;
        float _2171 = _2169 * _2164;
        float _2172 = _2169 * _2165;
        float _2173 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_2143].xyz));
        float _4187 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2177 = dot(vec3(_555, _556, _557), vec3(_2170, _2171, _2172));
        float _4198 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _2181 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2170, _2171, _2172));
        float _4209 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2185 = _2162 * _2162;
        float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
        float _2198 = (exp2(log2(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2199 = 1.0 - _2162;
        float _2209 = (0.5 / (((_1953 * ((_2176 * _2199) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2199) + _2162) * _2176))) * _2176;
        float _4220 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2211 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
        float _2212 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2137 = (((_2198 * cbLight._m0[_2147].x) * _2211) * _2212) + _2073;
        _2139 = (((_2198 * cbLight._m0[_2147].y) * _2211) * _2212) + _2074;
        _2141 = (((_2198 * cbLight._m0[_2147].z) * _2211) * _2212) + _2075;
    }
    float _2247;
    float _2249;
    float _2251;
    if (_1879)
    {
        _2247 = _2137;
        _2249 = _2139;
        _2251 = _2141;
    }
    else
    {
        uint _2258 = _1786 + 3u;
        uint _2262 = _1786 + 11u;
        float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _558) * 0.949999988079071044921875);
        float _2277 = _2276 * _2276;
        float _2278 = cbLight._m0[_2258].x + _634;
        float _2279 = cbLight._m0[_2258].y + _635;
        float _2280 = cbLight._m0[_2258].z + _636;
        float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
        float _2285 = _2284 * _2278;
        float _2286 = _2284 * _2279;
        float _2287 = _2284 * _2280;
        float _2288 = dot(vec3(_555, _556, _557), vec3(cbLight._m0[_2258].xyz));
        float _4236 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2292 = dot(vec3(_555, _556, _557), vec3(_2285, _2286, _2287));
        float _4247 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2296 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2285, _2286, _2287));
        float _4258 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2300 = _2277 * _2277;
        float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
        float _2313 = (exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2314 = 1.0 - _2277;
        float _2324 = (0.5 / (((_1953 * ((_2291 * _2314) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2314) + _2277) * _2291))) * _2291;
        float _4269 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2326 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
        float _2327 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2247 = (((_2313 * cbLight._m0[_2262].x) * _2326) * _2327) + _2137;
        _2249 = (((_2313 * cbLight._m0[_2262].y) * _2326) * _2327) + _2139;
        _2251 = (((_2313 * cbLight._m0[_2262].z) * _2326) * _2327) + _2141;
    }
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    if (_1784.y == 0u)
    {
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2402;
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2402;
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2402;
        uvec4 _2417 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2418 = _2417.x;
        uint _2429 = uint((float(_2417.y) * floor(float(uint(cbSceneParam._m0[85u].y * _656) / _2418))) + floor(float(uint(cbSceneParam._m0[85u].x * _655) / _2418)));
        float _2439 = (log2(_2405 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2440 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        uint _2443 = uint(isnan(14.0) ? _2440 : (isnan(_2440) ? 14.0 : min(_2440, 14.0)));
        uvec4 _2448 = texelFetch(g_lightClusterGridBuffer, int(((_2443 << 2u) + (_2429 << 6u)) >> 2u));
        uint _2449 = _2448.x;
        uint _2450 = _2417.z;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        if (((((1u << ((_2450 >> 4u) & 15u)) + 4294967295u) & _2449) == 0u) || ((_2450 & 240u) == 0u))
        {
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
            _2560 = 0.0;
        }
        else
        {
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2559;
            float _2561;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            uint _2709 = 0u;
            uint _2718;
            bool _2719;
            for (;;)
            {
                _2718 = texelFetch(g_lightClassification, int((((_2443 << 5u) + (_2429 << 9u)) + (_2709 << 2u)) >> 2u)).x;
                _2719 = _2718 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2719)
                {
                    frontier_phi_66_pred = _2703;
                    frontier_phi_66_pred_1 = _2708;
                    frontier_phi_66_pred_2 = _2707;
                    frontier_phi_66_pred_3 = _2706;
                    frontier_phi_66_pred_4 = _2705;
                    frontier_phi_66_pred_5 = _2704;
                }
                else
                {
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    uint _2854;
                    _2848 = _2703;
                    _2849 = _2704;
                    _2850 = _2705;
                    _2851 = _2706;
                    _2852 = _2707;
                    _2853 = _2708;
                    _2854 = _2718;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    for (;;)
                    {
                        uint _2858 = uint(findLSB(_2854)) + (_2709 << 5u);
                        uint _2855 = (_2854 + 4294967295u) & _2854;
                        uint _2860 = _2858 * 48u;
                        vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 3u)).x));
                        uint _2880 = (_2858 * 48u) + 4u;
                        vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 3u)).x));
                        uint _2899 = (_2858 * 48u) + 8u;
                        vec3 _2910 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x));
                        float _2914 = _2874.x - _2403;
                        float _2915 = _2874.y - _2404;
                        float _2916 = _2874.z - _2405;
                        float _2917 = dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916));
                        float _2920 = inversesqrt(_2917);
                        float _2921 = _2920 * _2914;
                        float _2922 = _2920 * _2915;
                        float _2923 = _2920 * _2916;
                        float _2924 = dot(vec3(_676, _679, _682), vec3(_2921, _2922, _2923));
                        float _2929 = 1.0 - (_2917 * _2874.w);
                        float _4295 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2930 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _2931 = sqrt(_2917) * _2893.w;
                        float _2934 = 1.39999997615814208984375 / (_2931 + 1.39999997615814208984375);
                        float _2935 = _2934 * _2934;
                        float _2938 = ((1.0 - _2935) * _2924) + _2935;
                        float _2941 = _2931 * _2931;
                        float _2945 = ((isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0))) * _2930) / ((_2941 * 0.699999988079071044921875) + 1.0);
                        float _2949 = (-0.0) - _2403;
                        float _2950 = (-0.0) - _2404;
                        float _2951 = (-0.0) - _2405;
                        float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
                        float _2956 = _2955 * _2949;
                        float _2957 = _2955 * _2950;
                        float _2958 = _2955 * _2951;
                        float _2966 = exp2(log2(1.0 / ((_2941 * 3.5) + 5.0)) * 0.25);
                        float _2967 = 1.0 - _736;
                        float _2974 = sqrt(1.0 - ((1.0 - (_2967 * _2967)) * (1.0 - (_2966 * _2966))));
                        float _2975 = _2974 * _2974;
                        float _2976 = _2975 * _2975;
                        float _2977 = _2956 + _2921;
                        float _2978 = _2957 + _2922;
                        float _2979 = _2958 + _2923;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2987 = dot(vec3(_676, _679, _682), vec3(_2956, _2957, _2958));
                        float _4311 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2990 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _2991 = dot(vec3(_676, _679, _682), vec3(_2983 * _2977, _2983 * _2978, _2983 * _2979));
                        float _4322 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _2998 = ((_2994 * _2994) * (_2976 + (-1.0))) + 1.0;
                        float _2999 = _2934 * _2975;
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2924) + _3000;
                        float _4333 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3004 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                        float _3005 = 1.0 - _2975;
                        float _3015 = (0.5 / (((_3004 * ((_2990 * _3005) + _2975)) + 9.9999999392252902907785028219223e-09) + (((_3004 * _3005) + _2975) * _2990))) * _3004;
                        float _4344 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3025 = (((_2976 * 3.1415927410125732421875) * (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) / ((_2998 * _2998) * ((_2941 * 2.1991131305694580078125) + 3.141590118408203125))) * _2930;
                        _2778 = (_2945 * _2893.x) + _2851;
                        _2779 = (_2945 * _2893.y) + _2852;
                        _2780 = (_2945 * _2893.z) + _2853;
                        _2775 = (_3025 * _2910.x) + _2848;
                        _2776 = (_3025 * _2910.y) + _2849;
                        _2777 = (_3025 * _2910.z) + _2850;
                        if (_2855 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2848 = _2775;
                            _2849 = _2776;
                            _2850 = _2777;
                            _2851 = _2778;
                            _2852 = _2779;
                            _2853 = _2780;
                            _2854 = _2855;
                        }
                    }
                    frontier_phi_66_pred = _2775;
                    frontier_phi_66_pred_1 = _2780;
                    frontier_phi_66_pred_2 = _2779;
                    frontier_phi_66_pred_3 = _2778;
                    frontier_phi_66_pred_4 = _2777;
                    frontier_phi_66_pred_5 = _2776;
                }
                _2551 = frontier_phi_66_pred;
                _2561 = frontier_phi_66_pred_1;
                _2559 = frontier_phi_66_pred_2;
                _2557 = frontier_phi_66_pred_3;
                _2555 = frontier_phi_66_pred_4;
                _2553 = frontier_phi_66_pred_5;
                uint _2710 = _2709 + 1u;
                if (_2710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2703 = _2551;
                    _2704 = _2553;
                    _2705 = _2555;
                    _2706 = _2557;
                    _2707 = _2559;
                    _2708 = _2561;
                    _2709 = _2710;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
            _2560 = _2561;
        }
        uvec4 _2564 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2565 = _2564.z;
        uint _2567 = (_2565 >> 8u) & 15u;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        if (((4294967295u << _2567) & _2449) == 0u)
        {
            _2671 = _2550;
            _2673 = _2552;
            _2675 = _2554;
            _2677 = _2556;
            _2679 = _2558;
            _2681 = _2560;
        }
        else
        {
            float _2696 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
            float _2697 = _2696 * _2403;
            float _2698 = _2696 * _2404;
            float _2699 = _2696 * _2405;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2567 < ((_2565 >> 12u) & 15u))
            {
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2831 = _2550;
                float _2832 = _2552;
                float _2833 = _2554;
                float _2834 = _2556;
                float _2835 = _2558;
                float _2836 = _2560;
                uint _2837 = _2567;
                uint _2846;
                bool _2847;
                for (;;)
                {
                    _2846 = texelFetch(g_lightClassification, int((((_2443 << 5u) + (_2429 << 9u)) + (_2837 << 2u)) >> 2u)).x;
                    _2847 = _2846 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2847)
                    {
                        frontier_phi_77_pred = _2836;
                        frontier_phi_77_pred_1 = _2835;
                        frontier_phi_77_pred_2 = _2834;
                        frontier_phi_77_pred_3 = _2833;
                        frontier_phi_77_pred_4 = _2832;
                        frontier_phi_77_pred_5 = _2831;
                    }
                    else
                    {
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3052 = _2831;
                        float _3053 = _2832;
                        float _3054 = _2833;
                        float _3055 = _2834;
                        float _3056 = _2835;
                        float _3057 = _2836;
                        uint _3058 = _2846;
                        uint _3059;
                        vec4 _3084;
                        float _3085;
                        vec4 _3100;
                        vec3 _3112;
                        vec4 _3128;
                        vec4 _3143;
                        float _3189;
                        bool _3190;
                        for (;;)
                        {
                            uint _3069 = ((_2837 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3058));
                            _3059 = (_3058 + 4294967295u) & _3058;
                            uint _3071 = _3069 * 40u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3085 = _3084.w;
                            uint _3087 = (_3069 * 40u) + 4u;
                            _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3102 = (_3069 * 40u) + 8u;
                            _3112 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3102)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3102 + 2u)).x));
                            uint _3115 = (_3069 * 40u) + 16u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3069 * 40u) + 20u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3069 * 40u) + 24u;
                            vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3164 = (_3069 * 40u) + 28u;
                            vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            _3189 = fma(_2405, _3177.z, fma(_2404, _3177.y, _3177.x * _2403)) + _3177.w;
                            _3190 = !((fma(_2405, _3158.z, fma(_2404, _3158.y, _3158.x * _2403)) + _3158.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3190)
                            {
                                float _3217 = _3084.x - _2403;
                                float _3218 = _3084.y - _2404;
                                float _3219 = _3084.z - _2405;
                                float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                                float _3223 = inversesqrt(_3220);
                                float _3224 = _3223 * _3217;
                                float _3225 = _3223 * _3218;
                                float _3226 = _3223 * _3219;
                                float _3230 = 1.0 - (_3220 / (_3085 * _3085));
                                float _4355 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3235 = sqrt(_3220) * _3100.w;
                                float _3237 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                                float _3238 = _3237 * _3237;
                                float _3241 = ((1.0 - _3238) * dot(vec3(_3224, _3225, _3226), vec3(_676, _679, _682))) + _3238;
                                float _3244 = _3235 * _3235;
                                float _3248 = (fma(_2405, _3128.z, fma(_2404, _3128.y, _3128.x * _2403)) + _3128.w) / _3189;
                                float _3249 = (fma(_2405, _3143.z, fma(_2404, _3143.y, _3143.x * _2403)) + _3143.w) / _3189;
                                float _3253 = 1.0 - dot(vec2(_3248, _3249), vec2(_3248, _3249));
                                float _4371 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3255 = _3254 * (((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3231) / ((_3244 * 0.699999988079071044921875) + 1.0));
                                float _3267 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                                float _3268 = 1.0 - _736;
                                float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                                float _3276 = _3275 * _3275;
                                float _3277 = _3276 * _3276;
                                float _3278 = _3224 - _2697;
                                float _3279 = _3225 - _2698;
                                float _3280 = _3226 - _2699;
                                float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                                float _3288 = dot(vec3(_676, _679, _682), vec3((-0.0) - _2697, (-0.0) - _2698, (-0.0) - _2699));
                                float _4382 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3292 = dot(vec3(_676, _679, _682), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                                float _4393 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3295 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                                float _3300 = _3237 * _3276;
                                float _3301 = _3300 * _3300;
                                float _3307 = ((1.0 - _3301) * dot(vec3(_676, _679, _682), vec3(_3224, _3225, _3226))) + _3301;
                                float _4404 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3309 = 1.0 - _3276;
                                float _3319 = (0.5 / (((_3308 * ((_3291 * _3309) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3276) * _3291))) * _3308;
                                float _4415 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3329 = (_3254 * _3231) * (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0)))) / ((_3299 * _3299) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3255 * _3100.y;
                                frontier_phi_83_pred_1 = _3255 * _3100.x;
                                frontier_phi_83_pred_2 = _3329 * _3112.z;
                                frontier_phi_83_pred_3 = _3329 * _3112.y;
                                frontier_phi_83_pred_4 = _3329 * _3112.x;
                                frontier_phi_83_pred_5 = _3255 * _3100.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3337 = frontier_phi_83_pred;
                            _3336 = frontier_phi_83_pred_1;
                            _3335 = frontier_phi_83_pred_2;
                            _3334 = frontier_phi_83_pred_3;
                            _3333 = frontier_phi_83_pred_4;
                            _3338 = frontier_phi_83_pred_5;
                            _3042 = _3336 + _3055;
                            _3043 = _3337 + _3056;
                            _3044 = _3338 + _3057;
                            _3039 = _3333 + _3052;
                            _3040 = _3334 + _3053;
                            _3041 = _3335 + _3054;
                            if (_3059 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3052 = _3039;
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3059;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3044;
                        frontier_phi_77_pred_1 = _3043;
                        frontier_phi_77_pred_2 = _3042;
                        frontier_phi_77_pred_3 = _3041;
                        frontier_phi_77_pred_4 = _3040;
                        frontier_phi_77_pred_5 = _3039;
                    }
                    _2682 = frontier_phi_77_pred;
                    _2680 = frontier_phi_77_pred_1;
                    _2678 = frontier_phi_77_pred_2;
                    _2676 = frontier_phi_77_pred_3;
                    _2674 = frontier_phi_77_pred_4;
                    _2672 = frontier_phi_77_pred_5;
                    uint _2838 = _2837 + 1u;
                    if (_2838 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2831 = _2672;
                        _2832 = _2674;
                        _2833 = _2676;
                        _2834 = _2678;
                        _2835 = _2680;
                        _2836 = _2682;
                        _2837 = _2838;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2676;
                frontier_phi_58_59_ladder_1 = _2682;
                frontier_phi_58_59_ladder_2 = _2680;
                frontier_phi_58_59_ladder_3 = _2678;
                frontier_phi_58_59_ladder_4 = _2674;
                frontier_phi_58_59_ladder_5 = _2672;
            }
            else
            {
                frontier_phi_58_59_ladder = _2554;
                frontier_phi_58_59_ladder_1 = _2560;
                frontier_phi_58_59_ladder_2 = _2558;
                frontier_phi_58_59_ladder_3 = _2556;
                frontier_phi_58_59_ladder_4 = _2552;
                frontier_phi_58_59_ladder_5 = _2550;
            }
            _2671 = frontier_phi_58_59_ladder_5;
            _2673 = frontier_phi_58_59_ladder_4;
            _2675 = frontier_phi_58_59_ladder;
            _2677 = frontier_phi_58_59_ladder_3;
            _2679 = frontier_phi_58_59_ladder_2;
            _2681 = frontier_phi_58_59_ladder_1;
        }
        float _2686 = isnan(1.0) ? _720 : (isnan(_720) ? 1.0 : min(_720, 1.0));
        _2462 = (_2686 * _2677) + _1917;
        _2464 = (_2686 * _2679) + _1919;
        _2466 = (_2686 * _2681) + _1921;
        _2468 = ((_2671 * 0.039999999105930328369140625) * _2686) + _2247;
        _2470 = ((_2673 * 0.039999999105930328369140625) * _2686) + _2249;
        _2472 = ((_2675 * 0.039999999105930328369140625) * _2686) + _2251;
    }
    else
    {
        _2462 = _1917;
        _2464 = _1919;
        _2466 = _1921;
        _2468 = _2247;
        _2470 = _2249;
        _2472 = _2251;
    }
    float _4431 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4442 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4453 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _2489 = ((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2462 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _720))) + ((_2468 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1554)) * cbPerFrame._m0[3u].x);
    float _2490 = ((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2464 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _720))) + ((_2470 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1554)) * cbPerFrame._m0[3u].x);
    float _2491 = ((isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2466 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _720))) + ((_2472 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1554)) * cbPerFrame._m0[3u].x);
    uint _2492 = _239 + 6u;
    float _2500 = _655 / cbSceneParam._m0[86u].x;
    float _2501 = _656 / cbSceneParam._m0[86u].y;
    vec4 _2515 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2500, _2501, (log2((isnan(cbSceneParam._m0[77u].w) ? _576 : (isnan(_576) ? cbSceneParam._m0[77u].w : min(_576, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2517 = _2515.x;
    float _2518 = _2515.y;
    float _2519 = _2515.z;
    float _2520 = _2515.w;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    if (_576 > cbSceneParam._m0[78u].w)
    {
        float _2575 = isnan(_576) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _576 : min(cbSceneParam._m0[80u].w, _576));
        float _2576 = _2575 / _576;
        float _2587 = _2576 * _627;
        float _2588 = _628 * _2576;
        float _2589 = (-0.0) - _2588;
        float _2591 = _2576 * _629;
        float _2593 = (cbSceneParam._m0[77u].w * _2589) / _2575;
        float _2594 = _2593 + cbSceneParam._m0[79u].w;
        float _2595 = cbSceneParam._m0[79u].w - _2588;
        float _2601 = sqrt(((_2587 * _2587) + (_2588 * _2588)) + (_2591 * _2591));
        float _2604 = (1.0 - (cbSceneParam._m0[77u].w / _2575)) * _2601;
        float _2609 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2611 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2788;
        if (abs((_2589 - _2593) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2788 = ((((_2594 > 0.0) ? exp2(_2609 * _2594) : (2.0 - exp2(_2611 * _2594))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2604;
        }
        else
        {
            float _2732 = 1.0 / cbSceneParam._m0[80u].x;
            float _2733 = isnan(_2595) ? _2594 : (isnan(_2594) ? _2595 : max(_2594, _2595));
            float _2734 = isnan(_2595) ? _2594 : (isnan(_2594) ? _2595 : min(_2594, _2595));
            float _2743 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : min(_2733, 0.0));
            float _2744 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : min(_2734, 0.0));
            _2788 = ((abs(_2601 / _2589) * cbSceneParam._m0[80u].y) * ((((_2743 - _2744) * 2.0) - ((exp2(_2609 * (isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0)))) - exp2(_2609 * (isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0))))) * _2732)) - ((exp2(_2611 * _2743) - exp2(_2611 * _2744)) * _2732))) + (_2604 * cbSceneParam._m0[80u].z);
        }
        vec4 _2790 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2500, _2501, 1.0), 0.0);
        float _2799 = exp2((_2788 * (-1.44269502162933349609375)) * (1.0 - _2790.w));
        float _2800 = log2(_2799);
        float _2816 = log2(_2520);
        _2613 = (exp2(_2816 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2800 * cbSceneParam._m0[78u].x)) * _2790.x) / cbSceneParam._m0[78u].x)) + _2517;
        _2615 = (exp2(_2816 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2800 * cbSceneParam._m0[78u].y)) * _2790.y) / cbSceneParam._m0[78u].y)) + _2518;
        _2617 = (exp2(_2816 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2800 * cbSceneParam._m0[78u].z)) * _2790.z) / cbSceneParam._m0[78u].z)) + _2519;
        _2619 = _2799 * _2520;
    }
    else
    {
        _2613 = _2517;
        _2615 = _2518;
        _2617 = _2519;
        _2619 = _2520;
    }
    bool _2826;
    vec4 _2629;
    vec4 _2651;
    float _2653;
    float _2657;
    float _2658;
    float _2659;
    float _2660;
    bool _2670;
    for (;;)
    {
        _2629 = cbMatDynParam._m0[0u];
        float _2631 = roundEven(_2629.y);
        bool _2632 = _2631 == 3.0;
        float _2633 = log2(_2619);
        float _2640 = exp2(_2633 * cbSceneParam._m0[78u].x) * _2489;
        float _2641 = exp2(_2633 * cbSceneParam._m0[78u].y) * _2490;
        float _2642 = exp2(_2633 * cbSceneParam._m0[78u].z) * _2491;
        float _2649 = _643 + (-0.5);
        _2651 = cbMtdParam._m0[1u];
        _2653 = _2651.y * _2649;
        float _2656 = (_2631 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2657 = _2656 * (_2632 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2613)));
        _2658 = _2656 * (_2632 ? _2641 : (_2641 + (cbSceneParam._m0[72u].w * _2615)));
        _2659 = _2656 * (_2632 ? _2642 : (_2642 + (cbSceneParam._m0[72u].w * _2617)));
        _2660 = _2649 * 0.999000012874603271484375;
        _2670 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2670)
        {
            if ((cbInstanceData._m0[_239 + 7u].x + _2660) < 0.5)
            {
                _2826 = true;
                break;
            }
        }
        uint _2767 = _695 + uint(_2629.w);
        if ((cbInstanceData._m0[_2767].w < 1.0) && ((cbInstanceData._m0[_2767].w + _2660) < 0.5))
        {
            _2826 = true;
            break;
        }
        if ((_2653 + 1.0) < _2651.x)
        {
            _2826 = true;
            break;
        }
        _2826 = false;
        break;
    }
    float _3030;
    if (_2826)
    {
        discard_state = true;
        _3030 = 0.0;
    }
    else
    {
        _3030 = cbInstanceData._m0[_2492].w;
    }
    SV_Target.x = _2657;
    SV_Target.y = _2658;
    SV_Target.z = _2659;
    SV_Target.w = _3030;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2492].w;
    discard_exit();
}


