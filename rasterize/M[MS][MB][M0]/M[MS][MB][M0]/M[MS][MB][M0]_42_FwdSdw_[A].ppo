#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1170;
float _3814;
float _3815;
float _3816;
float _3817;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _288 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _288.x * cbMtdParam._m0[9u].x;
    float _295 = _288.y * cbMtdParam._m0[9u].y;
    float _296 = _288.z * cbMtdParam._m0[9u].z;
    vec4 _315 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _335 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _268) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _269) + cbTextureTilingScale._m0[20u].w));
    vec4 _361 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _365 = _361.z;
    float _369 = (_361.x * 2.0) + (-1.0);
    float _370 = (_361.y * 2.0) + (-1.0);
    float _371 = dot(vec2(_369, _370), vec2(_369, _370));
    float _3826 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _377 = sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))));
    float _382 = _369 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_335.x * 2.0) + (-1.0)));
    float _383 = _370 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_335.y * 2.0) + (-1.0)));
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _402 = _400.x;
    float _403 = 1.0 - _402;
    float _412 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _415 = ((isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : min(_412, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _424 = (_415 - ((((((_402 - _403) * cbMtdParam._m0[24u].z) + _403) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _415))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3847 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _432 = (_425 * ((_315.x * cbMtdParam._m0[18u].x) - _294)) + _294;
    float _433 = (_425 * ((_315.y * cbMtdParam._m0[18u].y) - _295)) + _295;
    float _434 = (_425 * ((_315.z * cbMtdParam._m0[18u].z) - _296)) + _296;
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _449 = _447.x;
    float _450 = 1.0 - _449;
    float _479 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_449 - _450) * cbMtdParam._m0[24u].w) + _450) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3858 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _488 = ((((cbMtdParam._m0[10u].x - _432) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _480) + _432;
    float _489 = ((((cbMtdParam._m0[10u].y - _433) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _480) + _433;
    float _490 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _434)) * _480) + _434;
    float _495 = (((_335.z - _365) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _365;
    vec4 _509 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _516 = (_509.x * 2.0) + (-1.0);
    float _517 = (_509.y * 2.0) + (-1.0);
    float _518 = dot(vec2(_516, _517), vec2(_516, _517));
    float _3869 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _526 = (_425 * (_509.z - _495)) + _495;
    float _529 = ((cbMtdParam._m0[23u].y - _526) * _480) + _526;
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _557 = (_551.x * 2.0) + (-1.0);
    float _558 = (_551.y * 2.0) + (-1.0);
    float _559 = dot(vec2(_557, _558), vec2(_557, _558));
    float _3880 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _576 = (((_516 - _382) + (cbMtdParam._m0[21u].x * _382)) * _425) + _382;
    float _577 = (((_517 - _383) + (cbMtdParam._m0[21u].x * _383)) * _425) + _383;
    float _578 = (_425 * (sqrt(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) - _377)) + _377;
    float _589 = (((_557 - _576) + (_576 * cbMtdParam._m0[22u].z)) * _480) + _576;
    float _590 = (((_558 - _577) + (_577 * cbMtdParam._m0[22u].z)) * _480) + _577;
    float _591 = ((sqrt(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) - _578) * _480) + _578;
    float _593 = cbMtdParam._m0[22u].x + _361.w;
    float _596 = fma(_591, _236 * NORMAL.x, fma(_590, _243 * TANGENT.x, (_229 * _221) * _589));
    float _599 = fma(_591, _236 * NORMAL.y, fma(_590, _243 * TANGENT.y, (_229 * _222) * _589));
    float _602 = fma(_591, _236 * NORMAL.z, fma(_590, _243 * TANGENT.z, (_229 * _223) * _589));
    float _606 = inversesqrt(dot(vec3(_596, _599, _602), vec3(_596, _599, _602)));
    float _607 = _606 * _596;
    float _608 = _606 * _599;
    float _609 = _606 * _602;
    float _3891 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _610 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3913 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3924 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3935 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _628 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _678 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _668);
    float _679 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _668);
    float _680 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _668);
    float _684 = inversesqrt(dot(vec3(_678, _679, _680), vec3(_678, _679, _680)));
    float _685 = _678 * _684;
    float _686 = _679 * _684;
    float _687 = _680 * _684;
    vec4 _692 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _694 = _692.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _851 = sqrt(((_678 * _678) + (_679 * _679)) + (_680 * _680));
        float _857 = (cbMatDynParam._m0[5u].x * _851) + cbMatDynParam._m0[5u].y;
        float _3946 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _862 = (cbMatDynParam._m0[5u].z * _851) + cbMatDynParam._m0[5u].w;
        float _3957 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) - _858)) + _858) < ((_694 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _706 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _707 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _727 = fma(_609, cbSceneParam._m0[5u].z, fma(_608, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _607));
    float _730 = fma(_609, cbSceneParam._m0[6u].z, fma(_608, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _607));
    float _733 = fma(_609, cbSceneParam._m0[7u].z, fma(_608, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _607));
    uint _746 = _249 + 9u;
    uint _747 = _746 + uint(cbMatDynParam._m0[0u].w);
    float _753 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * cbInstanceData._m0[_747].x;
    float _754 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * cbInstanceData._m0[_747].y;
    float _755 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * cbInstanceData._m0[_747].z;
    float _3968 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _3979 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _3990 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    vec4 _767 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _706, cbSceneParam._m0[86u].y * _707));
    float _771 = ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * TEXCOORD_5.w) * _767.x;
    float _772 = dot(vec3(_607, _608, _609), vec3(_685, _686, _687));
    float _775 = _772 * 2.0;
    float _779 = (_775 * _607) - _685;
    float _780 = (_775 * _608) - _686;
    float _781 = (_775 * _609) - _687;
    float _785 = abs(dot(vec3(_685, _686, _687), vec3(_607, _608, _609)));
    float _4001 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _787 = sqrt(_610);
    float _800 = exp2((_787 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_787 * 3.0));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1169;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _894 = fma(_840, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _832));
        float _898 = fma(_840, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _832));
        float _902 = fma(_840, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _832));
        float _927 = _832 + _607;
        float _928 = _836 + _608;
        float _929 = _840 + _609;
        float _939 = fma(_929, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _927)) - _894;
        float _940 = fma(_929, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _927)) - _898;
        float _941 = fma(_929, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _927)) - _902;
        float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
        float _958 = ((_945 * _939) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_894 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_945 * _940) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_898 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_945 * _941) / cbModelParam._m0[34u].z) + ((((((_902 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        float _997 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_963.x + (-0.5));
        float _999 = _997 * (_963.y + (-0.5));
        float _1000 = _997 * (_963.z + (-0.5));
        float _1007 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_970.x + (-0.5));
        float _1009 = _1007 * (_970.y + (-0.5));
        float _1010 = _1007 * (_970.z + (-0.5));
        float _1017 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_977.x + (-0.5));
        float _1019 = _1017 * (_977.y + (-0.5));
        float _1020 = _1017 * (_977.z + (-0.5));
        float _1027 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_984.x + (-0.5));
        float _1029 = _1027 * (_984.y + (-0.5));
        float _1030 = _1027 * (_984.z + (-0.5));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = _998 * 0.5;
        float _1035 = _1008 * 0.5;
        float _1036 = _1018 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1051 = (dot(vec3(_607, _608, _609), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1061 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _4049 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1063 + 1.0))) + _1068) * _1031;
        float _1078 = _999 * 0.5;
        float _1079 = _1009 * 0.5;
        float _1080 = _1019 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_607, _608, _609), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _4082 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1105 + 1.0))) + _1110) * _1032;
        float _1120 = _1000 * 0.5;
        float _1121 = _1010 * 0.5;
        float _1122 = _1020 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_607, _608, _609), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _4115 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1147 + 1.0))) + _1152) * _1033;
        _1169 = _1000;
        _1171 = _999;
        _1172 = _998;
        _1173 = _1010;
        _1174 = _1009;
        _1175 = _1008;
        _1176 = _1020;
        _1177 = _1019;
        _1178 = _1018;
        _1179 = _1033;
        _1180 = _1032;
        _1181 = _1031;
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
    }
    else
    {
        _1169 = _1170;
        _1171 = _1170;
        _1172 = _1170;
        _1173 = _1170;
        _1174 = _1170;
        _1175 = _1170;
        _1176 = _1170;
        _1177 = _1170;
        _1178 = _1170;
        _1179 = _1170;
        _1180 = _1170;
        _1181 = _1170;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
    }
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1212 = fma(_840, cbModelParam._m0[30u].z, fma(_836, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _832));
        float _1216 = fma(_840, cbModelParam._m0[31u].z, fma(_836, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _832));
        float _1220 = fma(_840, cbModelParam._m0[32u].z, fma(_836, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _832));
        float _1243 = _832 + _607;
        float _1244 = _836 + _608;
        float _1245 = _840 + _609;
        float _1255 = fma(_1245, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243)) - _1212;
        float _1256 = fma(_1245, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243)) - _1216;
        float _1257 = fma(_1245, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243)) - _1220;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1212 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1216 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[35u].z) + ((((((_1220 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1311 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1278.x + (-0.5));
        float _1313 = _1311 * (_1278.y + (-0.5));
        float _1314 = _1311 * (_1278.z + (-0.5));
        float _1321 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1285.x + (-0.5));
        float _1323 = _1321 * (_1285.y + (-0.5));
        float _1324 = _1321 * (_1285.z + (-0.5));
        float _1331 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1292.x + (-0.5));
        float _1333 = _1331 * (_1292.y + (-0.5));
        float _1334 = _1331 * (_1292.z + (-0.5));
        float _1341 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1299.x + (-0.5));
        float _1343 = _1341 * (_1299.y + (-0.5));
        float _1344 = _1341 * (_1299.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_607, _608, _609), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4178 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1375 + 1.0))) + _1380) * _1345;
        float _1390 = _1313 * 0.5;
        float _1391 = _1323 * 0.5;
        float _1392 = _1333 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_607, _608, _609), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4211 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1417 + 1.0))) + _1422) * _1346;
        float _1432 = _1314 * 0.5;
        float _1433 = _1324 * 0.5;
        float _1434 = _1334 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_607, _608, _609), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4244 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1459 + 1.0))) + _1464) * _1347;
        _1481 = _1314;
        _1482 = _1313;
        _1483 = _1312;
        _1484 = _1324;
        _1485 = _1323;
        _1486 = _1322;
        _1487 = _1334;
        _1488 = _1333;
        _1489 = _1332;
        _1490 = _1347;
        _1491 = _1346;
        _1492 = _1345;
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1170;
        _1482 = _1170;
        _1483 = _1170;
        _1484 = _1170;
        _1485 = _1170;
        _1486 = _1170;
        _1487 = _1170;
        _1488 = _1170;
        _1489 = _1170;
        _1490 = _1170;
        _1491 = _1170;
        _1492 = _1170;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1182)) + _1182;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1183)) + _1183;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1184)) + _1184;
    float _1528 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1505));
    float _1549 = _779 * 0.5;
    float _1550 = _780 * 0.5;
    float _1551 = _781 * 0.5;
    float _1552 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1555 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1558 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1565 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1169, _1173, _1176, _1179));
        float _1569 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1573 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1580 = dot(vec4(cbModelParam._m0[39u]), vec4(_1549, _1550, _1551, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1549, _1550, _1551, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _610);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_840, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _832)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_840, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _832)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_840, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _832)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_781, cbModelParam._m0[13u].z, fma(_780, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779));
        float _1679 = fma(_781, cbModelParam._m0[14u].z, fma(_780, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779));
        float _1682 = fma(_781, cbModelParam._m0[15u].z, fma(_780, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1710 = frontier_phi_17_15_ladder;
        }
        float _1880;
        if (_1679 > 0.0)
        {
            _1880 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1880 = frontier_phi_26_22_ladder;
        }
        float _2176;
        if (_1682 > 0.0)
        {
            _2176 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2176 = frontier_phi_38_33_ladder;
        }
        float _2178 = isnan(_1880) ? _1710 : (isnan(_1710) ? _1880 : min(_1710, _1880));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1676) + _1665;
        float _2184 = (_2179 * _1679) + _1669;
        float _2185 = (_2179 * _1682) + _1673;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2188 = (-1.0) - _2186;
        float _2190 = _2186 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2185 > _2190) || ((_2185 < _2188) || ((_2184 > _2190) || ((_2184 < _2188) || ((_2183 < _2188) || (_2183 > _2190))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2330 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2185, cbModelParam._m0[9u].z, fma(_2184, cbModelParam._m0[9u].y, _2183 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2185, cbModelParam._m0[10u].z, fma(_2184, cbModelParam._m0[10u].y, _2183 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2185, cbModelParam._m0[11u].z, fma(_2184, cbModelParam._m0[11u].y, _2183 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_16_38_ladder = _2330.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2330.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2330.x * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_16_38_ladder_2;
        _1700 = frontier_phi_16_38_ladder_1;
        _1702 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_779, _780, _781), _1618);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _610);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1760 = fma(_840, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _832)) + cbModelParam._m0[21u].w;
        float _1764 = fma(_840, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _832)) + cbModelParam._m0[22u].w;
        float _1768 = fma(_840, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _832)) + cbModelParam._m0[23u].w;
        float _1771 = fma(_781, cbModelParam._m0[21u].z, fma(_780, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779));
        float _1774 = fma(_781, cbModelParam._m0[22u].z, fma(_780, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779));
        float _1777 = fma(_781, cbModelParam._m0[23u].z, fma(_780, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779));
        float _1885;
        if (_1771 > 0.0)
        {
            _1885 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1885 = frontier_phi_28_24_ladder;
        }
        float _2203;
        if (_1774 > 0.0)
        {
            _2203 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2203 = frontier_phi_40_35_ladder;
        }
        float _2530;
        if (_1777 > 0.0)
        {
            _2530 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2530 = frontier_phi_50_47_ladder;
        }
        float _2532 = isnan(_2203) ? _1885 : (isnan(_1885) ? _2203 : min(_1885, _2203));
        float _2533 = isnan(_2530) ? _2532 : (isnan(_2532) ? _2530 : min(_2532, _2530));
        float _2537 = (_2533 * _1771) + _1760;
        float _2538 = (_2533 * _1774) + _1764;
        float _2539 = (_2533 * _1777) + _1768;
        float _2540 = _2533 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2540;
        float _2543 = _2540 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2539 > _2543) || ((_2539 < _2541) || ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 < _2541) || (_2537 > _2543))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2657 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2539, cbModelParam._m0[17u].z, fma(_2538, cbModelParam._m0[17u].y, _2537 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2539, cbModelParam._m0[18u].z, fma(_2538, cbModelParam._m0[18u].y, _2537 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2539, cbModelParam._m0[19u].z, fma(_2538, cbModelParam._m0[19u].y, _2537 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_25_50_ladder = _2657.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2657.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2657.x * cbModelParam._m0[1u].z;
        }
        _1796 = frontier_phi_25_50_ladder_2;
        _1798 = frontier_phi_25_50_ladder_1;
        _1800 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_779, _780, _781), _1707);
        _1796 = _1780.x * cbModelParam._m0[1u].z;
        _1798 = _1780.y * cbModelParam._m0[1u].z;
        _1800 = _1780.z * cbModelParam._m0[1u].z;
    }
    float _1812 = ((((1.0 - _800) * ((_787 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_800 * _787)) * _771;
    float _1813 = _1812 * ((cbModelParam._m0[1u].w * (_1796 - _1698)) + _1698);
    float _1814 = _1812 * ((cbModelParam._m0[1u].w * (_1798 - _1700)) + _1700);
    float _1815 = _1812 * ((cbModelParam._m0[1u].w * (_1800 - _1702)) + _1702);
    float _1818 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, _1813 * cbSceneParam._m0[91u].x));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1863 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1872 = _1859 / _1871;
    float _1873 = _1863 / _1871;
    float _1874 = _1867 / _1871;
    float _2021;
    float _2022;
    float _2023;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1901 = ((uint(_1874 > cbSceneParam._m0[59u].y) + uint(_1874 > cbSceneParam._m0[59u].x)) + uint(_1874 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1902 = _1901 + 43u;
        uint _1910 = _1901 + 44u;
        uint _1918 = _1901 + 45u;
        uint _1926 = _1901 + 46u;
        float _1937 = fma(_1871, cbSceneParam._m0[_1902].w, fma(_1867, cbSceneParam._m0[_1902].z, fma(_1863, cbSceneParam._m0[_1902].y, _1859 * cbSceneParam._m0[_1902].x)));
        float _1941 = fma(_1871, cbSceneParam._m0[_1910].w, fma(_1867, cbSceneParam._m0[_1910].z, fma(_1863, cbSceneParam._m0[_1910].y, _1859 * cbSceneParam._m0[_1910].x)));
        float _1949 = fma(_1871, cbSceneParam._m0[_1926].w, fma(_1867, cbSceneParam._m0[_1926].z, fma(_1863, cbSceneParam._m0[_1926].y, _1859 * cbSceneParam._m0[_1926].x)));
        float _1954 = cbSceneParam._m0[33u].z * _1949;
        float _1956 = cbSceneParam._m0[33u].w * _1949;
        float _1959 = fma(_1871, cbSceneParam._m0[_1918].w, fma(_1867, cbSceneParam._m0[_1918].z, fma(_1863, cbSceneParam._m0[_1918].y, _1859 * cbSceneParam._m0[_1918].x))) / _1949;
        float _2007 = (cbSceneParam._m0[33u].x - sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874))) * cbSceneParam._m0[33u].y;
        float _4370 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2014 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1954 + _1937) / _1949, (_1956 + _1941) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1956 + _1937) / _1949, (_1941 - _1954) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 - _1954) / _1949, (_1941 - _1956) / _1949), _1959), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1937 - _1956) / _1949, (_1954 + _1941) / _1949), _1959), 0.0)).x), vec4(0.25)));
        _2021 = 1.0 - (_2014 * cbSceneParam._m0[34u].x);
        _2022 = 1.0 - (_2014 * cbSceneParam._m0[34u].y);
        _2023 = 1.0 - (_2014 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2021 = 1.0;
        _2022 = 1.0;
        _2023 = 1.0;
    }
    float _2087;
    float _2089;
    float _2091;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2075 = fma(_1871, cbSceneParam._m0[63u].w, fma(_1867, cbSceneParam._m0[63u].z, fma(_1863, cbSceneParam._m0[63u].y, _1859 * cbSceneParam._m0[63u].x)));
        float _2076 = fma(_1871, cbSceneParam._m0[60u].w, fma(_1867, cbSceneParam._m0[60u].z, fma(_1863, cbSceneParam._m0[60u].y, _1859 * cbSceneParam._m0[60u].x))) / _2075;
        float _2077 = fma(_1871, cbSceneParam._m0[61u].w, fma(_1867, cbSceneParam._m0[61u].z, fma(_1863, cbSceneParam._m0[61u].y, _1859 * cbSceneParam._m0[61u].x))) / _2075;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2076 >= cbSceneParam._m0[64u].x) && (_2077 >= cbSceneParam._m0[64u].y)) && (_2076 <= cbSceneParam._m0[64u].z)) && (_2077 <= cbSceneParam._m0[64u].w))
        {
            float _2216 = fma(_1871, cbSceneParam._m0[62u].w, fma(_1867, cbSceneParam._m0[62u].z, fma(_1863, cbSceneParam._m0[62u].y, _1859 * cbSceneParam._m0[62u].x))) / _2075;
            float _2220 = isnan(cbSceneParam._m0[41u].w) ? _2216 : (isnan(_2216) ? cbSceneParam._m0[41u].w : max(_2216, cbSceneParam._m0[41u].w));
            float _2263 = (cbSceneParam._m0[33u].x - sqrt(((_1873 * _1873) + (_1872 * _1872)) + (_1874 * _1874))) * cbSceneParam._m0[33u].y;
            float _4386 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
            float _2270 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2076, cbSceneParam._m0[33u].w + _2077), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2076, _2077 - cbSceneParam._m0[33u].z), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2076 - cbSceneParam._m0[33u].z, _2077 - cbSceneParam._m0[33u].w), _2220), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2076 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2077), _2220), 0.0)).x), vec4(0.25)));
            float _2274 = 1.0 - (_2270 * cbSceneParam._m0[34u].x);
            float _2275 = 1.0 - (_2270 * cbSceneParam._m0[34u].y);
            float _2276 = 1.0 - (_2270 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2276) ? _2023 : (isnan(_2023) ? _2276 : min(_2023, _2276));
            frontier_phi_37_36_ladder_1 = isnan(_2275) ? _2022 : (isnan(_2022) ? _2275 : min(_2022, _2275));
            frontier_phi_37_36_ladder_2 = isnan(_2274) ? _2021 : (isnan(_2021) ? _2274 : min(_2021, _2274));
        }
        else
        {
            frontier_phi_37_36_ladder = _2023;
            frontier_phi_37_36_ladder_1 = _2022;
            frontier_phi_37_36_ladder_2 = _2021;
        }
        _2087 = frontier_phi_37_36_ladder_2;
        _2089 = frontier_phi_37_36_ladder_1;
        _2091 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2087 = _2021;
        _2089 = _2022;
        _2091 = _2023;
    }
    uvec4 _2096 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _2098 = _2096.x * 14u;
    uint _2099 = _2098 + 13u;
    float _2106 = _771 + (-1.0);
    float _2111 = (cbLight._m0[_2099].x * _2106) + 1.0;
    float _2112 = (cbLight._m0[_2099].y * _2106) + 1.0;
    float _2113 = (cbLight._m0[_2099].z * _2106) + 1.0;
    float _2114 = (cbLight._m0[_2099].w * _2106) + 1.0;
    uint _2115 = _2098 + 5u;
    float _2121 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
    uint _2125 = _2098 + 4u;
    float _2135 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
    uint _2139 = _2098 | 1u;
    float _2150 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_607, _608, _609));
    float _2153 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_607, _608, _609));
    float _4422 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _4433 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * 0.3183098733425140380859375;
    float _2160 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * 0.3183098733425140380859375;
    float _2167 = ((cbLight._m0[_2115].x * _2121) * _2160) + (((cbLight._m0[_2125].x * _2087) * _2135) * _2158);
    float _2168 = ((_2121 * cbLight._m0[_2115].y) * _2160) + (((cbLight._m0[_2125].y * _2089) * _2135) * _2158);
    float _2169 = ((_2121 * cbLight._m0[_2115].z) * _2160) + (((cbLight._m0[_2125].z * _2091) * _2135) * _2158);
    uvec4 _2173 = floatBitsToUint(cbLight._m0[_2098 + 12u]);
    bool _2175 = _2173.x == 0u;
    float _2277;
    float _2279;
    float _2281;
    if (_2175)
    {
        _2277 = _2167;
        _2279 = _2168;
        _2281 = _2169;
    }
    else
    {
        uint _2285 = _2098 + 6u;
        float _2301 = (dot(vec3(cbLight._m0[_2098 + 2u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _2302 = _2301 * _2301;
        float _4444 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2303 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2304 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2277 = (((cbLight._m0[_2285].x * 0.3183098733425140380859375) * _2303) * _2304) + _2167;
        _2279 = (((cbLight._m0[_2285].y * 0.3183098733425140380859375) * _2303) * _2304) + _2168;
        _2281 = (((cbLight._m0[_2285].z * 0.3183098733425140380859375) * _2303) * _2304) + _2169;
    }
    bool _2284 = _2173.y == 0u;
    float _2339;
    float _2341;
    float _2343;
    if (_2284)
    {
        _2339 = _2277;
        _2341 = _2279;
        _2343 = _2281;
    }
    else
    {
        uint _2501 = _2098 + 7u;
        float _2517 = (dot(vec3(cbLight._m0[_2098 + 3u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _2518 = _2517 * _2517;
        float _4460 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2519 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2520 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2339 = (((cbLight._m0[_2501].x * 0.3183098733425140380859375) * _2519) * _2520) + _2277;
        _2341 = (((cbLight._m0[_2501].y * 0.3183098733425140380859375) * _2519) * _2520) + _2279;
        _2343 = (((cbLight._m0[_2501].z * 0.3183098733425140380859375) * _2519) * _2520) + _2281;
    }
    uint _2346 = _2098 + 8u;
    float _2359 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _610) * 0.949999988079071044921875);
    float _2360 = _2359 * _2359;
    float _2361 = cbLight._m0[_2098].x + _685;
    float _2362 = cbLight._m0[_2098].y + _686;
    float _2363 = cbLight._m0[_2098].z + _687;
    float _2367 = inversesqrt(dot(vec3(_2361, _2362, _2363), vec3(_2361, _2362, _2363)));
    float _2368 = _2367 * _2361;
    float _2369 = _2367 * _2362;
    float _2370 = _2367 * _2363;
    float _2371 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2098].xyz));
    float _4476 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _4487 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _2375 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2376 = dot(vec3(_607, _608, _609), vec3(_2368, _2369, _2370));
    float _4498 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2368, _2369, _2370));
    float _4509 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2360 * _2360;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2399 = (exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2400 = 1.0 - _2360;
    float _2411 = (0.5 / (((_2375 * ((_2374 * _2400) + _2360)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2400) + _2360) * _2374))) * _2374;
    float _4520 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2413 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    uint _2427 = _2098 + 9u;
    float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _610) * 0.949999988079071044921875);
    float _2439 = _2438 * _2438;
    float _2440 = cbLight._m0[_2139].x + _685;
    float _2441 = cbLight._m0[_2139].y + _686;
    float _2442 = cbLight._m0[_2139].z + _687;
    float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
    float _2447 = _2446 * _2440;
    float _2448 = _2446 * _2441;
    float _2449 = _2446 * _2442;
    float _2450 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2139].xyz));
    float _4531 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2454 = dot(vec3(_607, _608, _609), vec3(_2447, _2448, _2449));
    float _4542 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2458 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2447, _2448, _2449));
    float _4553 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2462 = _2439 * _2439;
    float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
    float _2475 = (exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2476 = 1.0 - _2439;
    float _2486 = (0.5 / (((_2375 * ((_2453 * _2476) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2476) + _2439) * _2453))) * _2453;
    float _4564 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2488 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
    float _2498 = (((_2475 * cbLight._m0[_2427].x) * _2488) * _2121) + ((((cbLight._m0[_2346].x * _2087) * _2399) * _2413) * _2135);
    float _2499 = (((_2475 * cbLight._m0[_2427].y) * _2488) * _2121) + ((((cbLight._m0[_2346].y * _2089) * _2399) * _2413) * _2135);
    float _2500 = (((_2475 * cbLight._m0[_2427].z) * _2488) * _2121) + ((((cbLight._m0[_2346].z * _2091) * _2399) * _2413) * _2135);
    float _2556;
    float _2558;
    float _2560;
    if (_2175)
    {
        _2556 = _2498;
        _2558 = _2499;
        _2560 = _2500;
    }
    else
    {
        uint _2562 = _2098 + 2u;
        uint _2566 = _2098 + 10u;
        float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2562].w)) * _610) * 0.949999988079071044921875);
        float _2581 = _2580 * _2580;
        float _2582 = cbLight._m0[_2562].x + _685;
        float _2583 = cbLight._m0[_2562].y + _686;
        float _2584 = cbLight._m0[_2562].z + _687;
        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
        float _2589 = _2588 * _2582;
        float _2590 = _2588 * _2583;
        float _2591 = _2588 * _2584;
        float _2592 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2562].xyz));
        float _4575 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
        float _2595 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2596 = dot(vec3(_607, _608, _609), vec3(_2589, _2590, _2591));
        float _4586 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        float _2599 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _2600 = dot(vec3(cbLight._m0[_2562].xyz), vec3(_2589, _2590, _2591));
        float _4597 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _2581 * _2581;
        float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
        float _2617 = (exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2618 = 1.0 - _2581;
        float _2628 = (0.5 / (((_2375 * ((_2595 * _2618) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2618) + _2581) * _2595))) * _2595;
        float _4608 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        float _2630 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
        float _2631 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2556 = (((_2617 * cbLight._m0[_2566].x) * _2630) * _2631) + _2498;
        _2558 = (((_2617 * cbLight._m0[_2566].y) * _2630) * _2631) + _2499;
        _2560 = (((_2617 * cbLight._m0[_2566].z) * _2630) * _2631) + _2500;
    }
    float _2662;
    float _2664;
    float _2666;
    if (_2284)
    {
        _2662 = _2556;
        _2664 = _2558;
        _2666 = _2560;
    }
    else
    {
        uint _2673 = _2098 + 3u;
        uint _2677 = _2098 + 11u;
        float _2691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2673].w)) * _610) * 0.949999988079071044921875);
        float _2692 = _2691 * _2691;
        float _2693 = cbLight._m0[_2673].x + _685;
        float _2694 = cbLight._m0[_2673].y + _686;
        float _2695 = cbLight._m0[_2673].z + _687;
        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
        float _2700 = _2699 * _2693;
        float _2701 = _2699 * _2694;
        float _2702 = _2699 * _2695;
        float _2703 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2673].xyz));
        float _4624 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2707 = dot(vec3(_607, _608, _609), vec3(_2700, _2701, _2702));
        float _4635 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2710 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _2711 = dot(vec3(cbLight._m0[_2673].xyz), vec3(_2700, _2701, _2702));
        float _4646 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2715 = _2692 * _2692;
        float _2719 = ((_2710 * _2710) * (_2715 + (-1.0))) + 1.0;
        float _2728 = (exp2(log2(1.0 - (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2729 = 1.0 - _2692;
        float _2739 = (0.5 / (((_2375 * ((_2706 * _2729) + _2692)) + 9.9999999392252902907785028219223e-09) + (((_2375 * _2729) + _2692) * _2706))) * _2706;
        float _4657 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2741 = (isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0))) * (_2715 / ((_2719 * _2719) * 3.141590118408203125));
        float _2742 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
        _2662 = (((_2728 * cbLight._m0[_2677].x) * _2741) * _2742) + _2556;
        _2664 = (((_2728 * cbLight._m0[_2677].y) * _2741) * _2742) + _2558;
        _2666 = (((_2728 * cbLight._m0[_2677].z) * _2741) * _2742) + _2560;
    }
    float _2808;
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    if (_2096.y == 0u)
    {
        uvec4 _2763 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2764 = _2763.x;
        uint _2775 = uint((float(_2763.y) * floor(float(uint(cbSceneParam._m0[85u].y * _707) / _2764))) + floor(float(uint(cbSceneParam._m0[85u].x * _706) / _2764)));
        float _2785 = (log2(_1874 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2786 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        uint _2789 = uint(isnan(14.0) ? _2786 : (isnan(_2786) ? 14.0 : min(_2786, 14.0)));
        uvec4 _2794 = texelFetch(g_lightClusterGridBuffer, int(((_2789 << 2u) + (_2775 << 6u)) >> 2u));
        uint _2795 = _2794.x;
        uint _2796 = _2763.z;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((((1u << ((_2796 >> 4u) & 15u)) + 4294967295u) & _2795) == 0u) || ((_2796 & 240u) == 0u))
        {
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
        }
        else
        {
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            uint _3034 = 0u;
            uint _3043;
            bool _3044;
            for (;;)
            {
                _3043 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                _3044 = _3043 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3044)
                {
                    frontier_phi_71_pred = _3033;
                    frontier_phi_71_pred_1 = _3032;
                    frontier_phi_71_pred_2 = _3031;
                    frontier_phi_71_pred_3 = _3030;
                    frontier_phi_71_pred_4 = _3029;
                    frontier_phi_71_pred_5 = _3028;
                }
                else
                {
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    uint _3179;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3043;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    for (;;)
                    {
                        uint _3183 = uint(findLSB(_3179)) + (_3034 << 5u);
                        uint _3180 = (_3179 + 4294967295u) & _3179;
                        uint _3185 = _3183 * 48u;
                        vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3205 = (_3183 * 48u) + 4u;
                        vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 3u)).x));
                        uint _3224 = (_3183 * 48u) + 8u;
                        vec3 _3235 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x));
                        float _3239 = _3199.x - _1872;
                        float _3240 = _3199.y - _1873;
                        float _3241 = _3199.z - _1874;
                        float _3242 = dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241));
                        float _3245 = inversesqrt(_3242);
                        float _3246 = _3245 * _3239;
                        float _3247 = _3245 * _3240;
                        float _3248 = _3245 * _3241;
                        float _3249 = dot(vec3(_727, _730, _733), vec3(_3246, _3247, _3248));
                        float _3254 = 1.0 - (_3242 * _3199.w);
                        float _4683 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3255 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                        float _3256 = sqrt(_3242) * _3218.w;
                        float _3259 = 1.39999997615814208984375 / (_3256 + 1.39999997615814208984375);
                        float _3260 = _3259 * _3259;
                        float _3263 = ((1.0 - _3260) * _3249) + _3260;
                        float _3266 = _3256 * _3256;
                        float _3270 = ((isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))) * _3255) / ((_3266 * 0.699999988079071044921875) + 1.0);
                        float _3274 = (-0.0) - _1872;
                        float _3275 = (-0.0) - _1873;
                        float _3276 = (-0.0) - _1874;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3281 = _3280 * _3274;
                        float _3282 = _3280 * _3275;
                        float _3283 = _3280 * _3276;
                        float _3290 = exp2(log2(1.0 / ((_3266 * 3.5) + 5.0)) * 0.25);
                        float _3291 = 1.0 - _787;
                        float _3298 = sqrt(1.0 - ((1.0 - (_3291 * _3291)) * (1.0 - (_3290 * _3290))));
                        float _3299 = _3298 * _3298;
                        float _3300 = _3299 * _3299;
                        float _3301 = _3281 + _3246;
                        float _3302 = _3282 + _3247;
                        float _3303 = _3283 + _3248;
                        float _3307 = inversesqrt(dot(vec3(_3301, _3302, _3303), vec3(_3301, _3302, _3303)));
                        float _3311 = dot(vec3(_727, _730, _733), vec3(_3281, _3282, _3283));
                        float _4699 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0));
                        float _3314 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                        float _3315 = dot(vec3(_727, _730, _733), vec3(_3307 * _3301, _3307 * _3302, _3307 * _3303));
                        float _4710 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3318 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3322 = ((_3318 * _3318) * (_3300 + (-1.0))) + 1.0;
                        float _3323 = _3259 * _3299;
                        float _3324 = _3323 * _3323;
                        float _3327 = ((1.0 - _3324) * _3249) + _3324;
                        float _4721 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                        float _3328 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                        float _3329 = 1.0 - _3299;
                        float _3339 = (0.5 / (((_3328 * ((_3314 * _3329) + _3299)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3299) * _3314))) * _3328;
                        float _4732 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3350 = (((_3300 * 3.1415927410125732421875) * (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0)))) / ((_3322 * _3322) * ((_3266 * 2.1991131305694580078125) + 3.141590118408203125))) * _3255;
                        _3103 = (_3270 * _3218.x) + _3176;
                        _3104 = (_3270 * _3218.y) + _3177;
                        _3105 = (_3270 * _3218.z) + _3178;
                        _3100 = (_3350 * _3235.x) + _3173;
                        _3101 = (_3350 * _3235.y) + _3174;
                        _3102 = (_3350 * _3235.z) + _3175;
                        if (_3180 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3180;
                        }
                    }
                    frontier_phi_71_pred = _3105;
                    frontier_phi_71_pred_1 = _3104;
                    frontier_phi_71_pred_2 = _3103;
                    frontier_phi_71_pred_3 = _3102;
                    frontier_phi_71_pred_4 = _3101;
                    frontier_phi_71_pred_5 = _3100;
                }
                _2886 = frontier_phi_71_pred;
                _2884 = frontier_phi_71_pred_1;
                _2882 = frontier_phi_71_pred_2;
                _2880 = frontier_phi_71_pred_3;
                _2878 = frontier_phi_71_pred_4;
                _2876 = frontier_phi_71_pred_5;
                uint _3035 = _3034 + 1u;
                if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3028 = _2876;
                    _3029 = _2878;
                    _3030 = _2880;
                    _3031 = _2882;
                    _3032 = _2884;
                    _3033 = _2886;
                    _3034 = _3035;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
        }
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.z;
        uint _2892 = (_2890 >> 8u) & 15u;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((4294967295u << _2892) & _2795) == 0u)
        {
            _2996 = _2875;
            _2998 = _2877;
            _3000 = _2879;
            _3002 = _2881;
            _3004 = _2883;
            _3006 = _2885;
        }
        else
        {
            float _3021 = inversesqrt(dot(vec3(_1872, _1873, _1874), vec3(_1872, _1873, _1874)));
            float _3022 = _3021 * _1872;
            float _3023 = _3021 * _1873;
            float _3024 = _3021 * _1874;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2892 < ((_2890 >> 12u) & 15u))
            {
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3156 = _2875;
                float _3157 = _2877;
                float _3158 = _2879;
                float _3159 = _2881;
                float _3160 = _2883;
                float _3161 = _2885;
                uint _3162 = _2892;
                uint _3171;
                bool _3172;
                for (;;)
                {
                    _3171 = texelFetch(g_lightClassification, int((((_2789 << 5u) + (_2775 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                    _3172 = _3171 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3172)
                    {
                        frontier_phi_82_pred = _3161;
                        frontier_phi_82_pred_1 = _3160;
                        frontier_phi_82_pred_2 = _3159;
                        frontier_phi_82_pred_3 = _3158;
                        frontier_phi_82_pred_4 = _3157;
                        frontier_phi_82_pred_5 = _3156;
                    }
                    else
                    {
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3377 = _3156;
                        float _3378 = _3157;
                        float _3379 = _3158;
                        float _3380 = _3159;
                        float _3381 = _3160;
                        float _3382 = _3161;
                        uint _3383 = _3171;
                        uint _3384;
                        vec4 _3409;
                        float _3410;
                        vec4 _3425;
                        vec3 _3437;
                        vec4 _3453;
                        vec4 _3468;
                        float _3514;
                        bool _3515;
                        for (;;)
                        {
                            uint _3394 = ((_3162 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3383));
                            _3384 = (_3383 + 4294967295u) & _3383;
                            uint _3396 = _3394 * 40u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            _3410 = _3409.w;
                            uint _3412 = (_3394 * 40u) + 4u;
                            _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3427 = (_3394 * 40u) + 8u;
                            _3437 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x));
                            uint _3440 = (_3394 * 40u) + 16u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3394 * 40u) + 20u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3470 = (_3394 * 40u) + 24u;
                            vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            uint _3489 = (_3394 * 40u) + 28u;
                            vec4 _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            _3514 = fma(_1874, _3502.z, fma(_1873, _3502.y, _3502.x * _1872)) + _3502.w;
                            _3515 = !((fma(_1874, _3483.z, fma(_1873, _3483.y, _3483.x * _1872)) + _3483.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3515)
                            {
                                float _3542 = _3409.x - _1872;
                                float _3543 = _3409.y - _1873;
                                float _3544 = _3409.z - _1874;
                                float _3545 = dot(vec3(_3542, _3543, _3544), vec3(_3542, _3543, _3544));
                                float _3548 = inversesqrt(_3545);
                                float _3549 = _3548 * _3542;
                                float _3550 = _3548 * _3543;
                                float _3551 = _3548 * _3544;
                                float _3555 = 1.0 - (_3545 / (_3410 * _3410));
                                float _4743 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
                                float _3560 = sqrt(_3545) * _3425.w;
                                float _3562 = 1.39999997615814208984375 / (_3560 + 1.39999997615814208984375);
                                float _3563 = _3562 * _3562;
                                float _3566 = ((1.0 - _3563) * dot(vec3(_3549, _3550, _3551), vec3(_727, _730, _733))) + _3563;
                                float _3569 = _3560 * _3560;
                                float _3573 = (fma(_1874, _3453.z, fma(_1873, _3453.y, _3453.x * _1872)) + _3453.w) / _3514;
                                float _3574 = (fma(_1874, _3468.z, fma(_1873, _3468.y, _3468.x * _1872)) + _3468.w) / _3514;
                                float _3578 = 1.0 - dot(vec2(_3573, _3574), vec2(_3573, _3574));
                                float _4759 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3580 = _3579 * (((isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0))) * _3556) / ((_3569 * 0.699999988079071044921875) + 1.0));
                                float _3592 = exp2(log2(1.0 / ((_3569 * 3.5) + 5.0)) * 0.25);
                                float _3593 = 1.0 - _787;
                                float _3600 = sqrt(1.0 - ((1.0 - (_3593 * _3593)) * (1.0 - (_3592 * _3592))));
                                float _3601 = _3600 * _3600;
                                float _3602 = _3601 * _3601;
                                float _3603 = _3549 - _3022;
                                float _3604 = _3550 - _3023;
                                float _3605 = _3551 - _3024;
                                float _3609 = inversesqrt(dot(vec3(_3603, _3604, _3605), vec3(_3603, _3604, _3605)));
                                float _3613 = dot(vec3(_727, _730, _733), vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024));
                                float _4770 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3616 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3617 = dot(vec3(_727, _730, _733), vec3(_3609 * _3603, _3609 * _3604, _3609 * _3605));
                                float _4781 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                                float _3620 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3624 = ((_3620 * _3620) * (_3602 + (-1.0))) + 1.0;
                                float _3625 = _3562 * _3601;
                                float _3626 = _3625 * _3625;
                                float _3632 = ((1.0 - _3626) * dot(vec3(_727, _730, _733), vec3(_3549, _3550, _3551))) + _3626;
                                float _4792 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                                float _3633 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                                float _3634 = 1.0 - _3601;
                                float _3644 = (0.5 / (((_3633 * ((_3616 * _3634) + _3601)) + 9.9999999392252902907785028219223e-09) + (((_3633 * _3634) + _3601) * _3616))) * _3633;
                                float _4803 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                                float _3654 = (_3579 * _3556) * (((_3602 * 3.1415927410125732421875) * (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) / ((_3624 * _3624) * ((_3569 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3580 * _3425.z;
                                frontier_phi_88_pred_1 = _3580 * _3425.y;
                                frontier_phi_88_pred_2 = _3580 * _3425.x;
                                frontier_phi_88_pred_3 = _3654 * _3437.z;
                                frontier_phi_88_pred_4 = _3654 * _3437.y;
                                frontier_phi_88_pred_5 = _3654 * _3437.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3663 = frontier_phi_88_pred;
                            _3662 = frontier_phi_88_pred_1;
                            _3661 = frontier_phi_88_pred_2;
                            _3660 = frontier_phi_88_pred_3;
                            _3659 = frontier_phi_88_pred_4;
                            _3658 = frontier_phi_88_pred_5;
                            _3367 = _3661 + _3380;
                            _3368 = _3662 + _3381;
                            _3369 = _3663 + _3382;
                            _3364 = _3658 + _3377;
                            _3365 = _3659 + _3378;
                            _3366 = _3660 + _3379;
                            if (_3384 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3384;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3369;
                        frontier_phi_82_pred_1 = _3368;
                        frontier_phi_82_pred_2 = _3367;
                        frontier_phi_82_pred_3 = _3366;
                        frontier_phi_82_pred_4 = _3365;
                        frontier_phi_82_pred_5 = _3364;
                    }
                    _3007 = frontier_phi_82_pred;
                    _3005 = frontier_phi_82_pred_1;
                    _3003 = frontier_phi_82_pred_2;
                    _3001 = frontier_phi_82_pred_3;
                    _2999 = frontier_phi_82_pred_4;
                    _2997 = frontier_phi_82_pred_5;
                    uint _3163 = _3162 + 1u;
                    if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3156 = _2997;
                        _3157 = _2999;
                        _3158 = _3001;
                        _3159 = _3003;
                        _3160 = _3005;
                        _3161 = _3007;
                        _3162 = _3163;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3003;
                frontier_phi_63_64_ladder_1 = _3007;
                frontier_phi_63_64_ladder_2 = _3005;
                frontier_phi_63_64_ladder_3 = _3001;
                frontier_phi_63_64_ladder_4 = _2999;
                frontier_phi_63_64_ladder_5 = _2997;
            }
            else
            {
                frontier_phi_63_64_ladder = _2881;
                frontier_phi_63_64_ladder_1 = _2885;
                frontier_phi_63_64_ladder_2 = _2883;
                frontier_phi_63_64_ladder_3 = _2879;
                frontier_phi_63_64_ladder_4 = _2877;
                frontier_phi_63_64_ladder_5 = _2875;
            }
            _2996 = frontier_phi_63_64_ladder_5;
            _2998 = frontier_phi_63_64_ladder_4;
            _3000 = frontier_phi_63_64_ladder_3;
            _3002 = frontier_phi_63_64_ladder;
            _3004 = frontier_phi_63_64_ladder_2;
            _3006 = frontier_phi_63_64_ladder_1;
        }
        float _3011 = isnan(1.0) ? _771 : (isnan(_771) ? 1.0 : min(_771, 1.0));
        _2808 = (_3011 * _3002) + _2339;
        _2810 = (_3011 * _3004) + _2341;
        _2812 = (_3011 * _3006) + _2343;
        _2814 = ((_2996 * 0.039999999105930328369140625) * _3011) + _2662;
        _2816 = ((_2998 * 0.039999999105930328369140625) * _3011) + _2664;
        _2818 = ((_3000 * 0.039999999105930328369140625) * _3011) + _2666;
    }
    else
    {
        _2808 = _2339;
        _2810 = _2341;
        _2812 = _2343;
        _2814 = _2662;
        _2816 = _2664;
        _2818 = _2666;
    }
    float _4819 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4830 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4841 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2835 = ((isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2808 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _771))) + ((_2814 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1607)) * cbPerFrame._m0[3u].x);
    float _2836 = ((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2810 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _771))) + ((_2816 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1607)) * cbPerFrame._m0[3u].x);
    float _2837 = ((isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2812 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _771))) + ((_2818 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1607)) * cbPerFrame._m0[3u].x);
    uint _2838 = _249 + 6u;
    float _2846 = _706 / cbSceneParam._m0[86u].x;
    float _2847 = _707 / cbSceneParam._m0[86u].y;
    vec4 _2861 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, (log2((isnan(cbSceneParam._m0[77u].w) ? _628 : (isnan(_628) ? cbSceneParam._m0[77u].w : min(_628, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2863 = _2861.x;
    float _2864 = _2861.y;
    float _2865 = _2861.z;
    float _2866 = _2861.w;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_628 > cbSceneParam._m0[78u].w)
    {
        float _2900 = isnan(_628) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _628 : min(cbSceneParam._m0[80u].w, _628));
        float _2901 = _2900 / _628;
        float _2912 = _2901 * _678;
        float _2913 = _679 * _2901;
        float _2914 = (-0.0) - _2913;
        float _2916 = _2901 * _680;
        float _2918 = (cbSceneParam._m0[77u].w * _2914) / _2900;
        float _2919 = _2918 + cbSceneParam._m0[79u].w;
        float _2920 = cbSceneParam._m0[79u].w - _2913;
        float _2926 = sqrt(((_2912 * _2912) + (_2913 * _2913)) + (_2916 * _2916));
        float _2929 = (1.0 - (cbSceneParam._m0[77u].w / _2900)) * _2926;
        float _2934 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2936 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3113;
        if (abs((_2914 - _2918) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3113 = ((((_2919 > 0.0) ? exp2(_2934 * _2919) : (2.0 - exp2(_2936 * _2919))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2929;
        }
        else
        {
            float _3057 = 1.0 / cbSceneParam._m0[80u].x;
            float _3058 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : max(_2919, _2920));
            float _3059 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : min(_2919, _2920));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            _3113 = ((abs(_2926 / _2914) * cbSceneParam._m0[80u].y) * ((((_3068 - _3069) * 2.0) - ((exp2(_2934 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)))) - exp2(_2934 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))))) * _3057)) - ((exp2(_2936 * _3068) - exp2(_2936 * _3069)) * _3057))) + (_2929 * cbSceneParam._m0[80u].z);
        }
        vec4 _3115 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, 1.0), 0.0);
        float _3124 = exp2((_3113 * (-1.44269502162933349609375)) * (1.0 - _3115.w));
        float _3125 = log2(_3124);
        float _3141 = log2(_2866);
        _2938 = (exp2(_3141 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].x)) * _3115.x) / cbSceneParam._m0[78u].x)) + _2863;
        _2940 = (exp2(_3141 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].y)) * _3115.y) / cbSceneParam._m0[78u].y)) + _2864;
        _2942 = (exp2(_3141 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].z)) * _3115.z) / cbSceneParam._m0[78u].z)) + _2865;
        _2944 = _3124 * _2866;
    }
    else
    {
        _2938 = _2863;
        _2940 = _2864;
        _2942 = _2865;
        _2944 = _2866;
    }
    bool _3151;
    vec4 _2954;
    vec4 _2976;
    float _2978;
    float _2982;
    float _2983;
    float _2984;
    float _2985;
    bool _2995;
    for (;;)
    {
        _2954 = cbMatDynParam._m0[0u];
        float _2956 = roundEven(_2954.y);
        bool _2957 = _2956 == 3.0;
        float _2958 = log2(_2944);
        float _2965 = exp2(_2958 * cbSceneParam._m0[78u].x) * _2835;
        float _2966 = exp2(_2958 * cbSceneParam._m0[78u].y) * _2836;
        float _2967 = exp2(_2958 * cbSceneParam._m0[78u].z) * _2837;
        float _2974 = _694 + (-0.5);
        _2976 = cbMtdParam._m0[1u];
        _2978 = _2976.y * _2974;
        float _2981 = (_2956 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2982 = _2981 * (_2957 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2938)));
        _2983 = _2981 * (_2957 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2940)));
        _2984 = _2981 * (_2957 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2942)));
        _2985 = _2974 * 0.999000012874603271484375;
        _2995 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2995)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2985) < 0.5)
            {
                _3151 = true;
                break;
            }
        }
        uint _3092 = _746 + uint(_2954.w);
        if ((cbInstanceData._m0[_3092].w < 1.0) && ((cbInstanceData._m0[_3092].w + _2985) < 0.5))
        {
            _3151 = true;
            break;
        }
        if ((_2978 + 1.0) < _2976.x)
        {
            _3151 = true;
            break;
        }
        _3151 = false;
        break;
    }
    float _3355;
    if (_3151)
    {
        discard_state = true;
        _3355 = 0.0;
    }
    else
    {
        _3355 = cbInstanceData._m0[_2838].w;
    }
    SV_Target.x = _2982;
    SV_Target.y = _2983;
    SV_Target.z = _2984;
    SV_Target.w = _3355;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2838].w;
    discard_exit();
}


