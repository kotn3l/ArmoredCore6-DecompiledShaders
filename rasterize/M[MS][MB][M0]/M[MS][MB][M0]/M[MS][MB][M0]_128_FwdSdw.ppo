#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1160;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _358 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _358) * cbMtdParam._m0[24u].x) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3747 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _383 = (_376 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _384 = (_376 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _385 = (_376 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _404 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _468 = _466.x;
    float _469 = _466.y;
    float _470 = _466.z;
    float _479 = ((_449.z - _470) * _376) + _470;
    float _482 = ((((_449.x - _468) * _376) + _468) * 2.0) + (-1.0);
    float _483 = ((((_449.y - _469) * _376) + _469) * 2.0) + (-1.0);
    float _484 = dot(vec2(_482, _483), vec2(_482, _483));
    float _3758 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _489 = sqrt(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _532 = _530.x;
    float _533 = 1.0 - _532;
    float _546 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_532 - _533) * cbMtdParam._m0[24u].z) + _533) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3769 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _554 = (_547 * ((_404.x * cbMtdParam._m0[18u].x) - _383)) + _383;
    float _555 = (_547 * ((_404.y * cbMtdParam._m0[18u].y) - _384)) + _384;
    float _556 = (_547 * ((_404.z * cbMtdParam._m0[18u].z) - _385)) + _385;
    float _561 = (((_424.z - _479) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _479;
    float _565 = ((_505.z - _561) * cbMtdParam._m0[19u].w) + _561;
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _585 = (_578.x * 2.0) + (-1.0);
    float _586 = (_578.y * 2.0) + (-1.0);
    float _587 = dot(vec2(_585, _586), vec2(_585, _586));
    float _3780 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _595 = (_547 * (_578.z - _565)) + _565;
    float _604 = (_482 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_424.x * 2.0) + (-1.0)))) + (((_505.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _605 = (_483 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_424.y * 2.0) + (-1.0)))) + (((_505.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _617 = (((_585 - _604) + (cbMtdParam._m0[21u].x * _604)) * _547) + _604;
    float _618 = (((_586 - _605) + (cbMtdParam._m0[21u].x * _605)) * _547) + _605;
    float _619 = (_547 * (sqrt(1.0 - (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) - _489)) + _489;
    float _624 = cbMtdParam._m0[22u].x + _505.w;
    float _627 = fma(_619, _227 * NORMAL.x, fma(_618, _234 * TANGENT.x, (_220 * _212) * _617));
    float _630 = fma(_619, _227 * NORMAL.y, fma(_618, _234 * TANGENT.y, (_220 * _213) * _617));
    float _633 = fma(_619, _227 * NORMAL.z, fma(_618, _234 * TANGENT.z, (_220 * _214) * _617));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    float _638 = _637 * _627;
    float _639 = _637 * _630;
    float _640 = _637 * _633;
    float _3791 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _641 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3813 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3824 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3835 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _659 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _711 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _701);
    float _712 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _701);
    float _713 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _701);
    float _717 = inversesqrt(dot(vec3(_711, _712, _713), vec3(_711, _712, _713)));
    float _718 = _711 * _717;
    float _719 = _712 * _717;
    float _720 = _713 * _717;
    float _726 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _727 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _745 = fma(_640, cbSceneParam._m0[5u].z, fma(_639, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _638));
    float _748 = fma(_640, cbSceneParam._m0[6u].z, fma(_639, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _638));
    float _751 = fma(_640, cbSceneParam._m0[7u].z, fma(_639, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _638));
    uint _765 = (_240 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _771 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * cbInstanceData._m0[_765].x;
    float _772 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * cbInstanceData._m0[_765].y;
    float _773 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0)))) * cbInstanceData._m0[_765].z;
    float _3846 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _3868 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _776 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    vec4 _785 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _726, cbSceneParam._m0[86u].y * _727));
    float _789 = ((isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * TEXCOORD_5.w) * _785.x;
    float _790 = dot(vec3(_638, _639, _640), vec3(_718, _719, _720));
    float _793 = _790 * 2.0;
    float _797 = (_793 * _638) - _718;
    float _798 = (_793 * _639) - _719;
    float _799 = (_793 * _640) - _720;
    float _803 = abs(dot(vec3(_718, _719, _720), vec3(_638, _639, _640)));
    float _3879 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _805 = sqrt(_641);
    float _818 = exp2((_805 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_805 * 3.0));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _854 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1159;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _884 = fma(_858, cbModelParam._m0[26u].z, fma(_854, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _850));
        float _888 = fma(_858, cbModelParam._m0[27u].z, fma(_854, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _850));
        float _892 = fma(_858, cbModelParam._m0[28u].z, fma(_854, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _850));
        float _917 = _850 + _638;
        float _918 = _854 + _639;
        float _919 = _858 + _640;
        float _929 = fma(_919, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _917)) - _884;
        float _930 = fma(_919, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _917)) - _888;
        float _931 = fma(_919, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _917)) - _892;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_884 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_888 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[34u].z) + ((((((_892 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _987 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_953.x + (-0.5));
        float _989 = _987 * (_953.y + (-0.5));
        float _990 = _987 * (_953.z + (-0.5));
        float _997 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_960.x + (-0.5));
        float _999 = _997 * (_960.y + (-0.5));
        float _1000 = _997 * (_960.z + (-0.5));
        float _1007 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_967.x + (-0.5));
        float _1009 = _1007 * (_967.y + (-0.5));
        float _1010 = _1007 * (_967.z + (-0.5));
        float _1017 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_974.x + (-0.5));
        float _1019 = _1017 * (_974.y + (-0.5));
        float _1020 = _1017 * (_974.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1041 = (dot(vec3(_638, _639, _640), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1051 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3927 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1053 + 1.0))) + _1058) * _1021;
        float _1068 = _989 * 0.5;
        float _1069 = _999 * 0.5;
        float _1070 = _1009 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_638, _639, _640), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3960 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1095 + 1.0))) + _1100) * _1022;
        float _1110 = _990 * 0.5;
        float _1111 = _1000 * 0.5;
        float _1112 = _1010 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_638, _639, _640), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3971 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3982 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3993 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_1137 + 1.0))) + _1142) * _1023;
        _1159 = _990;
        _1161 = _989;
        _1162 = _988;
        _1163 = _1000;
        _1164 = _999;
        _1165 = _998;
        _1166 = _1010;
        _1167 = _1009;
        _1168 = _1008;
        _1169 = _1023;
        _1170 = _1022;
        _1171 = _1021;
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
    }
    else
    {
        _1159 = _1160;
        _1161 = _1160;
        _1162 = _1160;
        _1163 = _1160;
        _1164 = _1160;
        _1165 = _1160;
        _1166 = _1160;
        _1167 = _1160;
        _1168 = _1160;
        _1169 = _1160;
        _1170 = _1160;
        _1171 = _1160;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1199 = fma(_858, cbModelParam._m0[30u].z, fma(_854, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _850));
        float _1203 = fma(_858, cbModelParam._m0[31u].z, fma(_854, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _850));
        float _1207 = fma(_858, cbModelParam._m0[32u].z, fma(_854, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _850));
        float _1230 = _850 + _638;
        float _1231 = _854 + _639;
        float _1232 = _858 + _640;
        float _1242 = fma(_1232, cbModelParam._m0[30u].z, fma(_1231, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1230)) - _1199;
        float _1243 = fma(_1232, cbModelParam._m0[31u].z, fma(_1231, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1230)) - _1203;
        float _1244 = fma(_1232, cbModelParam._m0[32u].z, fma(_1231, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1230)) - _1207;
        float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
        float _1261 = ((_1248 * _1242) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1199 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1248 * _1243) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1203 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1248 * _1244) / cbModelParam._m0[35u].z) + ((((((_1207 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1298 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1265.x + (-0.5));
        float _1300 = _1298 * (_1265.y + (-0.5));
        float _1301 = _1298 * (_1265.z + (-0.5));
        float _1308 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1272.x + (-0.5));
        float _1310 = _1308 * (_1272.y + (-0.5));
        float _1311 = _1308 * (_1272.z + (-0.5));
        float _1318 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1279.x + (-0.5));
        float _1320 = _1318 * (_1279.y + (-0.5));
        float _1321 = _1318 * (_1279.z + (-0.5));
        float _1328 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1286.x + (-0.5));
        float _1330 = _1328 * (_1286.y + (-0.5));
        float _1331 = _1328 * (_1286.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_638, _639, _640), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4056 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1362 + 1.0))) + _1367) * _1332;
        float _1377 = _1300 * 0.5;
        float _1378 = _1310 * 0.5;
        float _1379 = _1320 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_638, _639, _640), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4089 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1404 + 1.0))) + _1409) * _1333;
        float _1419 = _1301 * 0.5;
        float _1420 = _1311 * 0.5;
        float _1421 = _1321 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_638, _639, _640), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4122 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1446 + 1.0))) + _1451) * _1334;
        _1468 = _1301;
        _1469 = _1300;
        _1470 = _1299;
        _1471 = _1311;
        _1472 = _1310;
        _1473 = _1309;
        _1474 = _1321;
        _1475 = _1320;
        _1476 = _1319;
        _1477 = _1334;
        _1478 = _1333;
        _1479 = _1332;
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
    }
    else
    {
        _1468 = _1160;
        _1469 = _1160;
        _1470 = _1160;
        _1471 = _1160;
        _1472 = _1160;
        _1473 = _1160;
        _1474 = _1160;
        _1475 = _1160;
        _1476 = _1160;
        _1477 = _1160;
        _1478 = _1160;
        _1479 = _1160;
        _1480 = 0.0;
        _1481 = 0.0;
        _1482 = 0.0;
    }
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1172)) + _1172;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1173)) + _1173;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1174)) + _1174;
    float _1515 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1492));
    float _1536 = _797 * 0.5;
    float _1537 = _798 * 0.5;
    float _1538 = _799 * 0.5;
    float _1539 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1542 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1545 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1579;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1552 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1159, _1163, _1166, _1169));
        float _1556 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1560 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1162, _1165, _1168, _1171));
        float _1567 = dot(vec4(cbModelParam._m0[39u]), vec4(_1536, _1537, _1538, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1590;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1581 = dot(vec4(cbModelParam._m0[40u]), vec4(_1536, _1537, _1538, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1594 = (_1590 * cbModelParam._m0[1u].x) + (_1579 * (1.0 - cbModelParam._m0[1u].x));
    float _1604 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _641);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1604 : min(cbModelParam._m0[25u].z, _1604));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1652 = fma(_858, cbModelParam._m0[13u].z, fma(_854, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _850)) + cbModelParam._m0[13u].w;
        float _1656 = fma(_858, cbModelParam._m0[14u].z, fma(_854, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _850)) + cbModelParam._m0[14u].w;
        float _1660 = fma(_858, cbModelParam._m0[15u].z, fma(_854, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _850)) + cbModelParam._m0[15u].w;
        float _1663 = fma(_799, cbModelParam._m0[13u].z, fma(_798, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _797));
        float _1666 = fma(_799, cbModelParam._m0[14u].z, fma(_798, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _797));
        float _1669 = fma(_799, cbModelParam._m0[15u].z, fma(_798, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _797));
        float _1697;
        if (_1663 > 0.0)
        {
            _1697 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1697 = frontier_phi_14_12_ladder;
        }
        float _1866;
        if (_1666 > 0.0)
        {
            _1866 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1866 = frontier_phi_23_19_ladder;
        }
        float _2161;
        if (_1669 > 0.0)
        {
            _2161 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2161 = frontier_phi_35_30_ladder;
        }
        float _2163 = isnan(_1866) ? _1697 : (isnan(_1697) ? _1866 : min(_1697, _1866));
        float _2164 = isnan(_2161) ? _2163 : (isnan(_2163) ? _2161 : min(_2163, _2161));
        float _2168 = (_2164 * _1663) + _1652;
        float _2169 = (_2164 * _1666) + _1656;
        float _2170 = (_2164 * _1669) + _1660;
        float _2171 = _2164 * 9.9999997473787516355514526367188e-05;
        float _2173 = (-1.0) - _2171;
        float _2175 = _2171 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2170 > _2175) || ((_2170 < _2173) || ((_2169 > _2175) || ((_2169 < _2173) || ((_2168 < _2173) || (_2168 > _2175))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2170, cbModelParam._m0[9u].z, fma(_2169, cbModelParam._m0[9u].y, _2168 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2170, cbModelParam._m0[10u].z, fma(_2169, cbModelParam._m0[10u].y, _2168 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2170, cbModelParam._m0[11u].z, fma(_2169, cbModelParam._m0[11u].y, _2168 * cbModelParam._m0[11u].x))), _1605);
            frontier_phi_13_35_ladder = _2315.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2315.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2315.x * cbModelParam._m0[1u].y;
        }
        _1685 = frontier_phi_13_35_ladder_2;
        _1687 = frontier_phi_13_35_ladder_1;
        _1689 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1673 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_797, _798, _799), _1605);
        _1685 = _1673.x * cbModelParam._m0[1u].y;
        _1687 = _1673.y * cbModelParam._m0[1u].y;
        _1689 = _1673.z * cbModelParam._m0[1u].y;
    }
    float _1693 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _641);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1693 : min(cbModelParam._m0[25u].w, _1693));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1747 = fma(_858, cbModelParam._m0[21u].z, fma(_854, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _850)) + cbModelParam._m0[21u].w;
        float _1751 = fma(_858, cbModelParam._m0[22u].z, fma(_854, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _850)) + cbModelParam._m0[22u].w;
        float _1755 = fma(_858, cbModelParam._m0[23u].z, fma(_854, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _850)) + cbModelParam._m0[23u].w;
        float _1758 = fma(_799, cbModelParam._m0[21u].z, fma(_798, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _797));
        float _1761 = fma(_799, cbModelParam._m0[22u].z, fma(_798, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _797));
        float _1764 = fma(_799, cbModelParam._m0[23u].z, fma(_798, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _797));
        float _1871;
        if (_1758 > 0.0)
        {
            _1871 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1871 = frontier_phi_25_21_ladder;
        }
        float _2188;
        if (_1761 > 0.0)
        {
            _2188 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2188 = frontier_phi_37_32_ladder;
        }
        float _2515;
        if (_1764 > 0.0)
        {
            _2515 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2515 = frontier_phi_47_44_ladder;
        }
        float _2517 = isnan(_2188) ? _1871 : (isnan(_1871) ? _2188 : min(_1871, _2188));
        float _2518 = isnan(_2515) ? _2517 : (isnan(_2517) ? _2515 : min(_2517, _2515));
        float _2522 = (_2518 * _1758) + _1747;
        float _2523 = (_2518 * _1761) + _1751;
        float _2524 = (_2518 * _1764) + _1755;
        float _2525 = _2518 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2525;
        float _2528 = _2525 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2524 > _2528) || ((_2524 < _2526) || ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 < _2526) || (_2522 > _2528))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2642 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2524, cbModelParam._m0[17u].z, fma(_2523, cbModelParam._m0[17u].y, _2522 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2524, cbModelParam._m0[18u].z, fma(_2523, cbModelParam._m0[18u].y, _2522 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2524, cbModelParam._m0[19u].z, fma(_2523, cbModelParam._m0[19u].y, _2522 * cbModelParam._m0[19u].x))), _1694);
            frontier_phi_22_47_ladder = _2642.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2642.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2642.x * cbModelParam._m0[1u].z;
        }
        _1783 = frontier_phi_22_47_ladder_2;
        _1785 = frontier_phi_22_47_ladder_1;
        _1787 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_797, _798, _799), _1694);
        _1783 = _1767.x * cbModelParam._m0[1u].z;
        _1785 = _1767.y * cbModelParam._m0[1u].z;
        _1787 = _1767.z * cbModelParam._m0[1u].z;
    }
    float _1799 = ((((1.0 - _818) * ((_805 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_818 * _805)) * _789;
    float _1800 = _1799 * ((cbModelParam._m0[1u].w * (_1783 - _1685)) + _1685);
    float _1801 = _1799 * ((cbModelParam._m0[1u].w * (_1785 - _1687)) + _1687);
    float _1802 = _1799 * ((cbModelParam._m0[1u].w * (_1787 - _1689)) + _1689);
    float _1805 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1801, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1801, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1801, cbSceneParam._m0[91u].y, _1800 * cbSceneParam._m0[91u].x));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1857 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1858 = _1845 / _1857;
    float _1859 = _1849 / _1857;
    float _1860 = _1853 / _1857;
    float _2007;
    float _2008;
    float _2009;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1887 = ((uint(_1860 > cbSceneParam._m0[59u].y) + uint(_1860 > cbSceneParam._m0[59u].x)) + uint(_1860 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1888 = _1887 + 43u;
        uint _1896 = _1887 + 44u;
        uint _1904 = _1887 + 45u;
        uint _1912 = _1887 + 46u;
        float _1923 = fma(_1857, cbSceneParam._m0[_1888].w, fma(_1853, cbSceneParam._m0[_1888].z, fma(_1849, cbSceneParam._m0[_1888].y, _1845 * cbSceneParam._m0[_1888].x)));
        float _1927 = fma(_1857, cbSceneParam._m0[_1896].w, fma(_1853, cbSceneParam._m0[_1896].z, fma(_1849, cbSceneParam._m0[_1896].y, _1845 * cbSceneParam._m0[_1896].x)));
        float _1935 = fma(_1857, cbSceneParam._m0[_1912].w, fma(_1853, cbSceneParam._m0[_1912].z, fma(_1849, cbSceneParam._m0[_1912].y, _1845 * cbSceneParam._m0[_1912].x)));
        float _1940 = cbSceneParam._m0[33u].z * _1935;
        float _1942 = cbSceneParam._m0[33u].w * _1935;
        float _1945 = fma(_1857, cbSceneParam._m0[_1904].w, fma(_1853, cbSceneParam._m0[_1904].z, fma(_1849, cbSceneParam._m0[_1904].y, _1845 * cbSceneParam._m0[_1904].x))) / _1935;
        float _1993 = (cbSceneParam._m0[33u].x - sqrt(((_1859 * _1859) + (_1858 * _1858)) + (_1860 * _1860))) * cbSceneParam._m0[33u].y;
        float _4248 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _2000 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1940 + _1923) / _1935, (_1942 + _1927) / _1935), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1942 + _1923) / _1935, (_1927 - _1940) / _1935), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 - _1940) / _1935, (_1927 - _1942) / _1935), _1945), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 - _1942) / _1935, (_1940 + _1927) / _1935), _1945), 0.0)).x), vec4(0.25)));
        _2007 = 1.0 - (_2000 * cbSceneParam._m0[34u].x);
        _2008 = 1.0 - (_2000 * cbSceneParam._m0[34u].y);
        _2009 = 1.0 - (_2000 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2007 = 1.0;
        _2008 = 1.0;
        _2009 = 1.0;
    }
    float _2073;
    float _2075;
    float _2077;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2061 = fma(_1857, cbSceneParam._m0[63u].w, fma(_1853, cbSceneParam._m0[63u].z, fma(_1849, cbSceneParam._m0[63u].y, _1845 * cbSceneParam._m0[63u].x)));
        float _2062 = fma(_1857, cbSceneParam._m0[60u].w, fma(_1853, cbSceneParam._m0[60u].z, fma(_1849, cbSceneParam._m0[60u].y, _1845 * cbSceneParam._m0[60u].x))) / _2061;
        float _2063 = fma(_1857, cbSceneParam._m0[61u].w, fma(_1853, cbSceneParam._m0[61u].z, fma(_1849, cbSceneParam._m0[61u].y, _1845 * cbSceneParam._m0[61u].x))) / _2061;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2062 >= cbSceneParam._m0[64u].x) && (_2063 >= cbSceneParam._m0[64u].y)) && (_2062 <= cbSceneParam._m0[64u].z)) && (_2063 <= cbSceneParam._m0[64u].w))
        {
            float _2201 = fma(_1857, cbSceneParam._m0[62u].w, fma(_1853, cbSceneParam._m0[62u].z, fma(_1849, cbSceneParam._m0[62u].y, _1845 * cbSceneParam._m0[62u].x))) / _2061;
            float _2205 = isnan(cbSceneParam._m0[41u].w) ? _2201 : (isnan(_2201) ? cbSceneParam._m0[41u].w : max(_2201, cbSceneParam._m0[41u].w));
            float _2248 = (cbSceneParam._m0[33u].x - sqrt(((_1859 * _1859) + (_1858 * _1858)) + (_1860 * _1860))) * cbSceneParam._m0[33u].y;
            float _4264 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
            float _2255 = (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2062, cbSceneParam._m0[33u].w + _2063), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2062, _2063 - cbSceneParam._m0[33u].z), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2062 - cbSceneParam._m0[33u].z, _2063 - cbSceneParam._m0[33u].w), _2205), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2062 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2063), _2205), 0.0)).x), vec4(0.25)));
            float _2259 = 1.0 - (_2255 * cbSceneParam._m0[34u].x);
            float _2260 = 1.0 - (_2255 * cbSceneParam._m0[34u].y);
            float _2261 = 1.0 - (_2255 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2261) ? _2009 : (isnan(_2009) ? _2261 : min(_2009, _2261));
            frontier_phi_34_33_ladder_1 = isnan(_2260) ? _2008 : (isnan(_2008) ? _2260 : min(_2008, _2260));
            frontier_phi_34_33_ladder_2 = isnan(_2259) ? _2007 : (isnan(_2007) ? _2259 : min(_2007, _2259));
        }
        else
        {
            frontier_phi_34_33_ladder = _2009;
            frontier_phi_34_33_ladder_1 = _2008;
            frontier_phi_34_33_ladder_2 = _2007;
        }
        _2073 = frontier_phi_34_33_ladder_2;
        _2075 = frontier_phi_34_33_ladder_1;
        _2077 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2073 = _2007;
        _2075 = _2008;
        _2077 = _2009;
    }
    uvec4 _2082 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2084 = _2082.x * 14u;
    uint _2085 = _2084 + 13u;
    float _2092 = _789 + (-1.0);
    float _2097 = (cbLight._m0[_2085].x * _2092) + 1.0;
    float _2098 = (cbLight._m0[_2085].y * _2092) + 1.0;
    float _2099 = (cbLight._m0[_2085].z * _2092) + 1.0;
    float _2100 = (cbLight._m0[_2085].w * _2092) + 1.0;
    uint _2101 = _2084 + 5u;
    float _2107 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
    uint _2111 = _2084 + 4u;
    float _2120 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
    uint _2124 = _2084 | 1u;
    float _2135 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_638, _639, _640));
    float _2138 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_638, _639, _640));
    float _4300 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _4311 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2143 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * 0.3183098733425140380859375;
    float _2145 = (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * 0.3183098733425140380859375;
    float _2152 = ((cbLight._m0[_2101].x * _2107) * _2145) + (((cbLight._m0[_2111].x * _2073) * _2120) * _2143);
    float _2153 = ((_2107 * cbLight._m0[_2101].y) * _2145) + (((cbLight._m0[_2111].y * _2075) * _2120) * _2143);
    float _2154 = ((_2107 * cbLight._m0[_2101].z) * _2145) + (((cbLight._m0[_2111].z * _2077) * _2120) * _2143);
    uvec4 _2158 = floatBitsToUint(cbLight._m0[_2084 + 12u]);
    bool _2160 = _2158.x == 0u;
    float _2262;
    float _2264;
    float _2266;
    if (_2160)
    {
        _2262 = _2152;
        _2264 = _2153;
        _2266 = _2154;
    }
    else
    {
        uint _2270 = _2084 + 6u;
        float _2286 = (dot(vec3(cbLight._m0[_2084 + 2u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4322 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _2289 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2262 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2152;
        _2264 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2153;
        _2266 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2154;
    }
    bool _2269 = _2158.y == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2269)
    {
        _2324 = _2262;
        _2326 = _2264;
        _2328 = _2266;
    }
    else
    {
        uint _2486 = _2084 + 7u;
        float _2502 = (dot(vec3(cbLight._m0[_2084 + 3u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2503 = _2502 * _2502;
        float _4338 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2504 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _2505 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2324 = (((cbLight._m0[_2486].x * 0.3183098733425140380859375) * _2504) * _2505) + _2262;
        _2326 = (((cbLight._m0[_2486].y * 0.3183098733425140380859375) * _2504) * _2505) + _2264;
        _2328 = (((cbLight._m0[_2486].z * 0.3183098733425140380859375) * _2504) * _2505) + _2266;
    }
    uint _2331 = _2084 + 8u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _641) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2084].x + _718;
    float _2347 = cbLight._m0[_2084].y + _719;
    float _2348 = cbLight._m0[_2084].z + _720;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2084].xyz));
    float _4354 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _4365 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _2360 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2361 = dot(vec3(_638, _639, _640), vec3(_2353, _2354, _2355));
    float _4376 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2353, _2354, _2355));
    float _4387 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2345 * _2345;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2384 = (exp2(log2(1.0 - (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2385 = 1.0 - _2345;
    float _2396 = (0.5 / (((_2360 * ((_2359 * _2385) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2385) + _2345) * _2359))) * _2359;
    float _4398 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2398 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    uint _2412 = _2084 + 9u;
    float _2423 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2124].w)) * _641) * 0.949999988079071044921875);
    float _2424 = _2423 * _2423;
    float _2425 = cbLight._m0[_2124].x + _718;
    float _2426 = cbLight._m0[_2124].y + _719;
    float _2427 = cbLight._m0[_2124].z + _720;
    float _2431 = inversesqrt(dot(vec3(_2425, _2426, _2427), vec3(_2425, _2426, _2427)));
    float _2432 = _2431 * _2425;
    float _2433 = _2431 * _2426;
    float _2434 = _2431 * _2427;
    float _2435 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2124].xyz));
    float _4409 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2439 = dot(vec3(_638, _639, _640), vec3(_2432, _2433, _2434));
    float _4420 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2443 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2432, _2433, _2434));
    float _4431 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2447 = _2424 * _2424;
    float _2451 = ((_2442 * _2442) * (_2447 + (-1.0))) + 1.0;
    float _2460 = (exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2461 = 1.0 - _2424;
    float _2471 = (0.5 / (((_2360 * ((_2438 * _2461) + _2424)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2461) + _2424) * _2438))) * _2438;
    float _4442 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2473 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2447 / ((_2451 * _2451) * 3.141590118408203125));
    float _2483 = (((_2460 * cbLight._m0[_2412].x) * _2473) * _2107) + ((((cbLight._m0[_2331].x * _2073) * _2384) * _2398) * _2120);
    float _2484 = (((_2460 * cbLight._m0[_2412].y) * _2473) * _2107) + ((((cbLight._m0[_2331].y * _2075) * _2384) * _2398) * _2120);
    float _2485 = (((_2460 * cbLight._m0[_2412].z) * _2473) * _2107) + ((((cbLight._m0[_2331].z * _2077) * _2384) * _2398) * _2120);
    float _2541;
    float _2543;
    float _2545;
    if (_2160)
    {
        _2541 = _2483;
        _2543 = _2484;
        _2545 = _2485;
    }
    else
    {
        uint _2547 = _2084 + 2u;
        uint _2551 = _2084 + 10u;
        float _2565 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2547].w)) * _641) * 0.949999988079071044921875);
        float _2566 = _2565 * _2565;
        float _2567 = cbLight._m0[_2547].x + _718;
        float _2568 = cbLight._m0[_2547].y + _719;
        float _2569 = cbLight._m0[_2547].z + _720;
        float _2573 = inversesqrt(dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569)));
        float _2574 = _2573 * _2567;
        float _2575 = _2573 * _2568;
        float _2576 = _2573 * _2569;
        float _2577 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2547].xyz));
        float _4453 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2581 = dot(vec3(_638, _639, _640), vec3(_2574, _2575, _2576));
        float _4464 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2584 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2585 = dot(vec3(cbLight._m0[_2547].xyz), vec3(_2574, _2575, _2576));
        float _4475 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2589 = _2566 * _2566;
        float _2593 = ((_2584 * _2584) * (_2589 + (-1.0))) + 1.0;
        float _2602 = (exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2603 = 1.0 - _2566;
        float _2613 = (0.5 / (((_2360 * ((_2580 * _2603) + _2566)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2603) + _2566) * _2580))) * _2580;
        float _4486 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2615 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2589 / ((_2593 * _2593) * 3.141590118408203125));
        float _2616 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
        _2541 = (((_2602 * cbLight._m0[_2551].x) * _2615) * _2616) + _2483;
        _2543 = (((_2602 * cbLight._m0[_2551].y) * _2615) * _2616) + _2484;
        _2545 = (((_2602 * cbLight._m0[_2551].z) * _2615) * _2616) + _2485;
    }
    float _2647;
    float _2649;
    float _2651;
    if (_2269)
    {
        _2647 = _2541;
        _2649 = _2543;
        _2651 = _2545;
    }
    else
    {
        uint _2658 = _2084 + 3u;
        uint _2662 = _2084 + 11u;
        float _2676 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2658].w)) * _641) * 0.949999988079071044921875);
        float _2677 = _2676 * _2676;
        float _2678 = cbLight._m0[_2658].x + _718;
        float _2679 = cbLight._m0[_2658].y + _719;
        float _2680 = cbLight._m0[_2658].z + _720;
        float _2684 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
        float _2685 = _2684 * _2678;
        float _2686 = _2684 * _2679;
        float _2687 = _2684 * _2680;
        float _2688 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2658].xyz));
        float _4502 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2692 = dot(vec3(_638, _639, _640), vec3(_2685, _2686, _2687));
        float _4513 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2696 = dot(vec3(cbLight._m0[_2658].xyz), vec3(_2685, _2686, _2687));
        float _4524 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2700 = _2677 * _2677;
        float _2704 = ((_2695 * _2695) * (_2700 + (-1.0))) + 1.0;
        float _2713 = (exp2(log2(1.0 - (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2714 = 1.0 - _2677;
        float _2724 = (0.5 / (((_2360 * ((_2691 * _2714) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2714) + _2677) * _2691))) * _2691;
        float _4535 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2726 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (_2700 / ((_2704 * _2704) * 3.141590118408203125));
        float _2727 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
        _2647 = (((_2713 * cbLight._m0[_2662].x) * _2726) * _2727) + _2541;
        _2649 = (((_2713 * cbLight._m0[_2662].y) * _2726) * _2727) + _2543;
        _2651 = (((_2713 * cbLight._m0[_2662].z) * _2726) * _2727) + _2545;
    }
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    float _2801;
    float _2803;
    if (_2082.y == 0u)
    {
        uvec4 _2748 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2749 = _2748.x;
        uint _2760 = uint((float(_2748.y) * floor(float(uint(cbSceneParam._m0[85u].y * _727) / _2749))) + floor(float(uint(cbSceneParam._m0[85u].x * _726) / _2749)));
        float _2770 = (log2(_1860 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2771 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        uint _2774 = uint(isnan(14.0) ? _2771 : (isnan(_2771) ? 14.0 : min(_2771, 14.0)));
        uvec4 _2779 = texelFetch(g_lightClusterGridBuffer, int(((_2774 << 2u) + (_2760 << 6u)) >> 2u));
        uint _2780 = _2779.x;
        uint _2781 = _2748.z;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        if (((((1u << ((_2781 >> 4u) & 15u)) + 4294967295u) & _2780) == 0u) || ((_2781 & 240u) == 0u))
        {
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
        }
        else
        {
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            uint _3011 = 0u;
            uint _3020;
            bool _3021;
            for (;;)
            {
                _3020 = texelFetch(g_lightClassification, int((((_2774 << 5u) + (_2760 << 9u)) + (_3011 << 2u)) >> 2u)).x;
                _3021 = _3020 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3021)
                {
                    frontier_phi_66_pred = _3010;
                    frontier_phi_66_pred_1 = _3009;
                    frontier_phi_66_pred_2 = _3008;
                    frontier_phi_66_pred_3 = _3007;
                    frontier_phi_66_pred_4 = _3006;
                    frontier_phi_66_pred_5 = _3005;
                }
                else
                {
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    uint _3135;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3007;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3010;
                    _3135 = _3020;
                    float _3061;
                    float _3062;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    for (;;)
                    {
                        uint _3139 = uint(findLSB(_3135)) + (_3011 << 5u);
                        uint _3136 = (_3135 + 4294967295u) & _3135;
                        uint _3141 = _3139 * 48u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 3u)).x));
                        uint _3161 = (_3139 * 48u) + 4u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3180 = (_3139 * 48u) + 8u;
                        vec3 _3191 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x));
                        float _3195 = _3155.x - _1858;
                        float _3196 = _3155.y - _1859;
                        float _3197 = _3155.z - _1860;
                        float _3198 = dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197));
                        float _3201 = inversesqrt(_3198);
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3205 = dot(vec3(_745, _748, _751), vec3(_3202, _3203, _3204));
                        float _3210 = 1.0 - (_3198 * _3155.w);
                        float _4561 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                        float _3212 = sqrt(_3198) * _3174.w;
                        float _3215 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                        float _3216 = _3215 * _3215;
                        float _3219 = ((1.0 - _3216) * _3205) + _3216;
                        float _3222 = _3212 * _3212;
                        float _3226 = ((isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))) * _3211) / ((_3222 * 0.699999988079071044921875) + 1.0);
                        float _3230 = (-0.0) - _1858;
                        float _3231 = (-0.0) - _1859;
                        float _3232 = (-0.0) - _1860;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3246 = exp2(log2(1.0 / ((_3222 * 3.5) + 5.0)) * 0.25);
                        float _3247 = 1.0 - _805;
                        float _3254 = sqrt(1.0 - ((1.0 - (_3247 * _3247)) * (1.0 - (_3246 * _3246))));
                        float _3255 = _3254 * _3254;
                        float _3256 = _3255 * _3255;
                        float _3257 = _3237 + _3202;
                        float _3258 = _3238 + _3203;
                        float _3259 = _3239 + _3204;
                        float _3263 = inversesqrt(dot(vec3(_3257, _3258, _3259), vec3(_3257, _3258, _3259)));
                        float _3267 = dot(vec3(_745, _748, _751), vec3(_3237, _3238, _3239));
                        float _4577 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                        float _3271 = dot(vec3(_745, _748, _751), vec3(_3263 * _3257, _3263 * _3258, _3263 * _3259));
                        float _4588 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3274 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                        float _3278 = ((_3274 * _3274) * (_3256 + (-1.0))) + 1.0;
                        float _3279 = _3215 * _3255;
                        float _3280 = _3279 * _3279;
                        float _3283 = ((1.0 - _3280) * _3205) + _3280;
                        float _4599 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                        float _3285 = 1.0 - _3255;
                        float _3295 = (0.5 / (((_3284 * ((_3270 * _3285) + _3255)) + 9.9999999392252902907785028219223e-09) + (((_3284 * _3285) + _3255) * _3270))) * _3284;
                        float _4610 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3306 = (((_3256 * 3.1415927410125732421875) * (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) / ((_3278 * _3278) * ((_3222 * 2.1991131305694580078125) + 3.141590118408203125))) * _3211;
                        _3064 = (_3226 * _3174.x) + _3132;
                        _3065 = (_3226 * _3174.y) + _3133;
                        _3066 = (_3226 * _3174.z) + _3134;
                        _3061 = (_3306 * _3191.x) + _3129;
                        _3062 = (_3306 * _3191.y) + _3130;
                        _3063 = (_3306 * _3191.z) + _3131;
                        if (_3136 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3063;
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3066;
                            _3135 = _3136;
                        }
                    }
                    frontier_phi_66_pred = _3066;
                    frontier_phi_66_pred_1 = _3065;
                    frontier_phi_66_pred_2 = _3064;
                    frontier_phi_66_pred_3 = _3063;
                    frontier_phi_66_pred_4 = _3062;
                    frontier_phi_66_pred_5 = _3061;
                }
                _2871 = frontier_phi_66_pred;
                _2869 = frontier_phi_66_pred_1;
                _2867 = frontier_phi_66_pred_2;
                _2865 = frontier_phi_66_pred_3;
                _2863 = frontier_phi_66_pred_4;
                _2861 = frontier_phi_66_pred_5;
                uint _3012 = _3011 + 1u;
                if (_3012 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3005 = _2861;
                    _3006 = _2863;
                    _3007 = _2865;
                    _3008 = _2867;
                    _3009 = _2869;
                    _3010 = _2871;
                    _3011 = _3012;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
        }
        uvec4 _2874 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2875 = _2874.z;
        uint _2877 = (_2875 >> 8u) & 15u;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        if (((4294967295u << _2877) & _2780) == 0u)
        {
            _2973 = _2860;
            _2975 = _2862;
            _2977 = _2864;
            _2979 = _2866;
            _2981 = _2868;
            _2983 = _2870;
        }
        else
        {
            float _2998 = inversesqrt(dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860)));
            float _2999 = _2998 * _1858;
            float _3000 = _2998 * _1859;
            float _3001 = _2998 * _1860;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2877 < ((_2875 >> 12u) & 15u))
            {
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _3112 = _2860;
                float _3113 = _2862;
                float _3114 = _2864;
                float _3115 = _2866;
                float _3116 = _2868;
                float _3117 = _2870;
                uint _3118 = _2877;
                uint _3127;
                bool _3128;
                for (;;)
                {
                    _3127 = texelFetch(g_lightClassification, int((((_2774 << 5u) + (_2760 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                    _3128 = _3127 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3128)
                    {
                        frontier_phi_72_pred = _3117;
                        frontier_phi_72_pred_1 = _3116;
                        frontier_phi_72_pred_2 = _3115;
                        frontier_phi_72_pred_3 = _3114;
                        frontier_phi_72_pred_4 = _3113;
                        frontier_phi_72_pred_5 = _3112;
                    }
                    else
                    {
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3324 = _3112;
                        float _3325 = _3113;
                        float _3326 = _3114;
                        float _3327 = _3115;
                        float _3328 = _3116;
                        float _3329 = _3117;
                        uint _3330 = _3127;
                        uint _3331;
                        vec4 _3356;
                        float _3357;
                        vec4 _3372;
                        vec3 _3384;
                        vec4 _3399;
                        vec4 _3414;
                        float _3460;
                        bool _3461;
                        for (;;)
                        {
                            uint _3341 = ((_3118 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3330));
                            _3331 = (_3330 + 4294967295u) & _3330;
                            uint _3343 = _3341 * 40u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            _3357 = _3356.w;
                            uint _3359 = (_3341 * 40u) + 4u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3374 = (_3341 * 40u) + 8u;
                            _3384 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x));
                            uint _3386 = (_3341 * 40u) + 16u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3401 = (_3341 * 40u) + 20u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3416 = (_3341 * 40u) + 24u;
                            vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            uint _3435 = (_3341 * 40u) + 28u;
                            vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            _3460 = fma(_1860, _3448.z, fma(_1859, _3448.y, _3448.x * _1858)) + _3448.w;
                            _3461 = !((fma(_1860, _3429.z, fma(_1859, _3429.y, _3429.x * _1858)) + _3429.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3461)
                            {
                                float _3488 = _3356.x - _1858;
                                float _3489 = _3356.y - _1859;
                                float _3490 = _3356.z - _1860;
                                float _3491 = dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490));
                                float _3494 = inversesqrt(_3491);
                                float _3495 = _3494 * _3488;
                                float _3496 = _3494 * _3489;
                                float _3497 = _3494 * _3490;
                                float _3501 = 1.0 - (_3491 / (_3357 * _3357));
                                float _4621 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3506 = sqrt(_3491) * _3372.w;
                                float _3508 = 1.39999997615814208984375 / (_3506 + 1.39999997615814208984375);
                                float _3509 = _3508 * _3508;
                                float _3512 = ((1.0 - _3509) * dot(vec3(_3495, _3496, _3497), vec3(_745, _748, _751))) + _3509;
                                float _3515 = _3506 * _3506;
                                float _3519 = (fma(_1860, _3399.z, fma(_1859, _3399.y, _3399.x * _1858)) + _3399.w) / _3460;
                                float _3520 = (fma(_1860, _3414.z, fma(_1859, _3414.y, _3414.x * _1858)) + _3414.w) / _3460;
                                float _3524 = 1.0 - dot(vec2(_3519, _3520), vec2(_3519, _3520));
                                float _4637 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3526 = _3525 * (((isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0))) * _3502) / ((_3515 * 0.699999988079071044921875) + 1.0));
                                float _3538 = exp2(log2(1.0 / ((_3515 * 3.5) + 5.0)) * 0.25);
                                float _3539 = 1.0 - _805;
                                float _3546 = sqrt(1.0 - ((1.0 - (_3539 * _3539)) * (1.0 - (_3538 * _3538))));
                                float _3547 = _3546 * _3546;
                                float _3548 = _3547 * _3547;
                                float _3549 = _3495 - _2999;
                                float _3550 = _3496 - _3000;
                                float _3551 = _3497 - _3001;
                                float _3555 = inversesqrt(dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551)));
                                float _3559 = dot(vec3(_745, _748, _751), vec3((-0.0) - _2999, (-0.0) - _3000, (-0.0) - _3001));
                                float _4648 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3562 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                                float _3563 = dot(vec3(_745, _748, _751), vec3(_3555 * _3549, _3555 * _3550, _3555 * _3551));
                                float _4659 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3566 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                                float _3570 = ((_3566 * _3566) * (_3548 + (-1.0))) + 1.0;
                                float _3571 = _3508 * _3547;
                                float _3572 = _3571 * _3571;
                                float _3578 = ((1.0 - _3572) * dot(vec3(_745, _748, _751), vec3(_3495, _3496, _3497))) + _3572;
                                float _4670 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3579 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                                float _3580 = 1.0 - _3547;
                                float _3590 = (0.5 / (((_3579 * ((_3562 * _3580) + _3547)) + 9.9999999392252902907785028219223e-09) + (((_3579 * _3580) + _3547) * _3562))) * _3579;
                                float _4681 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3600 = (_3525 * _3502) * (((_3548 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3570 * _3570) * ((_3515 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3526 * _3372.y;
                                frontier_phi_78_pred_1 = _3526 * _3372.x;
                                frontier_phi_78_pred_2 = _3600 * _3384.z;
                                frontier_phi_78_pred_3 = _3600 * _3384.y;
                                frontier_phi_78_pred_4 = _3600 * _3384.x;
                                frontier_phi_78_pred_5 = _3526 * _3372.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3608 = frontier_phi_78_pred;
                            _3607 = frontier_phi_78_pred_1;
                            _3606 = frontier_phi_78_pred_2;
                            _3605 = frontier_phi_78_pred_3;
                            _3604 = frontier_phi_78_pred_4;
                            _3609 = frontier_phi_78_pred_5;
                            _3314 = _3607 + _3327;
                            _3315 = _3608 + _3328;
                            _3316 = _3609 + _3329;
                            _3311 = _3604 + _3324;
                            _3312 = _3605 + _3325;
                            _3313 = _3606 + _3326;
                            if (_3331 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3331;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3316;
                        frontier_phi_72_pred_1 = _3315;
                        frontier_phi_72_pred_2 = _3314;
                        frontier_phi_72_pred_3 = _3313;
                        frontier_phi_72_pred_4 = _3312;
                        frontier_phi_72_pred_5 = _3311;
                    }
                    _2984 = frontier_phi_72_pred;
                    _2982 = frontier_phi_72_pred_1;
                    _2980 = frontier_phi_72_pred_2;
                    _2978 = frontier_phi_72_pred_3;
                    _2976 = frontier_phi_72_pred_4;
                    _2974 = frontier_phi_72_pred_5;
                    uint _3119 = _3118 + 1u;
                    if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3112 = _2974;
                        _3113 = _2976;
                        _3114 = _2978;
                        _3115 = _2980;
                        _3116 = _2982;
                        _3117 = _2984;
                        _3118 = _3119;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2984;
                frontier_phi_60_61_ladder_1 = _2982;
                frontier_phi_60_61_ladder_2 = _2978;
                frontier_phi_60_61_ladder_3 = _2976;
                frontier_phi_60_61_ladder_4 = _2974;
                frontier_phi_60_61_ladder_5 = _2980;
            }
            else
            {
                frontier_phi_60_61_ladder = _2870;
                frontier_phi_60_61_ladder_1 = _2868;
                frontier_phi_60_61_ladder_2 = _2864;
                frontier_phi_60_61_ladder_3 = _2862;
                frontier_phi_60_61_ladder_4 = _2860;
                frontier_phi_60_61_ladder_5 = _2866;
            }
            _2973 = frontier_phi_60_61_ladder_4;
            _2975 = frontier_phi_60_61_ladder_3;
            _2977 = frontier_phi_60_61_ladder_2;
            _2979 = frontier_phi_60_61_ladder_5;
            _2981 = frontier_phi_60_61_ladder_1;
            _2983 = frontier_phi_60_61_ladder;
        }
        float _2988 = isnan(1.0) ? _789 : (isnan(_789) ? 1.0 : min(_789, 1.0));
        _2793 = (_2988 * _2979) + _2324;
        _2795 = (_2988 * _2981) + _2326;
        _2797 = (_2988 * _2983) + _2328;
        _2799 = ((_2973 * 0.039999999105930328369140625) * _2988) + _2647;
        _2801 = ((_2975 * 0.039999999105930328369140625) * _2988) + _2649;
        _2803 = ((_2977 * 0.039999999105930328369140625) * _2988) + _2651;
    }
    else
    {
        _2793 = _2324;
        _2795 = _2326;
        _2797 = _2328;
        _2799 = _2647;
        _2801 = _2649;
        _2803 = _2651;
    }
    float _4697 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4708 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4719 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    uint _2823 = _240 + 6u;
    float _2831 = _726 / cbSceneParam._m0[86u].x;
    float _2832 = _727 / cbSceneParam._m0[86u].y;
    vec4 _2846 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2831, _2832, (log2((isnan(cbSceneParam._m0[77u].w) ? _659 : (isnan(_659) ? cbSceneParam._m0[77u].w : min(_659, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2848 = _2846.x;
    float _2849 = _2846.y;
    float _2850 = _2846.z;
    float _2851 = _2846.w;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    if (_659 > cbSceneParam._m0[78u].w)
    {
        float _2885 = isnan(_659) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _659 : min(cbSceneParam._m0[80u].w, _659));
        float _2886 = _2885 / _659;
        float _2897 = _2886 * _711;
        float _2898 = _712 * _2886;
        float _2899 = (-0.0) - _2898;
        float _2901 = _2886 * _713;
        float _2903 = (cbSceneParam._m0[77u].w * _2899) / _2885;
        float _2904 = _2903 + cbSceneParam._m0[79u].w;
        float _2905 = cbSceneParam._m0[79u].w - _2898;
        float _2911 = sqrt(((_2897 * _2897) + (_2898 * _2898)) + (_2901 * _2901));
        float _2914 = (1.0 - (cbSceneParam._m0[77u].w / _2885)) * _2911;
        float _2919 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2921 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3074;
        if (abs((_2899 - _2903) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3074 = ((((_2904 > 0.0) ? exp2(_2919 * _2904) : (2.0 - exp2(_2921 * _2904))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2914;
        }
        else
        {
            float _3034 = 1.0 / cbSceneParam._m0[80u].x;
            float _3035 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : max(_2904, _2905));
            float _3036 = isnan(_2905) ? _2904 : (isnan(_2904) ? _2905 : min(_2904, _2905));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            float _3046 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : min(_3036, 0.0));
            _3074 = ((abs(_2911 / _2899) * cbSceneParam._m0[80u].y) * ((((_3045 - _3046) * 2.0) - ((exp2(_2919 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0)))) - exp2(_2919 * (isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))))) * _3034)) - ((exp2(_2921 * _3045) - exp2(_2921 * _3046)) * _3034))) + (_2914 * cbSceneParam._m0[80u].z);
        }
        vec4 _3076 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2831, _2832, 1.0), 0.0);
        float _3085 = exp2((_3074 * (-1.44269502162933349609375)) * (1.0 - _3076.w));
        float _3086 = log2(_3085);
        float _3102 = log2(_2851);
        _2923 = (exp2(_3102 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3086 * cbSceneParam._m0[78u].x)) * _3076.x) / cbSceneParam._m0[78u].x)) + _2848;
        _2925 = (exp2(_3102 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3086 * cbSceneParam._m0[78u].y)) * _3076.y) / cbSceneParam._m0[78u].y)) + _2849;
        _2927 = (exp2(_3102 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3086 * cbSceneParam._m0[78u].z)) * _3076.z) / cbSceneParam._m0[78u].z)) + _2850;
        _2929 = _3085 * _2851;
    }
    else
    {
        _2923 = _2848;
        _2925 = _2849;
        _2927 = _2850;
        _2929 = _2851;
    }
    float _2941 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2942 = _2941 == 3.0;
    float _2943 = log2(_2929);
    float _2950 = exp2(_2943 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2793 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _789))) + ((_2799 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1594)) * cbPerFrame._m0[3u].x));
    float _2951 = exp2(_2943 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2795 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _789))) + ((_2801 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1594)) * cbPerFrame._m0[3u].x));
    float _2952 = exp2(_2943 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2797 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _789))) + ((_2803 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1594)) * cbPerFrame._m0[3u].x));
    float _2961 = (_2941 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2961 * (_2942 ? _2950 : (_2950 + (cbSceneParam._m0[72u].w * _2923)));
    SV_Target.y = _2961 * (_2942 ? _2951 : (_2951 + (cbSceneParam._m0[72u].w * _2925)));
    SV_Target.z = _2961 * (_2942 ? _2952 : (_2952 + (cbSceneParam._m0[72u].w * _2927)));
    SV_Target.w = cbInstanceData._m0[_2823].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2823].w;
}


