#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1147;
float _3793;
float _3794;
float _3795;
float _3796;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _286.x * cbMtdParam._m0[9u].x;
    float _293 = _286.y * cbMtdParam._m0[9u].y;
    float _294 = _286.z * cbMtdParam._m0[9u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _266) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _267) + cbTextureTilingScale._m0[20u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _342 = _338.z;
    float _346 = (_338.x * 2.0) + (-1.0);
    float _347 = (_338.y * 2.0) + (-1.0);
    float _348 = dot(vec2(_346, _347), vec2(_346, _347));
    float _3805 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _354 = sqrt(1.0 - (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))));
    float _359 = _346 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_312.x * 2.0) + (-1.0)));
    float _360 = _347 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_312.y * 2.0) + (-1.0)));
    vec4 _377 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _379 = _377.x;
    float _380 = 1.0 - _379;
    float _389 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _392 = ((isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : min(_389, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _401 = (_392 - ((((((_379 - _380) * cbMtdParam._m0[24u].z) + _380) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _392))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3826 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _409 = (_402 * (cbMtdParam._m0[17u].x - _292)) + _292;
    float _410 = (_402 * (cbMtdParam._m0[17u].y - _293)) + _293;
    float _411 = (_402 * (cbMtdParam._m0[17u].z - _294)) + _294;
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _426 = _424.x;
    float _427 = 1.0 - _426;
    float _456 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_426 - _427) * cbMtdParam._m0[24u].w) + _427) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3837 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _465 = ((((cbMtdParam._m0[10u].x - _409) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _457) + _409;
    float _466 = ((((cbMtdParam._m0[10u].y - _410) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _457) + _410;
    float _467 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _411)) * _457) + _411;
    float _472 = (((_312.z - _342) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _342;
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _493 = (_486.x * 2.0) + (-1.0);
    float _494 = (_486.y * 2.0) + (-1.0);
    float _495 = dot(vec2(_493, _494), vec2(_493, _494));
    float _3848 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _503 = (_402 * (_486.z - _472)) + _472;
    float _506 = ((cbMtdParam._m0[23u].y - _503) * _457) + _503;
    vec4 _528 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _534 = (_528.x * 2.0) + (-1.0);
    float _535 = (_528.y * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _3859 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _553 = (((_493 - _359) + (cbMtdParam._m0[21u].x * _359)) * _402) + _359;
    float _554 = (((_494 - _360) + (cbMtdParam._m0[21u].x * _360)) * _402) + _360;
    float _555 = (_402 * (sqrt(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) - _354)) + _354;
    float _566 = (((_534 - _553) + (_553 * cbMtdParam._m0[22u].z)) * _457) + _553;
    float _567 = (((_535 - _554) + (_554 * cbMtdParam._m0[22u].z)) * _457) + _554;
    float _568 = ((sqrt(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) - _555) * _457) + _555;
    float _570 = cbMtdParam._m0[22u].x + _338.w;
    float _573 = fma(_568, _234 * NORMAL.x, fma(_567, _241 * TANGENT.x, (_227 * _219) * _566));
    float _576 = fma(_568, _234 * NORMAL.y, fma(_567, _241 * TANGENT.y, (_227 * _220) * _566));
    float _579 = fma(_568, _234 * NORMAL.z, fma(_567, _241 * TANGENT.z, (_227 * _221) * _566));
    float _583 = inversesqrt(dot(vec3(_573, _576, _579), vec3(_573, _576, _579)));
    float _584 = _583 * _573;
    float _585 = _583 * _576;
    float _586 = _583 * _579;
    float _3870 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _587 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _3881 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _3892 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3903 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3914 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _605 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _655 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _645);
    float _656 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _645);
    float _657 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _645);
    float _661 = inversesqrt(dot(vec3(_655, _656, _657), vec3(_655, _656, _657)));
    float _662 = _655 * _661;
    float _663 = _656 * _661;
    float _664 = _657 * _661;
    vec4 _669 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _671 = _669.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _828 = sqrt(((_655 * _655) + (_656 * _656)) + (_657 * _657));
        float _834 = (cbMatDynParam._m0[5u].x * _828) + cbMatDynParam._m0[5u].y;
        float _3925 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _839 = (cbMatDynParam._m0[5u].z * _828) + cbMatDynParam._m0[5u].w;
        float _3936 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) - _835)) + _835) < ((_671 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _683 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _684 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _704 = fma(_586, cbSceneParam._m0[5u].z, fma(_585, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _584));
    float _707 = fma(_586, cbSceneParam._m0[6u].z, fma(_585, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _584));
    float _710 = fma(_586, cbSceneParam._m0[7u].z, fma(_585, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _584));
    uint _723 = _247 + 9u;
    uint _724 = _723 + uint(cbMatDynParam._m0[0u].w);
    float _730 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_724].x;
    float _731 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * cbInstanceData._m0[_724].y;
    float _732 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * cbInstanceData._m0[_724].z;
    float _3947 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _3958 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _3969 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    vec4 _744 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _683, cbSceneParam._m0[86u].y * _684));
    float _748 = ((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * TEXCOORD_5.w) * _744.x;
    float _749 = dot(vec3(_584, _585, _586), vec3(_662, _663, _664));
    float _752 = _749 * 2.0;
    float _756 = (_752 * _584) - _662;
    float _757 = (_752 * _585) - _663;
    float _758 = (_752 * _586) - _664;
    float _762 = abs(dot(vec3(_662, _663, _664), vec3(_584, _585, _586)));
    float _3980 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _764 = sqrt(_587);
    float _777 = exp2((_764 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_764 * 3.0));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1146;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _871 = fma(_817, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809));
        float _875 = fma(_817, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809));
        float _879 = fma(_817, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809));
        float _904 = _809 + _584;
        float _905 = _813 + _585;
        float _906 = _817 + _586;
        float _916 = fma(_906, cbModelParam._m0[26u].z, fma(_905, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _904)) - _871;
        float _917 = fma(_906, cbModelParam._m0[27u].z, fma(_905, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _904)) - _875;
        float _918 = fma(_906, cbModelParam._m0[28u].z, fma(_905, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _904)) - _879;
        float _922 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
        float _935 = ((_922 * _916) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_871 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_922 * _917) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_875 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _937 = ((_922 * _918) / cbModelParam._m0[34u].z) + ((((((_879 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_935, _936, _937), 0.0);
        float _974 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_940.x + (-0.5));
        float _976 = _974 * (_940.y + (-0.5));
        float _977 = _974 * (_940.z + (-0.5));
        float _984 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_947.x + (-0.5));
        float _986 = _984 * (_947.y + (-0.5));
        float _987 = _984 * (_947.z + (-0.5));
        float _994 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_954.x + (-0.5));
        float _996 = _994 * (_954.y + (-0.5));
        float _997 = _994 * (_954.z + (-0.5));
        float _1004 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_961.x + (-0.5));
        float _1006 = _1004 * (_961.y + (-0.5));
        float _1007 = _1004 * (_961.z + (-0.5));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1011 = _975 * 0.5;
        float _1012 = _985 * 0.5;
        float _1013 = _995 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1028 = (dot(vec3(_584, _585, _586), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1038 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _4028 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1040 + 1.0))) + _1045) * _1008;
        float _1055 = _976 * 0.5;
        float _1056 = _986 * 0.5;
        float _1057 = _996 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_584, _585, _586), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _4061 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1082 + 1.0))) + _1087) * _1009;
        float _1097 = _977 * 0.5;
        float _1098 = _987 * 0.5;
        float _1099 = _997 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_584, _585, _586), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1010 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _4094 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1124 + 1.0))) + _1129) * _1010;
        _1146 = _977;
        _1148 = _976;
        _1149 = _975;
        _1150 = _987;
        _1151 = _986;
        _1152 = _985;
        _1153 = _997;
        _1154 = _996;
        _1155 = _995;
        _1156 = _1010;
        _1157 = _1009;
        _1158 = _1008;
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
        _1160 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1161 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
    }
    else
    {
        _1146 = _1147;
        _1148 = _1147;
        _1149 = _1147;
        _1150 = _1147;
        _1151 = _1147;
        _1152 = _1147;
        _1153 = _1147;
        _1154 = _1147;
        _1155 = _1147;
        _1156 = _1147;
        _1157 = _1147;
        _1158 = _1147;
        _1159 = 0.0;
        _1160 = 0.0;
        _1161 = 0.0;
    }
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1189 = fma(_817, cbModelParam._m0[30u].z, fma(_813, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _809));
        float _1193 = fma(_817, cbModelParam._m0[31u].z, fma(_813, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _809));
        float _1197 = fma(_817, cbModelParam._m0[32u].z, fma(_813, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _809));
        float _1220 = _809 + _584;
        float _1221 = _813 + _585;
        float _1222 = _817 + _586;
        float _1232 = fma(_1222, cbModelParam._m0[30u].z, fma(_1221, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1220)) - _1189;
        float _1233 = fma(_1222, cbModelParam._m0[31u].z, fma(_1221, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1220)) - _1193;
        float _1234 = fma(_1222, cbModelParam._m0[32u].z, fma(_1221, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1220)) - _1197;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1189 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1193 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[35u].z) + ((((((_1197 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1288 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1255.x + (-0.5));
        float _1290 = _1288 * (_1255.y + (-0.5));
        float _1291 = _1288 * (_1255.z + (-0.5));
        float _1298 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1262.x + (-0.5));
        float _1300 = _1298 * (_1262.y + (-0.5));
        float _1301 = _1298 * (_1262.z + (-0.5));
        float _1308 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1269.x + (-0.5));
        float _1310 = _1308 * (_1269.y + (-0.5));
        float _1311 = _1308 * (_1269.z + (-0.5));
        float _1318 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1276.x + (-0.5));
        float _1320 = _1318 * (_1276.y + (-0.5));
        float _1321 = _1318 * (_1276.z + (-0.5));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = _1289 * 0.5;
        float _1326 = _1299 * 0.5;
        float _1327 = _1309 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_584, _585, _586), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4135 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4146 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4157 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_1352 + 1.0))) + _1357) * _1322;
        float _1367 = _1290 * 0.5;
        float _1368 = _1300 * 0.5;
        float _1369 = _1310 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_584, _585, _586), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4190 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1394 + 1.0))) + _1399) * _1323;
        float _1409 = _1291 * 0.5;
        float _1410 = _1301 * 0.5;
        float _1411 = _1311 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_584, _585, _586), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4223 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1436 + 1.0))) + _1441) * _1324;
        _1458 = _1291;
        _1459 = _1290;
        _1460 = _1289;
        _1461 = _1301;
        _1462 = _1300;
        _1463 = _1299;
        _1464 = _1311;
        _1465 = _1310;
        _1466 = _1309;
        _1467 = _1324;
        _1468 = _1323;
        _1469 = _1322;
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
    }
    else
    {
        _1458 = _1147;
        _1459 = _1147;
        _1460 = _1147;
        _1461 = _1147;
        _1462 = _1147;
        _1463 = _1147;
        _1464 = _1147;
        _1465 = _1147;
        _1466 = _1147;
        _1467 = _1147;
        _1468 = _1147;
        _1469 = _1147;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1159)) + _1159;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1160)) + _1160;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1161)) + _1161;
    float _1505 = fma(_1484, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1482 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1484, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1482 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1484, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1482));
    float _1526 = _756 * 0.5;
    float _1527 = _757 * 0.5;
    float _1528 = _758 * 0.5;
    float _1529 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1532 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1535 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1569;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1542 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1146, _1150, _1153, _1156));
        float _1546 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1148, _1151, _1154, _1157));
        float _1550 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1149, _1152, _1155, _1158));
        float _1557 = dot(vec4(cbModelParam._m0[39u]), vec4(_1526, _1527, _1528, 1.0));
        _1569 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1569 = 1.0;
    }
    float _1580;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1571 = dot(vec4(cbModelParam._m0[40u]), vec4(_1526, _1527, _1528, 1.0));
        _1580 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1580 = 1.0;
    }
    float _1584 = (_1580 * cbModelParam._m0[1u].x) + (_1569 * (1.0 - cbModelParam._m0[1u].x));
    float _1594 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _587);
    float _1595 = isnan(_1594) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1594 : min(cbModelParam._m0[25u].z, _1594));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1643 = fma(_817, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809)) + cbModelParam._m0[13u].w;
        float _1647 = fma(_817, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809)) + cbModelParam._m0[14u].w;
        float _1651 = fma(_817, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809)) + cbModelParam._m0[15u].w;
        float _1654 = fma(_758, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756));
        float _1657 = fma(_758, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756));
        float _1660 = fma(_758, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756));
        float _1688;
        if (_1654 > 0.0)
        {
            _1688 = abs((1.0 - _1643) / _1654);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1643 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1688 = frontier_phi_17_15_ladder;
        }
        float _1859;
        if (_1657 > 0.0)
        {
            _1859 = abs((1.0 - _1647) / _1657);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1647 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1859 = frontier_phi_26_22_ladder;
        }
        float _2155;
        if (_1660 > 0.0)
        {
            _2155 = abs((1.0 - _1651) / _1660);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1651 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2155 = frontier_phi_38_33_ladder;
        }
        float _2157 = isnan(_1859) ? _1688 : (isnan(_1688) ? _1859 : min(_1688, _1859));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1654) + _1643;
        float _2163 = (_2158 * _1657) + _1647;
        float _2164 = (_2158 * _1660) + _1651;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2167 = (-1.0) - _2165;
        float _2169 = _2165 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2164 > _2169) || ((_2164 < _2167) || ((_2163 > _2169) || ((_2163 < _2167) || ((_2162 < _2167) || (_2162 > _2169))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2309 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2164, cbModelParam._m0[9u].z, fma(_2163, cbModelParam._m0[9u].y, _2162 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2164, cbModelParam._m0[10u].z, fma(_2163, cbModelParam._m0[10u].y, _2162 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2164, cbModelParam._m0[11u].z, fma(_2163, cbModelParam._m0[11u].y, _2162 * cbModelParam._m0[11u].x))), _1595);
            frontier_phi_16_38_ladder = _2309.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2309.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2309.x * cbModelParam._m0[1u].y;
        }
        _1676 = frontier_phi_16_38_ladder_2;
        _1678 = frontier_phi_16_38_ladder_1;
        _1680 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_756, _757, _758), _1595);
        _1676 = _1664.x * cbModelParam._m0[1u].y;
        _1678 = _1664.y * cbModelParam._m0[1u].y;
        _1680 = _1664.z * cbModelParam._m0[1u].y;
    }
    float _1684 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _587);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1684 : min(cbModelParam._m0[25u].w, _1684));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1739 = fma(_817, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809)) + cbModelParam._m0[21u].w;
        float _1743 = fma(_817, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809)) + cbModelParam._m0[22u].w;
        float _1747 = fma(_817, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809)) + cbModelParam._m0[23u].w;
        float _1750 = fma(_758, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756));
        float _1753 = fma(_758, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756));
        float _1756 = fma(_758, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756));
        float _1864;
        if (_1750 > 0.0)
        {
            _1864 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1864 = frontier_phi_28_24_ladder;
        }
        float _2182;
        if (_1753 > 0.0)
        {
            _2182 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2182 = frontier_phi_40_35_ladder;
        }
        float _2509;
        if (_1756 > 0.0)
        {
            _2509 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2509 = frontier_phi_50_47_ladder;
        }
        float _2511 = isnan(_2182) ? _1864 : (isnan(_1864) ? _2182 : min(_1864, _2182));
        float _2512 = isnan(_2509) ? _2511 : (isnan(_2511) ? _2509 : min(_2511, _2509));
        float _2516 = (_2512 * _1750) + _1739;
        float _2517 = (_2512 * _1753) + _1743;
        float _2518 = (_2512 * _1756) + _1747;
        float _2519 = _2512 * 9.9999997473787516355514526367188e-05;
        float _2520 = (-1.0) - _2519;
        float _2522 = _2519 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2518 > _2522) || ((_2518 < _2520) || ((_2517 > _2522) || ((_2517 < _2520) || ((_2516 < _2520) || (_2516 > _2522))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2518, cbModelParam._m0[17u].z, fma(_2517, cbModelParam._m0[17u].y, _2516 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2518, cbModelParam._m0[18u].z, fma(_2517, cbModelParam._m0[18u].y, _2516 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2518, cbModelParam._m0[19u].z, fma(_2517, cbModelParam._m0[19u].y, _2516 * cbModelParam._m0[19u].x))), _1685);
            frontier_phi_25_50_ladder = _2636.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2636.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2636.x * cbModelParam._m0[1u].z;
        }
        _1775 = frontier_phi_25_50_ladder_2;
        _1777 = frontier_phi_25_50_ladder_1;
        _1779 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_756, _757, _758), _1685);
        _1775 = _1759.x * cbModelParam._m0[1u].z;
        _1777 = _1759.y * cbModelParam._m0[1u].z;
        _1779 = _1759.z * cbModelParam._m0[1u].z;
    }
    float _1791 = ((((1.0 - _777) * ((_764 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_777 * _764)) * _748;
    float _1792 = _1791 * ((cbModelParam._m0[1u].w * (_1775 - _1676)) + _1676);
    float _1793 = _1791 * ((cbModelParam._m0[1u].w * (_1777 - _1678)) + _1678);
    float _1794 = _1791 * ((cbModelParam._m0[1u].w * (_1779 - _1680)) + _1680);
    float _1797 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1793, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1793, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1793, cbSceneParam._m0[91u].y, _1792 * cbSceneParam._m0[91u].x));
    float _1838 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1842 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1846 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1850 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1851 = _1838 / _1850;
    float _1852 = _1842 / _1850;
    float _1853 = _1846 / _1850;
    float _2000;
    float _2001;
    float _2002;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1880 = ((uint(_1853 > cbSceneParam._m0[59u].y) + uint(_1853 > cbSceneParam._m0[59u].x)) + uint(_1853 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1881 = _1880 + 43u;
        uint _1889 = _1880 + 44u;
        uint _1897 = _1880 + 45u;
        uint _1905 = _1880 + 46u;
        float _1916 = fma(_1850, cbSceneParam._m0[_1881].w, fma(_1846, cbSceneParam._m0[_1881].z, fma(_1842, cbSceneParam._m0[_1881].y, _1838 * cbSceneParam._m0[_1881].x)));
        float _1920 = fma(_1850, cbSceneParam._m0[_1889].w, fma(_1846, cbSceneParam._m0[_1889].z, fma(_1842, cbSceneParam._m0[_1889].y, _1838 * cbSceneParam._m0[_1889].x)));
        float _1928 = fma(_1850, cbSceneParam._m0[_1905].w, fma(_1846, cbSceneParam._m0[_1905].z, fma(_1842, cbSceneParam._m0[_1905].y, _1838 * cbSceneParam._m0[_1905].x)));
        float _1933 = cbSceneParam._m0[33u].z * _1928;
        float _1935 = cbSceneParam._m0[33u].w * _1928;
        float _1938 = fma(_1850, cbSceneParam._m0[_1897].w, fma(_1846, cbSceneParam._m0[_1897].z, fma(_1842, cbSceneParam._m0[_1897].y, _1838 * cbSceneParam._m0[_1897].x))) / _1928;
        float _1986 = (cbSceneParam._m0[33u].x - sqrt(((_1852 * _1852) + (_1851 * _1851)) + (_1853 * _1853))) * cbSceneParam._m0[33u].y;
        float _4349 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1993 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1933 + _1916) / _1928, (_1935 + _1920) / _1928), _1938), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1935 + _1916) / _1928, (_1920 - _1933) / _1928), _1938), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1916 - _1933) / _1928, (_1920 - _1935) / _1928), _1938), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1916 - _1935) / _1928, (_1933 + _1920) / _1928), _1938), 0.0)).x), vec4(0.25)));
        _2000 = 1.0 - (_1993 * cbSceneParam._m0[34u].x);
        _2001 = 1.0 - (_1993 * cbSceneParam._m0[34u].y);
        _2002 = 1.0 - (_1993 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2000 = 1.0;
        _2001 = 1.0;
        _2002 = 1.0;
    }
    float _2066;
    float _2068;
    float _2070;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2054 = fma(_1850, cbSceneParam._m0[63u].w, fma(_1846, cbSceneParam._m0[63u].z, fma(_1842, cbSceneParam._m0[63u].y, _1838 * cbSceneParam._m0[63u].x)));
        float _2055 = fma(_1850, cbSceneParam._m0[60u].w, fma(_1846, cbSceneParam._m0[60u].z, fma(_1842, cbSceneParam._m0[60u].y, _1838 * cbSceneParam._m0[60u].x))) / _2054;
        float _2056 = fma(_1850, cbSceneParam._m0[61u].w, fma(_1846, cbSceneParam._m0[61u].z, fma(_1842, cbSceneParam._m0[61u].y, _1838 * cbSceneParam._m0[61u].x))) / _2054;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2055 >= cbSceneParam._m0[64u].x) && (_2056 >= cbSceneParam._m0[64u].y)) && (_2055 <= cbSceneParam._m0[64u].z)) && (_2056 <= cbSceneParam._m0[64u].w))
        {
            float _2195 = fma(_1850, cbSceneParam._m0[62u].w, fma(_1846, cbSceneParam._m0[62u].z, fma(_1842, cbSceneParam._m0[62u].y, _1838 * cbSceneParam._m0[62u].x))) / _2054;
            float _2199 = isnan(cbSceneParam._m0[41u].w) ? _2195 : (isnan(_2195) ? cbSceneParam._m0[41u].w : max(_2195, cbSceneParam._m0[41u].w));
            float _2242 = (cbSceneParam._m0[33u].x - sqrt(((_1852 * _1852) + (_1851 * _1851)) + (_1853 * _1853))) * cbSceneParam._m0[33u].y;
            float _4365 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
            float _2249 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2055, cbSceneParam._m0[33u].w + _2056), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2055, _2056 - cbSceneParam._m0[33u].z), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2055 - cbSceneParam._m0[33u].z, _2056 - cbSceneParam._m0[33u].w), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2055 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2056), _2199), 0.0)).x), vec4(0.25)));
            float _2253 = 1.0 - (_2249 * cbSceneParam._m0[34u].x);
            float _2254 = 1.0 - (_2249 * cbSceneParam._m0[34u].y);
            float _2255 = 1.0 - (_2249 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2255) ? _2002 : (isnan(_2002) ? _2255 : min(_2002, _2255));
            frontier_phi_37_36_ladder_1 = isnan(_2254) ? _2001 : (isnan(_2001) ? _2254 : min(_2001, _2254));
            frontier_phi_37_36_ladder_2 = isnan(_2253) ? _2000 : (isnan(_2000) ? _2253 : min(_2000, _2253));
        }
        else
        {
            frontier_phi_37_36_ladder = _2002;
            frontier_phi_37_36_ladder_1 = _2001;
            frontier_phi_37_36_ladder_2 = _2000;
        }
        _2066 = frontier_phi_37_36_ladder_2;
        _2068 = frontier_phi_37_36_ladder_1;
        _2070 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2066 = _2000;
        _2068 = _2001;
        _2070 = _2002;
    }
    uvec4 _2075 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _2077 = _2075.x * 14u;
    uint _2078 = _2077 + 13u;
    float _2085 = _748 + (-1.0);
    float _2090 = (cbLight._m0[_2078].x * _2085) + 1.0;
    float _2091 = (cbLight._m0[_2078].y * _2085) + 1.0;
    float _2092 = (cbLight._m0[_2078].z * _2085) + 1.0;
    float _2093 = (cbLight._m0[_2078].w * _2085) + 1.0;
    uint _2094 = _2077 + 5u;
    float _2100 = isnan(1.0) ? _2091 : (isnan(_2091) ? 1.0 : min(_2091, 1.0));
    uint _2104 = _2077 + 4u;
    float _2114 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
    uint _2118 = _2077 | 1u;
    float _2129 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_584, _585, _586));
    float _2132 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_584, _585, _586));
    float _4401 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _4412 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2137 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * 0.3183098733425140380859375;
    float _2139 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * 0.3183098733425140380859375;
    float _2146 = ((cbLight._m0[_2094].x * _2100) * _2139) + (((cbLight._m0[_2104].x * _2066) * _2114) * _2137);
    float _2147 = ((_2100 * cbLight._m0[_2094].y) * _2139) + (((cbLight._m0[_2104].y * _2068) * _2114) * _2137);
    float _2148 = ((_2100 * cbLight._m0[_2094].z) * _2139) + (((cbLight._m0[_2104].z * _2070) * _2114) * _2137);
    uvec4 _2152 = floatBitsToUint(cbLight._m0[_2077 + 12u]);
    bool _2154 = _2152.x == 0u;
    float _2256;
    float _2258;
    float _2260;
    if (_2154)
    {
        _2256 = _2146;
        _2258 = _2147;
        _2260 = _2148;
    }
    else
    {
        uint _2264 = _2077 + 6u;
        float _2280 = (dot(vec3(cbLight._m0[_2077 + 2u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2281 = _2280 * _2280;
        float _4423 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2282 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2283 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2256 = (((cbLight._m0[_2264].x * 0.3183098733425140380859375) * _2282) * _2283) + _2146;
        _2258 = (((cbLight._m0[_2264].y * 0.3183098733425140380859375) * _2282) * _2283) + _2147;
        _2260 = (((cbLight._m0[_2264].z * 0.3183098733425140380859375) * _2282) * _2283) + _2148;
    }
    bool _2263 = _2152.y == 0u;
    float _2318;
    float _2320;
    float _2322;
    if (_2263)
    {
        _2318 = _2256;
        _2320 = _2258;
        _2322 = _2260;
    }
    else
    {
        uint _2480 = _2077 + 7u;
        float _2496 = (dot(vec3(cbLight._m0[_2077 + 3u].xyz), vec3(_584, _585, _586)) * 0.5) + 0.5;
        float _2497 = _2496 * _2496;
        float _4439 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2498 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2499 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2318 = (((cbLight._m0[_2480].x * 0.3183098733425140380859375) * _2498) * _2499) + _2256;
        _2320 = (((cbLight._m0[_2480].y * 0.3183098733425140380859375) * _2498) * _2499) + _2258;
        _2322 = (((cbLight._m0[_2480].z * 0.3183098733425140380859375) * _2498) * _2499) + _2260;
    }
    uint _2325 = _2077 + 8u;
    float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2077].w)) * _587) * 0.949999988079071044921875);
    float _2339 = _2338 * _2338;
    float _2340 = cbLight._m0[_2077].x + _662;
    float _2341 = cbLight._m0[_2077].y + _663;
    float _2342 = cbLight._m0[_2077].z + _664;
    float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
    float _2347 = _2346 * _2340;
    float _2348 = _2346 * _2341;
    float _2349 = _2346 * _2342;
    float _2350 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2077].xyz));
    float _4455 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2353 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _4466 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _2354 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2355 = dot(vec3(_584, _585, _586), vec3(_2347, _2348, _2349));
    float _4477 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2359 = dot(vec3(cbLight._m0[_2077].xyz), vec3(_2347, _2348, _2349));
    float _4488 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2363 = _2339 * _2339;
    float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
    float _2378 = (exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2379 = 1.0 - _2339;
    float _2390 = (0.5 / (((_2354 * ((_2353 * _2379) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2379) + _2339) * _2353))) * _2353;
    float _4499 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2392 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
    uint _2406 = _2077 + 9u;
    float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _587) * 0.949999988079071044921875);
    float _2418 = _2417 * _2417;
    float _2419 = cbLight._m0[_2118].x + _662;
    float _2420 = cbLight._m0[_2118].y + _663;
    float _2421 = cbLight._m0[_2118].z + _664;
    float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
    float _2426 = _2425 * _2419;
    float _2427 = _2425 * _2420;
    float _2428 = _2425 * _2421;
    float _2429 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2118].xyz));
    float _4510 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
    float _2433 = dot(vec3(_584, _585, _586), vec3(_2426, _2427, _2428));
    float _4521 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2436 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _2437 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2426, _2427, _2428));
    float _4532 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2441 = _2418 * _2418;
    float _2445 = ((_2436 * _2436) * (_2441 + (-1.0))) + 1.0;
    float _2454 = (exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2455 = 1.0 - _2418;
    float _2465 = (0.5 / (((_2354 * ((_2432 * _2455) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2455) + _2418) * _2432))) * _2432;
    float _4543 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2467 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2441 / ((_2445 * _2445) * 3.141590118408203125));
    float _2477 = (((_2454 * cbLight._m0[_2406].x) * _2467) * _2100) + ((((cbLight._m0[_2325].x * _2066) * _2378) * _2392) * _2114);
    float _2478 = (((_2454 * cbLight._m0[_2406].y) * _2467) * _2100) + ((((cbLight._m0[_2325].y * _2068) * _2378) * _2392) * _2114);
    float _2479 = (((_2454 * cbLight._m0[_2406].z) * _2467) * _2100) + ((((cbLight._m0[_2325].z * _2070) * _2378) * _2392) * _2114);
    float _2535;
    float _2537;
    float _2539;
    if (_2154)
    {
        _2535 = _2477;
        _2537 = _2478;
        _2539 = _2479;
    }
    else
    {
        uint _2541 = _2077 + 2u;
        uint _2545 = _2077 + 10u;
        float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2541].w)) * _587) * 0.949999988079071044921875);
        float _2560 = _2559 * _2559;
        float _2561 = cbLight._m0[_2541].x + _662;
        float _2562 = cbLight._m0[_2541].y + _663;
        float _2563 = cbLight._m0[_2541].z + _664;
        float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
        float _2568 = _2567 * _2561;
        float _2569 = _2567 * _2562;
        float _2570 = _2567 * _2563;
        float _2571 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2541].xyz));
        float _4554 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
        float _2575 = dot(vec3(_584, _585, _586), vec3(_2568, _2569, _2570));
        float _4565 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2578 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
        float _2579 = dot(vec3(cbLight._m0[_2541].xyz), vec3(_2568, _2569, _2570));
        float _4576 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2583 = _2560 * _2560;
        float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
        float _2596 = (exp2(log2(1.0 - (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2597 = 1.0 - _2560;
        float _2607 = (0.5 / (((_2354 * ((_2574 * _2597) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2597) + _2560) * _2574))) * _2574;
        float _4587 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2609 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
        float _2610 = isnan(1.0) ? _2092 : (isnan(_2092) ? 1.0 : min(_2092, 1.0));
        _2535 = (((_2596 * cbLight._m0[_2545].x) * _2609) * _2610) + _2477;
        _2537 = (((_2596 * cbLight._m0[_2545].y) * _2609) * _2610) + _2478;
        _2539 = (((_2596 * cbLight._m0[_2545].z) * _2609) * _2610) + _2479;
    }
    float _2641;
    float _2643;
    float _2645;
    if (_2263)
    {
        _2641 = _2535;
        _2643 = _2537;
        _2645 = _2539;
    }
    else
    {
        uint _2652 = _2077 + 3u;
        uint _2656 = _2077 + 11u;
        float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2652].w)) * _587) * 0.949999988079071044921875);
        float _2671 = _2670 * _2670;
        float _2672 = cbLight._m0[_2652].x + _662;
        float _2673 = cbLight._m0[_2652].y + _663;
        float _2674 = cbLight._m0[_2652].z + _664;
        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
        float _2679 = _2678 * _2672;
        float _2680 = _2678 * _2673;
        float _2681 = _2678 * _2674;
        float _2682 = dot(vec3(_584, _585, _586), vec3(cbLight._m0[_2652].xyz));
        float _4603 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2686 = dot(vec3(_584, _585, _586), vec3(_2679, _2680, _2681));
        float _4614 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2690 = dot(vec3(cbLight._m0[_2652].xyz), vec3(_2679, _2680, _2681));
        float _4625 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2694 = _2671 * _2671;
        float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
        float _2707 = (exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2708 = 1.0 - _2671;
        float _2718 = (0.5 / (((_2354 * ((_2685 * _2708) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2354 * _2708) + _2671) * _2685))) * _2685;
        float _4636 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2720 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
        float _2721 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
        _2641 = (((_2707 * cbLight._m0[_2656].x) * _2720) * _2721) + _2535;
        _2643 = (((_2707 * cbLight._m0[_2656].y) * _2720) * _2721) + _2537;
        _2645 = (((_2707 * cbLight._m0[_2656].z) * _2720) * _2721) + _2539;
    }
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_2075.y == 0u)
    {
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.x;
        uint _2754 = uint((float(_2742.y) * floor(float(uint(cbSceneParam._m0[85u].y * _684) / _2743))) + floor(float(uint(cbSceneParam._m0[85u].x * _683) / _2743)));
        float _2764 = (log2(_1853 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2765 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        uint _2768 = uint(isnan(14.0) ? _2765 : (isnan(_2765) ? 14.0 : min(_2765, 14.0)));
        uvec4 _2773 = texelFetch(g_lightClusterGridBuffer, int(((_2768 << 2u) + (_2754 << 6u)) >> 2u));
        uint _2774 = _2773.x;
        uint _2775 = _2742.z;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        if (((((1u << ((_2775 >> 4u) & 15u)) + 4294967295u) & _2774) == 0u) || ((_2775 & 240u) == 0u))
        {
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
        }
        else
        {
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            uint _3013 = 0u;
            uint _3022;
            bool _3023;
            for (;;)
            {
                _3022 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3013 << 2u)) >> 2u)).x;
                _3023 = _3022 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3023)
                {
                    frontier_phi_71_pred = _3012;
                    frontier_phi_71_pred_1 = _3011;
                    frontier_phi_71_pred_2 = _3010;
                    frontier_phi_71_pred_3 = _3009;
                    frontier_phi_71_pred_4 = _3008;
                    frontier_phi_71_pred_5 = _3007;
                }
                else
                {
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    uint _3158;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3022;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    for (;;)
                    {
                        uint _3162 = uint(findLSB(_3158)) + (_3013 << 5u);
                        uint _3159 = (_3158 + 4294967295u) & _3158;
                        uint _3164 = _3162 * 48u;
                        vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3184 = (_3162 * 48u) + 4u;
                        vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3203 = (_3162 * 48u) + 8u;
                        vec3 _3214 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x));
                        float _3218 = _3178.x - _1851;
                        float _3219 = _3178.y - _1852;
                        float _3220 = _3178.z - _1853;
                        float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                        float _3224 = inversesqrt(_3221);
                        float _3225 = _3224 * _3218;
                        float _3226 = _3224 * _3219;
                        float _3227 = _3224 * _3220;
                        float _3228 = dot(vec3(_704, _707, _710), vec3(_3225, _3226, _3227));
                        float _3233 = 1.0 - (_3221 * _3178.w);
                        float _4662 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3235 = sqrt(_3221) * _3197.w;
                        float _3238 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3228) + _3239;
                        float _3245 = _3235 * _3235;
                        float _3249 = ((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3234) / ((_3245 * 0.699999988079071044921875) + 1.0);
                        float _3253 = (-0.0) - _1851;
                        float _3254 = (-0.0) - _1852;
                        float _3255 = (-0.0) - _1853;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3269 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _764;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3260 + _3225;
                        float _3281 = _3261 + _3226;
                        float _3282 = _3262 + _3227;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_704, _707, _710), vec3(_3260, _3261, _3262));
                        float _4678 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3294 = dot(vec3(_704, _707, _710), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4689 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3238 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3228) + _3303;
                        float _4700 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4711 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3301 * _3301) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125))) * _3234;
                        _3082 = (_3249 * _3197.x) + _3155;
                        _3083 = (_3249 * _3197.y) + _3156;
                        _3084 = (_3249 * _3197.z) + _3157;
                        _3079 = (_3329 * _3214.x) + _3152;
                        _3080 = (_3329 * _3214.y) + _3153;
                        _3081 = (_3329 * _3214.z) + _3154;
                        if (_3159 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3159;
                        }
                    }
                    frontier_phi_71_pred = _3084;
                    frontier_phi_71_pred_1 = _3083;
                    frontier_phi_71_pred_2 = _3082;
                    frontier_phi_71_pred_3 = _3081;
                    frontier_phi_71_pred_4 = _3080;
                    frontier_phi_71_pred_5 = _3079;
                }
                _2865 = frontier_phi_71_pred;
                _2863 = frontier_phi_71_pred_1;
                _2861 = frontier_phi_71_pred_2;
                _2859 = frontier_phi_71_pred_3;
                _2857 = frontier_phi_71_pred_4;
                _2855 = frontier_phi_71_pred_5;
                uint _3014 = _3013 + 1u;
                if (_3014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3007 = _2855;
                    _3008 = _2857;
                    _3009 = _2859;
                    _3010 = _2861;
                    _3011 = _2863;
                    _3012 = _2865;
                    _3013 = _3014;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
        }
        uvec4 _2868 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2869 = _2868.z;
        uint _2871 = (_2869 >> 8u) & 15u;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        if (((4294967295u << _2871) & _2774) == 0u)
        {
            _2975 = _2854;
            _2977 = _2856;
            _2979 = _2858;
            _2981 = _2860;
            _2983 = _2862;
            _2985 = _2864;
        }
        else
        {
            float _3000 = inversesqrt(dot(vec3(_1851, _1852, _1853), vec3(_1851, _1852, _1853)));
            float _3001 = _3000 * _1851;
            float _3002 = _3000 * _1852;
            float _3003 = _3000 * _1853;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2871 < ((_2869 >> 12u) & 15u))
            {
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _3135 = _2854;
                float _3136 = _2856;
                float _3137 = _2858;
                float _3138 = _2860;
                float _3139 = _2862;
                float _3140 = _2864;
                uint _3141 = _2871;
                uint _3150;
                bool _3151;
                for (;;)
                {
                    _3150 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3141 << 2u)) >> 2u)).x;
                    _3151 = _3150 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3151)
                    {
                        frontier_phi_82_pred = _3140;
                        frontier_phi_82_pred_1 = _3139;
                        frontier_phi_82_pred_2 = _3138;
                        frontier_phi_82_pred_3 = _3137;
                        frontier_phi_82_pred_4 = _3136;
                        frontier_phi_82_pred_5 = _3135;
                    }
                    else
                    {
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3356 = _3135;
                        float _3357 = _3136;
                        float _3358 = _3137;
                        float _3359 = _3138;
                        float _3360 = _3139;
                        float _3361 = _3140;
                        uint _3362 = _3150;
                        uint _3363;
                        vec4 _3388;
                        float _3389;
                        vec4 _3404;
                        vec3 _3416;
                        vec4 _3432;
                        vec4 _3447;
                        float _3493;
                        bool _3494;
                        for (;;)
                        {
                            uint _3373 = ((_3141 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3362));
                            _3363 = (_3362 + 4294967295u) & _3362;
                            uint _3375 = _3373 * 40u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            _3389 = _3388.w;
                            uint _3391 = (_3373 * 40u) + 4u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3373 * 40u) + 8u;
                            _3416 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x));
                            uint _3419 = (_3373 * 40u) + 16u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3373 * 40u) + 20u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3373 * 40u) + 24u;
                            vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3468 = (_3373 * 40u) + 28u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            _3493 = fma(_1853, _3481.z, fma(_1852, _3481.y, _3481.x * _1851)) + _3481.w;
                            _3494 = !((fma(_1853, _3462.z, fma(_1852, _3462.y, _3462.x * _1851)) + _3462.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3494)
                            {
                                float _3521 = _3388.x - _1851;
                                float _3522 = _3388.y - _1852;
                                float _3523 = _3388.z - _1853;
                                float _3524 = dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523));
                                float _3527 = inversesqrt(_3524);
                                float _3528 = _3527 * _3521;
                                float _3529 = _3527 * _3522;
                                float _3530 = _3527 * _3523;
                                float _3534 = 1.0 - (_3524 / (_3389 * _3389));
                                float _4722 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3539 = sqrt(_3524) * _3404.w;
                                float _3541 = 1.39999997615814208984375 / (_3539 + 1.39999997615814208984375);
                                float _3542 = _3541 * _3541;
                                float _3545 = ((1.0 - _3542) * dot(vec3(_3528, _3529, _3530), vec3(_704, _707, _710))) + _3542;
                                float _3548 = _3539 * _3539;
                                float _3552 = (fma(_1853, _3432.z, fma(_1852, _3432.y, _3432.x * _1851)) + _3432.w) / _3493;
                                float _3553 = (fma(_1853, _3447.z, fma(_1852, _3447.y, _3447.x * _1851)) + _3447.w) / _3493;
                                float _3557 = 1.0 - dot(vec2(_3552, _3553), vec2(_3552, _3553));
                                float _4738 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3559 = _3558 * (((isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0))) * _3535) / ((_3548 * 0.699999988079071044921875) + 1.0));
                                float _3571 = exp2(log2(1.0 / ((_3548 * 3.5) + 5.0)) * 0.25);
                                float _3572 = 1.0 - _764;
                                float _3579 = sqrt(1.0 - ((1.0 - (_3572 * _3572)) * (1.0 - (_3571 * _3571))));
                                float _3580 = _3579 * _3579;
                                float _3581 = _3580 * _3580;
                                float _3582 = _3528 - _3001;
                                float _3583 = _3529 - _3002;
                                float _3584 = _3530 - _3003;
                                float _3588 = inversesqrt(dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584)));
                                float _3592 = dot(vec3(_704, _707, _710), vec3((-0.0) - _3001, (-0.0) - _3002, (-0.0) - _3003));
                                float _4749 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                                float _3596 = dot(vec3(_704, _707, _710), vec3(_3588 * _3582, _3588 * _3583, _3588 * _3584));
                                float _4760 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3599 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
                                float _3603 = ((_3599 * _3599) * (_3581 + (-1.0))) + 1.0;
                                float _3604 = _3541 * _3580;
                                float _3605 = _3604 * _3604;
                                float _3611 = ((1.0 - _3605) * dot(vec3(_704, _707, _710), vec3(_3528, _3529, _3530))) + _3605;
                                float _4771 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3613 = 1.0 - _3580;
                                float _3623 = (0.5 / (((_3612 * ((_3595 * _3613) + _3580)) + 9.9999999392252902907785028219223e-09) + (((_3612 * _3613) + _3580) * _3595))) * _3612;
                                float _4782 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3633 = (_3558 * _3535) * (((_3581 * 3.1415927410125732421875) * (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) / ((_3603 * _3603) * ((_3548 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3559 * _3404.z;
                                frontier_phi_88_pred_1 = _3559 * _3404.y;
                                frontier_phi_88_pred_2 = _3559 * _3404.x;
                                frontier_phi_88_pred_3 = _3633 * _3416.z;
                                frontier_phi_88_pred_4 = _3633 * _3416.y;
                                frontier_phi_88_pred_5 = _3633 * _3416.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3642 = frontier_phi_88_pred;
                            _3641 = frontier_phi_88_pred_1;
                            _3640 = frontier_phi_88_pred_2;
                            _3639 = frontier_phi_88_pred_3;
                            _3638 = frontier_phi_88_pred_4;
                            _3637 = frontier_phi_88_pred_5;
                            _3346 = _3640 + _3359;
                            _3347 = _3641 + _3360;
                            _3348 = _3642 + _3361;
                            _3343 = _3637 + _3356;
                            _3344 = _3638 + _3357;
                            _3345 = _3639 + _3358;
                            if (_3363 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3363;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3348;
                        frontier_phi_82_pred_1 = _3347;
                        frontier_phi_82_pred_2 = _3346;
                        frontier_phi_82_pred_3 = _3345;
                        frontier_phi_82_pred_4 = _3344;
                        frontier_phi_82_pred_5 = _3343;
                    }
                    _2986 = frontier_phi_82_pred;
                    _2984 = frontier_phi_82_pred_1;
                    _2982 = frontier_phi_82_pred_2;
                    _2980 = frontier_phi_82_pred_3;
                    _2978 = frontier_phi_82_pred_4;
                    _2976 = frontier_phi_82_pred_5;
                    uint _3142 = _3141 + 1u;
                    if (_3142 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3135 = _2976;
                        _3136 = _2978;
                        _3137 = _2980;
                        _3138 = _2982;
                        _3139 = _2984;
                        _3140 = _2986;
                        _3141 = _3142;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2982;
                frontier_phi_63_64_ladder_1 = _2986;
                frontier_phi_63_64_ladder_2 = _2984;
                frontier_phi_63_64_ladder_3 = _2980;
                frontier_phi_63_64_ladder_4 = _2978;
                frontier_phi_63_64_ladder_5 = _2976;
            }
            else
            {
                frontier_phi_63_64_ladder = _2860;
                frontier_phi_63_64_ladder_1 = _2864;
                frontier_phi_63_64_ladder_2 = _2862;
                frontier_phi_63_64_ladder_3 = _2858;
                frontier_phi_63_64_ladder_4 = _2856;
                frontier_phi_63_64_ladder_5 = _2854;
            }
            _2975 = frontier_phi_63_64_ladder_5;
            _2977 = frontier_phi_63_64_ladder_4;
            _2979 = frontier_phi_63_64_ladder_3;
            _2981 = frontier_phi_63_64_ladder;
            _2983 = frontier_phi_63_64_ladder_2;
            _2985 = frontier_phi_63_64_ladder_1;
        }
        float _2990 = isnan(1.0) ? _748 : (isnan(_748) ? 1.0 : min(_748, 1.0));
        _2787 = (_2990 * _2981) + _2318;
        _2789 = (_2990 * _2983) + _2320;
        _2791 = (_2990 * _2985) + _2322;
        _2793 = ((_2975 * 0.039999999105930328369140625) * _2990) + _2641;
        _2795 = ((_2977 * 0.039999999105930328369140625) * _2990) + _2643;
        _2797 = ((_2979 * 0.039999999105930328369140625) * _2990) + _2645;
    }
    else
    {
        _2787 = _2318;
        _2789 = _2320;
        _2791 = _2322;
        _2793 = _2641;
        _2795 = _2643;
        _2797 = _2645;
    }
    float _4798 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4809 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4820 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _2814 = ((isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2787 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _748))) + ((_2793 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1584)) * cbPerFrame._m0[3u].x);
    float _2815 = ((isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0))) * (_2789 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _748))) + ((_2795 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1584)) * cbPerFrame._m0[3u].x);
    float _2816 = ((isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (_2791 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _748))) + ((_2797 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1584)) * cbPerFrame._m0[3u].x);
    uint _2817 = _247 + 6u;
    float _2825 = _683 / cbSceneParam._m0[86u].x;
    float _2826 = _684 / cbSceneParam._m0[86u].y;
    vec4 _2840 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, (log2((isnan(cbSceneParam._m0[77u].w) ? _605 : (isnan(_605) ? cbSceneParam._m0[77u].w : min(_605, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2842 = _2840.x;
    float _2843 = _2840.y;
    float _2844 = _2840.z;
    float _2845 = _2840.w;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    if (_605 > cbSceneParam._m0[78u].w)
    {
        float _2879 = isnan(_605) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _605 : min(cbSceneParam._m0[80u].w, _605));
        float _2880 = _2879 / _605;
        float _2891 = _2880 * _655;
        float _2892 = _656 * _2880;
        float _2893 = (-0.0) - _2892;
        float _2895 = _2880 * _657;
        float _2897 = (cbSceneParam._m0[77u].w * _2893) / _2879;
        float _2898 = _2897 + cbSceneParam._m0[79u].w;
        float _2899 = cbSceneParam._m0[79u].w - _2892;
        float _2905 = sqrt(((_2891 * _2891) + (_2892 * _2892)) + (_2895 * _2895));
        float _2908 = (1.0 - (cbSceneParam._m0[77u].w / _2879)) * _2905;
        float _2913 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2915 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3092;
        if (abs((_2893 - _2897) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3092 = ((((_2898 > 0.0) ? exp2(_2913 * _2898) : (2.0 - exp2(_2915 * _2898))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2908;
        }
        else
        {
            float _3036 = 1.0 / cbSceneParam._m0[80u].x;
            float _3037 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : max(_2898, _2899));
            float _3038 = isnan(_2899) ? _2898 : (isnan(_2898) ? _2899 : min(_2898, _2899));
            float _3047 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : min(_3037, 0.0));
            float _3048 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : min(_3038, 0.0));
            _3092 = ((abs(_2905 / _2893) * cbSceneParam._m0[80u].y) * ((((_3047 - _3048) * 2.0) - ((exp2(_2913 * (isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0)))) - exp2(_2913 * (isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0))))) * _3036)) - ((exp2(_2915 * _3047) - exp2(_2915 * _3048)) * _3036))) + (_2908 * cbSceneParam._m0[80u].z);
        }
        vec4 _3094 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, 1.0), 0.0);
        float _3103 = exp2((_3092 * (-1.44269502162933349609375)) * (1.0 - _3094.w));
        float _3104 = log2(_3103);
        float _3120 = log2(_2845);
        _2917 = (exp2(_3120 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].x)) * _3094.x) / cbSceneParam._m0[78u].x)) + _2842;
        _2919 = (exp2(_3120 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].y)) * _3094.y) / cbSceneParam._m0[78u].y)) + _2843;
        _2921 = (exp2(_3120 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].z)) * _3094.z) / cbSceneParam._m0[78u].z)) + _2844;
        _2923 = _3103 * _2845;
    }
    else
    {
        _2917 = _2842;
        _2919 = _2843;
        _2921 = _2844;
        _2923 = _2845;
    }
    bool _3130;
    vec4 _2933;
    vec4 _2955;
    float _2957;
    float _2961;
    float _2962;
    float _2963;
    float _2964;
    bool _2974;
    for (;;)
    {
        _2933 = cbMatDynParam._m0[0u];
        float _2935 = roundEven(_2933.y);
        bool _2936 = _2935 == 3.0;
        float _2937 = log2(_2923);
        float _2944 = exp2(_2937 * cbSceneParam._m0[78u].x) * _2814;
        float _2945 = exp2(_2937 * cbSceneParam._m0[78u].y) * _2815;
        float _2946 = exp2(_2937 * cbSceneParam._m0[78u].z) * _2816;
        float _2953 = _671 + (-0.5);
        _2955 = cbMtdParam._m0[1u];
        _2957 = _2955.y * _2953;
        float _2960 = (_2935 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2961 = _2960 * (_2936 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2917)));
        _2962 = _2960 * (_2936 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2919)));
        _2963 = _2960 * (_2936 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2921)));
        _2964 = _2953 * 0.999000012874603271484375;
        _2974 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2974)
        {
            if ((cbInstanceData._m0[_247 + 7u].x + _2964) < 0.5)
            {
                _3130 = true;
                break;
            }
        }
        uint _3071 = _723 + uint(_2933.w);
        if ((cbInstanceData._m0[_3071].w < 1.0) && ((cbInstanceData._m0[_3071].w + _2964) < 0.5))
        {
            _3130 = true;
            break;
        }
        if ((_2957 + 1.0) < _2955.x)
        {
            _3130 = true;
            break;
        }
        _3130 = false;
        break;
    }
    float _3334;
    if (_3130)
    {
        discard_state = true;
        _3334 = 0.0;
    }
    else
    {
        _3334 = cbInstanceData._m0[_2817].w;
    }
    SV_Target.x = _2961;
    SV_Target.y = _2962;
    SV_Target.z = _2963;
    SV_Target.w = _3334;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2817].w;
    discard_exit();
}


