#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1021;
float _3385;
float _3386;
float _3387;
float _3388;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _248) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _249) + cbTextureTilingScale._m0[20u].w));
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _324 = _320.z;
    float _328 = (_320.x * 2.0) + (-1.0);
    float _329 = (_320.y * 2.0) + (-1.0);
    float _330 = dot(vec2(_328, _329), vec2(_328, _329));
    float _3397 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _336 = sqrt(1.0 - (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))));
    float _341 = _328 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_294.x * 2.0) + (-1.0)));
    float _342 = _329 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_294.y * 2.0) + (-1.0)));
    vec4 _359 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _361 = _359.x;
    float _362 = 1.0 - _361;
    float _378 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_361 - _362) * cbMtdParam._m0[24u].z) + _362) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3408 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _379 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _386 = (_379 * (cbMtdParam._m0[17u].x - _274)) + _274;
    float _387 = (_379 * (cbMtdParam._m0[17u].y - _275)) + _275;
    float _388 = (_379 * (cbMtdParam._m0[17u].z - _276)) + _276;
    float _393 = (((_294.z - _324) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _324;
    vec4 _406 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _413 = (_406.x * 2.0) + (-1.0);
    float _414 = (_406.y * 2.0) + (-1.0);
    float _415 = dot(vec2(_413, _414), vec2(_413, _414));
    float _3419 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _423 = (_379 * (_406.z - _393)) + _393;
    float _435 = (((_413 - _341) + (cbMtdParam._m0[21u].x * _341)) * _379) + _341;
    float _436 = (((_414 - _342) + (cbMtdParam._m0[21u].x * _342)) * _379) + _342;
    float _437 = (_379 * (sqrt(1.0 - (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) - _336)) + _336;
    float _442 = cbMtdParam._m0[22u].x + _320.w;
    float _445 = fma(_437, _215 * NORMAL.x, fma(_436, _222 * TANGENT.x, (_208 * _200) * _435));
    float _448 = fma(_437, _215 * NORMAL.y, fma(_436, _222 * TANGENT.y, (_208 * _201) * _435));
    float _451 = fma(_437, _215 * NORMAL.z, fma(_436, _222 * TANGENT.z, (_208 * _202) * _435));
    float _455 = inversesqrt(dot(vec3(_445, _448, _451), vec3(_445, _448, _451)));
    float _456 = _455 * _445;
    float _457 = _455 * _448;
    float _458 = _455 * _451;
    float _3430 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _459 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3452 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3463 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3474 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _477 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _528 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _518);
    float _529 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _518);
    float _530 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _518);
    float _534 = inversesqrt(dot(vec3(_528, _529, _530), vec3(_528, _529, _530)));
    float _535 = _528 * _534;
    float _536 = _529 * _534;
    float _537 = _530 * _534;
    vec4 _542 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _544 = _542.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _701 = sqrt(((_528 * _528) + (_529 * _529)) + (_530 * _530));
        float _707 = (cbMatDynParam._m0[5u].x * _701) + cbMatDynParam._m0[5u].y;
        float _3485 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _712 = (cbMatDynParam._m0[5u].z * _701) + cbMatDynParam._m0[5u].w;
        float _3496 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) - _708)) + _708) < ((_544 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _556 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _557 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _577 = fma(_458, cbSceneParam._m0[5u].z, fma(_457, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _456));
    float _580 = fma(_458, cbSceneParam._m0[6u].z, fma(_457, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _456));
    float _583 = fma(_458, cbSceneParam._m0[7u].z, fma(_457, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _456));
    uint _596 = _228 + 9u;
    uint _597 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _603 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_597].x;
    float _604 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_597].y;
    float _605 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_597].z;
    float _3507 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _3518 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    vec4 _617 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _556, cbSceneParam._m0[86u].y * _557));
    float _621 = ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * TEXCOORD_5.w) * _617.x;
    float _622 = dot(vec3(_456, _457, _458), vec3(_535, _536, _537));
    float _625 = _622 * 2.0;
    float _629 = (_625 * _456) - _535;
    float _630 = (_625 * _457) - _536;
    float _631 = (_625 * _458) - _537;
    float _635 = abs(dot(vec3(_535, _536, _537), vec3(_456, _457, _458)));
    float _3540 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _637 = sqrt(_459);
    float _650 = exp2((_637 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_637 * 3.0));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1020;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _745 = fma(_690, cbModelParam._m0[26u].z, fma(_686, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _682));
        float _749 = fma(_690, cbModelParam._m0[27u].z, fma(_686, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _682));
        float _753 = fma(_690, cbModelParam._m0[28u].z, fma(_686, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _682));
        float _778 = _682 + _456;
        float _779 = _686 + _457;
        float _780 = _690 + _458;
        float _790 = fma(_780, cbModelParam._m0[26u].z, fma(_779, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _778)) - _745;
        float _791 = fma(_780, cbModelParam._m0[27u].z, fma(_779, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _778)) - _749;
        float _792 = fma(_780, cbModelParam._m0[28u].z, fma(_779, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _778)) - _753;
        float _796 = inversesqrt(dot(vec3(_790, _791, _792), vec3(_790, _791, _792)));
        float _809 = ((_796 * _790) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_745 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_796 * _791) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_749 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_796 * _792) / cbModelParam._m0[34u].z) + ((((((_753 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        float _848 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_814.x + (-0.5));
        float _850 = _848 * (_814.y + (-0.5));
        float _851 = _848 * (_814.z + (-0.5));
        float _858 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_821.x + (-0.5));
        float _860 = _858 * (_821.y + (-0.5));
        float _861 = _858 * (_821.z + (-0.5));
        float _868 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_828.x + (-0.5));
        float _870 = _868 * (_828.y + (-0.5));
        float _871 = _868 * (_828.z + (-0.5));
        float _878 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_835.x + (-0.5));
        float _880 = _878 * (_835.y + (-0.5));
        float _881 = _878 * (_835.z + (-0.5));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = _849 * 0.5;
        float _886 = _859 * 0.5;
        float _887 = _869 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _902 = (dot(vec3(_456, _457, _458), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _912 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3588 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_914 + 1.0))) + _919) * _882;
        float _929 = _850 * 0.5;
        float _930 = _860 * 0.5;
        float _931 = _870 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _945 = (dot(vec3(_456, _457, _458), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _954 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3621 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_956 + 1.0))) + _961) * _883;
        float _971 = _851 * 0.5;
        float _972 = _861 * 0.5;
        float _973 = _871 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_456, _457, _458), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3654 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_998 + 1.0))) + _1003) * _884;
        _1020 = _851;
        _1022 = _850;
        _1023 = _849;
        _1024 = _861;
        _1025 = _860;
        _1026 = _859;
        _1027 = _871;
        _1028 = _870;
        _1029 = _869;
        _1030 = _884;
        _1031 = _883;
        _1032 = _882;
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
    }
    else
    {
        _1020 = _1021;
        _1022 = _1021;
        _1023 = _1021;
        _1024 = _1021;
        _1025 = _1021;
        _1026 = _1021;
        _1027 = _1021;
        _1028 = _1021;
        _1029 = _1021;
        _1030 = _1021;
        _1031 = _1021;
        _1032 = _1021;
        _1033 = 0.0;
        _1034 = 0.0;
        _1035 = 0.0;
    }
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1063 = fma(_690, cbModelParam._m0[30u].z, fma(_686, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _682));
        float _1067 = fma(_690, cbModelParam._m0[31u].z, fma(_686, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _682));
        float _1071 = fma(_690, cbModelParam._m0[32u].z, fma(_686, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _682));
        float _1094 = _682 + _456;
        float _1095 = _686 + _457;
        float _1096 = _690 + _458;
        float _1106 = fma(_1096, cbModelParam._m0[30u].z, fma(_1095, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1094)) - _1063;
        float _1107 = fma(_1096, cbModelParam._m0[31u].z, fma(_1095, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1094)) - _1067;
        float _1108 = fma(_1096, cbModelParam._m0[32u].z, fma(_1095, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1094)) - _1071;
        float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
        float _1125 = ((_1112 * _1106) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1063 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1112 * _1107) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1067 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1112 * _1108) / cbModelParam._m0[35u].z) + ((((((_1071 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        float _1162 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1129.x + (-0.5));
        float _1164 = _1162 * (_1129.y + (-0.5));
        float _1165 = _1162 * (_1129.z + (-0.5));
        float _1172 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1136.x + (-0.5));
        float _1174 = _1172 * (_1136.y + (-0.5));
        float _1175 = _1172 * (_1136.z + (-0.5));
        float _1182 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1143.x + (-0.5));
        float _1184 = _1182 * (_1143.y + (-0.5));
        float _1185 = _1182 * (_1143.z + (-0.5));
        float _1192 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1150.x + (-0.5));
        float _1194 = _1192 * (_1150.y + (-0.5));
        float _1195 = _1192 * (_1150.z + (-0.5));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = _1163 * 0.5;
        float _1200 = _1173 * 0.5;
        float _1201 = _1183 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_456, _457, _458), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3717 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1226 + 1.0))) + _1231) * _1196;
        float _1241 = _1164 * 0.5;
        float _1242 = _1174 * 0.5;
        float _1243 = _1184 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_456, _457, _458), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3750 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1268 + 1.0))) + _1273) * _1197;
        float _1283 = _1165 * 0.5;
        float _1284 = _1175 * 0.5;
        float _1285 = _1185 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_456, _457, _458), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3761 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3772 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _3783 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * (_1310 + 1.0))) + _1315) * _1198;
        _1332 = _1165;
        _1333 = _1164;
        _1334 = _1163;
        _1335 = _1175;
        _1336 = _1174;
        _1337 = _1173;
        _1338 = _1185;
        _1339 = _1184;
        _1340 = _1183;
        _1341 = _1198;
        _1342 = _1197;
        _1343 = _1196;
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _1021;
        _1333 = _1021;
        _1334 = _1021;
        _1335 = _1021;
        _1336 = _1021;
        _1337 = _1021;
        _1338 = _1021;
        _1339 = _1021;
        _1340 = _1021;
        _1341 = _1021;
        _1342 = _1021;
        _1343 = _1021;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1033)) + _1033;
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1034)) + _1034;
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1035)) + _1035;
    float _1379 = fma(_1358, cbSceneParam._m0[89u].z, fma(_1357, cbSceneParam._m0[89u].y, _1356 * cbSceneParam._m0[89u].x));
    float _1382 = fma(_1358, cbSceneParam._m0[90u].z, fma(_1357, cbSceneParam._m0[90u].y, _1356 * cbSceneParam._m0[90u].x));
    float _1385 = fma(_1358, cbSceneParam._m0[91u].z, fma(_1357, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1356));
    float _1400 = _629 * 0.5;
    float _1401 = _630 * 0.5;
    float _1402 = _631 * 0.5;
    float _1403 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1406 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1409 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1443;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1416 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1020, _1024, _1027, _1030));
        float _1420 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1424 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1431 = dot(vec4(cbModelParam._m0[39u]), vec4(_1400, _1401, _1402, 1.0));
        _1443 = dot(vec3(isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1431) ? 0.0 : (isnan(0.0) ? _1431 : max(0.0, _1431))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1443 = 1.0;
    }
    float _1454;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1445 = dot(vec4(cbModelParam._m0[40u]), vec4(_1400, _1401, _1402, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1445) ? 0.0 : (isnan(0.0) ? _1445 : max(0.0, _1445))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1458 = (_1454 * cbModelParam._m0[1u].x) + (_1443 * (1.0 - cbModelParam._m0[1u].x));
    float _1468 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _459);
    float _1469 = isnan(_1468) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1468 : min(cbModelParam._m0[25u].z, _1468));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1517 = fma(_690, cbModelParam._m0[13u].z, fma(_686, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _682)) + cbModelParam._m0[13u].w;
        float _1521 = fma(_690, cbModelParam._m0[14u].z, fma(_686, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _682)) + cbModelParam._m0[14u].w;
        float _1525 = fma(_690, cbModelParam._m0[15u].z, fma(_686, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _682)) + cbModelParam._m0[15u].w;
        float _1528 = fma(_631, cbModelParam._m0[13u].z, fma(_630, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _629));
        float _1531 = fma(_631, cbModelParam._m0[14u].z, fma(_630, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _629));
        float _1534 = fma(_631, cbModelParam._m0[15u].z, fma(_630, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _629));
        float _1562;
        if (_1528 > 0.0)
        {
            _1562 = abs((1.0 - _1517) / _1528);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1517 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1562 = frontier_phi_17_15_ladder;
        }
        float _1766;
        if (_1531 > 0.0)
        {
            _1766 = abs((1.0 - _1521) / _1531);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1521 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1766 = frontier_phi_26_22_ladder;
        }
        float _2009;
        if (_1534 > 0.0)
        {
            _2009 = abs((1.0 - _1525) / _1534);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1525 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2009 = frontier_phi_38_33_ladder;
        }
        float _2011 = isnan(_1766) ? _1562 : (isnan(_1562) ? _1766 : min(_1562, _1766));
        float _2012 = isnan(_2009) ? _2011 : (isnan(_2011) ? _2009 : min(_2011, _2009));
        float _2016 = (_2012 * _1528) + _1517;
        float _2017 = (_2012 * _1531) + _1521;
        float _2018 = (_2012 * _1534) + _1525;
        float _2019 = _2012 * 9.9999997473787516355514526367188e-05;
        float _2021 = (-1.0) - _2019;
        float _2023 = _2019 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2018 > _2023) || ((_2018 < _2021) || ((_2017 > _2023) || ((_2017 < _2021) || ((_2016 < _2021) || (_2016 > _2023))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2142 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2018, cbModelParam._m0[9u].z, fma(_2017, cbModelParam._m0[9u].y, _2016 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2018, cbModelParam._m0[10u].z, fma(_2017, cbModelParam._m0[10u].y, _2016 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2018, cbModelParam._m0[11u].z, fma(_2017, cbModelParam._m0[11u].y, _2016 * cbModelParam._m0[11u].x))), _1469);
            frontier_phi_16_38_ladder = _2142.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2142.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2142.x * cbModelParam._m0[1u].y;
        }
        _1550 = frontier_phi_16_38_ladder_2;
        _1552 = frontier_phi_16_38_ladder_1;
        _1554 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_629, _630, _631), _1469);
        _1550 = _1538.x * cbModelParam._m0[1u].y;
        _1552 = _1538.y * cbModelParam._m0[1u].y;
        _1554 = _1538.z * cbModelParam._m0[1u].y;
    }
    float _1558 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _459);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1558 : min(cbModelParam._m0[25u].w, _1558));
    float _1650;
    float _1652;
    float _1654;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1614 = fma(_690, cbModelParam._m0[21u].z, fma(_686, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _682)) + cbModelParam._m0[21u].w;
        float _1618 = fma(_690, cbModelParam._m0[22u].z, fma(_686, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _682)) + cbModelParam._m0[22u].w;
        float _1622 = fma(_690, cbModelParam._m0[23u].z, fma(_686, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _682)) + cbModelParam._m0[23u].w;
        float _1625 = fma(_631, cbModelParam._m0[21u].z, fma(_630, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _629));
        float _1628 = fma(_631, cbModelParam._m0[22u].z, fma(_630, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _629));
        float _1631 = fma(_631, cbModelParam._m0[23u].z, fma(_630, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _629));
        float _1771;
        if (_1625 > 0.0)
        {
            _1771 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1771 = frontier_phi_28_24_ladder;
        }
        float _2036;
        if (_1628 > 0.0)
        {
            _2036 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2036 = frontier_phi_40_35_ladder;
        }
        float _2241;
        if (_1631 > 0.0)
        {
            _2241 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2241 = frontier_phi_49_46_ladder;
        }
        float _2243 = isnan(_2036) ? _1771 : (isnan(_1771) ? _2036 : min(_1771, _2036));
        float _2244 = isnan(_2241) ? _2243 : (isnan(_2243) ? _2241 : min(_2243, _2241));
        float _2248 = (_2244 * _1625) + _1614;
        float _2249 = (_2244 * _1628) + _1618;
        float _2250 = (_2244 * _1631) + _1622;
        float _2251 = _2244 * 9.9999997473787516355514526367188e-05;
        float _2252 = (-1.0) - _2251;
        float _2254 = _2251 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2250 > _2254) || ((_2250 < _2252) || ((_2249 > _2254) || ((_2249 < _2252) || ((_2248 < _2252) || (_2248 > _2254))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2449 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2250, cbModelParam._m0[17u].z, fma(_2249, cbModelParam._m0[17u].y, _2248 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2250, cbModelParam._m0[18u].z, fma(_2249, cbModelParam._m0[18u].y, _2248 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2250, cbModelParam._m0[19u].z, fma(_2249, cbModelParam._m0[19u].y, _2248 * cbModelParam._m0[19u].x))), _1559);
            frontier_phi_25_49_ladder = _2449.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2449.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2449.x * cbModelParam._m0[1u].z;
        }
        _1650 = frontier_phi_25_49_ladder_2;
        _1652 = frontier_phi_25_49_ladder_1;
        _1654 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_629, _630, _631), _1559);
        _1650 = _1634.x * cbModelParam._m0[1u].z;
        _1652 = _1634.y * cbModelParam._m0[1u].z;
        _1654 = _1634.z * cbModelParam._m0[1u].z;
    }
    float _1666 = ((((1.0 - _650) * ((_637 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_650 * _637)) * _621;
    float _1667 = _1666 * ((cbModelParam._m0[1u].w * (_1650 - _1550)) + _1550);
    float _1668 = _1666 * ((cbModelParam._m0[1u].w * (_1652 - _1552)) + _1552);
    float _1669 = _1666 * ((cbModelParam._m0[1u].w * (_1654 - _1554)) + _1554);
    float _1672 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1675 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1678 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, _1667 * cbSceneParam._m0[91u].x));
    uvec4 _1688 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1690 = _1688.x * 14u;
    uint _1691 = _1690 + 13u;
    float _1698 = _621 + (-1.0);
    float _1703 = (cbLight._m0[_1691].x * _1698) + 1.0;
    float _1704 = (cbLight._m0[_1691].y * _1698) + 1.0;
    float _1705 = (cbLight._m0[_1691].z * _1698) + 1.0;
    float _1706 = (cbLight._m0[_1691].w * _1698) + 1.0;
    uint _1707 = _1690 + 5u;
    float _1713 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
    uint _1717 = _1690 + 4u;
    float _1724 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1728 = _1690 | 1u;
    float _1739 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_456, _457, _458));
    float _1742 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_456, _457, _458));
    float _3919 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _3930 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1747 = (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * 0.3183098733425140380859375;
    float _1749 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.3183098733425140380859375;
    float _1756 = ((cbLight._m0[_1707].x * _1713) * _1749) + ((cbLight._m0[_1717].x * _1724) * _1747);
    float _1757 = ((_1713 * cbLight._m0[_1707].y) * _1749) + ((_1724 * cbLight._m0[_1717].y) * _1747);
    float _1758 = ((_1713 * cbLight._m0[_1707].z) * _1749) + ((_1724 * cbLight._m0[_1717].z) * _1747);
    uvec4 _1763 = floatBitsToUint(cbLight._m0[_1690 + 12u]);
    bool _1765 = _1763.x == 0u;
    float _1776;
    float _1778;
    float _1780;
    if (_1765)
    {
        _1776 = _1756;
        _1778 = _1757;
        _1780 = _1758;
    }
    else
    {
        uint _1784 = _1690 + 6u;
        float _1800 = (dot(vec3(cbLight._m0[_1690 + 2u].xyz), vec3(_456, _457, _458)) * 0.5) + 0.5;
        float _1801 = _1800 * _1800;
        float _3941 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1802 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1803 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _1776 = (((cbLight._m0[_1784].x * 0.3183098733425140380859375) * _1802) * _1803) + _1756;
        _1778 = (((cbLight._m0[_1784].y * 0.3183098733425140380859375) * _1802) * _1803) + _1757;
        _1780 = (((cbLight._m0[_1784].z * 0.3183098733425140380859375) * _1802) * _1803) + _1758;
    }
    bool _1783 = _1763.y == 0u;
    float _1821;
    float _1823;
    float _1825;
    if (_1783)
    {
        _1821 = _1776;
        _1823 = _1778;
        _1825 = _1780;
    }
    else
    {
        uint _1980 = _1690 + 7u;
        float _1996 = (dot(vec3(cbLight._m0[_1690 + 3u].xyz), vec3(_456, _457, _458)) * 0.5) + 0.5;
        float _1997 = _1996 * _1996;
        float _3957 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1999 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _1821 = (((cbLight._m0[_1980].x * 0.3183098733425140380859375) * _1998) * _1999) + _1776;
        _1823 = (((cbLight._m0[_1980].y * 0.3183098733425140380859375) * _1998) * _1999) + _1778;
        _1825 = (((cbLight._m0[_1980].z * 0.3183098733425140380859375) * _1998) * _1999) + _1780;
    }
    uint _1828 = _1690 + 8u;
    float _1841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1690].w)) * _459) * 0.949999988079071044921875);
    float _1842 = _1841 * _1841;
    float _1843 = cbLight._m0[_1690].x + _535;
    float _1844 = cbLight._m0[_1690].y + _536;
    float _1845 = cbLight._m0[_1690].z + _537;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1850 = _1849 * _1843;
    float _1851 = _1849 * _1844;
    float _1852 = _1849 * _1845;
    float _1853 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_1690].xyz));
    float _3973 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _1857 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1858 = dot(vec3(_456, _457, _458), vec3(_1850, _1851, _1852));
    float _3995 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1862 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_1850, _1851, _1852));
    float _4006 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1866 = _1842 * _1842;
    float _1870 = ((_1861 * _1861) * (_1866 + (-1.0))) + 1.0;
    float _1881 = (exp2(log2(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1882 = 1.0 - _1842;
    float _1893 = (0.5 / (((_1857 * ((_1856 * _1882) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1857 * _1882) + _1842) * _1856))) * _1856;
    float _4017 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1895 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_1866 / ((_1870 * _1870) * 3.141590118408203125));
    uint _1906 = _1690 + 9u;
    float _1917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1728].w)) * _459) * 0.949999988079071044921875);
    float _1918 = _1917 * _1917;
    float _1919 = cbLight._m0[_1728].x + _535;
    float _1920 = cbLight._m0[_1728].y + _536;
    float _1921 = cbLight._m0[_1728].z + _537;
    float _1925 = inversesqrt(dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921)));
    float _1926 = _1925 * _1919;
    float _1927 = _1925 * _1920;
    float _1928 = _1925 * _1921;
    float _1929 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_1728].xyz));
    float _4028 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    float _1932 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _1933 = dot(vec3(_456, _457, _458), vec3(_1926, _1927, _1928));
    float _4039 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1936 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _1937 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_1926, _1927, _1928));
    float _4050 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1941 = _1918 * _1918;
    float _1945 = ((_1936 * _1936) * (_1941 + (-1.0))) + 1.0;
    float _1954 = (exp2(log2(1.0 - (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1955 = 1.0 - _1918;
    float _1965 = (0.5 / (((_1857 * ((_1932 * _1955) + _1918)) + 9.9999999392252902907785028219223e-09) + (((_1857 * _1955) + _1918) * _1932))) * _1932;
    float _4061 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * (_1941 / ((_1945 * _1945) * 3.141590118408203125));
    float _1977 = (((_1954 * cbLight._m0[_1906].x) * _1967) * _1713) + (((_1881 * cbLight._m0[_1828].x) * _1895) * _1724);
    float _1978 = (((_1954 * cbLight._m0[_1906].y) * _1967) * _1713) + (((_1881 * cbLight._m0[_1828].y) * _1895) * _1724);
    float _1979 = (((_1954 * cbLight._m0[_1906].z) * _1967) * _1713) + (((_1881 * cbLight._m0[_1828].z) * _1895) * _1724);
    float _2041;
    float _2043;
    float _2045;
    if (_1765)
    {
        _2041 = _1977;
        _2043 = _1978;
        _2045 = _1979;
    }
    else
    {
        uint _2047 = _1690 + 2u;
        uint _2051 = _1690 + 10u;
        float _2065 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2047].w)) * _459) * 0.949999988079071044921875);
        float _2066 = _2065 * _2065;
        float _2067 = cbLight._m0[_2047].x + _535;
        float _2068 = cbLight._m0[_2047].y + _536;
        float _2069 = cbLight._m0[_2047].z + _537;
        float _2073 = inversesqrt(dot(vec3(_2067, _2068, _2069), vec3(_2067, _2068, _2069)));
        float _2074 = _2073 * _2067;
        float _2075 = _2073 * _2068;
        float _2076 = _2073 * _2069;
        float _2077 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_2047].xyz));
        float _4072 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
        float _2080 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2081 = dot(vec3(_456, _457, _458), vec3(_2074, _2075, _2076));
        float _4083 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
        float _2084 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2085 = dot(vec3(cbLight._m0[_2047].xyz), vec3(_2074, _2075, _2076));
        float _4094 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2089 = _2066 * _2066;
        float _2093 = ((_2084 * _2084) * (_2089 + (-1.0))) + 1.0;
        float _2102 = (exp2(log2(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2103 = 1.0 - _2066;
        float _2113 = (0.5 / (((_1857 * ((_2080 * _2103) + _2066)) + 9.9999999392252902907785028219223e-09) + (((_1857 * _2103) + _2066) * _2080))) * _2080;
        float _4105 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        float _2115 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2089 / ((_2093 * _2093) * 3.141590118408203125));
        float _2116 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _2041 = (((_2102 * cbLight._m0[_2051].x) * _2115) * _2116) + _1977;
        _2043 = (((_2102 * cbLight._m0[_2051].y) * _2115) * _2116) + _1978;
        _2045 = (((_2102 * cbLight._m0[_2051].z) * _2115) * _2116) + _1979;
    }
    float _2151;
    float _2153;
    float _2155;
    if (_1783)
    {
        _2151 = _2041;
        _2153 = _2043;
        _2155 = _2045;
    }
    else
    {
        uint _2162 = _1690 + 3u;
        uint _2166 = _1690 + 11u;
        float _2180 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2162].w)) * _459) * 0.949999988079071044921875);
        float _2181 = _2180 * _2180;
        float _2182 = cbLight._m0[_2162].x + _535;
        float _2183 = cbLight._m0[_2162].y + _536;
        float _2184 = cbLight._m0[_2162].z + _537;
        float _2188 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
        float _2189 = _2188 * _2182;
        float _2190 = _2188 * _2183;
        float _2191 = _2188 * _2184;
        float _2192 = dot(vec3(_456, _457, _458), vec3(cbLight._m0[_2162].xyz));
        float _4121 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
        float _2195 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2196 = dot(vec3(_456, _457, _458), vec3(_2189, _2190, _2191));
        float _4132 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2199 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2200 = dot(vec3(cbLight._m0[_2162].xyz), vec3(_2189, _2190, _2191));
        float _4143 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2204 = _2181 * _2181;
        float _2208 = ((_2199 * _2199) * (_2204 + (-1.0))) + 1.0;
        float _2217 = (exp2(log2(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2218 = 1.0 - _2181;
        float _2228 = (0.5 / (((_1857 * ((_2195 * _2218) + _2181)) + 9.9999999392252902907785028219223e-09) + (((_1857 * _2218) + _2181) * _2195))) * _2195;
        float _4154 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2230 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2204 / ((_2208 * _2208) * 3.141590118408203125));
        float _2231 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _2151 = (((_2217 * cbLight._m0[_2166].x) * _2230) * _2231) + _2041;
        _2153 = (((_2217 * cbLight._m0[_2166].y) * _2230) * _2231) + _2043;
        _2155 = (((_2217 * cbLight._m0[_2166].z) * _2230) * _2231) + _2045;
    }
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    float _2374;
    float _2376;
    if (_1688.y == 0u)
    {
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2306;
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2306;
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2306;
        uvec4 _2321 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2322 = _2321.x;
        uint _2333 = uint((float(_2321.y) * floor(float(uint(cbSceneParam._m0[85u].y * _557) / _2322))) + floor(float(uint(cbSceneParam._m0[85u].x * _556) / _2322)));
        float _2343 = (log2(_2309 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2344 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        uint _2347 = uint(isnan(14.0) ? _2344 : (isnan(_2344) ? 14.0 : min(_2344, 14.0)));
        uvec4 _2352 = texelFetch(g_lightClusterGridBuffer, int(((_2347 << 2u) + (_2333 << 6u)) >> 2u));
        uint _2353 = _2352.x;
        uint _2354 = _2321.z;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        if (((((1u << ((_2354 >> 4u) & 15u)) + 4294967295u) & _2353) == 0u) || ((_2354 & 240u) == 0u))
        {
            _2454 = 0.0;
            _2456 = 0.0;
            _2458 = 0.0;
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
        }
        else
        {
            float _2455;
            float _2457;
            float _2459;
            float _2461;
            float _2463;
            float _2465;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            uint _2613 = 0u;
            uint _2622;
            bool _2623;
            for (;;)
            {
                _2622 = texelFetch(g_lightClassification, int((((_2347 << 5u) + (_2333 << 9u)) + (_2613 << 2u)) >> 2u)).x;
                _2623 = _2622 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2623)
                {
                    frontier_phi_66_pred = _2607;
                    frontier_phi_66_pred_1 = _2612;
                    frontier_phi_66_pred_2 = _2611;
                    frontier_phi_66_pred_3 = _2610;
                    frontier_phi_66_pred_4 = _2609;
                    frontier_phi_66_pred_5 = _2608;
                }
                else
                {
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    uint _2758;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2612;
                    _2758 = _2622;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    for (;;)
                    {
                        uint _2762 = uint(findLSB(_2758)) + (_2613 << 5u);
                        uint _2759 = (_2758 + 4294967295u) & _2758;
                        uint _2764 = _2762 * 48u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 3u)).x));
                        uint _2784 = (_2762 * 48u) + 4u;
                        vec4 _2797 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 3u)).x));
                        uint _2803 = (_2762 * 48u) + 8u;
                        vec3 _2814 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x));
                        float _2818 = _2778.x - _2307;
                        float _2819 = _2778.y - _2308;
                        float _2820 = _2778.z - _2309;
                        float _2821 = dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820));
                        float _2824 = inversesqrt(_2821);
                        float _2825 = _2824 * _2818;
                        float _2826 = _2824 * _2819;
                        float _2827 = _2824 * _2820;
                        float _2828 = dot(vec3(_577, _580, _583), vec3(_2825, _2826, _2827));
                        float _2833 = 1.0 - (_2821 * _2778.w);
                        float _4180 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2834 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                        float _2835 = sqrt(_2821) * _2797.w;
                        float _2838 = 1.39999997615814208984375 / (_2835 + 1.39999997615814208984375);
                        float _2839 = _2838 * _2838;
                        float _2842 = ((1.0 - _2839) * _2828) + _2839;
                        float _2845 = _2835 * _2835;
                        float _2849 = ((isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0))) * _2834) / ((_2845 * 0.699999988079071044921875) + 1.0);
                        float _2853 = (-0.0) - _2307;
                        float _2854 = (-0.0) - _2308;
                        float _2855 = (-0.0) - _2309;
                        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
                        float _2860 = _2859 * _2853;
                        float _2861 = _2859 * _2854;
                        float _2862 = _2859 * _2855;
                        float _2870 = exp2(log2(1.0 / ((_2845 * 3.5) + 5.0)) * 0.25);
                        float _2871 = 1.0 - _637;
                        float _2878 = sqrt(1.0 - ((1.0 - (_2871 * _2871)) * (1.0 - (_2870 * _2870))));
                        float _2879 = _2878 * _2878;
                        float _2880 = _2879 * _2879;
                        float _2881 = _2860 + _2825;
                        float _2882 = _2861 + _2826;
                        float _2883 = _2862 + _2827;
                        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
                        float _2891 = dot(vec3(_577, _580, _583), vec3(_2860, _2861, _2862));
                        float _4196 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2894 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2895 = dot(vec3(_577, _580, _583), vec3(_2887 * _2881, _2887 * _2882, _2887 * _2883));
                        float _4207 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2902 = ((_2898 * _2898) * (_2880 + (-1.0))) + 1.0;
                        float _2903 = _2838 * _2879;
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2828) + _2904;
                        float _4218 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2908 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                        float _2909 = 1.0 - _2879;
                        float _2919 = (0.5 / (((_2908 * ((_2894 * _2909) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2908 * _2909) + _2879) * _2894))) * _2908;
                        float _4229 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2930 = (((_2880 * 3.1415927410125732421875) * (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) / ((_2902 * _2902) * ((_2845 * 2.1991131305694580078125) + 3.141590118408203125))) * _2834;
                        _2682 = (_2849 * _2797.x) + _2755;
                        _2683 = (_2849 * _2797.y) + _2756;
                        _2684 = (_2849 * _2797.z) + _2757;
                        _2679 = (_2930 * _2814.x) + _2752;
                        _2680 = (_2930 * _2814.y) + _2753;
                        _2681 = (_2930 * _2814.z) + _2754;
                        if (_2759 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2684;
                            _2758 = _2759;
                        }
                    }
                    frontier_phi_66_pred = _2679;
                    frontier_phi_66_pred_1 = _2684;
                    frontier_phi_66_pred_2 = _2683;
                    frontier_phi_66_pred_3 = _2682;
                    frontier_phi_66_pred_4 = _2681;
                    frontier_phi_66_pred_5 = _2680;
                }
                _2455 = frontier_phi_66_pred;
                _2465 = frontier_phi_66_pred_1;
                _2463 = frontier_phi_66_pred_2;
                _2461 = frontier_phi_66_pred_3;
                _2459 = frontier_phi_66_pred_4;
                _2457 = frontier_phi_66_pred_5;
                uint _2614 = _2613 + 1u;
                if (_2614 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2607 = _2455;
                    _2608 = _2457;
                    _2609 = _2459;
                    _2610 = _2461;
                    _2611 = _2463;
                    _2612 = _2465;
                    _2613 = _2614;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2454 = _2455;
            _2456 = _2457;
            _2458 = _2459;
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
        }
        uvec4 _2468 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2469 = _2468.z;
        uint _2471 = (_2469 >> 8u) & 15u;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        if (((4294967295u << _2471) & _2353) == 0u)
        {
            _2575 = _2454;
            _2577 = _2456;
            _2579 = _2458;
            _2581 = _2460;
            _2583 = _2462;
            _2585 = _2464;
        }
        else
        {
            float _2600 = inversesqrt(dot(vec3(_2307, _2308, _2309), vec3(_2307, _2308, _2309)));
            float _2601 = _2600 * _2307;
            float _2602 = _2600 * _2308;
            float _2603 = _2600 * _2309;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2471 < ((_2469 >> 12u) & 15u))
            {
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2735 = _2454;
                float _2736 = _2456;
                float _2737 = _2458;
                float _2738 = _2460;
                float _2739 = _2462;
                float _2740 = _2464;
                uint _2741 = _2471;
                uint _2750;
                bool _2751;
                for (;;)
                {
                    _2750 = texelFetch(g_lightClassification, int((((_2347 << 5u) + (_2333 << 9u)) + (_2741 << 2u)) >> 2u)).x;
                    _2751 = _2750 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2751)
                    {
                        frontier_phi_77_pred = _2740;
                        frontier_phi_77_pred_1 = _2739;
                        frontier_phi_77_pred_2 = _2738;
                        frontier_phi_77_pred_3 = _2737;
                        frontier_phi_77_pred_4 = _2736;
                        frontier_phi_77_pred_5 = _2735;
                    }
                    else
                    {
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        float _2959 = _2737;
                        float _2960 = _2738;
                        float _2961 = _2739;
                        float _2962 = _2740;
                        uint _2963 = _2750;
                        uint _2964;
                        vec4 _2989;
                        float _2990;
                        vec4 _3005;
                        vec3 _3017;
                        vec4 _3033;
                        vec4 _3048;
                        float _3094;
                        bool _3095;
                        for (;;)
                        {
                            uint _2974 = ((_2741 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2963));
                            _2964 = (_2963 + 4294967295u) & _2963;
                            uint _2976 = _2974 * 40u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            _2990 = _2989.w;
                            uint _2992 = (_2974 * 40u) + 4u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3007 = (_2974 * 40u) + 8u;
                            _3017 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x));
                            uint _3020 = (_2974 * 40u) + 16u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3035 = (_2974 * 40u) + 20u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3050 = (_2974 * 40u) + 24u;
                            vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3069 = (_2974 * 40u) + 28u;
                            vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            _3094 = fma(_2309, _3082.z, fma(_2308, _3082.y, _3082.x * _2307)) + _3082.w;
                            _3095 = !((fma(_2309, _3063.z, fma(_2308, _3063.y, _3063.x * _2307)) + _3063.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3095)
                            {
                                float _3122 = _2989.x - _2307;
                                float _3123 = _2989.y - _2308;
                                float _3124 = _2989.z - _2309;
                                float _3125 = dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124));
                                float _3128 = inversesqrt(_3125);
                                float _3129 = _3128 * _3122;
                                float _3130 = _3128 * _3123;
                                float _3131 = _3128 * _3124;
                                float _3135 = 1.0 - (_3125 / (_2990 * _2990));
                                float _4240 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3140 = sqrt(_3125) * _3005.w;
                                float _3142 = 1.39999997615814208984375 / (_3140 + 1.39999997615814208984375);
                                float _3143 = _3142 * _3142;
                                float _3146 = ((1.0 - _3143) * dot(vec3(_3129, _3130, _3131), vec3(_577, _580, _583))) + _3143;
                                float _3149 = _3140 * _3140;
                                float _3153 = (fma(_2309, _3033.z, fma(_2308, _3033.y, _3033.x * _2307)) + _3033.w) / _3094;
                                float _3154 = (fma(_2309, _3048.z, fma(_2308, _3048.y, _3048.x * _2307)) + _3048.w) / _3094;
                                float _3158 = 1.0 - dot(vec2(_3153, _3154), vec2(_3153, _3154));
                                float _4256 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3160 = _3159 * (((isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))) * _3136) / ((_3149 * 0.699999988079071044921875) + 1.0));
                                float _3172 = exp2(log2(1.0 / ((_3149 * 3.5) + 5.0)) * 0.25);
                                float _3173 = 1.0 - _637;
                                float _3180 = sqrt(1.0 - ((1.0 - (_3173 * _3173)) * (1.0 - (_3172 * _3172))));
                                float _3181 = _3180 * _3180;
                                float _3182 = _3181 * _3181;
                                float _3183 = _3129 - _2601;
                                float _3184 = _3130 - _2602;
                                float _3185 = _3131 - _2603;
                                float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                                float _3193 = dot(vec3(_577, _580, _583), vec3((-0.0) - _2601, (-0.0) - _2602, (-0.0) - _2603));
                                float _4267 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3197 = dot(vec3(_577, _580, _583), vec3(_3189 * _3183, _3189 * _3184, _3189 * _3185));
                                float _4278 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3200 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3204 = ((_3200 * _3200) * (_3182 + (-1.0))) + 1.0;
                                float _3205 = _3142 * _3181;
                                float _3206 = _3205 * _3205;
                                float _3212 = ((1.0 - _3206) * dot(vec3(_577, _580, _583), vec3(_3129, _3130, _3131))) + _3206;
                                float _4289 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3214 = 1.0 - _3181;
                                float _3224 = (0.5 / (((_3213 * ((_3196 * _3214) + _3181)) + 9.9999999392252902907785028219223e-09) + (((_3213 * _3214) + _3181) * _3196))) * _3213;
                                float _4300 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3234 = (_3159 * _3136) * (((_3182 * 3.1415927410125732421875) * (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0)))) / ((_3204 * _3204) * ((_3149 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3160 * _3005.y;
                                frontier_phi_83_pred_1 = _3160 * _3005.x;
                                frontier_phi_83_pred_2 = _3234 * _3017.z;
                                frontier_phi_83_pred_3 = _3234 * _3017.y;
                                frontier_phi_83_pred_4 = _3234 * _3017.x;
                                frontier_phi_83_pred_5 = _3160 * _3005.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3242 = frontier_phi_83_pred;
                            _3241 = frontier_phi_83_pred_1;
                            _3240 = frontier_phi_83_pred_2;
                            _3239 = frontier_phi_83_pred_3;
                            _3238 = frontier_phi_83_pred_4;
                            _3243 = frontier_phi_83_pred_5;
                            _2947 = _3241 + _2960;
                            _2948 = _3242 + _2961;
                            _2949 = _3243 + _2962;
                            _2944 = _3238 + _2957;
                            _2945 = _3239 + _2958;
                            _2946 = _3240 + _2959;
                            if (_2964 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2964;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2949;
                        frontier_phi_77_pred_1 = _2948;
                        frontier_phi_77_pred_2 = _2947;
                        frontier_phi_77_pred_3 = _2946;
                        frontier_phi_77_pred_4 = _2945;
                        frontier_phi_77_pred_5 = _2944;
                    }
                    _2586 = frontier_phi_77_pred;
                    _2584 = frontier_phi_77_pred_1;
                    _2582 = frontier_phi_77_pred_2;
                    _2580 = frontier_phi_77_pred_3;
                    _2578 = frontier_phi_77_pred_4;
                    _2576 = frontier_phi_77_pred_5;
                    uint _2742 = _2741 + 1u;
                    if (_2742 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2735 = _2576;
                        _2736 = _2578;
                        _2737 = _2580;
                        _2738 = _2582;
                        _2739 = _2584;
                        _2740 = _2586;
                        _2741 = _2742;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2580;
                frontier_phi_58_59_ladder_1 = _2586;
                frontier_phi_58_59_ladder_2 = _2584;
                frontier_phi_58_59_ladder_3 = _2582;
                frontier_phi_58_59_ladder_4 = _2578;
                frontier_phi_58_59_ladder_5 = _2576;
            }
            else
            {
                frontier_phi_58_59_ladder = _2458;
                frontier_phi_58_59_ladder_1 = _2464;
                frontier_phi_58_59_ladder_2 = _2462;
                frontier_phi_58_59_ladder_3 = _2460;
                frontier_phi_58_59_ladder_4 = _2456;
                frontier_phi_58_59_ladder_5 = _2454;
            }
            _2575 = frontier_phi_58_59_ladder_5;
            _2577 = frontier_phi_58_59_ladder_4;
            _2579 = frontier_phi_58_59_ladder;
            _2581 = frontier_phi_58_59_ladder_3;
            _2583 = frontier_phi_58_59_ladder_2;
            _2585 = frontier_phi_58_59_ladder_1;
        }
        float _2590 = isnan(1.0) ? _621 : (isnan(_621) ? 1.0 : min(_621, 1.0));
        _2366 = (_2590 * _2581) + _1821;
        _2368 = (_2590 * _2583) + _1823;
        _2370 = (_2590 * _2585) + _1825;
        _2372 = ((_2575 * 0.039999999105930328369140625) * _2590) + _2151;
        _2374 = ((_2577 * 0.039999999105930328369140625) * _2590) + _2153;
        _2376 = ((_2579 * 0.039999999105930328369140625) * _2590) + _2155;
    }
    else
    {
        _2366 = _1821;
        _2368 = _1823;
        _2370 = _1825;
        _2372 = _2151;
        _2374 = _2153;
        _2376 = _2155;
    }
    float _4316 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4327 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4338 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _2393 = ((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2366 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _621))) + ((_2372 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1458)) * cbPerFrame._m0[3u].x);
    float _2394 = ((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2368 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _621))) + ((_2374 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1458)) * cbPerFrame._m0[3u].x);
    float _2395 = ((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2370 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _621))) + ((_2376 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1458)) * cbPerFrame._m0[3u].x);
    uint _2396 = _228 + 6u;
    float _2404 = _556 / cbSceneParam._m0[86u].x;
    float _2405 = _557 / cbSceneParam._m0[86u].y;
    vec4 _2419 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, (log2((isnan(cbSceneParam._m0[77u].w) ? _477 : (isnan(_477) ? cbSceneParam._m0[77u].w : min(_477, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2421 = _2419.x;
    float _2422 = _2419.y;
    float _2423 = _2419.z;
    float _2424 = _2419.w;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_477 > cbSceneParam._m0[78u].w)
    {
        float _2479 = isnan(_477) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _477 : min(cbSceneParam._m0[80u].w, _477));
        float _2480 = _2479 / _477;
        float _2491 = _2480 * _528;
        float _2492 = _529 * _2480;
        float _2493 = (-0.0) - _2492;
        float _2495 = _2480 * _530;
        float _2497 = (cbSceneParam._m0[77u].w * _2493) / _2479;
        float _2498 = _2497 + cbSceneParam._m0[79u].w;
        float _2499 = cbSceneParam._m0[79u].w - _2492;
        float _2505 = sqrt(((_2491 * _2491) + (_2492 * _2492)) + (_2495 * _2495));
        float _2508 = (1.0 - (cbSceneParam._m0[77u].w / _2479)) * _2505;
        float _2513 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2515 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2692;
        if (abs((_2493 - _2497) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2692 = ((((_2498 > 0.0) ? exp2(_2513 * _2498) : (2.0 - exp2(_2515 * _2498))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2508;
        }
        else
        {
            float _2636 = 1.0 / cbSceneParam._m0[80u].x;
            float _2637 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : max(_2498, _2499));
            float _2638 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : min(_2498, _2499));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            _2692 = ((abs(_2505 / _2493) * cbSceneParam._m0[80u].y) * ((((_2647 - _2648) * 2.0) - ((exp2(_2513 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0)))) - exp2(_2513 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0))))) * _2636)) - ((exp2(_2515 * _2647) - exp2(_2515 * _2648)) * _2636))) + (_2508 * cbSceneParam._m0[80u].z);
        }
        vec4 _2694 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2404, _2405, 1.0), 0.0);
        float _2703 = exp2((_2692 * (-1.44269502162933349609375)) * (1.0 - _2694.w));
        float _2704 = log2(_2703);
        float _2720 = log2(_2424);
        _2517 = (exp2(_2720 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].x)) * _2694.x) / cbSceneParam._m0[78u].x)) + _2421;
        _2519 = (exp2(_2720 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].y)) * _2694.y) / cbSceneParam._m0[78u].y)) + _2422;
        _2521 = (exp2(_2720 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].z)) * _2694.z) / cbSceneParam._m0[78u].z)) + _2423;
        _2523 = _2703 * _2424;
    }
    else
    {
        _2517 = _2421;
        _2519 = _2422;
        _2521 = _2423;
        _2523 = _2424;
    }
    bool _2730;
    vec4 _2533;
    vec4 _2555;
    float _2557;
    float _2561;
    float _2562;
    float _2563;
    float _2564;
    bool _2574;
    for (;;)
    {
        _2533 = cbMatDynParam._m0[0u];
        float _2535 = roundEven(_2533.y);
        bool _2536 = _2535 == 3.0;
        float _2537 = log2(_2523);
        float _2544 = exp2(_2537 * cbSceneParam._m0[78u].x) * _2393;
        float _2545 = exp2(_2537 * cbSceneParam._m0[78u].y) * _2394;
        float _2546 = exp2(_2537 * cbSceneParam._m0[78u].z) * _2395;
        float _2553 = _544 + (-0.5);
        _2555 = cbMtdParam._m0[1u];
        _2557 = _2555.y * _2553;
        float _2560 = (_2535 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2561 = _2560 * (_2536 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2517)));
        _2562 = _2560 * (_2536 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2519)));
        _2563 = _2560 * (_2536 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2521)));
        _2564 = _2553 * 0.999000012874603271484375;
        _2574 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2574)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2564) < 0.5)
            {
                _2730 = true;
                break;
            }
        }
        uint _2671 = _596 + uint(_2533.w);
        if ((cbInstanceData._m0[_2671].w < 1.0) && ((cbInstanceData._m0[_2671].w + _2564) < 0.5))
        {
            _2730 = true;
            break;
        }
        if ((_2557 + 1.0) < _2555.x)
        {
            _2730 = true;
            break;
        }
        _2730 = false;
        break;
    }
    float _2935;
    if (_2730)
    {
        discard_state = true;
        _2935 = 0.0;
    }
    else
    {
        _2935 = cbInstanceData._m0[_2396].w;
    }
    SV_Target.x = _2561;
    SV_Target.y = _2562;
    SV_Target.z = _2563;
    SV_Target.w = _2935;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2396].w;
    discard_exit();
}


