#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1054;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3364 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3375 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3386 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _276) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _277) + cbTextureTilingScale._m0[13u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _318 = _313.x * cbMtdParam._m0[9u].x;
    float _319 = _313.y * cbMtdParam._m0[9u].y;
    float _320 = _313.z * cbMtdParam._m0[9u].z;
    float _324 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _290.x) * _318;
    float _327 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _290.y) * _319;
    float _330 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _290.z) * _320;
    float _337 = ((_318 - _324) * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) + _324;
    float _338 = ((_319 - _327) * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) + _327;
    float _339 = ((_320 - _330) * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) + _330;
    vec4 _352 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _276) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _277) + cbTextureTilingScale._m0[20u].w));
    vec4 _378 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _382 = _378.z;
    float _386 = (_378.x * 2.0) + (-1.0);
    float _387 = (_378.y * 2.0) + (-1.0);
    float _388 = dot(vec2(_386, _387), vec2(_386, _387));
    float _3397 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _393 = sqrt(1.0 - (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))));
    float _398 = _386 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_352.x * 2.0) + (-1.0)));
    float _399 = _387 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_352.y * 2.0) + (-1.0)));
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _414 = _412.x;
    float _415 = 1.0 - _414;
    float _446 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_414 - _415) * cbMtdParam._m0[24u].w) + _415) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3408 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _455 = ((((cbMtdParam._m0[10u].x - _337) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _447) + _337;
    float _456 = ((((cbMtdParam._m0[10u].y - _338) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _447) + _338;
    float _457 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _339)) * _447) + _339;
    float _462 = (((_352.z - _382) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _382;
    float _466 = ((cbMtdParam._m0[23u].y - _462) * _447) + _462;
    vec4 _488 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _494 = (_488.x * 2.0) + (-1.0);
    float _495 = (_488.y * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3419 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _512 = (_447 * (((cbMtdParam._m0[22u].z * _398) - _398) + _494)) + _398;
    float _513 = (_447 * (((cbMtdParam._m0[22u].z * _399) - _399) + _495)) + _399;
    float _514 = (_447 * (sqrt(1.0 - (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) - _393)) + _393;
    float _516 = cbMtdParam._m0[22u].x + _378.w;
    float _519 = fma(_514, _225 * NORMAL.x, fma(_513, _232 * TANGENT.x, (_218 * _210) * _512));
    float _522 = fma(_514, _225 * NORMAL.y, fma(_513, _232 * TANGENT.y, (_218 * _211) * _512));
    float _525 = fma(_514, _225 * NORMAL.z, fma(_513, _232 * TANGENT.z, (_218 * _212) * _512));
    float _529 = inversesqrt(dot(vec3(_519, _522, _525), vec3(_519, _522, _525)));
    float _530 = _529 * _519;
    float _531 = _529 * _522;
    float _532 = _529 * _525;
    float _3430 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _533 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _3452 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _3463 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3474 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _551 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _592 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _602 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _592);
    float _603 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _592);
    float _604 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _592);
    float _608 = inversesqrt(dot(vec3(_602, _603, _604), vec3(_602, _603, _604)));
    float _609 = _602 * _608;
    float _610 = _603 * _608;
    float _611 = _604 * _608;
    float _617 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _618 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _639 = fma(_532, cbSceneParam._m0[5u].z, fma(_531, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _530));
    float _642 = fma(_532, cbSceneParam._m0[6u].z, fma(_531, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _530));
    float _645 = fma(_532, cbSceneParam._m0[7u].z, fma(_531, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _530));
    uint _659 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _665 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_659].x;
    float _666 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_659].y;
    float _667 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_659].z;
    float _3485 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _669 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _670 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _617, cbSceneParam._m0[86u].y * _618));
    float _683 = ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * TEXCOORD_5.w) * _679.x;
    float _684 = dot(vec3(_530, _531, _532), vec3(_609, _610, _611));
    float _687 = _684 * 2.0;
    float _691 = (_687 * _530) - _609;
    float _692 = (_687 * _531) - _610;
    float _693 = (_687 * _532) - _611;
    float _697 = abs(dot(vec3(_609, _610, _611), vec3(_530, _531, _532)));
    float _3518 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _699 = sqrt(_533);
    float _712 = exp2((_699 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_699 * 3.0));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1053;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _778 = fma(_752, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744));
        float _782 = fma(_752, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744));
        float _786 = fma(_752, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744));
        float _811 = _744 + _530;
        float _812 = _748 + _531;
        float _813 = _752 + _532;
        float _823 = fma(_813, cbModelParam._m0[26u].z, fma(_812, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _811)) - _778;
        float _824 = fma(_813, cbModelParam._m0[27u].z, fma(_812, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _811)) - _782;
        float _825 = fma(_813, cbModelParam._m0[28u].z, fma(_812, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _811)) - _786;
        float _829 = inversesqrt(dot(vec3(_823, _824, _825), vec3(_823, _824, _825)));
        float _842 = ((_829 * _823) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_778 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _843 = ((_829 * _824) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_782 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _844 = ((_829 * _825) / cbModelParam._m0[34u].z) + ((((((_786 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_842, _843, _844), 0.0);
        float _881 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_847.x + (-0.5));
        float _883 = _881 * (_847.y + (-0.5));
        float _884 = _881 * (_847.z + (-0.5));
        float _891 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_854.x + (-0.5));
        float _893 = _891 * (_854.y + (-0.5));
        float _894 = _891 * (_854.z + (-0.5));
        float _901 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_861.x + (-0.5));
        float _903 = _901 * (_861.y + (-0.5));
        float _904 = _901 * (_861.z + (-0.5));
        float _911 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_868.x + (-0.5));
        float _913 = _911 * (_868.y + (-0.5));
        float _914 = _911 * (_868.z + (-0.5));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _917 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _918 = _882 * 0.5;
        float _919 = _892 * 0.5;
        float _920 = _902 * 0.5;
        float _921 = dot(vec3(_918, _919, _920), vec3(_918, _919, _920));
        float _926 = (_921 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_921);
        float _935 = (dot(vec3(_530, _531, _532), vec3(_926 * _918, _926 * _919, _926 * _920)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _945 = sqrt(((_919 * _919) + (_918 * _918)) + (_920 * _920)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _947 = _946 * 2.0;
        float _951 = (1.0 - _946) / (_946 + 1.0);
        float _3566 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _961 = ((((1.0 - _952) * (_947 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_947 + 1.0))) + _952) * _915;
        float _962 = _883 * 0.5;
        float _963 = _893 * 0.5;
        float _964 = _903 * 0.5;
        float _965 = dot(vec3(_962, _963, _964), vec3(_962, _963, _964));
        float _970 = (_965 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_965);
        float _978 = (dot(vec3(_530, _531, _532), vec3(_970 * _962, _970 * _963, _970 * _964)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _987 = sqrt(((_963 * _963) + (_962 * _962)) + (_964 * _964)) / (_916 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _989 = _988 * 2.0;
        float _993 = (1.0 - _988) / (_988 + 1.0);
        float _3599 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1003 = ((((1.0 - _994) * (_989 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_989 + 1.0))) + _994) * _916;
        float _1004 = _884 * 0.5;
        float _1005 = _894 * 0.5;
        float _1006 = _904 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1020 = (dot(vec3(_530, _531, _532), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1029 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_917 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1031 = _1030 * 2.0;
        float _1035 = (1.0 - _1030) / (_1030 + 1.0);
        float _3632 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1045 = ((((1.0 - _1036) * (_1031 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1031 + 1.0))) + _1036) * _917;
        _1053 = _884;
        _1055 = _883;
        _1056 = _882;
        _1057 = _894;
        _1058 = _893;
        _1059 = _892;
        _1060 = _904;
        _1061 = _903;
        _1062 = _902;
        _1063 = _917;
        _1064 = _916;
        _1065 = _915;
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0)));
        _1067 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0)));
        _1068 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0)));
    }
    else
    {
        _1053 = _1054;
        _1055 = _1054;
        _1056 = _1054;
        _1057 = _1054;
        _1058 = _1054;
        _1059 = _1054;
        _1060 = _1054;
        _1061 = _1054;
        _1062 = _1054;
        _1063 = _1054;
        _1064 = _1054;
        _1065 = _1054;
        _1066 = 0.0;
        _1067 = 0.0;
        _1068 = 0.0;
    }
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1093 = fma(_752, cbModelParam._m0[30u].z, fma(_748, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744));
        float _1097 = fma(_752, cbModelParam._m0[31u].z, fma(_748, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744));
        float _1101 = fma(_752, cbModelParam._m0[32u].z, fma(_748, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744));
        float _1124 = _744 + _530;
        float _1125 = _748 + _531;
        float _1126 = _752 + _532;
        float _1136 = fma(_1126, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1124)) - _1093;
        float _1137 = fma(_1126, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1124)) - _1097;
        float _1138 = fma(_1126, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1124)) - _1101;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1093 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1097 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[35u].z) + ((((((_1101 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1192 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1159.x + (-0.5));
        float _1194 = _1192 * (_1159.y + (-0.5));
        float _1195 = _1192 * (_1159.z + (-0.5));
        float _1202 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1166.x + (-0.5));
        float _1204 = _1202 * (_1166.y + (-0.5));
        float _1205 = _1202 * (_1166.z + (-0.5));
        float _1212 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1173.x + (-0.5));
        float _1214 = _1212 * (_1173.y + (-0.5));
        float _1215 = _1212 * (_1173.z + (-0.5));
        float _1222 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1180.x + (-0.5));
        float _1224 = _1222 * (_1180.y + (-0.5));
        float _1225 = _1222 * (_1180.z + (-0.5));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = _1193 * 0.5;
        float _1230 = _1203 * 0.5;
        float _1231 = _1213 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_530, _531, _532), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3695 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1256 + 1.0))) + _1261) * _1226;
        float _1271 = _1194 * 0.5;
        float _1272 = _1204 * 0.5;
        float _1273 = _1214 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_530, _531, _532), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3728 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1298 + 1.0))) + _1303) * _1227;
        float _1313 = _1195 * 0.5;
        float _1314 = _1205 * 0.5;
        float _1315 = _1215 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_530, _531, _532), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3761 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1340 + 1.0))) + _1345) * _1228;
        _1362 = _1195;
        _1363 = _1194;
        _1364 = _1193;
        _1365 = _1205;
        _1366 = _1204;
        _1367 = _1203;
        _1368 = _1215;
        _1369 = _1214;
        _1370 = _1213;
        _1371 = _1228;
        _1372 = _1227;
        _1373 = _1226;
        _1374 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1375 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1376 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1054;
        _1363 = _1054;
        _1364 = _1054;
        _1365 = _1054;
        _1366 = _1054;
        _1367 = _1054;
        _1368 = _1054;
        _1369 = _1054;
        _1370 = _1054;
        _1371 = _1054;
        _1372 = _1054;
        _1373 = _1054;
        _1374 = 0.0;
        _1375 = 0.0;
        _1376 = 0.0;
    }
    float _1386 = (cbModelParam._m0[1u].x * (_1374 - _1066)) + _1066;
    float _1387 = (cbModelParam._m0[1u].x * (_1375 - _1067)) + _1067;
    float _1388 = (cbModelParam._m0[1u].x * (_1376 - _1068)) + _1068;
    float _1409 = fma(_1388, cbSceneParam._m0[89u].z, fma(_1387, cbSceneParam._m0[89u].y, _1386 * cbSceneParam._m0[89u].x));
    float _1412 = fma(_1388, cbSceneParam._m0[90u].z, fma(_1387, cbSceneParam._m0[90u].y, _1386 * cbSceneParam._m0[90u].x));
    float _1415 = fma(_1388, cbSceneParam._m0[91u].z, fma(_1387, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1386));
    float _1430 = _691 * 0.5;
    float _1431 = _692 * 0.5;
    float _1432 = _693 * 0.5;
    float _1433 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1364, _1367, _1370, _1373));
    float _1436 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1363, _1366, _1369, _1372));
    float _1439 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1362, _1365, _1368, _1371));
    float _1473;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1446 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1053, _1057, _1060, _1063));
        float _1450 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1055, _1058, _1061, _1064));
        float _1454 = dot(vec4(_1430, _1431, _1432, 1.0), vec4(_1056, _1059, _1062, _1065));
        float _1461 = dot(vec4(cbModelParam._m0[39u]), vec4(_1430, _1431, _1432, 1.0));
        _1473 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1461) ? 0.0 : (isnan(0.0) ? _1461 : max(0.0, _1461))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1473 = 1.0;
    }
    float _1484;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1475 = dot(vec4(cbModelParam._m0[40u]), vec4(_1430, _1431, _1432, 1.0));
        _1484 = dot(vec3(isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1475) ? 0.0 : (isnan(0.0) ? _1475 : max(0.0, _1475))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1484 = 1.0;
    }
    float _1488 = (_1484 * cbModelParam._m0[1u].x) + (_1473 * (1.0 - cbModelParam._m0[1u].x));
    float _1498 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _533);
    float _1499 = isnan(_1498) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1498 : min(cbModelParam._m0[25u].z, _1498));
    float _1581;
    float _1583;
    float _1585;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1548 = fma(_752, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744)) + cbModelParam._m0[13u].w;
        float _1552 = fma(_752, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744)) + cbModelParam._m0[14u].w;
        float _1556 = fma(_752, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744)) + cbModelParam._m0[15u].w;
        float _1559 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1562 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1565 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1593;
        if (_1559 > 0.0)
        {
            _1593 = abs((1.0 - _1548) / _1559);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1548 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1593 = frontier_phi_14_12_ladder;
        }
        float _1797;
        if (_1562 > 0.0)
        {
            _1797 = abs((1.0 - _1552) / _1562);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1562 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1552 + 1.0) / _1562);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1797 = frontier_phi_23_19_ladder;
        }
        float _2040;
        if (_1565 > 0.0)
        {
            _2040 = abs((1.0 - _1556) / _1565);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1556 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2040 = frontier_phi_35_30_ladder;
        }
        float _2042 = isnan(_1797) ? _1593 : (isnan(_1593) ? _1797 : min(_1593, _1797));
        float _2043 = isnan(_2040) ? _2042 : (isnan(_2042) ? _2040 : min(_2042, _2040));
        float _2047 = (_2043 * _1559) + _1548;
        float _2048 = (_2043 * _1562) + _1552;
        float _2049 = (_2043 * _1565) + _1556;
        float _2050 = _2043 * 9.9999997473787516355514526367188e-05;
        float _2052 = (-1.0) - _2050;
        float _2054 = _2050 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2049 > _2054) || ((_2049 < _2052) || ((_2048 > _2054) || ((_2048 < _2052) || ((_2047 < _2052) || (_2047 > _2054))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2173 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2049, cbModelParam._m0[9u].z, fma(_2048, cbModelParam._m0[9u].y, _2047 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2049, cbModelParam._m0[10u].z, fma(_2048, cbModelParam._m0[10u].y, _2047 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2049, cbModelParam._m0[11u].z, fma(_2048, cbModelParam._m0[11u].y, _2047 * cbModelParam._m0[11u].x))), _1499);
            frontier_phi_13_35_ladder = _2173.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2173.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2173.x * cbModelParam._m0[1u].y;
        }
        _1581 = frontier_phi_13_35_ladder_2;
        _1583 = frontier_phi_13_35_ladder_1;
        _1585 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1569 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1499);
        _1581 = _1569.x * cbModelParam._m0[1u].y;
        _1583 = _1569.y * cbModelParam._m0[1u].y;
        _1585 = _1569.z * cbModelParam._m0[1u].y;
    }
    float _1589 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _533);
    float _1590 = isnan(_1589) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1589 : min(cbModelParam._m0[25u].w, _1589));
    float _1681;
    float _1683;
    float _1685;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1645 = fma(_752, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744)) + cbModelParam._m0[21u].w;
        float _1649 = fma(_752, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744)) + cbModelParam._m0[22u].w;
        float _1653 = fma(_752, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744)) + cbModelParam._m0[23u].w;
        float _1656 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1659 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1662 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1802;
        if (_1656 > 0.0)
        {
            _1802 = abs((1.0 - _1645) / _1656);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1645 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1802 = frontier_phi_25_21_ladder;
        }
        float _2067;
        if (_1659 > 0.0)
        {
            _2067 = abs((1.0 - _1649) / _1659);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1649 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2067 = frontier_phi_37_32_ladder;
        }
        float _2272;
        if (_1662 > 0.0)
        {
            _2272 = abs((1.0 - _1653) / _1662);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1653 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2272 = frontier_phi_46_43_ladder;
        }
        float _2274 = isnan(_2067) ? _1802 : (isnan(_1802) ? _2067 : min(_1802, _2067));
        float _2275 = isnan(_2272) ? _2274 : (isnan(_2274) ? _2272 : min(_2274, _2272));
        float _2279 = (_2275 * _1656) + _1645;
        float _2280 = (_2275 * _1659) + _1649;
        float _2281 = (_2275 * _1662) + _1653;
        float _2282 = _2275 * 9.9999997473787516355514526367188e-05;
        float _2283 = (-1.0) - _2282;
        float _2285 = _2282 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2281 > _2285) || ((_2281 < _2283) || ((_2280 > _2285) || ((_2280 < _2283) || ((_2279 < _2283) || (_2279 > _2285))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2480 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2281, cbModelParam._m0[17u].z, fma(_2280, cbModelParam._m0[17u].y, _2279 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2281, cbModelParam._m0[18u].z, fma(_2280, cbModelParam._m0[18u].y, _2279 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2281, cbModelParam._m0[19u].z, fma(_2280, cbModelParam._m0[19u].y, _2279 * cbModelParam._m0[19u].x))), _1590);
            frontier_phi_22_46_ladder = _2480.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2480.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2480.x * cbModelParam._m0[1u].z;
        }
        _1681 = frontier_phi_22_46_ladder_2;
        _1683 = frontier_phi_22_46_ladder_1;
        _1685 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1665 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1590);
        _1681 = _1665.x * cbModelParam._m0[1u].z;
        _1683 = _1665.y * cbModelParam._m0[1u].z;
        _1685 = _1665.z * cbModelParam._m0[1u].z;
    }
    float _1697 = ((((1.0 - _712) * ((_699 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_712 * _699)) * _683;
    float _1698 = _1697 * ((cbModelParam._m0[1u].w * (_1681 - _1581)) + _1581);
    float _1699 = _1697 * ((cbModelParam._m0[1u].w * (_1683 - _1583)) + _1583);
    float _1700 = _1697 * ((cbModelParam._m0[1u].w * (_1685 - _1585)) + _1585);
    float _1703 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, _1698 * cbSceneParam._m0[91u].x));
    uvec4 _1719 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _1721 = _1719.x * 14u;
    uint _1722 = _1721 + 13u;
    float _1729 = _683 + (-1.0);
    float _1734 = (cbLight._m0[_1722].x * _1729) + 1.0;
    float _1735 = (cbLight._m0[_1722].y * _1729) + 1.0;
    float _1736 = (cbLight._m0[_1722].z * _1729) + 1.0;
    float _1737 = (cbLight._m0[_1722].w * _1729) + 1.0;
    uint _1738 = _1721 + 5u;
    float _1744 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
    uint _1748 = _1721 + 4u;
    float _1755 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    uint _1759 = _1721 | 1u;
    float _1770 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_530, _531, _532));
    float _1773 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_530, _531, _532));
    float _3897 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _3908 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1778 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
    float _1780 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1787 = ((cbLight._m0[_1738].x * _1744) * _1780) + ((cbLight._m0[_1748].x * _1755) * _1778);
    float _1788 = ((_1744 * cbLight._m0[_1738].y) * _1780) + ((_1755 * cbLight._m0[_1748].y) * _1778);
    float _1789 = ((_1744 * cbLight._m0[_1738].z) * _1780) + ((_1755 * cbLight._m0[_1748].z) * _1778);
    uvec4 _1794 = floatBitsToUint(cbLight._m0[_1721 + 12u]);
    bool _1796 = _1794.x == 0u;
    float _1807;
    float _1809;
    float _1811;
    if (_1796)
    {
        _1807 = _1787;
        _1809 = _1788;
        _1811 = _1789;
    }
    else
    {
        uint _1815 = _1721 + 6u;
        float _1831 = (dot(vec3(cbLight._m0[_1721 + 2u].xyz), vec3(_530, _531, _532)) * 0.5) + 0.5;
        float _1832 = _1831 * _1831;
        float _3919 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1833 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1834 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _1807 = (((cbLight._m0[_1815].x * 0.3183098733425140380859375) * _1833) * _1834) + _1787;
        _1809 = (((cbLight._m0[_1815].y * 0.3183098733425140380859375) * _1833) * _1834) + _1788;
        _1811 = (((cbLight._m0[_1815].z * 0.3183098733425140380859375) * _1833) * _1834) + _1789;
    }
    bool _1814 = _1794.y == 0u;
    float _1852;
    float _1854;
    float _1856;
    if (_1814)
    {
        _1852 = _1807;
        _1854 = _1809;
        _1856 = _1811;
    }
    else
    {
        uint _2011 = _1721 + 7u;
        float _2027 = (dot(vec3(cbLight._m0[_1721 + 3u].xyz), vec3(_530, _531, _532)) * 0.5) + 0.5;
        float _2028 = _2027 * _2027;
        float _3935 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2029 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _2030 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _1852 = (((cbLight._m0[_2011].x * 0.3183098733425140380859375) * _2029) * _2030) + _1807;
        _1854 = (((cbLight._m0[_2011].y * 0.3183098733425140380859375) * _2029) * _2030) + _1809;
        _1856 = (((cbLight._m0[_2011].z * 0.3183098733425140380859375) * _2029) * _2030) + _1811;
    }
    uint _1859 = _1721 + 8u;
    float _1872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1721].w)) * _533) * 0.949999988079071044921875);
    float _1873 = _1872 * _1872;
    float _1874 = cbLight._m0[_1721].x + _609;
    float _1875 = cbLight._m0[_1721].y + _610;
    float _1876 = cbLight._m0[_1721].z + _611;
    float _1880 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
    float _1881 = _1880 * _1874;
    float _1882 = _1880 * _1875;
    float _1883 = _1880 * _1876;
    float _1884 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_1721].xyz));
    float _3951 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _1888 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1889 = dot(vec3(_530, _531, _532), vec3(_1881, _1882, _1883));
    float _3973 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1892 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1893 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_1881, _1882, _1883));
    float _3984 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1897 = _1873 * _1873;
    float _1901 = ((_1892 * _1892) * (_1897 + (-1.0))) + 1.0;
    float _1912 = (exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1913 = 1.0 - _1873;
    float _1924 = (0.5 / (((_1888 * ((_1887 * _1913) + _1873)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _1913) + _1873) * _1887))) * _1887;
    float _3995 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1926 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1897 / ((_1901 * _1901) * 3.141590118408203125));
    uint _1937 = _1721 + 9u;
    float _1948 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _533) * 0.949999988079071044921875);
    float _1949 = _1948 * _1948;
    float _1950 = cbLight._m0[_1759].x + _609;
    float _1951 = cbLight._m0[_1759].y + _610;
    float _1952 = cbLight._m0[_1759].z + _611;
    float _1956 = inversesqrt(dot(vec3(_1950, _1951, _1952), vec3(_1950, _1951, _1952)));
    float _1957 = _1956 * _1950;
    float _1958 = _1956 * _1951;
    float _1959 = _1956 * _1952;
    float _1960 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_1759].xyz));
    float _4006 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1963 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1964 = dot(vec3(_530, _531, _532), vec3(_1957, _1958, _1959));
    float _4017 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1968 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1957, _1958, _1959));
    float _4028 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1972 = _1949 * _1949;
    float _1976 = ((_1967 * _1967) * (_1972 + (-1.0))) + 1.0;
    float _1985 = (exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1986 = 1.0 - _1949;
    float _1996 = (0.5 / (((_1888 * ((_1963 * _1986) + _1949)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _1986) + _1949) * _1963))) * _1963;
    float _4039 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1998 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1972 / ((_1976 * _1976) * 3.141590118408203125));
    float _2008 = (((_1985 * cbLight._m0[_1937].x) * _1998) * _1744) + (((_1912 * cbLight._m0[_1859].x) * _1926) * _1755);
    float _2009 = (((_1985 * cbLight._m0[_1937].y) * _1998) * _1744) + (((_1912 * cbLight._m0[_1859].y) * _1926) * _1755);
    float _2010 = (((_1985 * cbLight._m0[_1937].z) * _1998) * _1744) + (((_1912 * cbLight._m0[_1859].z) * _1926) * _1755);
    float _2072;
    float _2074;
    float _2076;
    if (_1796)
    {
        _2072 = _2008;
        _2074 = _2009;
        _2076 = _2010;
    }
    else
    {
        uint _2078 = _1721 + 2u;
        uint _2082 = _1721 + 10u;
        float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2078].w)) * _533) * 0.949999988079071044921875);
        float _2097 = _2096 * _2096;
        float _2098 = cbLight._m0[_2078].x + _609;
        float _2099 = cbLight._m0[_2078].y + _610;
        float _2100 = cbLight._m0[_2078].z + _611;
        float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
        float _2105 = _2104 * _2098;
        float _2106 = _2104 * _2099;
        float _2107 = _2104 * _2100;
        float _2108 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_2078].xyz));
        float _4050 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2111 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2112 = dot(vec3(_530, _531, _532), vec3(_2105, _2106, _2107));
        float _4061 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2115 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2116 = dot(vec3(cbLight._m0[_2078].xyz), vec3(_2105, _2106, _2107));
        float _4072 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2120 = _2097 * _2097;
        float _2124 = ((_2115 * _2115) * (_2120 + (-1.0))) + 1.0;
        float _2133 = (exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2134 = 1.0 - _2097;
        float _2144 = (0.5 / (((_1888 * ((_2111 * _2134) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _2134) + _2097) * _2111))) * _2111;
        float _4083 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2146 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2120 / ((_2124 * _2124) * 3.141590118408203125));
        float _2147 = isnan(1.0) ? _1736 : (isnan(_1736) ? 1.0 : min(_1736, 1.0));
        _2072 = (((_2133 * cbLight._m0[_2082].x) * _2146) * _2147) + _2008;
        _2074 = (((_2133 * cbLight._m0[_2082].y) * _2146) * _2147) + _2009;
        _2076 = (((_2133 * cbLight._m0[_2082].z) * _2146) * _2147) + _2010;
    }
    float _2182;
    float _2184;
    float _2186;
    if (_1814)
    {
        _2182 = _2072;
        _2184 = _2074;
        _2186 = _2076;
    }
    else
    {
        uint _2193 = _1721 + 3u;
        uint _2197 = _1721 + 11u;
        float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2193].w)) * _533) * 0.949999988079071044921875);
        float _2212 = _2211 * _2211;
        float _2213 = cbLight._m0[_2193].x + _609;
        float _2214 = cbLight._m0[_2193].y + _610;
        float _2215 = cbLight._m0[_2193].z + _611;
        float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
        float _2220 = _2219 * _2213;
        float _2221 = _2219 * _2214;
        float _2222 = _2219 * _2215;
        float _2223 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_2193].xyz));
        float _4099 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
        float _2226 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2227 = dot(vec3(_530, _531, _532), vec3(_2220, _2221, _2222));
        float _4110 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2230 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2231 = dot(vec3(cbLight._m0[_2193].xyz), vec3(_2220, _2221, _2222));
        float _4121 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2235 = _2212 * _2212;
        float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
        float _2248 = (exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2249 = 1.0 - _2212;
        float _2259 = (0.5 / (((_1888 * ((_2226 * _2249) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_1888 * _2249) + _2212) * _2226))) * _2226;
        float _4132 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2261 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
        float _2262 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
        _2182 = (((_2248 * cbLight._m0[_2197].x) * _2261) * _2262) + _2072;
        _2184 = (((_2248 * cbLight._m0[_2197].y) * _2261) * _2262) + _2074;
        _2186 = (((_2248 * cbLight._m0[_2197].z) * _2261) * _2262) + _2076;
    }
    float _2397;
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    if (_1719.y == 0u)
    {
        float _2337 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2338 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2337;
        float _2339 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2337;
        float _2340 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2337;
        uvec4 _2352 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2353 = _2352.x;
        uint _2364 = uint((float(_2352.y) * floor(float(uint(cbSceneParam._m0[85u].y * _618) / _2353))) + floor(float(uint(cbSceneParam._m0[85u].x * _617) / _2353)));
        float _2374 = (log2(_2340 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2375 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        uint _2378 = uint(isnan(14.0) ? _2375 : (isnan(_2375) ? 14.0 : min(_2375, 14.0)));
        uvec4 _2383 = texelFetch(g_lightClusterGridBuffer, int(((_2378 << 2u) + (_2364 << 6u)) >> 2u));
        uint _2384 = _2383.x;
        uint _2385 = _2352.z;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        if (((((1u << ((_2385 >> 4u) & 15u)) + 4294967295u) & _2384) == 0u) || ((_2385 & 240u) == 0u))
        {
            _2485 = 0.0;
            _2487 = 0.0;
            _2489 = 0.0;
            _2491 = 0.0;
            _2493 = 0.0;
            _2495 = 0.0;
        }
        else
        {
            float _2486;
            float _2488;
            float _2490;
            float _2492;
            float _2494;
            float _2496;
            float _2630 = 0.0;
            float _2631 = 0.0;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            uint _2636 = 0u;
            uint _2645;
            bool _2646;
            for (;;)
            {
                _2645 = texelFetch(g_lightClassification, int((((_2378 << 5u) + (_2364 << 9u)) + (_2636 << 2u)) >> 2u)).x;
                _2646 = _2645 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2646)
                {
                    frontier_phi_61_pred = _2630;
                    frontier_phi_61_pred_1 = _2635;
                    frontier_phi_61_pred_2 = _2634;
                    frontier_phi_61_pred_3 = _2633;
                    frontier_phi_61_pred_4 = _2632;
                    frontier_phi_61_pred_5 = _2631;
                }
                else
                {
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    uint _2760;
                    _2754 = _2630;
                    _2755 = _2631;
                    _2756 = _2632;
                    _2757 = _2633;
                    _2758 = _2634;
                    _2759 = _2635;
                    _2760 = _2645;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    for (;;)
                    {
                        uint _2764 = uint(findLSB(_2760)) + (_2636 << 5u);
                        uint _2761 = (_2760 + 4294967295u) & _2760;
                        uint _2766 = _2764 * 48u;
                        vec4 _2780 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2766)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 3u)).x));
                        uint _2786 = (_2764 * 48u) + 4u;
                        vec4 _2799 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2786)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2786 + 3u)).x));
                        uint _2805 = (_2764 * 48u) + 8u;
                        vec3 _2816 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2805)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2805 + 2u)).x));
                        float _2820 = _2780.x - _2338;
                        float _2821 = _2780.y - _2339;
                        float _2822 = _2780.z - _2340;
                        float _2823 = dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822));
                        float _2826 = inversesqrt(_2823);
                        float _2827 = _2826 * _2820;
                        float _2828 = _2826 * _2821;
                        float _2829 = _2826 * _2822;
                        float _2830 = dot(vec3(_639, _642, _645), vec3(_2827, _2828, _2829));
                        float _2835 = 1.0 - (_2823 * _2780.w);
                        float _4158 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2836 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2837 = sqrt(_2823) * _2799.w;
                        float _2840 = 1.39999997615814208984375 / (_2837 + 1.39999997615814208984375);
                        float _2841 = _2840 * _2840;
                        float _2844 = ((1.0 - _2841) * _2830) + _2841;
                        float _2847 = _2837 * _2837;
                        float _2851 = ((isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))) * _2836) / ((_2847 * 0.699999988079071044921875) + 1.0);
                        float _2855 = (-0.0) - _2338;
                        float _2856 = (-0.0) - _2339;
                        float _2857 = (-0.0) - _2340;
                        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
                        float _2862 = _2861 * _2855;
                        float _2863 = _2861 * _2856;
                        float _2864 = _2861 * _2857;
                        float _2872 = exp2(log2(1.0 / ((_2847 * 3.5) + 5.0)) * 0.25);
                        float _2873 = 1.0 - _699;
                        float _2880 = sqrt(1.0 - ((1.0 - (_2873 * _2873)) * (1.0 - (_2872 * _2872))));
                        float _2881 = _2880 * _2880;
                        float _2882 = _2881 * _2881;
                        float _2883 = _2862 + _2827;
                        float _2884 = _2863 + _2828;
                        float _2885 = _2864 + _2829;
                        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
                        float _2893 = dot(vec3(_639, _642, _645), vec3(_2862, _2863, _2864));
                        float _4174 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2896 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2897 = dot(vec3(_639, _642, _645), vec3(_2889 * _2883, _2889 * _2884, _2889 * _2885));
                        float _4185 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2900 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2904 = ((_2900 * _2900) * (_2882 + (-1.0))) + 1.0;
                        float _2905 = _2840 * _2881;
                        float _2906 = _2905 * _2905;
                        float _2909 = ((1.0 - _2906) * _2830) + _2906;
                        float _4196 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2910 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2911 = 1.0 - _2881;
                        float _2921 = (0.5 / (((_2910 * ((_2896 * _2911) + _2881)) + 9.9999999392252902907785028219223e-09) + (((_2910 * _2911) + _2881) * _2896))) * _2910;
                        float _4207 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2932 = (((_2882 * 3.1415927410125732421875) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) / ((_2904 * _2904) * ((_2847 * 2.1991131305694580078125) + 3.141590118408203125))) * _2836;
                        _2689 = (_2851 * _2799.x) + _2757;
                        _2690 = (_2851 * _2799.y) + _2758;
                        _2691 = (_2851 * _2799.z) + _2759;
                        _2686 = (_2932 * _2816.x) + _2754;
                        _2687 = (_2932 * _2816.y) + _2755;
                        _2688 = (_2932 * _2816.z) + _2756;
                        if (_2761 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2754 = _2686;
                            _2755 = _2687;
                            _2756 = _2688;
                            _2757 = _2689;
                            _2758 = _2690;
                            _2759 = _2691;
                            _2760 = _2761;
                        }
                    }
                    frontier_phi_61_pred = _2686;
                    frontier_phi_61_pred_1 = _2691;
                    frontier_phi_61_pred_2 = _2690;
                    frontier_phi_61_pred_3 = _2689;
                    frontier_phi_61_pred_4 = _2688;
                    frontier_phi_61_pred_5 = _2687;
                }
                _2486 = frontier_phi_61_pred;
                _2496 = frontier_phi_61_pred_1;
                _2494 = frontier_phi_61_pred_2;
                _2492 = frontier_phi_61_pred_3;
                _2490 = frontier_phi_61_pred_4;
                _2488 = frontier_phi_61_pred_5;
                uint _2637 = _2636 + 1u;
                if (_2637 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2630 = _2486;
                    _2631 = _2488;
                    _2632 = _2490;
                    _2633 = _2492;
                    _2634 = _2494;
                    _2635 = _2496;
                    _2636 = _2637;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2485 = _2486;
            _2487 = _2488;
            _2489 = _2490;
            _2491 = _2492;
            _2493 = _2494;
            _2495 = _2496;
        }
        uvec4 _2499 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2500 = _2499.z;
        uint _2502 = (_2500 >> 8u) & 15u;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        if (((4294967295u << _2502) & _2384) == 0u)
        {
            _2598 = _2485;
            _2600 = _2487;
            _2602 = _2489;
            _2604 = _2491;
            _2606 = _2493;
            _2608 = _2495;
        }
        else
        {
            float _2623 = inversesqrt(dot(vec3(_2338, _2339, _2340), vec3(_2338, _2339, _2340)));
            float _2624 = _2623 * _2338;
            float _2625 = _2623 * _2339;
            float _2626 = _2623 * _2340;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2502 < ((_2500 >> 12u) & 15u))
            {
                float _2599;
                float _2601;
                float _2603;
                float _2605;
                float _2607;
                float _2609;
                float _2737 = _2485;
                float _2738 = _2487;
                float _2739 = _2489;
                float _2740 = _2491;
                float _2741 = _2493;
                float _2742 = _2495;
                uint _2743 = _2502;
                uint _2752;
                bool _2753;
                for (;;)
                {
                    _2752 = texelFetch(g_lightClassification, int((((_2378 << 5u) + (_2364 << 9u)) + (_2743 << 2u)) >> 2u)).x;
                    _2753 = _2752 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2753)
                    {
                        frontier_phi_67_pred = _2740;
                        frontier_phi_67_pred_1 = _2741;
                        frontier_phi_67_pred_2 = _2742;
                        frontier_phi_67_pred_3 = _2739;
                        frontier_phi_67_pred_4 = _2738;
                        frontier_phi_67_pred_5 = _2737;
                    }
                    else
                    {
                        float _2937;
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        float _2942;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _2950 = _2737;
                        float _2951 = _2738;
                        float _2952 = _2739;
                        float _2953 = _2740;
                        float _2954 = _2741;
                        float _2955 = _2742;
                        uint _2956 = _2752;
                        uint _2957;
                        vec4 _2982;
                        float _2983;
                        vec4 _2998;
                        vec3 _3010;
                        vec4 _3025;
                        vec4 _3040;
                        float _3086;
                        bool _3087;
                        for (;;)
                        {
                            uint _2967 = ((_2743 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2956));
                            _2957 = (_2956 + 4294967295u) & _2956;
                            uint _2969 = _2967 * 40u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            _2983 = _2982.w;
                            uint _2985 = (_2967 * 40u) + 4u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            uint _3000 = (_2967 * 40u) + 8u;
                            _3010 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3000 + 2u)).x));
                            uint _3012 = (_2967 * 40u) + 16u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3027 = (_2967 * 40u) + 20u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3042 = (_2967 * 40u) + 24u;
                            vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3061 = (_2967 * 40u) + 28u;
                            vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            _3086 = fma(_2340, _3074.z, fma(_2339, _3074.y, _3074.x * _2338)) + _3074.w;
                            _3087 = !((fma(_2340, _3055.z, fma(_2339, _3055.y, _3055.x * _2338)) + _3055.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3087)
                            {
                                float _3114 = _2982.x - _2338;
                                float _3115 = _2982.y - _2339;
                                float _3116 = _2982.z - _2340;
                                float _3117 = dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116));
                                float _3120 = inversesqrt(_3117);
                                float _3121 = _3120 * _3114;
                                float _3122 = _3120 * _3115;
                                float _3123 = _3120 * _3116;
                                float _3127 = 1.0 - (_3117 / (_2983 * _2983));
                                float _4218 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3132 = sqrt(_3117) * _2998.w;
                                float _3134 = 1.39999997615814208984375 / (_3132 + 1.39999997615814208984375);
                                float _3135 = _3134 * _3134;
                                float _3138 = ((1.0 - _3135) * dot(vec3(_3121, _3122, _3123), vec3(_639, _642, _645))) + _3135;
                                float _3141 = _3132 * _3132;
                                float _3145 = (fma(_2340, _3025.z, fma(_2339, _3025.y, _3025.x * _2338)) + _3025.w) / _3086;
                                float _3146 = (fma(_2340, _3040.z, fma(_2339, _3040.y, _3040.x * _2338)) + _3040.w) / _3086;
                                float _3150 = 1.0 - dot(vec2(_3145, _3146), vec2(_3145, _3146));
                                float _4234 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3152 = _3151 * (((isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))) * _3128) / ((_3141 * 0.699999988079071044921875) + 1.0));
                                float _3164 = exp2(log2(1.0 / ((_3141 * 3.5) + 5.0)) * 0.25);
                                float _3165 = 1.0 - _699;
                                float _3172 = sqrt(1.0 - ((1.0 - (_3165 * _3165)) * (1.0 - (_3164 * _3164))));
                                float _3173 = _3172 * _3172;
                                float _3174 = _3173 * _3173;
                                float _3175 = _3121 - _2624;
                                float _3176 = _3122 - _2625;
                                float _3177 = _3123 - _2626;
                                float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                                float _3185 = dot(vec3(_639, _642, _645), vec3((-0.0) - _2624, (-0.0) - _2625, (-0.0) - _2626));
                                float _4245 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3188 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3189 = dot(vec3(_639, _642, _645), vec3(_3181 * _3175, _3181 * _3176, _3181 * _3177));
                                float _4256 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3192 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3196 = ((_3192 * _3192) * (_3174 + (-1.0))) + 1.0;
                                float _3197 = _3134 * _3173;
                                float _3198 = _3197 * _3197;
                                float _3204 = ((1.0 - _3198) * dot(vec3(_639, _642, _645), vec3(_3121, _3122, _3123))) + _3198;
                                float _4267 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3206 = 1.0 - _3173;
                                float _3216 = (0.5 / (((_3205 * ((_3188 * _3206) + _3173)) + 9.9999999392252902907785028219223e-09) + (((_3205 * _3206) + _3173) * _3188))) * _3205;
                                float _4278 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3226 = (_3151 * _3128) * (((_3174 * 3.1415927410125732421875) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) / ((_3196 * _3196) * ((_3141 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3226 * _3010.x;
                                frontier_phi_73_pred_1 = _3226 * _3010.y;
                                frontier_phi_73_pred_2 = _3152 * _2998.z;
                                frontier_phi_73_pred_3 = _3152 * _2998.y;
                                frontier_phi_73_pred_4 = _3152 * _2998.x;
                                frontier_phi_73_pred_5 = _3226 * _3010.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3230 = frontier_phi_73_pred;
                            _3231 = frontier_phi_73_pred_1;
                            _3235 = frontier_phi_73_pred_2;
                            _3234 = frontier_phi_73_pred_3;
                            _3233 = frontier_phi_73_pred_4;
                            _3232 = frontier_phi_73_pred_5;
                            _2940 = _3233 + _2953;
                            _2941 = _3234 + _2954;
                            _2942 = _3235 + _2955;
                            _2937 = _3230 + _2950;
                            _2938 = _3231 + _2951;
                            _2939 = _3232 + _2952;
                            if (_2957 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2939;
                                _2953 = _2940;
                                _2954 = _2941;
                                _2955 = _2942;
                                _2956 = _2957;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2940;
                        frontier_phi_67_pred_1 = _2941;
                        frontier_phi_67_pred_2 = _2942;
                        frontier_phi_67_pred_3 = _2939;
                        frontier_phi_67_pred_4 = _2938;
                        frontier_phi_67_pred_5 = _2937;
                    }
                    _2605 = frontier_phi_67_pred;
                    _2607 = frontier_phi_67_pred_1;
                    _2609 = frontier_phi_67_pred_2;
                    _2603 = frontier_phi_67_pred_3;
                    _2601 = frontier_phi_67_pred_4;
                    _2599 = frontier_phi_67_pred_5;
                    uint _2744 = _2743 + 1u;
                    if (_2744 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2737 = _2599;
                        _2738 = _2601;
                        _2739 = _2603;
                        _2740 = _2605;
                        _2741 = _2607;
                        _2742 = _2609;
                        _2743 = _2744;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2607;
                frontier_phi_55_56_ladder_1 = _2609;
                frontier_phi_55_56_ladder_2 = _2605;
                frontier_phi_55_56_ladder_3 = _2603;
                frontier_phi_55_56_ladder_4 = _2601;
                frontier_phi_55_56_ladder_5 = _2599;
            }
            else
            {
                frontier_phi_55_56_ladder = _2493;
                frontier_phi_55_56_ladder_1 = _2495;
                frontier_phi_55_56_ladder_2 = _2491;
                frontier_phi_55_56_ladder_3 = _2489;
                frontier_phi_55_56_ladder_4 = _2487;
                frontier_phi_55_56_ladder_5 = _2485;
            }
            _2598 = frontier_phi_55_56_ladder_5;
            _2600 = frontier_phi_55_56_ladder_4;
            _2602 = frontier_phi_55_56_ladder_3;
            _2604 = frontier_phi_55_56_ladder_2;
            _2606 = frontier_phi_55_56_ladder;
            _2608 = frontier_phi_55_56_ladder_1;
        }
        float _2613 = isnan(1.0) ? _683 : (isnan(_683) ? 1.0 : min(_683, 1.0));
        _2397 = (_2613 * _2604) + _1852;
        _2399 = (_2613 * _2606) + _1854;
        _2401 = (_2613 * _2608) + _1856;
        _2403 = ((_2598 * 0.039999999105930328369140625) * _2613) + _2182;
        _2405 = ((_2600 * 0.039999999105930328369140625) * _2613) + _2184;
        _2407 = ((_2602 * 0.039999999105930328369140625) * _2613) + _2186;
    }
    else
    {
        _2397 = _1852;
        _2399 = _1854;
        _2401 = _1856;
        _2403 = _2182;
        _2405 = _2184;
        _2407 = _2186;
    }
    float _4294 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _4305 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _4316 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    uint _2427 = _257 + 6u;
    float _2435 = _617 / cbSceneParam._m0[86u].x;
    float _2436 = _618 / cbSceneParam._m0[86u].y;
    vec4 _2450 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2435, _2436, (log2((isnan(cbSceneParam._m0[77u].w) ? _551 : (isnan(_551) ? cbSceneParam._m0[77u].w : min(_551, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2452 = _2450.x;
    float _2453 = _2450.y;
    float _2454 = _2450.z;
    float _2455 = _2450.w;
    float _2548;
    float _2550;
    float _2552;
    float _2554;
    if (_551 > cbSceneParam._m0[78u].w)
    {
        float _2510 = isnan(_551) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _551 : min(cbSceneParam._m0[80u].w, _551));
        float _2511 = _2510 / _551;
        float _2522 = _2511 * _602;
        float _2523 = _603 * _2511;
        float _2524 = (-0.0) - _2523;
        float _2526 = _2511 * _604;
        float _2528 = (cbSceneParam._m0[77u].w * _2524) / _2510;
        float _2529 = _2528 + cbSceneParam._m0[79u].w;
        float _2530 = cbSceneParam._m0[79u].w - _2523;
        float _2536 = sqrt(((_2522 * _2522) + (_2523 * _2523)) + (_2526 * _2526));
        float _2539 = (1.0 - (cbSceneParam._m0[77u].w / _2510)) * _2536;
        float _2544 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2546 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2699;
        if (abs((_2524 - _2528) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2699 = ((((_2529 > 0.0) ? exp2(_2544 * _2529) : (2.0 - exp2(_2546 * _2529))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2539;
        }
        else
        {
            float _2659 = 1.0 / cbSceneParam._m0[80u].x;
            float _2660 = isnan(_2530) ? _2529 : (isnan(_2529) ? _2530 : max(_2529, _2530));
            float _2661 = isnan(_2530) ? _2529 : (isnan(_2529) ? _2530 : min(_2529, _2530));
            float _2670 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : min(_2660, 0.0));
            float _2671 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : min(_2661, 0.0));
            _2699 = ((abs(_2536 / _2524) * cbSceneParam._m0[80u].y) * ((((_2670 - _2671) * 2.0) - ((exp2(_2544 * (isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0)))) - exp2(_2544 * (isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0))))) * _2659)) - ((exp2(_2546 * _2670) - exp2(_2546 * _2671)) * _2659))) + (_2539 * cbSceneParam._m0[80u].z);
        }
        vec4 _2701 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2435, _2436, 1.0), 0.0);
        float _2710 = exp2((_2699 * (-1.44269502162933349609375)) * (1.0 - _2701.w));
        float _2711 = log2(_2710);
        float _2727 = log2(_2455);
        _2548 = (exp2(_2727 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2711 * cbSceneParam._m0[78u].x)) * _2701.x) / cbSceneParam._m0[78u].x)) + _2452;
        _2550 = (exp2(_2727 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2711 * cbSceneParam._m0[78u].y)) * _2701.y) / cbSceneParam._m0[78u].y)) + _2453;
        _2552 = (exp2(_2727 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2711 * cbSceneParam._m0[78u].z)) * _2701.z) / cbSceneParam._m0[78u].z)) + _2454;
        _2554 = _2710 * _2455;
    }
    else
    {
        _2548 = _2452;
        _2550 = _2453;
        _2552 = _2454;
        _2554 = _2455;
    }
    float _2566 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2567 = _2566 == 3.0;
    float _2568 = log2(_2554);
    float _2575 = exp2(_2568 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2397 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _683))) + ((_2403 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1488)) * cbPerFrame._m0[3u].x));
    float _2576 = exp2(_2568 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2399 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _683))) + ((_2405 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1488)) * cbPerFrame._m0[3u].x));
    float _2577 = exp2(_2568 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2401 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _683))) + ((_2407 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1488)) * cbPerFrame._m0[3u].x));
    float _2586 = (_2566 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2586 * (_2567 ? _2575 : (_2575 + (cbSceneParam._m0[72u].w * _2548)));
    SV_Target.y = _2586 * (_2567 ? _2576 : (_2576 + (cbSceneParam._m0[72u].w * _2550)));
    SV_Target.z = _2586 * (_2567 ? _2577 : (_2577 + (cbSceneParam._m0[72u].w * _2552)));
    SV_Target.w = cbInstanceData._m0[_2427].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2427].w;
}


