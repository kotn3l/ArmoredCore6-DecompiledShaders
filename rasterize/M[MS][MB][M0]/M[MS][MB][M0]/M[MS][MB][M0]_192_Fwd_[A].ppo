#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1451;
float _3810;
float _3811;
float _3812;
float _3813;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3822 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3833 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3844 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _415 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _432 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_405 - _415) * cbMtdParam._m0[24u].x) + _415) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3855 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _440 = (_433 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _441 = (_433 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _442 = (_433 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _459 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _302) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _303) + cbTextureTilingScale._m0[3u].w));
    vec4 _479 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _481 = _479.x;
    float _491 = dot(vec4(_481, _479.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _505 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_481 - _491) * cbMtdParam._m0[24u].x) + _491) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3866 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _506 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _513 = (_506 * ((_459.x * cbMtdParam._m0[13u].x) - _440)) + _440;
    float _514 = (_506 * ((_459.y * cbMtdParam._m0[13u].y) - _441)) + _441;
    float _515 = (_506 * ((_459.z * cbMtdParam._m0[13u].z) - _442)) + _442;
    float _519 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _513;
    float _522 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _514;
    float _525 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _515;
    float _532 = ((_513 - _519) * (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) + _519;
    float _533 = ((_514 - _522) * (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) + _522;
    float _534 = ((_515 - _525) * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) + _525;
    vec4 _551 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _574 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _591 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _593 = _591.x;
    float _594 = _591.y;
    float _595 = _591.z;
    float _602 = ((_574.x - _593) * _433) + _593;
    float _603 = ((_574.y - _594) * _433) + _594;
    float _604 = ((_574.z - _595) * _433) + _595;
    vec4 _616 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _302) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _303) + cbTextureTilingScale._m0[2u].w));
    float _629 = ((_616.z - _604) * _506) + _604;
    float _632 = ((((_616.x - _602) * _506) + _602) * 2.0) + (-1.0);
    float _633 = ((((_616.y - _603) * _506) + _603) * 2.0) + (-1.0);
    float _634 = dot(vec2(_632, _633), vec2(_632, _633));
    float _3877 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _639 = sqrt(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))));
    vec4 _653 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _678 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _680 = _678.x;
    float _681 = 1.0 - _680;
    float _687 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _690 = ((isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : min(_687, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _699 = (_690 - ((((((_680 - _681) * cbMtdParam._m0[24u].z) + _681) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _690))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3898 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _700 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _707 = (_700 * (cbMtdParam._m0[17u].x - _532)) + _532;
    float _708 = (_700 * (cbMtdParam._m0[17u].y - _533)) + _533;
    float _709 = (_700 * (cbMtdParam._m0[17u].z - _534)) + _534;
    vec4 _721 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _723 = _721.x;
    float _724 = 1.0 - _723;
    float _749 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_723 - _724) * cbMtdParam._m0[24u].w) + _724) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3909 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _750 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _758 = ((((cbMtdParam._m0[10u].x - _707) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _750) + _707;
    float _759 = ((((cbMtdParam._m0[10u].y - _708) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _750) + _708;
    float _760 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _709)) * _750) + _709;
    float _765 = (((_551.z - _629) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _629;
    float _769 = ((_653.z - _765) * cbMtdParam._m0[19u].w) + _765;
    vec4 _783 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _790 = (_783.x * 2.0) + (-1.0);
    float _791 = (_783.y * 2.0) + (-1.0);
    float _792 = dot(vec2(_790, _791), vec2(_790, _791));
    float _3920 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _800 = (_700 * (_783.z - _769)) + _769;
    float _803 = ((cbMtdParam._m0[23u].y - _800) * _750) + _800;
    vec4 _822 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _828 = (_822.x * 2.0) + (-1.0);
    float _829 = (_822.y * 2.0) + (-1.0);
    float _830 = dot(vec2(_828, _829), vec2(_828, _829));
    float _3931 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _844 = (_632 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_551.x * 2.0) + (-1.0)))) + (((_653.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _845 = (_633 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_551.y * 2.0) + (-1.0)))) + (((_653.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _857 = (((_790 - _844) + (cbMtdParam._m0[21u].x * _844)) * _700) + _844;
    float _858 = (((_791 - _845) + (cbMtdParam._m0[21u].x * _845)) * _700) + _845;
    float _859 = (_700 * (sqrt(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) - _639)) + _639;
    float _870 = (((_828 - _857) + (_857 * cbMtdParam._m0[22u].z)) * _750) + _857;
    float _871 = (((_829 - _858) + (_858 * cbMtdParam._m0[22u].z)) * _750) + _858;
    float _872 = ((sqrt(1.0 - (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) - _859) * _750) + _859;
    float _876 = cbMtdParam._m0[22u].x + _653.w;
    float _879 = fma(_872, _251 * NORMAL.x, fma(_871, _258 * TANGENT.x, (_244 * _236) * _870));
    float _882 = fma(_872, _251 * NORMAL.y, fma(_871, _258 * TANGENT.y, (_244 * _237) * _870));
    float _885 = fma(_872, _251 * NORMAL.z, fma(_871, _258 * TANGENT.z, (_244 * _238) * _870));
    float _889 = inversesqrt(dot(vec3(_879, _882, _885), vec3(_879, _882, _885)));
    float _890 = _889 * _879;
    float _891 = _889 * _882;
    float _892 = _889 * _885;
    float _3942 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _893 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _3953 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _3964 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _3975 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _3986 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _911 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _962 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _952);
    float _963 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _952);
    float _964 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _952);
    float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
    float _969 = _962 * _968;
    float _970 = _963 * _968;
    float _971 = _964 * _968;
    vec4 _976 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _978 = _976.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1132 = sqrt(((_962 * _962) + (_963 * _963)) + (_964 * _964));
        float _1138 = (cbMatDynParam._m0[5u].x * _1132) + cbMatDynParam._m0[5u].y;
        float _3997 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1143 = (cbMatDynParam._m0[5u].z * _1132) + cbMatDynParam._m0[5u].w;
        float _4008 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) - _1139)) + _1139) < ((_978 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _989 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _990 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1008 = fma(_892, cbSceneParam._m0[5u].z, fma(_891, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _890));
    float _1011 = fma(_892, cbSceneParam._m0[6u].z, fma(_891, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _890));
    float _1014 = fma(_892, cbSceneParam._m0[7u].z, fma(_891, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _890));
    uint _1027 = _283 + 9u;
    uint _1028 = _1027 + uint(cbMatDynParam._m0[0u].w);
    float _1034 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) * cbInstanceData._m0[_1028].x;
    float _1035 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0)))) * cbInstanceData._m0[_1028].y;
    float _1036 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * cbInstanceData._m0[_1028].z;
    float _4019 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1037 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _4030 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1038 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1039 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    vec4 _1048 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _989, cbSceneParam._m0[86u].y * _990));
    float _1052 = ((isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * TEXCOORD_5.w) * _1048.x;
    float _1053 = dot(vec3(_890, _891, _892), vec3(_969, _970, _971));
    float _1056 = _1053 * 2.0;
    float _1060 = (_1056 * _890) - _969;
    float _1061 = (_1056 * _891) - _970;
    float _1062 = (_1056 * _892) - _971;
    float _1066 = abs(dot(vec3(_969, _970, _971), vec3(_890, _891, _892)));
    float _4052 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1068 = sqrt(_893);
    float _1081 = exp2((_1068 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1068 * 3.0));
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1450;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1175 = fma(_1121, cbModelParam._m0[26u].z, fma(_1117, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1113));
        float _1179 = fma(_1121, cbModelParam._m0[27u].z, fma(_1117, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1113));
        float _1183 = fma(_1121, cbModelParam._m0[28u].z, fma(_1117, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1113));
        float _1208 = _1113 + _890;
        float _1209 = _1117 + _891;
        float _1210 = _1121 + _892;
        float _1220 = fma(_1210, cbModelParam._m0[26u].z, fma(_1209, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1208)) - _1175;
        float _1221 = fma(_1210, cbModelParam._m0[27u].z, fma(_1209, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1208)) - _1179;
        float _1222 = fma(_1210, cbModelParam._m0[28u].z, fma(_1209, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1208)) - _1183;
        float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
        float _1239 = ((_1226 * _1220) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1175 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1226 * _1221) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1179 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1226 * _1222) / cbModelParam._m0[34u].z) + ((((((_1183 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1258 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1278 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1244.x + (-0.5));
        float _1280 = _1278 * (_1244.y + (-0.5));
        float _1281 = _1278 * (_1244.z + (-0.5));
        float _1288 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1251.x + (-0.5));
        float _1290 = _1288 * (_1251.y + (-0.5));
        float _1291 = _1288 * (_1251.z + (-0.5));
        float _1298 = exp2((_1258.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1258.x + (-0.5));
        float _1300 = _1298 * (_1258.y + (-0.5));
        float _1301 = _1298 * (_1258.z + (-0.5));
        float _1308 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1265.x + (-0.5));
        float _1310 = _1308 * (_1265.y + (-0.5));
        float _1311 = _1308 * (_1265.z + (-0.5));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = _1279 * 0.5;
        float _1316 = _1289 * 0.5;
        float _1317 = _1299 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1332 = (dot(vec3(_890, _891, _892), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1342 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4100 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1344 + 1.0))) + _1349) * _1312;
        float _1359 = _1280 * 0.5;
        float _1360 = _1290 * 0.5;
        float _1361 = _1300 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_890, _891, _892), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _4133 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1386 + 1.0))) + _1391) * _1313;
        float _1401 = _1281 * 0.5;
        float _1402 = _1291 * 0.5;
        float _1403 = _1301 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_890, _891, _892), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _4166 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1428 + 1.0))) + _1433) * _1314;
        _1450 = _1281;
        _1452 = _1280;
        _1453 = _1279;
        _1454 = _1291;
        _1455 = _1290;
        _1456 = _1289;
        _1457 = _1301;
        _1458 = _1300;
        _1459 = _1299;
        _1460 = _1314;
        _1461 = _1313;
        _1462 = _1312;
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1465 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
    }
    else
    {
        _1450 = _1451;
        _1452 = _1451;
        _1453 = _1451;
        _1454 = _1451;
        _1455 = _1451;
        _1456 = _1451;
        _1457 = _1451;
        _1458 = _1451;
        _1459 = _1451;
        _1460 = _1451;
        _1461 = _1451;
        _1462 = _1451;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1492 = fma(_1121, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1113));
        float _1496 = fma(_1121, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1113));
        float _1500 = fma(_1121, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1113));
        float _1523 = _1113 + _890;
        float _1524 = _1117 + _891;
        float _1525 = _1121 + _892;
        float _1535 = fma(_1525, cbModelParam._m0[30u].z, fma(_1524, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1523)) - _1492;
        float _1536 = fma(_1525, cbModelParam._m0[31u].z, fma(_1524, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1523)) - _1496;
        float _1537 = fma(_1525, cbModelParam._m0[32u].z, fma(_1524, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1523)) - _1500;
        float _1541 = inversesqrt(dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537)));
        float _1554 = ((_1541 * _1535) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1492 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1541 * _1536) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1496 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1541 * _1537) / cbModelParam._m0[35u].z) + ((((((_1500 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1558 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1565 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1572 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1554, _1555, _1556), 0.0);
        float _1591 = exp2((_1558.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1558.x + (-0.5));
        float _1593 = _1591 * (_1558.y + (-0.5));
        float _1594 = _1591 * (_1558.z + (-0.5));
        float _1601 = exp2((_1565.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1565.x + (-0.5));
        float _1603 = _1601 * (_1565.y + (-0.5));
        float _1604 = _1601 * (_1565.z + (-0.5));
        float _1611 = exp2((_1572.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1572.x + (-0.5));
        float _1613 = _1611 * (_1572.y + (-0.5));
        float _1614 = _1611 * (_1572.z + (-0.5));
        float _1621 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1579.x + (-0.5));
        float _1623 = _1621 * (_1579.y + (-0.5));
        float _1624 = _1621 * (_1579.z + (-0.5));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = _1592 * 0.5;
        float _1629 = _1602 * 0.5;
        float _1630 = _1612 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_890, _891, _892), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4229 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1655 + 1.0))) + _1660) * _1625;
        float _1670 = _1593 * 0.5;
        float _1671 = _1603 * 0.5;
        float _1672 = _1613 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_890, _891, _892), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4262 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1697 + 1.0))) + _1702) * _1626;
        float _1712 = _1594 * 0.5;
        float _1713 = _1604 * 0.5;
        float _1714 = _1614 * 0.5;
        float _1715 = dot(vec3(_1712, _1713, _1714), vec3(_1712, _1713, _1714));
        float _1720 = (_1715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1715);
        float _1728 = (dot(vec3(_890, _891, _892), vec3(_1720 * _1712, _1720 * _1713, _1720 * _1714)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1737 = sqrt(((_1713 * _1713) + (_1712 * _1712)) + (_1714 * _1714)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1739 = _1738 * 2.0;
        float _1743 = (1.0 - _1738) / (_1738 + 1.0);
        float _4295 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1753 = ((((1.0 - _1744) * (_1739 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1739 + 1.0))) + _1744) * _1627;
        _1761 = _1594;
        _1762 = _1593;
        _1763 = _1592;
        _1764 = _1604;
        _1765 = _1603;
        _1766 = _1602;
        _1767 = _1614;
        _1768 = _1613;
        _1769 = _1612;
        _1770 = _1627;
        _1771 = _1626;
        _1772 = _1625;
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)));
    }
    else
    {
        _1761 = _1451;
        _1762 = _1451;
        _1763 = _1451;
        _1764 = _1451;
        _1765 = _1451;
        _1766 = _1451;
        _1767 = _1451;
        _1768 = _1451;
        _1769 = _1451;
        _1770 = _1451;
        _1771 = _1451;
        _1772 = _1451;
        _1773 = 0.0;
        _1774 = 0.0;
        _1775 = 0.0;
    }
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1463)) + _1463;
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1464)) + _1464;
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1465)) + _1465;
    float _1808 = fma(_1787, cbSceneParam._m0[89u].z, fma(_1786, cbSceneParam._m0[89u].y, _1785 * cbSceneParam._m0[89u].x));
    float _1811 = fma(_1787, cbSceneParam._m0[90u].z, fma(_1786, cbSceneParam._m0[90u].y, _1785 * cbSceneParam._m0[90u].x));
    float _1814 = fma(_1787, cbSceneParam._m0[91u].z, fma(_1786, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1785));
    float _1829 = _1060 * 0.5;
    float _1830 = _1061 * 0.5;
    float _1831 = _1062 * 0.5;
    float _1832 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1835 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1838 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1872;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1845 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1450, _1454, _1457, _1460));
        float _1849 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1452, _1455, _1458, _1461));
        float _1853 = dot(vec4(_1829, _1830, _1831, 1.0), vec4(_1453, _1456, _1459, _1462));
        float _1860 = dot(vec4(cbModelParam._m0[39u]), vec4(_1829, _1830, _1831, 1.0));
        _1872 = dot(vec3(isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1860) ? 0.0 : (isnan(0.0) ? _1860 : max(0.0, _1860))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1872 = 1.0;
    }
    float _1883;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1874 = dot(vec4(cbModelParam._m0[40u]), vec4(_1829, _1830, _1831, 1.0));
        _1883 = dot(vec3(isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)), isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1874) ? 0.0 : (isnan(0.0) ? _1874 : max(0.0, _1874))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1883 = 1.0;
    }
    float _1887 = (_1883 * cbModelParam._m0[1u].x) + (_1872 * (1.0 - cbModelParam._m0[1u].x));
    float _1897 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _893);
    float _1898 = isnan(_1897) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1897 : min(cbModelParam._m0[25u].z, _1897));
    float _1979;
    float _1981;
    float _1983;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1946 = fma(_1121, cbModelParam._m0[13u].z, fma(_1117, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1113)) + cbModelParam._m0[13u].w;
        float _1950 = fma(_1121, cbModelParam._m0[14u].z, fma(_1117, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1113)) + cbModelParam._m0[14u].w;
        float _1954 = fma(_1121, cbModelParam._m0[15u].z, fma(_1117, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1113)) + cbModelParam._m0[15u].w;
        float _1957 = fma(_1062, cbModelParam._m0[13u].z, fma(_1061, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1060));
        float _1960 = fma(_1062, cbModelParam._m0[14u].z, fma(_1061, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1060));
        float _1963 = fma(_1062, cbModelParam._m0[15u].z, fma(_1061, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1060));
        float _1991;
        if (_1957 > 0.0)
        {
            _1991 = abs((1.0 - _1946) / _1957);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1946 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1991 = frontier_phi_17_15_ladder;
        }
        float _2192;
        if (_1960 > 0.0)
        {
            _2192 = abs((1.0 - _1950) / _1960);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1950 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2192 = frontier_phi_26_22_ladder;
        }
        float _2435;
        if (_1963 > 0.0)
        {
            _2435 = abs((1.0 - _1954) / _1963);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1954 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2435 = frontier_phi_38_33_ladder;
        }
        float _2437 = isnan(_2192) ? _1991 : (isnan(_1991) ? _2192 : min(_1991, _2192));
        float _2438 = isnan(_2435) ? _2437 : (isnan(_2437) ? _2435 : min(_2437, _2435));
        float _2442 = (_2438 * _1957) + _1946;
        float _2443 = (_2438 * _1960) + _1950;
        float _2444 = (_2438 * _1963) + _1954;
        float _2445 = _2438 * 9.9999997473787516355514526367188e-05;
        float _2447 = (-1.0) - _2445;
        float _2449 = _2445 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2444 > _2449) || ((_2444 < _2447) || ((_2443 > _2449) || ((_2443 < _2447) || ((_2442 < _2447) || (_2442 > _2449))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2568 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2444, cbModelParam._m0[9u].z, fma(_2443, cbModelParam._m0[9u].y, _2442 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2444, cbModelParam._m0[10u].z, fma(_2443, cbModelParam._m0[10u].y, _2442 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2444, cbModelParam._m0[11u].z, fma(_2443, cbModelParam._m0[11u].y, _2442 * cbModelParam._m0[11u].x))), _1898);
            frontier_phi_16_38_ladder = _2568.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2568.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2568.x * cbModelParam._m0[1u].y;
        }
        _1979 = frontier_phi_16_38_ladder_2;
        _1981 = frontier_phi_16_38_ladder_1;
        _1983 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1967 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1060, _1061, _1062), _1898);
        _1979 = _1967.x * cbModelParam._m0[1u].y;
        _1981 = _1967.y * cbModelParam._m0[1u].y;
        _1983 = _1967.z * cbModelParam._m0[1u].y;
    }
    float _1987 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _893);
    float _1988 = isnan(_1987) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1987 : min(cbModelParam._m0[25u].w, _1987));
    float _2078;
    float _2080;
    float _2082;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2042 = fma(_1121, cbModelParam._m0[21u].z, fma(_1117, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1113)) + cbModelParam._m0[21u].w;
        float _2046 = fma(_1121, cbModelParam._m0[22u].z, fma(_1117, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1113)) + cbModelParam._m0[22u].w;
        float _2050 = fma(_1121, cbModelParam._m0[23u].z, fma(_1117, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1113)) + cbModelParam._m0[23u].w;
        float _2053 = fma(_1062, cbModelParam._m0[21u].z, fma(_1061, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1060));
        float _2056 = fma(_1062, cbModelParam._m0[22u].z, fma(_1061, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1060));
        float _2059 = fma(_1062, cbModelParam._m0[23u].z, fma(_1061, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1060));
        float _2197;
        if (_2053 > 0.0)
        {
            _2197 = abs((1.0 - _2042) / _2053);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2042 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2197 = frontier_phi_28_24_ladder;
        }
        float _2462;
        if (_2056 > 0.0)
        {
            _2462 = abs((1.0 - _2046) / _2056);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2046 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2462 = frontier_phi_40_35_ladder;
        }
        float _2667;
        if (_2059 > 0.0)
        {
            _2667 = abs((1.0 - _2050) / _2059);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2050 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2667 = frontier_phi_49_46_ladder;
        }
        float _2669 = isnan(_2462) ? _2197 : (isnan(_2197) ? _2462 : min(_2197, _2462));
        float _2670 = isnan(_2667) ? _2669 : (isnan(_2669) ? _2667 : min(_2669, _2667));
        float _2674 = (_2670 * _2053) + _2042;
        float _2675 = (_2670 * _2056) + _2046;
        float _2676 = (_2670 * _2059) + _2050;
        float _2677 = _2670 * 9.9999997473787516355514526367188e-05;
        float _2678 = (-1.0) - _2677;
        float _2680 = _2677 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2676 > _2680) || ((_2676 < _2678) || ((_2675 > _2680) || ((_2675 < _2678) || ((_2674 < _2678) || (_2674 > _2680))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2875 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2676, cbModelParam._m0[17u].z, fma(_2675, cbModelParam._m0[17u].y, _2674 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2676, cbModelParam._m0[18u].z, fma(_2675, cbModelParam._m0[18u].y, _2674 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2676, cbModelParam._m0[19u].z, fma(_2675, cbModelParam._m0[19u].y, _2674 * cbModelParam._m0[19u].x))), _1988);
            frontier_phi_25_49_ladder = _2875.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2875.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2875.x * cbModelParam._m0[1u].z;
        }
        _2078 = frontier_phi_25_49_ladder_2;
        _2080 = frontier_phi_25_49_ladder_1;
        _2082 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2062 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1060, _1061, _1062), _1988);
        _2078 = _2062.x * cbModelParam._m0[1u].z;
        _2080 = _2062.y * cbModelParam._m0[1u].z;
        _2082 = _2062.z * cbModelParam._m0[1u].z;
    }
    float _2094 = ((((1.0 - _1081) * ((_1068 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1081 * _1068)) * _1052;
    float _2095 = _2094 * ((cbModelParam._m0[1u].w * (_2078 - _1979)) + _1979);
    float _2096 = _2094 * ((cbModelParam._m0[1u].w * (_2080 - _1981)) + _1981);
    float _2097 = _2094 * ((cbModelParam._m0[1u].w * (_2082 - _1983)) + _1983);
    float _2100 = fma(_2097, cbSceneParam._m0[89u].z, fma(_2096, cbSceneParam._m0[89u].y, _2095 * cbSceneParam._m0[89u].x));
    float _2103 = fma(_2097, cbSceneParam._m0[90u].z, fma(_2096, cbSceneParam._m0[90u].y, _2095 * cbSceneParam._m0[90u].x));
    float _2106 = fma(_2097, cbSceneParam._m0[91u].z, fma(_2096, cbSceneParam._m0[91u].y, _2095 * cbSceneParam._m0[91u].x));
    uvec4 _2116 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2118 = _2116.x * 14u;
    uint _2119 = _2118 + 13u;
    float _2126 = _1052 + (-1.0);
    float _2131 = (cbLight._m0[_2119].x * _2126) + 1.0;
    float _2132 = (cbLight._m0[_2119].y * _2126) + 1.0;
    float _2133 = (cbLight._m0[_2119].z * _2126) + 1.0;
    float _2134 = (cbLight._m0[_2119].w * _2126) + 1.0;
    uint _2135 = _2118 + 5u;
    float _2141 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
    uint _2145 = _2118 + 4u;
    float _2151 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
    uint _2155 = _2118 | 1u;
    float _2166 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_890, _891, _892));
    float _2169 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_890, _891, _892));
    float _4431 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _4442 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2174 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * 0.3183098733425140380859375;
    float _2176 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * 0.3183098733425140380859375;
    float _2183 = ((cbLight._m0[_2135].x * _2141) * _2176) + ((cbLight._m0[_2145].x * _2151) * _2174);
    float _2184 = ((_2141 * cbLight._m0[_2135].y) * _2176) + ((_2151 * cbLight._m0[_2145].y) * _2174);
    float _2185 = ((_2141 * cbLight._m0[_2135].z) * _2176) + ((_2151 * cbLight._m0[_2145].z) * _2174);
    uvec4 _2189 = floatBitsToUint(cbLight._m0[_2118 + 12u]);
    bool _2191 = _2189.x == 0u;
    float _2202;
    float _2204;
    float _2206;
    if (_2191)
    {
        _2202 = _2183;
        _2204 = _2184;
        _2206 = _2185;
    }
    else
    {
        uint _2210 = _2118 + 6u;
        float _2226 = (dot(vec3(cbLight._m0[_2118 + 2u].xyz), vec3(_890, _891, _892)) * 0.5) + 0.5;
        float _2227 = _2226 * _2226;
        float _4453 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2228 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2229 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2202 = (((cbLight._m0[_2210].x * 0.3183098733425140380859375) * _2228) * _2229) + _2183;
        _2204 = (((cbLight._m0[_2210].y * 0.3183098733425140380859375) * _2228) * _2229) + _2184;
        _2206 = (((cbLight._m0[_2210].z * 0.3183098733425140380859375) * _2228) * _2229) + _2185;
    }
    bool _2209 = _2189.y == 0u;
    float _2247;
    float _2249;
    float _2251;
    if (_2209)
    {
        _2247 = _2202;
        _2249 = _2204;
        _2251 = _2206;
    }
    else
    {
        uint _2406 = _2118 + 7u;
        float _2422 = (dot(vec3(cbLight._m0[_2118 + 3u].xyz), vec3(_890, _891, _892)) * 0.5) + 0.5;
        float _2423 = _2422 * _2422;
        float _4469 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2424 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2425 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2247 = (((cbLight._m0[_2406].x * 0.3183098733425140380859375) * _2424) * _2425) + _2202;
        _2249 = (((cbLight._m0[_2406].y * 0.3183098733425140380859375) * _2424) * _2425) + _2204;
        _2251 = (((cbLight._m0[_2406].z * 0.3183098733425140380859375) * _2424) * _2425) + _2206;
    }
    uint _2254 = _2118 + 8u;
    float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _893) * 0.949999988079071044921875);
    float _2268 = _2267 * _2267;
    float _2269 = cbLight._m0[_2118].x + _969;
    float _2270 = cbLight._m0[_2118].y + _970;
    float _2271 = cbLight._m0[_2118].z + _971;
    float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
    float _2276 = _2275 * _2269;
    float _2277 = _2275 * _2270;
    float _2278 = _2275 * _2271;
    float _2279 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2118].xyz));
    float _4485 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _4496 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _2283 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2284 = dot(vec3(_890, _891, _892), vec3(_2276, _2277, _2278));
    float _4507 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2276, _2277, _2278));
    float _4518 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2268 * _2268;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2307 = (exp2(log2(1.0 - (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2308 = 1.0 - _2268;
    float _2319 = (0.5 / (((_2283 * ((_2282 * _2308) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2308) + _2268) * _2282))) * _2282;
    float _4529 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2321 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    uint _2332 = _2118 + 9u;
    float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _893) * 0.949999988079071044921875);
    float _2344 = _2343 * _2343;
    float _2345 = cbLight._m0[_2155].x + _969;
    float _2346 = cbLight._m0[_2155].y + _970;
    float _2347 = cbLight._m0[_2155].z + _971;
    float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
    float _2352 = _2351 * _2345;
    float _2353 = _2351 * _2346;
    float _2354 = _2351 * _2347;
    float _2355 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2155].xyz));
    float _4540 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2359 = dot(vec3(_890, _891, _892), vec3(_2352, _2353, _2354));
    float _4551 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2352, _2353, _2354));
    float _4562 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2344 * _2344;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2380 = (exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2381 = 1.0 - _2344;
    float _2391 = (0.5 / (((_2283 * ((_2358 * _2381) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2381) + _2344) * _2358))) * _2358;
    float _4573 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    float _2403 = (((_2380 * cbLight._m0[_2332].x) * _2393) * _2141) + (((_2307 * cbLight._m0[_2254].x) * _2321) * _2151);
    float _2404 = (((_2380 * cbLight._m0[_2332].y) * _2393) * _2141) + (((_2307 * cbLight._m0[_2254].y) * _2321) * _2151);
    float _2405 = (((_2380 * cbLight._m0[_2332].z) * _2393) * _2141) + (((_2307 * cbLight._m0[_2254].z) * _2321) * _2151);
    float _2467;
    float _2469;
    float _2471;
    if (_2191)
    {
        _2467 = _2403;
        _2469 = _2404;
        _2471 = _2405;
    }
    else
    {
        uint _2473 = _2118 + 2u;
        uint _2477 = _2118 + 10u;
        float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _893) * 0.949999988079071044921875);
        float _2492 = _2491 * _2491;
        float _2493 = cbLight._m0[_2473].x + _969;
        float _2494 = cbLight._m0[_2473].y + _970;
        float _2495 = cbLight._m0[_2473].z + _971;
        float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
        float _2500 = _2499 * _2493;
        float _2501 = _2499 * _2494;
        float _2502 = _2499 * _2495;
        float _2503 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2473].xyz));
        float _4584 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2507 = dot(vec3(_890, _891, _892), vec3(_2500, _2501, _2502));
        float _4595 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2511 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2500, _2501, _2502));
        float _4606 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2515 = _2492 * _2492;
        float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
        float _2528 = (exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2529 = 1.0 - _2492;
        float _2539 = (0.5 / (((_2283 * ((_2506 * _2529) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2529) + _2492) * _2506))) * _2506;
        float _4617 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2541 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
        float _2542 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2467 = (((_2528 * cbLight._m0[_2477].x) * _2541) * _2542) + _2403;
        _2469 = (((_2528 * cbLight._m0[_2477].y) * _2541) * _2542) + _2404;
        _2471 = (((_2528 * cbLight._m0[_2477].z) * _2541) * _2542) + _2405;
    }
    float _2577;
    float _2579;
    float _2581;
    if (_2209)
    {
        _2577 = _2467;
        _2579 = _2469;
        _2581 = _2471;
    }
    else
    {
        uint _2588 = _2118 + 3u;
        uint _2592 = _2118 + 11u;
        float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2588].w)) * _893) * 0.949999988079071044921875);
        float _2607 = _2606 * _2606;
        float _2608 = cbLight._m0[_2588].x + _969;
        float _2609 = cbLight._m0[_2588].y + _970;
        float _2610 = cbLight._m0[_2588].z + _971;
        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
        float _2615 = _2614 * _2608;
        float _2616 = _2614 * _2609;
        float _2617 = _2614 * _2610;
        float _2618 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2588].xyz));
        float _4633 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2622 = dot(vec3(_890, _891, _892), vec3(_2615, _2616, _2617));
        float _4644 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2626 = dot(vec3(cbLight._m0[_2588].xyz), vec3(_2615, _2616, _2617));
        float _4655 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2630 = _2607 * _2607;
        float _2634 = ((_2625 * _2625) * (_2630 + (-1.0))) + 1.0;
        float _2643 = (exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2644 = 1.0 - _2607;
        float _2654 = (0.5 / (((_2283 * ((_2621 * _2644) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2644) + _2607) * _2621))) * _2621;
        float _4666 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2656 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2630 / ((_2634 * _2634) * 3.141590118408203125));
        float _2657 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2577 = (((_2643 * cbLight._m0[_2592].x) * _2656) * _2657) + _2467;
        _2579 = (((_2643 * cbLight._m0[_2592].y) * _2656) * _2657) + _2469;
        _2581 = (((_2643 * cbLight._m0[_2592].z) * _2656) * _2657) + _2471;
    }
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    if (_2116.y == 0u)
    {
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2732;
        float _2734 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2732;
        float _2735 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2732;
        uvec4 _2747 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2748 = _2747.x;
        uint _2759 = uint((float(_2747.y) * floor(float(uint(cbSceneParam._m0[85u].y * _990) / _2748))) + floor(float(uint(cbSceneParam._m0[85u].x * _989) / _2748)));
        float _2769 = (log2(_2735 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2770 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        uint _2773 = uint(isnan(14.0) ? _2770 : (isnan(_2770) ? 14.0 : min(_2770, 14.0)));
        uvec4 _2778 = texelFetch(g_lightClusterGridBuffer, int(((_2773 << 2u) + (_2759 << 6u)) >> 2u));
        uint _2779 = _2778.x;
        uint _2780 = _2747.z;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        if (((((1u << ((_2780 >> 4u) & 15u)) + 4294967295u) & _2779) == 0u) || ((_2780 & 240u) == 0u))
        {
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
            _2890 = 0.0;
        }
        else
        {
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _2891;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            uint _3039 = 0u;
            uint _3048;
            bool _3049;
            for (;;)
            {
                _3048 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                _3049 = _3048 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3049)
                {
                    frontier_phi_66_pred = _3033;
                    frontier_phi_66_pred_1 = _3038;
                    frontier_phi_66_pred_2 = _3037;
                    frontier_phi_66_pred_3 = _3036;
                    frontier_phi_66_pred_4 = _3035;
                    frontier_phi_66_pred_5 = _3034;
                }
                else
                {
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    uint _3184;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3048;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    for (;;)
                    {
                        uint _3188 = uint(findLSB(_3184)) + (_3039 << 5u);
                        uint _3185 = (_3184 + 4294967295u) & _3184;
                        uint _3190 = _3188 * 48u;
                        vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 3u)).x));
                        uint _3210 = (_3188 * 48u) + 4u;
                        vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3210)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 3u)).x));
                        uint _3229 = (_3188 * 48u) + 8u;
                        vec3 _3240 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3229)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 2u)).x));
                        float _3244 = _3204.x - _2733;
                        float _3245 = _3204.y - _2734;
                        float _3246 = _3204.z - _2735;
                        float _3247 = dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246));
                        float _3250 = inversesqrt(_3247);
                        float _3251 = _3250 * _3244;
                        float _3252 = _3250 * _3245;
                        float _3253 = _3250 * _3246;
                        float _3254 = dot(vec3(_1008, _1011, _1014), vec3(_3251, _3252, _3253));
                        float _3259 = 1.0 - (_3247 * _3204.w);
                        float _4692 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3260 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                        float _3261 = sqrt(_3247) * _3223.w;
                        float _3264 = 1.39999997615814208984375 / (_3261 + 1.39999997615814208984375);
                        float _3265 = _3264 * _3264;
                        float _3268 = ((1.0 - _3265) * _3254) + _3265;
                        float _3271 = _3261 * _3261;
                        float _3275 = ((isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))) * _3260) / ((_3271 * 0.699999988079071044921875) + 1.0);
                        float _3279 = (-0.0) - _2733;
                        float _3280 = (-0.0) - _2734;
                        float _3281 = (-0.0) - _2735;
                        float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                        float _3286 = _3285 * _3279;
                        float _3287 = _3285 * _3280;
                        float _3288 = _3285 * _3281;
                        float _3296 = exp2(log2(1.0 / ((_3271 * 3.5) + 5.0)) * 0.25);
                        float _3297 = 1.0 - _1068;
                        float _3304 = sqrt(1.0 - ((1.0 - (_3297 * _3297)) * (1.0 - (_3296 * _3296))));
                        float _3305 = _3304 * _3304;
                        float _3306 = _3305 * _3305;
                        float _3307 = _3286 + _3251;
                        float _3308 = _3287 + _3252;
                        float _3309 = _3288 + _3253;
                        float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                        float _3317 = dot(vec3(_1008, _1011, _1014), vec3(_3286, _3287, _3288));
                        float _4708 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3320 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                        float _3321 = dot(vec3(_1008, _1011, _1014), vec3(_3313 * _3307, _3313 * _3308, _3313 * _3309));
                        float _4719 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3324 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                        float _3328 = ((_3324 * _3324) * (_3306 + (-1.0))) + 1.0;
                        float _3329 = _3264 * _3305;
                        float _3330 = _3329 * _3329;
                        float _3333 = ((1.0 - _3330) * _3254) + _3330;
                        float _4730 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3334 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                        float _3335 = 1.0 - _3305;
                        float _3345 = (0.5 / (((_3334 * ((_3320 * _3335) + _3305)) + 9.9999999392252902907785028219223e-09) + (((_3334 * _3335) + _3305) * _3320))) * _3334;
                        float _4741 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                        float _3356 = (((_3306 * 3.1415927410125732421875) * (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) / ((_3328 * _3328) * ((_3271 * 2.1991131305694580078125) + 3.141590118408203125))) * _3260;
                        _3108 = (_3275 * _3223.x) + _3181;
                        _3109 = (_3275 * _3223.y) + _3182;
                        _3110 = (_3275 * _3223.z) + _3183;
                        _3105 = (_3356 * _3240.x) + _3178;
                        _3106 = (_3356 * _3240.y) + _3179;
                        _3107 = (_3356 * _3240.z) + _3180;
                        if (_3185 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3185;
                        }
                    }
                    frontier_phi_66_pred = _3105;
                    frontier_phi_66_pred_1 = _3110;
                    frontier_phi_66_pred_2 = _3109;
                    frontier_phi_66_pred_3 = _3108;
                    frontier_phi_66_pred_4 = _3107;
                    frontier_phi_66_pred_5 = _3106;
                }
                _2881 = frontier_phi_66_pred;
                _2891 = frontier_phi_66_pred_1;
                _2889 = frontier_phi_66_pred_2;
                _2887 = frontier_phi_66_pred_3;
                _2885 = frontier_phi_66_pred_4;
                _2883 = frontier_phi_66_pred_5;
                uint _3040 = _3039 + 1u;
                if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3033 = _2881;
                    _3034 = _2883;
                    _3035 = _2885;
                    _3036 = _2887;
                    _3037 = _2889;
                    _3038 = _2891;
                    _3039 = _3040;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
            _2890 = _2891;
        }
        uvec4 _2894 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2895 = _2894.z;
        uint _2897 = (_2895 >> 8u) & 15u;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        if (((4294967295u << _2897) & _2779) == 0u)
        {
            _3001 = _2880;
            _3003 = _2882;
            _3005 = _2884;
            _3007 = _2886;
            _3009 = _2888;
            _3011 = _2890;
        }
        else
        {
            float _3026 = inversesqrt(dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735)));
            float _3027 = _3026 * _2733;
            float _3028 = _3026 * _2734;
            float _3029 = _3026 * _2735;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2897 < ((_2895 >> 12u) & 15u))
            {
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3161 = _2880;
                float _3162 = _2882;
                float _3163 = _2884;
                float _3164 = _2886;
                float _3165 = _2888;
                float _3166 = _2890;
                uint _3167 = _2897;
                uint _3176;
                bool _3177;
                for (;;)
                {
                    _3176 = texelFetch(g_lightClassification, int((((_2773 << 5u) + (_2759 << 9u)) + (_3167 << 2u)) >> 2u)).x;
                    _3177 = _3176 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3177)
                    {
                        frontier_phi_77_pred = _3166;
                        frontier_phi_77_pred_1 = _3165;
                        frontier_phi_77_pred_2 = _3164;
                        frontier_phi_77_pred_3 = _3163;
                        frontier_phi_77_pred_4 = _3162;
                        frontier_phi_77_pred_5 = _3161;
                    }
                    else
                    {
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3383 = _3161;
                        float _3384 = _3162;
                        float _3385 = _3163;
                        float _3386 = _3164;
                        float _3387 = _3165;
                        float _3388 = _3166;
                        uint _3389 = _3176;
                        uint _3390;
                        vec4 _3415;
                        float _3416;
                        vec4 _3431;
                        vec3 _3443;
                        vec4 _3458;
                        vec4 _3473;
                        float _3519;
                        bool _3520;
                        for (;;)
                        {
                            uint _3400 = ((_3167 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3389));
                            _3390 = (_3389 + 4294967295u) & _3389;
                            uint _3402 = _3400 * 40u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            _3416 = _3415.w;
                            uint _3418 = (_3400 * 40u) + 4u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3400 * 40u) + 8u;
                            _3443 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x));
                            uint _3445 = (_3400 * 40u) + 16u;
                            _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3460 = (_3400 * 40u) + 20u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3400 * 40u) + 24u;
                            vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3494 = (_3400 * 40u) + 28u;
                            vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3519 = fma(_2735, _3507.z, fma(_2734, _3507.y, _3507.x * _2733)) + _3507.w;
                            _3520 = !((fma(_2735, _3488.z, fma(_2734, _3488.y, _3488.x * _2733)) + _3488.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3520)
                            {
                                float _3547 = _3415.x - _2733;
                                float _3548 = _3415.y - _2734;
                                float _3549 = _3415.z - _2735;
                                float _3550 = dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549));
                                float _3553 = inversesqrt(_3550);
                                float _3554 = _3553 * _3547;
                                float _3555 = _3553 * _3548;
                                float _3556 = _3553 * _3549;
                                float _3560 = 1.0 - (_3550 / (_3416 * _3416));
                                float _4752 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3561 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                                float _3565 = sqrt(_3550) * _3431.w;
                                float _3567 = 1.39999997615814208984375 / (_3565 + 1.39999997615814208984375);
                                float _3568 = _3567 * _3567;
                                float _3571 = ((1.0 - _3568) * dot(vec3(_3554, _3555, _3556), vec3(_1008, _1011, _1014))) + _3568;
                                float _3574 = _3565 * _3565;
                                float _3578 = (fma(_2735, _3458.z, fma(_2734, _3458.y, _3458.x * _2733)) + _3458.w) / _3519;
                                float _3579 = (fma(_2735, _3473.z, fma(_2734, _3473.y, _3473.x * _2733)) + _3473.w) / _3519;
                                float _3583 = 1.0 - dot(vec2(_3578, _3579), vec2(_3578, _3579));
                                float _4768 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3585 = _3584 * (((isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0))) * _3561) / ((_3574 * 0.699999988079071044921875) + 1.0));
                                float _3597 = exp2(log2(1.0 / ((_3574 * 3.5) + 5.0)) * 0.25);
                                float _3598 = 1.0 - _1068;
                                float _3605 = sqrt(1.0 - ((1.0 - (_3598 * _3598)) * (1.0 - (_3597 * _3597))));
                                float _3606 = _3605 * _3605;
                                float _3607 = _3606 * _3606;
                                float _3608 = _3554 - _3027;
                                float _3609 = _3555 - _3028;
                                float _3610 = _3556 - _3029;
                                float _3614 = inversesqrt(dot(vec3(_3608, _3609, _3610), vec3(_3608, _3609, _3610)));
                                float _3618 = dot(vec3(_1008, _1011, _1014), vec3((-0.0) - _3027, (-0.0) - _3028, (-0.0) - _3029));
                                float _4779 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
                                float _3622 = dot(vec3(_1008, _1011, _1014), vec3(_3614 * _3608, _3614 * _3609, _3614 * _3610));
                                float _4790 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
                                float _3629 = ((_3625 * _3625) * (_3607 + (-1.0))) + 1.0;
                                float _3630 = _3567 * _3606;
                                float _3631 = _3630 * _3630;
                                float _3637 = ((1.0 - _3631) * dot(vec3(_1008, _1011, _1014), vec3(_3554, _3555, _3556))) + _3631;
                                float _4801 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3639 = 1.0 - _3606;
                                float _3649 = (0.5 / (((_3638 * ((_3621 * _3639) + _3606)) + 9.9999999392252902907785028219223e-09) + (((_3638 * _3639) + _3606) * _3621))) * _3638;
                                float _4812 = isnan(0.0) ? _3649 : (isnan(_3649) ? 0.0 : max(_3649, 0.0));
                                float _3659 = (_3584 * _3561) * (((_3607 * 3.1415927410125732421875) * (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0)))) / ((_3629 * _3629) * ((_3574 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3585 * _3431.y;
                                frontier_phi_83_pred_1 = _3585 * _3431.x;
                                frontier_phi_83_pred_2 = _3659 * _3443.z;
                                frontier_phi_83_pred_3 = _3659 * _3443.y;
                                frontier_phi_83_pred_4 = _3659 * _3443.x;
                                frontier_phi_83_pred_5 = _3585 * _3431.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3667 = frontier_phi_83_pred;
                            _3666 = frontier_phi_83_pred_1;
                            _3665 = frontier_phi_83_pred_2;
                            _3664 = frontier_phi_83_pred_3;
                            _3663 = frontier_phi_83_pred_4;
                            _3668 = frontier_phi_83_pred_5;
                            _3373 = _3666 + _3386;
                            _3374 = _3667 + _3387;
                            _3375 = _3668 + _3388;
                            _3370 = _3663 + _3383;
                            _3371 = _3664 + _3384;
                            _3372 = _3665 + _3385;
                            if (_3390 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3390;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3375;
                        frontier_phi_77_pred_1 = _3374;
                        frontier_phi_77_pred_2 = _3373;
                        frontier_phi_77_pred_3 = _3372;
                        frontier_phi_77_pred_4 = _3371;
                        frontier_phi_77_pred_5 = _3370;
                    }
                    _3012 = frontier_phi_77_pred;
                    _3010 = frontier_phi_77_pred_1;
                    _3008 = frontier_phi_77_pred_2;
                    _3006 = frontier_phi_77_pred_3;
                    _3004 = frontier_phi_77_pred_4;
                    _3002 = frontier_phi_77_pred_5;
                    uint _3168 = _3167 + 1u;
                    if (_3168 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3161 = _3002;
                        _3162 = _3004;
                        _3163 = _3006;
                        _3164 = _3008;
                        _3165 = _3010;
                        _3166 = _3012;
                        _3167 = _3168;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3006;
                frontier_phi_58_59_ladder_1 = _3012;
                frontier_phi_58_59_ladder_2 = _3010;
                frontier_phi_58_59_ladder_3 = _3008;
                frontier_phi_58_59_ladder_4 = _3004;
                frontier_phi_58_59_ladder_5 = _3002;
            }
            else
            {
                frontier_phi_58_59_ladder = _2884;
                frontier_phi_58_59_ladder_1 = _2890;
                frontier_phi_58_59_ladder_2 = _2888;
                frontier_phi_58_59_ladder_3 = _2886;
                frontier_phi_58_59_ladder_4 = _2882;
                frontier_phi_58_59_ladder_5 = _2880;
            }
            _3001 = frontier_phi_58_59_ladder_5;
            _3003 = frontier_phi_58_59_ladder_4;
            _3005 = frontier_phi_58_59_ladder;
            _3007 = frontier_phi_58_59_ladder_3;
            _3009 = frontier_phi_58_59_ladder_2;
            _3011 = frontier_phi_58_59_ladder_1;
        }
        float _3016 = isnan(1.0) ? _1052 : (isnan(_1052) ? 1.0 : min(_1052, 1.0));
        _2792 = (_3016 * _3007) + _2247;
        _2794 = (_3016 * _3009) + _2249;
        _2796 = (_3016 * _3011) + _2251;
        _2798 = ((_3001 * 0.039999999105930328369140625) * _3016) + _2577;
        _2800 = ((_3003 * 0.039999999105930328369140625) * _3016) + _2579;
        _2802 = ((_3005 * 0.039999999105930328369140625) * _3016) + _2581;
    }
    else
    {
        _2792 = _2247;
        _2794 = _2249;
        _2796 = _2251;
        _2798 = _2577;
        _2800 = _2579;
        _2802 = _2581;
    }
    float _4828 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _4839 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _4850 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _2819 = ((isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2792 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1052))) + ((_2798 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1887)) * cbPerFrame._m0[3u].x);
    float _2820 = ((isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0))) * (_2794 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1052))) + ((_2800 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1887)) * cbPerFrame._m0[3u].x);
    float _2821 = ((isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_2796 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1052))) + ((_2802 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1887)) * cbPerFrame._m0[3u].x);
    uint _2822 = _283 + 6u;
    float _2830 = _989 / cbSceneParam._m0[86u].x;
    float _2831 = _990 / cbSceneParam._m0[86u].y;
    vec4 _2845 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, (log2((isnan(cbSceneParam._m0[77u].w) ? _911 : (isnan(_911) ? cbSceneParam._m0[77u].w : min(_911, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2847 = _2845.x;
    float _2848 = _2845.y;
    float _2849 = _2845.z;
    float _2850 = _2845.w;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    if (_911 > cbSceneParam._m0[78u].w)
    {
        float _2905 = isnan(_911) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _911 : min(cbSceneParam._m0[80u].w, _911));
        float _2906 = _2905 / _911;
        float _2917 = _2906 * _962;
        float _2918 = _963 * _2906;
        float _2919 = (-0.0) - _2918;
        float _2921 = _2906 * _964;
        float _2923 = (cbSceneParam._m0[77u].w * _2919) / _2905;
        float _2924 = _2923 + cbSceneParam._m0[79u].w;
        float _2925 = cbSceneParam._m0[79u].w - _2918;
        float _2931 = sqrt(((_2917 * _2917) + (_2918 * _2918)) + (_2921 * _2921));
        float _2934 = (1.0 - (cbSceneParam._m0[77u].w / _2905)) * _2931;
        float _2939 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2941 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3118;
        if (abs((_2919 - _2923) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3118 = ((((_2924 > 0.0) ? exp2(_2939 * _2924) : (2.0 - exp2(_2941 * _2924))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2934;
        }
        else
        {
            float _3062 = 1.0 / cbSceneParam._m0[80u].x;
            float _3063 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : max(_2924, _2925));
            float _3064 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : min(_2924, _2925));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            float _3074 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : min(_3064, 0.0));
            _3118 = ((abs(_2931 / _2919) * cbSceneParam._m0[80u].y) * ((((_3073 - _3074) * 2.0) - ((exp2(_2939 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0)))) - exp2(_2939 * (isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))))) * _3062)) - ((exp2(_2941 * _3073) - exp2(_2941 * _3074)) * _3062))) + (_2934 * cbSceneParam._m0[80u].z);
        }
        vec4 _3120 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2830, _2831, 1.0), 0.0);
        float _3129 = exp2((_3118 * (-1.44269502162933349609375)) * (1.0 - _3120.w));
        float _3130 = log2(_3129);
        float _3146 = log2(_2850);
        _2943 = (exp2(_3146 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].x)) * _3120.x) / cbSceneParam._m0[78u].x)) + _2847;
        _2945 = (exp2(_3146 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].y)) * _3120.y) / cbSceneParam._m0[78u].y)) + _2848;
        _2947 = (exp2(_3146 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].z)) * _3120.z) / cbSceneParam._m0[78u].z)) + _2849;
        _2949 = _3129 * _2850;
    }
    else
    {
        _2943 = _2847;
        _2945 = _2848;
        _2947 = _2849;
        _2949 = _2850;
    }
    bool _3156;
    vec4 _2959;
    vec4 _2981;
    float _2983;
    float _2987;
    float _2988;
    float _2989;
    float _2990;
    bool _3000;
    for (;;)
    {
        _2959 = cbMatDynParam._m0[0u];
        float _2961 = roundEven(_2959.y);
        bool _2962 = _2961 == 3.0;
        float _2963 = log2(_2949);
        float _2970 = exp2(_2963 * cbSceneParam._m0[78u].x) * _2819;
        float _2971 = exp2(_2963 * cbSceneParam._m0[78u].y) * _2820;
        float _2972 = exp2(_2963 * cbSceneParam._m0[78u].z) * _2821;
        float _2979 = _978 + (-0.5);
        _2981 = cbMtdParam._m0[1u];
        _2983 = _2981.y * _2979;
        float _2986 = (_2961 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2987 = _2986 * (_2962 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2943)));
        _2988 = _2986 * (_2962 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2945)));
        _2989 = _2986 * (_2962 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2947)));
        _2990 = _2979 * 0.999000012874603271484375;
        _3000 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3000)
        {
            if ((cbInstanceData._m0[_283 + 7u].x + _2990) < 0.5)
            {
                _3156 = true;
                break;
            }
        }
        uint _3097 = _1027 + uint(_2959.w);
        if ((cbInstanceData._m0[_3097].w < 1.0) && ((cbInstanceData._m0[_3097].w + _2990) < 0.5))
        {
            _3156 = true;
            break;
        }
        if ((_2983 + 1.0) < _2981.x)
        {
            _3156 = true;
            break;
        }
        _3156 = false;
        break;
    }
    float _3361;
    if (_3156)
    {
        discard_state = true;
        _3361 = 0.0;
    }
    else
    {
        _3361 = cbInstanceData._m0[_2822].w;
    }
    SV_Target.x = _2987;
    SV_Target.y = _2988;
    SV_Target.z = _2989;
    SV_Target.w = _3361;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2822].w;
    discard_exit();
}


