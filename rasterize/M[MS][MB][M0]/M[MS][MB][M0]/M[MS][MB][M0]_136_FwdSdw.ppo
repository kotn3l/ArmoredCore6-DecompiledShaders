#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1332;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3919 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3930 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3941 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _410 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _410) * cbMtdParam._m0[24u].x) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3952 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _435 = (_428 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _436 = (_428 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _437 = (_428 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) + _447;
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _298) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _299) + cbTextureTilingScale._m0[14u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _541 = _537.z;
    float _550 = ((_520.z - _541) * _428) + _541;
    float _553 = ((((_520.x - _539) * _428) + _539) * 2.0) + (-1.0);
    float _554 = ((((_520.y - _540) * _428) + _540) * 2.0) + (-1.0);
    float _555 = dot(vec2(_553, _554), vec2(_553, _554));
    float _3963 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _560 = sqrt(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))));
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _601 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _603 = _601.x;
    float _604 = 1.0 - _603;
    float _610 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _613 = ((isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : min(_610, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _622 = (_613 - ((((((_603 - _604) * cbMtdParam._m0[24u].z) + _604) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _613))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3984 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _623 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _630 = (_623 * ((_475.x * cbMtdParam._m0[18u].x) - _454)) + _454;
    float _631 = (_623 * ((_475.y * cbMtdParam._m0[18u].y) - _455)) + _455;
    float _632 = (_623 * ((_475.z * cbMtdParam._m0[18u].z) - _456)) + _456;
    vec4 _644 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _646 = _644.x;
    float _647 = 1.0 - _646;
    float _672 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_646 - _647) * cbMtdParam._m0[24u].w) + _647) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3995 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _673 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _681 = ((((cbMtdParam._m0[10u].x - _630) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _673) + _630;
    float _682 = ((((cbMtdParam._m0[10u].y - _631) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _673) + _631;
    float _683 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _632)) * _673) + _632;
    float _688 = (((_495.z - _550) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _550;
    float _692 = ((_576.z - _688) * cbMtdParam._m0[19u].w) + _688;
    vec4 _706 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _713 = (_706.x * 2.0) + (-1.0);
    float _714 = (_706.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _4006 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _723 = (_623 * (_706.z - _692)) + _692;
    float _726 = ((cbMtdParam._m0[23u].y - _723) * _673) + _723;
    vec4 _745 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _751 = (_745.x * 2.0) + (-1.0);
    float _752 = (_745.y * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _4017 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _767 = (_553 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_495.x * 2.0) + (-1.0)))) + (((_576.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _768 = (_554 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_495.y * 2.0) + (-1.0)))) + (((_576.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _780 = (((_713 - _767) + (cbMtdParam._m0[21u].x * _767)) * _623) + _767;
    float _781 = (((_714 - _768) + (cbMtdParam._m0[21u].x * _768)) * _623) + _768;
    float _782 = (_623 * (sqrt(1.0 - (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) - _560)) + _560;
    float _793 = (((_751 - _780) + (_780 * cbMtdParam._m0[22u].z)) * _673) + _780;
    float _794 = (((_752 - _781) + (_781 * cbMtdParam._m0[22u].z)) * _673) + _781;
    float _795 = ((sqrt(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) - _782) * _673) + _782;
    float _797 = cbMtdParam._m0[22u].x + _576.w;
    float _800 = fma(_795, _247 * NORMAL.x, fma(_794, _254 * TANGENT.x, (_240 * _232) * _793));
    float _803 = fma(_795, _247 * NORMAL.y, fma(_794, _254 * TANGENT.y, (_240 * _233) * _793));
    float _806 = fma(_795, _247 * NORMAL.z, fma(_794, _254 * TANGENT.z, (_240 * _234) * _793));
    float _810 = inversesqrt(dot(vec3(_800, _803, _806), vec3(_800, _803, _806)));
    float _811 = _810 * _800;
    float _812 = _810 * _803;
    float _813 = _810 * _806;
    float _4028 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _814 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _4039 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4050 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _4061 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4072 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _832 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _873 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _883 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _873);
    float _884 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _873);
    float _885 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _873);
    float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
    float _890 = _883 * _889;
    float _891 = _884 * _889;
    float _892 = _885 * _889;
    float _898 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _899 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _917 = fma(_813, cbSceneParam._m0[5u].z, fma(_812, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _811));
    float _920 = fma(_813, cbSceneParam._m0[6u].z, fma(_812, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _811));
    float _923 = fma(_813, cbSceneParam._m0[7u].z, fma(_812, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _811));
    uint _937 = (_279 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _943 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * cbInstanceData._m0[_937].x;
    float _944 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * cbInstanceData._m0[_937].y;
    float _945 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * cbInstanceData._m0[_937].z;
    float _4083 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    vec4 _957 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _898, cbSceneParam._m0[86u].y * _899));
    float _961 = ((isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * TEXCOORD_5.w) * _957.x;
    float _962 = dot(vec3(_811, _812, _813), vec3(_890, _891, _892));
    float _965 = _962 * 2.0;
    float _969 = (_965 * _811) - _890;
    float _970 = (_965 * _812) - _891;
    float _971 = (_965 * _813) - _892;
    float _975 = abs(dot(vec3(_890, _891, _892), vec3(_811, _812, _813)));
    float _4116 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _977 = sqrt(_814);
    float _990 = exp2((_977 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_977 * 3.0));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1331;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1056 = fma(_1030, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022));
        float _1060 = fma(_1030, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022));
        float _1064 = fma(_1030, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022));
        float _1089 = _1022 + _811;
        float _1090 = _1026 + _812;
        float _1091 = _1030 + _813;
        float _1101 = fma(_1091, cbModelParam._m0[26u].z, fma(_1090, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1089)) - _1056;
        float _1102 = fma(_1091, cbModelParam._m0[27u].z, fma(_1090, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1089)) - _1060;
        float _1103 = fma(_1091, cbModelParam._m0[28u].z, fma(_1090, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1089)) - _1064;
        float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
        float _1120 = ((_1107 * _1101) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1056 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1107 * _1102) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1060 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1107 * _1103) / cbModelParam._m0[34u].z) + ((((((_1064 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1120, _1121, _1122), 0.0);
        float _1159 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1125.x + (-0.5));
        float _1161 = _1159 * (_1125.y + (-0.5));
        float _1162 = _1159 * (_1125.z + (-0.5));
        float _1169 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1132.x + (-0.5));
        float _1171 = _1169 * (_1132.y + (-0.5));
        float _1172 = _1169 * (_1132.z + (-0.5));
        float _1179 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1139.x + (-0.5));
        float _1181 = _1179 * (_1139.y + (-0.5));
        float _1182 = _1179 * (_1139.z + (-0.5));
        float _1189 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1146.x + (-0.5));
        float _1191 = _1189 * (_1146.y + (-0.5));
        float _1192 = _1189 * (_1146.z + (-0.5));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = _1160 * 0.5;
        float _1197 = _1170 * 0.5;
        float _1198 = _1180 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1213 = (dot(vec3(_811, _812, _813), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1223 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _4164 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1225 + 1.0))) + _1230) * _1193;
        float _1240 = _1161 * 0.5;
        float _1241 = _1171 * 0.5;
        float _1242 = _1181 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_811, _812, _813), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4197 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1267 + 1.0))) + _1272) * _1194;
        float _1282 = _1162 * 0.5;
        float _1283 = _1172 * 0.5;
        float _1284 = _1182 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_811, _812, _813), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4230 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1309 + 1.0))) + _1314) * _1195;
        _1331 = _1162;
        _1333 = _1161;
        _1334 = _1160;
        _1335 = _1172;
        _1336 = _1171;
        _1337 = _1170;
        _1338 = _1182;
        _1339 = _1181;
        _1340 = _1180;
        _1341 = _1195;
        _1342 = _1194;
        _1343 = _1193;
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
    }
    else
    {
        _1331 = _1332;
        _1333 = _1332;
        _1334 = _1332;
        _1335 = _1332;
        _1336 = _1332;
        _1337 = _1332;
        _1338 = _1332;
        _1339 = _1332;
        _1340 = _1332;
        _1341 = _1332;
        _1342 = _1332;
        _1343 = _1332;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1371 = fma(_1030, cbModelParam._m0[30u].z, fma(_1026, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1022));
        float _1375 = fma(_1030, cbModelParam._m0[31u].z, fma(_1026, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1022));
        float _1379 = fma(_1030, cbModelParam._m0[32u].z, fma(_1026, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1022));
        float _1402 = _1022 + _811;
        float _1403 = _1026 + _812;
        float _1404 = _1030 + _813;
        float _1414 = fma(_1404, cbModelParam._m0[30u].z, fma(_1403, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1402)) - _1371;
        float _1415 = fma(_1404, cbModelParam._m0[31u].z, fma(_1403, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1402)) - _1375;
        float _1416 = fma(_1404, cbModelParam._m0[32u].z, fma(_1403, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1402)) - _1379;
        float _1420 = inversesqrt(dot(vec3(_1414, _1415, _1416), vec3(_1414, _1415, _1416)));
        float _1433 = ((_1420 * _1414) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1371 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1420 * _1415) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1375 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1420 * _1416) / cbModelParam._m0[35u].z) + ((((((_1379 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1433, _1434, _1435), 0.0);
        float _1470 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1437.x + (-0.5));
        float _1472 = _1470 * (_1437.y + (-0.5));
        float _1473 = _1470 * (_1437.z + (-0.5));
        float _1480 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1444.x + (-0.5));
        float _1482 = _1480 * (_1444.y + (-0.5));
        float _1483 = _1480 * (_1444.z + (-0.5));
        float _1490 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1451.x + (-0.5));
        float _1492 = _1490 * (_1451.y + (-0.5));
        float _1493 = _1490 * (_1451.z + (-0.5));
        float _1500 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1458.x + (-0.5));
        float _1502 = _1500 * (_1458.y + (-0.5));
        float _1503 = _1500 * (_1458.z + (-0.5));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = _1471 * 0.5;
        float _1508 = _1481 * 0.5;
        float _1509 = _1491 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_811, _812, _813), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4293 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1534 + 1.0))) + _1539) * _1504;
        float _1549 = _1472 * 0.5;
        float _1550 = _1482 * 0.5;
        float _1551 = _1492 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_811, _812, _813), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4326 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1576 + 1.0))) + _1581) * _1505;
        float _1591 = _1473 * 0.5;
        float _1592 = _1483 * 0.5;
        float _1593 = _1493 * 0.5;
        float _1594 = dot(vec3(_1591, _1592, _1593), vec3(_1591, _1592, _1593));
        float _1599 = (_1594 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1594);
        float _1607 = (dot(vec3(_811, _812, _813), vec3(_1599 * _1591, _1599 * _1592, _1599 * _1593)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1616 = sqrt(((_1592 * _1592) + (_1591 * _1591)) + (_1593 * _1593)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1618 = _1617 * 2.0;
        float _1622 = (1.0 - _1617) / (_1617 + 1.0);
        float _4359 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1632 = ((((1.0 - _1623) * (_1618 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1618 + 1.0))) + _1623) * _1506;
        _1640 = _1473;
        _1641 = _1472;
        _1642 = _1471;
        _1643 = _1483;
        _1644 = _1482;
        _1645 = _1481;
        _1646 = _1493;
        _1647 = _1492;
        _1648 = _1491;
        _1649 = _1506;
        _1650 = _1505;
        _1651 = _1504;
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)));
    }
    else
    {
        _1640 = _1332;
        _1641 = _1332;
        _1642 = _1332;
        _1643 = _1332;
        _1644 = _1332;
        _1645 = _1332;
        _1646 = _1332;
        _1647 = _1332;
        _1648 = _1332;
        _1649 = _1332;
        _1650 = _1332;
        _1651 = _1332;
        _1652 = 0.0;
        _1653 = 0.0;
        _1654 = 0.0;
    }
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1344)) + _1344;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1345)) + _1345;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1346)) + _1346;
    float _1687 = fma(_1666, cbSceneParam._m0[89u].z, fma(_1665, cbSceneParam._m0[89u].y, _1664 * cbSceneParam._m0[89u].x));
    float _1690 = fma(_1666, cbSceneParam._m0[90u].z, fma(_1665, cbSceneParam._m0[90u].y, _1664 * cbSceneParam._m0[90u].x));
    float _1693 = fma(_1666, cbSceneParam._m0[91u].z, fma(_1665, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1664));
    float _1708 = _969 * 0.5;
    float _1709 = _970 * 0.5;
    float _1710 = _971 * 0.5;
    float _1711 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1714 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1717 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1751;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1724 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1331, _1335, _1338, _1341));
        float _1728 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1732 = dot(vec4(_1708, _1709, _1710, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1739 = dot(vec4(cbModelParam._m0[39u]), vec4(_1708, _1709, _1710, 1.0));
        _1751 = dot(vec3(isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)), isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1751 = 1.0;
    }
    float _1762;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1753 = dot(vec4(cbModelParam._m0[40u]), vec4(_1708, _1709, _1710, 1.0));
        _1762 = dot(vec3(isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1753) ? 0.0 : (isnan(0.0) ? _1753 : max(0.0, _1753))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1762 = 1.0;
    }
    float _1766 = (_1762 * cbModelParam._m0[1u].x) + (_1751 * (1.0 - cbModelParam._m0[1u].x));
    float _1776 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _814);
    float _1777 = isnan(_1776) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1776 : min(cbModelParam._m0[25u].z, _1776));
    float _1857;
    float _1859;
    float _1861;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1824 = fma(_1030, cbModelParam._m0[13u].z, fma(_1026, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1022)) + cbModelParam._m0[13u].w;
        float _1828 = fma(_1030, cbModelParam._m0[14u].z, fma(_1026, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1022)) + cbModelParam._m0[14u].w;
        float _1832 = fma(_1030, cbModelParam._m0[15u].z, fma(_1026, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1022)) + cbModelParam._m0[15u].w;
        float _1835 = fma(_971, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969));
        float _1838 = fma(_971, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969));
        float _1841 = fma(_971, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969));
        float _1869;
        if (_1835 > 0.0)
        {
            _1869 = abs((1.0 - _1824) / _1835);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1824 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1869 = frontier_phi_14_12_ladder;
        }
        float _2038;
        if (_1838 > 0.0)
        {
            _2038 = abs((1.0 - _1828) / _1838);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1828 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2038 = frontier_phi_23_19_ladder;
        }
        float _2333;
        if (_1841 > 0.0)
        {
            _2333 = abs((1.0 - _1832) / _1841);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1832 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2333 = frontier_phi_35_30_ladder;
        }
        float _2335 = isnan(_2038) ? _1869 : (isnan(_1869) ? _2038 : min(_1869, _2038));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1835) + _1824;
        float _2341 = (_2336 * _1838) + _1828;
        float _2342 = (_2336 * _1841) + _1832;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2343;
        float _2347 = _2343 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 > _2347) || ((_2341 < _2345) || ((_2340 < _2345) || (_2340 > _2347))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2342, cbModelParam._m0[9u].z, fma(_2341, cbModelParam._m0[9u].y, _2340 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2342, cbModelParam._m0[10u].z, fma(_2341, cbModelParam._m0[10u].y, _2340 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2342, cbModelParam._m0[11u].z, fma(_2341, cbModelParam._m0[11u].y, _2340 * cbModelParam._m0[11u].x))), _1777);
            frontier_phi_13_35_ladder = _2487.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2487.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2487.x * cbModelParam._m0[1u].y;
        }
        _1857 = frontier_phi_13_35_ladder_2;
        _1859 = frontier_phi_13_35_ladder_1;
        _1861 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1845 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_969, _970, _971), _1777);
        _1857 = _1845.x * cbModelParam._m0[1u].y;
        _1859 = _1845.y * cbModelParam._m0[1u].y;
        _1861 = _1845.z * cbModelParam._m0[1u].y;
    }
    float _1865 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _814);
    float _1866 = isnan(_1865) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1865 : min(cbModelParam._m0[25u].w, _1865));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1919 = fma(_1030, cbModelParam._m0[21u].z, fma(_1026, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1022)) + cbModelParam._m0[21u].w;
        float _1923 = fma(_1030, cbModelParam._m0[22u].z, fma(_1026, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1022)) + cbModelParam._m0[22u].w;
        float _1927 = fma(_1030, cbModelParam._m0[23u].z, fma(_1026, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1022)) + cbModelParam._m0[23u].w;
        float _1930 = fma(_971, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969));
        float _1933 = fma(_971, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969));
        float _1936 = fma(_971, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969));
        float _2043;
        if (_1930 > 0.0)
        {
            _2043 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2043 = frontier_phi_25_21_ladder;
        }
        float _2360;
        if (_1933 > 0.0)
        {
            _2360 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2360 = frontier_phi_37_32_ladder;
        }
        float _2687;
        if (_1936 > 0.0)
        {
            _2687 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2687 = frontier_phi_47_44_ladder;
        }
        float _2689 = isnan(_2360) ? _2043 : (isnan(_2043) ? _2360 : min(_2043, _2360));
        float _2690 = isnan(_2687) ? _2689 : (isnan(_2689) ? _2687 : min(_2689, _2687));
        float _2694 = (_2690 * _1930) + _1919;
        float _2695 = (_2690 * _1933) + _1923;
        float _2696 = (_2690 * _1936) + _1927;
        float _2697 = _2690 * 9.9999997473787516355514526367188e-05;
        float _2698 = (-1.0) - _2697;
        float _2700 = _2697 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2696 > _2700) || ((_2696 < _2698) || ((_2695 > _2700) || ((_2695 < _2698) || ((_2694 < _2698) || (_2694 > _2700))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2814 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2696, cbModelParam._m0[17u].z, fma(_2695, cbModelParam._m0[17u].y, _2694 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2696, cbModelParam._m0[18u].z, fma(_2695, cbModelParam._m0[18u].y, _2694 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2696, cbModelParam._m0[19u].z, fma(_2695, cbModelParam._m0[19u].y, _2694 * cbModelParam._m0[19u].x))), _1866);
            frontier_phi_22_47_ladder = _2814.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2814.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2814.x * cbModelParam._m0[1u].z;
        }
        _1955 = frontier_phi_22_47_ladder_2;
        _1957 = frontier_phi_22_47_ladder_1;
        _1959 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_969, _970, _971), _1866);
        _1955 = _1939.x * cbModelParam._m0[1u].z;
        _1957 = _1939.y * cbModelParam._m0[1u].z;
        _1959 = _1939.z * cbModelParam._m0[1u].z;
    }
    float _1971 = ((((1.0 - _990) * ((_977 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_990 * _977)) * _961;
    float _1972 = _1971 * ((cbModelParam._m0[1u].w * (_1955 - _1857)) + _1857);
    float _1973 = _1971 * ((cbModelParam._m0[1u].w * (_1957 - _1859)) + _1859);
    float _1974 = _1971 * ((cbModelParam._m0[1u].w * (_1959 - _1861)) + _1861);
    float _1977 = fma(_1974, cbSceneParam._m0[89u].z, fma(_1973, cbSceneParam._m0[89u].y, _1972 * cbSceneParam._m0[89u].x));
    float _1980 = fma(_1974, cbSceneParam._m0[90u].z, fma(_1973, cbSceneParam._m0[90u].y, _1972 * cbSceneParam._m0[90u].x));
    float _1983 = fma(_1974, cbSceneParam._m0[91u].z, fma(_1973, cbSceneParam._m0[91u].y, _1972 * cbSceneParam._m0[91u].x));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2021 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2025 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2029 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2030 = _2017 / _2029;
    float _2031 = _2021 / _2029;
    float _2032 = _2025 / _2029;
    float _2179;
    float _2180;
    float _2181;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2059 = ((uint(_2032 > cbSceneParam._m0[59u].y) + uint(_2032 > cbSceneParam._m0[59u].x)) + uint(_2032 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2060 = _2059 + 43u;
        uint _2068 = _2059 + 44u;
        uint _2076 = _2059 + 45u;
        uint _2084 = _2059 + 46u;
        float _2095 = fma(_2029, cbSceneParam._m0[_2060].w, fma(_2025, cbSceneParam._m0[_2060].z, fma(_2021, cbSceneParam._m0[_2060].y, _2017 * cbSceneParam._m0[_2060].x)));
        float _2099 = fma(_2029, cbSceneParam._m0[_2068].w, fma(_2025, cbSceneParam._m0[_2068].z, fma(_2021, cbSceneParam._m0[_2068].y, _2017 * cbSceneParam._m0[_2068].x)));
        float _2107 = fma(_2029, cbSceneParam._m0[_2084].w, fma(_2025, cbSceneParam._m0[_2084].z, fma(_2021, cbSceneParam._m0[_2084].y, _2017 * cbSceneParam._m0[_2084].x)));
        float _2112 = cbSceneParam._m0[33u].z * _2107;
        float _2114 = cbSceneParam._m0[33u].w * _2107;
        float _2117 = fma(_2029, cbSceneParam._m0[_2076].w, fma(_2025, cbSceneParam._m0[_2076].z, fma(_2021, cbSceneParam._m0[_2076].y, _2017 * cbSceneParam._m0[_2076].x))) / _2107;
        float _2165 = (cbSceneParam._m0[33u].x - sqrt(((_2031 * _2031) + (_2030 * _2030)) + (_2032 * _2032))) * cbSceneParam._m0[33u].y;
        float _4485 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2172 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 + _2095) / _2107, (_2114 + _2099) / _2107), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2114 + _2095) / _2107, (_2099 - _2112) / _2107), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2095 - _2112) / _2107, (_2099 - _2114) / _2107), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2095 - _2114) / _2107, (_2112 + _2099) / _2107), _2117), 0.0)).x), vec4(0.25)));
        _2179 = 1.0 - (_2172 * cbSceneParam._m0[34u].x);
        _2180 = 1.0 - (_2172 * cbSceneParam._m0[34u].y);
        _2181 = 1.0 - (_2172 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2179 = 1.0;
        _2180 = 1.0;
        _2181 = 1.0;
    }
    float _2245;
    float _2247;
    float _2249;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2233 = fma(_2029, cbSceneParam._m0[63u].w, fma(_2025, cbSceneParam._m0[63u].z, fma(_2021, cbSceneParam._m0[63u].y, _2017 * cbSceneParam._m0[63u].x)));
        float _2234 = fma(_2029, cbSceneParam._m0[60u].w, fma(_2025, cbSceneParam._m0[60u].z, fma(_2021, cbSceneParam._m0[60u].y, _2017 * cbSceneParam._m0[60u].x))) / _2233;
        float _2235 = fma(_2029, cbSceneParam._m0[61u].w, fma(_2025, cbSceneParam._m0[61u].z, fma(_2021, cbSceneParam._m0[61u].y, _2017 * cbSceneParam._m0[61u].x))) / _2233;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2234 >= cbSceneParam._m0[64u].x) && (_2235 >= cbSceneParam._m0[64u].y)) && (_2234 <= cbSceneParam._m0[64u].z)) && (_2235 <= cbSceneParam._m0[64u].w))
        {
            float _2373 = fma(_2029, cbSceneParam._m0[62u].w, fma(_2025, cbSceneParam._m0[62u].z, fma(_2021, cbSceneParam._m0[62u].y, _2017 * cbSceneParam._m0[62u].x))) / _2233;
            float _2377 = isnan(cbSceneParam._m0[41u].w) ? _2373 : (isnan(_2373) ? cbSceneParam._m0[41u].w : max(_2373, cbSceneParam._m0[41u].w));
            float _2420 = (cbSceneParam._m0[33u].x - sqrt(((_2031 * _2031) + (_2030 * _2030)) + (_2032 * _2032))) * cbSceneParam._m0[33u].y;
            float _4501 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
            float _2427 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2234, cbSceneParam._m0[33u].w + _2235), _2377), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2234, _2235 - cbSceneParam._m0[33u].z), _2377), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2234 - cbSceneParam._m0[33u].z, _2235 - cbSceneParam._m0[33u].w), _2377), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2234 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2235), _2377), 0.0)).x), vec4(0.25)));
            float _2431 = 1.0 - (_2427 * cbSceneParam._m0[34u].x);
            float _2432 = 1.0 - (_2427 * cbSceneParam._m0[34u].y);
            float _2433 = 1.0 - (_2427 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2433) ? _2181 : (isnan(_2181) ? _2433 : min(_2181, _2433));
            frontier_phi_34_33_ladder_1 = isnan(_2432) ? _2180 : (isnan(_2180) ? _2432 : min(_2180, _2432));
            frontier_phi_34_33_ladder_2 = isnan(_2431) ? _2179 : (isnan(_2179) ? _2431 : min(_2179, _2431));
        }
        else
        {
            frontier_phi_34_33_ladder = _2181;
            frontier_phi_34_33_ladder_1 = _2180;
            frontier_phi_34_33_ladder_2 = _2179;
        }
        _2245 = frontier_phi_34_33_ladder_2;
        _2247 = frontier_phi_34_33_ladder_1;
        _2249 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2245 = _2179;
        _2247 = _2180;
        _2249 = _2181;
    }
    uvec4 _2254 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2256 = _2254.x * 14u;
    uint _2257 = _2256 + 13u;
    float _2264 = _961 + (-1.0);
    float _2269 = (cbLight._m0[_2257].x * _2264) + 1.0;
    float _2270 = (cbLight._m0[_2257].y * _2264) + 1.0;
    float _2271 = (cbLight._m0[_2257].z * _2264) + 1.0;
    float _2272 = (cbLight._m0[_2257].w * _2264) + 1.0;
    uint _2273 = _2256 + 5u;
    float _2279 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
    uint _2283 = _2256 + 4u;
    float _2292 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
    uint _2296 = _2256 | 1u;
    float _2307 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_811, _812, _813));
    float _2310 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_811, _812, _813));
    float _4537 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _4548 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2315 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * 0.3183098733425140380859375;
    float _2317 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * 0.3183098733425140380859375;
    float _2324 = ((cbLight._m0[_2273].x * _2279) * _2317) + (((cbLight._m0[_2283].x * _2245) * _2292) * _2315);
    float _2325 = ((_2279 * cbLight._m0[_2273].y) * _2317) + (((cbLight._m0[_2283].y * _2247) * _2292) * _2315);
    float _2326 = ((_2279 * cbLight._m0[_2273].z) * _2317) + (((cbLight._m0[_2283].z * _2249) * _2292) * _2315);
    uvec4 _2330 = floatBitsToUint(cbLight._m0[_2256 + 12u]);
    bool _2332 = _2330.x == 0u;
    float _2434;
    float _2436;
    float _2438;
    if (_2332)
    {
        _2434 = _2324;
        _2436 = _2325;
        _2438 = _2326;
    }
    else
    {
        uint _2442 = _2256 + 6u;
        float _2458 = (dot(vec3(cbLight._m0[_2256 + 2u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2459 = _2458 * _2458;
        float _4559 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2460 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2461 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
        _2434 = (((cbLight._m0[_2442].x * 0.3183098733425140380859375) * _2460) * _2461) + _2324;
        _2436 = (((cbLight._m0[_2442].y * 0.3183098733425140380859375) * _2460) * _2461) + _2325;
        _2438 = (((cbLight._m0[_2442].z * 0.3183098733425140380859375) * _2460) * _2461) + _2326;
    }
    bool _2441 = _2330.y == 0u;
    float _2496;
    float _2498;
    float _2500;
    if (_2441)
    {
        _2496 = _2434;
        _2498 = _2436;
        _2500 = _2438;
    }
    else
    {
        uint _2658 = _2256 + 7u;
        float _2674 = (dot(vec3(cbLight._m0[_2256 + 3u].xyz), vec3(_811, _812, _813)) * 0.5) + 0.5;
        float _2675 = _2674 * _2674;
        float _4575 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2676 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2677 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2496 = (((cbLight._m0[_2658].x * 0.3183098733425140380859375) * _2676) * _2677) + _2434;
        _2498 = (((cbLight._m0[_2658].y * 0.3183098733425140380859375) * _2676) * _2677) + _2436;
        _2500 = (((cbLight._m0[_2658].z * 0.3183098733425140380859375) * _2676) * _2677) + _2438;
    }
    uint _2503 = _2256 + 8u;
    float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _814) * 0.949999988079071044921875);
    float _2517 = _2516 * _2516;
    float _2518 = cbLight._m0[_2256].x + _890;
    float _2519 = cbLight._m0[_2256].y + _891;
    float _2520 = cbLight._m0[_2256].z + _892;
    float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
    float _2525 = _2524 * _2518;
    float _2526 = _2524 * _2519;
    float _2527 = _2524 * _2520;
    float _2528 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2256].xyz));
    float _4591 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    float _2531 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
    float _4602 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _2532 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2533 = dot(vec3(_811, _812, _813), vec3(_2525, _2526, _2527));
    float _4613 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2537 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2525, _2526, _2527));
    float _4624 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2541 = _2517 * _2517;
    float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
    float _2556 = (exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2557 = 1.0 - _2517;
    float _2568 = (0.5 / (((_2532 * ((_2531 * _2557) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2557) + _2517) * _2531))) * _2531;
    float _4635 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2570 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
    uint _2584 = _2256 + 9u;
    float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _814) * 0.949999988079071044921875);
    float _2596 = _2595 * _2595;
    float _2597 = cbLight._m0[_2296].x + _890;
    float _2598 = cbLight._m0[_2296].y + _891;
    float _2599 = cbLight._m0[_2296].z + _892;
    float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
    float _2604 = _2603 * _2597;
    float _2605 = _2603 * _2598;
    float _2606 = _2603 * _2599;
    float _2607 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2296].xyz));
    float _4646 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _2611 = dot(vec3(_811, _812, _813), vec3(_2604, _2605, _2606));
    float _4657 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2614 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
    float _2615 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2604, _2605, _2606));
    float _4668 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2619 = _2596 * _2596;
    float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
    float _2632 = (exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2633 = 1.0 - _2596;
    float _2643 = (0.5 / (((_2532 * ((_2610 * _2633) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2633) + _2596) * _2610))) * _2610;
    float _4679 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2645 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
    float _2655 = (((_2632 * cbLight._m0[_2584].x) * _2645) * _2279) + ((((cbLight._m0[_2503].x * _2245) * _2556) * _2570) * _2292);
    float _2656 = (((_2632 * cbLight._m0[_2584].y) * _2645) * _2279) + ((((cbLight._m0[_2503].y * _2247) * _2556) * _2570) * _2292);
    float _2657 = (((_2632 * cbLight._m0[_2584].z) * _2645) * _2279) + ((((cbLight._m0[_2503].z * _2249) * _2556) * _2570) * _2292);
    float _2713;
    float _2715;
    float _2717;
    if (_2332)
    {
        _2713 = _2655;
        _2715 = _2656;
        _2717 = _2657;
    }
    else
    {
        uint _2719 = _2256 + 2u;
        uint _2723 = _2256 + 10u;
        float _2737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2719].w)) * _814) * 0.949999988079071044921875);
        float _2738 = _2737 * _2737;
        float _2739 = cbLight._m0[_2719].x + _890;
        float _2740 = cbLight._m0[_2719].y + _891;
        float _2741 = cbLight._m0[_2719].z + _892;
        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
        float _2746 = _2745 * _2739;
        float _2747 = _2745 * _2740;
        float _2748 = _2745 * _2741;
        float _2749 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2719].xyz));
        float _4690 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2752 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2753 = dot(vec3(_811, _812, _813), vec3(_2746, _2747, _2748));
        float _4701 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2757 = dot(vec3(cbLight._m0[_2719].xyz), vec3(_2746, _2747, _2748));
        float _4712 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2761 = _2738 * _2738;
        float _2765 = ((_2756 * _2756) * (_2761 + (-1.0))) + 1.0;
        float _2774 = (exp2(log2(1.0 - (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2775 = 1.0 - _2738;
        float _2785 = (0.5 / (((_2532 * ((_2752 * _2775) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2775) + _2738) * _2752))) * _2752;
        float _4723 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
        float _2787 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2761 / ((_2765 * _2765) * 3.141590118408203125));
        float _2788 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
        _2713 = (((_2774 * cbLight._m0[_2723].x) * _2787) * _2788) + _2655;
        _2715 = (((_2774 * cbLight._m0[_2723].y) * _2787) * _2788) + _2656;
        _2717 = (((_2774 * cbLight._m0[_2723].z) * _2787) * _2788) + _2657;
    }
    float _2819;
    float _2821;
    float _2823;
    if (_2441)
    {
        _2819 = _2713;
        _2821 = _2715;
        _2823 = _2717;
    }
    else
    {
        uint _2830 = _2256 + 3u;
        uint _2834 = _2256 + 11u;
        float _2848 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2830].w)) * _814) * 0.949999988079071044921875);
        float _2849 = _2848 * _2848;
        float _2850 = cbLight._m0[_2830].x + _890;
        float _2851 = cbLight._m0[_2830].y + _891;
        float _2852 = cbLight._m0[_2830].z + _892;
        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
        float _2857 = _2856 * _2850;
        float _2858 = _2856 * _2851;
        float _2859 = _2856 * _2852;
        float _2860 = dot(vec3(_811, _812, _813), vec3(cbLight._m0[_2830].xyz));
        float _4739 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _2864 = dot(vec3(_811, _812, _813), vec3(_2857, _2858, _2859));
        float _4750 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2867 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
        float _2868 = dot(vec3(cbLight._m0[_2830].xyz), vec3(_2857, _2858, _2859));
        float _4761 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2872 = _2849 * _2849;
        float _2876 = ((_2867 * _2867) * (_2872 + (-1.0))) + 1.0;
        float _2885 = (exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2886 = 1.0 - _2849;
        float _2896 = (0.5 / (((_2532 * ((_2863 * _2886) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2532 * _2886) + _2849) * _2863))) * _2863;
        float _4772 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2898 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2872 / ((_2876 * _2876) * 3.141590118408203125));
        float _2899 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
        _2819 = (((_2885 * cbLight._m0[_2834].x) * _2898) * _2899) + _2713;
        _2821 = (((_2885 * cbLight._m0[_2834].y) * _2898) * _2899) + _2715;
        _2823 = (((_2885 * cbLight._m0[_2834].z) * _2898) * _2899) + _2717;
    }
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    float _2975;
    if (_2254.y == 0u)
    {
        uvec4 _2920 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2921 = _2920.x;
        uint _2932 = uint((float(_2920.y) * floor(float(uint(cbSceneParam._m0[85u].y * _899) / _2921))) + floor(float(uint(cbSceneParam._m0[85u].x * _898) / _2921)));
        float _2942 = (log2(_2032 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2943 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        uint _2946 = uint(isnan(14.0) ? _2943 : (isnan(_2943) ? 14.0 : min(_2943, 14.0)));
        uvec4 _2951 = texelFetch(g_lightClusterGridBuffer, int(((_2946 << 2u) + (_2932 << 6u)) >> 2u));
        uint _2952 = _2951.x;
        uint _2953 = _2920.z;
        float _3032;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        if (((((1u << ((_2953 >> 4u) & 15u)) + 4294967295u) & _2952) == 0u) || ((_2953 & 240u) == 0u))
        {
            _3032 = 0.0;
            _3034 = 0.0;
            _3036 = 0.0;
            _3038 = 0.0;
            _3040 = 0.0;
            _3042 = 0.0;
        }
        else
        {
            float _3033;
            float _3035;
            float _3037;
            float _3039;
            float _3041;
            float _3043;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            uint _3183 = 0u;
            uint _3192;
            bool _3193;
            for (;;)
            {
                _3192 = texelFetch(g_lightClassification, int((((_2946 << 5u) + (_2932 << 9u)) + (_3183 << 2u)) >> 2u)).x;
                _3193 = _3192 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3193)
                {
                    frontier_phi_66_pred = _3182;
                    frontier_phi_66_pred_1 = _3181;
                    frontier_phi_66_pred_2 = _3180;
                    frontier_phi_66_pred_3 = _3179;
                    frontier_phi_66_pred_4 = _3178;
                    frontier_phi_66_pred_5 = _3177;
                }
                else
                {
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    uint _3307;
                    _3301 = _3177;
                    _3302 = _3178;
                    _3303 = _3179;
                    _3304 = _3180;
                    _3305 = _3181;
                    _3306 = _3182;
                    _3307 = _3192;
                    float _3233;
                    float _3234;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    for (;;)
                    {
                        uint _3311 = uint(findLSB(_3307)) + (_3183 << 5u);
                        uint _3308 = (_3307 + 4294967295u) & _3307;
                        uint _3313 = _3311 * 48u;
                        vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 3u)).x));
                        uint _3333 = (_3311 * 48u) + 4u;
                        vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 3u)).x));
                        uint _3352 = (_3311 * 48u) + 8u;
                        vec3 _3363 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3352)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3352 + 2u)).x));
                        float _3367 = _3327.x - _2030;
                        float _3368 = _3327.y - _2031;
                        float _3369 = _3327.z - _2032;
                        float _3370 = dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369));
                        float _3373 = inversesqrt(_3370);
                        float _3374 = _3373 * _3367;
                        float _3375 = _3373 * _3368;
                        float _3376 = _3373 * _3369;
                        float _3377 = dot(vec3(_917, _920, _923), vec3(_3374, _3375, _3376));
                        float _3382 = 1.0 - (_3370 * _3327.w);
                        float _4798 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3384 = sqrt(_3370) * _3346.w;
                        float _3387 = 1.39999997615814208984375 / (_3384 + 1.39999997615814208984375);
                        float _3388 = _3387 * _3387;
                        float _3391 = ((1.0 - _3388) * _3377) + _3388;
                        float _3394 = _3384 * _3384;
                        float _3398 = ((isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0))) * _3383) / ((_3394 * 0.699999988079071044921875) + 1.0);
                        float _3402 = (-0.0) - _2030;
                        float _3403 = (-0.0) - _2031;
                        float _3404 = (-0.0) - _2032;
                        float _3408 = inversesqrt(dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404)));
                        float _3409 = _3408 * _3402;
                        float _3410 = _3408 * _3403;
                        float _3411 = _3408 * _3404;
                        float _3418 = exp2(log2(1.0 / ((_3394 * 3.5) + 5.0)) * 0.25);
                        float _3419 = 1.0 - _977;
                        float _3426 = sqrt(1.0 - ((1.0 - (_3419 * _3419)) * (1.0 - (_3418 * _3418))));
                        float _3427 = _3426 * _3426;
                        float _3428 = _3427 * _3427;
                        float _3429 = _3409 + _3374;
                        float _3430 = _3410 + _3375;
                        float _3431 = _3411 + _3376;
                        float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                        float _3439 = dot(vec3(_917, _920, _923), vec3(_3409, _3410, _3411));
                        float _4814 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3443 = dot(vec3(_917, _920, _923), vec3(_3435 * _3429, _3435 * _3430, _3435 * _3431));
                        float _4825 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3446 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                        float _3450 = ((_3446 * _3446) * (_3428 + (-1.0))) + 1.0;
                        float _3451 = _3387 * _3427;
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3377) + _3452;
                        float _4836 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3456 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                        float _3457 = 1.0 - _3427;
                        float _3467 = (0.5 / (((_3456 * ((_3442 * _3457) + _3427)) + 9.9999999392252902907785028219223e-09) + (((_3456 * _3457) + _3427) * _3442))) * _3456;
                        float _4847 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3478 = (((_3428 * 3.1415927410125732421875) * (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) / ((_3450 * _3450) * ((_3394 * 2.1991131305694580078125) + 3.141590118408203125))) * _3383;
                        _3236 = (_3398 * _3346.x) + _3304;
                        _3237 = (_3398 * _3346.y) + _3305;
                        _3238 = (_3398 * _3346.z) + _3306;
                        _3233 = (_3478 * _3363.x) + _3301;
                        _3234 = (_3478 * _3363.y) + _3302;
                        _3235 = (_3478 * _3363.z) + _3303;
                        if (_3308 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3301 = _3233;
                            _3302 = _3234;
                            _3303 = _3235;
                            _3304 = _3236;
                            _3305 = _3237;
                            _3306 = _3238;
                            _3307 = _3308;
                        }
                    }
                    frontier_phi_66_pred = _3238;
                    frontier_phi_66_pred_1 = _3237;
                    frontier_phi_66_pred_2 = _3236;
                    frontier_phi_66_pred_3 = _3235;
                    frontier_phi_66_pred_4 = _3234;
                    frontier_phi_66_pred_5 = _3233;
                }
                _3043 = frontier_phi_66_pred;
                _3041 = frontier_phi_66_pred_1;
                _3039 = frontier_phi_66_pred_2;
                _3037 = frontier_phi_66_pred_3;
                _3035 = frontier_phi_66_pred_4;
                _3033 = frontier_phi_66_pred_5;
                uint _3184 = _3183 + 1u;
                if (_3184 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3177 = _3033;
                    _3178 = _3035;
                    _3179 = _3037;
                    _3180 = _3039;
                    _3181 = _3041;
                    _3182 = _3043;
                    _3183 = _3184;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3032 = _3033;
            _3034 = _3035;
            _3036 = _3037;
            _3038 = _3039;
            _3040 = _3041;
            _3042 = _3043;
        }
        uvec4 _3046 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3047 = _3046.z;
        uint _3049 = (_3047 >> 8u) & 15u;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        if (((4294967295u << _3049) & _2952) == 0u)
        {
            _3145 = _3032;
            _3147 = _3034;
            _3149 = _3036;
            _3151 = _3038;
            _3153 = _3040;
            _3155 = _3042;
        }
        else
        {
            float _3170 = inversesqrt(dot(vec3(_2030, _2031, _2032), vec3(_2030, _2031, _2032)));
            float _3171 = _3170 * _2030;
            float _3172 = _3170 * _2031;
            float _3173 = _3170 * _2032;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3049 < ((_3047 >> 12u) & 15u))
            {
                float _3146;
                float _3148;
                float _3150;
                float _3152;
                float _3154;
                float _3156;
                float _3284 = _3032;
                float _3285 = _3034;
                float _3286 = _3036;
                float _3287 = _3038;
                float _3288 = _3040;
                float _3289 = _3042;
                uint _3290 = _3049;
                uint _3299;
                bool _3300;
                for (;;)
                {
                    _3299 = texelFetch(g_lightClassification, int((((_2946 << 5u) + (_2932 << 9u)) + (_3290 << 2u)) >> 2u)).x;
                    _3300 = _3299 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3300)
                    {
                        frontier_phi_72_pred = _3289;
                        frontier_phi_72_pred_1 = _3288;
                        frontier_phi_72_pred_2 = _3287;
                        frontier_phi_72_pred_3 = _3286;
                        frontier_phi_72_pred_4 = _3285;
                        frontier_phi_72_pred_5 = _3284;
                    }
                    else
                    {
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3496 = _3284;
                        float _3497 = _3285;
                        float _3498 = _3286;
                        float _3499 = _3287;
                        float _3500 = _3288;
                        float _3501 = _3289;
                        uint _3502 = _3299;
                        uint _3503;
                        vec4 _3528;
                        float _3529;
                        vec4 _3544;
                        vec3 _3556;
                        vec4 _3571;
                        vec4 _3586;
                        float _3632;
                        bool _3633;
                        for (;;)
                        {
                            uint _3513 = ((_3290 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3502));
                            _3503 = (_3502 + 4294967295u) & _3502;
                            uint _3515 = _3513 * 40u;
                            _3528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3515 + 3u)).x));
                            _3529 = _3528.w;
                            uint _3531 = (_3513 * 40u) + 4u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3513 * 40u) + 8u;
                            _3556 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x));
                            uint _3558 = (_3513 * 40u) + 16u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3513 * 40u) + 20u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            uint _3588 = (_3513 * 40u) + 24u;
                            vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3607 = (_3513 * 40u) + 28u;
                            vec4 _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            _3632 = fma(_2032, _3620.z, fma(_2031, _3620.y, _3620.x * _2030)) + _3620.w;
                            _3633 = !((fma(_2032, _3601.z, fma(_2031, _3601.y, _3601.x * _2030)) + _3601.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3633)
                            {
                                float _3660 = _3528.x - _2030;
                                float _3661 = _3528.y - _2031;
                                float _3662 = _3528.z - _2032;
                                float _3663 = dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662));
                                float _3666 = inversesqrt(_3663);
                                float _3667 = _3666 * _3660;
                                float _3668 = _3666 * _3661;
                                float _3669 = _3666 * _3662;
                                float _3673 = 1.0 - (_3663 / (_3529 * _3529));
                                float _4858 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3674 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3678 = sqrt(_3663) * _3544.w;
                                float _3680 = 1.39999997615814208984375 / (_3678 + 1.39999997615814208984375);
                                float _3681 = _3680 * _3680;
                                float _3684 = ((1.0 - _3681) * dot(vec3(_3667, _3668, _3669), vec3(_917, _920, _923))) + _3681;
                                float _3687 = _3678 * _3678;
                                float _3691 = (fma(_2032, _3571.z, fma(_2031, _3571.y, _3571.x * _2030)) + _3571.w) / _3632;
                                float _3692 = (fma(_2032, _3586.z, fma(_2031, _3586.y, _3586.x * _2030)) + _3586.w) / _3632;
                                float _3696 = 1.0 - dot(vec2(_3691, _3692), vec2(_3691, _3692));
                                float _4874 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3698 = _3697 * (((isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0))) * _3674) / ((_3687 * 0.699999988079071044921875) + 1.0));
                                float _3710 = exp2(log2(1.0 / ((_3687 * 3.5) + 5.0)) * 0.25);
                                float _3711 = 1.0 - _977;
                                float _3718 = sqrt(1.0 - ((1.0 - (_3711 * _3711)) * (1.0 - (_3710 * _3710))));
                                float _3719 = _3718 * _3718;
                                float _3720 = _3719 * _3719;
                                float _3721 = _3667 - _3171;
                                float _3722 = _3668 - _3172;
                                float _3723 = _3669 - _3173;
                                float _3727 = inversesqrt(dot(vec3(_3721, _3722, _3723), vec3(_3721, _3722, _3723)));
                                float _3731 = dot(vec3(_917, _920, _923), vec3((-0.0) - _3171, (-0.0) - _3172, (-0.0) - _3173));
                                float _4885 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3734 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
                                float _3735 = dot(vec3(_917, _920, _923), vec3(_3727 * _3721, _3727 * _3722, _3727 * _3723));
                                float _4896 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3738 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
                                float _3742 = ((_3738 * _3738) * (_3720 + (-1.0))) + 1.0;
                                float _3743 = _3680 * _3719;
                                float _3744 = _3743 * _3743;
                                float _3750 = ((1.0 - _3744) * dot(vec3(_917, _920, _923), vec3(_3667, _3668, _3669))) + _3744;
                                float _4907 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3751 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                                float _3752 = 1.0 - _3719;
                                float _3762 = (0.5 / (((_3751 * ((_3734 * _3752) + _3719)) + 9.9999999392252902907785028219223e-09) + (((_3751 * _3752) + _3719) * _3734))) * _3751;
                                float _4918 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3772 = (_3697 * _3674) * (((_3720 * 3.1415927410125732421875) * (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0)))) / ((_3742 * _3742) * ((_3687 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3698 * _3544.y;
                                frontier_phi_78_pred_1 = _3698 * _3544.x;
                                frontier_phi_78_pred_2 = _3772 * _3556.z;
                                frontier_phi_78_pred_3 = _3772 * _3556.y;
                                frontier_phi_78_pred_4 = _3772 * _3556.x;
                                frontier_phi_78_pred_5 = _3698 * _3544.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3780 = frontier_phi_78_pred;
                            _3779 = frontier_phi_78_pred_1;
                            _3778 = frontier_phi_78_pred_2;
                            _3777 = frontier_phi_78_pred_3;
                            _3776 = frontier_phi_78_pred_4;
                            _3781 = frontier_phi_78_pred_5;
                            _3486 = _3779 + _3499;
                            _3487 = _3780 + _3500;
                            _3488 = _3781 + _3501;
                            _3483 = _3776 + _3496;
                            _3484 = _3777 + _3497;
                            _3485 = _3778 + _3498;
                            if (_3503 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3503;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3488;
                        frontier_phi_72_pred_1 = _3487;
                        frontier_phi_72_pred_2 = _3486;
                        frontier_phi_72_pred_3 = _3485;
                        frontier_phi_72_pred_4 = _3484;
                        frontier_phi_72_pred_5 = _3483;
                    }
                    _3156 = frontier_phi_72_pred;
                    _3154 = frontier_phi_72_pred_1;
                    _3152 = frontier_phi_72_pred_2;
                    _3150 = frontier_phi_72_pred_3;
                    _3148 = frontier_phi_72_pred_4;
                    _3146 = frontier_phi_72_pred_5;
                    uint _3291 = _3290 + 1u;
                    if (_3291 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3284 = _3146;
                        _3285 = _3148;
                        _3286 = _3150;
                        _3287 = _3152;
                        _3288 = _3154;
                        _3289 = _3156;
                        _3290 = _3291;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3156;
                frontier_phi_60_61_ladder_1 = _3154;
                frontier_phi_60_61_ladder_2 = _3150;
                frontier_phi_60_61_ladder_3 = _3148;
                frontier_phi_60_61_ladder_4 = _3146;
                frontier_phi_60_61_ladder_5 = _3152;
            }
            else
            {
                frontier_phi_60_61_ladder = _3042;
                frontier_phi_60_61_ladder_1 = _3040;
                frontier_phi_60_61_ladder_2 = _3036;
                frontier_phi_60_61_ladder_3 = _3034;
                frontier_phi_60_61_ladder_4 = _3032;
                frontier_phi_60_61_ladder_5 = _3038;
            }
            _3145 = frontier_phi_60_61_ladder_4;
            _3147 = frontier_phi_60_61_ladder_3;
            _3149 = frontier_phi_60_61_ladder_2;
            _3151 = frontier_phi_60_61_ladder_5;
            _3153 = frontier_phi_60_61_ladder_1;
            _3155 = frontier_phi_60_61_ladder;
        }
        float _3160 = isnan(1.0) ? _961 : (isnan(_961) ? 1.0 : min(_961, 1.0));
        _2965 = (_3160 * _3151) + _2496;
        _2967 = (_3160 * _3153) + _2498;
        _2969 = (_3160 * _3155) + _2500;
        _2971 = ((_3145 * 0.039999999105930328369140625) * _3160) + _2819;
        _2973 = ((_3147 * 0.039999999105930328369140625) * _3160) + _2821;
        _2975 = ((_3149 * 0.039999999105930328369140625) * _3160) + _2823;
    }
    else
    {
        _2965 = _2496;
        _2967 = _2498;
        _2969 = _2500;
        _2971 = _2819;
        _2973 = _2821;
        _2975 = _2823;
    }
    float _4934 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4945 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4956 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    uint _2995 = _279 + 6u;
    float _3003 = _898 / cbSceneParam._m0[86u].x;
    float _3004 = _899 / cbSceneParam._m0[86u].y;
    vec4 _3018 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3003, _3004, (log2((isnan(cbSceneParam._m0[77u].w) ? _832 : (isnan(_832) ? cbSceneParam._m0[77u].w : min(_832, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3020 = _3018.x;
    float _3021 = _3018.y;
    float _3022 = _3018.z;
    float _3023 = _3018.w;
    float _3095;
    float _3097;
    float _3099;
    float _3101;
    if (_832 > cbSceneParam._m0[78u].w)
    {
        float _3057 = isnan(_832) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _832 : min(cbSceneParam._m0[80u].w, _832));
        float _3058 = _3057 / _832;
        float _3069 = _3058 * _883;
        float _3070 = _884 * _3058;
        float _3071 = (-0.0) - _3070;
        float _3073 = _3058 * _885;
        float _3075 = (cbSceneParam._m0[77u].w * _3071) / _3057;
        float _3076 = _3075 + cbSceneParam._m0[79u].w;
        float _3077 = cbSceneParam._m0[79u].w - _3070;
        float _3083 = sqrt(((_3069 * _3069) + (_3070 * _3070)) + (_3073 * _3073));
        float _3086 = (1.0 - (cbSceneParam._m0[77u].w / _3057)) * _3083;
        float _3091 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3093 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3246;
        if (abs((_3071 - _3075) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3246 = ((((_3076 > 0.0) ? exp2(_3091 * _3076) : (2.0 - exp2(_3093 * _3076))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3086;
        }
        else
        {
            float _3206 = 1.0 / cbSceneParam._m0[80u].x;
            float _3207 = isnan(_3077) ? _3076 : (isnan(_3076) ? _3077 : max(_3076, _3077));
            float _3208 = isnan(_3077) ? _3076 : (isnan(_3076) ? _3077 : min(_3076, _3077));
            float _3217 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : min(_3207, 0.0));
            float _3218 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : min(_3208, 0.0));
            _3246 = ((abs(_3083 / _3071) * cbSceneParam._m0[80u].y) * ((((_3217 - _3218) * 2.0) - ((exp2(_3091 * (isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0)))) - exp2(_3091 * (isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))))) * _3206)) - ((exp2(_3093 * _3217) - exp2(_3093 * _3218)) * _3206))) + (_3086 * cbSceneParam._m0[80u].z);
        }
        vec4 _3248 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3003, _3004, 1.0), 0.0);
        float _3257 = exp2((_3246 * (-1.44269502162933349609375)) * (1.0 - _3248.w));
        float _3258 = log2(_3257);
        float _3274 = log2(_3023);
        _3095 = (exp2(_3274 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3258 * cbSceneParam._m0[78u].x)) * _3248.x) / cbSceneParam._m0[78u].x)) + _3020;
        _3097 = (exp2(_3274 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3258 * cbSceneParam._m0[78u].y)) * _3248.y) / cbSceneParam._m0[78u].y)) + _3021;
        _3099 = (exp2(_3274 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3258 * cbSceneParam._m0[78u].z)) * _3248.z) / cbSceneParam._m0[78u].z)) + _3022;
        _3101 = _3257 * _3023;
    }
    else
    {
        _3095 = _3020;
        _3097 = _3021;
        _3099 = _3022;
        _3101 = _3023;
    }
    float _3113 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3114 = _3113 == 3.0;
    float _3115 = log2(_3101);
    float _3122 = exp2(_3115 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0))) * (_2965 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _961))) + ((_2971 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1766)) * cbPerFrame._m0[3u].x));
    float _3123 = exp2(_3115 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0))) * (_2967 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _961))) + ((_2973 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1766)) * cbPerFrame._m0[3u].x));
    float _3124 = exp2(_3115 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2969 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _961))) + ((_2975 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1766)) * cbPerFrame._m0[3u].x));
    float _3133 = (_3113 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3133 * (_3114 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3095)));
    SV_Target.y = _3133 * (_3114 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3097)));
    SV_Target.z = _3133 * (_3114 ? _3124 : (_3124 + (cbSceneParam._m0[72u].w * _3099)));
    SV_Target.w = cbInstanceData._m0[_2995].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2995].w;
}


