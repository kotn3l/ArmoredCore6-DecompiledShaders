#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1118;
float _3480;
float _3481;
float _3482;
float _3483;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _214 = _213 * _205;
    float _215 = _213 * _206;
    float _216 = _213 * _207;
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _228 = _227 * TANGENT.x;
    float _229 = _227 * TANGENT.y;
    float _230 = _227 * TANGENT.z;
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3492 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3503 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3514 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _259 = _254 + 1u;
    uint _263 = _254 + 2u;
    float _272 = sqrt(((cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x));
    float _273 = _272 * TEXCOORD.z;
    float _274 = _272 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _273) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _315 = _310.x * cbMtdParam._m0[9u].x;
    float _316 = _310.y * cbMtdParam._m0[9u].y;
    float _317 = _310.z * cbMtdParam._m0[9u].z;
    float _321 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _287.x) * _315;
    float _324 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _287.y) * _316;
    float _327 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _287.z) * _317;
    float _334 = ((_315 - _321) * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) + _321;
    float _335 = ((_316 - _324) * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) + _324;
    float _336 = ((_317 - _327) * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) + _327;
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _273) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _274) + cbTextureTilingScale._m0[20u].w));
    vec4 _380 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _384 = _380.z;
    float _388 = (_380.x * 2.0) + (-1.0);
    float _389 = (_380.y * 2.0) + (-1.0);
    float _390 = dot(vec2(_388, _389), vec2(_388, _389));
    float _3525 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _395 = sqrt(1.0 - (isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))));
    float _400 = _388 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_354.x * 2.0) + (-1.0)));
    float _401 = _389 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_354.y * 2.0) + (-1.0)));
    float _404 = fma(_395, _221, fma(_401, _228, _400 * _214));
    float _407 = fma(_395, _222, fma(_401, _229, _400 * _215));
    float _410 = fma(_395, _223, fma(_401, _230, _400 * _216));
    float _414 = inversesqrt(dot(vec3(_404, _407, _410), vec3(_404, _407, _410)));
    vec4 _450 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _273) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _274) + cbTextureTilingScale._m0[11u].w));
    float _452 = _450.x;
    float _453 = 1.0 - _452;
    float _460 = ((_452 - _453) * cbMtdParam._m0[24u].z) + _453;
    float _462 = (cbMtdParam._m0[19u].x + dot(vec4(_414 * _404, _414 * _407, _414 * _410, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_460 * cbMtdParam._m0[21u].z);
    float _3536 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _478 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_460 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3547 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _483 = ((_463 * (cbMtdParam._m0[17u].x - _334)) * _479) + _334;
    float _484 = ((_463 * (cbMtdParam._m0[17u].y - _335)) * _479) + _335;
    float _485 = ((_463 * (cbMtdParam._m0[17u].z - _336)) * _479) + _336;
    float _490 = (((_354.z - _384) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _384;
    vec4 _503 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _273) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _274) + cbTextureTilingScale._m0[15u].w));
    float _510 = (_503.x * 2.0) + (-1.0);
    float _511 = (_503.y * 2.0) + (-1.0);
    float _512 = dot(vec2(_510, _511), vec2(_510, _511));
    float _3558 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    float _521 = (((_503.z - _490) * _463) * _479) + _490;
    float _536 = (((cbMtdParam._m0[21u].x * _400) + ((_510 - _400) * _463)) * _479) + _400;
    float _537 = (((cbMtdParam._m0[21u].x * _401) + ((_511 - _401) * _463)) * _479) + _401;
    float _538 = (((sqrt(1.0 - (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) - _395) * _463) * _479) + _395;
    float _540 = cbMtdParam._m0[22u].x + _380.w;
    float _543 = fma(_538, _221, fma(_537, _228, _536 * _214));
    float _546 = fma(_538, _222, fma(_537, _229, _536 * _215));
    float _549 = fma(_538, _223, fma(_537, _230, _536 * _216));
    float _553 = inversesqrt(dot(vec3(_543, _546, _549), vec3(_543, _546, _549)));
    float _554 = _553 * _543;
    float _555 = _553 * _546;
    float _556 = _553 * _549;
    float _3569 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _557 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    float _3580 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3591 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3602 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3613 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _575 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _616 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _626 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _616);
    float _627 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _616);
    float _628 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _616);
    float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
    float _633 = _626 * _632;
    float _634 = _627 * _632;
    float _635 = _628 * _632;
    vec4 _640 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _642 = _640.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _799 = sqrt(((_626 * _626) + (_627 * _627)) + (_628 * _628));
        float _805 = (cbMatDynParam._m0[5u].x * _799) + cbMatDynParam._m0[5u].y;
        float _3624 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _810 = (cbMatDynParam._m0[5u].z * _799) + cbMatDynParam._m0[5u].w;
        float _3635 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) - _806)) + _806) < ((_642 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _654 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _655 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _675 = fma(_556, cbSceneParam._m0[5u].z, fma(_555, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _554));
    float _678 = fma(_556, cbSceneParam._m0[6u].z, fma(_555, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _554));
    float _681 = fma(_556, cbSceneParam._m0[7u].z, fma(_555, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _554));
    uint _694 = _254 + 9u;
    uint _695 = _694 + uint(cbMatDynParam._m0[0u].w);
    float _701 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * cbInstanceData._m0[_695].x;
    float _702 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_695].y;
    float _703 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_695].z;
    float _3646 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    vec4 _715 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _654, cbSceneParam._m0[86u].y * _655));
    float _719 = ((isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * TEXCOORD_5.w) * _715.x;
    float _720 = dot(vec3(_554, _555, _556), vec3(_633, _634, _635));
    float _723 = _720 * 2.0;
    float _727 = (_723 * _554) - _633;
    float _728 = (_723 * _555) - _634;
    float _729 = (_723 * _556) - _635;
    float _733 = abs(dot(vec3(_633, _634, _635), vec3(_554, _555, _556)));
    float _3679 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _735 = sqrt(_557);
    float _748 = exp2((_735 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_735 * 3.0));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _784 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1117;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _842 = fma(_788, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _780));
        float _846 = fma(_788, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _780));
        float _850 = fma(_788, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _780));
        float _875 = _780 + _554;
        float _876 = _784 + _555;
        float _877 = _788 + _556;
        float _887 = fma(_877, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875)) - _842;
        float _888 = fma(_877, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875)) - _846;
        float _889 = fma(_877, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875)) - _850;
        float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
        float _906 = ((_893 * _887) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_842 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_893 * _888) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_846 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_893 * _889) / cbModelParam._m0[34u].z) + ((((((_850 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        float _945 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_911.x + (-0.5));
        float _947 = _945 * (_911.y + (-0.5));
        float _948 = _945 * (_911.z + (-0.5));
        float _955 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_918.x + (-0.5));
        float _957 = _955 * (_918.y + (-0.5));
        float _958 = _955 * (_918.z + (-0.5));
        float _965 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_925.x + (-0.5));
        float _967 = _965 * (_925.y + (-0.5));
        float _968 = _965 * (_925.z + (-0.5));
        float _975 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_932.x + (-0.5));
        float _977 = _975 * (_932.y + (-0.5));
        float _978 = _975 * (_932.z + (-0.5));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = _946 * 0.5;
        float _983 = _956 * 0.5;
        float _984 = _966 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _999 = (dot(vec3(_554, _555, _556), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1009 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3727 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1011 + 1.0))) + _1016) * _979;
        float _1026 = _947 * 0.5;
        float _1027 = _957 * 0.5;
        float _1028 = _967 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_554, _555, _556), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3760 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1053 + 1.0))) + _1058) * _980;
        float _1068 = _948 * 0.5;
        float _1069 = _958 * 0.5;
        float _1070 = _968 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_554, _555, _556), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3793 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1095 + 1.0))) + _1100) * _981;
        _1117 = _948;
        _1119 = _947;
        _1120 = _946;
        _1121 = _958;
        _1122 = _957;
        _1123 = _956;
        _1124 = _968;
        _1125 = _967;
        _1126 = _966;
        _1127 = _981;
        _1128 = _980;
        _1129 = _979;
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
    }
    else
    {
        _1117 = _1118;
        _1119 = _1118;
        _1120 = _1118;
        _1121 = _1118;
        _1122 = _1118;
        _1123 = _1118;
        _1124 = _1118;
        _1125 = _1118;
        _1126 = _1118;
        _1127 = _1118;
        _1128 = _1118;
        _1129 = _1118;
        _1130 = 0.0;
        _1131 = 0.0;
        _1132 = 0.0;
    }
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1160 = fma(_788, cbModelParam._m0[30u].z, fma(_784, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _780));
        float _1164 = fma(_788, cbModelParam._m0[31u].z, fma(_784, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _780));
        float _1168 = fma(_788, cbModelParam._m0[32u].z, fma(_784, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _780));
        float _1191 = _780 + _554;
        float _1192 = _784 + _555;
        float _1193 = _788 + _556;
        float _1203 = fma(_1193, cbModelParam._m0[30u].z, fma(_1192, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191)) - _1160;
        float _1204 = fma(_1193, cbModelParam._m0[31u].z, fma(_1192, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191)) - _1164;
        float _1205 = fma(_1193, cbModelParam._m0[32u].z, fma(_1192, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191)) - _1168;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1160 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1164 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[35u].z) + ((((((_1168 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1259 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1226.x + (-0.5));
        float _1261 = _1259 * (_1226.y + (-0.5));
        float _1262 = _1259 * (_1226.z + (-0.5));
        float _1269 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1233.x + (-0.5));
        float _1271 = _1269 * (_1233.y + (-0.5));
        float _1272 = _1269 * (_1233.z + (-0.5));
        float _1279 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1240.x + (-0.5));
        float _1281 = _1279 * (_1240.y + (-0.5));
        float _1282 = _1279 * (_1240.z + (-0.5));
        float _1289 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1247.x + (-0.5));
        float _1291 = _1289 * (_1247.y + (-0.5));
        float _1292 = _1289 * (_1247.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_554, _555, _556), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3856 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1323 + 1.0))) + _1328) * _1293;
        float _1338 = _1261 * 0.5;
        float _1339 = _1271 * 0.5;
        float _1340 = _1281 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_554, _555, _556), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3889 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1365 + 1.0))) + _1370) * _1294;
        float _1380 = _1262 * 0.5;
        float _1381 = _1272 * 0.5;
        float _1382 = _1282 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_554, _555, _556), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3922 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1407 + 1.0))) + _1412) * _1295;
        _1429 = _1262;
        _1430 = _1261;
        _1431 = _1260;
        _1432 = _1272;
        _1433 = _1271;
        _1434 = _1270;
        _1435 = _1282;
        _1436 = _1281;
        _1437 = _1280;
        _1438 = _1295;
        _1439 = _1294;
        _1440 = _1293;
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1118;
        _1430 = _1118;
        _1431 = _1118;
        _1432 = _1118;
        _1433 = _1118;
        _1434 = _1118;
        _1435 = _1118;
        _1436 = _1118;
        _1437 = _1118;
        _1438 = _1118;
        _1439 = _1118;
        _1440 = _1118;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1130)) + _1130;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1131)) + _1131;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1132)) + _1132;
    float _1476 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1454, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1454, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1454, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1453));
    float _1497 = _727 * 0.5;
    float _1498 = _728 * 0.5;
    float _1499 = _729 * 0.5;
    float _1500 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1503 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1506 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1540;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1513 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1117, _1121, _1124, _1127));
        float _1517 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1521 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1528 = dot(vec4(cbModelParam._m0[39u]), vec4(_1497, _1498, _1499, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1551;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1542 = dot(vec4(cbModelParam._m0[40u]), vec4(_1497, _1498, _1499, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1555 = (_1551 * cbModelParam._m0[1u].x) + (_1540 * (1.0 - cbModelParam._m0[1u].x));
    float _1565 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _557);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1565 : min(cbModelParam._m0[25u].z, _1565));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1614 = fma(_788, cbModelParam._m0[13u].z, fma(_784, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _780)) + cbModelParam._m0[13u].w;
        float _1618 = fma(_788, cbModelParam._m0[14u].z, fma(_784, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _780)) + cbModelParam._m0[14u].w;
        float _1622 = fma(_788, cbModelParam._m0[15u].z, fma(_784, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _780)) + cbModelParam._m0[15u].w;
        float _1625 = fma(_729, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727));
        float _1628 = fma(_729, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727));
        float _1631 = fma(_729, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727));
        float _1659;
        if (_1625 > 0.0)
        {
            _1659 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1659 = frontier_phi_17_15_ladder;
        }
        float _1862;
        if (_1628 > 0.0)
        {
            _1862 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1862 = frontier_phi_26_22_ladder;
        }
        float _2105;
        if (_1631 > 0.0)
        {
            _2105 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2105 = frontier_phi_38_33_ladder;
        }
        float _2107 = isnan(_1862) ? _1659 : (isnan(_1659) ? _1862 : min(_1659, _1862));
        float _2108 = isnan(_2105) ? _2107 : (isnan(_2107) ? _2105 : min(_2107, _2105));
        float _2112 = (_2108 * _1625) + _1614;
        float _2113 = (_2108 * _1628) + _1618;
        float _2114 = (_2108 * _1631) + _1622;
        float _2115 = _2108 * 9.9999997473787516355514526367188e-05;
        float _2117 = (-1.0) - _2115;
        float _2119 = _2115 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2114 > _2119) || ((_2114 < _2117) || ((_2113 > _2119) || ((_2113 < _2117) || ((_2112 < _2117) || (_2112 > _2119))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2238 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2114, cbModelParam._m0[9u].z, fma(_2113, cbModelParam._m0[9u].y, _2112 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2114, cbModelParam._m0[10u].z, fma(_2113, cbModelParam._m0[10u].y, _2112 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2114, cbModelParam._m0[11u].z, fma(_2113, cbModelParam._m0[11u].y, _2112 * cbModelParam._m0[11u].x))), _1566);
            frontier_phi_16_38_ladder = _2238.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2238.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2238.x * cbModelParam._m0[1u].y;
        }
        _1647 = frontier_phi_16_38_ladder_2;
        _1649 = frontier_phi_16_38_ladder_1;
        _1651 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_727, _728, _729), _1566);
        _1647 = _1635.x * cbModelParam._m0[1u].y;
        _1649 = _1635.y * cbModelParam._m0[1u].y;
        _1651 = _1635.z * cbModelParam._m0[1u].y;
    }
    float _1655 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _557);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1655 : min(cbModelParam._m0[25u].w, _1655));
    float _1746;
    float _1748;
    float _1750;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1710 = fma(_788, cbModelParam._m0[21u].z, fma(_784, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _780)) + cbModelParam._m0[21u].w;
        float _1714 = fma(_788, cbModelParam._m0[22u].z, fma(_784, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _780)) + cbModelParam._m0[22u].w;
        float _1718 = fma(_788, cbModelParam._m0[23u].z, fma(_784, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _780)) + cbModelParam._m0[23u].w;
        float _1721 = fma(_729, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727));
        float _1724 = fma(_729, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727));
        float _1727 = fma(_729, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727));
        float _1867;
        if (_1721 > 0.0)
        {
            _1867 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1867 = frontier_phi_28_24_ladder;
        }
        float _2132;
        if (_1724 > 0.0)
        {
            _2132 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2132 = frontier_phi_40_35_ladder;
        }
        float _2337;
        if (_1727 > 0.0)
        {
            _2337 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2337 = frontier_phi_49_46_ladder;
        }
        float _2339 = isnan(_2132) ? _1867 : (isnan(_1867) ? _2132 : min(_1867, _2132));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1721) + _1710;
        float _2345 = (_2340 * _1724) + _1714;
        float _2346 = (_2340 * _1727) + _1718;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2347;
        float _2350 = _2347 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2346 > _2350) || ((_2346 < _2348) || ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 < _2348) || (_2344 > _2350))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2545 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2346, cbModelParam._m0[17u].z, fma(_2345, cbModelParam._m0[17u].y, _2344 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2346, cbModelParam._m0[18u].z, fma(_2345, cbModelParam._m0[18u].y, _2344 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2346, cbModelParam._m0[19u].z, fma(_2345, cbModelParam._m0[19u].y, _2344 * cbModelParam._m0[19u].x))), _1656);
            frontier_phi_25_49_ladder = _2545.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2545.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2545.x * cbModelParam._m0[1u].z;
        }
        _1746 = frontier_phi_25_49_ladder_2;
        _1748 = frontier_phi_25_49_ladder_1;
        _1750 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_727, _728, _729), _1656);
        _1746 = _1730.x * cbModelParam._m0[1u].z;
        _1748 = _1730.y * cbModelParam._m0[1u].z;
        _1750 = _1730.z * cbModelParam._m0[1u].z;
    }
    float _1762 = ((((1.0 - _748) * ((_735 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_748 * _735)) * _719;
    float _1763 = _1762 * ((cbModelParam._m0[1u].w * (_1746 - _1647)) + _1647);
    float _1764 = _1762 * ((cbModelParam._m0[1u].w * (_1748 - _1649)) + _1649);
    float _1765 = _1762 * ((cbModelParam._m0[1u].w * (_1750 - _1651)) + _1651);
    float _1768 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1771 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1774 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, _1763 * cbSceneParam._m0[91u].x));
    uvec4 _1784 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _1786 = _1784.x * 14u;
    uint _1787 = _1786 + 13u;
    float _1794 = _719 + (-1.0);
    float _1799 = (cbLight._m0[_1787].x * _1794) + 1.0;
    float _1800 = (cbLight._m0[_1787].y * _1794) + 1.0;
    float _1801 = (cbLight._m0[_1787].z * _1794) + 1.0;
    float _1802 = (cbLight._m0[_1787].w * _1794) + 1.0;
    uint _1803 = _1786 + 5u;
    float _1809 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
    uint _1813 = _1786 + 4u;
    float _1820 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1824 = _1786 | 1u;
    float _1835 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_554, _555, _556));
    float _1838 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_554, _555, _556));
    float _4058 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _4069 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1843 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1845 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1852 = ((cbLight._m0[_1803].x * _1809) * _1845) + ((cbLight._m0[_1813].x * _1820) * _1843);
    float _1853 = ((_1809 * cbLight._m0[_1803].y) * _1845) + ((_1820 * cbLight._m0[_1813].y) * _1843);
    float _1854 = ((_1809 * cbLight._m0[_1803].z) * _1845) + ((_1820 * cbLight._m0[_1813].z) * _1843);
    uvec4 _1859 = floatBitsToUint(cbLight._m0[_1786 + 12u]);
    bool _1861 = _1859.x == 0u;
    float _1872;
    float _1874;
    float _1876;
    if (_1861)
    {
        _1872 = _1852;
        _1874 = _1853;
        _1876 = _1854;
    }
    else
    {
        uint _1880 = _1786 + 6u;
        float _1896 = (dot(vec3(cbLight._m0[_1786 + 2u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _1897 = _1896 * _1896;
        float _4080 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1898 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1899 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1872 = (((cbLight._m0[_1880].x * 0.3183098733425140380859375) * _1898) * _1899) + _1852;
        _1874 = (((cbLight._m0[_1880].y * 0.3183098733425140380859375) * _1898) * _1899) + _1853;
        _1876 = (((cbLight._m0[_1880].z * 0.3183098733425140380859375) * _1898) * _1899) + _1854;
    }
    bool _1879 = _1859.y == 0u;
    float _1917;
    float _1919;
    float _1921;
    if (_1879)
    {
        _1917 = _1872;
        _1919 = _1874;
        _1921 = _1876;
    }
    else
    {
        uint _2076 = _1786 + 7u;
        float _2092 = (dot(vec3(cbLight._m0[_1786 + 3u].xyz), vec3(_554, _555, _556)) * 0.5) + 0.5;
        float _2093 = _2092 * _2092;
        float _4096 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _2095 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _1917 = (((cbLight._m0[_2076].x * 0.3183098733425140380859375) * _2094) * _2095) + _1872;
        _1919 = (((cbLight._m0[_2076].y * 0.3183098733425140380859375) * _2094) * _2095) + _1874;
        _1921 = (((cbLight._m0[_2076].z * 0.3183098733425140380859375) * _2094) * _2095) + _1876;
    }
    uint _1924 = _1786 + 8u;
    float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1786].w)) * _557) * 0.949999988079071044921875);
    float _1938 = _1937 * _1937;
    float _1939 = cbLight._m0[_1786].x + _633;
    float _1940 = cbLight._m0[_1786].y + _634;
    float _1941 = cbLight._m0[_1786].z + _635;
    float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
    float _1946 = _1945 * _1939;
    float _1947 = _1945 * _1940;
    float _1948 = _1945 * _1941;
    float _1949 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1786].xyz));
    float _4112 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _4123 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _1953 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _1954 = dot(vec3(_554, _555, _556), vec3(_1946, _1947, _1948));
    float _4134 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _1958 = dot(vec3(cbLight._m0[_1786].xyz), vec3(_1946, _1947, _1948));
    float _4145 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1962 = _1938 * _1938;
    float _1966 = ((_1957 * _1957) * (_1962 + (-1.0))) + 1.0;
    float _1977 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1978 = 1.0 - _1938;
    float _1989 = (0.5 / (((_1953 * ((_1952 * _1978) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _1978) + _1938) * _1952))) * _1952;
    float _4156 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1991 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1962 / ((_1966 * _1966) * 3.141590118408203125));
    uint _2002 = _1786 + 9u;
    float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _557) * 0.949999988079071044921875);
    float _2014 = _2013 * _2013;
    float _2015 = cbLight._m0[_1824].x + _633;
    float _2016 = cbLight._m0[_1824].y + _634;
    float _2017 = cbLight._m0[_1824].z + _635;
    float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
    float _2022 = _2021 * _2015;
    float _2023 = _2021 * _2016;
    float _2024 = _2021 * _2017;
    float _2025 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_1824].xyz));
    float _4167 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2029 = dot(vec3(_554, _555, _556), vec3(_2022, _2023, _2024));
    float _4178 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2032 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2033 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_2022, _2023, _2024));
    float _4189 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2037 = _2014 * _2014;
    float _2041 = ((_2032 * _2032) * (_2037 + (-1.0))) + 1.0;
    float _2050 = (exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2051 = 1.0 - _2014;
    float _2061 = (0.5 / (((_1953 * ((_2028 * _2051) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2051) + _2014) * _2028))) * _2028;
    float _4200 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2063 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2037 / ((_2041 * _2041) * 3.141590118408203125));
    float _2073 = (((_2050 * cbLight._m0[_2002].x) * _2063) * _1809) + (((_1977 * cbLight._m0[_1924].x) * _1991) * _1820);
    float _2074 = (((_2050 * cbLight._m0[_2002].y) * _2063) * _1809) + (((_1977 * cbLight._m0[_1924].y) * _1991) * _1820);
    float _2075 = (((_2050 * cbLight._m0[_2002].z) * _2063) * _1809) + (((_1977 * cbLight._m0[_1924].z) * _1991) * _1820);
    float _2137;
    float _2139;
    float _2141;
    if (_1861)
    {
        _2137 = _2073;
        _2139 = _2074;
        _2141 = _2075;
    }
    else
    {
        uint _2143 = _1786 + 2u;
        uint _2147 = _1786 + 10u;
        float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2143].w)) * _557) * 0.949999988079071044921875);
        float _2162 = _2161 * _2161;
        float _2163 = cbLight._m0[_2143].x + _633;
        float _2164 = cbLight._m0[_2143].y + _634;
        float _2165 = cbLight._m0[_2143].z + _635;
        float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
        float _2170 = _2169 * _2163;
        float _2171 = _2169 * _2164;
        float _2172 = _2169 * _2165;
        float _2173 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2143].xyz));
        float _4211 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
        float _2176 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2177 = dot(vec3(_554, _555, _556), vec3(_2170, _2171, _2172));
        float _4222 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2180 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2181 = dot(vec3(cbLight._m0[_2143].xyz), vec3(_2170, _2171, _2172));
        float _4233 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2185 = _2162 * _2162;
        float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
        float _2198 = (exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2199 = 1.0 - _2162;
        float _2209 = (0.5 / (((_1953 * ((_2176 * _2199) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2199) + _2162) * _2176))) * _2176;
        float _4244 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
        float _2211 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
        float _2212 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2137 = (((_2198 * cbLight._m0[_2147].x) * _2211) * _2212) + _2073;
        _2139 = (((_2198 * cbLight._m0[_2147].y) * _2211) * _2212) + _2074;
        _2141 = (((_2198 * cbLight._m0[_2147].z) * _2211) * _2212) + _2075;
    }
    float _2247;
    float _2249;
    float _2251;
    if (_1879)
    {
        _2247 = _2137;
        _2249 = _2139;
        _2251 = _2141;
    }
    else
    {
        uint _2258 = _1786 + 3u;
        uint _2262 = _1786 + 11u;
        float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _557) * 0.949999988079071044921875);
        float _2277 = _2276 * _2276;
        float _2278 = cbLight._m0[_2258].x + _633;
        float _2279 = cbLight._m0[_2258].y + _634;
        float _2280 = cbLight._m0[_2258].z + _635;
        float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
        float _2285 = _2284 * _2278;
        float _2286 = _2284 * _2279;
        float _2287 = _2284 * _2280;
        float _2288 = dot(vec3(_554, _555, _556), vec3(cbLight._m0[_2258].xyz));
        float _4260 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2291 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2292 = dot(vec3(_554, _555, _556), vec3(_2285, _2286, _2287));
        float _4271 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2295 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2296 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2285, _2286, _2287));
        float _4282 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2300 = _2277 * _2277;
        float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
        float _2313 = (exp2(log2(1.0 - (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2314 = 1.0 - _2277;
        float _2324 = (0.5 / (((_1953 * ((_2291 * _2314) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_1953 * _2314) + _2277) * _2291))) * _2291;
        float _4293 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
        float _2326 = (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
        float _2327 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
        _2247 = (((_2313 * cbLight._m0[_2262].x) * _2326) * _2327) + _2137;
        _2249 = (((_2313 * cbLight._m0[_2262].y) * _2326) * _2327) + _2139;
        _2251 = (((_2313 * cbLight._m0[_2262].z) * _2326) * _2327) + _2141;
    }
    float _2462;
    float _2464;
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    if (_1784.y == 0u)
    {
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2402;
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2402;
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2402;
        uvec4 _2417 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2418 = _2417.x;
        uint _2429 = uint((float(_2417.y) * floor(float(uint(cbSceneParam._m0[85u].y * _655) / _2418))) + floor(float(uint(cbSceneParam._m0[85u].x * _654) / _2418)));
        float _2439 = (log2(_2405 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2440 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        uint _2443 = uint(isnan(14.0) ? _2440 : (isnan(_2440) ? 14.0 : min(_2440, 14.0)));
        uvec4 _2448 = texelFetch(g_lightClusterGridBuffer, int(((_2443 << 2u) + (_2429 << 6u)) >> 2u));
        uint _2449 = _2448.x;
        uint _2450 = _2417.z;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        if (((((1u << ((_2450 >> 4u) & 15u)) + 4294967295u) & _2449) == 0u) || ((_2450 & 240u) == 0u))
        {
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
            _2560 = 0.0;
        }
        else
        {
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2559;
            float _2561;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            float _2708 = 0.0;
            uint _2709 = 0u;
            uint _2718;
            bool _2719;
            for (;;)
            {
                _2718 = texelFetch(g_lightClassification, int((((_2443 << 5u) + (_2429 << 9u)) + (_2709 << 2u)) >> 2u)).x;
                _2719 = _2718 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2719)
                {
                    frontier_phi_66_pred = _2703;
                    frontier_phi_66_pred_1 = _2708;
                    frontier_phi_66_pred_2 = _2707;
                    frontier_phi_66_pred_3 = _2706;
                    frontier_phi_66_pred_4 = _2705;
                    frontier_phi_66_pred_5 = _2704;
                }
                else
                {
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    uint _2854;
                    _2848 = _2703;
                    _2849 = _2704;
                    _2850 = _2705;
                    _2851 = _2706;
                    _2852 = _2707;
                    _2853 = _2708;
                    _2854 = _2718;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    for (;;)
                    {
                        uint _2858 = uint(findLSB(_2854)) + (_2709 << 5u);
                        uint _2855 = (_2854 + 4294967295u) & _2854;
                        uint _2860 = _2858 * 48u;
                        vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 3u)).x));
                        uint _2880 = (_2858 * 48u) + 4u;
                        vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 3u)).x));
                        uint _2899 = (_2858 * 48u) + 8u;
                        vec3 _2910 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x));
                        float _2914 = _2874.x - _2403;
                        float _2915 = _2874.y - _2404;
                        float _2916 = _2874.z - _2405;
                        float _2917 = dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916));
                        float _2920 = inversesqrt(_2917);
                        float _2921 = _2920 * _2914;
                        float _2922 = _2920 * _2915;
                        float _2923 = _2920 * _2916;
                        float _2924 = dot(vec3(_675, _678, _681), vec3(_2921, _2922, _2923));
                        float _2929 = 1.0 - (_2917 * _2874.w);
                        float _4319 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2930 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
                        float _2931 = sqrt(_2917) * _2893.w;
                        float _2934 = 1.39999997615814208984375 / (_2931 + 1.39999997615814208984375);
                        float _2935 = _2934 * _2934;
                        float _2938 = ((1.0 - _2935) * _2924) + _2935;
                        float _2941 = _2931 * _2931;
                        float _2945 = ((isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0))) * _2930) / ((_2941 * 0.699999988079071044921875) + 1.0);
                        float _2949 = (-0.0) - _2403;
                        float _2950 = (-0.0) - _2404;
                        float _2951 = (-0.0) - _2405;
                        float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
                        float _2956 = _2955 * _2949;
                        float _2957 = _2955 * _2950;
                        float _2958 = _2955 * _2951;
                        float _2966 = exp2(log2(1.0 / ((_2941 * 3.5) + 5.0)) * 0.25);
                        float _2967 = 1.0 - _735;
                        float _2974 = sqrt(1.0 - ((1.0 - (_2967 * _2967)) * (1.0 - (_2966 * _2966))));
                        float _2975 = _2974 * _2974;
                        float _2976 = _2975 * _2975;
                        float _2977 = _2956 + _2921;
                        float _2978 = _2957 + _2922;
                        float _2979 = _2958 + _2923;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2987 = dot(vec3(_675, _678, _681), vec3(_2956, _2957, _2958));
                        float _4335 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2990 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _2991 = dot(vec3(_675, _678, _681), vec3(_2983 * _2977, _2983 * _2978, _2983 * _2979));
                        float _4346 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _2998 = ((_2994 * _2994) * (_2976 + (-1.0))) + 1.0;
                        float _2999 = _2934 * _2975;
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2924) + _3000;
                        float _4357 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3004 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3005 = 1.0 - _2975;
                        float _3015 = (0.5 / (((_3004 * ((_2990 * _3005) + _2975)) + 9.9999999392252902907785028219223e-09) + (((_3004 * _3005) + _2975) * _2990))) * _3004;
                        float _4368 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3026 = (((_2976 * 3.1415927410125732421875) * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) / ((_2998 * _2998) * ((_2941 * 2.1991131305694580078125) + 3.141590118408203125))) * _2930;
                        _2778 = (_2945 * _2893.x) + _2851;
                        _2779 = (_2945 * _2893.y) + _2852;
                        _2780 = (_2945 * _2893.z) + _2853;
                        _2775 = (_3026 * _2910.x) + _2848;
                        _2776 = (_3026 * _2910.y) + _2849;
                        _2777 = (_3026 * _2910.z) + _2850;
                        if (_2855 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2848 = _2775;
                            _2849 = _2776;
                            _2850 = _2777;
                            _2851 = _2778;
                            _2852 = _2779;
                            _2853 = _2780;
                            _2854 = _2855;
                        }
                    }
                    frontier_phi_66_pred = _2775;
                    frontier_phi_66_pred_1 = _2780;
                    frontier_phi_66_pred_2 = _2779;
                    frontier_phi_66_pred_3 = _2778;
                    frontier_phi_66_pred_4 = _2777;
                    frontier_phi_66_pred_5 = _2776;
                }
                _2551 = frontier_phi_66_pred;
                _2561 = frontier_phi_66_pred_1;
                _2559 = frontier_phi_66_pred_2;
                _2557 = frontier_phi_66_pred_3;
                _2555 = frontier_phi_66_pred_4;
                _2553 = frontier_phi_66_pred_5;
                uint _2710 = _2709 + 1u;
                if (_2710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2703 = _2551;
                    _2704 = _2553;
                    _2705 = _2555;
                    _2706 = _2557;
                    _2707 = _2559;
                    _2708 = _2561;
                    _2709 = _2710;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
            _2560 = _2561;
        }
        uvec4 _2564 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2565 = _2564.z;
        uint _2567 = (_2565 >> 8u) & 15u;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        float _2681;
        if (((4294967295u << _2567) & _2449) == 0u)
        {
            _2671 = _2550;
            _2673 = _2552;
            _2675 = _2554;
            _2677 = _2556;
            _2679 = _2558;
            _2681 = _2560;
        }
        else
        {
            float _2696 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
            float _2697 = _2696 * _2403;
            float _2698 = _2696 * _2404;
            float _2699 = _2696 * _2405;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2567 < ((_2565 >> 12u) & 15u))
            {
                float _2672;
                float _2674;
                float _2676;
                float _2678;
                float _2680;
                float _2682;
                float _2831 = _2550;
                float _2832 = _2552;
                float _2833 = _2554;
                float _2834 = _2556;
                float _2835 = _2558;
                float _2836 = _2560;
                uint _2837 = _2567;
                uint _2846;
                bool _2847;
                for (;;)
                {
                    _2846 = texelFetch(g_lightClassification, int((((_2443 << 5u) + (_2429 << 9u)) + (_2837 << 2u)) >> 2u)).x;
                    _2847 = _2846 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2847)
                    {
                        frontier_phi_77_pred = _2836;
                        frontier_phi_77_pred_1 = _2835;
                        frontier_phi_77_pred_2 = _2834;
                        frontier_phi_77_pred_3 = _2833;
                        frontier_phi_77_pred_4 = _2832;
                        frontier_phi_77_pred_5 = _2831;
                    }
                    else
                    {
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3053 = _2831;
                        float _3054 = _2832;
                        float _3055 = _2833;
                        float _3056 = _2834;
                        float _3057 = _2835;
                        float _3058 = _2836;
                        uint _3059 = _2846;
                        uint _3060;
                        vec4 _3085;
                        float _3086;
                        vec4 _3101;
                        vec3 _3113;
                        vec4 _3128;
                        vec4 _3143;
                        float _3189;
                        bool _3190;
                        for (;;)
                        {
                            uint _3070 = ((_2837 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3059));
                            _3060 = (_3059 + 4294967295u) & _3059;
                            uint _3072 = _3070 * 40u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            _3086 = _3085.w;
                            uint _3088 = (_3070 * 40u) + 4u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3103 = (_3070 * 40u) + 8u;
                            _3113 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x));
                            uint _3115 = (_3070 * 40u) + 16u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3070 * 40u) + 20u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3070 * 40u) + 24u;
                            vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3164 = (_3070 * 40u) + 28u;
                            vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            _3189 = fma(_2405, _3177.z, fma(_2404, _3177.y, _3177.x * _2403)) + _3177.w;
                            _3190 = !((fma(_2405, _3158.z, fma(_2404, _3158.y, _3158.x * _2403)) + _3158.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3190)
                            {
                                float _3217 = _3085.x - _2403;
                                float _3218 = _3085.y - _2404;
                                float _3219 = _3085.z - _2405;
                                float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                                float _3223 = inversesqrt(_3220);
                                float _3224 = _3223 * _3217;
                                float _3225 = _3223 * _3218;
                                float _3226 = _3223 * _3219;
                                float _3230 = 1.0 - (_3220 / (_3086 * _3086));
                                float _4379 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                                float _3235 = sqrt(_3220) * _3101.w;
                                float _3237 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                                float _3238 = _3237 * _3237;
                                float _3241 = ((1.0 - _3238) * dot(vec3(_3224, _3225, _3226), vec3(_675, _678, _681))) + _3238;
                                float _3244 = _3235 * _3235;
                                float _3248 = (fma(_2405, _3128.z, fma(_2404, _3128.y, _3128.x * _2403)) + _3128.w) / _3189;
                                float _3249 = (fma(_2405, _3143.z, fma(_2404, _3143.y, _3143.x * _2403)) + _3143.w) / _3189;
                                float _3253 = 1.0 - dot(vec2(_3248, _3249), vec2(_3248, _3249));
                                float _4395 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3255 = _3254 * (((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3231) / ((_3244 * 0.699999988079071044921875) + 1.0));
                                float _3267 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                                float _3268 = 1.0 - _735;
                                float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                                float _3276 = _3275 * _3275;
                                float _3277 = _3276 * _3276;
                                float _3278 = _3224 - _2697;
                                float _3279 = _3225 - _2698;
                                float _3280 = _3226 - _2699;
                                float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                                float _3288 = dot(vec3(_675, _678, _681), vec3((-0.0) - _2697, (-0.0) - _2698, (-0.0) - _2699));
                                float _4406 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3292 = dot(vec3(_675, _678, _681), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                                float _4417 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3295 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                                float _3300 = _3237 * _3276;
                                float _3301 = _3300 * _3300;
                                float _3307 = ((1.0 - _3301) * dot(vec3(_675, _678, _681), vec3(_3224, _3225, _3226))) + _3301;
                                float _4428 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3309 = 1.0 - _3276;
                                float _3319 = (0.5 / (((_3308 * ((_3291 * _3309) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3276) * _3291))) * _3308;
                                float _4439 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3329 = (_3254 * _3231) * (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0)))) / ((_3299 * _3299) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3255 * _3101.y;
                                frontier_phi_83_pred_1 = _3255 * _3101.x;
                                frontier_phi_83_pred_2 = _3329 * _3113.z;
                                frontier_phi_83_pred_3 = _3329 * _3113.y;
                                frontier_phi_83_pred_4 = _3329 * _3113.x;
                                frontier_phi_83_pred_5 = _3255 * _3101.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3337 = frontier_phi_83_pred;
                            _3336 = frontier_phi_83_pred_1;
                            _3335 = frontier_phi_83_pred_2;
                            _3334 = frontier_phi_83_pred_3;
                            _3333 = frontier_phi_83_pred_4;
                            _3338 = frontier_phi_83_pred_5;
                            _3043 = _3336 + _3056;
                            _3044 = _3337 + _3057;
                            _3045 = _3338 + _3058;
                            _3040 = _3333 + _3053;
                            _3041 = _3334 + _3054;
                            _3042 = _3335 + _3055;
                            if (_3060 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3060;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3045;
                        frontier_phi_77_pred_1 = _3044;
                        frontier_phi_77_pred_2 = _3043;
                        frontier_phi_77_pred_3 = _3042;
                        frontier_phi_77_pred_4 = _3041;
                        frontier_phi_77_pred_5 = _3040;
                    }
                    _2682 = frontier_phi_77_pred;
                    _2680 = frontier_phi_77_pred_1;
                    _2678 = frontier_phi_77_pred_2;
                    _2676 = frontier_phi_77_pred_3;
                    _2674 = frontier_phi_77_pred_4;
                    _2672 = frontier_phi_77_pred_5;
                    uint _2838 = _2837 + 1u;
                    if (_2838 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2831 = _2672;
                        _2832 = _2674;
                        _2833 = _2676;
                        _2834 = _2678;
                        _2835 = _2680;
                        _2836 = _2682;
                        _2837 = _2838;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2676;
                frontier_phi_58_59_ladder_1 = _2682;
                frontier_phi_58_59_ladder_2 = _2680;
                frontier_phi_58_59_ladder_3 = _2678;
                frontier_phi_58_59_ladder_4 = _2674;
                frontier_phi_58_59_ladder_5 = _2672;
            }
            else
            {
                frontier_phi_58_59_ladder = _2554;
                frontier_phi_58_59_ladder_1 = _2560;
                frontier_phi_58_59_ladder_2 = _2558;
                frontier_phi_58_59_ladder_3 = _2556;
                frontier_phi_58_59_ladder_4 = _2552;
                frontier_phi_58_59_ladder_5 = _2550;
            }
            _2671 = frontier_phi_58_59_ladder_5;
            _2673 = frontier_phi_58_59_ladder_4;
            _2675 = frontier_phi_58_59_ladder;
            _2677 = frontier_phi_58_59_ladder_3;
            _2679 = frontier_phi_58_59_ladder_2;
            _2681 = frontier_phi_58_59_ladder_1;
        }
        float _2686 = isnan(1.0) ? _719 : (isnan(_719) ? 1.0 : min(_719, 1.0));
        _2462 = (_2686 * _2677) + _1917;
        _2464 = (_2686 * _2679) + _1919;
        _2466 = (_2686 * _2681) + _1921;
        _2468 = ((_2671 * 0.039999999105930328369140625) * _2686) + _2247;
        _2470 = ((_2673 * 0.039999999105930328369140625) * _2686) + _2249;
        _2472 = ((_2675 * 0.039999999105930328369140625) * _2686) + _2251;
    }
    else
    {
        _2462 = _1917;
        _2464 = _1919;
        _2466 = _1921;
        _2468 = _2247;
        _2470 = _2249;
        _2472 = _2251;
    }
    float _4455 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4466 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4477 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _2489 = ((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2462 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _719))) + ((_2468 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    float _2490 = ((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2464 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _719))) + ((_2470 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    float _2491 = ((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2466 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _719))) + ((_2472 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    uint _2492 = _254 + 6u;
    float _2500 = _654 / cbSceneParam._m0[86u].x;
    float _2501 = _655 / cbSceneParam._m0[86u].y;
    vec4 _2515 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2500, _2501, (log2((isnan(cbSceneParam._m0[77u].w) ? _575 : (isnan(_575) ? cbSceneParam._m0[77u].w : min(_575, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2517 = _2515.x;
    float _2518 = _2515.y;
    float _2519 = _2515.z;
    float _2520 = _2515.w;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    if (_575 > cbSceneParam._m0[78u].w)
    {
        float _2575 = isnan(_575) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _575 : min(cbSceneParam._m0[80u].w, _575));
        float _2576 = _2575 / _575;
        float _2587 = _2576 * _626;
        float _2588 = _627 * _2576;
        float _2589 = (-0.0) - _2588;
        float _2591 = _2576 * _628;
        float _2593 = (cbSceneParam._m0[77u].w * _2589) / _2575;
        float _2594 = _2593 + cbSceneParam._m0[79u].w;
        float _2595 = cbSceneParam._m0[79u].w - _2588;
        float _2601 = sqrt(((_2587 * _2587) + (_2588 * _2588)) + (_2591 * _2591));
        float _2604 = (1.0 - (cbSceneParam._m0[77u].w / _2575)) * _2601;
        float _2609 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2611 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2788;
        if (abs((_2589 - _2593) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2788 = ((((_2594 > 0.0) ? exp2(_2609 * _2594) : (2.0 - exp2(_2611 * _2594))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2604;
        }
        else
        {
            float _2732 = 1.0 / cbSceneParam._m0[80u].x;
            float _2733 = isnan(_2595) ? _2594 : (isnan(_2594) ? _2595 : max(_2594, _2595));
            float _2734 = isnan(_2595) ? _2594 : (isnan(_2594) ? _2595 : min(_2594, _2595));
            float _2743 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : min(_2733, 0.0));
            float _2744 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : min(_2734, 0.0));
            _2788 = ((abs(_2601 / _2589) * cbSceneParam._m0[80u].y) * ((((_2743 - _2744) * 2.0) - ((exp2(_2609 * (isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0)))) - exp2(_2609 * (isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0))))) * _2732)) - ((exp2(_2611 * _2743) - exp2(_2611 * _2744)) * _2732))) + (_2604 * cbSceneParam._m0[80u].z);
        }
        vec4 _2790 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2500, _2501, 1.0), 0.0);
        float _2799 = exp2((_2788 * (-1.44269502162933349609375)) * (1.0 - _2790.w));
        float _2800 = log2(_2799);
        float _2816 = log2(_2520);
        _2613 = (exp2(_2816 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2800 * cbSceneParam._m0[78u].x)) * _2790.x) / cbSceneParam._m0[78u].x)) + _2517;
        _2615 = (exp2(_2816 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2800 * cbSceneParam._m0[78u].y)) * _2790.y) / cbSceneParam._m0[78u].y)) + _2518;
        _2617 = (exp2(_2816 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2800 * cbSceneParam._m0[78u].z)) * _2790.z) / cbSceneParam._m0[78u].z)) + _2519;
        _2619 = _2799 * _2520;
    }
    else
    {
        _2613 = _2517;
        _2615 = _2518;
        _2617 = _2519;
        _2619 = _2520;
    }
    bool _2826;
    vec4 _2629;
    vec4 _2651;
    float _2653;
    float _2657;
    float _2658;
    float _2659;
    float _2660;
    bool _2670;
    for (;;)
    {
        _2629 = cbMatDynParam._m0[0u];
        float _2631 = roundEven(_2629.y);
        bool _2632 = _2631 == 3.0;
        float _2633 = log2(_2619);
        float _2640 = exp2(_2633 * cbSceneParam._m0[78u].x) * _2489;
        float _2641 = exp2(_2633 * cbSceneParam._m0[78u].y) * _2490;
        float _2642 = exp2(_2633 * cbSceneParam._m0[78u].z) * _2491;
        float _2649 = _642 + (-0.5);
        _2651 = cbMtdParam._m0[1u];
        _2653 = _2651.y * _2649;
        float _2656 = (_2631 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2657 = _2656 * (_2632 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2613)));
        _2658 = _2656 * (_2632 ? _2641 : (_2641 + (cbSceneParam._m0[72u].w * _2615)));
        _2659 = _2656 * (_2632 ? _2642 : (_2642 + (cbSceneParam._m0[72u].w * _2617)));
        _2660 = _2649 * 0.999000012874603271484375;
        _2670 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2670)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _2660) < 0.5)
            {
                _2826 = true;
                break;
            }
        }
        uint _2767 = _694 + uint(_2629.w);
        if ((cbInstanceData._m0[_2767].w < 1.0) && ((cbInstanceData._m0[_2767].w + _2660) < 0.5))
        {
            _2826 = true;
            break;
        }
        if ((_2653 + 1.0) < _2651.x)
        {
            _2826 = true;
            break;
        }
        _2826 = false;
        break;
    }
    float _3031;
    if (_2826)
    {
        discard_state = true;
        _3031 = 0.0;
    }
    else
    {
        _3031 = cbInstanceData._m0[_2492].w;
    }
    SV_Target.x = _2657;
    SV_Target.y = _2658;
    SV_Target.z = _2659;
    SV_Target.w = _3031;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2492].w;
    discard_exit();
}


