#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1074;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _269 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _275 = _269.x * cbMtdParam._m0[11u].x;
    float _276 = _269.y * cbMtdParam._m0[11u].y;
    float _277 = _269.z * cbMtdParam._m0[11u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _248) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _249) + cbTextureTilingScale._m0[5u].w));
    vec4 _334 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _336 = _334.x;
    float _346 = dot(vec4(_336, _334.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _363 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_336 - _346) * cbMtdParam._m0[24u].x) + _346) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3381 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
    float _371 = (_364 * ((_296.x * cbMtdParam._m0[12u].x) - _275)) + _275;
    float _372 = (_364 * ((_296.y * cbMtdParam._m0[12u].y) - _276)) + _276;
    float _373 = (_364 * ((_296.z * cbMtdParam._m0[12u].z) - _277)) + _277;
    vec4 _391 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _248) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _249) + cbTextureTilingScale._m0[4u].w));
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _410 = _408.x;
    float _411 = _408.y;
    float _412 = _408.z;
    float _421 = ((_391.z - _412) * _364) + _412;
    float _424 = ((((_391.x - _410) * _364) + _410) * 2.0) + (-1.0);
    float _426 = ((((_391.y - _411) * _364) + _411) * 2.0) + (-1.0);
    float _427 = dot(vec2(_424, _426), vec2(_424, _426));
    float _3392 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = sqrt(1.0 - (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))));
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _465 = _463.x;
    float _466 = 1.0 - _465;
    float _479 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_465 - _466) * cbMtdParam._m0[24u].z) + _466) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3403 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _487 = (_480 * (cbMtdParam._m0[17u].x - _371)) + _371;
    float _488 = (_480 * (cbMtdParam._m0[17u].y - _372)) + _372;
    float _489 = (_480 * (cbMtdParam._m0[17u].z - _373)) + _373;
    vec4 _502 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _509 = (_502.x * 2.0) + (-1.0);
    float _510 = (_502.y * 2.0) + (-1.0);
    float _511 = dot(vec2(_509, _510), vec2(_509, _510));
    float _3414 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _519 = (_480 * (_502.z - _421)) + _421;
    float _531 = (((_509 - _424) + (cbMtdParam._m0[21u].x * _424)) * _480) + _424;
    float _532 = (((_510 - _426) + (cbMtdParam._m0[21u].x * _426)) * _480) + _426;
    float _533 = (_480 * (sqrt(1.0 - (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0)))) - _432)) + _432;
    float _538 = cbMtdParam._m0[22u].x + _445.w;
    float _541 = fma(_533, _215 * NORMAL.x, fma(_532, _222 * TANGENT.x, (_208 * _200) * _531));
    float _544 = fma(_533, _215 * NORMAL.y, fma(_532, _222 * TANGENT.y, (_208 * _201) * _531));
    float _547 = fma(_533, _215 * NORMAL.z, fma(_532, _222 * TANGENT.z, (_208 * _202) * _531));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    float _552 = _551 * _541;
    float _553 = _551 * _544;
    float _554 = _551 * _547;
    float _3425 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _555 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _3436 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3447 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3458 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3469 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _573 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _625 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _615);
    float _626 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _615);
    float _627 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _615);
    float _631 = inversesqrt(dot(vec3(_625, _626, _627), vec3(_625, _626, _627)));
    float _632 = _625 * _631;
    float _633 = _626 * _631;
    float _634 = _627 * _631;
    float _640 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _641 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _659 = fma(_554, cbSceneParam._m0[5u].z, fma(_553, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _552));
    float _662 = fma(_554, cbSceneParam._m0[6u].z, fma(_553, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _552));
    float _665 = fma(_554, cbSceneParam._m0[7u].z, fma(_553, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _552));
    uint _679 = (_228 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _685 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) * cbInstanceData._m0[_679].x;
    float _686 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * cbInstanceData._m0[_679].y;
    float _687 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) * cbInstanceData._m0[_679].z;
    float _3480 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    vec4 _699 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _640, cbSceneParam._m0[86u].y * _641));
    float _703 = ((isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * TEXCOORD_5.w) * _699.x;
    float _704 = dot(vec3(_552, _553, _554), vec3(_632, _633, _634));
    float _707 = _704 * 2.0;
    float _711 = (_707 * _552) - _632;
    float _712 = (_707 * _553) - _633;
    float _713 = (_707 * _554) - _634;
    float _717 = abs(dot(vec3(_632, _633, _634), vec3(_552, _553, _554)));
    float _3513 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _719 = sqrt(_555);
    float _732 = exp2((_719 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_719 * 3.0));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1073;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _798 = fma(_772, cbModelParam._m0[26u].z, fma(_768, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764));
        float _802 = fma(_772, cbModelParam._m0[27u].z, fma(_768, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764));
        float _806 = fma(_772, cbModelParam._m0[28u].z, fma(_768, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764));
        float _831 = _764 + _552;
        float _832 = _768 + _553;
        float _833 = _772 + _554;
        float _843 = fma(_833, cbModelParam._m0[26u].z, fma(_832, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _831)) - _798;
        float _844 = fma(_833, cbModelParam._m0[27u].z, fma(_832, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _831)) - _802;
        float _845 = fma(_833, cbModelParam._m0[28u].z, fma(_832, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _831)) - _806;
        float _849 = inversesqrt(dot(vec3(_843, _844, _845), vec3(_843, _844, _845)));
        float _862 = ((_849 * _843) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_798 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_849 * _844) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_802 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_849 * _845) / cbModelParam._m0[34u].z) + ((((((_806 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_862, _863, _864), 0.0);
        float _901 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_867.x + (-0.5));
        float _903 = _901 * (_867.y + (-0.5));
        float _904 = _901 * (_867.z + (-0.5));
        float _911 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_874.x + (-0.5));
        float _913 = _911 * (_874.y + (-0.5));
        float _914 = _911 * (_874.z + (-0.5));
        float _921 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_881.x + (-0.5));
        float _923 = _921 * (_881.y + (-0.5));
        float _924 = _921 * (_881.z + (-0.5));
        float _931 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_888.x + (-0.5));
        float _933 = _931 * (_888.y + (-0.5));
        float _934 = _931 * (_888.z + (-0.5));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = _902 * 0.5;
        float _939 = _912 * 0.5;
        float _940 = _922 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _955 = (dot(vec3(_552, _553, _554), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _965 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3561 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_967 + 1.0))) + _972) * _935;
        float _982 = _903 * 0.5;
        float _983 = _913 * 0.5;
        float _984 = _923 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _998 = (dot(vec3(_552, _553, _554), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1007 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3594 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1009 + 1.0))) + _1014) * _936;
        float _1024 = _904 * 0.5;
        float _1025 = _914 * 0.5;
        float _1026 = _924 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_552, _553, _554), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3627 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1051 + 1.0))) + _1056) * _937;
        _1073 = _904;
        _1075 = _903;
        _1076 = _902;
        _1077 = _914;
        _1078 = _913;
        _1079 = _912;
        _1080 = _924;
        _1081 = _923;
        _1082 = _922;
        _1083 = _937;
        _1084 = _936;
        _1085 = _935;
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
    }
    else
    {
        _1073 = _1074;
        _1075 = _1074;
        _1076 = _1074;
        _1077 = _1074;
        _1078 = _1074;
        _1079 = _1074;
        _1080 = _1074;
        _1081 = _1074;
        _1082 = _1074;
        _1083 = _1074;
        _1084 = _1074;
        _1085 = _1074;
        _1086 = 0.0;
        _1087 = 0.0;
        _1088 = 0.0;
    }
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1113 = fma(_772, cbModelParam._m0[30u].z, fma(_768, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _764));
        float _1117 = fma(_772, cbModelParam._m0[31u].z, fma(_768, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _764));
        float _1121 = fma(_772, cbModelParam._m0[32u].z, fma(_768, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _764));
        float _1144 = _764 + _552;
        float _1145 = _768 + _553;
        float _1146 = _772 + _554;
        float _1156 = fma(_1146, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1144)) - _1113;
        float _1157 = fma(_1146, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1144)) - _1117;
        float _1158 = fma(_1146, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1144)) - _1121;
        float _1162 = inversesqrt(dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158)));
        float _1175 = ((_1162 * _1156) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1113 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1162 * _1157) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1117 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1162 * _1158) / cbModelParam._m0[35u].z) + ((((((_1121 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        float _1212 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1179.x + (-0.5));
        float _1214 = _1212 * (_1179.y + (-0.5));
        float _1215 = _1212 * (_1179.z + (-0.5));
        float _1222 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1186.x + (-0.5));
        float _1224 = _1222 * (_1186.y + (-0.5));
        float _1225 = _1222 * (_1186.z + (-0.5));
        float _1232 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1193.x + (-0.5));
        float _1234 = _1232 * (_1193.y + (-0.5));
        float _1235 = _1232 * (_1193.z + (-0.5));
        float _1242 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1200.x + (-0.5));
        float _1244 = _1242 * (_1200.y + (-0.5));
        float _1245 = _1242 * (_1200.z + (-0.5));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = _1213 * 0.5;
        float _1250 = _1223 * 0.5;
        float _1251 = _1233 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_552, _553, _554), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3690 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1276 + 1.0))) + _1281) * _1246;
        float _1291 = _1214 * 0.5;
        float _1292 = _1224 * 0.5;
        float _1293 = _1234 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_552, _553, _554), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3723 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1318 + 1.0))) + _1323) * _1247;
        float _1333 = _1215 * 0.5;
        float _1334 = _1225 * 0.5;
        float _1335 = _1235 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_552, _553, _554), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3756 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1360 + 1.0))) + _1365) * _1248;
        _1382 = _1215;
        _1383 = _1214;
        _1384 = _1213;
        _1385 = _1225;
        _1386 = _1224;
        _1387 = _1223;
        _1388 = _1235;
        _1389 = _1234;
        _1390 = _1233;
        _1391 = _1248;
        _1392 = _1247;
        _1393 = _1246;
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
    }
    else
    {
        _1382 = _1074;
        _1383 = _1074;
        _1384 = _1074;
        _1385 = _1074;
        _1386 = _1074;
        _1387 = _1074;
        _1388 = _1074;
        _1389 = _1074;
        _1390 = _1074;
        _1391 = _1074;
        _1392 = _1074;
        _1393 = _1074;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1086)) + _1086;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1087)) + _1087;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1088)) + _1088;
    float _1429 = fma(_1408, cbSceneParam._m0[89u].z, fma(_1407, cbSceneParam._m0[89u].y, _1406 * cbSceneParam._m0[89u].x));
    float _1432 = fma(_1408, cbSceneParam._m0[90u].z, fma(_1407, cbSceneParam._m0[90u].y, _1406 * cbSceneParam._m0[90u].x));
    float _1435 = fma(_1408, cbSceneParam._m0[91u].z, fma(_1407, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1406));
    float _1450 = _711 * 0.5;
    float _1451 = _712 * 0.5;
    float _1452 = _713 * 0.5;
    float _1453 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1456 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1459 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1493;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1466 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1073, _1077, _1080, _1083));
        float _1470 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1075, _1078, _1081, _1084));
        float _1474 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1076, _1079, _1082, _1085));
        float _1481 = dot(vec4(cbModelParam._m0[39u]), vec4(_1450, _1451, _1452, 1.0));
        _1493 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1493 = 1.0;
    }
    float _1504;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1495 = dot(vec4(cbModelParam._m0[40u]), vec4(_1450, _1451, _1452, 1.0));
        _1504 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1495) ? 0.0 : (isnan(0.0) ? _1495 : max(0.0, _1495))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1504 = 1.0;
    }
    float _1508 = (_1504 * cbModelParam._m0[1u].x) + (_1493 * (1.0 - cbModelParam._m0[1u].x));
    float _1518 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _555);
    float _1519 = isnan(_1518) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1518 : min(cbModelParam._m0[25u].z, _1518));
    float _1600;
    float _1602;
    float _1604;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1567 = fma(_772, cbModelParam._m0[13u].z, fma(_768, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764)) + cbModelParam._m0[13u].w;
        float _1571 = fma(_772, cbModelParam._m0[14u].z, fma(_768, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764)) + cbModelParam._m0[14u].w;
        float _1575 = fma(_772, cbModelParam._m0[15u].z, fma(_768, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764)) + cbModelParam._m0[15u].w;
        float _1578 = fma(_713, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711));
        float _1581 = fma(_713, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711));
        float _1584 = fma(_713, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711));
        float _1612;
        if (_1578 > 0.0)
        {
            _1612 = abs((1.0 - _1567) / _1578);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1567 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1612 = frontier_phi_14_12_ladder;
        }
        float _1813;
        if (_1581 > 0.0)
        {
            _1813 = abs((1.0 - _1571) / _1581);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1571 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1813 = frontier_phi_23_19_ladder;
        }
        float _2056;
        if (_1584 > 0.0)
        {
            _2056 = abs((1.0 - _1575) / _1584);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1575 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2056 = frontier_phi_35_30_ladder;
        }
        float _2058 = isnan(_1813) ? _1612 : (isnan(_1612) ? _1813 : min(_1612, _1813));
        float _2059 = isnan(_2056) ? _2058 : (isnan(_2058) ? _2056 : min(_2058, _2056));
        float _2063 = (_2059 * _1578) + _1567;
        float _2064 = (_2059 * _1581) + _1571;
        float _2065 = (_2059 * _1584) + _1575;
        float _2066 = _2059 * 9.9999997473787516355514526367188e-05;
        float _2068 = (-1.0) - _2066;
        float _2070 = _2066 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2065 > _2070) || ((_2065 < _2068) || ((_2064 > _2070) || ((_2064 < _2068) || ((_2063 < _2068) || (_2063 > _2070))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2189 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2065, cbModelParam._m0[9u].z, fma(_2064, cbModelParam._m0[9u].y, _2063 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2065, cbModelParam._m0[10u].z, fma(_2064, cbModelParam._m0[10u].y, _2063 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2065, cbModelParam._m0[11u].z, fma(_2064, cbModelParam._m0[11u].y, _2063 * cbModelParam._m0[11u].x))), _1519);
            frontier_phi_13_35_ladder = _2189.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2189.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2189.x * cbModelParam._m0[1u].y;
        }
        _1600 = frontier_phi_13_35_ladder_2;
        _1602 = frontier_phi_13_35_ladder_1;
        _1604 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_711, _712, _713), _1519);
        _1600 = _1588.x * cbModelParam._m0[1u].y;
        _1602 = _1588.y * cbModelParam._m0[1u].y;
        _1604 = _1588.z * cbModelParam._m0[1u].y;
    }
    float _1608 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _555);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1608 : min(cbModelParam._m0[25u].w, _1608));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1663 = fma(_772, cbModelParam._m0[21u].z, fma(_768, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764)) + cbModelParam._m0[21u].w;
        float _1667 = fma(_772, cbModelParam._m0[22u].z, fma(_768, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764)) + cbModelParam._m0[22u].w;
        float _1671 = fma(_772, cbModelParam._m0[23u].z, fma(_768, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764)) + cbModelParam._m0[23u].w;
        float _1674 = fma(_713, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711));
        float _1677 = fma(_713, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711));
        float _1680 = fma(_713, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711));
        float _1818;
        if (_1674 > 0.0)
        {
            _1818 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1818 = frontier_phi_25_21_ladder;
        }
        float _2083;
        if (_1677 > 0.0)
        {
            _2083 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2083 = frontier_phi_37_32_ladder;
        }
        float _2288;
        if (_1680 > 0.0)
        {
            _2288 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2288 = frontier_phi_46_43_ladder;
        }
        float _2290 = isnan(_2083) ? _1818 : (isnan(_1818) ? _2083 : min(_1818, _2083));
        float _2291 = isnan(_2288) ? _2290 : (isnan(_2290) ? _2288 : min(_2290, _2288));
        float _2295 = (_2291 * _1674) + _1663;
        float _2296 = (_2291 * _1677) + _1667;
        float _2297 = (_2291 * _1680) + _1671;
        float _2298 = _2291 * 9.9999997473787516355514526367188e-05;
        float _2299 = (-1.0) - _2298;
        float _2301 = _2298 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2297 > _2301) || ((_2297 < _2299) || ((_2296 > _2301) || ((_2296 < _2299) || ((_2295 < _2299) || (_2295 > _2301))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2496 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2297, cbModelParam._m0[17u].z, fma(_2296, cbModelParam._m0[17u].y, _2295 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2297, cbModelParam._m0[18u].z, fma(_2296, cbModelParam._m0[18u].y, _2295 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2297, cbModelParam._m0[19u].z, fma(_2296, cbModelParam._m0[19u].y, _2295 * cbModelParam._m0[19u].x))), _1609);
            frontier_phi_22_46_ladder = _2496.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2496.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2496.x * cbModelParam._m0[1u].z;
        }
        _1699 = frontier_phi_22_46_ladder_2;
        _1701 = frontier_phi_22_46_ladder_1;
        _1703 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_711, _712, _713), _1609);
        _1699 = _1683.x * cbModelParam._m0[1u].z;
        _1701 = _1683.y * cbModelParam._m0[1u].z;
        _1703 = _1683.z * cbModelParam._m0[1u].z;
    }
    float _1715 = ((((1.0 - _732) * ((_719 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_732 * _719)) * _703;
    float _1716 = _1715 * ((cbModelParam._m0[1u].w * (_1699 - _1600)) + _1600);
    float _1717 = _1715 * ((cbModelParam._m0[1u].w * (_1701 - _1602)) + _1602);
    float _1718 = _1715 * ((cbModelParam._m0[1u].w * (_1703 - _1604)) + _1604);
    float _1721 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1717, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1717, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1717, cbSceneParam._m0[91u].y, _1716 * cbSceneParam._m0[91u].x));
    uvec4 _1737 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1739 = _1737.x * 14u;
    uint _1740 = _1739 + 13u;
    float _1747 = _703 + (-1.0);
    float _1752 = (cbLight._m0[_1740].x * _1747) + 1.0;
    float _1753 = (cbLight._m0[_1740].y * _1747) + 1.0;
    float _1754 = (cbLight._m0[_1740].z * _1747) + 1.0;
    float _1755 = (cbLight._m0[_1740].w * _1747) + 1.0;
    uint _1756 = _1739 + 5u;
    float _1762 = isnan(1.0) ? _1753 : (isnan(_1753) ? 1.0 : min(_1753, 1.0));
    uint _1766 = _1739 + 4u;
    float _1772 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
    uint _1776 = _1739 | 1u;
    float _1787 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_552, _553, _554));
    float _1790 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_552, _553, _554));
    float _3892 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _3903 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1795 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.3183098733425140380859375;
    float _1797 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.3183098733425140380859375;
    float _1804 = ((cbLight._m0[_1756].x * _1762) * _1797) + ((cbLight._m0[_1766].x * _1772) * _1795);
    float _1805 = ((_1762 * cbLight._m0[_1756].y) * _1797) + ((_1772 * cbLight._m0[_1766].y) * _1795);
    float _1806 = ((_1762 * cbLight._m0[_1756].z) * _1797) + ((_1772 * cbLight._m0[_1766].z) * _1795);
    uvec4 _1810 = floatBitsToUint(cbLight._m0[_1739 + 12u]);
    bool _1812 = _1810.x == 0u;
    float _1823;
    float _1825;
    float _1827;
    if (_1812)
    {
        _1823 = _1804;
        _1825 = _1805;
        _1827 = _1806;
    }
    else
    {
        uint _1831 = _1739 + 6u;
        float _1847 = (dot(vec3(cbLight._m0[_1739 + 2u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _1848 = _1847 * _1847;
        float _3914 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1850 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _1823 = (((cbLight._m0[_1831].x * 0.3183098733425140380859375) * _1849) * _1850) + _1804;
        _1825 = (((cbLight._m0[_1831].y * 0.3183098733425140380859375) * _1849) * _1850) + _1805;
        _1827 = (((cbLight._m0[_1831].z * 0.3183098733425140380859375) * _1849) * _1850) + _1806;
    }
    bool _1830 = _1810.y == 0u;
    float _1868;
    float _1870;
    float _1872;
    if (_1830)
    {
        _1868 = _1823;
        _1870 = _1825;
        _1872 = _1827;
    }
    else
    {
        uint _2027 = _1739 + 7u;
        float _2043 = (dot(vec3(cbLight._m0[_1739 + 3u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _2044 = _2043 * _2043;
        float _3930 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2045 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _2046 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _1868 = (((cbLight._m0[_2027].x * 0.3183098733425140380859375) * _2045) * _2046) + _1823;
        _1870 = (((cbLight._m0[_2027].y * 0.3183098733425140380859375) * _2045) * _2046) + _1825;
        _1872 = (((cbLight._m0[_2027].z * 0.3183098733425140380859375) * _2045) * _2046) + _1827;
    }
    uint _1875 = _1739 + 8u;
    float _1888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1739].w)) * _555) * 0.949999988079071044921875);
    float _1889 = _1888 * _1888;
    float _1890 = cbLight._m0[_1739].x + _632;
    float _1891 = cbLight._m0[_1739].y + _633;
    float _1892 = cbLight._m0[_1739].z + _634;
    float _1896 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
    float _1897 = _1896 * _1890;
    float _1898 = _1896 * _1891;
    float _1899 = _1896 * _1892;
    float _1900 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1739].xyz));
    float _3946 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _3957 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _1904 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _1905 = dot(vec3(_552, _553, _554), vec3(_1897, _1898, _1899));
    float _3968 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    float _1909 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_1897, _1898, _1899));
    float _3979 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1913 = _1889 * _1889;
    float _1917 = ((_1908 * _1908) * (_1913 + (-1.0))) + 1.0;
    float _1928 = (exp2(log2(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1929 = 1.0 - _1889;
    float _1940 = (0.5 / (((_1904 * ((_1903 * _1929) + _1889)) + 9.9999999392252902907785028219223e-09) + (((_1904 * _1929) + _1889) * _1903))) * _1903;
    float _3990 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1942 = (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1913 / ((_1917 * _1917) * 3.141590118408203125));
    uint _1953 = _1739 + 9u;
    float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1776].w)) * _555) * 0.949999988079071044921875);
    float _1965 = _1964 * _1964;
    float _1966 = cbLight._m0[_1776].x + _632;
    float _1967 = cbLight._m0[_1776].y + _633;
    float _1968 = cbLight._m0[_1776].z + _634;
    float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
    float _1973 = _1972 * _1966;
    float _1974 = _1972 * _1967;
    float _1975 = _1972 * _1968;
    float _1976 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1776].xyz));
    float _4001 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1980 = dot(vec3(_552, _553, _554), vec3(_1973, _1974, _1975));
    float _4012 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1983 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1984 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_1973, _1974, _1975));
    float _4023 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1988 = _1965 * _1965;
    float _1992 = ((_1983 * _1983) * (_1988 + (-1.0))) + 1.0;
    float _2001 = (exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2002 = 1.0 - _1965;
    float _2012 = (0.5 / (((_1904 * ((_1979 * _2002) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1904 * _2002) + _1965) * _1979))) * _1979;
    float _4034 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2014 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1988 / ((_1992 * _1992) * 3.141590118408203125));
    float _2024 = (((_2001 * cbLight._m0[_1953].x) * _2014) * _1762) + (((_1928 * cbLight._m0[_1875].x) * _1942) * _1772);
    float _2025 = (((_2001 * cbLight._m0[_1953].y) * _2014) * _1762) + (((_1928 * cbLight._m0[_1875].y) * _1942) * _1772);
    float _2026 = (((_2001 * cbLight._m0[_1953].z) * _2014) * _1762) + (((_1928 * cbLight._m0[_1875].z) * _1942) * _1772);
    float _2088;
    float _2090;
    float _2092;
    if (_1812)
    {
        _2088 = _2024;
        _2090 = _2025;
        _2092 = _2026;
    }
    else
    {
        uint _2094 = _1739 + 2u;
        uint _2098 = _1739 + 10u;
        float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _555) * 0.949999988079071044921875);
        float _2113 = _2112 * _2112;
        float _2114 = cbLight._m0[_2094].x + _632;
        float _2115 = cbLight._m0[_2094].y + _633;
        float _2116 = cbLight._m0[_2094].z + _634;
        float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
        float _2121 = _2120 * _2114;
        float _2122 = _2120 * _2115;
        float _2123 = _2120 * _2116;
        float _2124 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2094].xyz));
        float _4045 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2127 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _2128 = dot(vec3(_552, _553, _554), vec3(_2121, _2122, _2123));
        float _4056 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
        float _2131 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2132 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2121, _2122, _2123));
        float _4067 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2136 = _2113 * _2113;
        float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
        float _2149 = (exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2150 = 1.0 - _2113;
        float _2160 = (0.5 / (((_1904 * ((_2127 * _2150) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_1904 * _2150) + _2113) * _2127))) * _2127;
        float _4078 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2162 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
        float _2163 = isnan(1.0) ? _1754 : (isnan(_1754) ? 1.0 : min(_1754, 1.0));
        _2088 = (((_2149 * cbLight._m0[_2098].x) * _2162) * _2163) + _2024;
        _2090 = (((_2149 * cbLight._m0[_2098].y) * _2162) * _2163) + _2025;
        _2092 = (((_2149 * cbLight._m0[_2098].z) * _2162) * _2163) + _2026;
    }
    float _2198;
    float _2200;
    float _2202;
    if (_1830)
    {
        _2198 = _2088;
        _2200 = _2090;
        _2202 = _2092;
    }
    else
    {
        uint _2209 = _1739 + 3u;
        uint _2213 = _1739 + 11u;
        float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _555) * 0.949999988079071044921875);
        float _2228 = _2227 * _2227;
        float _2229 = cbLight._m0[_2209].x + _632;
        float _2230 = cbLight._m0[_2209].y + _633;
        float _2231 = cbLight._m0[_2209].z + _634;
        float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
        float _2236 = _2235 * _2229;
        float _2237 = _2235 * _2230;
        float _2238 = _2235 * _2231;
        float _2239 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2209].xyz));
        float _4094 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2242 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2243 = dot(vec3(_552, _553, _554), vec3(_2236, _2237, _2238));
        float _4105 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
        float _2246 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2247 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2236, _2237, _2238));
        float _4116 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2251 = _2228 * _2228;
        float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
        float _2264 = (exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2265 = 1.0 - _2228;
        float _2275 = (0.5 / (((_1904 * ((_2242 * _2265) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_1904 * _2265) + _2228) * _2242))) * _2242;
        float _4127 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2277 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
        float _2278 = isnan(1.0) ? _1755 : (isnan(_1755) ? 1.0 : min(_1755, 1.0));
        _2198 = (((_2264 * cbLight._m0[_2213].x) * _2277) * _2278) + _2088;
        _2200 = (((_2264 * cbLight._m0[_2213].y) * _2277) * _2278) + _2090;
        _2202 = (((_2264 * cbLight._m0[_2213].z) * _2277) * _2278) + _2092;
    }
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    float _2421;
    float _2423;
    if (_1737.y == 0u)
    {
        float _2353 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2354 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2353;
        float _2355 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2353;
        float _2356 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2353;
        uvec4 _2368 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2369 = _2368.x;
        uint _2380 = uint((float(_2368.y) * floor(float(uint(cbSceneParam._m0[85u].y * _641) / _2369))) + floor(float(uint(cbSceneParam._m0[85u].x * _640) / _2369)));
        float _2390 = (log2(_2356 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2391 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        uint _2394 = uint(isnan(14.0) ? _2391 : (isnan(_2391) ? 14.0 : min(_2391, 14.0)));
        uvec4 _2399 = texelFetch(g_lightClusterGridBuffer, int(((_2394 << 2u) + (_2380 << 6u)) >> 2u));
        uint _2400 = _2399.x;
        uint _2401 = _2368.z;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        float _2511;
        if (((((1u << ((_2401 >> 4u) & 15u)) + 4294967295u) & _2400) == 0u) || ((_2401 & 240u) == 0u))
        {
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
            _2511 = 0.0;
        }
        else
        {
            float _2502;
            float _2504;
            float _2506;
            float _2508;
            float _2510;
            float _2512;
            float _2646 = 0.0;
            float _2647 = 0.0;
            float _2648 = 0.0;
            float _2649 = 0.0;
            float _2650 = 0.0;
            float _2651 = 0.0;
            uint _2652 = 0u;
            uint _2661;
            bool _2662;
            for (;;)
            {
                _2661 = texelFetch(g_lightClassification, int((((_2394 << 5u) + (_2380 << 9u)) + (_2652 << 2u)) >> 2u)).x;
                _2662 = _2661 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2662)
                {
                    frontier_phi_61_pred = _2646;
                    frontier_phi_61_pred_1 = _2651;
                    frontier_phi_61_pred_2 = _2650;
                    frontier_phi_61_pred_3 = _2649;
                    frontier_phi_61_pred_4 = _2648;
                    frontier_phi_61_pred_5 = _2647;
                }
                else
                {
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    uint _2776;
                    _2770 = _2646;
                    _2771 = _2647;
                    _2772 = _2648;
                    _2773 = _2649;
                    _2774 = _2650;
                    _2775 = _2651;
                    _2776 = _2661;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    for (;;)
                    {
                        uint _2780 = uint(findLSB(_2776)) + (_2652 << 5u);
                        uint _2777 = (_2776 + 4294967295u) & _2776;
                        uint _2782 = _2780 * 48u;
                        vec4 _2796 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2782)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 3u)).x));
                        uint _2802 = (_2780 * 48u) + 4u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 3u)).x));
                        uint _2821 = (_2780 * 48u) + 8u;
                        vec3 _2832 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x));
                        float _2836 = _2796.x - _2354;
                        float _2837 = _2796.y - _2355;
                        float _2838 = _2796.z - _2356;
                        float _2839 = dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838));
                        float _2842 = inversesqrt(_2839);
                        float _2843 = _2842 * _2836;
                        float _2844 = _2842 * _2837;
                        float _2845 = _2842 * _2838;
                        float _2846 = dot(vec3(_659, _662, _665), vec3(_2843, _2844, _2845));
                        float _2851 = 1.0 - (_2839 * _2796.w);
                        float _4153 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2852 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                        float _2853 = sqrt(_2839) * _2815.w;
                        float _2856 = 1.39999997615814208984375 / (_2853 + 1.39999997615814208984375);
                        float _2857 = _2856 * _2856;
                        float _2860 = ((1.0 - _2857) * _2846) + _2857;
                        float _2863 = _2853 * _2853;
                        float _2867 = ((isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0))) * _2852) / ((_2863 * 0.699999988079071044921875) + 1.0);
                        float _2871 = (-0.0) - _2354;
                        float _2872 = (-0.0) - _2355;
                        float _2873 = (-0.0) - _2356;
                        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
                        float _2878 = _2877 * _2871;
                        float _2879 = _2877 * _2872;
                        float _2880 = _2877 * _2873;
                        float _2888 = exp2(log2(1.0 / ((_2863 * 3.5) + 5.0)) * 0.25);
                        float _2889 = 1.0 - _719;
                        float _2896 = sqrt(1.0 - ((1.0 - (_2889 * _2889)) * (1.0 - (_2888 * _2888))));
                        float _2897 = _2896 * _2896;
                        float _2898 = _2897 * _2897;
                        float _2899 = _2878 + _2843;
                        float _2900 = _2879 + _2844;
                        float _2901 = _2880 + _2845;
                        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
                        float _2909 = dot(vec3(_659, _662, _665), vec3(_2878, _2879, _2880));
                        float _4169 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2912 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                        float _2913 = dot(vec3(_659, _662, _665), vec3(_2905 * _2899, _2905 * _2900, _2905 * _2901));
                        float _4180 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2916 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                        float _2920 = ((_2916 * _2916) * (_2898 + (-1.0))) + 1.0;
                        float _2921 = _2856 * _2897;
                        float _2922 = _2921 * _2921;
                        float _2925 = ((1.0 - _2922) * _2846) + _2922;
                        float _4191 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2926 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2927 = 1.0 - _2897;
                        float _2937 = (0.5 / (((_2926 * ((_2912 * _2927) + _2897)) + 9.9999999392252902907785028219223e-09) + (((_2926 * _2927) + _2897) * _2912))) * _2926;
                        float _4202 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2948 = (((_2898 * 3.1415927410125732421875) * (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0)))) / ((_2920 * _2920) * ((_2863 * 2.1991131305694580078125) + 3.141590118408203125))) * _2852;
                        _2705 = (_2867 * _2815.x) + _2773;
                        _2706 = (_2867 * _2815.y) + _2774;
                        _2707 = (_2867 * _2815.z) + _2775;
                        _2702 = (_2948 * _2832.x) + _2770;
                        _2703 = (_2948 * _2832.y) + _2771;
                        _2704 = (_2948 * _2832.z) + _2772;
                        if (_2777 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2770 = _2702;
                            _2771 = _2703;
                            _2772 = _2704;
                            _2773 = _2705;
                            _2774 = _2706;
                            _2775 = _2707;
                            _2776 = _2777;
                        }
                    }
                    frontier_phi_61_pred = _2702;
                    frontier_phi_61_pred_1 = _2707;
                    frontier_phi_61_pred_2 = _2706;
                    frontier_phi_61_pred_3 = _2705;
                    frontier_phi_61_pred_4 = _2704;
                    frontier_phi_61_pred_5 = _2703;
                }
                _2502 = frontier_phi_61_pred;
                _2512 = frontier_phi_61_pred_1;
                _2510 = frontier_phi_61_pred_2;
                _2508 = frontier_phi_61_pred_3;
                _2506 = frontier_phi_61_pred_4;
                _2504 = frontier_phi_61_pred_5;
                uint _2653 = _2652 + 1u;
                if (_2653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2646 = _2502;
                    _2647 = _2504;
                    _2648 = _2506;
                    _2649 = _2508;
                    _2650 = _2510;
                    _2651 = _2512;
                    _2652 = _2653;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
            _2511 = _2512;
        }
        uvec4 _2515 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2516 = _2515.z;
        uint _2518 = (_2516 >> 8u) & 15u;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        float _2622;
        float _2624;
        if (((4294967295u << _2518) & _2400) == 0u)
        {
            _2614 = _2501;
            _2616 = _2503;
            _2618 = _2505;
            _2620 = _2507;
            _2622 = _2509;
            _2624 = _2511;
        }
        else
        {
            float _2639 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
            float _2640 = _2639 * _2354;
            float _2641 = _2639 * _2355;
            float _2642 = _2639 * _2356;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2518 < ((_2516 >> 12u) & 15u))
            {
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2623;
                float _2625;
                float _2753 = _2501;
                float _2754 = _2503;
                float _2755 = _2505;
                float _2756 = _2507;
                float _2757 = _2509;
                float _2758 = _2511;
                uint _2759 = _2518;
                uint _2768;
                bool _2769;
                for (;;)
                {
                    _2768 = texelFetch(g_lightClassification, int((((_2394 << 5u) + (_2380 << 9u)) + (_2759 << 2u)) >> 2u)).x;
                    _2769 = _2768 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2769)
                    {
                        frontier_phi_67_pred = _2756;
                        frontier_phi_67_pred_1 = _2757;
                        frontier_phi_67_pred_2 = _2758;
                        frontier_phi_67_pred_3 = _2755;
                        frontier_phi_67_pred_4 = _2754;
                        frontier_phi_67_pred_5 = _2753;
                    }
                    else
                    {
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _2966 = _2753;
                        float _2967 = _2754;
                        float _2968 = _2755;
                        float _2969 = _2756;
                        float _2970 = _2757;
                        float _2971 = _2758;
                        uint _2972 = _2768;
                        uint _2973;
                        vec4 _2998;
                        float _2999;
                        vec4 _3014;
                        vec3 _3026;
                        vec4 _3041;
                        vec4 _3057;
                        float _3103;
                        bool _3104;
                        for (;;)
                        {
                            uint _2983 = ((_2759 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2972));
                            _2973 = (_2972 + 4294967295u) & _2972;
                            uint _2985 = _2983 * 40u;
                            _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            _2999 = _2998.w;
                            uint _3001 = (_2983 * 40u) + 4u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3016 = (_2983 * 40u) + 8u;
                            _3026 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x));
                            uint _3028 = (_2983 * 40u) + 16u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            uint _3044 = (_2983 * 40u) + 20u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3059 = (_2983 * 40u) + 24u;
                            vec4 _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3078 = (_2983 * 40u) + 28u;
                            vec4 _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            _3103 = fma(_2356, _3091.z, fma(_2355, _3091.y, _3091.x * _2354)) + _3091.w;
                            _3104 = !((fma(_2356, _3072.z, fma(_2355, _3072.y, _3072.x * _2354)) + _3072.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3104)
                            {
                                float _3131 = _2998.x - _2354;
                                float _3132 = _2998.y - _2355;
                                float _3133 = _2998.z - _2356;
                                float _3134 = dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133));
                                float _3137 = inversesqrt(_3134);
                                float _3138 = _3137 * _3131;
                                float _3139 = _3137 * _3132;
                                float _3140 = _3137 * _3133;
                                float _3144 = 1.0 - (_3134 / (_2999 * _2999));
                                float _4213 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3145 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                                float _3149 = sqrt(_3134) * _3014.w;
                                float _3151 = 1.39999997615814208984375 / (_3149 + 1.39999997615814208984375);
                                float _3152 = _3151 * _3151;
                                float _3155 = ((1.0 - _3152) * dot(vec3(_3138, _3139, _3140), vec3(_659, _662, _665))) + _3152;
                                float _3158 = _3149 * _3149;
                                float _3162 = (fma(_2356, _3041.z, fma(_2355, _3041.y, _3041.x * _2354)) + _3041.w) / _3103;
                                float _3163 = (fma(_2356, _3057.z, fma(_2355, _3057.y, _3057.x * _2354)) + _3057.w) / _3103;
                                float _3167 = 1.0 - dot(vec2(_3162, _3163), vec2(_3162, _3163));
                                float _4229 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3168 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                                float _3169 = _3168 * (((isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0))) * _3145) / ((_3158 * 0.699999988079071044921875) + 1.0));
                                float _3181 = exp2(log2(1.0 / ((_3158 * 3.5) + 5.0)) * 0.25);
                                float _3182 = 1.0 - _719;
                                float _3189 = sqrt(1.0 - ((1.0 - (_3182 * _3182)) * (1.0 - (_3181 * _3181))));
                                float _3190 = _3189 * _3189;
                                float _3191 = _3190 * _3190;
                                float _3192 = _3138 - _2640;
                                float _3193 = _3139 - _2641;
                                float _3194 = _3140 - _2642;
                                float _3198 = inversesqrt(dot(vec3(_3192, _3193, _3194), vec3(_3192, _3193, _3194)));
                                float _3202 = dot(vec3(_659, _662, _665), vec3((-0.0) - _2640, (-0.0) - _2641, (-0.0) - _2642));
                                float _4240 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3205 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3206 = dot(vec3(_659, _662, _665), vec3(_3198 * _3192, _3198 * _3193, _3198 * _3194));
                                float _4251 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                                float _3209 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3213 = ((_3209 * _3209) * (_3191 + (-1.0))) + 1.0;
                                float _3214 = _3151 * _3190;
                                float _3215 = _3214 * _3214;
                                float _3221 = ((1.0 - _3215) * dot(vec3(_659, _662, _665), vec3(_3138, _3139, _3140))) + _3215;
                                float _4262 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3223 = 1.0 - _3190;
                                float _3233 = (0.5 / (((_3222 * ((_3205 * _3223) + _3190)) + 9.9999999392252902907785028219223e-09) + (((_3222 * _3223) + _3190) * _3205))) * _3222;
                                float _4273 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3243 = (_3168 * _3145) * (((_3191 * 3.1415927410125732421875) * (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) / ((_3213 * _3213) * ((_3158 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3243 * _3026.x;
                                frontier_phi_73_pred_1 = _3243 * _3026.y;
                                frontier_phi_73_pred_2 = _3169 * _3014.z;
                                frontier_phi_73_pred_3 = _3169 * _3014.y;
                                frontier_phi_73_pred_4 = _3169 * _3014.x;
                                frontier_phi_73_pred_5 = _3243 * _3026.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3247 = frontier_phi_73_pred;
                            _3248 = frontier_phi_73_pred_1;
                            _3252 = frontier_phi_73_pred_2;
                            _3251 = frontier_phi_73_pred_3;
                            _3250 = frontier_phi_73_pred_4;
                            _3249 = frontier_phi_73_pred_5;
                            _2956 = _3250 + _2969;
                            _2957 = _3251 + _2970;
                            _2958 = _3252 + _2971;
                            _2953 = _3247 + _2966;
                            _2954 = _3248 + _2967;
                            _2955 = _3249 + _2968;
                            if (_2973 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2956;
                                _2970 = _2957;
                                _2971 = _2958;
                                _2972 = _2973;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2956;
                        frontier_phi_67_pred_1 = _2957;
                        frontier_phi_67_pred_2 = _2958;
                        frontier_phi_67_pred_3 = _2955;
                        frontier_phi_67_pred_4 = _2954;
                        frontier_phi_67_pred_5 = _2953;
                    }
                    _2621 = frontier_phi_67_pred;
                    _2623 = frontier_phi_67_pred_1;
                    _2625 = frontier_phi_67_pred_2;
                    _2619 = frontier_phi_67_pred_3;
                    _2617 = frontier_phi_67_pred_4;
                    _2615 = frontier_phi_67_pred_5;
                    uint _2760 = _2759 + 1u;
                    if (_2760 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2753 = _2615;
                        _2754 = _2617;
                        _2755 = _2619;
                        _2756 = _2621;
                        _2757 = _2623;
                        _2758 = _2625;
                        _2759 = _2760;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2623;
                frontier_phi_55_56_ladder_1 = _2625;
                frontier_phi_55_56_ladder_2 = _2621;
                frontier_phi_55_56_ladder_3 = _2619;
                frontier_phi_55_56_ladder_4 = _2617;
                frontier_phi_55_56_ladder_5 = _2615;
            }
            else
            {
                frontier_phi_55_56_ladder = _2509;
                frontier_phi_55_56_ladder_1 = _2511;
                frontier_phi_55_56_ladder_2 = _2507;
                frontier_phi_55_56_ladder_3 = _2505;
                frontier_phi_55_56_ladder_4 = _2503;
                frontier_phi_55_56_ladder_5 = _2501;
            }
            _2614 = frontier_phi_55_56_ladder_5;
            _2616 = frontier_phi_55_56_ladder_4;
            _2618 = frontier_phi_55_56_ladder_3;
            _2620 = frontier_phi_55_56_ladder_2;
            _2622 = frontier_phi_55_56_ladder;
            _2624 = frontier_phi_55_56_ladder_1;
        }
        float _2629 = isnan(1.0) ? _703 : (isnan(_703) ? 1.0 : min(_703, 1.0));
        _2413 = (_2629 * _2620) + _1868;
        _2415 = (_2629 * _2622) + _1870;
        _2417 = (_2629 * _2624) + _1872;
        _2419 = ((_2614 * 0.039999999105930328369140625) * _2629) + _2198;
        _2421 = ((_2616 * 0.039999999105930328369140625) * _2629) + _2200;
        _2423 = ((_2618 * 0.039999999105930328369140625) * _2629) + _2202;
    }
    else
    {
        _2413 = _1868;
        _2415 = _1870;
        _2417 = _1872;
        _2419 = _2198;
        _2421 = _2200;
        _2423 = _2202;
    }
    float _4289 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4300 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4311 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    uint _2443 = _228 + 6u;
    float _2451 = _640 / cbSceneParam._m0[86u].x;
    float _2452 = _641 / cbSceneParam._m0[86u].y;
    vec4 _2466 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2451, _2452, (log2((isnan(cbSceneParam._m0[77u].w) ? _573 : (isnan(_573) ? cbSceneParam._m0[77u].w : min(_573, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2468 = _2466.x;
    float _2469 = _2466.y;
    float _2470 = _2466.z;
    float _2471 = _2466.w;
    float _2564;
    float _2566;
    float _2568;
    float _2570;
    if (_573 > cbSceneParam._m0[78u].w)
    {
        float _2526 = isnan(_573) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _573 : min(cbSceneParam._m0[80u].w, _573));
        float _2527 = _2526 / _573;
        float _2538 = _2527 * _625;
        float _2539 = _626 * _2527;
        float _2540 = (-0.0) - _2539;
        float _2542 = _2527 * _627;
        float _2544 = (cbSceneParam._m0[77u].w * _2540) / _2526;
        float _2545 = _2544 + cbSceneParam._m0[79u].w;
        float _2546 = cbSceneParam._m0[79u].w - _2539;
        float _2552 = sqrt(((_2538 * _2538) + (_2539 * _2539)) + (_2542 * _2542));
        float _2555 = (1.0 - (cbSceneParam._m0[77u].w / _2526)) * _2552;
        float _2560 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2562 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2715;
        if (abs((_2540 - _2544) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2715 = ((((_2545 > 0.0) ? exp2(_2560 * _2545) : (2.0 - exp2(_2562 * _2545))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2555;
        }
        else
        {
            float _2675 = 1.0 / cbSceneParam._m0[80u].x;
            float _2676 = isnan(_2546) ? _2545 : (isnan(_2545) ? _2546 : max(_2545, _2546));
            float _2677 = isnan(_2546) ? _2545 : (isnan(_2545) ? _2546 : min(_2545, _2546));
            float _2686 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : min(_2676, 0.0));
            float _2687 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : min(_2677, 0.0));
            _2715 = ((abs(_2552 / _2540) * cbSceneParam._m0[80u].y) * ((((_2686 - _2687) * 2.0) - ((exp2(_2560 * (isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0)))) - exp2(_2560 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0))))) * _2675)) - ((exp2(_2562 * _2686) - exp2(_2562 * _2687)) * _2675))) + (_2555 * cbSceneParam._m0[80u].z);
        }
        vec4 _2717 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2451, _2452, 1.0), 0.0);
        float _2726 = exp2((_2715 * (-1.44269502162933349609375)) * (1.0 - _2717.w));
        float _2727 = log2(_2726);
        float _2743 = log2(_2471);
        _2564 = (exp2(_2743 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].x)) * _2717.x) / cbSceneParam._m0[78u].x)) + _2468;
        _2566 = (exp2(_2743 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].y)) * _2717.y) / cbSceneParam._m0[78u].y)) + _2469;
        _2568 = (exp2(_2743 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2727 * cbSceneParam._m0[78u].z)) * _2717.z) / cbSceneParam._m0[78u].z)) + _2470;
        _2570 = _2726 * _2471;
    }
    else
    {
        _2564 = _2468;
        _2566 = _2469;
        _2568 = _2470;
        _2570 = _2471;
    }
    float _2582 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2583 = _2582 == 3.0;
    float _2584 = log2(_2570);
    float _2591 = exp2(_2584 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2413 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _703))) + ((_2419 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1508)) * cbPerFrame._m0[3u].x));
    float _2592 = exp2(_2584 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2415 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _703))) + ((_2421 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1508)) * cbPerFrame._m0[3u].x));
    float _2593 = exp2(_2584 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2417 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _703))) + ((_2423 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1508)) * cbPerFrame._m0[3u].x));
    float _2602 = (_2582 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2602 * (_2583 ? _2591 : (_2591 + (cbSceneParam._m0[72u].w * _2564)));
    SV_Target.y = _2602 * (_2583 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2566)));
    SV_Target.z = _2602 * (_2583 ? _2593 : (_2593 + (cbSceneParam._m0[72u].w * _2568)));
    SV_Target.w = cbInstanceData._m0[_2443].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2443].w;
}


