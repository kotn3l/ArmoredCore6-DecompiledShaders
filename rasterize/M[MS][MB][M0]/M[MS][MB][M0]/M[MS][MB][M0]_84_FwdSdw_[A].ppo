#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1140;
float _3784;
float _3785;
float _3786;
float _3787;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _354 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _354) * cbMtdParam._m0[24u].x) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3796 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _379 = (_372 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _380 = (_372 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _381 = (_372 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _429 = ((_399.z - _420) * _372) + _420;
    float _432 = ((((_399.x - _418) * _372) + _418) * 2.0) + (-1.0);
    float _434 = ((((_399.y - _419) * _372) + _419) * 2.0) + (-1.0);
    float _435 = dot(vec2(_432, _434), vec2(_432, _434));
    float _3807 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _440 = sqrt(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))));
    vec4 _456 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _481 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _483 = _481.x;
    float _484 = 1.0 - _483;
    float _497 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_483 - _484) * cbMtdParam._m0[24u].z) + _484) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3818 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _498 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _505 = (_498 * (cbMtdParam._m0[17u].x - _379)) + _379;
    float _506 = (_498 * (cbMtdParam._m0[17u].y - _380)) + _380;
    float _507 = (_498 * (cbMtdParam._m0[17u].z - _381)) + _381;
    float _511 = (cbMtdParam._m0[19u].w * (_456.z - _429)) + _429;
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _531 = (_524.x * 2.0) + (-1.0);
    float _532 = (_524.y * 2.0) + (-1.0);
    float _533 = dot(vec2(_531, _532), vec2(_531, _532));
    float _3829 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _541 = (_498 * (_524.z - _511)) + _511;
    float _544 = (((_456.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _432;
    float _545 = (((_456.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _434;
    float _557 = (((_531 - _544) + (cbMtdParam._m0[21u].x * _544)) * _498) + _544;
    float _558 = (((_532 - _545) + (cbMtdParam._m0[21u].x * _545)) * _498) + _545;
    float _559 = (_498 * (sqrt(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) - _440)) + _440;
    float _564 = cbMtdParam._m0[22u].x + _456.w;
    float _567 = fma(_559, _223 * NORMAL.x, fma(_558, _230 * TANGENT.x, (_216 * _208) * _557));
    float _570 = fma(_559, _223 * NORMAL.y, fma(_558, _230 * TANGENT.y, (_216 * _209) * _557));
    float _573 = fma(_559, _223 * NORMAL.z, fma(_558, _230 * TANGENT.z, (_216 * _210) * _557));
    float _577 = inversesqrt(dot(vec3(_567, _570, _573), vec3(_567, _570, _573)));
    float _578 = _577 * _567;
    float _579 = _577 * _570;
    float _580 = _577 * _573;
    float _3840 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _581 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3862 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3873 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3884 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _599 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _651 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _641);
    float _652 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _641);
    float _653 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _641);
    float _657 = inversesqrt(dot(vec3(_651, _652, _653), vec3(_651, _652, _653)));
    float _658 = _651 * _657;
    float _659 = _652 * _657;
    float _660 = _653 * _657;
    vec4 _665 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _667 = _665.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _821 = sqrt(((_651 * _651) + (_652 * _652)) + (_653 * _653));
        float _827 = (cbMatDynParam._m0[5u].x * _821) + cbMatDynParam._m0[5u].y;
        float _3895 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _832 = (cbMatDynParam._m0[5u].z * _821) + cbMatDynParam._m0[5u].w;
        float _3906 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) - _828)) + _828) < ((_667 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _678 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _679 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _697 = fma(_580, cbSceneParam._m0[5u].z, fma(_579, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _578));
    float _700 = fma(_580, cbSceneParam._m0[6u].z, fma(_579, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _578));
    float _703 = fma(_580, cbSceneParam._m0[7u].z, fma(_579, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _578));
    uint _716 = _236 + 9u;
    uint _717 = _716 + uint(cbMatDynParam._m0[0u].w);
    float _723 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_717].x;
    float _724 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_717].y;
    float _725 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_717].z;
    float _3917 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    vec4 _737 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _678, cbSceneParam._m0[86u].y * _679));
    float _741 = ((isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * TEXCOORD_5.w) * _737.x;
    float _742 = dot(vec3(_578, _579, _580), vec3(_658, _659, _660));
    float _745 = _742 * 2.0;
    float _749 = (_745 * _578) - _658;
    float _750 = (_745 * _579) - _659;
    float _751 = (_745 * _580) - _660;
    float _755 = abs(dot(vec3(_658, _659, _660), vec3(_578, _579, _580)));
    float _3950 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _757 = sqrt(_581);
    float _770 = exp2((_757 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_757 * 3.0));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _810 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1139;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _864 = fma(_810, cbModelParam._m0[26u].z, fma(_806, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _802));
        float _868 = fma(_810, cbModelParam._m0[27u].z, fma(_806, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _802));
        float _872 = fma(_810, cbModelParam._m0[28u].z, fma(_806, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _802));
        float _897 = _802 + _578;
        float _898 = _806 + _579;
        float _899 = _810 + _580;
        float _909 = fma(_899, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897)) - _864;
        float _910 = fma(_899, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897)) - _868;
        float _911 = fma(_899, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897)) - _872;
        float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
        float _928 = ((_915 * _909) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_864 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_915 * _910) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_868 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_915 * _911) / cbModelParam._m0[34u].z) + ((((((_872 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        float _967 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_933.x + (-0.5));
        float _969 = _967 * (_933.y + (-0.5));
        float _970 = _967 * (_933.z + (-0.5));
        float _977 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_940.x + (-0.5));
        float _979 = _977 * (_940.y + (-0.5));
        float _980 = _977 * (_940.z + (-0.5));
        float _987 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_947.x + (-0.5));
        float _989 = _987 * (_947.y + (-0.5));
        float _990 = _987 * (_947.z + (-0.5));
        float _997 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_954.x + (-0.5));
        float _999 = _997 * (_954.y + (-0.5));
        float _1000 = _997 * (_954.z + (-0.5));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = _968 * 0.5;
        float _1005 = _978 * 0.5;
        float _1006 = _988 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1021 = (dot(vec3(_578, _579, _580), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1031 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3998 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1033 + 1.0))) + _1038) * _1001;
        float _1048 = _969 * 0.5;
        float _1049 = _979 * 0.5;
        float _1050 = _989 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_578, _579, _580), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _4031 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1075 + 1.0))) + _1080) * _1002;
        float _1090 = _970 * 0.5;
        float _1091 = _980 * 0.5;
        float _1092 = _990 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_578, _579, _580), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _4064 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1117 + 1.0))) + _1122) * _1003;
        _1139 = _970;
        _1141 = _969;
        _1142 = _968;
        _1143 = _980;
        _1144 = _979;
        _1145 = _978;
        _1146 = _990;
        _1147 = _989;
        _1148 = _988;
        _1149 = _1003;
        _1150 = _1002;
        _1151 = _1001;
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
    }
    else
    {
        _1139 = _1140;
        _1141 = _1140;
        _1142 = _1140;
        _1143 = _1140;
        _1144 = _1140;
        _1145 = _1140;
        _1146 = _1140;
        _1147 = _1140;
        _1148 = _1140;
        _1149 = _1140;
        _1150 = _1140;
        _1151 = _1140;
        _1152 = 0.0;
        _1153 = 0.0;
        _1154 = 0.0;
    }
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1182 = fma(_810, cbModelParam._m0[30u].z, fma(_806, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _802));
        float _1186 = fma(_810, cbModelParam._m0[31u].z, fma(_806, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _802));
        float _1190 = fma(_810, cbModelParam._m0[32u].z, fma(_806, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _802));
        float _1213 = _802 + _578;
        float _1214 = _806 + _579;
        float _1215 = _810 + _580;
        float _1225 = fma(_1215, cbModelParam._m0[30u].z, fma(_1214, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1213)) - _1182;
        float _1226 = fma(_1215, cbModelParam._m0[31u].z, fma(_1214, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1213)) - _1186;
        float _1227 = fma(_1215, cbModelParam._m0[32u].z, fma(_1214, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1213)) - _1190;
        float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
        float _1244 = ((_1231 * _1225) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1182 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1231 * _1226) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1186 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1231 * _1227) / cbModelParam._m0[35u].z) + ((((((_1190 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        float _1281 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1248.x + (-0.5));
        float _1283 = _1281 * (_1248.y + (-0.5));
        float _1284 = _1281 * (_1248.z + (-0.5));
        float _1291 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1255.x + (-0.5));
        float _1293 = _1291 * (_1255.y + (-0.5));
        float _1294 = _1291 * (_1255.z + (-0.5));
        float _1301 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1262.x + (-0.5));
        float _1303 = _1301 * (_1262.y + (-0.5));
        float _1304 = _1301 * (_1262.z + (-0.5));
        float _1311 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1269.x + (-0.5));
        float _1313 = _1311 * (_1269.y + (-0.5));
        float _1314 = _1311 * (_1269.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_578, _579, _580), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4127 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1345 + 1.0))) + _1350) * _1315;
        float _1360 = _1283 * 0.5;
        float _1361 = _1293 * 0.5;
        float _1362 = _1303 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_578, _579, _580), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _4160 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1387 + 1.0))) + _1392) * _1316;
        float _1402 = _1284 * 0.5;
        float _1403 = _1294 * 0.5;
        float _1404 = _1304 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_578, _579, _580), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _4193 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1429 + 1.0))) + _1434) * _1317;
        _1451 = _1284;
        _1452 = _1283;
        _1453 = _1282;
        _1454 = _1294;
        _1455 = _1293;
        _1456 = _1292;
        _1457 = _1304;
        _1458 = _1303;
        _1459 = _1302;
        _1460 = _1317;
        _1461 = _1316;
        _1462 = _1315;
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
    }
    else
    {
        _1451 = _1140;
        _1452 = _1140;
        _1453 = _1140;
        _1454 = _1140;
        _1455 = _1140;
        _1456 = _1140;
        _1457 = _1140;
        _1458 = _1140;
        _1459 = _1140;
        _1460 = _1140;
        _1461 = _1140;
        _1462 = _1140;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1152)) + _1152;
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1153)) + _1153;
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1154)) + _1154;
    float _1498 = fma(_1477, cbSceneParam._m0[89u].z, fma(_1476, cbSceneParam._m0[89u].y, _1475 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1477, cbSceneParam._m0[90u].z, fma(_1476, cbSceneParam._m0[90u].y, _1475 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1477, cbSceneParam._m0[91u].z, fma(_1476, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1475));
    float _1519 = _749 * 0.5;
    float _1520 = _750 * 0.5;
    float _1521 = _751 * 0.5;
    float _1522 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1525 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1528 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1562;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1535 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1139, _1143, _1146, _1149));
        float _1539 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1543 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1550 = dot(vec4(cbModelParam._m0[39u]), vec4(_1519, _1520, _1521, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1573;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1564 = dot(vec4(cbModelParam._m0[40u]), vec4(_1519, _1520, _1521, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1577 = (_1573 * cbModelParam._m0[1u].x) + (_1562 * (1.0 - cbModelParam._m0[1u].x));
    float _1587 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _581);
    float _1588 = isnan(_1587) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1587 : min(cbModelParam._m0[25u].z, _1587));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1636 = fma(_810, cbModelParam._m0[13u].z, fma(_806, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _802)) + cbModelParam._m0[13u].w;
        float _1640 = fma(_810, cbModelParam._m0[14u].z, fma(_806, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _802)) + cbModelParam._m0[14u].w;
        float _1644 = fma(_810, cbModelParam._m0[15u].z, fma(_806, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _802)) + cbModelParam._m0[15u].w;
        float _1647 = fma(_751, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749));
        float _1650 = fma(_751, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749));
        float _1653 = fma(_751, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749));
        float _1681;
        if (_1647 > 0.0)
        {
            _1681 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1681 = frontier_phi_17_15_ladder;
        }
        float _1851;
        if (_1650 > 0.0)
        {
            _1851 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1851 = frontier_phi_26_22_ladder;
        }
        float _2146;
        if (_1653 > 0.0)
        {
            _2146 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2146 = frontier_phi_38_33_ladder;
        }
        float _2148 = isnan(_1851) ? _1681 : (isnan(_1681) ? _1851 : min(_1681, _1851));
        float _2149 = isnan(_2146) ? _2148 : (isnan(_2148) ? _2146 : min(_2148, _2146));
        float _2153 = (_2149 * _1647) + _1636;
        float _2154 = (_2149 * _1650) + _1640;
        float _2155 = (_2149 * _1653) + _1644;
        float _2156 = _2149 * 9.9999997473787516355514526367188e-05;
        float _2158 = (-1.0) - _2156;
        float _2160 = _2156 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2155 > _2160) || ((_2155 < _2158) || ((_2154 > _2160) || ((_2154 < _2158) || ((_2153 < _2158) || (_2153 > _2160))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2300 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2155, cbModelParam._m0[9u].z, fma(_2154, cbModelParam._m0[9u].y, _2153 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2155, cbModelParam._m0[10u].z, fma(_2154, cbModelParam._m0[10u].y, _2153 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2155, cbModelParam._m0[11u].z, fma(_2154, cbModelParam._m0[11u].y, _2153 * cbModelParam._m0[11u].x))), _1588);
            frontier_phi_16_38_ladder = _2300.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2300.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2300.x * cbModelParam._m0[1u].y;
        }
        _1669 = frontier_phi_16_38_ladder_2;
        _1671 = frontier_phi_16_38_ladder_1;
        _1673 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_749, _750, _751), _1588);
        _1669 = _1657.x * cbModelParam._m0[1u].y;
        _1671 = _1657.y * cbModelParam._m0[1u].y;
        _1673 = _1657.z * cbModelParam._m0[1u].y;
    }
    float _1677 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _581);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1677 : min(cbModelParam._m0[25u].w, _1677));
    float _1768;
    float _1770;
    float _1772;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1732 = fma(_810, cbModelParam._m0[21u].z, fma(_806, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _802)) + cbModelParam._m0[21u].w;
        float _1736 = fma(_810, cbModelParam._m0[22u].z, fma(_806, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _802)) + cbModelParam._m0[22u].w;
        float _1740 = fma(_810, cbModelParam._m0[23u].z, fma(_806, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _802)) + cbModelParam._m0[23u].w;
        float _1743 = fma(_751, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749));
        float _1746 = fma(_751, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749));
        float _1749 = fma(_751, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749));
        float _1856;
        if (_1743 > 0.0)
        {
            _1856 = abs((1.0 - _1732) / _1743);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1732 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1856 = frontier_phi_28_24_ladder;
        }
        float _2173;
        if (_1746 > 0.0)
        {
            _2173 = abs((1.0 - _1736) / _1746);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1746 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1736 + 1.0) / _1746);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2173 = frontier_phi_40_35_ladder;
        }
        float _2500;
        if (_1749 > 0.0)
        {
            _2500 = abs((1.0 - _1740) / _1749);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1749 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1740 + 1.0) / _1749);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2500 = frontier_phi_50_47_ladder;
        }
        float _2502 = isnan(_2173) ? _1856 : (isnan(_1856) ? _2173 : min(_1856, _2173));
        float _2503 = isnan(_2500) ? _2502 : (isnan(_2502) ? _2500 : min(_2502, _2500));
        float _2507 = (_2503 * _1743) + _1732;
        float _2508 = (_2503 * _1746) + _1736;
        float _2509 = (_2503 * _1749) + _1740;
        float _2510 = _2503 * 9.9999997473787516355514526367188e-05;
        float _2511 = (-1.0) - _2510;
        float _2513 = _2510 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2509 > _2513) || ((_2509 < _2511) || ((_2508 > _2513) || ((_2508 < _2511) || ((_2507 < _2511) || (_2507 > _2513))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2509, cbModelParam._m0[17u].z, fma(_2508, cbModelParam._m0[17u].y, _2507 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2509, cbModelParam._m0[18u].z, fma(_2508, cbModelParam._m0[18u].y, _2507 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2509, cbModelParam._m0[19u].z, fma(_2508, cbModelParam._m0[19u].y, _2507 * cbModelParam._m0[19u].x))), _1678);
            frontier_phi_25_50_ladder = _2627.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2627.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2627.x * cbModelParam._m0[1u].z;
        }
        _1768 = frontier_phi_25_50_ladder_2;
        _1770 = frontier_phi_25_50_ladder_1;
        _1772 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1752 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_749, _750, _751), _1678);
        _1768 = _1752.x * cbModelParam._m0[1u].z;
        _1770 = _1752.y * cbModelParam._m0[1u].z;
        _1772 = _1752.z * cbModelParam._m0[1u].z;
    }
    float _1784 = ((((1.0 - _770) * ((_757 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_770 * _757)) * _741;
    float _1785 = _1784 * ((cbModelParam._m0[1u].w * (_1768 - _1669)) + _1669);
    float _1786 = _1784 * ((cbModelParam._m0[1u].w * (_1770 - _1671)) + _1671);
    float _1787 = _1784 * ((cbModelParam._m0[1u].w * (_1772 - _1673)) + _1673);
    float _1790 = fma(_1787, cbSceneParam._m0[89u].z, fma(_1786, cbSceneParam._m0[89u].y, _1785 * cbSceneParam._m0[89u].x));
    float _1793 = fma(_1787, cbSceneParam._m0[90u].z, fma(_1786, cbSceneParam._m0[90u].y, _1785 * cbSceneParam._m0[90u].x));
    float _1796 = fma(_1787, cbSceneParam._m0[91u].z, fma(_1786, cbSceneParam._m0[91u].y, _1785 * cbSceneParam._m0[91u].x));
    float _1830 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1834 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1838 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1842 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1843 = _1830 / _1842;
    float _1844 = _1834 / _1842;
    float _1845 = _1838 / _1842;
    float _1992;
    float _1993;
    float _1994;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1872 = ((uint(_1845 > cbSceneParam._m0[59u].y) + uint(_1845 > cbSceneParam._m0[59u].x)) + uint(_1845 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1873 = _1872 + 43u;
        uint _1881 = _1872 + 44u;
        uint _1889 = _1872 + 45u;
        uint _1897 = _1872 + 46u;
        float _1908 = fma(_1842, cbSceneParam._m0[_1873].w, fma(_1838, cbSceneParam._m0[_1873].z, fma(_1834, cbSceneParam._m0[_1873].y, _1830 * cbSceneParam._m0[_1873].x)));
        float _1912 = fma(_1842, cbSceneParam._m0[_1881].w, fma(_1838, cbSceneParam._m0[_1881].z, fma(_1834, cbSceneParam._m0[_1881].y, _1830 * cbSceneParam._m0[_1881].x)));
        float _1920 = fma(_1842, cbSceneParam._m0[_1897].w, fma(_1838, cbSceneParam._m0[_1897].z, fma(_1834, cbSceneParam._m0[_1897].y, _1830 * cbSceneParam._m0[_1897].x)));
        float _1925 = cbSceneParam._m0[33u].z * _1920;
        float _1927 = cbSceneParam._m0[33u].w * _1920;
        float _1930 = fma(_1842, cbSceneParam._m0[_1889].w, fma(_1838, cbSceneParam._m0[_1889].z, fma(_1834, cbSceneParam._m0[_1889].y, _1830 * cbSceneParam._m0[_1889].x))) / _1920;
        float _1978 = (cbSceneParam._m0[33u].x - sqrt(((_1844 * _1844) + (_1843 * _1843)) + (_1845 * _1845))) * cbSceneParam._m0[33u].y;
        float _4319 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1985 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1925 + _1908) / _1920, (_1927 + _1912) / _1920), _1930), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1927 + _1908) / _1920, (_1912 - _1925) / _1920), _1930), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1908 - _1925) / _1920, (_1912 - _1927) / _1920), _1930), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1908 - _1927) / _1920, (_1925 + _1912) / _1920), _1930), 0.0)).x), vec4(0.25)));
        _1992 = 1.0 - (_1985 * cbSceneParam._m0[34u].x);
        _1993 = 1.0 - (_1985 * cbSceneParam._m0[34u].y);
        _1994 = 1.0 - (_1985 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1992 = 1.0;
        _1993 = 1.0;
        _1994 = 1.0;
    }
    float _2058;
    float _2060;
    float _2062;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2046 = fma(_1842, cbSceneParam._m0[63u].w, fma(_1838, cbSceneParam._m0[63u].z, fma(_1834, cbSceneParam._m0[63u].y, _1830 * cbSceneParam._m0[63u].x)));
        float _2047 = fma(_1842, cbSceneParam._m0[60u].w, fma(_1838, cbSceneParam._m0[60u].z, fma(_1834, cbSceneParam._m0[60u].y, _1830 * cbSceneParam._m0[60u].x))) / _2046;
        float _2048 = fma(_1842, cbSceneParam._m0[61u].w, fma(_1838, cbSceneParam._m0[61u].z, fma(_1834, cbSceneParam._m0[61u].y, _1830 * cbSceneParam._m0[61u].x))) / _2046;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2047 >= cbSceneParam._m0[64u].x) && (_2048 >= cbSceneParam._m0[64u].y)) && (_2047 <= cbSceneParam._m0[64u].z)) && (_2048 <= cbSceneParam._m0[64u].w))
        {
            float _2186 = fma(_1842, cbSceneParam._m0[62u].w, fma(_1838, cbSceneParam._m0[62u].z, fma(_1834, cbSceneParam._m0[62u].y, _1830 * cbSceneParam._m0[62u].x))) / _2046;
            float _2190 = isnan(cbSceneParam._m0[41u].w) ? _2186 : (isnan(_2186) ? cbSceneParam._m0[41u].w : max(_2186, cbSceneParam._m0[41u].w));
            float _2233 = (cbSceneParam._m0[33u].x - sqrt(((_1844 * _1844) + (_1843 * _1843)) + (_1845 * _1845))) * cbSceneParam._m0[33u].y;
            float _4335 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
            float _2240 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2047, cbSceneParam._m0[33u].w + _2048), _2190), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2047, _2048 - cbSceneParam._m0[33u].z), _2190), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2047 - cbSceneParam._m0[33u].z, _2048 - cbSceneParam._m0[33u].w), _2190), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2047 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2048), _2190), 0.0)).x), vec4(0.25)));
            float _2244 = 1.0 - (_2240 * cbSceneParam._m0[34u].x);
            float _2245 = 1.0 - (_2240 * cbSceneParam._m0[34u].y);
            float _2246 = 1.0 - (_2240 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2246) ? _1994 : (isnan(_1994) ? _2246 : min(_1994, _2246));
            frontier_phi_37_36_ladder_1 = isnan(_2245) ? _1993 : (isnan(_1993) ? _2245 : min(_1993, _2245));
            frontier_phi_37_36_ladder_2 = isnan(_2244) ? _1992 : (isnan(_1992) ? _2244 : min(_1992, _2244));
        }
        else
        {
            frontier_phi_37_36_ladder = _1994;
            frontier_phi_37_36_ladder_1 = _1993;
            frontier_phi_37_36_ladder_2 = _1992;
        }
        _2058 = frontier_phi_37_36_ladder_2;
        _2060 = frontier_phi_37_36_ladder_1;
        _2062 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2058 = _1992;
        _2060 = _1993;
        _2062 = _1994;
    }
    uvec4 _2067 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _2069 = _2067.x * 14u;
    uint _2070 = _2069 + 13u;
    float _2077 = _741 + (-1.0);
    float _2082 = (cbLight._m0[_2070].x * _2077) + 1.0;
    float _2083 = (cbLight._m0[_2070].y * _2077) + 1.0;
    float _2084 = (cbLight._m0[_2070].z * _2077) + 1.0;
    float _2085 = (cbLight._m0[_2070].w * _2077) + 1.0;
    uint _2086 = _2069 + 5u;
    float _2092 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
    uint _2096 = _2069 + 4u;
    float _2105 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
    uint _2109 = _2069 | 1u;
    float _2120 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_578, _579, _580));
    float _2123 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_578, _579, _580));
    float _4371 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _4382 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2128 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2130 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2137 = ((cbLight._m0[_2086].x * _2092) * _2130) + (((cbLight._m0[_2096].x * _2058) * _2105) * _2128);
    float _2138 = ((_2092 * cbLight._m0[_2086].y) * _2130) + (((cbLight._m0[_2096].y * _2060) * _2105) * _2128);
    float _2139 = ((_2092 * cbLight._m0[_2086].z) * _2130) + (((cbLight._m0[_2096].z * _2062) * _2105) * _2128);
    uvec4 _2143 = floatBitsToUint(cbLight._m0[_2069 + 12u]);
    bool _2145 = _2143.x == 0u;
    float _2247;
    float _2249;
    float _2251;
    if (_2145)
    {
        _2247 = _2137;
        _2249 = _2138;
        _2251 = _2139;
    }
    else
    {
        uint _2255 = _2069 + 6u;
        float _2271 = (dot(vec3(cbLight._m0[_2069 + 2u].xyz), vec3(_578, _579, _580)) * 0.5) + 0.5;
        float _2272 = _2271 * _2271;
        float _4393 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2273 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2274 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2247 = (((cbLight._m0[_2255].x * 0.3183098733425140380859375) * _2273) * _2274) + _2137;
        _2249 = (((cbLight._m0[_2255].y * 0.3183098733425140380859375) * _2273) * _2274) + _2138;
        _2251 = (((cbLight._m0[_2255].z * 0.3183098733425140380859375) * _2273) * _2274) + _2139;
    }
    bool _2254 = _2143.y == 0u;
    float _2309;
    float _2311;
    float _2313;
    if (_2254)
    {
        _2309 = _2247;
        _2311 = _2249;
        _2313 = _2251;
    }
    else
    {
        uint _2471 = _2069 + 7u;
        float _2487 = (dot(vec3(cbLight._m0[_2069 + 3u].xyz), vec3(_578, _579, _580)) * 0.5) + 0.5;
        float _2488 = _2487 * _2487;
        float _4409 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2489 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2490 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2309 = (((cbLight._m0[_2471].x * 0.3183098733425140380859375) * _2489) * _2490) + _2247;
        _2311 = (((cbLight._m0[_2471].y * 0.3183098733425140380859375) * _2489) * _2490) + _2249;
        _2313 = (((cbLight._m0[_2471].z * 0.3183098733425140380859375) * _2489) * _2490) + _2251;
    }
    uint _2316 = _2069 + 8u;
    float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _581) * 0.949999988079071044921875);
    float _2330 = _2329 * _2329;
    float _2331 = cbLight._m0[_2069].x + _658;
    float _2332 = cbLight._m0[_2069].y + _659;
    float _2333 = cbLight._m0[_2069].z + _660;
    float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
    float _2338 = _2337 * _2331;
    float _2339 = _2337 * _2332;
    float _2340 = _2337 * _2333;
    float _2341 = dot(vec3(_578, _579, _580), vec3(cbLight._m0[_2069].xyz));
    float _4425 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _4436 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _2345 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2346 = dot(vec3(_578, _579, _580), vec3(_2338, _2339, _2340));
    float _4447 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2349 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2350 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2338, _2339, _2340));
    float _4458 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2354 = _2330 * _2330;
    float _2358 = ((_2349 * _2349) * (_2354 + (-1.0))) + 1.0;
    float _2369 = (exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2370 = 1.0 - _2330;
    float _2381 = (0.5 / (((_2345 * ((_2344 * _2370) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2345 * _2370) + _2330) * _2344))) * _2344;
    float _4469 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2383 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2354 / ((_2358 * _2358) * 3.141590118408203125));
    uint _2397 = _2069 + 9u;
    float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _581) * 0.949999988079071044921875);
    float _2409 = _2408 * _2408;
    float _2410 = cbLight._m0[_2109].x + _658;
    float _2411 = cbLight._m0[_2109].y + _659;
    float _2412 = cbLight._m0[_2109].z + _660;
    float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
    float _2417 = _2416 * _2410;
    float _2418 = _2416 * _2411;
    float _2419 = _2416 * _2412;
    float _2420 = dot(vec3(_578, _579, _580), vec3(cbLight._m0[_2109].xyz));
    float _4480 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2423 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2424 = dot(vec3(_578, _579, _580), vec3(_2417, _2418, _2419));
    float _4491 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2428 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2417, _2418, _2419));
    float _4502 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2432 = _2409 * _2409;
    float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
    float _2445 = (exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2446 = 1.0 - _2409;
    float _2456 = (0.5 / (((_2345 * ((_2423 * _2446) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2345 * _2446) + _2409) * _2423))) * _2423;
    float _4513 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2458 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
    float _2468 = (((_2445 * cbLight._m0[_2397].x) * _2458) * _2092) + ((((cbLight._m0[_2316].x * _2058) * _2369) * _2383) * _2105);
    float _2469 = (((_2445 * cbLight._m0[_2397].y) * _2458) * _2092) + ((((cbLight._m0[_2316].y * _2060) * _2369) * _2383) * _2105);
    float _2470 = (((_2445 * cbLight._m0[_2397].z) * _2458) * _2092) + ((((cbLight._m0[_2316].z * _2062) * _2369) * _2383) * _2105);
    float _2526;
    float _2528;
    float _2530;
    if (_2145)
    {
        _2526 = _2468;
        _2528 = _2469;
        _2530 = _2470;
    }
    else
    {
        uint _2532 = _2069 + 2u;
        uint _2536 = _2069 + 10u;
        float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2532].w)) * _581) * 0.949999988079071044921875);
        float _2551 = _2550 * _2550;
        float _2552 = cbLight._m0[_2532].x + _658;
        float _2553 = cbLight._m0[_2532].y + _659;
        float _2554 = cbLight._m0[_2532].z + _660;
        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
        float _2559 = _2558 * _2552;
        float _2560 = _2558 * _2553;
        float _2561 = _2558 * _2554;
        float _2562 = dot(vec3(_578, _579, _580), vec3(cbLight._m0[_2532].xyz));
        float _4524 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2566 = dot(vec3(_578, _579, _580), vec3(_2559, _2560, _2561));
        float _4535 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2570 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_2559, _2560, _2561));
        float _4546 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2574 = _2551 * _2551;
        float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
        float _2587 = (exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2588 = 1.0 - _2551;
        float _2598 = (0.5 / (((_2345 * ((_2565 * _2588) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2345 * _2588) + _2551) * _2565))) * _2565;
        float _4557 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2600 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
        float _2601 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2526 = (((_2587 * cbLight._m0[_2536].x) * _2600) * _2601) + _2468;
        _2528 = (((_2587 * cbLight._m0[_2536].y) * _2600) * _2601) + _2469;
        _2530 = (((_2587 * cbLight._m0[_2536].z) * _2600) * _2601) + _2470;
    }
    float _2632;
    float _2634;
    float _2636;
    if (_2254)
    {
        _2632 = _2526;
        _2634 = _2528;
        _2636 = _2530;
    }
    else
    {
        uint _2643 = _2069 + 3u;
        uint _2647 = _2069 + 11u;
        float _2661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2643].w)) * _581) * 0.949999988079071044921875);
        float _2662 = _2661 * _2661;
        float _2663 = cbLight._m0[_2643].x + _658;
        float _2664 = cbLight._m0[_2643].y + _659;
        float _2665 = cbLight._m0[_2643].z + _660;
        float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
        float _2670 = _2669 * _2663;
        float _2671 = _2669 * _2664;
        float _2672 = _2669 * _2665;
        float _2673 = dot(vec3(_578, _579, _580), vec3(cbLight._m0[_2643].xyz));
        float _4573 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2676 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2677 = dot(vec3(_578, _579, _580), vec3(_2670, _2671, _2672));
        float _4584 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2681 = dot(vec3(cbLight._m0[_2643].xyz), vec3(_2670, _2671, _2672));
        float _4595 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2685 = _2662 * _2662;
        float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
        float _2698 = (exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2699 = 1.0 - _2662;
        float _2709 = (0.5 / (((_2345 * ((_2676 * _2699) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2345 * _2699) + _2662) * _2676))) * _2676;
        float _4606 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2711 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
        float _2712 = isnan(1.0) ? _2085 : (isnan(_2085) ? 1.0 : min(_2085, 1.0));
        _2632 = (((_2698 * cbLight._m0[_2647].x) * _2711) * _2712) + _2526;
        _2634 = (((_2698 * cbLight._m0[_2647].y) * _2711) * _2712) + _2528;
        _2636 = (((_2698 * cbLight._m0[_2647].z) * _2711) * _2712) + _2530;
    }
    float _2778;
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    if (_2067.y == 0u)
    {
        uvec4 _2733 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2734 = _2733.x;
        uint _2745 = uint((float(_2733.y) * floor(float(uint(cbSceneParam._m0[85u].y * _679) / _2734))) + floor(float(uint(cbSceneParam._m0[85u].x * _678) / _2734)));
        float _2755 = (log2(_1845 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2756 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        uint _2759 = uint(isnan(14.0) ? _2756 : (isnan(_2756) ? 14.0 : min(_2756, 14.0)));
        uvec4 _2764 = texelFetch(g_lightClusterGridBuffer, int(((_2759 << 2u) + (_2745 << 6u)) >> 2u));
        uint _2765 = _2764.x;
        uint _2766 = _2733.z;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        if (((((1u << ((_2766 >> 4u) & 15u)) + 4294967295u) & _2765) == 0u) || ((_2766 & 240u) == 0u))
        {
            _2845 = 0.0;
            _2847 = 0.0;
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
        }
        else
        {
            float _2846;
            float _2848;
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            uint _3004 = 0u;
            uint _3013;
            bool _3014;
            for (;;)
            {
                _3013 = texelFetch(g_lightClassification, int((((_2759 << 5u) + (_2745 << 9u)) + (_3004 << 2u)) >> 2u)).x;
                _3014 = _3013 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3014)
                {
                    frontier_phi_71_pred = _3003;
                    frontier_phi_71_pred_1 = _3002;
                    frontier_phi_71_pred_2 = _3001;
                    frontier_phi_71_pred_3 = _3000;
                    frontier_phi_71_pred_4 = _2999;
                    frontier_phi_71_pred_5 = _2998;
                }
                else
                {
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    float _3148;
                    uint _3149;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3001;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3013;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    for (;;)
                    {
                        uint _3153 = uint(findLSB(_3149)) + (_3004 << 5u);
                        uint _3150 = (_3149 + 4294967295u) & _3149;
                        uint _3155 = _3153 * 48u;
                        vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 3u)).x));
                        uint _3175 = (_3153 * 48u) + 4u;
                        vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 3u)).x));
                        uint _3194 = (_3153 * 48u) + 8u;
                        vec3 _3205 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3194)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3194 + 2u)).x));
                        float _3209 = _3169.x - _1843;
                        float _3210 = _3169.y - _1844;
                        float _3211 = _3169.z - _1845;
                        float _3212 = dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211));
                        float _3215 = inversesqrt(_3212);
                        float _3216 = _3215 * _3209;
                        float _3217 = _3215 * _3210;
                        float _3218 = _3215 * _3211;
                        float _3219 = dot(vec3(_697, _700, _703), vec3(_3216, _3217, _3218));
                        float _3224 = 1.0 - (_3212 * _3169.w);
                        float _4632 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                        float _3225 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3226 = sqrt(_3212) * _3188.w;
                        float _3229 = 1.39999997615814208984375 / (_3226 + 1.39999997615814208984375);
                        float _3230 = _3229 * _3229;
                        float _3233 = ((1.0 - _3230) * _3219) + _3230;
                        float _3236 = _3226 * _3226;
                        float _3240 = ((isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0))) * _3225) / ((_3236 * 0.699999988079071044921875) + 1.0);
                        float _3244 = (-0.0) - _1843;
                        float _3245 = (-0.0) - _1844;
                        float _3246 = (-0.0) - _1845;
                        float _3250 = inversesqrt(dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246)));
                        float _3251 = _3250 * _3244;
                        float _3252 = _3250 * _3245;
                        float _3253 = _3250 * _3246;
                        float _3260 = exp2(log2(1.0 / ((_3236 * 3.5) + 5.0)) * 0.25);
                        float _3261 = 1.0 - _757;
                        float _3268 = sqrt(1.0 - ((1.0 - (_3261 * _3261)) * (1.0 - (_3260 * _3260))));
                        float _3269 = _3268 * _3268;
                        float _3270 = _3269 * _3269;
                        float _3271 = _3251 + _3216;
                        float _3272 = _3252 + _3217;
                        float _3273 = _3253 + _3218;
                        float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                        float _3281 = dot(vec3(_697, _700, _703), vec3(_3251, _3252, _3253));
                        float _4648 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3284 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3285 = dot(vec3(_697, _700, _703), vec3(_3277 * _3271, _3277 * _3272, _3277 * _3273));
                        float _4659 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3292 = ((_3288 * _3288) * (_3270 + (-1.0))) + 1.0;
                        float _3293 = _3229 * _3269;
                        float _3294 = _3293 * _3293;
                        float _3297 = ((1.0 - _3294) * _3219) + _3294;
                        float _4670 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3298 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3299 = 1.0 - _3269;
                        float _3309 = (0.5 / (((_3298 * ((_3284 * _3299) + _3269)) + 9.9999999392252902907785028219223e-09) + (((_3298 * _3299) + _3269) * _3284))) * _3298;
                        float _4681 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3320 = (((_3270 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3292 * _3292) * ((_3236 * 2.1991131305694580078125) + 3.141590118408203125))) * _3225;
                        _3073 = (_3240 * _3188.x) + _3146;
                        _3074 = (_3240 * _3188.y) + _3147;
                        _3075 = (_3240 * _3188.z) + _3148;
                        _3070 = (_3320 * _3205.x) + _3143;
                        _3071 = (_3320 * _3205.y) + _3144;
                        _3072 = (_3320 * _3205.z) + _3145;
                        if (_3150 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3073;
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3150;
                        }
                    }
                    frontier_phi_71_pred = _3075;
                    frontier_phi_71_pred_1 = _3074;
                    frontier_phi_71_pred_2 = _3073;
                    frontier_phi_71_pred_3 = _3072;
                    frontier_phi_71_pred_4 = _3071;
                    frontier_phi_71_pred_5 = _3070;
                }
                _2856 = frontier_phi_71_pred;
                _2854 = frontier_phi_71_pred_1;
                _2852 = frontier_phi_71_pred_2;
                _2850 = frontier_phi_71_pred_3;
                _2848 = frontier_phi_71_pred_4;
                _2846 = frontier_phi_71_pred_5;
                uint _3005 = _3004 + 1u;
                if (_3005 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2998 = _2846;
                    _2999 = _2848;
                    _3000 = _2850;
                    _3001 = _2852;
                    _3002 = _2854;
                    _3003 = _2856;
                    _3004 = _3005;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2845 = _2846;
            _2847 = _2848;
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
        }
        uvec4 _2859 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2860 = _2859.z;
        uint _2862 = (_2860 >> 8u) & 15u;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        if (((4294967295u << _2862) & _2765) == 0u)
        {
            _2966 = _2845;
            _2968 = _2847;
            _2970 = _2849;
            _2972 = _2851;
            _2974 = _2853;
            _2976 = _2855;
        }
        else
        {
            float _2991 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
            float _2992 = _2991 * _1843;
            float _2993 = _2991 * _1844;
            float _2994 = _2991 * _1845;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2862 < ((_2860 >> 12u) & 15u))
            {
                float _2967;
                float _2969;
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _3126 = _2845;
                float _3127 = _2847;
                float _3128 = _2849;
                float _3129 = _2851;
                float _3130 = _2853;
                float _3131 = _2855;
                uint _3132 = _2862;
                uint _3141;
                bool _3142;
                for (;;)
                {
                    _3141 = texelFetch(g_lightClassification, int((((_2759 << 5u) + (_2745 << 9u)) + (_3132 << 2u)) >> 2u)).x;
                    _3142 = _3141 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3142)
                    {
                        frontier_phi_82_pred = _3131;
                        frontier_phi_82_pred_1 = _3130;
                        frontier_phi_82_pred_2 = _3129;
                        frontier_phi_82_pred_3 = _3128;
                        frontier_phi_82_pred_4 = _3127;
                        frontier_phi_82_pred_5 = _3126;
                    }
                    else
                    {
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3347 = _3126;
                        float _3348 = _3127;
                        float _3349 = _3128;
                        float _3350 = _3129;
                        float _3351 = _3130;
                        float _3352 = _3131;
                        uint _3353 = _3141;
                        uint _3354;
                        vec4 _3379;
                        float _3380;
                        vec4 _3395;
                        vec3 _3407;
                        vec4 _3422;
                        vec4 _3438;
                        float _3484;
                        bool _3485;
                        for (;;)
                        {
                            uint _3364 = ((_3132 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3353));
                            _3354 = (_3353 + 4294967295u) & _3353;
                            uint _3366 = _3364 * 40u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3380 = _3379.w;
                            uint _3382 = (_3364 * 40u) + 4u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3364 * 40u) + 8u;
                            _3407 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x));
                            uint _3409 = (_3364 * 40u) + 16u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3425 = (_3364 * 40u) + 20u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3440 = (_3364 * 40u) + 24u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3459 = (_3364 * 40u) + 28u;
                            vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            _3484 = fma(_1845, _3472.z, fma(_1844, _3472.y, _3472.x * _1843)) + _3472.w;
                            _3485 = !((fma(_1845, _3453.z, fma(_1844, _3453.y, _3453.x * _1843)) + _3453.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3485)
                            {
                                float _3512 = _3379.x - _1843;
                                float _3513 = _3379.y - _1844;
                                float _3514 = _3379.z - _1845;
                                float _3515 = dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514));
                                float _3518 = inversesqrt(_3515);
                                float _3519 = _3518 * _3512;
                                float _3520 = _3518 * _3513;
                                float _3521 = _3518 * _3514;
                                float _3525 = 1.0 - (_3515 / (_3380 * _3380));
                                float _4692 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3530 = sqrt(_3515) * _3395.w;
                                float _3532 = 1.39999997615814208984375 / (_3530 + 1.39999997615814208984375);
                                float _3533 = _3532 * _3532;
                                float _3536 = ((1.0 - _3533) * dot(vec3(_3519, _3520, _3521), vec3(_697, _700, _703))) + _3533;
                                float _3539 = _3530 * _3530;
                                float _3543 = (fma(_1845, _3422.z, fma(_1844, _3422.y, _3422.x * _1843)) + _3422.w) / _3484;
                                float _3544 = (fma(_1845, _3438.z, fma(_1844, _3438.y, _3438.x * _1843)) + _3438.w) / _3484;
                                float _3548 = 1.0 - dot(vec2(_3543, _3544), vec2(_3543, _3544));
                                float _4708 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3550 = _3549 * (((isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0))) * _3526) / ((_3539 * 0.699999988079071044921875) + 1.0));
                                float _3562 = exp2(log2(1.0 / ((_3539 * 3.5) + 5.0)) * 0.25);
                                float _3563 = 1.0 - _757;
                                float _3570 = sqrt(1.0 - ((1.0 - (_3563 * _3563)) * (1.0 - (_3562 * _3562))));
                                float _3571 = _3570 * _3570;
                                float _3572 = _3571 * _3571;
                                float _3573 = _3519 - _2992;
                                float _3574 = _3520 - _2993;
                                float _3575 = _3521 - _2994;
                                float _3579 = inversesqrt(dot(vec3(_3573, _3574, _3575), vec3(_3573, _3574, _3575)));
                                float _3583 = dot(vec3(_697, _700, _703), vec3((-0.0) - _2992, (-0.0) - _2993, (-0.0) - _2994));
                                float _4719 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3586 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3587 = dot(vec3(_697, _700, _703), vec3(_3579 * _3573, _3579 * _3574, _3579 * _3575));
                                float _4730 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3590 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3594 = ((_3590 * _3590) * (_3572 + (-1.0))) + 1.0;
                                float _3595 = _3532 * _3571;
                                float _3596 = _3595 * _3595;
                                float _3602 = ((1.0 - _3596) * dot(vec3(_697, _700, _703), vec3(_3519, _3520, _3521))) + _3596;
                                float _4741 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3604 = 1.0 - _3571;
                                float _3614 = (0.5 / (((_3603 * ((_3586 * _3604) + _3571)) + 9.9999999392252902907785028219223e-09) + (((_3603 * _3604) + _3571) * _3586))) * _3603;
                                float _4752 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3624 = (_3549 * _3526) * (((_3572 * 3.1415927410125732421875) * (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) / ((_3594 * _3594) * ((_3539 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3550 * _3395.z;
                                frontier_phi_88_pred_1 = _3550 * _3395.y;
                                frontier_phi_88_pred_2 = _3550 * _3395.x;
                                frontier_phi_88_pred_3 = _3624 * _3407.z;
                                frontier_phi_88_pred_4 = _3624 * _3407.y;
                                frontier_phi_88_pred_5 = _3624 * _3407.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3633 = frontier_phi_88_pred;
                            _3632 = frontier_phi_88_pred_1;
                            _3631 = frontier_phi_88_pred_2;
                            _3630 = frontier_phi_88_pred_3;
                            _3629 = frontier_phi_88_pred_4;
                            _3628 = frontier_phi_88_pred_5;
                            _3337 = _3631 + _3350;
                            _3338 = _3632 + _3351;
                            _3339 = _3633 + _3352;
                            _3334 = _3628 + _3347;
                            _3335 = _3629 + _3348;
                            _3336 = _3630 + _3349;
                            if (_3354 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3354;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3339;
                        frontier_phi_82_pred_1 = _3338;
                        frontier_phi_82_pred_2 = _3337;
                        frontier_phi_82_pred_3 = _3336;
                        frontier_phi_82_pred_4 = _3335;
                        frontier_phi_82_pred_5 = _3334;
                    }
                    _2977 = frontier_phi_82_pred;
                    _2975 = frontier_phi_82_pred_1;
                    _2973 = frontier_phi_82_pred_2;
                    _2971 = frontier_phi_82_pred_3;
                    _2969 = frontier_phi_82_pred_4;
                    _2967 = frontier_phi_82_pred_5;
                    uint _3133 = _3132 + 1u;
                    if (_3133 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3126 = _2967;
                        _3127 = _2969;
                        _3128 = _2971;
                        _3129 = _2973;
                        _3130 = _2975;
                        _3131 = _2977;
                        _3132 = _3133;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2973;
                frontier_phi_63_64_ladder_1 = _2977;
                frontier_phi_63_64_ladder_2 = _2975;
                frontier_phi_63_64_ladder_3 = _2971;
                frontier_phi_63_64_ladder_4 = _2969;
                frontier_phi_63_64_ladder_5 = _2967;
            }
            else
            {
                frontier_phi_63_64_ladder = _2851;
                frontier_phi_63_64_ladder_1 = _2855;
                frontier_phi_63_64_ladder_2 = _2853;
                frontier_phi_63_64_ladder_3 = _2849;
                frontier_phi_63_64_ladder_4 = _2847;
                frontier_phi_63_64_ladder_5 = _2845;
            }
            _2966 = frontier_phi_63_64_ladder_5;
            _2968 = frontier_phi_63_64_ladder_4;
            _2970 = frontier_phi_63_64_ladder_3;
            _2972 = frontier_phi_63_64_ladder;
            _2974 = frontier_phi_63_64_ladder_2;
            _2976 = frontier_phi_63_64_ladder_1;
        }
        float _2981 = isnan(1.0) ? _741 : (isnan(_741) ? 1.0 : min(_741, 1.0));
        _2778 = (_2981 * _2972) + _2309;
        _2780 = (_2981 * _2974) + _2311;
        _2782 = (_2981 * _2976) + _2313;
        _2784 = ((_2966 * 0.039999999105930328369140625) * _2981) + _2632;
        _2786 = ((_2968 * 0.039999999105930328369140625) * _2981) + _2634;
        _2788 = ((_2970 * 0.039999999105930328369140625) * _2981) + _2636;
    }
    else
    {
        _2778 = _2309;
        _2780 = _2311;
        _2782 = _2313;
        _2784 = _2632;
        _2786 = _2634;
        _2788 = _2636;
    }
    float _4768 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4779 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4790 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _2805 = ((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2778 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _741))) + ((_2784 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1577)) * cbPerFrame._m0[3u].x);
    float _2806 = ((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2780 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _741))) + ((_2786 + ((isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))) * _1577)) * cbPerFrame._m0[3u].x);
    float _2807 = ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2782 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _741))) + ((_2788 + ((isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))) * _1577)) * cbPerFrame._m0[3u].x);
    uint _2808 = _236 + 6u;
    float _2816 = _678 / cbSceneParam._m0[86u].x;
    float _2817 = _679 / cbSceneParam._m0[86u].y;
    vec4 _2831 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2816, _2817, (log2((isnan(cbSceneParam._m0[77u].w) ? _599 : (isnan(_599) ? cbSceneParam._m0[77u].w : min(_599, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2833 = _2831.x;
    float _2834 = _2831.y;
    float _2835 = _2831.z;
    float _2836 = _2831.w;
    float _2908;
    float _2910;
    float _2912;
    float _2914;
    if (_599 > cbSceneParam._m0[78u].w)
    {
        float _2870 = isnan(_599) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _599 : min(cbSceneParam._m0[80u].w, _599));
        float _2871 = _2870 / _599;
        float _2882 = _2871 * _651;
        float _2883 = _652 * _2871;
        float _2884 = (-0.0) - _2883;
        float _2886 = _2871 * _653;
        float _2888 = (cbSceneParam._m0[77u].w * _2884) / _2870;
        float _2889 = _2888 + cbSceneParam._m0[79u].w;
        float _2890 = cbSceneParam._m0[79u].w - _2883;
        float _2896 = sqrt(((_2882 * _2882) + (_2883 * _2883)) + (_2886 * _2886));
        float _2899 = (1.0 - (cbSceneParam._m0[77u].w / _2870)) * _2896;
        float _2904 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2906 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3083;
        if (abs((_2884 - _2888) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3083 = ((((_2889 > 0.0) ? exp2(_2904 * _2889) : (2.0 - exp2(_2906 * _2889))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2899;
        }
        else
        {
            float _3027 = 1.0 / cbSceneParam._m0[80u].x;
            float _3028 = isnan(_2890) ? _2889 : (isnan(_2889) ? _2890 : max(_2889, _2890));
            float _3029 = isnan(_2890) ? _2889 : (isnan(_2889) ? _2890 : min(_2889, _2890));
            float _3038 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : min(_3028, 0.0));
            float _3039 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : min(_3029, 0.0));
            _3083 = ((abs(_2896 / _2884) * cbSceneParam._m0[80u].y) * ((((_3038 - _3039) * 2.0) - ((exp2(_2904 * (isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0)))) - exp2(_2904 * (isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0))))) * _3027)) - ((exp2(_2906 * _3038) - exp2(_2906 * _3039)) * _3027))) + (_2899 * cbSceneParam._m0[80u].z);
        }
        vec4 _3085 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2816, _2817, 1.0), 0.0);
        float _3094 = exp2((_3083 * (-1.44269502162933349609375)) * (1.0 - _3085.w));
        float _3095 = log2(_3094);
        float _3111 = log2(_2836);
        _2908 = (exp2(_3111 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].x)) * _3085.x) / cbSceneParam._m0[78u].x)) + _2833;
        _2910 = (exp2(_3111 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].y)) * _3085.y) / cbSceneParam._m0[78u].y)) + _2834;
        _2912 = (exp2(_3111 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3095 * cbSceneParam._m0[78u].z)) * _3085.z) / cbSceneParam._m0[78u].z)) + _2835;
        _2914 = _3094 * _2836;
    }
    else
    {
        _2908 = _2833;
        _2910 = _2834;
        _2912 = _2835;
        _2914 = _2836;
    }
    bool _3121;
    vec4 _2924;
    vec4 _2946;
    float _2948;
    float _2952;
    float _2953;
    float _2954;
    float _2955;
    bool _2965;
    for (;;)
    {
        _2924 = cbMatDynParam._m0[0u];
        float _2926 = roundEven(_2924.y);
        bool _2927 = _2926 == 3.0;
        float _2928 = log2(_2914);
        float _2935 = exp2(_2928 * cbSceneParam._m0[78u].x) * _2805;
        float _2936 = exp2(_2928 * cbSceneParam._m0[78u].y) * _2806;
        float _2937 = exp2(_2928 * cbSceneParam._m0[78u].z) * _2807;
        float _2944 = _667 + (-0.5);
        _2946 = cbMtdParam._m0[1u];
        _2948 = _2946.y * _2944;
        float _2951 = (_2926 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2952 = _2951 * (_2927 ? _2935 : (_2935 + (cbSceneParam._m0[72u].w * _2908)));
        _2953 = _2951 * (_2927 ? _2936 : (_2936 + (cbSceneParam._m0[72u].w * _2910)));
        _2954 = _2951 * (_2927 ? _2937 : (_2937 + (cbSceneParam._m0[72u].w * _2912)));
        _2955 = _2944 * 0.999000012874603271484375;
        _2965 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2965)
        {
            if ((cbInstanceData._m0[_236 + 7u].x + _2955) < 0.5)
            {
                _3121 = true;
                break;
            }
        }
        uint _3062 = _716 + uint(_2924.w);
        if ((cbInstanceData._m0[_3062].w < 1.0) && ((cbInstanceData._m0[_3062].w + _2955) < 0.5))
        {
            _3121 = true;
            break;
        }
        if ((_2948 + 1.0) < _2946.x)
        {
            _3121 = true;
            break;
        }
        _3121 = false;
        break;
    }
    float _3325;
    if (_3121)
    {
        discard_state = true;
        _3325 = 0.0;
    }
    else
    {
        _3325 = cbInstanceData._m0[_2808].w;
    }
    SV_Target.x = _2952;
    SV_Target.y = _2953;
    SV_Target.z = _2954;
    SV_Target.w = _3325;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2808].w;
    discard_exit();
}


