#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1109;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _267 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _273 = _267.x * cbMtdParam._m0[11u].x;
    float _274 = _267.y * cbMtdParam._m0[11u].y;
    float _275 = _267.z * cbMtdParam._m0[11u].z;
    vec4 _294 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _246) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _247) + cbTextureTilingScale._m0[5u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _334 = _332.x;
    float _344 = dot(vec4(_334, _332.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _361 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_334 - _344) * cbMtdParam._m0[24u].x) + _344) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3416 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _369 = (_362 * ((_294.x * cbMtdParam._m0[12u].x) - _273)) + _273;
    float _370 = (_362 * ((_294.y * cbMtdParam._m0[12u].y) - _274)) + _274;
    float _371 = (_362 * ((_294.z * cbMtdParam._m0[12u].z) - _275)) + _275;
    vec4 _389 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _246) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _247) + cbTextureTilingScale._m0[4u].w));
    vec4 _406 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _408 = _406.x;
    float _409 = _406.y;
    float _410 = _406.z;
    float _419 = ((_389.z - _410) * _362) + _410;
    float _422 = ((((_389.x - _408) * _362) + _408) * 2.0) + (-1.0);
    float _424 = ((((_389.y - _409) * _362) + _409) * 2.0) + (-1.0);
    float _425 = dot(vec2(_422, _424), vec2(_422, _424));
    float _3427 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _430 = sqrt(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))));
    vec4 _446 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _458 = (((_446.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _422;
    float _459 = (((_446.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _424;
    float _462 = fma(_430, _214, fma(_459, _221, _458 * _207));
    float _465 = fma(_430, _215, fma(_459, _222, _458 * _208));
    float _468 = fma(_430, _216, fma(_459, _223, _458 * _209));
    float _472 = inversesqrt(dot(vec3(_462, _465, _468), vec3(_462, _465, _468)));
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _503 = _501.x;
    float _504 = 1.0 - _503;
    float _510 = (cbMtdParam._m0[19u].x + dot(vec4(_472 * _462, _472 * _465, _472 * _468, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_503 - _504) * cbMtdParam._m0[24u].z) + _504) * cbMtdParam._m0[21u].z);
    float _3438 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _511 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _518 = (_511 * (cbMtdParam._m0[17u].x - _369)) + _369;
    float _519 = (_511 * (cbMtdParam._m0[17u].y - _370)) + _370;
    float _520 = (_511 * (cbMtdParam._m0[17u].z - _371)) + _371;
    float _524 = (cbMtdParam._m0[19u].w * (_446.z - _419)) + _419;
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _544 = (_537.x * 2.0) + (-1.0);
    float _545 = (_537.y * 2.0) + (-1.0);
    float _546 = dot(vec2(_544, _545), vec2(_544, _545));
    float _3449 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _554 = ((_537.z - _524) * _511) + _524;
    float _564 = ((sqrt(1.0 - (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) - _430) * _511) + _430;
    float _567 = (((_544 - _458) * _511) + _458) + (cbMtdParam._m0[21u].x * _458);
    float _568 = (((_545 - _459) * _511) + _459) + (cbMtdParam._m0[21u].x * _459);
    float _573 = cbMtdParam._m0[22u].x + _446.w;
    float _576 = fma(_564, _214, fma(_568, _221, _567 * _207));
    float _579 = fma(_564, _215, fma(_568, _222, _567 * _208));
    float _582 = fma(_564, _216, fma(_568, _223, _567 * _209));
    float _586 = inversesqrt(dot(vec3(_576, _579, _582), vec3(_576, _579, _582)));
    float _587 = _586 * _576;
    float _588 = _586 * _579;
    float _589 = _586 * _582;
    float _3460 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _590 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3482 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3493 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3504 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _608 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _660 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _650);
    float _661 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _650);
    float _662 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _650);
    float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
    float _667 = _660 * _666;
    float _668 = _661 * _666;
    float _669 = _662 * _666;
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_589, cbSceneParam._m0[5u].z, fma(_588, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _587));
    float _697 = fma(_589, cbSceneParam._m0[6u].z, fma(_588, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _587));
    float _700 = fma(_589, cbSceneParam._m0[7u].z, fma(_588, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _587));
    uint _714 = (_226 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _720 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * cbInstanceData._m0[_714].x;
    float _721 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_714].y;
    float _722 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_714].z;
    float _3515 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _3526 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    vec4 _734 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _675, cbSceneParam._m0[86u].y * _676));
    float _738 = ((isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))) * TEXCOORD_5.w) * _734.x;
    float _739 = dot(vec3(_587, _588, _589), vec3(_667, _668, _669));
    float _742 = _739 * 2.0;
    float _746 = (_742 * _587) - _667;
    float _747 = (_742 * _588) - _668;
    float _748 = (_742 * _589) - _669;
    float _752 = abs(dot(vec3(_667, _668, _669), vec3(_587, _588, _589)));
    float _3548 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _754 = sqrt(_590);
    float _767 = exp2((_754 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_754 * 3.0));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1108;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _833 = fma(_807, cbModelParam._m0[26u].z, fma(_803, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799));
        float _837 = fma(_807, cbModelParam._m0[27u].z, fma(_803, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799));
        float _841 = fma(_807, cbModelParam._m0[28u].z, fma(_803, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799));
        float _866 = _799 + _587;
        float _867 = _803 + _588;
        float _868 = _807 + _589;
        float _878 = fma(_868, cbModelParam._m0[26u].z, fma(_867, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _866)) - _833;
        float _879 = fma(_868, cbModelParam._m0[27u].z, fma(_867, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _866)) - _837;
        float _880 = fma(_868, cbModelParam._m0[28u].z, fma(_867, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _866)) - _841;
        float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
        float _897 = ((_884 * _878) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_833 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_884 * _879) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_837 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_884 * _880) / cbModelParam._m0[34u].z) + ((((((_841 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        float _936 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_902.x + (-0.5));
        float _938 = _936 * (_902.y + (-0.5));
        float _939 = _936 * (_902.z + (-0.5));
        float _946 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_909.x + (-0.5));
        float _948 = _946 * (_909.y + (-0.5));
        float _949 = _946 * (_909.z + (-0.5));
        float _956 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_916.x + (-0.5));
        float _958 = _956 * (_916.y + (-0.5));
        float _959 = _956 * (_916.z + (-0.5));
        float _966 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_923.x + (-0.5));
        float _968 = _966 * (_923.y + (-0.5));
        float _969 = _966 * (_923.z + (-0.5));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = _937 * 0.5;
        float _974 = _947 * 0.5;
        float _975 = _957 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _990 = (dot(vec3(_587, _588, _589), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _1000 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3596 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_1002 + 1.0))) + _1007) * _970;
        float _1017 = _938 * 0.5;
        float _1018 = _948 * 0.5;
        float _1019 = _958 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_587, _588, _589), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3607 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3618 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3629 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * (_1044 + 1.0))) + _1049) * _971;
        float _1059 = _939 * 0.5;
        float _1060 = _949 * 0.5;
        float _1061 = _959 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1075 = (dot(vec3(_587, _588, _589), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3640 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1084 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3651 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1086 = _1085 * 2.0;
        float _1090 = (1.0 - _1085) / (_1085 + 1.0);
        float _3662 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1100 = ((((1.0 - _1091) * (_1086 + 2.0)) * exp2(log2(isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) * (_1086 + 1.0))) + _1091) * _972;
        _1108 = _939;
        _1110 = _938;
        _1111 = _937;
        _1112 = _949;
        _1113 = _948;
        _1114 = _947;
        _1115 = _959;
        _1116 = _958;
        _1117 = _957;
        _1118 = _972;
        _1119 = _971;
        _1120 = _970;
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)));
    }
    else
    {
        _1108 = _1109;
        _1110 = _1109;
        _1111 = _1109;
        _1112 = _1109;
        _1113 = _1109;
        _1114 = _1109;
        _1115 = _1109;
        _1116 = _1109;
        _1117 = _1109;
        _1118 = _1109;
        _1119 = _1109;
        _1120 = _1109;
        _1121 = 0.0;
        _1122 = 0.0;
        _1123 = 0.0;
    }
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1148 = fma(_807, cbModelParam._m0[30u].z, fma(_803, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _799));
        float _1152 = fma(_807, cbModelParam._m0[31u].z, fma(_803, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _799));
        float _1156 = fma(_807, cbModelParam._m0[32u].z, fma(_803, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _799));
        float _1179 = _799 + _587;
        float _1180 = _803 + _588;
        float _1181 = _807 + _589;
        float _1191 = fma(_1181, cbModelParam._m0[30u].z, fma(_1180, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1179)) - _1148;
        float _1192 = fma(_1181, cbModelParam._m0[31u].z, fma(_1180, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1179)) - _1152;
        float _1193 = fma(_1181, cbModelParam._m0[32u].z, fma(_1180, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1179)) - _1156;
        float _1197 = inversesqrt(dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193)));
        float _1210 = ((_1197 * _1191) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1148 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1197 * _1192) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1152 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1197 * _1193) / cbModelParam._m0[35u].z) + ((((((_1156 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1210, _1211, _1212), 0.0);
        float _1247 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1214.x + (-0.5));
        float _1249 = _1247 * (_1214.y + (-0.5));
        float _1250 = _1247 * (_1214.z + (-0.5));
        float _1257 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1221.x + (-0.5));
        float _1259 = _1257 * (_1221.y + (-0.5));
        float _1260 = _1257 * (_1221.z + (-0.5));
        float _1267 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1228.x + (-0.5));
        float _1269 = _1267 * (_1228.y + (-0.5));
        float _1270 = _1267 * (_1228.z + (-0.5));
        float _1277 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1235.x + (-0.5));
        float _1279 = _1277 * (_1235.y + (-0.5));
        float _1280 = _1277 * (_1235.z + (-0.5));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = _1248 * 0.5;
        float _1285 = _1258 * 0.5;
        float _1286 = _1268 * 0.5;
        float _1287 = dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286));
        float _1292 = (_1287 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1287);
        float _1300 = (dot(vec3(_587, _588, _589), vec3(_1292 * _1284, _1292 * _1285, _1292 * _1286)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1309 = sqrt(((_1285 * _1285) + (_1284 * _1284)) + (_1286 * _1286)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1311 = _1310 * 2.0;
        float _1315 = (1.0 - _1310) / (_1310 + 1.0);
        float _3725 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1325 = ((((1.0 - _1316) * (_1311 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1311 + 1.0))) + _1316) * _1281;
        float _1326 = _1249 * 0.5;
        float _1327 = _1259 * 0.5;
        float _1328 = _1269 * 0.5;
        float _1329 = dot(vec3(_1326, _1327, _1328), vec3(_1326, _1327, _1328));
        float _1334 = (_1329 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1329);
        float _1342 = (dot(vec3(_587, _588, _589), vec3(_1334 * _1326, _1334 * _1327, _1334 * _1328)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1351 = sqrt(((_1327 * _1327) + (_1326 * _1326)) + (_1328 * _1328)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1353 = _1352 * 2.0;
        float _1357 = (1.0 - _1352) / (_1352 + 1.0);
        float _3758 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1367 = ((((1.0 - _1358) * (_1353 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1353 + 1.0))) + _1358) * _1282;
        float _1368 = _1250 * 0.5;
        float _1369 = _1260 * 0.5;
        float _1370 = _1270 * 0.5;
        float _1371 = dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370));
        float _1376 = (_1371 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1371);
        float _1384 = (dot(vec3(_587, _588, _589), vec3(_1376 * _1368, _1376 * _1369, _1376 * _1370)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1393 = sqrt(((_1369 * _1369) + (_1368 * _1368)) + (_1370 * _1370)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1395 = _1394 * 2.0;
        float _1399 = (1.0 - _1394) / (_1394 + 1.0);
        float _3791 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1409 = ((((1.0 - _1400) * (_1395 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1395 + 1.0))) + _1400) * _1283;
        _1417 = _1250;
        _1418 = _1249;
        _1419 = _1248;
        _1420 = _1260;
        _1421 = _1259;
        _1422 = _1258;
        _1423 = _1270;
        _1424 = _1269;
        _1425 = _1268;
        _1426 = _1283;
        _1427 = _1282;
        _1428 = _1281;
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)));
    }
    else
    {
        _1417 = _1109;
        _1418 = _1109;
        _1419 = _1109;
        _1420 = _1109;
        _1421 = _1109;
        _1422 = _1109;
        _1423 = _1109;
        _1424 = _1109;
        _1425 = _1109;
        _1426 = _1109;
        _1427 = _1109;
        _1428 = _1109;
        _1429 = 0.0;
        _1430 = 0.0;
        _1431 = 0.0;
    }
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1121)) + _1121;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1122)) + _1122;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1123)) + _1123;
    float _1464 = fma(_1443, cbSceneParam._m0[89u].z, fma(_1442, cbSceneParam._m0[89u].y, _1441 * cbSceneParam._m0[89u].x));
    float _1467 = fma(_1443, cbSceneParam._m0[90u].z, fma(_1442, cbSceneParam._m0[90u].y, _1441 * cbSceneParam._m0[90u].x));
    float _1470 = fma(_1443, cbSceneParam._m0[91u].z, fma(_1442, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1441));
    float _1485 = _746 * 0.5;
    float _1486 = _747 * 0.5;
    float _1487 = _748 * 0.5;
    float _1488 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1491 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1494 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1528;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1501 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1108, _1112, _1115, _1118));
        float _1505 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1110, _1113, _1116, _1119));
        float _1509 = dot(vec4(_1485, _1486, _1487, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1516 = dot(vec4(cbModelParam._m0[39u]), vec4(_1485, _1486, _1487, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1539;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1530 = dot(vec4(cbModelParam._m0[40u]), vec4(_1485, _1486, _1487, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1530) ? 0.0 : (isnan(0.0) ? _1530 : max(0.0, _1530))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1543 = (_1539 * cbModelParam._m0[1u].x) + (_1528 * (1.0 - cbModelParam._m0[1u].x));
    float _1553 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _590);
    float _1554 = isnan(_1553) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1553 : min(cbModelParam._m0[25u].z, _1553));
    float _1635;
    float _1637;
    float _1639;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1602 = fma(_807, cbModelParam._m0[13u].z, fma(_803, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _799)) + cbModelParam._m0[13u].w;
        float _1606 = fma(_807, cbModelParam._m0[14u].z, fma(_803, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _799)) + cbModelParam._m0[14u].w;
        float _1610 = fma(_807, cbModelParam._m0[15u].z, fma(_803, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _799)) + cbModelParam._m0[15u].w;
        float _1613 = fma(_748, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746));
        float _1616 = fma(_748, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746));
        float _1619 = fma(_748, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746));
        float _1647;
        if (_1613 > 0.0)
        {
            _1647 = abs((1.0 - _1602) / _1613);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1602 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1647 = frontier_phi_14_12_ladder;
        }
        float _1848;
        if (_1616 > 0.0)
        {
            _1848 = abs((1.0 - _1606) / _1616);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1606 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1848 = frontier_phi_23_19_ladder;
        }
        float _2091;
        if (_1619 > 0.0)
        {
            _2091 = abs((1.0 - _1610) / _1619);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1610 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2091 = frontier_phi_35_30_ladder;
        }
        float _2093 = isnan(_1848) ? _1647 : (isnan(_1647) ? _1848 : min(_1647, _1848));
        float _2094 = isnan(_2091) ? _2093 : (isnan(_2093) ? _2091 : min(_2093, _2091));
        float _2098 = (_2094 * _1613) + _1602;
        float _2099 = (_2094 * _1616) + _1606;
        float _2100 = (_2094 * _1619) + _1610;
        float _2101 = _2094 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2101;
        float _2105 = _2101 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 > _2105) || ((_2099 < _2103) || ((_2098 < _2103) || (_2098 > _2105))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2224 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2100, cbModelParam._m0[9u].z, fma(_2099, cbModelParam._m0[9u].y, _2098 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2100, cbModelParam._m0[10u].z, fma(_2099, cbModelParam._m0[10u].y, _2098 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2100, cbModelParam._m0[11u].z, fma(_2099, cbModelParam._m0[11u].y, _2098 * cbModelParam._m0[11u].x))), _1554);
            frontier_phi_13_35_ladder = _2224.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2224.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2224.x * cbModelParam._m0[1u].y;
        }
        _1635 = frontier_phi_13_35_ladder_2;
        _1637 = frontier_phi_13_35_ladder_1;
        _1639 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1623 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_746, _747, _748), _1554);
        _1635 = _1623.x * cbModelParam._m0[1u].y;
        _1637 = _1623.y * cbModelParam._m0[1u].y;
        _1639 = _1623.z * cbModelParam._m0[1u].y;
    }
    float _1643 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _590);
    float _1644 = isnan(_1643) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1643 : min(cbModelParam._m0[25u].w, _1643));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1698 = fma(_807, cbModelParam._m0[21u].z, fma(_803, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _799)) + cbModelParam._m0[21u].w;
        float _1702 = fma(_807, cbModelParam._m0[22u].z, fma(_803, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _799)) + cbModelParam._m0[22u].w;
        float _1706 = fma(_807, cbModelParam._m0[23u].z, fma(_803, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _799)) + cbModelParam._m0[23u].w;
        float _1709 = fma(_748, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746));
        float _1712 = fma(_748, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746));
        float _1715 = fma(_748, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746));
        float _1853;
        if (_1709 > 0.0)
        {
            _1853 = abs((1.0 - _1698) / _1709);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1698 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1853 = frontier_phi_25_21_ladder;
        }
        float _2118;
        if (_1712 > 0.0)
        {
            _2118 = abs((1.0 - _1702) / _1712);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1702 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2118 = frontier_phi_37_32_ladder;
        }
        float _2323;
        if (_1715 > 0.0)
        {
            _2323 = abs((1.0 - _1706) / _1715);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1706 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2323 = frontier_phi_46_43_ladder;
        }
        float _2325 = isnan(_2118) ? _1853 : (isnan(_1853) ? _2118 : min(_1853, _2118));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1709) + _1698;
        float _2331 = (_2326 * _1712) + _1702;
        float _2332 = (_2326 * _1715) + _1706;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2333;
        float _2336 = _2333 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2332 > _2336) || ((_2332 < _2334) || ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 < _2334) || (_2330 > _2336))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2531 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2332, cbModelParam._m0[17u].z, fma(_2331, cbModelParam._m0[17u].y, _2330 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2332, cbModelParam._m0[18u].z, fma(_2331, cbModelParam._m0[18u].y, _2330 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2332, cbModelParam._m0[19u].z, fma(_2331, cbModelParam._m0[19u].y, _2330 * cbModelParam._m0[19u].x))), _1644);
            frontier_phi_22_46_ladder = _2531.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2531.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2531.x * cbModelParam._m0[1u].z;
        }
        _1734 = frontier_phi_22_46_ladder_2;
        _1736 = frontier_phi_22_46_ladder_1;
        _1738 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_746, _747, _748), _1644);
        _1734 = _1718.x * cbModelParam._m0[1u].z;
        _1736 = _1718.y * cbModelParam._m0[1u].z;
        _1738 = _1718.z * cbModelParam._m0[1u].z;
    }
    float _1750 = ((((1.0 - _767) * ((_754 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_767 * _754)) * _738;
    float _1751 = _1750 * ((cbModelParam._m0[1u].w * (_1734 - _1635)) + _1635);
    float _1752 = _1750 * ((cbModelParam._m0[1u].w * (_1736 - _1637)) + _1637);
    float _1753 = _1750 * ((cbModelParam._m0[1u].w * (_1738 - _1639)) + _1639);
    float _1756 = fma(_1753, cbSceneParam._m0[89u].z, fma(_1752, cbSceneParam._m0[89u].y, _1751 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1753, cbSceneParam._m0[90u].z, fma(_1752, cbSceneParam._m0[90u].y, _1751 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1753, cbSceneParam._m0[91u].z, fma(_1752, cbSceneParam._m0[91u].y, _1751 * cbSceneParam._m0[91u].x));
    uvec4 _1772 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1774 = _1772.x * 14u;
    uint _1775 = _1774 + 13u;
    float _1782 = _738 + (-1.0);
    float _1787 = (cbLight._m0[_1775].x * _1782) + 1.0;
    float _1788 = (cbLight._m0[_1775].y * _1782) + 1.0;
    float _1789 = (cbLight._m0[_1775].z * _1782) + 1.0;
    float _1790 = (cbLight._m0[_1775].w * _1782) + 1.0;
    uint _1791 = _1774 + 5u;
    float _1797 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
    uint _1801 = _1774 + 4u;
    float _1807 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1811 = _1774 | 1u;
    float _1822 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_587, _588, _589));
    float _1825 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_587, _588, _589));
    float _3927 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _3938 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1830 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * 0.3183098733425140380859375;
    float _1832 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.3183098733425140380859375;
    float _1839 = ((cbLight._m0[_1791].x * _1797) * _1832) + ((cbLight._m0[_1801].x * _1807) * _1830);
    float _1840 = ((_1797 * cbLight._m0[_1791].y) * _1832) + ((_1807 * cbLight._m0[_1801].y) * _1830);
    float _1841 = ((_1797 * cbLight._m0[_1791].z) * _1832) + ((_1807 * cbLight._m0[_1801].z) * _1830);
    uvec4 _1845 = floatBitsToUint(cbLight._m0[_1774 + 12u]);
    bool _1847 = _1845.x == 0u;
    float _1858;
    float _1860;
    float _1862;
    if (_1847)
    {
        _1858 = _1839;
        _1860 = _1840;
        _1862 = _1841;
    }
    else
    {
        uint _1866 = _1774 + 6u;
        float _1882 = (dot(vec3(cbLight._m0[_1774 + 2u].xyz), vec3(_587, _588, _589)) * 0.5) + 0.5;
        float _1883 = _1882 * _1882;
        float _3949 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1885 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _1858 = (((cbLight._m0[_1866].x * 0.3183098733425140380859375) * _1884) * _1885) + _1839;
        _1860 = (((cbLight._m0[_1866].y * 0.3183098733425140380859375) * _1884) * _1885) + _1840;
        _1862 = (((cbLight._m0[_1866].z * 0.3183098733425140380859375) * _1884) * _1885) + _1841;
    }
    bool _1865 = _1845.y == 0u;
    float _1903;
    float _1905;
    float _1907;
    if (_1865)
    {
        _1903 = _1858;
        _1905 = _1860;
        _1907 = _1862;
    }
    else
    {
        uint _2062 = _1774 + 7u;
        float _2078 = (dot(vec3(cbLight._m0[_1774 + 3u].xyz), vec3(_587, _588, _589)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _3965 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _2081 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _1903 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1858;
        _1905 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1860;
        _1907 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1862;
    }
    uint _1910 = _1774 + 8u;
    float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1774].w)) * _590) * 0.949999988079071044921875);
    float _1924 = _1923 * _1923;
    float _1925 = cbLight._m0[_1774].x + _667;
    float _1926 = cbLight._m0[_1774].y + _668;
    float _1927 = cbLight._m0[_1774].z + _669;
    float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
    float _1932 = _1931 * _1925;
    float _1933 = _1931 * _1926;
    float _1934 = _1931 * _1927;
    float _1935 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_1774].xyz));
    float _3981 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _3992 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _1939 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _1940 = dot(vec3(_587, _588, _589), vec3(_1932, _1933, _1934));
    float _4003 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1944 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_1932, _1933, _1934));
    float _4014 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1948 = _1924 * _1924;
    float _1952 = ((_1943 * _1943) * (_1948 + (-1.0))) + 1.0;
    float _1963 = (exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1964 = 1.0 - _1924;
    float _1975 = (0.5 / (((_1939 * ((_1938 * _1964) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _1964) + _1924) * _1938))) * _1938;
    float _4025 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1977 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1948 / ((_1952 * _1952) * 3.141590118408203125));
    uint _1988 = _1774 + 9u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1811].w)) * _590) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1811].x + _667;
    float _2002 = cbLight._m0[_1811].y + _668;
    float _2003 = cbLight._m0[_1811].z + _669;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_1811].xyz));
    float _4036 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _2015 = dot(vec3(_587, _588, _589), vec3(_2008, _2009, _2010));
    float _4047 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _2019 = dot(vec3(cbLight._m0[_1811].xyz), vec3(_2008, _2009, _2010));
    float _4058 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2023 = _2000 * _2000;
    float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
    float _2036 = (exp2(log2(1.0 - (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2037 = 1.0 - _2000;
    float _2047 = (0.5 / (((_1939 * ((_2014 * _2037) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _2037) + _2000) * _2014))) * _2014;
    float _4069 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
    float _2059 = (((_2036 * cbLight._m0[_1988].x) * _2049) * _1797) + (((_1963 * cbLight._m0[_1910].x) * _1977) * _1807);
    float _2060 = (((_2036 * cbLight._m0[_1988].y) * _2049) * _1797) + (((_1963 * cbLight._m0[_1910].y) * _1977) * _1807);
    float _2061 = (((_2036 * cbLight._m0[_1988].z) * _2049) * _1797) + (((_1963 * cbLight._m0[_1910].z) * _1977) * _1807);
    float _2123;
    float _2125;
    float _2127;
    if (_1847)
    {
        _2123 = _2059;
        _2125 = _2060;
        _2127 = _2061;
    }
    else
    {
        uint _2129 = _1774 + 2u;
        uint _2133 = _1774 + 10u;
        float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _590) * 0.949999988079071044921875);
        float _2148 = _2147 * _2147;
        float _2149 = cbLight._m0[_2129].x + _667;
        float _2150 = cbLight._m0[_2129].y + _668;
        float _2151 = cbLight._m0[_2129].z + _669;
        float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
        float _2156 = _2155 * _2149;
        float _2157 = _2155 * _2150;
        float _2158 = _2155 * _2151;
        float _2159 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2129].xyz));
        float _4080 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2163 = dot(vec3(_587, _588, _589), vec3(_2156, _2157, _2158));
        float _4091 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2167 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2156, _2157, _2158));
        float _4102 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2171 = _2148 * _2148;
        float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
        float _2184 = (exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2185 = 1.0 - _2148;
        float _2195 = (0.5 / (((_1939 * ((_2162 * _2185) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _2185) + _2148) * _2162))) * _2162;
        float _4113 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2197 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
        float _2198 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2123 = (((_2184 * cbLight._m0[_2133].x) * _2197) * _2198) + _2059;
        _2125 = (((_2184 * cbLight._m0[_2133].y) * _2197) * _2198) + _2060;
        _2127 = (((_2184 * cbLight._m0[_2133].z) * _2197) * _2198) + _2061;
    }
    float _2233;
    float _2235;
    float _2237;
    if (_1865)
    {
        _2233 = _2123;
        _2235 = _2125;
        _2237 = _2127;
    }
    else
    {
        uint _2244 = _1774 + 3u;
        uint _2248 = _1774 + 11u;
        float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _590) * 0.949999988079071044921875);
        float _2263 = _2262 * _2262;
        float _2264 = cbLight._m0[_2244].x + _667;
        float _2265 = cbLight._m0[_2244].y + _668;
        float _2266 = cbLight._m0[_2244].z + _669;
        float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
        float _2271 = _2270 * _2264;
        float _2272 = _2270 * _2265;
        float _2273 = _2270 * _2266;
        float _2274 = dot(vec3(_587, _588, _589), vec3(cbLight._m0[_2244].xyz));
        float _4129 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
        float _2278 = dot(vec3(_587, _588, _589), vec3(_2271, _2272, _2273));
        float _4140 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2282 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2271, _2272, _2273));
        float _4151 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2286 = _2263 * _2263;
        float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
        float _2299 = (exp2(log2(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2300 = 1.0 - _2263;
        float _2310 = (0.5 / (((_1939 * ((_2277 * _2300) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _2300) + _2263) * _2277))) * _2277;
        float _4162 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2312 = (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
        float _2313 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2233 = (((_2299 * cbLight._m0[_2248].x) * _2312) * _2313) + _2123;
        _2235 = (((_2299 * cbLight._m0[_2248].y) * _2312) * _2313) + _2125;
        _2237 = (((_2299 * cbLight._m0[_2248].z) * _2312) * _2313) + _2127;
    }
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_1772.y == 0u)
    {
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2388;
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2388;
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2388;
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.x;
        uint _2415 = uint((float(_2403.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _2404))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _2404)));
        float _2425 = (log2(_2391 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2426 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        uint _2429 = uint(isnan(14.0) ? _2426 : (isnan(_2426) ? 14.0 : min(_2426, 14.0)));
        uvec4 _2434 = texelFetch(g_lightClusterGridBuffer, int(((_2429 << 2u) + (_2415 << 6u)) >> 2u));
        uint _2435 = _2434.x;
        uint _2436 = _2403.z;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        if (((((1u << ((_2436 >> 4u) & 15u)) + 4294967295u) & _2435) == 0u) || ((_2436 & 240u) == 0u))
        {
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
        }
        else
        {
            float _2537;
            float _2539;
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2681 = 0.0;
            float _2682 = 0.0;
            float _2683 = 0.0;
            float _2684 = 0.0;
            float _2685 = 0.0;
            float _2686 = 0.0;
            uint _2687 = 0u;
            uint _2696;
            bool _2697;
            for (;;)
            {
                _2696 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2687 << 2u)) >> 2u)).x;
                _2697 = _2696 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2697)
                {
                    frontier_phi_61_pred = _2681;
                    frontier_phi_61_pred_1 = _2686;
                    frontier_phi_61_pred_2 = _2685;
                    frontier_phi_61_pred_3 = _2684;
                    frontier_phi_61_pred_4 = _2683;
                    frontier_phi_61_pred_5 = _2682;
                }
                else
                {
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    uint _2811;
                    _2805 = _2681;
                    _2806 = _2682;
                    _2807 = _2683;
                    _2808 = _2684;
                    _2809 = _2685;
                    _2810 = _2686;
                    _2811 = _2696;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    for (;;)
                    {
                        uint _2815 = uint(findLSB(_2811)) + (_2687 << 5u);
                        uint _2812 = (_2811 + 4294967295u) & _2811;
                        uint _2817 = _2815 * 48u;
                        vec4 _2831 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2817)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 3u)).x));
                        uint _2837 = (_2815 * 48u) + 4u;
                        vec4 _2850 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2837)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2837 + 3u)).x));
                        uint _2856 = (_2815 * 48u) + 8u;
                        vec3 _2867 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2856)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2856 + 2u)).x));
                        float _2871 = _2831.x - _2389;
                        float _2872 = _2831.y - _2390;
                        float _2873 = _2831.z - _2391;
                        float _2874 = dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873));
                        float _2877 = inversesqrt(_2874);
                        float _2878 = _2877 * _2871;
                        float _2879 = _2877 * _2872;
                        float _2880 = _2877 * _2873;
                        float _2881 = dot(vec3(_694, _697, _700), vec3(_2878, _2879, _2880));
                        float _2886 = 1.0 - (_2874 * _2831.w);
                        float _4188 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2887 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2888 = sqrt(_2874) * _2850.w;
                        float _2891 = 1.39999997615814208984375 / (_2888 + 1.39999997615814208984375);
                        float _2892 = _2891 * _2891;
                        float _2895 = ((1.0 - _2892) * _2881) + _2892;
                        float _2898 = _2888 * _2888;
                        float _2902 = ((isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0))) * _2887) / ((_2898 * 0.699999988079071044921875) + 1.0);
                        float _2906 = (-0.0) - _2389;
                        float _2907 = (-0.0) - _2390;
                        float _2908 = (-0.0) - _2391;
                        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
                        float _2913 = _2912 * _2906;
                        float _2914 = _2912 * _2907;
                        float _2915 = _2912 * _2908;
                        float _2923 = exp2(log2(1.0 / ((_2898 * 3.5) + 5.0)) * 0.25);
                        float _2924 = 1.0 - _754;
                        float _2931 = sqrt(1.0 - ((1.0 - (_2924 * _2924)) * (1.0 - (_2923 * _2923))));
                        float _2932 = _2931 * _2931;
                        float _2933 = _2932 * _2932;
                        float _2934 = _2913 + _2878;
                        float _2935 = _2914 + _2879;
                        float _2936 = _2915 + _2880;
                        float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
                        float _2944 = dot(vec3(_694, _697, _700), vec3(_2913, _2914, _2915));
                        float _4204 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2947 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _2948 = dot(vec3(_694, _697, _700), vec3(_2940 * _2934, _2940 * _2935, _2940 * _2936));
                        float _4215 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2951 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2955 = ((_2951 * _2951) * (_2933 + (-1.0))) + 1.0;
                        float _2956 = _2891 * _2932;
                        float _2957 = _2956 * _2956;
                        float _2960 = ((1.0 - _2957) * _2881) + _2957;
                        float _4226 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                        float _2961 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2962 = 1.0 - _2932;
                        float _2972 = (0.5 / (((_2961 * ((_2947 * _2962) + _2932)) + 9.9999999392252902907785028219223e-09) + (((_2961 * _2962) + _2932) * _2947))) * _2961;
                        float _4237 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2983 = (((_2933 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_2955 * _2955) * ((_2898 * 2.1991131305694580078125) + 3.141590118408203125))) * _2887;
                        _2740 = (_2902 * _2850.x) + _2808;
                        _2741 = (_2902 * _2850.y) + _2809;
                        _2742 = (_2902 * _2850.z) + _2810;
                        _2737 = (_2983 * _2867.x) + _2805;
                        _2738 = (_2983 * _2867.y) + _2806;
                        _2739 = (_2983 * _2867.z) + _2807;
                        if (_2812 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2742;
                            _2811 = _2812;
                        }
                    }
                    frontier_phi_61_pred = _2737;
                    frontier_phi_61_pred_1 = _2742;
                    frontier_phi_61_pred_2 = _2741;
                    frontier_phi_61_pred_3 = _2740;
                    frontier_phi_61_pred_4 = _2739;
                    frontier_phi_61_pred_5 = _2738;
                }
                _2537 = frontier_phi_61_pred;
                _2547 = frontier_phi_61_pred_1;
                _2545 = frontier_phi_61_pred_2;
                _2543 = frontier_phi_61_pred_3;
                _2541 = frontier_phi_61_pred_4;
                _2539 = frontier_phi_61_pred_5;
                uint _2688 = _2687 + 1u;
                if (_2688 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2681 = _2537;
                    _2682 = _2539;
                    _2683 = _2541;
                    _2684 = _2543;
                    _2685 = _2545;
                    _2686 = _2547;
                    _2687 = _2688;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
        }
        uvec4 _2550 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2551 = _2550.z;
        uint _2553 = (_2551 >> 8u) & 15u;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        float _2657;
        float _2659;
        if (((4294967295u << _2553) & _2435) == 0u)
        {
            _2649 = _2536;
            _2651 = _2538;
            _2653 = _2540;
            _2655 = _2542;
            _2657 = _2544;
            _2659 = _2546;
        }
        else
        {
            float _2674 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
            float _2675 = _2674 * _2389;
            float _2676 = _2674 * _2390;
            float _2677 = _2674 * _2391;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2553 < ((_2551 >> 12u) & 15u))
            {
                float _2650;
                float _2652;
                float _2654;
                float _2656;
                float _2658;
                float _2660;
                float _2788 = _2536;
                float _2789 = _2538;
                float _2790 = _2540;
                float _2791 = _2542;
                float _2792 = _2544;
                float _2793 = _2546;
                uint _2794 = _2553;
                uint _2803;
                bool _2804;
                for (;;)
                {
                    _2803 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2794 << 2u)) >> 2u)).x;
                    _2804 = _2803 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2804)
                    {
                        frontier_phi_67_pred = _2791;
                        frontier_phi_67_pred_1 = _2792;
                        frontier_phi_67_pred_2 = _2793;
                        frontier_phi_67_pred_3 = _2790;
                        frontier_phi_67_pred_4 = _2789;
                        frontier_phi_67_pred_5 = _2788;
                    }
                    else
                    {
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3001 = _2788;
                        float _3002 = _2789;
                        float _3003 = _2790;
                        float _3004 = _2791;
                        float _3005 = _2792;
                        float _3006 = _2793;
                        uint _3007 = _2803;
                        uint _3008;
                        vec4 _3033;
                        float _3034;
                        vec4 _3049;
                        vec3 _3061;
                        vec4 _3076;
                        vec4 _3092;
                        float _3138;
                        bool _3139;
                        for (;;)
                        {
                            uint _3018 = ((_2794 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3007));
                            _3008 = (_3007 + 4294967295u) & _3007;
                            uint _3020 = _3018 * 40u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            _3034 = _3033.w;
                            uint _3036 = (_3018 * 40u) + 4u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3051 = (_3018 * 40u) + 8u;
                            _3061 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x));
                            uint _3063 = (_3018 * 40u) + 16u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3079 = (_3018 * 40u) + 20u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3018 * 40u) + 24u;
                            vec4 _3107 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 3u)).x));
                            uint _3113 = (_3018 * 40u) + 28u;
                            vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            _3138 = fma(_2391, _3126.z, fma(_2390, _3126.y, _3126.x * _2389)) + _3126.w;
                            _3139 = !((fma(_2391, _3107.z, fma(_2390, _3107.y, _3107.x * _2389)) + _3107.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3139)
                            {
                                float _3166 = _3033.x - _2389;
                                float _3167 = _3033.y - _2390;
                                float _3168 = _3033.z - _2391;
                                float _3169 = dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168));
                                float _3172 = inversesqrt(_3169);
                                float _3173 = _3172 * _3166;
                                float _3174 = _3172 * _3167;
                                float _3175 = _3172 * _3168;
                                float _3179 = 1.0 - (_3169 / (_3034 * _3034));
                                float _4248 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3180 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3184 = sqrt(_3169) * _3049.w;
                                float _3186 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                                float _3187 = _3186 * _3186;
                                float _3190 = ((1.0 - _3187) * dot(vec3(_3173, _3174, _3175), vec3(_694, _697, _700))) + _3187;
                                float _3193 = _3184 * _3184;
                                float _3197 = (fma(_2391, _3076.z, fma(_2390, _3076.y, _3076.x * _2389)) + _3076.w) / _3138;
                                float _3198 = (fma(_2391, _3092.z, fma(_2390, _3092.y, _3092.x * _2389)) + _3092.w) / _3138;
                                float _3202 = 1.0 - dot(vec2(_3197, _3198), vec2(_3197, _3198));
                                float _4264 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                                float _3203 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3204 = _3203 * (((isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0))) * _3180) / ((_3193 * 0.699999988079071044921875) + 1.0));
                                float _3216 = exp2(log2(1.0 / ((_3193 * 3.5) + 5.0)) * 0.25);
                                float _3217 = 1.0 - _754;
                                float _3224 = sqrt(1.0 - ((1.0 - (_3217 * _3217)) * (1.0 - (_3216 * _3216))));
                                float _3225 = _3224 * _3224;
                                float _3226 = _3225 * _3225;
                                float _3227 = _3173 - _2675;
                                float _3228 = _3174 - _2676;
                                float _3229 = _3175 - _2677;
                                float _3233 = inversesqrt(dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229)));
                                float _3237 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2675, (-0.0) - _2676, (-0.0) - _2677));
                                float _4275 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3240 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3241 = dot(vec3(_694, _697, _700), vec3(_3233 * _3227, _3233 * _3228, _3233 * _3229));
                                float _4286 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3244 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3248 = ((_3244 * _3244) * (_3226 + (-1.0))) + 1.0;
                                float _3249 = _3186 * _3225;
                                float _3250 = _3249 * _3249;
                                float _3256 = ((1.0 - _3250) * dot(vec3(_694, _697, _700), vec3(_3173, _3174, _3175))) + _3250;
                                float _4297 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3258 = 1.0 - _3225;
                                float _3268 = (0.5 / (((_3257 * ((_3240 * _3258) + _3225)) + 9.9999999392252902907785028219223e-09) + (((_3257 * _3258) + _3225) * _3240))) * _3257;
                                float _4308 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                                float _3278 = (_3203 * _3180) * (((_3226 * 3.1415927410125732421875) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) / ((_3248 * _3248) * ((_3193 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3278 * _3061.x;
                                frontier_phi_73_pred_1 = _3278 * _3061.y;
                                frontier_phi_73_pred_2 = _3204 * _3049.z;
                                frontier_phi_73_pred_3 = _3204 * _3049.y;
                                frontier_phi_73_pred_4 = _3204 * _3049.x;
                                frontier_phi_73_pred_5 = _3278 * _3061.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3282 = frontier_phi_73_pred;
                            _3283 = frontier_phi_73_pred_1;
                            _3287 = frontier_phi_73_pred_2;
                            _3286 = frontier_phi_73_pred_3;
                            _3285 = frontier_phi_73_pred_4;
                            _3284 = frontier_phi_73_pred_5;
                            _2991 = _3285 + _3004;
                            _2992 = _3286 + _3005;
                            _2993 = _3287 + _3006;
                            _2988 = _3282 + _3001;
                            _2989 = _3283 + _3002;
                            _2990 = _3284 + _3003;
                            if (_3008 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3001 = _2988;
                                _3002 = _2989;
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _3008;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2991;
                        frontier_phi_67_pred_1 = _2992;
                        frontier_phi_67_pred_2 = _2993;
                        frontier_phi_67_pred_3 = _2990;
                        frontier_phi_67_pred_4 = _2989;
                        frontier_phi_67_pred_5 = _2988;
                    }
                    _2656 = frontier_phi_67_pred;
                    _2658 = frontier_phi_67_pred_1;
                    _2660 = frontier_phi_67_pred_2;
                    _2654 = frontier_phi_67_pred_3;
                    _2652 = frontier_phi_67_pred_4;
                    _2650 = frontier_phi_67_pred_5;
                    uint _2795 = _2794 + 1u;
                    if (_2795 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2788 = _2650;
                        _2789 = _2652;
                        _2790 = _2654;
                        _2791 = _2656;
                        _2792 = _2658;
                        _2793 = _2660;
                        _2794 = _2795;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2658;
                frontier_phi_55_56_ladder_1 = _2660;
                frontier_phi_55_56_ladder_2 = _2656;
                frontier_phi_55_56_ladder_3 = _2654;
                frontier_phi_55_56_ladder_4 = _2652;
                frontier_phi_55_56_ladder_5 = _2650;
            }
            else
            {
                frontier_phi_55_56_ladder = _2544;
                frontier_phi_55_56_ladder_1 = _2546;
                frontier_phi_55_56_ladder_2 = _2542;
                frontier_phi_55_56_ladder_3 = _2540;
                frontier_phi_55_56_ladder_4 = _2538;
                frontier_phi_55_56_ladder_5 = _2536;
            }
            _2649 = frontier_phi_55_56_ladder_5;
            _2651 = frontier_phi_55_56_ladder_4;
            _2653 = frontier_phi_55_56_ladder_3;
            _2655 = frontier_phi_55_56_ladder_2;
            _2657 = frontier_phi_55_56_ladder;
            _2659 = frontier_phi_55_56_ladder_1;
        }
        float _2664 = isnan(1.0) ? _738 : (isnan(_738) ? 1.0 : min(_738, 1.0));
        _2448 = (_2664 * _2655) + _1903;
        _2450 = (_2664 * _2657) + _1905;
        _2452 = (_2664 * _2659) + _1907;
        _2454 = ((_2649 * 0.039999999105930328369140625) * _2664) + _2233;
        _2456 = ((_2651 * 0.039999999105930328369140625) * _2664) + _2235;
        _2458 = ((_2653 * 0.039999999105930328369140625) * _2664) + _2237;
    }
    else
    {
        _2448 = _1903;
        _2450 = _1905;
        _2452 = _1907;
        _2454 = _2233;
        _2456 = _2235;
        _2458 = _2237;
    }
    float _4324 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4335 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4346 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    uint _2478 = _226 + 6u;
    float _2486 = _675 / cbSceneParam._m0[86u].x;
    float _2487 = _676 / cbSceneParam._m0[86u].y;
    vec4 _2501 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2486, _2487, (log2((isnan(cbSceneParam._m0[77u].w) ? _608 : (isnan(_608) ? cbSceneParam._m0[77u].w : min(_608, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2503 = _2501.x;
    float _2504 = _2501.y;
    float _2505 = _2501.z;
    float _2506 = _2501.w;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_608 > cbSceneParam._m0[78u].w)
    {
        float _2561 = isnan(_608) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _608 : min(cbSceneParam._m0[80u].w, _608));
        float _2562 = _2561 / _608;
        float _2573 = _2562 * _660;
        float _2574 = _661 * _2562;
        float _2575 = (-0.0) - _2574;
        float _2577 = _2562 * _662;
        float _2579 = (cbSceneParam._m0[77u].w * _2575) / _2561;
        float _2580 = _2579 + cbSceneParam._m0[79u].w;
        float _2581 = cbSceneParam._m0[79u].w - _2574;
        float _2587 = sqrt(((_2573 * _2573) + (_2574 * _2574)) + (_2577 * _2577));
        float _2590 = (1.0 - (cbSceneParam._m0[77u].w / _2561)) * _2587;
        float _2595 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2597 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2750;
        if (abs((_2575 - _2579) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2750 = ((((_2580 > 0.0) ? exp2(_2595 * _2580) : (2.0 - exp2(_2597 * _2580))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2590;
        }
        else
        {
            float _2710 = 1.0 / cbSceneParam._m0[80u].x;
            float _2711 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : max(_2580, _2581));
            float _2712 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : min(_2580, _2581));
            float _2721 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : min(_2711, 0.0));
            float _2722 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : min(_2712, 0.0));
            _2750 = ((abs(_2587 / _2575) * cbSceneParam._m0[80u].y) * ((((_2721 - _2722) * 2.0) - ((exp2(_2595 * (isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0)))) - exp2(_2595 * (isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0))))) * _2710)) - ((exp2(_2597 * _2721) - exp2(_2597 * _2722)) * _2710))) + (_2590 * cbSceneParam._m0[80u].z);
        }
        vec4 _2752 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2486, _2487, 1.0), 0.0);
        float _2761 = exp2((_2750 * (-1.44269502162933349609375)) * (1.0 - _2752.w));
        float _2762 = log2(_2761);
        float _2778 = log2(_2506);
        _2599 = (exp2(_2778 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].x)) * _2752.x) / cbSceneParam._m0[78u].x)) + _2503;
        _2601 = (exp2(_2778 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].y)) * _2752.y) / cbSceneParam._m0[78u].y)) + _2504;
        _2603 = (exp2(_2778 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2762 * cbSceneParam._m0[78u].z)) * _2752.z) / cbSceneParam._m0[78u].z)) + _2505;
        _2605 = _2761 * _2506;
    }
    else
    {
        _2599 = _2503;
        _2601 = _2504;
        _2603 = _2505;
        _2605 = _2506;
    }
    float _2617 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2618 = _2617 == 3.0;
    float _2619 = log2(_2605);
    float _2626 = exp2(_2619 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2448 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _738))) + ((_2454 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1543)) * cbPerFrame._m0[3u].x));
    float _2627 = exp2(_2619 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2450 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _738))) + ((_2456 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1543)) * cbPerFrame._m0[3u].x));
    float _2628 = exp2(_2619 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2452 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _738))) + ((_2458 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1543)) * cbPerFrame._m0[3u].x));
    float _2637 = (_2617 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2637 * (_2618 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2599)));
    SV_Target.y = _2637 * (_2618 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2601)));
    SV_Target.z = _2637 * (_2618 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2603)));
    SV_Target.w = cbInstanceData._m0[_2478].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2478].w;
}


