#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1007;
float _3653;
float _3654;
float _3655;
float _3656;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _228 = uint(roundEven(NORMAL.w)) * 13u;
    uint _234 = _228 + 1u;
    uint _238 = _228 + 2u;
    float _247 = sqrt(((cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x) + (cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x)) + (cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x));
    float _248 = _247 * TEXCOORD.z;
    float _249 = _247 * TEXCOORD.w;
    vec4 _268 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _268.x * cbMtdParam._m0[9u].x;
    float _275 = _268.y * cbMtdParam._m0[9u].y;
    float _276 = _268.z * cbMtdParam._m0[9u].z;
    vec4 _295 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _248) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _249) + cbTextureTilingScale._m0[14u].w));
    vec4 _315 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _319 = _315.z;
    float _324 = (_315.x * 2.0) + (-1.0);
    float _326 = (_315.y * 2.0) + (-1.0);
    float _327 = dot(vec2(_324, _326), vec2(_324, _326));
    float _3665 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _333 = sqrt(1.0 - (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))));
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _248) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _249) + cbTextureTilingScale._m0[11u].w));
    float _352 = _350.x;
    float _353 = 1.0 - _352;
    float _369 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_352 - _353) * cbMtdParam._m0[24u].z) + _353) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3676 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _377 = (_370 * ((_295.x * cbMtdParam._m0[18u].x) - _274)) + _274;
    float _378 = (_370 * ((_295.y * cbMtdParam._m0[18u].y) - _275)) + _275;
    float _379 = (_370 * ((_295.z * cbMtdParam._m0[18u].z) - _276)) + _276;
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _248) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _249) + cbTextureTilingScale._m0[15u].w));
    float _399 = (_392.x * 2.0) + (-1.0);
    float _400 = (_392.y * 2.0) + (-1.0);
    float _401 = dot(vec2(_399, _400), vec2(_399, _400));
    float _3687 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _409 = (_370 * (_392.z - _319)) + _319;
    float _421 = (((_399 - _324) + (cbMtdParam._m0[21u].x * _324)) * _370) + _324;
    float _422 = (((_400 - _326) + (cbMtdParam._m0[21u].x * _326)) * _370) + _326;
    float _423 = (_370 * (sqrt(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0)))) - _333)) + _333;
    float _428 = cbMtdParam._m0[22u].x + _315.w;
    float _431 = fma(_423, _215 * NORMAL.x, fma(_422, _222 * TANGENT.x, (_208 * _200) * _421));
    float _434 = fma(_423, _215 * NORMAL.y, fma(_422, _222 * TANGENT.y, (_208 * _201) * _421));
    float _437 = fma(_423, _215 * NORMAL.z, fma(_422, _222 * TANGENT.z, (_208 * _202) * _421));
    float _441 = inversesqrt(dot(vec3(_431, _434, _437), vec3(_431, _434, _437)));
    float _442 = _441 * _431;
    float _443 = _441 * _434;
    float _444 = _441 * _437;
    float _3698 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _445 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _3720 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _3731 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _3742 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _463 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _514 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _504);
    float _515 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _504);
    float _516 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _504);
    float _520 = inversesqrt(dot(vec3(_514, _515, _516), vec3(_514, _515, _516)));
    float _521 = _514 * _520;
    float _522 = _515 * _520;
    float _523 = _516 * _520;
    vec4 _528 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _530 = _528.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _687 = sqrt(((_514 * _514) + (_515 * _515)) + (_516 * _516));
        float _693 = (cbMatDynParam._m0[5u].x * _687) + cbMatDynParam._m0[5u].y;
        float _3753 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _694 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _698 = (cbMatDynParam._m0[5u].z * _687) + cbMatDynParam._m0[5u].w;
        float _3764 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) - _694)) + _694) < ((_530 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _542 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _543 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _563 = fma(_444, cbSceneParam._m0[5u].z, fma(_443, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _442));
    float _566 = fma(_444, cbSceneParam._m0[6u].z, fma(_443, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _442));
    float _569 = fma(_444, cbSceneParam._m0[7u].z, fma(_443, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _442));
    uint _582 = _228 + 9u;
    uint _583 = _582 + uint(cbMatDynParam._m0[0u].w);
    float _589 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_583].x;
    float _590 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_583].y;
    float _591 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_583].z;
    float _3775 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _3797 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    vec4 _603 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _542, cbSceneParam._m0[86u].y * _543));
    float _607 = ((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * TEXCOORD_5.w) * _603.x;
    float _608 = dot(vec3(_442, _443, _444), vec3(_521, _522, _523));
    float _611 = _608 * 2.0;
    float _615 = (_611 * _442) - _521;
    float _616 = (_611 * _443) - _522;
    float _617 = (_611 * _444) - _523;
    float _621 = abs(dot(vec3(_521, _522, _523), vec3(_442, _443, _444)));
    float _3808 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _623 = sqrt(_445);
    float _636 = exp2((_623 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_623 * 3.0));
    float _668 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _672 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1006;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _731 = fma(_676, cbModelParam._m0[26u].z, fma(_672, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _668));
        float _735 = fma(_676, cbModelParam._m0[27u].z, fma(_672, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _668));
        float _739 = fma(_676, cbModelParam._m0[28u].z, fma(_672, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _668));
        float _764 = _668 + _442;
        float _765 = _672 + _443;
        float _766 = _676 + _444;
        float _776 = fma(_766, cbModelParam._m0[26u].z, fma(_765, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764)) - _731;
        float _777 = fma(_766, cbModelParam._m0[27u].z, fma(_765, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764)) - _735;
        float _778 = fma(_766, cbModelParam._m0[28u].z, fma(_765, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764)) - _739;
        float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
        float _795 = ((_782 * _776) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_731 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _796 = ((_782 * _777) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_735 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _797 = ((_782 * _778) / cbModelParam._m0[34u].z) + ((((((_739 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_795, _796, _797), 0.0);
        float _834 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_800.x + (-0.5));
        float _836 = _834 * (_800.y + (-0.5));
        float _837 = _834 * (_800.z + (-0.5));
        float _844 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_807.x + (-0.5));
        float _846 = _844 * (_807.y + (-0.5));
        float _847 = _844 * (_807.z + (-0.5));
        float _854 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_814.x + (-0.5));
        float _856 = _854 * (_814.y + (-0.5));
        float _857 = _854 * (_814.z + (-0.5));
        float _864 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_821.x + (-0.5));
        float _866 = _864 * (_821.y + (-0.5));
        float _867 = _864 * (_821.z + (-0.5));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _870 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _871 = _835 * 0.5;
        float _872 = _845 * 0.5;
        float _873 = _855 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _888 = (dot(vec3(_442, _443, _444), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _898 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _900 = _899 * 2.0;
        float _904 = (1.0 - _899) / (_899 + 1.0);
        float _3856 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _914 = ((((1.0 - _905) * (_900 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_900 + 1.0))) + _905) * _868;
        float _915 = _836 * 0.5;
        float _916 = _846 * 0.5;
        float _917 = _856 * 0.5;
        float _918 = dot(vec3(_915, _916, _917), vec3(_915, _916, _917));
        float _923 = (_918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_918);
        float _931 = (dot(vec3(_442, _443, _444), vec3(_923 * _915, _923 * _916, _923 * _917)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _940 = sqrt(((_916 * _916) + (_915 * _915)) + (_917 * _917)) / (_869 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3889 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_942 + 1.0))) + _947) * _869;
        float _957 = _837 * 0.5;
        float _958 = _847 * 0.5;
        float _959 = _857 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(_442, _443, _444), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3900 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_870 + 9.9999997473787516355514526367188e-06);
        float _3911 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3922 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_984 + 1.0))) + _989) * _870;
        _1006 = _837;
        _1008 = _836;
        _1009 = _835;
        _1010 = _847;
        _1011 = _846;
        _1012 = _845;
        _1013 = _857;
        _1014 = _856;
        _1015 = _855;
        _1016 = _870;
        _1017 = _869;
        _1018 = _868;
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0)));
        _1020 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1021 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
    }
    else
    {
        _1006 = _1007;
        _1008 = _1007;
        _1009 = _1007;
        _1010 = _1007;
        _1011 = _1007;
        _1012 = _1007;
        _1013 = _1007;
        _1014 = _1007;
        _1015 = _1007;
        _1016 = _1007;
        _1017 = _1007;
        _1018 = _1007;
        _1019 = 0.0;
        _1020 = 0.0;
        _1021 = 0.0;
    }
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1049 = fma(_676, cbModelParam._m0[30u].z, fma(_672, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _668));
        float _1053 = fma(_676, cbModelParam._m0[31u].z, fma(_672, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _668));
        float _1057 = fma(_676, cbModelParam._m0[32u].z, fma(_672, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _668));
        float _1080 = _668 + _442;
        float _1081 = _672 + _443;
        float _1082 = _676 + _444;
        float _1092 = fma(_1082, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1080)) - _1049;
        float _1093 = fma(_1082, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1080)) - _1053;
        float _1094 = fma(_1082, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1080)) - _1057;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1049 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1053 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[35u].z) + ((((((_1057 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1148 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1115.x + (-0.5));
        float _1150 = _1148 * (_1115.y + (-0.5));
        float _1151 = _1148 * (_1115.z + (-0.5));
        float _1158 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1122.x + (-0.5));
        float _1160 = _1158 * (_1122.y + (-0.5));
        float _1161 = _1158 * (_1122.z + (-0.5));
        float _1168 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1129.x + (-0.5));
        float _1170 = _1168 * (_1129.y + (-0.5));
        float _1171 = _1168 * (_1129.z + (-0.5));
        float _1178 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1136.x + (-0.5));
        float _1180 = _1178 * (_1136.y + (-0.5));
        float _1181 = _1178 * (_1136.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_442, _443, _444), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3985 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_1212 + 1.0))) + _1217) * _1182;
        float _1227 = _1150 * 0.5;
        float _1228 = _1160 * 0.5;
        float _1229 = _1170 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_442, _443, _444), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4018 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1254 + 1.0))) + _1259) * _1183;
        float _1269 = _1151 * 0.5;
        float _1270 = _1161 * 0.5;
        float _1271 = _1171 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_442, _443, _444), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4051 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1296 + 1.0))) + _1301) * _1184;
        _1318 = _1151;
        _1319 = _1150;
        _1320 = _1149;
        _1321 = _1161;
        _1322 = _1160;
        _1323 = _1159;
        _1324 = _1171;
        _1325 = _1170;
        _1326 = _1169;
        _1327 = _1184;
        _1328 = _1183;
        _1329 = _1182;
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1331 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1007;
        _1319 = _1007;
        _1320 = _1007;
        _1321 = _1007;
        _1322 = _1007;
        _1323 = _1007;
        _1324 = _1007;
        _1325 = _1007;
        _1326 = _1007;
        _1327 = _1007;
        _1328 = _1007;
        _1329 = _1007;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1019)) + _1019;
    float _1343 = (cbModelParam._m0[1u].x * (_1331 - _1020)) + _1020;
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1021)) + _1021;
    float _1365 = fma(_1344, cbSceneParam._m0[89u].z, fma(_1343, cbSceneParam._m0[89u].y, _1342 * cbSceneParam._m0[89u].x));
    float _1368 = fma(_1344, cbSceneParam._m0[90u].z, fma(_1343, cbSceneParam._m0[90u].y, _1342 * cbSceneParam._m0[90u].x));
    float _1371 = fma(_1344, cbSceneParam._m0[91u].z, fma(_1343, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1342));
    float _1386 = _615 * 0.5;
    float _1387 = _616 * 0.5;
    float _1388 = _617 * 0.5;
    float _1389 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1392 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1319, _1322, _1325, _1328));
    float _1395 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1429;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1402 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1006, _1010, _1013, _1016));
        float _1406 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1008, _1011, _1014, _1017));
        float _1410 = dot(vec4(_1386, _1387, _1388, 1.0), vec4(_1009, _1012, _1015, _1018));
        float _1417 = dot(vec4(cbModelParam._m0[39u]), vec4(_1386, _1387, _1388, 1.0));
        _1429 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1417) ? 0.0 : (isnan(0.0) ? _1417 : max(0.0, _1417))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1429 = 1.0;
    }
    float _1440;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1431 = dot(vec4(cbModelParam._m0[40u]), vec4(_1386, _1387, _1388, 1.0));
        _1440 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1431) ? 0.0 : (isnan(0.0) ? _1431 : max(0.0, _1431))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1440 = 1.0;
    }
    float _1444 = (_1440 * cbModelParam._m0[1u].x) + (_1429 * (1.0 - cbModelParam._m0[1u].x));
    float _1454 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _445);
    float _1455 = isnan(_1454) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1454 : min(cbModelParam._m0[25u].z, _1454));
    float _1535;
    float _1537;
    float _1539;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1502 = fma(_676, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _668)) + cbModelParam._m0[13u].w;
        float _1506 = fma(_676, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _668)) + cbModelParam._m0[14u].w;
        float _1510 = fma(_676, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _668)) + cbModelParam._m0[15u].w;
        float _1513 = fma(_617, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _615));
        float _1516 = fma(_617, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _615));
        float _1519 = fma(_617, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _615));
        float _1547;
        if (_1513 > 0.0)
        {
            _1547 = abs((1.0 - _1502) / _1513);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1502 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1547 = frontier_phi_17_15_ladder;
        }
        float _1718;
        if (_1516 > 0.0)
        {
            _1718 = abs((1.0 - _1506) / _1516);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1506 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1718 = frontier_phi_26_22_ladder;
        }
        float _2014;
        if (_1519 > 0.0)
        {
            _2014 = abs((1.0 - _1510) / _1519);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1510 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2014 = frontier_phi_38_33_ladder;
        }
        float _2016 = isnan(_1718) ? _1547 : (isnan(_1547) ? _1718 : min(_1547, _1718));
        float _2017 = isnan(_2014) ? _2016 : (isnan(_2016) ? _2014 : min(_2016, _2014));
        float _2021 = (_2017 * _1513) + _1502;
        float _2022 = (_2017 * _1516) + _1506;
        float _2023 = (_2017 * _1519) + _1510;
        float _2024 = _2017 * 9.9999997473787516355514526367188e-05;
        float _2026 = (-1.0) - _2024;
        float _2028 = _2024 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2023 > _2028) || ((_2023 < _2026) || ((_2022 > _2028) || ((_2022 < _2026) || ((_2021 < _2026) || (_2021 > _2028))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2168 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2023, cbModelParam._m0[9u].z, fma(_2022, cbModelParam._m0[9u].y, _2021 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2023, cbModelParam._m0[10u].z, fma(_2022, cbModelParam._m0[10u].y, _2021 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2023, cbModelParam._m0[11u].z, fma(_2022, cbModelParam._m0[11u].y, _2021 * cbModelParam._m0[11u].x))), _1455);
            frontier_phi_16_38_ladder = _2168.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2168.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2168.x * cbModelParam._m0[1u].y;
        }
        _1535 = frontier_phi_16_38_ladder_2;
        _1537 = frontier_phi_16_38_ladder_1;
        _1539 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_615, _616, _617), _1455);
        _1535 = _1523.x * cbModelParam._m0[1u].y;
        _1537 = _1523.y * cbModelParam._m0[1u].y;
        _1539 = _1523.z * cbModelParam._m0[1u].y;
    }
    float _1543 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _445);
    float _1544 = isnan(_1543) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1543 : min(cbModelParam._m0[25u].w, _1543));
    float _1634;
    float _1636;
    float _1638;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1598 = fma(_676, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _668)) + cbModelParam._m0[21u].w;
        float _1602 = fma(_676, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _668)) + cbModelParam._m0[22u].w;
        float _1606 = fma(_676, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _668)) + cbModelParam._m0[23u].w;
        float _1609 = fma(_617, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _615));
        float _1612 = fma(_617, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _615));
        float _1615 = fma(_617, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _615));
        float _1723;
        if (_1609 > 0.0)
        {
            _1723 = abs((1.0 - _1598) / _1609);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1598 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1723 = frontier_phi_28_24_ladder;
        }
        float _2041;
        if (_1612 > 0.0)
        {
            _2041 = abs((1.0 - _1602) / _1612);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1602 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2041 = frontier_phi_40_35_ladder;
        }
        float _2368;
        if (_1615 > 0.0)
        {
            _2368 = abs((1.0 - _1606) / _1615);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1606 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2368 = frontier_phi_50_47_ladder;
        }
        float _2370 = isnan(_2041) ? _1723 : (isnan(_1723) ? _2041 : min(_1723, _2041));
        float _2371 = isnan(_2368) ? _2370 : (isnan(_2370) ? _2368 : min(_2370, _2368));
        float _2375 = (_2371 * _1609) + _1598;
        float _2376 = (_2371 * _1612) + _1602;
        float _2377 = (_2371 * _1615) + _1606;
        float _2378 = _2371 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2378;
        float _2381 = _2378 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2377 > _2381) || ((_2377 < _2379) || ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 < _2379) || (_2375 > _2381))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2495 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2377, cbModelParam._m0[17u].z, fma(_2376, cbModelParam._m0[17u].y, _2375 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2377, cbModelParam._m0[18u].z, fma(_2376, cbModelParam._m0[18u].y, _2375 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2377, cbModelParam._m0[19u].z, fma(_2376, cbModelParam._m0[19u].y, _2375 * cbModelParam._m0[19u].x))), _1544);
            frontier_phi_25_50_ladder = _2495.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2495.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2495.x * cbModelParam._m0[1u].z;
        }
        _1634 = frontier_phi_25_50_ladder_2;
        _1636 = frontier_phi_25_50_ladder_1;
        _1638 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_615, _616, _617), _1544);
        _1634 = _1618.x * cbModelParam._m0[1u].z;
        _1636 = _1618.y * cbModelParam._m0[1u].z;
        _1638 = _1618.z * cbModelParam._m0[1u].z;
    }
    float _1650 = ((((1.0 - _636) * ((_623 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_636 * _623)) * _607;
    float _1651 = _1650 * ((cbModelParam._m0[1u].w * (_1634 - _1535)) + _1535);
    float _1652 = _1650 * ((cbModelParam._m0[1u].w * (_1636 - _1537)) + _1537);
    float _1653 = _1650 * ((cbModelParam._m0[1u].w * (_1638 - _1539)) + _1539);
    float _1656 = fma(_1653, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1659 = fma(_1653, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1662 = fma(_1653, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, _1651 * cbSceneParam._m0[91u].x));
    float _1697 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1701 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1705 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1709 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1710 = _1697 / _1709;
    float _1711 = _1701 / _1709;
    float _1712 = _1705 / _1709;
    float _1859;
    float _1860;
    float _1861;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1739 = ((uint(_1712 > cbSceneParam._m0[59u].y) + uint(_1712 > cbSceneParam._m0[59u].x)) + uint(_1712 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1740 = _1739 + 43u;
        uint _1748 = _1739 + 44u;
        uint _1756 = _1739 + 45u;
        uint _1764 = _1739 + 46u;
        float _1775 = fma(_1709, cbSceneParam._m0[_1740].w, fma(_1705, cbSceneParam._m0[_1740].z, fma(_1701, cbSceneParam._m0[_1740].y, _1697 * cbSceneParam._m0[_1740].x)));
        float _1779 = fma(_1709, cbSceneParam._m0[_1748].w, fma(_1705, cbSceneParam._m0[_1748].z, fma(_1701, cbSceneParam._m0[_1748].y, _1697 * cbSceneParam._m0[_1748].x)));
        float _1787 = fma(_1709, cbSceneParam._m0[_1764].w, fma(_1705, cbSceneParam._m0[_1764].z, fma(_1701, cbSceneParam._m0[_1764].y, _1697 * cbSceneParam._m0[_1764].x)));
        float _1792 = cbSceneParam._m0[33u].z * _1787;
        float _1794 = cbSceneParam._m0[33u].w * _1787;
        float _1797 = fma(_1709, cbSceneParam._m0[_1756].w, fma(_1705, cbSceneParam._m0[_1756].z, fma(_1701, cbSceneParam._m0[_1756].y, _1697 * cbSceneParam._m0[_1756].x))) / _1787;
        float _1845 = (cbSceneParam._m0[33u].x - sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712))) * cbSceneParam._m0[33u].y;
        float _4177 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1852 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1792 + _1775) / _1787, (_1794 + _1779) / _1787), _1797), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1794 + _1775) / _1787, (_1779 - _1792) / _1787), _1797), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1775 - _1792) / _1787, (_1779 - _1794) / _1787), _1797), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1775 - _1794) / _1787, (_1792 + _1779) / _1787), _1797), 0.0)).x), vec4(0.25)));
        _1859 = 1.0 - (_1852 * cbSceneParam._m0[34u].x);
        _1860 = 1.0 - (_1852 * cbSceneParam._m0[34u].y);
        _1861 = 1.0 - (_1852 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1859 = 1.0;
        _1860 = 1.0;
        _1861 = 1.0;
    }
    float _1925;
    float _1927;
    float _1929;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1913 = fma(_1709, cbSceneParam._m0[63u].w, fma(_1705, cbSceneParam._m0[63u].z, fma(_1701, cbSceneParam._m0[63u].y, _1697 * cbSceneParam._m0[63u].x)));
        float _1914 = fma(_1709, cbSceneParam._m0[60u].w, fma(_1705, cbSceneParam._m0[60u].z, fma(_1701, cbSceneParam._m0[60u].y, _1697 * cbSceneParam._m0[60u].x))) / _1913;
        float _1915 = fma(_1709, cbSceneParam._m0[61u].w, fma(_1705, cbSceneParam._m0[61u].z, fma(_1701, cbSceneParam._m0[61u].y, _1697 * cbSceneParam._m0[61u].x))) / _1913;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1914 >= cbSceneParam._m0[64u].x) && (_1915 >= cbSceneParam._m0[64u].y)) && (_1914 <= cbSceneParam._m0[64u].z)) && (_1915 <= cbSceneParam._m0[64u].w))
        {
            float _2054 = fma(_1709, cbSceneParam._m0[62u].w, fma(_1705, cbSceneParam._m0[62u].z, fma(_1701, cbSceneParam._m0[62u].y, _1697 * cbSceneParam._m0[62u].x))) / _1913;
            float _2058 = isnan(cbSceneParam._m0[41u].w) ? _2054 : (isnan(_2054) ? cbSceneParam._m0[41u].w : max(_2054, cbSceneParam._m0[41u].w));
            float _2101 = (cbSceneParam._m0[33u].x - sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712))) * cbSceneParam._m0[33u].y;
            float _4193 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
            float _2108 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1914, cbSceneParam._m0[33u].w + _1915), _2058), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1914, _1915 - cbSceneParam._m0[33u].z), _2058), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1914 - cbSceneParam._m0[33u].z, _1915 - cbSceneParam._m0[33u].w), _2058), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1914 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1915), _2058), 0.0)).x), vec4(0.25)));
            float _2112 = 1.0 - (_2108 * cbSceneParam._m0[34u].x);
            float _2113 = 1.0 - (_2108 * cbSceneParam._m0[34u].y);
            float _2114 = 1.0 - (_2108 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2114) ? _1861 : (isnan(_1861) ? _2114 : min(_1861, _2114));
            frontier_phi_37_36_ladder_1 = isnan(_2113) ? _1860 : (isnan(_1860) ? _2113 : min(_1860, _2113));
            frontier_phi_37_36_ladder_2 = isnan(_2112) ? _1859 : (isnan(_1859) ? _2112 : min(_1859, _2112));
        }
        else
        {
            frontier_phi_37_36_ladder = _1861;
            frontier_phi_37_36_ladder_1 = _1860;
            frontier_phi_37_36_ladder_2 = _1859;
        }
        _1925 = frontier_phi_37_36_ladder_2;
        _1927 = frontier_phi_37_36_ladder_1;
        _1929 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1925 = _1859;
        _1927 = _1860;
        _1929 = _1861;
    }
    uvec4 _1934 = floatBitsToUint(cbInstanceData._m0[_228 + 5u]);
    uint _1936 = _1934.x * 14u;
    uint _1937 = _1936 + 13u;
    float _1944 = _607 + (-1.0);
    float _1949 = (cbLight._m0[_1937].x * _1944) + 1.0;
    float _1950 = (cbLight._m0[_1937].y * _1944) + 1.0;
    float _1951 = (cbLight._m0[_1937].z * _1944) + 1.0;
    float _1952 = (cbLight._m0[_1937].w * _1944) + 1.0;
    uint _1953 = _1936 + 5u;
    float _1959 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
    uint _1963 = _1936 + 4u;
    float _1973 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1977 = _1936 | 1u;
    float _1988 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_442, _443, _444));
    float _1991 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_442, _443, _444));
    float _4229 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _4240 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1996 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _1998 = (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * 0.3183098733425140380859375;
    float _2005 = ((cbLight._m0[_1953].x * _1959) * _1998) + (((cbLight._m0[_1963].x * _1925) * _1973) * _1996);
    float _2006 = ((_1959 * cbLight._m0[_1953].y) * _1998) + (((cbLight._m0[_1963].y * _1927) * _1973) * _1996);
    float _2007 = ((_1959 * cbLight._m0[_1953].z) * _1998) + (((cbLight._m0[_1963].z * _1929) * _1973) * _1996);
    uvec4 _2011 = floatBitsToUint(cbLight._m0[_1936 + 12u]);
    bool _2013 = _2011.x == 0u;
    float _2115;
    float _2117;
    float _2119;
    if (_2013)
    {
        _2115 = _2005;
        _2117 = _2006;
        _2119 = _2007;
    }
    else
    {
        uint _2123 = _1936 + 6u;
        float _2139 = (dot(vec3(cbLight._m0[_1936 + 2u].xyz), vec3(_442, _443, _444)) * 0.5) + 0.5;
        float _2140 = _2139 * _2139;
        float _4251 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2141 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _2142 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2115 = (((cbLight._m0[_2123].x * 0.3183098733425140380859375) * _2141) * _2142) + _2005;
        _2117 = (((cbLight._m0[_2123].y * 0.3183098733425140380859375) * _2141) * _2142) + _2006;
        _2119 = (((cbLight._m0[_2123].z * 0.3183098733425140380859375) * _2141) * _2142) + _2007;
    }
    bool _2122 = _2011.y == 0u;
    float _2177;
    float _2179;
    float _2181;
    if (_2122)
    {
        _2177 = _2115;
        _2179 = _2117;
        _2181 = _2119;
    }
    else
    {
        uint _2339 = _1936 + 7u;
        float _2355 = (dot(vec3(cbLight._m0[_1936 + 3u].xyz), vec3(_442, _443, _444)) * 0.5) + 0.5;
        float _2356 = _2355 * _2355;
        float _4267 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2357 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2358 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2177 = (((cbLight._m0[_2339].x * 0.3183098733425140380859375) * _2357) * _2358) + _2115;
        _2179 = (((cbLight._m0[_2339].y * 0.3183098733425140380859375) * _2357) * _2358) + _2117;
        _2181 = (((cbLight._m0[_2339].z * 0.3183098733425140380859375) * _2357) * _2358) + _2119;
    }
    uint _2184 = _1936 + 8u;
    float _2197 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _445) * 0.949999988079071044921875);
    float _2198 = _2197 * _2197;
    float _2199 = cbLight._m0[_1936].x + _521;
    float _2200 = cbLight._m0[_1936].y + _522;
    float _2201 = cbLight._m0[_1936].z + _523;
    float _2205 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
    float _2206 = _2205 * _2199;
    float _2207 = _2205 * _2200;
    float _2208 = _2205 * _2201;
    float _2209 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_1936].xyz));
    float _4283 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _4294 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _2213 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2214 = dot(vec3(_442, _443, _444), vec3(_2206, _2207, _2208));
    float _4305 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _2218 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_2206, _2207, _2208));
    float _4316 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2222 = _2198 * _2198;
    float _2226 = ((_2217 * _2217) * (_2222 + (-1.0))) + 1.0;
    float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2238 = 1.0 - _2198;
    float _2249 = (0.5 / (((_2213 * ((_2212 * _2238) + _2198)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2238) + _2198) * _2212))) * _2212;
    float _4327 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2251 = (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2222 / ((_2226 * _2226) * 3.141590118408203125));
    uint _2265 = _1936 + 9u;
    float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _445) * 0.949999988079071044921875);
    float _2277 = _2276 * _2276;
    float _2278 = cbLight._m0[_1977].x + _521;
    float _2279 = cbLight._m0[_1977].y + _522;
    float _2280 = cbLight._m0[_1977].z + _523;
    float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
    float _2285 = _2284 * _2278;
    float _2286 = _2284 * _2279;
    float _2287 = _2284 * _2280;
    float _2288 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_1977].xyz));
    float _4338 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2292 = dot(vec3(_442, _443, _444), vec3(_2285, _2286, _2287));
    float _4349 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
    float _2296 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2285, _2286, _2287));
    float _4360 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2300 = _2277 * _2277;
    float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
    float _2313 = (exp2(log2(1.0 - (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2314 = 1.0 - _2277;
    float _2324 = (0.5 / (((_2213 * ((_2291 * _2314) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2314) + _2277) * _2291))) * _2291;
    float _4371 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2326 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
    float _2336 = (((_2313 * cbLight._m0[_2265].x) * _2326) * _1959) + ((((cbLight._m0[_2184].x * _1925) * _2237) * _2251) * _1973);
    float _2337 = (((_2313 * cbLight._m0[_2265].y) * _2326) * _1959) + ((((cbLight._m0[_2184].y * _1927) * _2237) * _2251) * _1973);
    float _2338 = (((_2313 * cbLight._m0[_2265].z) * _2326) * _1959) + ((((cbLight._m0[_2184].z * _1929) * _2237) * _2251) * _1973);
    float _2394;
    float _2396;
    float _2398;
    if (_2013)
    {
        _2394 = _2336;
        _2396 = _2337;
        _2398 = _2338;
    }
    else
    {
        uint _2400 = _1936 + 2u;
        uint _2404 = _1936 + 10u;
        float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _445) * 0.949999988079071044921875);
        float _2419 = _2418 * _2418;
        float _2420 = cbLight._m0[_2400].x + _521;
        float _2421 = cbLight._m0[_2400].y + _522;
        float _2422 = cbLight._m0[_2400].z + _523;
        float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
        float _2427 = _2426 * _2420;
        float _2428 = _2426 * _2421;
        float _2429 = _2426 * _2422;
        float _2430 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_2400].xyz));
        float _4382 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2433 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2434 = dot(vec3(_442, _443, _444), vec3(_2427, _2428, _2429));
        float _4393 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2438 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2427, _2428, _2429));
        float _4404 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2442 = _2419 * _2419;
        float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
        float _2455 = (exp2(log2(1.0 - (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2456 = 1.0 - _2419;
        float _2466 = (0.5 / (((_2213 * ((_2433 * _2456) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2456) + _2419) * _2433))) * _2433;
        float _4415 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2468 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
        float _2469 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2394 = (((_2455 * cbLight._m0[_2404].x) * _2468) * _2469) + _2336;
        _2396 = (((_2455 * cbLight._m0[_2404].y) * _2468) * _2469) + _2337;
        _2398 = (((_2455 * cbLight._m0[_2404].z) * _2468) * _2469) + _2338;
    }
    float _2500;
    float _2502;
    float _2504;
    if (_2122)
    {
        _2500 = _2394;
        _2502 = _2396;
        _2504 = _2398;
    }
    else
    {
        uint _2511 = _1936 + 3u;
        uint _2515 = _1936 + 11u;
        float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2511].w)) * _445) * 0.949999988079071044921875);
        float _2530 = _2529 * _2529;
        float _2531 = cbLight._m0[_2511].x + _521;
        float _2532 = cbLight._m0[_2511].y + _522;
        float _2533 = cbLight._m0[_2511].z + _523;
        float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
        float _2538 = _2537 * _2531;
        float _2539 = _2537 * _2532;
        float _2540 = _2537 * _2533;
        float _2541 = dot(vec3(_442, _443, _444), vec3(cbLight._m0[_2511].xyz));
        float _4431 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2545 = dot(vec3(_442, _443, _444), vec3(_2538, _2539, _2540));
        float _4442 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2548 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _2549 = dot(vec3(cbLight._m0[_2511].xyz), vec3(_2538, _2539, _2540));
        float _4453 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2553 = _2530 * _2530;
        float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
        float _2566 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2567 = 1.0 - _2530;
        float _2577 = (0.5 / (((_2213 * ((_2544 * _2567) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2213 * _2567) + _2530) * _2544))) * _2544;
        float _4464 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2579 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
        float _2580 = isnan(1.0) ? _1952 : (isnan(_1952) ? 1.0 : min(_1952, 1.0));
        _2500 = (((_2566 * cbLight._m0[_2515].x) * _2579) * _2580) + _2394;
        _2502 = (((_2566 * cbLight._m0[_2515].y) * _2579) * _2580) + _2396;
        _2504 = (((_2566 * cbLight._m0[_2515].z) * _2579) * _2580) + _2398;
    }
    float _2646;
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    if (_1934.y == 0u)
    {
        uvec4 _2601 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2602 = _2601.x;
        uint _2613 = uint((float(_2601.y) * floor(float(uint(cbSceneParam._m0[85u].y * _543) / _2602))) + floor(float(uint(cbSceneParam._m0[85u].x * _542) / _2602)));
        float _2623 = (log2(_1712 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2624 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        uint _2627 = uint(isnan(14.0) ? _2624 : (isnan(_2624) ? 14.0 : min(_2624, 14.0)));
        uvec4 _2632 = texelFetch(g_lightClusterGridBuffer, int(((_2627 << 2u) + (_2613 << 6u)) >> 2u));
        uint _2633 = _2632.x;
        uint _2634 = _2601.z;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((((1u << ((_2634 >> 4u) & 15u)) + 4294967295u) & _2633) == 0u) || ((_2634 & 240u) == 0u))
        {
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
            _2723 = 0.0;
        }
        else
        {
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2724;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            float _2871 = 0.0;
            uint _2872 = 0u;
            uint _2881;
            bool _2882;
            for (;;)
            {
                _2881 = texelFetch(g_lightClassification, int((((_2627 << 5u) + (_2613 << 9u)) + (_2872 << 2u)) >> 2u)).x;
                _2882 = _2881 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2882)
                {
                    frontier_phi_71_pred = _2871;
                    frontier_phi_71_pred_1 = _2870;
                    frontier_phi_71_pred_2 = _2869;
                    frontier_phi_71_pred_3 = _2868;
                    frontier_phi_71_pred_4 = _2867;
                    frontier_phi_71_pred_5 = _2866;
                }
                else
                {
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    float _3015;
                    float _3016;
                    uint _3017;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2870;
                    _3016 = _2871;
                    _3017 = _2881;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    for (;;)
                    {
                        uint _3021 = uint(findLSB(_3017)) + (_2872 << 5u);
                        uint _3018 = (_3017 + 4294967295u) & _3017;
                        uint _3023 = _3021 * 48u;
                        vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3023)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3023 + 3u)).x));
                        uint _3043 = (_3021 * 48u) + 4u;
                        vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3043)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3043 + 3u)).x));
                        uint _3062 = (_3021 * 48u) + 8u;
                        vec3 _3073 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3062)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3062 + 2u)).x));
                        float _3077 = _3037.x - _1710;
                        float _3078 = _3037.y - _1711;
                        float _3079 = _3037.z - _1712;
                        float _3080 = dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079));
                        float _3083 = inversesqrt(_3080);
                        float _3084 = _3083 * _3077;
                        float _3085 = _3083 * _3078;
                        float _3086 = _3083 * _3079;
                        float _3087 = dot(vec3(_563, _566, _569), vec3(_3084, _3085, _3086));
                        float _3092 = 1.0 - (_3080 * _3037.w);
                        float _4490 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3093 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3094 = sqrt(_3080) * _3056.w;
                        float _3097 = 1.39999997615814208984375 / (_3094 + 1.39999997615814208984375);
                        float _3098 = _3097 * _3097;
                        float _3101 = ((1.0 - _3098) * _3087) + _3098;
                        float _3104 = _3094 * _3094;
                        float _3108 = ((isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0))) * _3093) / ((_3104 * 0.699999988079071044921875) + 1.0);
                        float _3112 = (-0.0) - _1710;
                        float _3113 = (-0.0) - _1711;
                        float _3114 = (-0.0) - _1712;
                        float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                        float _3119 = _3118 * _3112;
                        float _3120 = _3118 * _3113;
                        float _3121 = _3118 * _3114;
                        float _3128 = exp2(log2(1.0 / ((_3104 * 3.5) + 5.0)) * 0.25);
                        float _3129 = 1.0 - _623;
                        float _3136 = sqrt(1.0 - ((1.0 - (_3129 * _3129)) * (1.0 - (_3128 * _3128))));
                        float _3137 = _3136 * _3136;
                        float _3138 = _3137 * _3137;
                        float _3139 = _3119 + _3084;
                        float _3140 = _3120 + _3085;
                        float _3141 = _3121 + _3086;
                        float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                        float _3149 = dot(vec3(_563, _566, _569), vec3(_3119, _3120, _3121));
                        float _4506 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3152 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3153 = dot(vec3(_563, _566, _569), vec3(_3145 * _3139, _3145 * _3140, _3145 * _3141));
                        float _4517 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3156 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3160 = ((_3156 * _3156) * (_3138 + (-1.0))) + 1.0;
                        float _3161 = _3097 * _3137;
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3087) + _3162;
                        float _4528 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3166 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3167 = 1.0 - _3137;
                        float _3177 = (0.5 / (((_3166 * ((_3152 * _3167) + _3137)) + 9.9999999392252902907785028219223e-09) + (((_3166 * _3167) + _3137) * _3152))) * _3166;
                        float _4539 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3188 = (((_3138 * 3.1415927410125732421875) * (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) / ((_3160 * _3160) * ((_3104 * 2.1991131305694580078125) + 3.141590118408203125))) * _3093;
                        _2941 = (_3108 * _3056.x) + _3014;
                        _2942 = (_3108 * _3056.y) + _3015;
                        _2943 = (_3108 * _3056.z) + _3016;
                        _2938 = (_3188 * _3073.x) + _3011;
                        _2939 = (_3188 * _3073.y) + _3012;
                        _2940 = (_3188 * _3073.z) + _3013;
                        if (_3018 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _2942;
                            _3016 = _2943;
                            _3017 = _3018;
                        }
                    }
                    frontier_phi_71_pred = _2943;
                    frontier_phi_71_pred_1 = _2942;
                    frontier_phi_71_pred_2 = _2941;
                    frontier_phi_71_pred_3 = _2940;
                    frontier_phi_71_pred_4 = _2939;
                    frontier_phi_71_pred_5 = _2938;
                }
                _2724 = frontier_phi_71_pred;
                _2722 = frontier_phi_71_pred_1;
                _2720 = frontier_phi_71_pred_2;
                _2718 = frontier_phi_71_pred_3;
                _2716 = frontier_phi_71_pred_4;
                _2714 = frontier_phi_71_pred_5;
                uint _2873 = _2872 + 1u;
                if (_2873 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2866 = _2714;
                    _2867 = _2716;
                    _2868 = _2718;
                    _2869 = _2720;
                    _2870 = _2722;
                    _2871 = _2724;
                    _2872 = _2873;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
            _2723 = _2724;
        }
        uvec4 _2727 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2728 = _2727.z;
        uint _2730 = (_2728 >> 8u) & 15u;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        if (((4294967295u << _2730) & _2633) == 0u)
        {
            _2834 = _2713;
            _2836 = _2715;
            _2838 = _2717;
            _2840 = _2719;
            _2842 = _2721;
            _2844 = _2723;
        }
        else
        {
            float _2859 = inversesqrt(dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712)));
            float _2860 = _2859 * _1710;
            float _2861 = _2859 * _1711;
            float _2862 = _2859 * _1712;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2730 < ((_2728 >> 12u) & 15u))
            {
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2845;
                float _2994 = _2713;
                float _2995 = _2715;
                float _2996 = _2717;
                float _2997 = _2719;
                float _2998 = _2721;
                float _2999 = _2723;
                uint _3000 = _2730;
                uint _3009;
                bool _3010;
                for (;;)
                {
                    _3009 = texelFetch(g_lightClassification, int((((_2627 << 5u) + (_2613 << 9u)) + (_3000 << 2u)) >> 2u)).x;
                    _3010 = _3009 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3010)
                    {
                        frontier_phi_82_pred = _2999;
                        frontier_phi_82_pred_1 = _2998;
                        frontier_phi_82_pred_2 = _2997;
                        frontier_phi_82_pred_3 = _2996;
                        frontier_phi_82_pred_4 = _2995;
                        frontier_phi_82_pred_5 = _2994;
                    }
                    else
                    {
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3215 = _2994;
                        float _3216 = _2995;
                        float _3217 = _2996;
                        float _3218 = _2997;
                        float _3219 = _2998;
                        float _3220 = _2999;
                        uint _3221 = _3009;
                        uint _3222;
                        vec4 _3247;
                        float _3248;
                        vec4 _3263;
                        vec3 _3275;
                        vec4 _3291;
                        vec4 _3307;
                        float _3353;
                        bool _3354;
                        for (;;)
                        {
                            uint _3232 = ((_3000 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3221));
                            _3222 = (_3221 + 4294967295u) & _3221;
                            uint _3234 = _3232 * 40u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            _3248 = _3247.w;
                            uint _3250 = (_3232 * 40u) + 4u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3265 = (_3232 * 40u) + 8u;
                            _3275 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3265)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3265 + 2u)).x));
                            uint _3278 = (_3232 * 40u) + 16u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3294 = (_3232 * 40u) + 20u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            uint _3309 = (_3232 * 40u) + 24u;
                            vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3328 = (_3232 * 40u) + 28u;
                            vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            _3353 = fma(_1712, _3341.z, fma(_1711, _3341.y, _3341.x * _1710)) + _3341.w;
                            _3354 = !((fma(_1712, _3322.z, fma(_1711, _3322.y, _3322.x * _1710)) + _3322.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3354)
                            {
                                float _3381 = _3247.x - _1710;
                                float _3382 = _3247.y - _1711;
                                float _3383 = _3247.z - _1712;
                                float _3384 = dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383));
                                float _3387 = inversesqrt(_3384);
                                float _3388 = _3387 * _3381;
                                float _3389 = _3387 * _3382;
                                float _3390 = _3387 * _3383;
                                float _3394 = 1.0 - (_3384 / (_3248 * _3248));
                                float _4550 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3399 = sqrt(_3384) * _3263.w;
                                float _3401 = 1.39999997615814208984375 / (_3399 + 1.39999997615814208984375);
                                float _3402 = _3401 * _3401;
                                float _3405 = ((1.0 - _3402) * dot(vec3(_3388, _3389, _3390), vec3(_563, _566, _569))) + _3402;
                                float _3408 = _3399 * _3399;
                                float _3412 = (fma(_1712, _3291.z, fma(_1711, _3291.y, _3291.x * _1710)) + _3291.w) / _3353;
                                float _3413 = (fma(_1712, _3307.z, fma(_1711, _3307.y, _3307.x * _1710)) + _3307.w) / _3353;
                                float _3417 = 1.0 - dot(vec2(_3412, _3413), vec2(_3412, _3413));
                                float _4566 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3419 = _3418 * (((isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0))) * _3395) / ((_3408 * 0.699999988079071044921875) + 1.0));
                                float _3431 = exp2(log2(1.0 / ((_3408 * 3.5) + 5.0)) * 0.25);
                                float _3432 = 1.0 - _623;
                                float _3439 = sqrt(1.0 - ((1.0 - (_3432 * _3432)) * (1.0 - (_3431 * _3431))));
                                float _3440 = _3439 * _3439;
                                float _3441 = _3440 * _3440;
                                float _3442 = _3388 - _2860;
                                float _3443 = _3389 - _2861;
                                float _3444 = _3390 - _2862;
                                float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                                float _3452 = dot(vec3(_563, _566, _569), vec3((-0.0) - _2860, (-0.0) - _2861, (-0.0) - _2862));
                                float _4577 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3455 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3456 = dot(vec3(_563, _566, _569), vec3(_3448 * _3442, _3448 * _3443, _3448 * _3444));
                                float _4588 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3459 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3463 = ((_3459 * _3459) * (_3441 + (-1.0))) + 1.0;
                                float _3464 = _3401 * _3440;
                                float _3465 = _3464 * _3464;
                                float _3471 = ((1.0 - _3465) * dot(vec3(_563, _566, _569), vec3(_3388, _3389, _3390))) + _3465;
                                float _4599 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3473 = 1.0 - _3440;
                                float _3483 = (0.5 / (((_3472 * ((_3455 * _3473) + _3440)) + 9.9999999392252902907785028219223e-09) + (((_3472 * _3473) + _3440) * _3455))) * _3472;
                                float _4610 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3493 = (_3418 * _3395) * (((_3441 * 3.1415927410125732421875) * (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) / ((_3463 * _3463) * ((_3408 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3419 * _3263.z;
                                frontier_phi_88_pred_1 = _3419 * _3263.y;
                                frontier_phi_88_pred_2 = _3419 * _3263.x;
                                frontier_phi_88_pred_3 = _3493 * _3275.z;
                                frontier_phi_88_pred_4 = _3493 * _3275.y;
                                frontier_phi_88_pred_5 = _3493 * _3275.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3502 = frontier_phi_88_pred;
                            _3501 = frontier_phi_88_pred_1;
                            _3500 = frontier_phi_88_pred_2;
                            _3499 = frontier_phi_88_pred_3;
                            _3498 = frontier_phi_88_pred_4;
                            _3497 = frontier_phi_88_pred_5;
                            _3205 = _3500 + _3218;
                            _3206 = _3501 + _3219;
                            _3207 = _3502 + _3220;
                            _3202 = _3497 + _3215;
                            _3203 = _3498 + _3216;
                            _3204 = _3499 + _3217;
                            if (_3222 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3222;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3207;
                        frontier_phi_82_pred_1 = _3206;
                        frontier_phi_82_pred_2 = _3205;
                        frontier_phi_82_pred_3 = _3204;
                        frontier_phi_82_pred_4 = _3203;
                        frontier_phi_82_pred_5 = _3202;
                    }
                    _2845 = frontier_phi_82_pred;
                    _2843 = frontier_phi_82_pred_1;
                    _2841 = frontier_phi_82_pred_2;
                    _2839 = frontier_phi_82_pred_3;
                    _2837 = frontier_phi_82_pred_4;
                    _2835 = frontier_phi_82_pred_5;
                    uint _3001 = _3000 + 1u;
                    if (_3001 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2994 = _2835;
                        _2995 = _2837;
                        _2996 = _2839;
                        _2997 = _2841;
                        _2998 = _2843;
                        _2999 = _2845;
                        _3000 = _3001;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2841;
                frontier_phi_63_64_ladder_1 = _2845;
                frontier_phi_63_64_ladder_2 = _2843;
                frontier_phi_63_64_ladder_3 = _2839;
                frontier_phi_63_64_ladder_4 = _2837;
                frontier_phi_63_64_ladder_5 = _2835;
            }
            else
            {
                frontier_phi_63_64_ladder = _2719;
                frontier_phi_63_64_ladder_1 = _2723;
                frontier_phi_63_64_ladder_2 = _2721;
                frontier_phi_63_64_ladder_3 = _2717;
                frontier_phi_63_64_ladder_4 = _2715;
                frontier_phi_63_64_ladder_5 = _2713;
            }
            _2834 = frontier_phi_63_64_ladder_5;
            _2836 = frontier_phi_63_64_ladder_4;
            _2838 = frontier_phi_63_64_ladder_3;
            _2840 = frontier_phi_63_64_ladder;
            _2842 = frontier_phi_63_64_ladder_2;
            _2844 = frontier_phi_63_64_ladder_1;
        }
        float _2849 = isnan(1.0) ? _607 : (isnan(_607) ? 1.0 : min(_607, 1.0));
        _2646 = (_2849 * _2840) + _2177;
        _2648 = (_2849 * _2842) + _2179;
        _2650 = (_2849 * _2844) + _2181;
        _2652 = ((_2834 * 0.039999999105930328369140625) * _2849) + _2500;
        _2654 = ((_2836 * 0.039999999105930328369140625) * _2849) + _2502;
        _2656 = ((_2838 * 0.039999999105930328369140625) * _2849) + _2504;
    }
    else
    {
        _2646 = _2177;
        _2648 = _2179;
        _2650 = _2181;
        _2652 = _2500;
        _2654 = _2502;
        _2656 = _2504;
    }
    float _4626 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _4637 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _4648 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _2673 = ((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2646 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _607))) + ((_2652 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1444)) * cbPerFrame._m0[3u].x);
    float _2674 = ((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2648 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _607))) + ((_2654 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1444)) * cbPerFrame._m0[3u].x);
    float _2675 = ((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2650 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _607))) + ((_2656 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1444)) * cbPerFrame._m0[3u].x);
    uint _2676 = _228 + 6u;
    float _2684 = _542 / cbSceneParam._m0[86u].x;
    float _2685 = _543 / cbSceneParam._m0[86u].y;
    vec4 _2699 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, (log2((isnan(cbSceneParam._m0[77u].w) ? _463 : (isnan(_463) ? cbSceneParam._m0[77u].w : min(_463, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2701 = _2699.x;
    float _2702 = _2699.y;
    float _2703 = _2699.z;
    float _2704 = _2699.w;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_463 > cbSceneParam._m0[78u].w)
    {
        float _2738 = isnan(_463) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _463 : min(cbSceneParam._m0[80u].w, _463));
        float _2739 = _2738 / _463;
        float _2750 = _2739 * _514;
        float _2751 = _515 * _2739;
        float _2752 = (-0.0) - _2751;
        float _2754 = _2739 * _516;
        float _2756 = (cbSceneParam._m0[77u].w * _2752) / _2738;
        float _2757 = _2756 + cbSceneParam._m0[79u].w;
        float _2758 = cbSceneParam._m0[79u].w - _2751;
        float _2764 = sqrt(((_2750 * _2750) + (_2751 * _2751)) + (_2754 * _2754));
        float _2767 = (1.0 - (cbSceneParam._m0[77u].w / _2738)) * _2764;
        float _2772 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2774 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2951;
        if (abs((_2752 - _2756) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2951 = ((((_2757 > 0.0) ? exp2(_2772 * _2757) : (2.0 - exp2(_2774 * _2757))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2767;
        }
        else
        {
            float _2895 = 1.0 / cbSceneParam._m0[80u].x;
            float _2896 = isnan(_2758) ? _2757 : (isnan(_2757) ? _2758 : max(_2757, _2758));
            float _2897 = isnan(_2758) ? _2757 : (isnan(_2757) ? _2758 : min(_2757, _2758));
            float _2906 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : min(_2896, 0.0));
            float _2907 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : min(_2897, 0.0));
            _2951 = ((abs(_2764 / _2752) * cbSceneParam._m0[80u].y) * ((((_2906 - _2907) * 2.0) - ((exp2(_2772 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0)))) - exp2(_2772 * (isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0))))) * _2895)) - ((exp2(_2774 * _2906) - exp2(_2774 * _2907)) * _2895))) + (_2767 * cbSceneParam._m0[80u].z);
        }
        vec4 _2953 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2684, _2685, 1.0), 0.0);
        float _2962 = exp2((_2951 * (-1.44269502162933349609375)) * (1.0 - _2953.w));
        float _2963 = log2(_2962);
        float _2979 = log2(_2704);
        _2776 = (exp2(_2979 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2963 * cbSceneParam._m0[78u].x)) * _2953.x) / cbSceneParam._m0[78u].x)) + _2701;
        _2778 = (exp2(_2979 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2963 * cbSceneParam._m0[78u].y)) * _2953.y) / cbSceneParam._m0[78u].y)) + _2702;
        _2780 = (exp2(_2979 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2963 * cbSceneParam._m0[78u].z)) * _2953.z) / cbSceneParam._m0[78u].z)) + _2703;
        _2782 = _2962 * _2704;
    }
    else
    {
        _2776 = _2701;
        _2778 = _2702;
        _2780 = _2703;
        _2782 = _2704;
    }
    bool _2989;
    vec4 _2792;
    vec4 _2814;
    float _2816;
    float _2820;
    float _2821;
    float _2822;
    float _2823;
    bool _2833;
    for (;;)
    {
        _2792 = cbMatDynParam._m0[0u];
        float _2794 = roundEven(_2792.y);
        bool _2795 = _2794 == 3.0;
        float _2796 = log2(_2782);
        float _2803 = exp2(_2796 * cbSceneParam._m0[78u].x) * _2673;
        float _2804 = exp2(_2796 * cbSceneParam._m0[78u].y) * _2674;
        float _2805 = exp2(_2796 * cbSceneParam._m0[78u].z) * _2675;
        float _2812 = _530 + (-0.5);
        _2814 = cbMtdParam._m0[1u];
        _2816 = _2814.y * _2812;
        float _2819 = (_2794 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2820 = _2819 * (_2795 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2776)));
        _2821 = _2819 * (_2795 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2778)));
        _2822 = _2819 * (_2795 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2780)));
        _2823 = _2812 * 0.999000012874603271484375;
        _2833 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2833)
        {
            if ((cbInstanceData._m0[_228 + 7u].x + _2823) < 0.5)
            {
                _2989 = true;
                break;
            }
        }
        uint _2930 = _582 + uint(_2792.w);
        if ((cbInstanceData._m0[_2930].w < 1.0) && ((cbInstanceData._m0[_2930].w + _2823) < 0.5))
        {
            _2989 = true;
            break;
        }
        if ((_2816 + 1.0) < _2814.x)
        {
            _2989 = true;
            break;
        }
        _2989 = false;
        break;
    }
    float _3193;
    if (_2989)
    {
        discard_state = true;
        _3193 = 0.0;
    }
    else
    {
        _3193 = cbInstanceData._m0[_2676].w;
    }
    SV_Target.x = _2820;
    SV_Target.y = _2821;
    SV_Target.z = _2822;
    SV_Target.w = _3193;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2676].w;
    discard_exit();
}


