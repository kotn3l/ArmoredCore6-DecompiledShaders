#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1150;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _350 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _350) * cbMtdParam._m0[24u].x) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3456 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _395 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _252) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _253) + cbTextureTilingScale._m0[20u].w));
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _441 = _439.x;
    float _442 = _439.y;
    float _443 = _439.z;
    float _452 = ((_422.z - _443) * _368) + _443;
    float _455 = ((((_422.x - _441) * _368) + _441) * 2.0) + (-1.0);
    float _456 = ((((_422.y - _442) * _368) + _442) * 2.0) + (-1.0);
    float _457 = dot(vec2(_455, _456), vec2(_455, _456));
    float _3467 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _462 = sqrt(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _494 = (_455 + ((((_395.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_482.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _495 = (_456 + ((((_395.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_482.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _498 = fma(_462, _220, fma(_495, _227, _494 * _213));
    float _501 = fma(_462, _221, fma(_495, _228, _494 * _214));
    float _504 = fma(_462, _222, fma(_495, _229, _494 * _215));
    float _508 = inversesqrt(dot(vec3(_498, _501, _504), vec3(_498, _501, _504)));
    vec4 _537 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _539 = _537.x;
    float _540 = 1.0 - _539;
    float _546 = (cbMtdParam._m0[19u].x + dot(vec4(_508 * _498, _508 * _501, _508 * _504, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_539 - _540) * cbMtdParam._m0[24u].z) + _540) * cbMtdParam._m0[21u].z);
    float _3478 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _554 = (_547 * (cbMtdParam._m0[17u].x - _375)) + _375;
    float _555 = (_547 * (cbMtdParam._m0[17u].y - _376)) + _376;
    float _556 = (_547 * (cbMtdParam._m0[17u].z - _377)) + _377;
    float _561 = (((_395.z - _452) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _452;
    float _565 = ((_482.z - _561) * cbMtdParam._m0[19u].w) + _561;
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _585 = (_578.x * 2.0) + (-1.0);
    float _586 = (_578.y * 2.0) + (-1.0);
    float _587 = dot(vec2(_585, _586), vec2(_585, _586));
    float _3489 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _595 = ((_578.z - _565) * _547) + _565;
    float _605 = ((sqrt(1.0 - (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) - _462) * _547) + _462;
    float _608 = (((_585 - _494) * _547) + _494) + (cbMtdParam._m0[21u].x * _494);
    float _609 = (((_586 - _495) * _547) + _495) + (cbMtdParam._m0[21u].x * _495);
    float _614 = cbMtdParam._m0[22u].x + _482.w;
    float _617 = fma(_605, _220, fma(_609, _227, _608 * _213));
    float _620 = fma(_605, _221, fma(_609, _228, _608 * _214));
    float _623 = fma(_605, _222, fma(_609, _229, _608 * _215));
    float _627 = inversesqrt(dot(vec3(_617, _620, _623), vec3(_617, _620, _623)));
    float _628 = _627 * _617;
    float _629 = _627 * _620;
    float _630 = _627 * _623;
    float _3500 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _631 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3522 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3533 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3544 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _649 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _701 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _691);
    float _702 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _691);
    float _703 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _691);
    float _707 = inversesqrt(dot(vec3(_701, _702, _703), vec3(_701, _702, _703)));
    float _708 = _701 * _707;
    float _709 = _702 * _707;
    float _710 = _703 * _707;
    float _716 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _717 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _735 = fma(_630, cbSceneParam._m0[5u].z, fma(_629, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _628));
    float _738 = fma(_630, cbSceneParam._m0[6u].z, fma(_629, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _628));
    float _741 = fma(_630, cbSceneParam._m0[7u].z, fma(_629, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _628));
    uint _755 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _761 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) * cbInstanceData._m0[_755].x;
    float _762 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * cbInstanceData._m0[_755].y;
    float _763 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0)))) * cbInstanceData._m0[_755].z;
    float _3555 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _3577 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    vec4 _775 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _716, cbSceneParam._m0[86u].y * _717));
    float _779 = ((isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * TEXCOORD_5.w) * _775.x;
    float _780 = dot(vec3(_628, _629, _630), vec3(_708, _709, _710));
    float _783 = _780 * 2.0;
    float _787 = (_783 * _628) - _708;
    float _788 = (_783 * _629) - _709;
    float _789 = (_783 * _630) - _710;
    float _793 = abs(dot(vec3(_708, _709, _710), vec3(_628, _629, _630)));
    float _3588 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _795 = sqrt(_631);
    float _808 = exp2((_795 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_795 * 3.0));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1149;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _874 = fma(_848, cbModelParam._m0[26u].z, fma(_844, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _840));
        float _878 = fma(_848, cbModelParam._m0[27u].z, fma(_844, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _840));
        float _882 = fma(_848, cbModelParam._m0[28u].z, fma(_844, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _840));
        float _907 = _840 + _628;
        float _908 = _844 + _629;
        float _909 = _848 + _630;
        float _919 = fma(_909, cbModelParam._m0[26u].z, fma(_908, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907)) - _874;
        float _920 = fma(_909, cbModelParam._m0[27u].z, fma(_908, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907)) - _878;
        float _921 = fma(_909, cbModelParam._m0[28u].z, fma(_908, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907)) - _882;
        float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
        float _938 = ((_925 * _919) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_874 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_925 * _920) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_878 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_925 * _921) / cbModelParam._m0[34u].z) + ((((((_882 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        float _977 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_943.x + (-0.5));
        float _979 = _977 * (_943.y + (-0.5));
        float _980 = _977 * (_943.z + (-0.5));
        float _987 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_950.x + (-0.5));
        float _989 = _987 * (_950.y + (-0.5));
        float _990 = _987 * (_950.z + (-0.5));
        float _997 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_957.x + (-0.5));
        float _999 = _997 * (_957.y + (-0.5));
        float _1000 = _997 * (_957.z + (-0.5));
        float _1007 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_964.x + (-0.5));
        float _1009 = _1007 * (_964.y + (-0.5));
        float _1010 = _1007 * (_964.z + (-0.5));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = _978 * 0.5;
        float _1015 = _988 * 0.5;
        float _1016 = _998 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1031 = (dot(vec3(_628, _629, _630), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1041 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3636 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1043 + 1.0))) + _1048) * _1011;
        float _1058 = _979 * 0.5;
        float _1059 = _989 * 0.5;
        float _1060 = _999 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_628, _629, _630), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3669 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1085 + 1.0))) + _1090) * _1012;
        float _1100 = _980 * 0.5;
        float _1101 = _990 * 0.5;
        float _1102 = _1000 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_628, _629, _630), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3702 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1127 + 1.0))) + _1132) * _1013;
        _1149 = _980;
        _1151 = _979;
        _1152 = _978;
        _1153 = _990;
        _1154 = _989;
        _1155 = _988;
        _1156 = _1000;
        _1157 = _999;
        _1158 = _998;
        _1159 = _1013;
        _1160 = _1012;
        _1161 = _1011;
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
    }
    else
    {
        _1149 = _1150;
        _1151 = _1150;
        _1152 = _1150;
        _1153 = _1150;
        _1154 = _1150;
        _1155 = _1150;
        _1156 = _1150;
        _1157 = _1150;
        _1158 = _1150;
        _1159 = _1150;
        _1160 = _1150;
        _1161 = _1150;
        _1162 = 0.0;
        _1163 = 0.0;
        _1164 = 0.0;
    }
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1189 = fma(_848, cbModelParam._m0[30u].z, fma(_844, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _840));
        float _1193 = fma(_848, cbModelParam._m0[31u].z, fma(_844, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _840));
        float _1197 = fma(_848, cbModelParam._m0[32u].z, fma(_844, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _840));
        float _1220 = _840 + _628;
        float _1221 = _844 + _629;
        float _1222 = _848 + _630;
        float _1232 = fma(_1222, cbModelParam._m0[30u].z, fma(_1221, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1220)) - _1189;
        float _1233 = fma(_1222, cbModelParam._m0[31u].z, fma(_1221, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1220)) - _1193;
        float _1234 = fma(_1222, cbModelParam._m0[32u].z, fma(_1221, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1220)) - _1197;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1189 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1193 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[35u].z) + ((((((_1197 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1288 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1255.x + (-0.5));
        float _1290 = _1288 * (_1255.y + (-0.5));
        float _1291 = _1288 * (_1255.z + (-0.5));
        float _1298 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1262.x + (-0.5));
        float _1300 = _1298 * (_1262.y + (-0.5));
        float _1301 = _1298 * (_1262.z + (-0.5));
        float _1308 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1269.x + (-0.5));
        float _1310 = _1308 * (_1269.y + (-0.5));
        float _1311 = _1308 * (_1269.z + (-0.5));
        float _1318 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1276.x + (-0.5));
        float _1320 = _1318 * (_1276.y + (-0.5));
        float _1321 = _1318 * (_1276.z + (-0.5));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = _1289 * 0.5;
        float _1326 = _1299 * 0.5;
        float _1327 = _1309 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_628, _629, _630), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _3765 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1352 + 1.0))) + _1357) * _1322;
        float _1367 = _1290 * 0.5;
        float _1368 = _1300 * 0.5;
        float _1369 = _1310 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_628, _629, _630), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _3798 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1394 + 1.0))) + _1399) * _1323;
        float _1409 = _1291 * 0.5;
        float _1410 = _1301 * 0.5;
        float _1411 = _1311 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_628, _629, _630), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _3831 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1436 + 1.0))) + _1441) * _1324;
        _1458 = _1291;
        _1459 = _1290;
        _1460 = _1289;
        _1461 = _1301;
        _1462 = _1300;
        _1463 = _1299;
        _1464 = _1311;
        _1465 = _1310;
        _1466 = _1309;
        _1467 = _1324;
        _1468 = _1323;
        _1469 = _1322;
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
    }
    else
    {
        _1458 = _1150;
        _1459 = _1150;
        _1460 = _1150;
        _1461 = _1150;
        _1462 = _1150;
        _1463 = _1150;
        _1464 = _1150;
        _1465 = _1150;
        _1466 = _1150;
        _1467 = _1150;
        _1468 = _1150;
        _1469 = _1150;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1162)) + _1162;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1163)) + _1163;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1164)) + _1164;
    float _1505 = fma(_1484, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1482 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1484, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1482 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1484, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1482));
    float _1526 = _787 * 0.5;
    float _1527 = _788 * 0.5;
    float _1528 = _789 * 0.5;
    float _1529 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1532 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1535 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1569;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1542 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1149, _1153, _1156, _1159));
        float _1546 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1151, _1154, _1157, _1160));
        float _1550 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1152, _1155, _1158, _1161));
        float _1557 = dot(vec4(cbModelParam._m0[39u]), vec4(_1526, _1527, _1528, 1.0));
        _1569 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1569 = 1.0;
    }
    float _1580;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1571 = dot(vec4(cbModelParam._m0[40u]), vec4(_1526, _1527, _1528, 1.0));
        _1580 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1580 = 1.0;
    }
    float _1584 = (_1580 * cbModelParam._m0[1u].x) + (_1569 * (1.0 - cbModelParam._m0[1u].x));
    float _1594 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _631);
    float _1595 = isnan(_1594) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1594 : min(cbModelParam._m0[25u].z, _1594));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1643 = fma(_848, cbModelParam._m0[13u].z, fma(_844, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _840)) + cbModelParam._m0[13u].w;
        float _1647 = fma(_848, cbModelParam._m0[14u].z, fma(_844, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _840)) + cbModelParam._m0[14u].w;
        float _1651 = fma(_848, cbModelParam._m0[15u].z, fma(_844, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _840)) + cbModelParam._m0[15u].w;
        float _1654 = fma(_789, cbModelParam._m0[13u].z, fma(_788, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787));
        float _1657 = fma(_789, cbModelParam._m0[14u].z, fma(_788, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787));
        float _1660 = fma(_789, cbModelParam._m0[15u].z, fma(_788, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787));
        float _1688;
        if (_1654 > 0.0)
        {
            _1688 = abs((1.0 - _1643) / _1654);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1643 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1688 = frontier_phi_14_12_ladder;
        }
        float _1889;
        if (_1657 > 0.0)
        {
            _1889 = abs((1.0 - _1647) / _1657);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1647 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1889 = frontier_phi_23_19_ladder;
        }
        float _2132;
        if (_1660 > 0.0)
        {
            _2132 = abs((1.0 - _1651) / _1660);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1651 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2132 = frontier_phi_35_30_ladder;
        }
        float _2134 = isnan(_1889) ? _1688 : (isnan(_1688) ? _1889 : min(_1688, _1889));
        float _2135 = isnan(_2132) ? _2134 : (isnan(_2134) ? _2132 : min(_2134, _2132));
        float _2139 = (_2135 * _1654) + _1643;
        float _2140 = (_2135 * _1657) + _1647;
        float _2141 = (_2135 * _1660) + _1651;
        float _2142 = _2135 * 9.9999997473787516355514526367188e-05;
        float _2144 = (-1.0) - _2142;
        float _2146 = _2142 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2141 > _2146) || ((_2141 < _2144) || ((_2140 > _2146) || ((_2140 < _2144) || ((_2139 < _2144) || (_2139 > _2146))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2265 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2141, cbModelParam._m0[9u].z, fma(_2140, cbModelParam._m0[9u].y, _2139 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2141, cbModelParam._m0[10u].z, fma(_2140, cbModelParam._m0[10u].y, _2139 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2141, cbModelParam._m0[11u].z, fma(_2140, cbModelParam._m0[11u].y, _2139 * cbModelParam._m0[11u].x))), _1595);
            frontier_phi_13_35_ladder = _2265.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2265.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2265.x * cbModelParam._m0[1u].y;
        }
        _1676 = frontier_phi_13_35_ladder_2;
        _1678 = frontier_phi_13_35_ladder_1;
        _1680 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_787, _788, _789), _1595);
        _1676 = _1664.x * cbModelParam._m0[1u].y;
        _1678 = _1664.y * cbModelParam._m0[1u].y;
        _1680 = _1664.z * cbModelParam._m0[1u].y;
    }
    float _1684 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _631);
    float _1685 = isnan(_1684) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1684 : min(cbModelParam._m0[25u].w, _1684));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1739 = fma(_848, cbModelParam._m0[21u].z, fma(_844, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _840)) + cbModelParam._m0[21u].w;
        float _1743 = fma(_848, cbModelParam._m0[22u].z, fma(_844, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _840)) + cbModelParam._m0[22u].w;
        float _1747 = fma(_848, cbModelParam._m0[23u].z, fma(_844, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _840)) + cbModelParam._m0[23u].w;
        float _1750 = fma(_789, cbModelParam._m0[21u].z, fma(_788, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787));
        float _1753 = fma(_789, cbModelParam._m0[22u].z, fma(_788, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787));
        float _1756 = fma(_789, cbModelParam._m0[23u].z, fma(_788, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787));
        float _1894;
        if (_1750 > 0.0)
        {
            _1894 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1894 = frontier_phi_25_21_ladder;
        }
        float _2159;
        if (_1753 > 0.0)
        {
            _2159 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2159 = frontier_phi_37_32_ladder;
        }
        float _2364;
        if (_1756 > 0.0)
        {
            _2364 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2364 = frontier_phi_46_43_ladder;
        }
        float _2366 = isnan(_2159) ? _1894 : (isnan(_1894) ? _2159 : min(_1894, _2159));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1750) + _1739;
        float _2372 = (_2367 * _1753) + _1743;
        float _2373 = (_2367 * _1756) + _1747;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2374;
        float _2377 = _2374 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2373 > _2377) || ((_2373 < _2375) || ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 < _2375) || (_2371 > _2377))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2572 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2373, cbModelParam._m0[17u].z, fma(_2372, cbModelParam._m0[17u].y, _2371 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2373, cbModelParam._m0[18u].z, fma(_2372, cbModelParam._m0[18u].y, _2371 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2373, cbModelParam._m0[19u].z, fma(_2372, cbModelParam._m0[19u].y, _2371 * cbModelParam._m0[19u].x))), _1685);
            frontier_phi_22_46_ladder = _2572.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2572.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2572.x * cbModelParam._m0[1u].z;
        }
        _1775 = frontier_phi_22_46_ladder_2;
        _1777 = frontier_phi_22_46_ladder_1;
        _1779 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_787, _788, _789), _1685);
        _1775 = _1759.x * cbModelParam._m0[1u].z;
        _1777 = _1759.y * cbModelParam._m0[1u].z;
        _1779 = _1759.z * cbModelParam._m0[1u].z;
    }
    float _1791 = ((((1.0 - _808) * ((_795 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_808 * _795)) * _779;
    float _1792 = _1791 * ((cbModelParam._m0[1u].w * (_1775 - _1676)) + _1676);
    float _1793 = _1791 * ((cbModelParam._m0[1u].w * (_1777 - _1678)) + _1678);
    float _1794 = _1791 * ((cbModelParam._m0[1u].w * (_1779 - _1680)) + _1680);
    float _1797 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1793, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1793, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1793, cbSceneParam._m0[91u].y, _1792 * cbSceneParam._m0[91u].x));
    uvec4 _1813 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1815 = _1813.x * 14u;
    uint _1816 = _1815 + 13u;
    float _1823 = _779 + (-1.0);
    float _1828 = (cbLight._m0[_1816].x * _1823) + 1.0;
    float _1829 = (cbLight._m0[_1816].y * _1823) + 1.0;
    float _1830 = (cbLight._m0[_1816].z * _1823) + 1.0;
    float _1831 = (cbLight._m0[_1816].w * _1823) + 1.0;
    uint _1832 = _1815 + 5u;
    float _1838 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1842 = _1815 + 4u;
    float _1848 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
    uint _1852 = _1815 | 1u;
    float _1863 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_628, _629, _630));
    float _1866 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_628, _629, _630));
    float _3967 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _3978 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1871 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.3183098733425140380859375;
    float _1873 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.3183098733425140380859375;
    float _1880 = ((cbLight._m0[_1832].x * _1838) * _1873) + ((cbLight._m0[_1842].x * _1848) * _1871);
    float _1881 = ((_1838 * cbLight._m0[_1832].y) * _1873) + ((_1848 * cbLight._m0[_1842].y) * _1871);
    float _1882 = ((_1838 * cbLight._m0[_1832].z) * _1873) + ((_1848 * cbLight._m0[_1842].z) * _1871);
    uvec4 _1886 = floatBitsToUint(cbLight._m0[_1815 + 12u]);
    bool _1888 = _1886.x == 0u;
    float _1899;
    float _1901;
    float _1903;
    if (_1888)
    {
        _1899 = _1880;
        _1901 = _1881;
        _1903 = _1882;
    }
    else
    {
        uint _1907 = _1815 + 6u;
        float _1923 = (dot(vec3(cbLight._m0[_1815 + 2u].xyz), vec3(_628, _629, _630)) * 0.5) + 0.5;
        float _1924 = _1923 * _1923;
        float _3989 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1926 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _1899 = (((cbLight._m0[_1907].x * 0.3183098733425140380859375) * _1925) * _1926) + _1880;
        _1901 = (((cbLight._m0[_1907].y * 0.3183098733425140380859375) * _1925) * _1926) + _1881;
        _1903 = (((cbLight._m0[_1907].z * 0.3183098733425140380859375) * _1925) * _1926) + _1882;
    }
    bool _1906 = _1886.y == 0u;
    float _1944;
    float _1946;
    float _1948;
    if (_1906)
    {
        _1944 = _1899;
        _1946 = _1901;
        _1948 = _1903;
    }
    else
    {
        uint _2103 = _1815 + 7u;
        float _2119 = (dot(vec3(cbLight._m0[_1815 + 3u].xyz), vec3(_628, _629, _630)) * 0.5) + 0.5;
        float _2120 = _2119 * _2119;
        float _4005 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2121 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _2122 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _1944 = (((cbLight._m0[_2103].x * 0.3183098733425140380859375) * _2121) * _2122) + _1899;
        _1946 = (((cbLight._m0[_2103].y * 0.3183098733425140380859375) * _2121) * _2122) + _1901;
        _1948 = (((cbLight._m0[_2103].z * 0.3183098733425140380859375) * _2121) * _2122) + _1903;
    }
    uint _1951 = _1815 + 8u;
    float _1964 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _631) * 0.949999988079071044921875);
    float _1965 = _1964 * _1964;
    float _1966 = cbLight._m0[_1815].x + _708;
    float _1967 = cbLight._m0[_1815].y + _709;
    float _1968 = cbLight._m0[_1815].z + _710;
    float _1972 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
    float _1973 = _1972 * _1966;
    float _1974 = _1972 * _1967;
    float _1975 = _1972 * _1968;
    float _1976 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_1815].xyz));
    float _4021 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1979 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _4032 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _1980 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1981 = dot(vec3(_628, _629, _630), vec3(_1973, _1974, _1975));
    float _4043 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1984 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1985 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_1973, _1974, _1975));
    float _4054 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1989 = _1965 * _1965;
    float _1993 = ((_1984 * _1984) * (_1989 + (-1.0))) + 1.0;
    float _2004 = (exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2005 = 1.0 - _1965;
    float _2016 = (0.5 / (((_1980 * ((_1979 * _2005) + _1965)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2005) + _1965) * _1979))) * _1979;
    float _4065 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2018 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1989 / ((_1993 * _1993) * 3.141590118408203125));
    uint _2029 = _1815 + 9u;
    float _2040 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1852].w)) * _631) * 0.949999988079071044921875);
    float _2041 = _2040 * _2040;
    float _2042 = cbLight._m0[_1852].x + _708;
    float _2043 = cbLight._m0[_1852].y + _709;
    float _2044 = cbLight._m0[_1852].z + _710;
    float _2048 = inversesqrt(dot(vec3(_2042, _2043, _2044), vec3(_2042, _2043, _2044)));
    float _2049 = _2048 * _2042;
    float _2050 = _2048 * _2043;
    float _2051 = _2048 * _2044;
    float _2052 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_1852].xyz));
    float _4076 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _2056 = dot(vec3(_628, _629, _630), vec3(_2049, _2050, _2051));
    float _4087 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _2060 = dot(vec3(cbLight._m0[_1852].xyz), vec3(_2049, _2050, _2051));
    float _4098 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2064 = _2041 * _2041;
    float _2068 = ((_2059 * _2059) * (_2064 + (-1.0))) + 1.0;
    float _2077 = (exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2078 = 1.0 - _2041;
    float _2088 = (0.5 / (((_1980 * ((_2055 * _2078) + _2041)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2078) + _2041) * _2055))) * _2055;
    float _4109 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2090 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2064 / ((_2068 * _2068) * 3.141590118408203125));
    float _2100 = (((_2077 * cbLight._m0[_2029].x) * _2090) * _1838) + (((_2004 * cbLight._m0[_1951].x) * _2018) * _1848);
    float _2101 = (((_2077 * cbLight._m0[_2029].y) * _2090) * _1838) + (((_2004 * cbLight._m0[_1951].y) * _2018) * _1848);
    float _2102 = (((_2077 * cbLight._m0[_2029].z) * _2090) * _1838) + (((_2004 * cbLight._m0[_1951].z) * _2018) * _1848);
    float _2164;
    float _2166;
    float _2168;
    if (_1888)
    {
        _2164 = _2100;
        _2166 = _2101;
        _2168 = _2102;
    }
    else
    {
        uint _2170 = _1815 + 2u;
        uint _2174 = _1815 + 10u;
        float _2188 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2170].w)) * _631) * 0.949999988079071044921875);
        float _2189 = _2188 * _2188;
        float _2190 = cbLight._m0[_2170].x + _708;
        float _2191 = cbLight._m0[_2170].y + _709;
        float _2192 = cbLight._m0[_2170].z + _710;
        float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
        float _2197 = _2196 * _2190;
        float _2198 = _2196 * _2191;
        float _2199 = _2196 * _2192;
        float _2200 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2170].xyz));
        float _4120 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2203 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2204 = dot(vec3(_628, _629, _630), vec3(_2197, _2198, _2199));
        float _4131 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2207 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2208 = dot(vec3(cbLight._m0[_2170].xyz), vec3(_2197, _2198, _2199));
        float _4142 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2212 = _2189 * _2189;
        float _2216 = ((_2207 * _2207) * (_2212 + (-1.0))) + 1.0;
        float _2225 = (exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2226 = 1.0 - _2189;
        float _2236 = (0.5 / (((_1980 * ((_2203 * _2226) + _2189)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2226) + _2189) * _2203))) * _2203;
        float _4153 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
        float _2238 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2212 / ((_2216 * _2216) * 3.141590118408203125));
        float _2239 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
        _2164 = (((_2225 * cbLight._m0[_2174].x) * _2238) * _2239) + _2100;
        _2166 = (((_2225 * cbLight._m0[_2174].y) * _2238) * _2239) + _2101;
        _2168 = (((_2225 * cbLight._m0[_2174].z) * _2238) * _2239) + _2102;
    }
    float _2274;
    float _2276;
    float _2278;
    if (_1906)
    {
        _2274 = _2164;
        _2276 = _2166;
        _2278 = _2168;
    }
    else
    {
        uint _2285 = _1815 + 3u;
        uint _2289 = _1815 + 11u;
        float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _631) * 0.949999988079071044921875);
        float _2304 = _2303 * _2303;
        float _2305 = cbLight._m0[_2285].x + _708;
        float _2306 = cbLight._m0[_2285].y + _709;
        float _2307 = cbLight._m0[_2285].z + _710;
        float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
        float _2312 = _2311 * _2305;
        float _2313 = _2311 * _2306;
        float _2314 = _2311 * _2307;
        float _2315 = dot(vec3(_628, _629, _630), vec3(cbLight._m0[_2285].xyz));
        float _4169 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2318 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2319 = dot(vec3(_628, _629, _630), vec3(_2312, _2313, _2314));
        float _4180 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _2323 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2312, _2313, _2314));
        float _4191 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2327 = _2304 * _2304;
        float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
        float _2340 = (exp2(log2(1.0 - (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2341 = 1.0 - _2304;
        float _2351 = (0.5 / (((_1980 * ((_2318 * _2341) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_1980 * _2341) + _2304) * _2318))) * _2318;
        float _4202 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2353 = (isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
        float _2354 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
        _2274 = (((_2340 * cbLight._m0[_2289].x) * _2353) * _2354) + _2164;
        _2276 = (((_2340 * cbLight._m0[_2289].y) * _2353) * _2354) + _2166;
        _2278 = (((_2340 * cbLight._m0[_2289].z) * _2353) * _2354) + _2168;
    }
    float _2489;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    float _2499;
    if (_1813.y == 0u)
    {
        float _2429 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2430 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2429;
        float _2431 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2429;
        float _2432 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2429;
        uvec4 _2444 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2445 = _2444.x;
        uint _2456 = uint((float(_2444.y) * floor(float(uint(cbSceneParam._m0[85u].y * _717) / _2445))) + floor(float(uint(cbSceneParam._m0[85u].x * _716) / _2445)));
        float _2466 = (log2(_2432 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2467 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        uint _2470 = uint(isnan(14.0) ? _2467 : (isnan(_2467) ? 14.0 : min(_2467, 14.0)));
        uvec4 _2475 = texelFetch(g_lightClusterGridBuffer, int(((_2470 << 2u) + (_2456 << 6u)) >> 2u));
        uint _2476 = _2475.x;
        uint _2477 = _2444.z;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        if (((((1u << ((_2477 >> 4u) & 15u)) + 4294967295u) & _2476) == 0u) || ((_2477 & 240u) == 0u))
        {
            _2577 = 0.0;
            _2579 = 0.0;
            _2581 = 0.0;
            _2583 = 0.0;
            _2585 = 0.0;
            _2587 = 0.0;
        }
        else
        {
            float _2578;
            float _2580;
            float _2582;
            float _2584;
            float _2586;
            float _2588;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            uint _2728 = 0u;
            uint _2737;
            bool _2738;
            for (;;)
            {
                _2737 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2728 << 2u)) >> 2u)).x;
                _2738 = _2737 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2738)
                {
                    frontier_phi_61_pred = _2722;
                    frontier_phi_61_pred_1 = _2727;
                    frontier_phi_61_pred_2 = _2726;
                    frontier_phi_61_pred_3 = _2725;
                    frontier_phi_61_pred_4 = _2724;
                    frontier_phi_61_pred_5 = _2723;
                }
                else
                {
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    uint _2852;
                    _2846 = _2722;
                    _2847 = _2723;
                    _2848 = _2724;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2737;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    for (;;)
                    {
                        uint _2856 = uint(findLSB(_2852)) + (_2728 << 5u);
                        uint _2853 = (_2852 + 4294967295u) & _2852;
                        uint _2858 = _2856 * 48u;
                        vec4 _2872 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2858)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 3u)).x));
                        uint _2878 = (_2856 * 48u) + 4u;
                        vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 3u)).x));
                        uint _2897 = (_2856 * 48u) + 8u;
                        vec3 _2908 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x));
                        float _2912 = _2872.x - _2430;
                        float _2913 = _2872.y - _2431;
                        float _2914 = _2872.z - _2432;
                        float _2915 = dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914));
                        float _2918 = inversesqrt(_2915);
                        float _2919 = _2918 * _2912;
                        float _2920 = _2918 * _2913;
                        float _2921 = _2918 * _2914;
                        float _2922 = dot(vec3(_735, _738, _741), vec3(_2919, _2920, _2921));
                        float _2927 = 1.0 - (_2915 * _2872.w);
                        float _4228 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2928 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                        float _2929 = sqrt(_2915) * _2891.w;
                        float _2932 = 1.39999997615814208984375 / (_2929 + 1.39999997615814208984375);
                        float _2933 = _2932 * _2932;
                        float _2936 = ((1.0 - _2933) * _2922) + _2933;
                        float _2939 = _2929 * _2929;
                        float _2943 = ((isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0))) * _2928) / ((_2939 * 0.699999988079071044921875) + 1.0);
                        float _2947 = (-0.0) - _2430;
                        float _2948 = (-0.0) - _2431;
                        float _2949 = (-0.0) - _2432;
                        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
                        float _2954 = _2953 * _2947;
                        float _2955 = _2953 * _2948;
                        float _2956 = _2953 * _2949;
                        float _2964 = exp2(log2(1.0 / ((_2939 * 3.5) + 5.0)) * 0.25);
                        float _2965 = 1.0 - _795;
                        float _2972 = sqrt(1.0 - ((1.0 - (_2965 * _2965)) * (1.0 - (_2964 * _2964))));
                        float _2973 = _2972 * _2972;
                        float _2974 = _2973 * _2973;
                        float _2975 = _2954 + _2919;
                        float _2976 = _2955 + _2920;
                        float _2977 = _2956 + _2921;
                        float _2981 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
                        float _2985 = dot(vec3(_735, _738, _741), vec3(_2954, _2955, _2956));
                        float _4244 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2988 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2989 = dot(vec3(_735, _738, _741), vec3(_2981 * _2975, _2981 * _2976, _2981 * _2977));
                        float _4255 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2992 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2996 = ((_2992 * _2992) * (_2974 + (-1.0))) + 1.0;
                        float _2997 = _2932 * _2973;
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2922) + _2998;
                        float _4266 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3002 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                        float _3003 = 1.0 - _2973;
                        float _3013 = (0.5 / (((_3002 * ((_2988 * _3003) + _2973)) + 9.9999999392252902907785028219223e-09) + (((_3002 * _3003) + _2973) * _2988))) * _3002;
                        float _4277 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                        float _3024 = (((_2974 * 3.1415927410125732421875) * (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) / ((_2996 * _2996) * ((_2939 * 2.1991131305694580078125) + 3.141590118408203125))) * _2928;
                        _2781 = (_2943 * _2891.x) + _2849;
                        _2782 = (_2943 * _2891.y) + _2850;
                        _2783 = (_2943 * _2891.z) + _2851;
                        _2778 = (_3024 * _2908.x) + _2846;
                        _2779 = (_3024 * _2908.y) + _2847;
                        _2780 = (_3024 * _2908.z) + _2848;
                        if (_2853 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2846 = _2778;
                            _2847 = _2779;
                            _2848 = _2780;
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2853;
                        }
                    }
                    frontier_phi_61_pred = _2778;
                    frontier_phi_61_pred_1 = _2783;
                    frontier_phi_61_pred_2 = _2782;
                    frontier_phi_61_pred_3 = _2781;
                    frontier_phi_61_pred_4 = _2780;
                    frontier_phi_61_pred_5 = _2779;
                }
                _2578 = frontier_phi_61_pred;
                _2588 = frontier_phi_61_pred_1;
                _2586 = frontier_phi_61_pred_2;
                _2584 = frontier_phi_61_pred_3;
                _2582 = frontier_phi_61_pred_4;
                _2580 = frontier_phi_61_pred_5;
                uint _2729 = _2728 + 1u;
                if (_2729 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2722 = _2578;
                    _2723 = _2580;
                    _2724 = _2582;
                    _2725 = _2584;
                    _2726 = _2586;
                    _2727 = _2588;
                    _2728 = _2729;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2577 = _2578;
            _2579 = _2580;
            _2581 = _2582;
            _2583 = _2584;
            _2585 = _2586;
            _2587 = _2588;
        }
        uvec4 _2591 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2592 = _2591.z;
        uint _2594 = (_2592 >> 8u) & 15u;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        if (((4294967295u << _2594) & _2476) == 0u)
        {
            _2690 = _2577;
            _2692 = _2579;
            _2694 = _2581;
            _2696 = _2583;
            _2698 = _2585;
            _2700 = _2587;
        }
        else
        {
            float _2715 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
            float _2716 = _2715 * _2430;
            float _2717 = _2715 * _2431;
            float _2718 = _2715 * _2432;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2594 < ((_2592 >> 12u) & 15u))
            {
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2829 = _2577;
                float _2830 = _2579;
                float _2831 = _2581;
                float _2832 = _2583;
                float _2833 = _2585;
                float _2834 = _2587;
                uint _2835 = _2594;
                uint _2844;
                bool _2845;
                for (;;)
                {
                    _2844 = texelFetch(g_lightClassification, int((((_2470 << 5u) + (_2456 << 9u)) + (_2835 << 2u)) >> 2u)).x;
                    _2845 = _2844 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2845)
                    {
                        frontier_phi_67_pred = _2832;
                        frontier_phi_67_pred_1 = _2833;
                        frontier_phi_67_pred_2 = _2834;
                        frontier_phi_67_pred_3 = _2831;
                        frontier_phi_67_pred_4 = _2830;
                        frontier_phi_67_pred_5 = _2829;
                    }
                    else
                    {
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3042 = _2829;
                        float _3043 = _2830;
                        float _3044 = _2831;
                        float _3045 = _2832;
                        float _3046 = _2833;
                        float _3047 = _2834;
                        uint _3048 = _2844;
                        uint _3049;
                        vec4 _3074;
                        float _3075;
                        vec4 _3090;
                        vec3 _3102;
                        vec4 _3117;
                        vec4 _3132;
                        float _3178;
                        bool _3179;
                        for (;;)
                        {
                            uint _3059 = ((_2835 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3048));
                            _3049 = (_3048 + 4294967295u) & _3048;
                            uint _3061 = _3059 * 40u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            _3075 = _3074.w;
                            uint _3077 = (_3059 * 40u) + 4u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3092 = (_3059 * 40u) + 8u;
                            _3102 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x));
                            uint _3104 = (_3059 * 40u) + 16u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3119 = (_3059 * 40u) + 20u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            uint _3134 = (_3059 * 40u) + 24u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3153 = (_3059 * 40u) + 28u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            _3178 = fma(_2432, _3166.z, fma(_2431, _3166.y, _3166.x * _2430)) + _3166.w;
                            _3179 = !((fma(_2432, _3147.z, fma(_2431, _3147.y, _3147.x * _2430)) + _3147.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3179)
                            {
                                float _3206 = _3074.x - _2430;
                                float _3207 = _3074.y - _2431;
                                float _3208 = _3074.z - _2432;
                                float _3209 = dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208));
                                float _3212 = inversesqrt(_3209);
                                float _3213 = _3212 * _3206;
                                float _3214 = _3212 * _3207;
                                float _3215 = _3212 * _3208;
                                float _3219 = 1.0 - (_3209 / (_3075 * _3075));
                                float _4288 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3220 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3224 = sqrt(_3209) * _3090.w;
                                float _3226 = 1.39999997615814208984375 / (_3224 + 1.39999997615814208984375);
                                float _3227 = _3226 * _3226;
                                float _3230 = ((1.0 - _3227) * dot(vec3(_3213, _3214, _3215), vec3(_735, _738, _741))) + _3227;
                                float _3233 = _3224 * _3224;
                                float _3237 = (fma(_2432, _3117.z, fma(_2431, _3117.y, _3117.x * _2430)) + _3117.w) / _3178;
                                float _3238 = (fma(_2432, _3132.z, fma(_2431, _3132.y, _3132.x * _2430)) + _3132.w) / _3178;
                                float _3242 = 1.0 - dot(vec2(_3237, _3238), vec2(_3237, _3238));
                                float _4304 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3243 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3244 = _3243 * (((isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))) * _3220) / ((_3233 * 0.699999988079071044921875) + 1.0));
                                float _3256 = exp2(log2(1.0 / ((_3233 * 3.5) + 5.0)) * 0.25);
                                float _3257 = 1.0 - _795;
                                float _3264 = sqrt(1.0 - ((1.0 - (_3257 * _3257)) * (1.0 - (_3256 * _3256))));
                                float _3265 = _3264 * _3264;
                                float _3266 = _3265 * _3265;
                                float _3267 = _3213 - _2716;
                                float _3268 = _3214 - _2717;
                                float _3269 = _3215 - _2718;
                                float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                                float _3277 = dot(vec3(_735, _738, _741), vec3((-0.0) - _2716, (-0.0) - _2717, (-0.0) - _2718));
                                float _4315 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3280 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3281 = dot(vec3(_735, _738, _741), vec3(_3273 * _3267, _3273 * _3268, _3273 * _3269));
                                float _4326 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3284 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3288 = ((_3284 * _3284) * (_3266 + (-1.0))) + 1.0;
                                float _3289 = _3226 * _3265;
                                float _3290 = _3289 * _3289;
                                float _3296 = ((1.0 - _3290) * dot(vec3(_735, _738, _741), vec3(_3213, _3214, _3215))) + _3290;
                                float _4337 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3297 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3298 = 1.0 - _3265;
                                float _3308 = (0.5 / (((_3297 * ((_3280 * _3298) + _3265)) + 9.9999999392252902907785028219223e-09) + (((_3297 * _3298) + _3265) * _3280))) * _3297;
                                float _4348 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3318 = (_3243 * _3220) * (((_3266 * 3.1415927410125732421875) * (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) / ((_3288 * _3288) * ((_3233 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3318 * _3102.x;
                                frontier_phi_73_pred_1 = _3318 * _3102.y;
                                frontier_phi_73_pred_2 = _3244 * _3090.z;
                                frontier_phi_73_pred_3 = _3244 * _3090.y;
                                frontier_phi_73_pred_4 = _3244 * _3090.x;
                                frontier_phi_73_pred_5 = _3318 * _3102.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3322 = frontier_phi_73_pred;
                            _3323 = frontier_phi_73_pred_1;
                            _3327 = frontier_phi_73_pred_2;
                            _3326 = frontier_phi_73_pred_3;
                            _3325 = frontier_phi_73_pred_4;
                            _3324 = frontier_phi_73_pred_5;
                            _3032 = _3325 + _3045;
                            _3033 = _3326 + _3046;
                            _3034 = _3327 + _3047;
                            _3029 = _3322 + _3042;
                            _3030 = _3323 + _3043;
                            _3031 = _3324 + _3044;
                            if (_3049 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3049;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3032;
                        frontier_phi_67_pred_1 = _3033;
                        frontier_phi_67_pred_2 = _3034;
                        frontier_phi_67_pred_3 = _3031;
                        frontier_phi_67_pred_4 = _3030;
                        frontier_phi_67_pred_5 = _3029;
                    }
                    _2697 = frontier_phi_67_pred;
                    _2699 = frontier_phi_67_pred_1;
                    _2701 = frontier_phi_67_pred_2;
                    _2695 = frontier_phi_67_pred_3;
                    _2693 = frontier_phi_67_pred_4;
                    _2691 = frontier_phi_67_pred_5;
                    uint _2836 = _2835 + 1u;
                    if (_2836 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2829 = _2691;
                        _2830 = _2693;
                        _2831 = _2695;
                        _2832 = _2697;
                        _2833 = _2699;
                        _2834 = _2701;
                        _2835 = _2836;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2699;
                frontier_phi_55_56_ladder_1 = _2701;
                frontier_phi_55_56_ladder_2 = _2697;
                frontier_phi_55_56_ladder_3 = _2695;
                frontier_phi_55_56_ladder_4 = _2693;
                frontier_phi_55_56_ladder_5 = _2691;
            }
            else
            {
                frontier_phi_55_56_ladder = _2585;
                frontier_phi_55_56_ladder_1 = _2587;
                frontier_phi_55_56_ladder_2 = _2583;
                frontier_phi_55_56_ladder_3 = _2581;
                frontier_phi_55_56_ladder_4 = _2579;
                frontier_phi_55_56_ladder_5 = _2577;
            }
            _2690 = frontier_phi_55_56_ladder_5;
            _2692 = frontier_phi_55_56_ladder_4;
            _2694 = frontier_phi_55_56_ladder_3;
            _2696 = frontier_phi_55_56_ladder_2;
            _2698 = frontier_phi_55_56_ladder;
            _2700 = frontier_phi_55_56_ladder_1;
        }
        float _2705 = isnan(1.0) ? _779 : (isnan(_779) ? 1.0 : min(_779, 1.0));
        _2489 = (_2705 * _2696) + _1944;
        _2491 = (_2705 * _2698) + _1946;
        _2493 = (_2705 * _2700) + _1948;
        _2495 = ((_2690 * 0.039999999105930328369140625) * _2705) + _2274;
        _2497 = ((_2692 * 0.039999999105930328369140625) * _2705) + _2276;
        _2499 = ((_2694 * 0.039999999105930328369140625) * _2705) + _2278;
    }
    else
    {
        _2489 = _1944;
        _2491 = _1946;
        _2493 = _1948;
        _2495 = _2274;
        _2497 = _2276;
        _2499 = _2278;
    }
    float _4364 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4375 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4386 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    uint _2519 = _232 + 6u;
    float _2527 = _716 / cbSceneParam._m0[86u].x;
    float _2528 = _717 / cbSceneParam._m0[86u].y;
    vec4 _2542 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2527, _2528, (log2((isnan(cbSceneParam._m0[77u].w) ? _649 : (isnan(_649) ? cbSceneParam._m0[77u].w : min(_649, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2544 = _2542.x;
    float _2545 = _2542.y;
    float _2546 = _2542.z;
    float _2547 = _2542.w;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    if (_649 > cbSceneParam._m0[78u].w)
    {
        float _2602 = isnan(_649) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _649 : min(cbSceneParam._m0[80u].w, _649));
        float _2603 = _2602 / _649;
        float _2614 = _2603 * _701;
        float _2615 = _702 * _2603;
        float _2616 = (-0.0) - _2615;
        float _2618 = _2603 * _703;
        float _2620 = (cbSceneParam._m0[77u].w * _2616) / _2602;
        float _2621 = _2620 + cbSceneParam._m0[79u].w;
        float _2622 = cbSceneParam._m0[79u].w - _2615;
        float _2628 = sqrt(((_2614 * _2614) + (_2615 * _2615)) + (_2618 * _2618));
        float _2631 = (1.0 - (cbSceneParam._m0[77u].w / _2602)) * _2628;
        float _2636 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2638 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2791;
        if (abs((_2616 - _2620) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2791 = ((((_2621 > 0.0) ? exp2(_2636 * _2621) : (2.0 - exp2(_2638 * _2621))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2631;
        }
        else
        {
            float _2751 = 1.0 / cbSceneParam._m0[80u].x;
            float _2752 = isnan(_2622) ? _2621 : (isnan(_2621) ? _2622 : max(_2621, _2622));
            float _2753 = isnan(_2622) ? _2621 : (isnan(_2621) ? _2622 : min(_2621, _2622));
            float _2762 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : min(_2752, 0.0));
            float _2763 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : min(_2753, 0.0));
            _2791 = ((abs(_2628 / _2616) * cbSceneParam._m0[80u].y) * ((((_2762 - _2763) * 2.0) - ((exp2(_2636 * (isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0)))) - exp2(_2636 * (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))))) * _2751)) - ((exp2(_2638 * _2762) - exp2(_2638 * _2763)) * _2751))) + (_2631 * cbSceneParam._m0[80u].z);
        }
        vec4 _2793 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2527, _2528, 1.0), 0.0);
        float _2802 = exp2((_2791 * (-1.44269502162933349609375)) * (1.0 - _2793.w));
        float _2803 = log2(_2802);
        float _2819 = log2(_2547);
        _2640 = (exp2(_2819 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2803 * cbSceneParam._m0[78u].x)) * _2793.x) / cbSceneParam._m0[78u].x)) + _2544;
        _2642 = (exp2(_2819 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2803 * cbSceneParam._m0[78u].y)) * _2793.y) / cbSceneParam._m0[78u].y)) + _2545;
        _2644 = (exp2(_2819 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2803 * cbSceneParam._m0[78u].z)) * _2793.z) / cbSceneParam._m0[78u].z)) + _2546;
        _2646 = _2802 * _2547;
    }
    else
    {
        _2640 = _2544;
        _2642 = _2545;
        _2644 = _2546;
        _2646 = _2547;
    }
    float _2658 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2659 = _2658 == 3.0;
    float _2660 = log2(_2646);
    float _2667 = exp2(_2660 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2489 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _779))) + ((_2495 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1584)) * cbPerFrame._m0[3u].x));
    float _2668 = exp2(_2660 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2491 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _779))) + ((_2497 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1584)) * cbPerFrame._m0[3u].x));
    float _2669 = exp2(_2660 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2493 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _779))) + ((_2499 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1584)) * cbPerFrame._m0[3u].x));
    float _2678 = (_2658 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2678 * (_2659 ? _2667 : (_2667 + (cbSceneParam._m0[72u].w * _2640)));
    SV_Target.y = _2678 * (_2659 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2642)));
    SV_Target.z = _2678 * (_2659 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2644)));
    SV_Target.w = cbInstanceData._m0[_2519].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2519].w;
}


