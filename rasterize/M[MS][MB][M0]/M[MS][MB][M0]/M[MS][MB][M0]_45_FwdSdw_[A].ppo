#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1030;
float _3675;
float _3676;
float _3677;
float _3678;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _246) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _247) + cbTextureTilingScale._m0[14u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = _313.z;
    float _322 = (_313.x * 2.0) + (-1.0);
    float _324 = (_313.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3687 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))));
    float _334 = fma(_331, _214, fma(_324, _221, _322 * _207));
    float _337 = fma(_331, _215, fma(_324, _222, _322 * _208));
    float _340 = fma(_331, _216, fma(_324, _223, _322 * _209));
    float _344 = inversesqrt(dot(vec3(_334, _337, _340), vec3(_334, _337, _340)));
    vec4 _380 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _382 = _380.x;
    float _383 = 1.0 - _382;
    float _392 = (cbMtdParam._m0[19u].x + dot(vec4(_344 * _334, _344 * _337, _344 * _340, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_382 - _383) * cbMtdParam._m0[24u].z) + _383) * cbMtdParam._m0[21u].z);
    float _3698 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _400 = (_393 * ((_293.x * cbMtdParam._m0[18u].x) - _272)) + _272;
    float _401 = (_393 * ((_293.y * cbMtdParam._m0[18u].y) - _273)) + _273;
    float _402 = (_393 * ((_293.z * cbMtdParam._m0[18u].z) - _274)) + _274;
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _422 = (_415.x * 2.0) + (-1.0);
    float _423 = (_415.y * 2.0) + (-1.0);
    float _424 = dot(vec2(_422, _423), vec2(_422, _423));
    float _3709 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _432 = ((_415.z - _317) * _393) + _317;
    float _442 = ((sqrt(1.0 - (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) - _331) * _393) + _331;
    float _445 = (((_422 - _322) * _393) + _322) + (cbMtdParam._m0[21u].x * _322);
    float _446 = (((_423 - _324) * _393) + _324) + (cbMtdParam._m0[21u].x * _324);
    float _451 = cbMtdParam._m0[22u].x + _313.w;
    float _454 = fma(_442, _214, fma(_446, _221, _445 * _207));
    float _457 = fma(_442, _215, fma(_446, _222, _445 * _208));
    float _460 = fma(_442, _216, fma(_446, _223, _445 * _209));
    float _464 = inversesqrt(dot(vec3(_454, _457, _460), vec3(_454, _457, _460)));
    float _465 = _464 * _454;
    float _466 = _464 * _457;
    float _467 = _464 * _460;
    float _3720 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _468 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3742 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _3753 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3764 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _486 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _537 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _527);
    float _538 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _527);
    float _539 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _527);
    float _543 = inversesqrt(dot(vec3(_537, _538, _539), vec3(_537, _538, _539)));
    float _544 = _537 * _543;
    float _545 = _538 * _543;
    float _546 = _539 * _543;
    vec4 _551 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _553 = _551.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _710 = sqrt(((_537 * _537) + (_538 * _538)) + (_539 * _539));
        float _716 = (cbMatDynParam._m0[5u].x * _710) + cbMatDynParam._m0[5u].y;
        float _3775 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _717 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _721 = (cbMatDynParam._m0[5u].z * _710) + cbMatDynParam._m0[5u].w;
        float _3786 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) - _717)) + _717) < ((_553 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _565 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _566 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _586 = fma(_467, cbSceneParam._m0[5u].z, fma(_466, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _465));
    float _589 = fma(_467, cbSceneParam._m0[6u].z, fma(_466, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _465));
    float _592 = fma(_467, cbSceneParam._m0[7u].z, fma(_466, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _465));
    uint _605 = _226 + 9u;
    uint _606 = _605 + uint(cbMatDynParam._m0[0u].w);
    float _612 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_606].x;
    float _613 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_606].y;
    float _614 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * cbInstanceData._m0[_606].z;
    float _3797 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    vec4 _626 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _565, cbSceneParam._m0[86u].y * _566));
    float _630 = ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * TEXCOORD_5.w) * _626.x;
    float _631 = dot(vec3(_465, _466, _467), vec3(_544, _545, _546));
    float _634 = _631 * 2.0;
    float _638 = (_634 * _465) - _544;
    float _639 = (_634 * _466) - _545;
    float _640 = (_634 * _467) - _546;
    float _644 = abs(dot(vec3(_544, _545, _546), vec3(_465, _466, _467)));
    float _3830 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _646 = sqrt(_468);
    float _659 = exp2((_646 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_646 * 3.0));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1029;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _754 = fma(_699, cbModelParam._m0[26u].z, fma(_695, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691));
        float _758 = fma(_699, cbModelParam._m0[27u].z, fma(_695, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691));
        float _762 = fma(_699, cbModelParam._m0[28u].z, fma(_695, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691));
        float _787 = _691 + _465;
        float _788 = _695 + _466;
        float _789 = _699 + _467;
        float _799 = fma(_789, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _787)) - _754;
        float _800 = fma(_789, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _787)) - _758;
        float _801 = fma(_789, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _787)) - _762;
        float _805 = inversesqrt(dot(vec3(_799, _800, _801), vec3(_799, _800, _801)));
        float _818 = ((_805 * _799) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_754 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _819 = ((_805 * _800) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_758 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _820 = ((_805 * _801) / cbModelParam._m0[34u].z) + ((((((_762 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        float _857 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_823.x + (-0.5));
        float _859 = _857 * (_823.y + (-0.5));
        float _860 = _857 * (_823.z + (-0.5));
        float _867 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_830.x + (-0.5));
        float _869 = _867 * (_830.y + (-0.5));
        float _870 = _867 * (_830.z + (-0.5));
        float _877 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_837.x + (-0.5));
        float _879 = _877 * (_837.y + (-0.5));
        float _880 = _877 * (_837.z + (-0.5));
        float _887 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_844.x + (-0.5));
        float _889 = _887 * (_844.y + (-0.5));
        float _890 = _887 * (_844.z + (-0.5));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = _858 * 0.5;
        float _895 = _868 * 0.5;
        float _896 = _878 * 0.5;
        float _897 = dot(vec3(_894, _895, _896), vec3(_894, _895, _896));
        float _902 = (_897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_897);
        float _911 = (dot(vec3(_465, _466, _467), vec3(_902 * _894, _902 * _895, _902 * _896)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _921 = sqrt(((_895 * _895) + (_894 * _894)) + (_896 * _896)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3878 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_923 + 1.0))) + _928) * _891;
        float _938 = _859 * 0.5;
        float _939 = _869 * 0.5;
        float _940 = _879 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_465, _466, _467), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3911 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_965 + 1.0))) + _970) * _892;
        float _980 = _860 * 0.5;
        float _981 = _870 * 0.5;
        float _982 = _880 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_465, _466, _467), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3944 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1007 + 1.0))) + _1012) * _893;
        _1029 = _860;
        _1031 = _859;
        _1032 = _858;
        _1033 = _870;
        _1034 = _869;
        _1035 = _868;
        _1036 = _880;
        _1037 = _879;
        _1038 = _878;
        _1039 = _893;
        _1040 = _892;
        _1041 = _891;
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
    }
    else
    {
        _1029 = _1030;
        _1031 = _1030;
        _1032 = _1030;
        _1033 = _1030;
        _1034 = _1030;
        _1035 = _1030;
        _1036 = _1030;
        _1037 = _1030;
        _1038 = _1030;
        _1039 = _1030;
        _1040 = _1030;
        _1041 = _1030;
        _1042 = 0.0;
        _1043 = 0.0;
        _1044 = 0.0;
    }
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1072 = fma(_699, cbModelParam._m0[30u].z, fma(_695, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _691));
        float _1076 = fma(_699, cbModelParam._m0[31u].z, fma(_695, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _691));
        float _1080 = fma(_699, cbModelParam._m0[32u].z, fma(_695, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _691));
        float _1103 = _691 + _465;
        float _1104 = _695 + _466;
        float _1105 = _699 + _467;
        float _1115 = fma(_1105, cbModelParam._m0[30u].z, fma(_1104, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1103)) - _1072;
        float _1116 = fma(_1105, cbModelParam._m0[31u].z, fma(_1104, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1103)) - _1076;
        float _1117 = fma(_1105, cbModelParam._m0[32u].z, fma(_1104, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1103)) - _1080;
        float _1121 = inversesqrt(dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117)));
        float _1134 = ((_1121 * _1115) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1072 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1121 * _1116) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1076 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1136 = ((_1121 * _1117) / cbModelParam._m0[35u].z) + ((((((_1080 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1134, _1135, _1136), 0.0);
        float _1171 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1138.x + (-0.5));
        float _1173 = _1171 * (_1138.y + (-0.5));
        float _1174 = _1171 * (_1138.z + (-0.5));
        float _1181 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1145.x + (-0.5));
        float _1183 = _1181 * (_1145.y + (-0.5));
        float _1184 = _1181 * (_1145.z + (-0.5));
        float _1191 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1152.x + (-0.5));
        float _1193 = _1191 * (_1152.y + (-0.5));
        float _1194 = _1191 * (_1152.z + (-0.5));
        float _1201 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1159.x + (-0.5));
        float _1203 = _1201 * (_1159.y + (-0.5));
        float _1204 = _1201 * (_1159.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_465, _466, _467), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _4007 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1235 + 1.0))) + _1240) * _1205;
        float _1250 = _1173 * 0.5;
        float _1251 = _1183 * 0.5;
        float _1252 = _1193 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_465, _466, _467), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4040 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1277 + 1.0))) + _1282) * _1206;
        float _1292 = _1174 * 0.5;
        float _1293 = _1184 * 0.5;
        float _1294 = _1194 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_465, _466, _467), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4073 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1319 + 1.0))) + _1324) * _1207;
        _1341 = _1174;
        _1342 = _1173;
        _1343 = _1172;
        _1344 = _1184;
        _1345 = _1183;
        _1346 = _1182;
        _1347 = _1194;
        _1348 = _1193;
        _1349 = _1192;
        _1350 = _1207;
        _1351 = _1206;
        _1352 = _1205;
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
    }
    else
    {
        _1341 = _1030;
        _1342 = _1030;
        _1343 = _1030;
        _1344 = _1030;
        _1345 = _1030;
        _1346 = _1030;
        _1347 = _1030;
        _1348 = _1030;
        _1349 = _1030;
        _1350 = _1030;
        _1351 = _1030;
        _1352 = _1030;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1042)) + _1042;
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1043)) + _1043;
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1044)) + _1044;
    float _1388 = fma(_1367, cbSceneParam._m0[89u].z, fma(_1366, cbSceneParam._m0[89u].y, _1365 * cbSceneParam._m0[89u].x));
    float _1391 = fma(_1367, cbSceneParam._m0[90u].z, fma(_1366, cbSceneParam._m0[90u].y, _1365 * cbSceneParam._m0[90u].x));
    float _1394 = fma(_1367, cbSceneParam._m0[91u].z, fma(_1366, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1365));
    float _1409 = _638 * 0.5;
    float _1410 = _639 * 0.5;
    float _1411 = _640 * 0.5;
    float _1412 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1415 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1418 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1452;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1425 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1029, _1033, _1036, _1039));
        float _1429 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1031, _1034, _1037, _1040));
        float _1433 = dot(vec4(_1409, _1410, _1411, 1.0), vec4(_1032, _1035, _1038, _1041));
        float _1440 = dot(vec4(cbModelParam._m0[39u]), vec4(_1409, _1410, _1411, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1440) ? 0.0 : (isnan(0.0) ? _1440 : max(0.0, _1440))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1463;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1454 = dot(vec4(cbModelParam._m0[40u]), vec4(_1409, _1410, _1411, 1.0));
        _1463 = dot(vec3(isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1454) ? 0.0 : (isnan(0.0) ? _1454 : max(0.0, _1454))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1463 = 1.0;
    }
    float _1467 = (_1463 * cbModelParam._m0[1u].x) + (_1452 * (1.0 - cbModelParam._m0[1u].x));
    float _1477 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _468);
    float _1478 = isnan(_1477) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1477 : min(cbModelParam._m0[25u].z, _1477));
    float _1558;
    float _1560;
    float _1562;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1525 = fma(_699, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691)) + cbModelParam._m0[13u].w;
        float _1529 = fma(_699, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691)) + cbModelParam._m0[14u].w;
        float _1533 = fma(_699, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691)) + cbModelParam._m0[15u].w;
        float _1536 = fma(_640, cbModelParam._m0[13u].z, fma(_639, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _638));
        float _1539 = fma(_640, cbModelParam._m0[14u].z, fma(_639, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _638));
        float _1542 = fma(_640, cbModelParam._m0[15u].z, fma(_639, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _638));
        float _1570;
        if (_1536 > 0.0)
        {
            _1570 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1570 = frontier_phi_17_15_ladder;
        }
        float _1740;
        if (_1539 > 0.0)
        {
            _1740 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1740 = frontier_phi_26_22_ladder;
        }
        float _2036;
        if (_1542 > 0.0)
        {
            _2036 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2036 = frontier_phi_38_33_ladder;
        }
        float _2038 = isnan(_1740) ? _1570 : (isnan(_1570) ? _1740 : min(_1570, _1740));
        float _2039 = isnan(_2036) ? _2038 : (isnan(_2038) ? _2036 : min(_2038, _2036));
        float _2043 = (_2039 * _1536) + _1525;
        float _2044 = (_2039 * _1539) + _1529;
        float _2045 = (_2039 * _1542) + _1533;
        float _2046 = _2039 * 9.9999997473787516355514526367188e-05;
        float _2048 = (-1.0) - _2046;
        float _2050 = _2046 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2045 > _2050) || ((_2045 < _2048) || ((_2044 > _2050) || ((_2044 < _2048) || ((_2043 < _2048) || (_2043 > _2050))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2190 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2045, cbModelParam._m0[9u].z, fma(_2044, cbModelParam._m0[9u].y, _2043 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2045, cbModelParam._m0[10u].z, fma(_2044, cbModelParam._m0[10u].y, _2043 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2045, cbModelParam._m0[11u].z, fma(_2044, cbModelParam._m0[11u].y, _2043 * cbModelParam._m0[11u].x))), _1478);
            frontier_phi_16_38_ladder = _2190.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2190.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2190.x * cbModelParam._m0[1u].y;
        }
        _1558 = frontier_phi_16_38_ladder_2;
        _1560 = frontier_phi_16_38_ladder_1;
        _1562 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_638, _639, _640), _1478);
        _1558 = _1546.x * cbModelParam._m0[1u].y;
        _1560 = _1546.y * cbModelParam._m0[1u].y;
        _1562 = _1546.z * cbModelParam._m0[1u].y;
    }
    float _1566 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _468);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1566 : min(cbModelParam._m0[25u].w, _1566));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1620 = fma(_699, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691)) + cbModelParam._m0[21u].w;
        float _1624 = fma(_699, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691)) + cbModelParam._m0[22u].w;
        float _1628 = fma(_699, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691)) + cbModelParam._m0[23u].w;
        float _1631 = fma(_640, cbModelParam._m0[21u].z, fma(_639, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _638));
        float _1634 = fma(_640, cbModelParam._m0[22u].z, fma(_639, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _638));
        float _1637 = fma(_640, cbModelParam._m0[23u].z, fma(_639, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _638));
        float _1745;
        if (_1631 > 0.0)
        {
            _1745 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1745 = frontier_phi_28_24_ladder;
        }
        float _2063;
        if (_1634 > 0.0)
        {
            _2063 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2063 = frontier_phi_40_35_ladder;
        }
        float _2390;
        if (_1637 > 0.0)
        {
            _2390 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2390 = frontier_phi_50_47_ladder;
        }
        float _2392 = isnan(_2063) ? _1745 : (isnan(_1745) ? _2063 : min(_1745, _2063));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1631) + _1620;
        float _2398 = (_2393 * _1634) + _1624;
        float _2399 = (_2393 * _1637) + _1628;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2400;
        float _2403 = _2400 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2399 > _2403) || ((_2399 < _2401) || ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 < _2401) || (_2397 > _2403))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2517 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2399, cbModelParam._m0[17u].z, fma(_2398, cbModelParam._m0[17u].y, _2397 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2399, cbModelParam._m0[18u].z, fma(_2398, cbModelParam._m0[18u].y, _2397 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2399, cbModelParam._m0[19u].z, fma(_2398, cbModelParam._m0[19u].y, _2397 * cbModelParam._m0[19u].x))), _1567);
            frontier_phi_25_50_ladder = _2517.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2517.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2517.x * cbModelParam._m0[1u].z;
        }
        _1656 = frontier_phi_25_50_ladder_2;
        _1658 = frontier_phi_25_50_ladder_1;
        _1660 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_638, _639, _640), _1567);
        _1656 = _1640.x * cbModelParam._m0[1u].z;
        _1658 = _1640.y * cbModelParam._m0[1u].z;
        _1660 = _1640.z * cbModelParam._m0[1u].z;
    }
    float _1672 = ((((1.0 - _659) * ((_646 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_659 * _646)) * _630;
    float _1673 = _1672 * ((cbModelParam._m0[1u].w * (_1656 - _1558)) + _1558);
    float _1674 = _1672 * ((cbModelParam._m0[1u].w * (_1658 - _1560)) + _1560);
    float _1675 = _1672 * ((cbModelParam._m0[1u].w * (_1660 - _1562)) + _1562);
    float _1678 = fma(_1675, cbSceneParam._m0[89u].z, fma(_1674, cbSceneParam._m0[89u].y, _1673 * cbSceneParam._m0[89u].x));
    float _1681 = fma(_1675, cbSceneParam._m0[90u].z, fma(_1674, cbSceneParam._m0[90u].y, _1673 * cbSceneParam._m0[90u].x));
    float _1684 = fma(_1675, cbSceneParam._m0[91u].z, fma(_1674, cbSceneParam._m0[91u].y, _1673 * cbSceneParam._m0[91u].x));
    float _1719 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1723 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1727 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1731 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1732 = _1719 / _1731;
    float _1733 = _1723 / _1731;
    float _1734 = _1727 / _1731;
    float _1881;
    float _1882;
    float _1883;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1761 = ((uint(_1734 > cbSceneParam._m0[59u].y) + uint(_1734 > cbSceneParam._m0[59u].x)) + uint(_1734 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1762 = _1761 + 43u;
        uint _1770 = _1761 + 44u;
        uint _1778 = _1761 + 45u;
        uint _1786 = _1761 + 46u;
        float _1797 = fma(_1731, cbSceneParam._m0[_1762].w, fma(_1727, cbSceneParam._m0[_1762].z, fma(_1723, cbSceneParam._m0[_1762].y, _1719 * cbSceneParam._m0[_1762].x)));
        float _1801 = fma(_1731, cbSceneParam._m0[_1770].w, fma(_1727, cbSceneParam._m0[_1770].z, fma(_1723, cbSceneParam._m0[_1770].y, _1719 * cbSceneParam._m0[_1770].x)));
        float _1809 = fma(_1731, cbSceneParam._m0[_1786].w, fma(_1727, cbSceneParam._m0[_1786].z, fma(_1723, cbSceneParam._m0[_1786].y, _1719 * cbSceneParam._m0[_1786].x)));
        float _1814 = cbSceneParam._m0[33u].z * _1809;
        float _1816 = cbSceneParam._m0[33u].w * _1809;
        float _1819 = fma(_1731, cbSceneParam._m0[_1778].w, fma(_1727, cbSceneParam._m0[_1778].z, fma(_1723, cbSceneParam._m0[_1778].y, _1719 * cbSceneParam._m0[_1778].x))) / _1809;
        float _1867 = (cbSceneParam._m0[33u].x - sqrt(((_1733 * _1733) + (_1732 * _1732)) + (_1734 * _1734))) * cbSceneParam._m0[33u].y;
        float _4199 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1874 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1814 + _1797) / _1809, (_1816 + _1801) / _1809), _1819), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1816 + _1797) / _1809, (_1801 - _1814) / _1809), _1819), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1797 - _1814) / _1809, (_1801 - _1816) / _1809), _1819), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1797 - _1816) / _1809, (_1814 + _1801) / _1809), _1819), 0.0)).x), vec4(0.25)));
        _1881 = 1.0 - (_1874 * cbSceneParam._m0[34u].x);
        _1882 = 1.0 - (_1874 * cbSceneParam._m0[34u].y);
        _1883 = 1.0 - (_1874 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1881 = 1.0;
        _1882 = 1.0;
        _1883 = 1.0;
    }
    float _1947;
    float _1949;
    float _1951;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1935 = fma(_1731, cbSceneParam._m0[63u].w, fma(_1727, cbSceneParam._m0[63u].z, fma(_1723, cbSceneParam._m0[63u].y, _1719 * cbSceneParam._m0[63u].x)));
        float _1936 = fma(_1731, cbSceneParam._m0[60u].w, fma(_1727, cbSceneParam._m0[60u].z, fma(_1723, cbSceneParam._m0[60u].y, _1719 * cbSceneParam._m0[60u].x))) / _1935;
        float _1937 = fma(_1731, cbSceneParam._m0[61u].w, fma(_1727, cbSceneParam._m0[61u].z, fma(_1723, cbSceneParam._m0[61u].y, _1719 * cbSceneParam._m0[61u].x))) / _1935;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1936 >= cbSceneParam._m0[64u].x) && (_1937 >= cbSceneParam._m0[64u].y)) && (_1936 <= cbSceneParam._m0[64u].z)) && (_1937 <= cbSceneParam._m0[64u].w))
        {
            float _2076 = fma(_1731, cbSceneParam._m0[62u].w, fma(_1727, cbSceneParam._m0[62u].z, fma(_1723, cbSceneParam._m0[62u].y, _1719 * cbSceneParam._m0[62u].x))) / _1935;
            float _2080 = isnan(cbSceneParam._m0[41u].w) ? _2076 : (isnan(_2076) ? cbSceneParam._m0[41u].w : max(_2076, cbSceneParam._m0[41u].w));
            float _2123 = (cbSceneParam._m0[33u].x - sqrt(((_1733 * _1733) + (_1732 * _1732)) + (_1734 * _1734))) * cbSceneParam._m0[33u].y;
            float _4215 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
            float _2130 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1936, cbSceneParam._m0[33u].w + _1937), _2080), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1936, _1937 - cbSceneParam._m0[33u].z), _2080), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1936 - cbSceneParam._m0[33u].z, _1937 - cbSceneParam._m0[33u].w), _2080), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1936 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1937), _2080), 0.0)).x), vec4(0.25)));
            float _2134 = 1.0 - (_2130 * cbSceneParam._m0[34u].x);
            float _2135 = 1.0 - (_2130 * cbSceneParam._m0[34u].y);
            float _2136 = 1.0 - (_2130 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2136) ? _1883 : (isnan(_1883) ? _2136 : min(_1883, _2136));
            frontier_phi_37_36_ladder_1 = isnan(_2135) ? _1882 : (isnan(_1882) ? _2135 : min(_1882, _2135));
            frontier_phi_37_36_ladder_2 = isnan(_2134) ? _1881 : (isnan(_1881) ? _2134 : min(_1881, _2134));
        }
        else
        {
            frontier_phi_37_36_ladder = _1883;
            frontier_phi_37_36_ladder_1 = _1882;
            frontier_phi_37_36_ladder_2 = _1881;
        }
        _1947 = frontier_phi_37_36_ladder_2;
        _1949 = frontier_phi_37_36_ladder_1;
        _1951 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1947 = _1881;
        _1949 = _1882;
        _1951 = _1883;
    }
    uvec4 _1956 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1958 = _1956.x * 14u;
    uint _1959 = _1958 + 13u;
    float _1966 = _630 + (-1.0);
    float _1971 = (cbLight._m0[_1959].x * _1966) + 1.0;
    float _1972 = (cbLight._m0[_1959].y * _1966) + 1.0;
    float _1973 = (cbLight._m0[_1959].z * _1966) + 1.0;
    float _1974 = (cbLight._m0[_1959].w * _1966) + 1.0;
    uint _1975 = _1958 + 5u;
    float _1981 = isnan(1.0) ? _1972 : (isnan(_1972) ? 1.0 : min(_1972, 1.0));
    uint _1985 = _1958 + 4u;
    float _1995 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
    uint _1999 = _1958 | 1u;
    float _2010 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_465, _466, _467));
    float _2013 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_465, _466, _467));
    float _4251 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _4262 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2018 = (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * 0.3183098733425140380859375;
    float _2020 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * 0.3183098733425140380859375;
    float _2027 = ((cbLight._m0[_1975].x * _1981) * _2020) + (((cbLight._m0[_1985].x * _1947) * _1995) * _2018);
    float _2028 = ((_1981 * cbLight._m0[_1975].y) * _2020) + (((cbLight._m0[_1985].y * _1949) * _1995) * _2018);
    float _2029 = ((_1981 * cbLight._m0[_1975].z) * _2020) + (((cbLight._m0[_1985].z * _1951) * _1995) * _2018);
    uvec4 _2033 = floatBitsToUint(cbLight._m0[_1958 + 12u]);
    bool _2035 = _2033.x == 0u;
    float _2137;
    float _2139;
    float _2141;
    if (_2035)
    {
        _2137 = _2027;
        _2139 = _2028;
        _2141 = _2029;
    }
    else
    {
        uint _2145 = _1958 + 6u;
        float _2161 = (dot(vec3(cbLight._m0[_1958 + 2u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _2162 = _2161 * _2161;
        float _4273 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2163 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _2164 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2137 = (((cbLight._m0[_2145].x * 0.3183098733425140380859375) * _2163) * _2164) + _2027;
        _2139 = (((cbLight._m0[_2145].y * 0.3183098733425140380859375) * _2163) * _2164) + _2028;
        _2141 = (((cbLight._m0[_2145].z * 0.3183098733425140380859375) * _2163) * _2164) + _2029;
    }
    bool _2144 = _2033.y == 0u;
    float _2199;
    float _2201;
    float _2203;
    if (_2144)
    {
        _2199 = _2137;
        _2201 = _2139;
        _2203 = _2141;
    }
    else
    {
        uint _2361 = _1958 + 7u;
        float _2377 = (dot(vec3(cbLight._m0[_1958 + 3u].xyz), vec3(_465, _466, _467)) * 0.5) + 0.5;
        float _2378 = _2377 * _2377;
        float _4289 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2379 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2380 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2199 = (((cbLight._m0[_2361].x * 0.3183098733425140380859375) * _2379) * _2380) + _2137;
        _2201 = (((cbLight._m0[_2361].y * 0.3183098733425140380859375) * _2379) * _2380) + _2139;
        _2203 = (((cbLight._m0[_2361].z * 0.3183098733425140380859375) * _2379) * _2380) + _2141;
    }
    uint _2206 = _1958 + 8u;
    float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _468) * 0.949999988079071044921875);
    float _2220 = _2219 * _2219;
    float _2221 = cbLight._m0[_1958].x + _544;
    float _2222 = cbLight._m0[_1958].y + _545;
    float _2223 = cbLight._m0[_1958].z + _546;
    float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
    float _2228 = _2227 * _2221;
    float _2229 = _2227 * _2222;
    float _2230 = _2227 * _2223;
    float _2231 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1958].xyz));
    float _4305 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _4316 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _2235 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _2236 = dot(vec3(_465, _466, _467), vec3(_2228, _2229, _2230));
    float _4327 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_2228, _2229, _2230));
    float _4338 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2220 * _2220;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2259 = (exp2(log2(1.0 - (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2260 = 1.0 - _2220;
    float _2271 = (0.5 / (((_2235 * ((_2234 * _2260) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2260) + _2220) * _2234))) * _2234;
    float _4349 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    uint _2287 = _1958 + 9u;
    float _2298 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _468) * 0.949999988079071044921875);
    float _2299 = _2298 * _2298;
    float _2300 = cbLight._m0[_1999].x + _544;
    float _2301 = cbLight._m0[_1999].y + _545;
    float _2302 = cbLight._m0[_1999].z + _546;
    float _2306 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
    float _2307 = _2306 * _2300;
    float _2308 = _2306 * _2301;
    float _2309 = _2306 * _2302;
    float _2310 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_1999].xyz));
    float _4360 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
    float _2314 = dot(vec3(_465, _466, _467), vec3(_2307, _2308, _2309));
    float _4371 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2317 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _2318 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2307, _2308, _2309));
    float _4382 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2322 = _2299 * _2299;
    float _2326 = ((_2317 * _2317) * (_2322 + (-1.0))) + 1.0;
    float _2335 = (exp2(log2(1.0 - (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2336 = 1.0 - _2299;
    float _2346 = (0.5 / (((_2235 * ((_2313 * _2336) + _2299)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2336) + _2299) * _2313))) * _2313;
    float _4393 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2348 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2322 / ((_2326 * _2326) * 3.141590118408203125));
    float _2358 = (((_2335 * cbLight._m0[_2287].x) * _2348) * _1981) + ((((cbLight._m0[_2206].x * _1947) * _2259) * _2273) * _1995);
    float _2359 = (((_2335 * cbLight._m0[_2287].y) * _2348) * _1981) + ((((cbLight._m0[_2206].y * _1949) * _2259) * _2273) * _1995);
    float _2360 = (((_2335 * cbLight._m0[_2287].z) * _2348) * _1981) + ((((cbLight._m0[_2206].z * _1951) * _2259) * _2273) * _1995);
    float _2416;
    float _2418;
    float _2420;
    if (_2035)
    {
        _2416 = _2358;
        _2418 = _2359;
        _2420 = _2360;
    }
    else
    {
        uint _2422 = _1958 + 2u;
        uint _2426 = _1958 + 10u;
        float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2422].w)) * _468) * 0.949999988079071044921875);
        float _2441 = _2440 * _2440;
        float _2442 = cbLight._m0[_2422].x + _544;
        float _2443 = cbLight._m0[_2422].y + _545;
        float _2444 = cbLight._m0[_2422].z + _546;
        float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
        float _2449 = _2448 * _2442;
        float _2450 = _2448 * _2443;
        float _2451 = _2448 * _2444;
        float _2452 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2422].xyz));
        float _4404 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2456 = dot(vec3(_465, _466, _467), vec3(_2449, _2450, _2451));
        float _4415 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2459 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2460 = dot(vec3(cbLight._m0[_2422].xyz), vec3(_2449, _2450, _2451));
        float _4426 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2464 = _2441 * _2441;
        float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
        float _2477 = (exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2478 = 1.0 - _2441;
        float _2488 = (0.5 / (((_2235 * ((_2455 * _2478) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2478) + _2441) * _2455))) * _2455;
        float _4437 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2490 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
        float _2491 = isnan(1.0) ? _1973 : (isnan(_1973) ? 1.0 : min(_1973, 1.0));
        _2416 = (((_2477 * cbLight._m0[_2426].x) * _2490) * _2491) + _2358;
        _2418 = (((_2477 * cbLight._m0[_2426].y) * _2490) * _2491) + _2359;
        _2420 = (((_2477 * cbLight._m0[_2426].z) * _2490) * _2491) + _2360;
    }
    float _2522;
    float _2524;
    float _2526;
    if (_2144)
    {
        _2522 = _2416;
        _2524 = _2418;
        _2526 = _2420;
    }
    else
    {
        uint _2533 = _1958 + 3u;
        uint _2537 = _1958 + 11u;
        float _2551 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2533].w)) * _468) * 0.949999988079071044921875);
        float _2552 = _2551 * _2551;
        float _2553 = cbLight._m0[_2533].x + _544;
        float _2554 = cbLight._m0[_2533].y + _545;
        float _2555 = cbLight._m0[_2533].z + _546;
        float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
        float _2560 = _2559 * _2553;
        float _2561 = _2559 * _2554;
        float _2562 = _2559 * _2555;
        float _2563 = dot(vec3(_465, _466, _467), vec3(cbLight._m0[_2533].xyz));
        float _4453 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2567 = dot(vec3(_465, _466, _467), vec3(_2560, _2561, _2562));
        float _4464 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2571 = dot(vec3(cbLight._m0[_2533].xyz), vec3(_2560, _2561, _2562));
        float _4475 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2575 = _2552 * _2552;
        float _2579 = ((_2570 * _2570) * (_2575 + (-1.0))) + 1.0;
        float _2588 = (exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2589 = 1.0 - _2552;
        float _2599 = (0.5 / (((_2235 * ((_2566 * _2589) + _2552)) + 9.9999999392252902907785028219223e-09) + (((_2235 * _2589) + _2552) * _2566))) * _2566;
        float _4486 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2601 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2575 / ((_2579 * _2579) * 3.141590118408203125));
        float _2602 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
        _2522 = (((_2588 * cbLight._m0[_2537].x) * _2601) * _2602) + _2416;
        _2524 = (((_2588 * cbLight._m0[_2537].y) * _2601) * _2602) + _2418;
        _2526 = (((_2588 * cbLight._m0[_2537].z) * _2601) * _2602) + _2420;
    }
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    float _2678;
    if (_1956.y == 0u)
    {
        uvec4 _2623 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2624 = _2623.x;
        uint _2635 = uint((float(_2623.y) * floor(float(uint(cbSceneParam._m0[85u].y * _566) / _2624))) + floor(float(uint(cbSceneParam._m0[85u].x * _565) / _2624)));
        float _2645 = (log2(_1734 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2646 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        uint _2649 = uint(isnan(14.0) ? _2646 : (isnan(_2646) ? 14.0 : min(_2646, 14.0)));
        uvec4 _2654 = texelFetch(g_lightClusterGridBuffer, int(((_2649 << 2u) + (_2635 << 6u)) >> 2u));
        uint _2655 = _2654.x;
        uint _2656 = _2623.z;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        if (((((1u << ((_2656 >> 4u) & 15u)) + 4294967295u) & _2655) == 0u) || ((_2656 & 240u) == 0u))
        {
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
        }
        else
        {
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            uint _2894 = 0u;
            uint _2903;
            bool _2904;
            for (;;)
            {
                _2903 = texelFetch(g_lightClassification, int((((_2649 << 5u) + (_2635 << 9u)) + (_2894 << 2u)) >> 2u)).x;
                _2904 = _2903 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2904)
                {
                    frontier_phi_71_pred = _2893;
                    frontier_phi_71_pred_1 = _2892;
                    frontier_phi_71_pred_2 = _2891;
                    frontier_phi_71_pred_3 = _2890;
                    frontier_phi_71_pred_4 = _2889;
                    frontier_phi_71_pred_5 = _2888;
                }
                else
                {
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    uint _3039;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2893;
                    _3039 = _2903;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    for (;;)
                    {
                        uint _3043 = uint(findLSB(_3039)) + (_2894 << 5u);
                        uint _3040 = (_3039 + 4294967295u) & _3039;
                        uint _3045 = _3043 * 48u;
                        vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 3u)).x));
                        uint _3065 = (_3043 * 48u) + 4u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3084 = (_3043 * 48u) + 8u;
                        vec3 _3095 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x));
                        float _3099 = _3059.x - _1732;
                        float _3100 = _3059.y - _1733;
                        float _3101 = _3059.z - _1734;
                        float _3102 = dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101));
                        float _3105 = inversesqrt(_3102);
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3109 = dot(vec3(_586, _589, _592), vec3(_3106, _3107, _3108));
                        float _3114 = 1.0 - (_3102 * _3059.w);
                        float _4512 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3115 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3116 = sqrt(_3102) * _3078.w;
                        float _3119 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                        float _3120 = _3119 * _3119;
                        float _3123 = ((1.0 - _3120) * _3109) + _3120;
                        float _3126 = _3116 * _3116;
                        float _3130 = ((isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))) * _3115) / ((_3126 * 0.699999988079071044921875) + 1.0);
                        float _3134 = (-0.0) - _1732;
                        float _3135 = (-0.0) - _1733;
                        float _3136 = (-0.0) - _1734;
                        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                        float _3141 = _3140 * _3134;
                        float _3142 = _3140 * _3135;
                        float _3143 = _3140 * _3136;
                        float _3150 = exp2(log2(1.0 / ((_3126 * 3.5) + 5.0)) * 0.25);
                        float _3151 = 1.0 - _646;
                        float _3158 = sqrt(1.0 - ((1.0 - (_3151 * _3151)) * (1.0 - (_3150 * _3150))));
                        float _3159 = _3158 * _3158;
                        float _3160 = _3159 * _3159;
                        float _3161 = _3141 + _3106;
                        float _3162 = _3142 + _3107;
                        float _3163 = _3143 + _3108;
                        float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                        float _3171 = dot(vec3(_586, _589, _592), vec3(_3141, _3142, _3143));
                        float _4528 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3174 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3175 = dot(vec3(_586, _589, _592), vec3(_3167 * _3161, _3167 * _3162, _3167 * _3163));
                        float _4539 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3178 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                        float _3182 = ((_3178 * _3178) * (_3160 + (-1.0))) + 1.0;
                        float _3183 = _3119 * _3159;
                        float _3184 = _3183 * _3183;
                        float _3187 = ((1.0 - _3184) * _3109) + _3184;
                        float _4550 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3188 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                        float _3189 = 1.0 - _3159;
                        float _3199 = (0.5 / (((_3188 * ((_3174 * _3189) + _3159)) + 9.9999999392252902907785028219223e-09) + (((_3188 * _3189) + _3159) * _3174))) * _3188;
                        float _4561 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3210 = (((_3160 * 3.1415927410125732421875) * (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) / ((_3182 * _3182) * ((_3126 * 2.1991131305694580078125) + 3.141590118408203125))) * _3115;
                        _2963 = (_3130 * _3078.x) + _3036;
                        _2964 = (_3130 * _3078.y) + _3037;
                        _2965 = (_3130 * _3078.z) + _3038;
                        _2960 = (_3210 * _3095.x) + _3033;
                        _2961 = (_3210 * _3095.y) + _3034;
                        _2962 = (_3210 * _3095.z) + _3035;
                        if (_3040 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _2965;
                            _3039 = _3040;
                        }
                    }
                    frontier_phi_71_pred = _2965;
                    frontier_phi_71_pred_1 = _2964;
                    frontier_phi_71_pred_2 = _2963;
                    frontier_phi_71_pred_3 = _2962;
                    frontier_phi_71_pred_4 = _2961;
                    frontier_phi_71_pred_5 = _2960;
                }
                _2746 = frontier_phi_71_pred;
                _2744 = frontier_phi_71_pred_1;
                _2742 = frontier_phi_71_pred_2;
                _2740 = frontier_phi_71_pred_3;
                _2738 = frontier_phi_71_pred_4;
                _2736 = frontier_phi_71_pred_5;
                uint _2895 = _2894 + 1u;
                if (_2895 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2888 = _2736;
                    _2889 = _2738;
                    _2890 = _2740;
                    _2891 = _2742;
                    _2892 = _2744;
                    _2893 = _2746;
                    _2894 = _2895;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
        }
        uvec4 _2749 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2750 = _2749.z;
        uint _2752 = (_2750 >> 8u) & 15u;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((4294967295u << _2752) & _2655) == 0u)
        {
            _2856 = _2735;
            _2858 = _2737;
            _2860 = _2739;
            _2862 = _2741;
            _2864 = _2743;
            _2866 = _2745;
        }
        else
        {
            float _2881 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
            float _2882 = _2881 * _1732;
            float _2883 = _2881 * _1733;
            float _2884 = _2881 * _1734;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2752 < ((_2750 >> 12u) & 15u))
            {
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _3016 = _2735;
                float _3017 = _2737;
                float _3018 = _2739;
                float _3019 = _2741;
                float _3020 = _2743;
                float _3021 = _2745;
                uint _3022 = _2752;
                uint _3031;
                bool _3032;
                for (;;)
                {
                    _3031 = texelFetch(g_lightClassification, int((((_2649 << 5u) + (_2635 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                    _3032 = _3031 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3032)
                    {
                        frontier_phi_82_pred = _3021;
                        frontier_phi_82_pred_1 = _3020;
                        frontier_phi_82_pred_2 = _3019;
                        frontier_phi_82_pred_3 = _3018;
                        frontier_phi_82_pred_4 = _3017;
                        frontier_phi_82_pred_5 = _3016;
                    }
                    else
                    {
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3237 = _3016;
                        float _3238 = _3017;
                        float _3239 = _3018;
                        float _3240 = _3019;
                        float _3241 = _3020;
                        float _3242 = _3021;
                        uint _3243 = _3031;
                        uint _3244;
                        vec4 _3269;
                        float _3270;
                        vec4 _3285;
                        vec3 _3297;
                        vec4 _3313;
                        vec4 _3329;
                        float _3375;
                        bool _3376;
                        for (;;)
                        {
                            uint _3254 = ((_3022 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3243));
                            _3244 = (_3243 + 4294967295u) & _3243;
                            uint _3256 = _3254 * 40u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            _3270 = _3269.w;
                            uint _3272 = (_3254 * 40u) + 4u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3287 = (_3254 * 40u) + 8u;
                            _3297 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x));
                            uint _3300 = (_3254 * 40u) + 16u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3316 = (_3254 * 40u) + 20u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3331 = (_3254 * 40u) + 24u;
                            vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3350 = (_3254 * 40u) + 28u;
                            vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            _3375 = fma(_1734, _3363.z, fma(_1733, _3363.y, _3363.x * _1732)) + _3363.w;
                            _3376 = !((fma(_1734, _3344.z, fma(_1733, _3344.y, _3344.x * _1732)) + _3344.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3376)
                            {
                                float _3403 = _3269.x - _1732;
                                float _3404 = _3269.y - _1733;
                                float _3405 = _3269.z - _1734;
                                float _3406 = dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405));
                                float _3409 = inversesqrt(_3406);
                                float _3410 = _3409 * _3403;
                                float _3411 = _3409 * _3404;
                                float _3412 = _3409 * _3405;
                                float _3416 = 1.0 - (_3406 / (_3270 * _3270));
                                float _4572 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3417 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3421 = sqrt(_3406) * _3285.w;
                                float _3423 = 1.39999997615814208984375 / (_3421 + 1.39999997615814208984375);
                                float _3424 = _3423 * _3423;
                                float _3427 = ((1.0 - _3424) * dot(vec3(_3410, _3411, _3412), vec3(_586, _589, _592))) + _3424;
                                float _3430 = _3421 * _3421;
                                float _3434 = (fma(_1734, _3313.z, fma(_1733, _3313.y, _3313.x * _1732)) + _3313.w) / _3375;
                                float _3435 = (fma(_1734, _3329.z, fma(_1733, _3329.y, _3329.x * _1732)) + _3329.w) / _3375;
                                float _3439 = 1.0 - dot(vec2(_3434, _3435), vec2(_3434, _3435));
                                float _4588 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3441 = _3440 * (((isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0))) * _3417) / ((_3430 * 0.699999988079071044921875) + 1.0));
                                float _3453 = exp2(log2(1.0 / ((_3430 * 3.5) + 5.0)) * 0.25);
                                float _3454 = 1.0 - _646;
                                float _3461 = sqrt(1.0 - ((1.0 - (_3454 * _3454)) * (1.0 - (_3453 * _3453))));
                                float _3462 = _3461 * _3461;
                                float _3463 = _3462 * _3462;
                                float _3464 = _3410 - _2882;
                                float _3465 = _3411 - _2883;
                                float _3466 = _3412 - _2884;
                                float _3470 = inversesqrt(dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466)));
                                float _3474 = dot(vec3(_586, _589, _592), vec3((-0.0) - _2882, (-0.0) - _2883, (-0.0) - _2884));
                                float _4599 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3477 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3478 = dot(vec3(_586, _589, _592), vec3(_3470 * _3464, _3470 * _3465, _3470 * _3466));
                                float _4610 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3481 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
                                float _3485 = ((_3481 * _3481) * (_3463 + (-1.0))) + 1.0;
                                float _3486 = _3423 * _3462;
                                float _3487 = _3486 * _3486;
                                float _3493 = ((1.0 - _3487) * dot(vec3(_586, _589, _592), vec3(_3410, _3411, _3412))) + _3487;
                                float _4621 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3494 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                                float _3495 = 1.0 - _3462;
                                float _3505 = (0.5 / (((_3494 * ((_3477 * _3495) + _3462)) + 9.9999999392252902907785028219223e-09) + (((_3494 * _3495) + _3462) * _3477))) * _3494;
                                float _4632 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3515 = (_3440 * _3417) * (((_3463 * 3.1415927410125732421875) * (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) / ((_3485 * _3485) * ((_3430 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3441 * _3285.z;
                                frontier_phi_88_pred_1 = _3441 * _3285.y;
                                frontier_phi_88_pred_2 = _3441 * _3285.x;
                                frontier_phi_88_pred_3 = _3515 * _3297.z;
                                frontier_phi_88_pred_4 = _3515 * _3297.y;
                                frontier_phi_88_pred_5 = _3515 * _3297.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3524 = frontier_phi_88_pred;
                            _3523 = frontier_phi_88_pred_1;
                            _3522 = frontier_phi_88_pred_2;
                            _3521 = frontier_phi_88_pred_3;
                            _3520 = frontier_phi_88_pred_4;
                            _3519 = frontier_phi_88_pred_5;
                            _3227 = _3522 + _3240;
                            _3228 = _3523 + _3241;
                            _3229 = _3524 + _3242;
                            _3224 = _3519 + _3237;
                            _3225 = _3520 + _3238;
                            _3226 = _3521 + _3239;
                            if (_3244 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3244;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3229;
                        frontier_phi_82_pred_1 = _3228;
                        frontier_phi_82_pred_2 = _3227;
                        frontier_phi_82_pred_3 = _3226;
                        frontier_phi_82_pred_4 = _3225;
                        frontier_phi_82_pred_5 = _3224;
                    }
                    _2867 = frontier_phi_82_pred;
                    _2865 = frontier_phi_82_pred_1;
                    _2863 = frontier_phi_82_pred_2;
                    _2861 = frontier_phi_82_pred_3;
                    _2859 = frontier_phi_82_pred_4;
                    _2857 = frontier_phi_82_pred_5;
                    uint _3023 = _3022 + 1u;
                    if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3016 = _2857;
                        _3017 = _2859;
                        _3018 = _2861;
                        _3019 = _2863;
                        _3020 = _2865;
                        _3021 = _2867;
                        _3022 = _3023;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2863;
                frontier_phi_63_64_ladder_1 = _2867;
                frontier_phi_63_64_ladder_2 = _2865;
                frontier_phi_63_64_ladder_3 = _2861;
                frontier_phi_63_64_ladder_4 = _2859;
                frontier_phi_63_64_ladder_5 = _2857;
            }
            else
            {
                frontier_phi_63_64_ladder = _2741;
                frontier_phi_63_64_ladder_1 = _2745;
                frontier_phi_63_64_ladder_2 = _2743;
                frontier_phi_63_64_ladder_3 = _2739;
                frontier_phi_63_64_ladder_4 = _2737;
                frontier_phi_63_64_ladder_5 = _2735;
            }
            _2856 = frontier_phi_63_64_ladder_5;
            _2858 = frontier_phi_63_64_ladder_4;
            _2860 = frontier_phi_63_64_ladder_3;
            _2862 = frontier_phi_63_64_ladder;
            _2864 = frontier_phi_63_64_ladder_2;
            _2866 = frontier_phi_63_64_ladder_1;
        }
        float _2871 = isnan(1.0) ? _630 : (isnan(_630) ? 1.0 : min(_630, 1.0));
        _2668 = (_2871 * _2862) + _2199;
        _2670 = (_2871 * _2864) + _2201;
        _2672 = (_2871 * _2866) + _2203;
        _2674 = ((_2856 * 0.039999999105930328369140625) * _2871) + _2522;
        _2676 = ((_2858 * 0.039999999105930328369140625) * _2871) + _2524;
        _2678 = ((_2860 * 0.039999999105930328369140625) * _2871) + _2526;
    }
    else
    {
        _2668 = _2199;
        _2670 = _2201;
        _2672 = _2203;
        _2674 = _2522;
        _2676 = _2524;
        _2678 = _2526;
    }
    float _4648 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _4659 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4670 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _2695 = ((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2668 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _630))) + ((_2674 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1467)) * cbPerFrame._m0[3u].x);
    float _2696 = ((isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2670 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _630))) + ((_2676 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1467)) * cbPerFrame._m0[3u].x);
    float _2697 = ((isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2672 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _630))) + ((_2678 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1467)) * cbPerFrame._m0[3u].x);
    uint _2698 = _226 + 6u;
    float _2706 = _565 / cbSceneParam._m0[86u].x;
    float _2707 = _566 / cbSceneParam._m0[86u].y;
    vec4 _2721 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2706, _2707, (log2((isnan(cbSceneParam._m0[77u].w) ? _486 : (isnan(_486) ? cbSceneParam._m0[77u].w : min(_486, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2723 = _2721.x;
    float _2724 = _2721.y;
    float _2725 = _2721.z;
    float _2726 = _2721.w;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    if (_486 > cbSceneParam._m0[78u].w)
    {
        float _2760 = isnan(_486) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _486 : min(cbSceneParam._m0[80u].w, _486));
        float _2761 = _2760 / _486;
        float _2772 = _2761 * _537;
        float _2773 = _538 * _2761;
        float _2774 = (-0.0) - _2773;
        float _2776 = _2761 * _539;
        float _2778 = (cbSceneParam._m0[77u].w * _2774) / _2760;
        float _2779 = _2778 + cbSceneParam._m0[79u].w;
        float _2780 = cbSceneParam._m0[79u].w - _2773;
        float _2786 = sqrt(((_2772 * _2772) + (_2773 * _2773)) + (_2776 * _2776));
        float _2789 = (1.0 - (cbSceneParam._m0[77u].w / _2760)) * _2786;
        float _2794 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2796 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2973;
        if (abs((_2774 - _2778) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2973 = ((((_2779 > 0.0) ? exp2(_2794 * _2779) : (2.0 - exp2(_2796 * _2779))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2789;
        }
        else
        {
            float _2917 = 1.0 / cbSceneParam._m0[80u].x;
            float _2918 = isnan(_2780) ? _2779 : (isnan(_2779) ? _2780 : max(_2779, _2780));
            float _2919 = isnan(_2780) ? _2779 : (isnan(_2779) ? _2780 : min(_2779, _2780));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            _2973 = ((abs(_2786 / _2774) * cbSceneParam._m0[80u].y) * ((((_2928 - _2929) * 2.0) - ((exp2(_2794 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0)))) - exp2(_2794 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))))) * _2917)) - ((exp2(_2796 * _2928) - exp2(_2796 * _2929)) * _2917))) + (_2789 * cbSceneParam._m0[80u].z);
        }
        vec4 _2975 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2706, _2707, 1.0), 0.0);
        float _2984 = exp2((_2973 * (-1.44269502162933349609375)) * (1.0 - _2975.w));
        float _2985 = log2(_2984);
        float _3001 = log2(_2726);
        _2798 = (exp2(_3001 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2985 * cbSceneParam._m0[78u].x)) * _2975.x) / cbSceneParam._m0[78u].x)) + _2723;
        _2800 = (exp2(_3001 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2985 * cbSceneParam._m0[78u].y)) * _2975.y) / cbSceneParam._m0[78u].y)) + _2724;
        _2802 = (exp2(_3001 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2985 * cbSceneParam._m0[78u].z)) * _2975.z) / cbSceneParam._m0[78u].z)) + _2725;
        _2804 = _2984 * _2726;
    }
    else
    {
        _2798 = _2723;
        _2800 = _2724;
        _2802 = _2725;
        _2804 = _2726;
    }
    bool _3011;
    vec4 _2814;
    vec4 _2836;
    float _2838;
    float _2842;
    float _2843;
    float _2844;
    float _2845;
    bool _2855;
    for (;;)
    {
        _2814 = cbMatDynParam._m0[0u];
        float _2816 = roundEven(_2814.y);
        bool _2817 = _2816 == 3.0;
        float _2818 = log2(_2804);
        float _2825 = exp2(_2818 * cbSceneParam._m0[78u].x) * _2695;
        float _2826 = exp2(_2818 * cbSceneParam._m0[78u].y) * _2696;
        float _2827 = exp2(_2818 * cbSceneParam._m0[78u].z) * _2697;
        float _2834 = _553 + (-0.5);
        _2836 = cbMtdParam._m0[1u];
        _2838 = _2836.y * _2834;
        float _2841 = (_2816 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2842 = _2841 * (_2817 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2798)));
        _2843 = _2841 * (_2817 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2800)));
        _2844 = _2841 * (_2817 ? _2827 : (_2827 + (cbSceneParam._m0[72u].w * _2802)));
        _2845 = _2834 * 0.999000012874603271484375;
        _2855 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2855)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2845) < 0.5)
            {
                _3011 = true;
                break;
            }
        }
        uint _2952 = _605 + uint(_2814.w);
        if ((cbInstanceData._m0[_2952].w < 1.0) && ((cbInstanceData._m0[_2952].w + _2845) < 0.5))
        {
            _3011 = true;
            break;
        }
        if ((_2838 + 1.0) < _2836.x)
        {
            _3011 = true;
            break;
        }
        _3011 = false;
        break;
    }
    float _3215;
    if (_3011)
    {
        discard_state = true;
        _3215 = 0.0;
    }
    else
    {
        _3215 = cbInstanceData._m0[_2698].w;
    }
    SV_Target.x = _2842;
    SV_Target.y = _2843;
    SV_Target.z = _2844;
    SV_Target.w = _3215;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2698].w;
    discard_exit();
}


