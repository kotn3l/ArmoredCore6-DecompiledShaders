#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 18) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_28;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1180;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _239 = uint(roundEven(NORMAL.w)) * 13u;
    uint _244 = _239 + 1u;
    uint _248 = _239 + 2u;
    float _257 = sqrt(((cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x) + (cbInstanceData._m0[_239].x * cbInstanceData._m0[_239].x)) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x));
    float _258 = _257 * TEXCOORD.z;
    float _259 = _257 * TEXCOORD.w;
    vec4 _279 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _285 = _279.x * cbMtdParam._m0[11u].x;
    float _286 = _279.y * cbMtdParam._m0[11u].y;
    float _287 = _279.z * cbMtdParam._m0[11u].z;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _258) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _346 = _344.x;
    float _356 = dot(vec4(_346, _344.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _373 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_346 - _356) * cbMtdParam._m0[24u].x) + _356) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3487 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _374 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _381 = (_374 * ((_306.x * cbMtdParam._m0[12u].x) - _285)) + _285;
    float _382 = (_374 * ((_306.y * cbMtdParam._m0[12u].y) - _286)) + _286;
    float _383 = (_374 * ((_306.z * cbMtdParam._m0[12u].z) - _287)) + _287;
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _258) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _259) + cbTextureTilingScale._m0[4u].w));
    vec4 _413 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _415 = _413.x;
    float _416 = _413.y;
    float _417 = _413.z;
    float _426 = ((_396.z - _417) * _374) + _417;
    float _429 = ((((_396.x - _415) * _374) + _415) * 2.0) + (-1.0);
    float _431 = ((((_396.y - _416) * _374) + _416) * 2.0) + (-1.0);
    float _432 = dot(vec2(_429, _431), vec2(_429, _431));
    float _3498 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = sqrt(1.0 - (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))));
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _465 = (((_453.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _429;
    float _466 = (((_453.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _431;
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _258) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _259) + cbTextureTilingScale._m0[19u].w));
    float _480 = _478.x;
    float _481 = 1.0 - _480;
    float _509 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_480 - _481) * cbMtdParam._m0[24u].w) + _481) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3509 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _518 = ((((cbMtdParam._m0[10u].x - _381) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _510) + _381;
    float _519 = ((((cbMtdParam._m0[10u].y - _382) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _510) + _382;
    float _520 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _383)) * _510) + _383;
    float _524 = (cbMtdParam._m0[19u].w * (_453.z - _426)) + _426;
    float _528 = ((cbMtdParam._m0[23u].y - _524) * _510) + _524;
    vec4 _547 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _258) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _259) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _549 = _547.x;
    float _550 = _547.y;
    float _556 = dot(vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0), vec4(_227, _228, _229, 0.0));
    vec4 _571 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_28, SS_BumpMap), vec2((cbTextureTilingScale._m0[18u].x * _258) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * _259) + cbTextureTilingScale._m0[18u].w));
    float _573 = _571.x;
    float _578 = fract(_571.w + cbPerFrame._m0[22u].x);
    float _580 = (1.0 - _578) * _573;
    float _585 = ((_578 + (-1.0)) + _573) * 9.0;
    float _587 = ((_573 + (-1.0)) + _578) * 9.0;
    float _588 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _589 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _603 = (_580 * ((_571.y * 2.0) + (-1.0))) * sin((isnan(3.0) ? _588 : (isnan(_588) ? 3.0 : min(_588, 3.0))) * 3.1415927410125732421875);
    float _605 = (_580 * ((_571.z * 2.0) + (-1.0))) * sin((isnan(3.0) ? _589 : (isnan(_589) ? 3.0 : min(_589, 3.0))) * 3.1415927410125732421875);
    float _609 = inversesqrt(dot(vec3(_603, _605, 1.0), vec3(_603, _605, 1.0)));
    float _625 = (((((0.5 - _549) + ((_603 * 0.5) * _609)) * _556) + _549) * 2.0) + (-1.0);
    float _626 = (((((0.5 - _550) + ((_609 * 0.5) * _605)) * _556) + _550) * 2.0) + (-1.0);
    float _627 = dot(vec2(_625, _626), vec2(_625, _626));
    float _3540 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _643 = ((((cbMtdParam._m0[22u].z * _465) - _465) + _625) * _510) + _465;
    float _644 = ((((cbMtdParam._m0[22u].z * _466) - _466) + _626) * _510) + _466;
    float _645 = (_510 * (sqrt(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) - _437)) + _437;
    float _647 = cbMtdParam._m0[22u].x + _453.w;
    float _650 = fma(_645, _227, fma(_644, _233 * TANGENT.x, (_219 * _211) * _643));
    float _653 = fma(_645, _228, fma(_644, _233 * TANGENT.y, (_219 * _212) * _643));
    float _656 = fma(_645, _229, fma(_644, _233 * TANGENT.z, (_219 * _213) * _643));
    float _660 = inversesqrt(dot(vec3(_650, _653, _656), vec3(_650, _653, _656)));
    float _661 = _660 * _650;
    float _662 = _660 * _653;
    float _663 = _660 * _656;
    float _3551 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _664 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _3573 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3584 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3595 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _682 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _733 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _723);
    float _734 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _723);
    float _735 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _723);
    float _739 = inversesqrt(dot(vec3(_733, _734, _735), vec3(_733, _734, _735)));
    float _740 = _733 * _739;
    float _741 = _734 * _739;
    float _742 = _735 * _739;
    float _748 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _749 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _767 = fma(_663, cbSceneParam._m0[5u].z, fma(_662, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _661));
    float _770 = fma(_663, cbSceneParam._m0[6u].z, fma(_662, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _661));
    float _773 = fma(_663, cbSceneParam._m0[7u].z, fma(_662, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _661));
    uint _787 = (_239 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _793 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_787].x;
    float _794 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_787].y;
    float _795 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_787].z;
    float _3606 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _796 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    vec4 _807 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _748, cbSceneParam._m0[86u].y * _749));
    float _811 = ((isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * TEXCOORD_5.w) * _807.x;
    float _812 = dot(vec3(_661, _662, _663), vec3(_740, _741, _742));
    float _815 = _812 * 2.0;
    float _819 = (_815 * _661) - _740;
    float _820 = (_815 * _662) - _741;
    float _821 = (_815 * _663) - _742;
    float _825 = abs(dot(vec3(_740, _741, _742), vec3(_661, _662, _663)));
    float _3639 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _827 = sqrt(_664);
    float _839 = exp2((_827 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_827 * 3.0));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1179;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _905 = fma(_879, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871));
        float _909 = fma(_879, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871));
        float _913 = fma(_879, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871));
        float _937 = _871 + _661;
        float _938 = _875 + _662;
        float _939 = _879 + _663;
        float _949 = fma(_939, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937)) - _905;
        float _950 = fma(_939, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937)) - _909;
        float _951 = fma(_939, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937)) - _913;
        float _955 = inversesqrt(dot(vec3(_949, _950, _951), vec3(_949, _950, _951)));
        float _968 = ((_955 * _949) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_905 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_955 * _950) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_909 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_955 * _951) / cbModelParam._m0[34u].z) + ((((((_913 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        float _1007 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_973.x + (-0.5));
        float _1009 = _1007 * (_973.y + (-0.5));
        float _1010 = _1007 * (_973.z + (-0.5));
        float _1017 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_980.x + (-0.5));
        float _1019 = _1017 * (_980.y + (-0.5));
        float _1020 = _1017 * (_980.z + (-0.5));
        float _1027 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_987.x + (-0.5));
        float _1029 = _1027 * (_987.y + (-0.5));
        float _1030 = _1027 * (_987.z + (-0.5));
        float _1037 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_994.x + (-0.5));
        float _1039 = _1037 * (_994.y + (-0.5));
        float _1040 = _1037 * (_994.z + (-0.5));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = _1008 * 0.5;
        float _1045 = _1018 * 0.5;
        float _1046 = _1028 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1061 = (dot(vec3(_661, _662, _663), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1071 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3687 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1073 + 1.0))) + _1078) * _1041;
        float _1088 = _1009 * 0.5;
        float _1089 = _1019 * 0.5;
        float _1090 = _1029 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_661, _662, _663), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3720 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1115 + 1.0))) + _1120) * _1042;
        float _1130 = _1010 * 0.5;
        float _1131 = _1020 * 0.5;
        float _1132 = _1030 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_661, _662, _663), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3753 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1157 + 1.0))) + _1162) * _1043;
        _1179 = _1010;
        _1181 = _1009;
        _1182 = _1008;
        _1183 = _1020;
        _1184 = _1019;
        _1185 = _1018;
        _1186 = _1030;
        _1187 = _1029;
        _1188 = _1028;
        _1189 = _1043;
        _1190 = _1042;
        _1191 = _1041;
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
    }
    else
    {
        _1179 = _1180;
        _1181 = _1180;
        _1182 = _1180;
        _1183 = _1180;
        _1184 = _1180;
        _1185 = _1180;
        _1186 = _1180;
        _1187 = _1180;
        _1188 = _1180;
        _1189 = _1180;
        _1190 = _1180;
        _1191 = _1180;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1219 = fma(_879, cbModelParam._m0[30u].z, fma(_875, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _871));
        float _1223 = fma(_879, cbModelParam._m0[31u].z, fma(_875, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _871));
        float _1227 = fma(_879, cbModelParam._m0[32u].z, fma(_875, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _871));
        float _1250 = _871 + _661;
        float _1251 = _875 + _662;
        float _1252 = _879 + _663;
        float _1262 = fma(_1252, cbModelParam._m0[30u].z, fma(_1251, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1250)) - _1219;
        float _1263 = fma(_1252, cbModelParam._m0[31u].z, fma(_1251, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1250)) - _1223;
        float _1264 = fma(_1252, cbModelParam._m0[32u].z, fma(_1251, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1250)) - _1227;
        float _1268 = inversesqrt(dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264)));
        float _1281 = ((_1268 * _1262) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1219 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1268 * _1263) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1223 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1268 * _1264) / cbModelParam._m0[35u].z) + ((((((_1227 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1281, _1282, _1283), 0.0);
        float _1318 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1285.x + (-0.5));
        float _1320 = _1318 * (_1285.y + (-0.5));
        float _1321 = _1318 * (_1285.z + (-0.5));
        float _1328 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1292.x + (-0.5));
        float _1330 = _1328 * (_1292.y + (-0.5));
        float _1331 = _1328 * (_1292.z + (-0.5));
        float _1338 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1299.x + (-0.5));
        float _1340 = _1338 * (_1299.y + (-0.5));
        float _1341 = _1338 * (_1299.z + (-0.5));
        float _1348 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1306.x + (-0.5));
        float _1350 = _1348 * (_1306.y + (-0.5));
        float _1351 = _1348 * (_1306.z + (-0.5));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = _1319 * 0.5;
        float _1356 = _1329 * 0.5;
        float _1357 = _1339 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_661, _662, _663), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3816 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1382 + 1.0))) + _1387) * _1352;
        float _1397 = _1320 * 0.5;
        float _1398 = _1330 * 0.5;
        float _1399 = _1340 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_661, _662, _663), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _3849 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1424 + 1.0))) + _1429) * _1353;
        float _1439 = _1321 * 0.5;
        float _1440 = _1331 * 0.5;
        float _1441 = _1341 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_661, _662, _663), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _3882 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1466 + 1.0))) + _1471) * _1354;
        _1488 = _1321;
        _1489 = _1320;
        _1490 = _1319;
        _1491 = _1331;
        _1492 = _1330;
        _1493 = _1329;
        _1494 = _1341;
        _1495 = _1340;
        _1496 = _1339;
        _1497 = _1354;
        _1498 = _1353;
        _1499 = _1352;
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
    }
    else
    {
        _1488 = _1180;
        _1489 = _1180;
        _1490 = _1180;
        _1491 = _1180;
        _1492 = _1180;
        _1493 = _1180;
        _1494 = _1180;
        _1495 = _1180;
        _1496 = _1180;
        _1497 = _1180;
        _1498 = _1180;
        _1499 = _1180;
        _1500 = 0.0;
        _1501 = 0.0;
        _1502 = 0.0;
    }
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1192)) + _1192;
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1193)) + _1193;
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1194)) + _1194;
    float _1535 = fma(_1514, cbSceneParam._m0[89u].z, fma(_1513, cbSceneParam._m0[89u].y, _1512 * cbSceneParam._m0[89u].x));
    float _1538 = fma(_1514, cbSceneParam._m0[90u].z, fma(_1513, cbSceneParam._m0[90u].y, _1512 * cbSceneParam._m0[90u].x));
    float _1541 = fma(_1514, cbSceneParam._m0[91u].z, fma(_1513, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1512));
    float _1556 = _819 * 0.5;
    float _1557 = _820 * 0.5;
    float _1558 = _821 * 0.5;
    float _1559 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1562 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1565 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1599;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1572 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1179, _1183, _1186, _1189));
        float _1576 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1181, _1184, _1187, _1190));
        float _1580 = dot(vec4(_1556, _1557, _1558, 1.0), vec4(_1182, _1185, _1188, _1191));
        float _1587 = dot(vec4(cbModelParam._m0[39u]), vec4(_1556, _1557, _1558, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1587) ? 0.0 : (isnan(0.0) ? _1587 : max(0.0, _1587))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1610;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1601 = dot(vec4(cbModelParam._m0[40u]), vec4(_1556, _1557, _1558, 1.0));
        _1610 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1601) ? 0.0 : (isnan(0.0) ? _1601 : max(0.0, _1601))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1610 = 1.0;
    }
    float _1614 = (_1610 * cbModelParam._m0[1u].x) + (_1599 * (1.0 - cbModelParam._m0[1u].x));
    float _1624 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _664);
    float _1625 = isnan(_1624) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1624 : min(cbModelParam._m0[25u].z, _1624));
    float _1707;
    float _1709;
    float _1711;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1674 = fma(_879, cbModelParam._m0[13u].z, fma(_875, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871)) + cbModelParam._m0[13u].w;
        float _1678 = fma(_879, cbModelParam._m0[14u].z, fma(_875, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871)) + cbModelParam._m0[14u].w;
        float _1682 = fma(_879, cbModelParam._m0[15u].z, fma(_875, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871)) + cbModelParam._m0[15u].w;
        float _1685 = fma(_821, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819));
        float _1688 = fma(_821, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819));
        float _1691 = fma(_821, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819));
        float _1719;
        if (_1685 > 0.0)
        {
            _1719 = abs((1.0 - _1674) / _1685);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1674 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1719 = frontier_phi_14_12_ladder;
        }
        float _1920;
        if (_1688 > 0.0)
        {
            _1920 = abs((1.0 - _1678) / _1688);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1678 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1920 = frontier_phi_23_19_ladder;
        }
        float _2163;
        if (_1691 > 0.0)
        {
            _2163 = abs((1.0 - _1682) / _1691);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1682 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2163 = frontier_phi_35_30_ladder;
        }
        float _2165 = isnan(_1920) ? _1719 : (isnan(_1719) ? _1920 : min(_1719, _1920));
        float _2166 = isnan(_2163) ? _2165 : (isnan(_2165) ? _2163 : min(_2165, _2163));
        float _2170 = (_2166 * _1685) + _1674;
        float _2171 = (_2166 * _1688) + _1678;
        float _2172 = (_2166 * _1691) + _1682;
        float _2173 = _2166 * 9.9999997473787516355514526367188e-05;
        float _2175 = (-1.0) - _2173;
        float _2177 = _2173 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2172 > _2177) || ((_2172 < _2175) || ((_2171 > _2177) || ((_2171 < _2175) || ((_2170 < _2175) || (_2170 > _2177))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2296 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2172, cbModelParam._m0[9u].z, fma(_2171, cbModelParam._m0[9u].y, _2170 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2172, cbModelParam._m0[10u].z, fma(_2171, cbModelParam._m0[10u].y, _2170 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2172, cbModelParam._m0[11u].z, fma(_2171, cbModelParam._m0[11u].y, _2170 * cbModelParam._m0[11u].x))), _1625);
            frontier_phi_13_35_ladder = _2296.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2296.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2296.x * cbModelParam._m0[1u].y;
        }
        _1707 = frontier_phi_13_35_ladder_2;
        _1709 = frontier_phi_13_35_ladder_1;
        _1711 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1695 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_819, _820, _821), _1625);
        _1707 = _1695.x * cbModelParam._m0[1u].y;
        _1709 = _1695.y * cbModelParam._m0[1u].y;
        _1711 = _1695.z * cbModelParam._m0[1u].y;
    }
    float _1715 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _664);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1715 : min(cbModelParam._m0[25u].w, _1715));
    float _1806;
    float _1808;
    float _1810;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1770 = fma(_879, cbModelParam._m0[21u].z, fma(_875, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871)) + cbModelParam._m0[21u].w;
        float _1774 = fma(_879, cbModelParam._m0[22u].z, fma(_875, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871)) + cbModelParam._m0[22u].w;
        float _1778 = fma(_879, cbModelParam._m0[23u].z, fma(_875, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871)) + cbModelParam._m0[23u].w;
        float _1781 = fma(_821, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819));
        float _1784 = fma(_821, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819));
        float _1787 = fma(_821, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819));
        float _1925;
        if (_1781 > 0.0)
        {
            _1925 = abs((1.0 - _1770) / _1781);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1770 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1925 = frontier_phi_25_21_ladder;
        }
        float _2190;
        if (_1784 > 0.0)
        {
            _2190 = abs((1.0 - _1774) / _1784);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1774 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2190 = frontier_phi_37_32_ladder;
        }
        float _2395;
        if (_1787 > 0.0)
        {
            _2395 = abs((1.0 - _1778) / _1787);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1778 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2395 = frontier_phi_46_43_ladder;
        }
        float _2397 = isnan(_2190) ? _1925 : (isnan(_1925) ? _2190 : min(_1925, _2190));
        float _2398 = isnan(_2395) ? _2397 : (isnan(_2397) ? _2395 : min(_2397, _2395));
        float _2402 = (_2398 * _1781) + _1770;
        float _2403 = (_2398 * _1784) + _1774;
        float _2404 = (_2398 * _1787) + _1778;
        float _2405 = _2398 * 9.9999997473787516355514526367188e-05;
        float _2406 = (-1.0) - _2405;
        float _2408 = _2405 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2404 > _2408) || ((_2404 < _2406) || ((_2403 > _2408) || ((_2403 < _2406) || ((_2402 < _2406) || (_2402 > _2408))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2603 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2404, cbModelParam._m0[17u].z, fma(_2403, cbModelParam._m0[17u].y, _2402 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2404, cbModelParam._m0[18u].z, fma(_2403, cbModelParam._m0[18u].y, _2402 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2404, cbModelParam._m0[19u].z, fma(_2403, cbModelParam._m0[19u].y, _2402 * cbModelParam._m0[19u].x))), _1716);
            frontier_phi_22_46_ladder = _2603.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2603.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2603.x * cbModelParam._m0[1u].z;
        }
        _1806 = frontier_phi_22_46_ladder_2;
        _1808 = frontier_phi_22_46_ladder_1;
        _1810 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_819, _820, _821), _1716);
        _1806 = _1790.x * cbModelParam._m0[1u].z;
        _1808 = _1790.y * cbModelParam._m0[1u].z;
        _1810 = _1790.z * cbModelParam._m0[1u].z;
    }
    float _1822 = ((((1.0 - _839) * ((_827 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_839 * _827)) * _811;
    float _1823 = _1822 * ((cbModelParam._m0[1u].w * (_1806 - _1707)) + _1707);
    float _1824 = _1822 * ((cbModelParam._m0[1u].w * (_1808 - _1709)) + _1709);
    float _1825 = _1822 * ((cbModelParam._m0[1u].w * (_1810 - _1711)) + _1711);
    float _1828 = fma(_1825, cbSceneParam._m0[89u].z, fma(_1824, cbSceneParam._m0[89u].y, _1823 * cbSceneParam._m0[89u].x));
    float _1831 = fma(_1825, cbSceneParam._m0[90u].z, fma(_1824, cbSceneParam._m0[90u].y, _1823 * cbSceneParam._m0[90u].x));
    float _1834 = fma(_1825, cbSceneParam._m0[91u].z, fma(_1824, cbSceneParam._m0[91u].y, _1823 * cbSceneParam._m0[91u].x));
    uvec4 _1844 = floatBitsToUint(cbInstanceData._m0[_239 + 5u]);
    uint _1846 = _1844.x * 14u;
    uint _1847 = _1846 + 13u;
    float _1854 = _811 + (-1.0);
    float _1859 = (cbLight._m0[_1847].x * _1854) + 1.0;
    float _1860 = (cbLight._m0[_1847].y * _1854) + 1.0;
    float _1861 = (cbLight._m0[_1847].z * _1854) + 1.0;
    float _1862 = (cbLight._m0[_1847].w * _1854) + 1.0;
    uint _1863 = _1846 + 5u;
    float _1869 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
    uint _1873 = _1846 + 4u;
    float _1879 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    uint _1883 = _1846 | 1u;
    float _1894 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_661, _662, _663));
    float _1897 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_661, _662, _663));
    float _4018 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _4029 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1902 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.3183098733425140380859375;
    float _1904 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1911 = ((cbLight._m0[_1863].x * _1869) * _1904) + ((cbLight._m0[_1873].x * _1879) * _1902);
    float _1912 = ((_1869 * cbLight._m0[_1863].y) * _1904) + ((_1879 * cbLight._m0[_1873].y) * _1902);
    float _1913 = ((_1869 * cbLight._m0[_1863].z) * _1904) + ((_1879 * cbLight._m0[_1873].z) * _1902);
    uvec4 _1917 = floatBitsToUint(cbLight._m0[_1846 + 12u]);
    bool _1919 = _1917.x == 0u;
    float _1930;
    float _1932;
    float _1934;
    if (_1919)
    {
        _1930 = _1911;
        _1932 = _1912;
        _1934 = _1913;
    }
    else
    {
        uint _1938 = _1846 + 6u;
        float _1954 = (dot(vec3(cbLight._m0[_1846 + 2u].xyz), vec3(_661, _662, _663)) * 0.5) + 0.5;
        float _1955 = _1954 * _1954;
        float _4040 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1957 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _1930 = (((cbLight._m0[_1938].x * 0.3183098733425140380859375) * _1956) * _1957) + _1911;
        _1932 = (((cbLight._m0[_1938].y * 0.3183098733425140380859375) * _1956) * _1957) + _1912;
        _1934 = (((cbLight._m0[_1938].z * 0.3183098733425140380859375) * _1956) * _1957) + _1913;
    }
    bool _1937 = _1917.y == 0u;
    float _1975;
    float _1977;
    float _1979;
    if (_1937)
    {
        _1975 = _1930;
        _1977 = _1932;
        _1979 = _1934;
    }
    else
    {
        uint _2134 = _1846 + 7u;
        float _2150 = (dot(vec3(cbLight._m0[_1846 + 3u].xyz), vec3(_661, _662, _663)) * 0.5) + 0.5;
        float _2151 = _2150 * _2150;
        float _4056 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2152 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2153 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _1975 = (((cbLight._m0[_2134].x * 0.3183098733425140380859375) * _2152) * _2153) + _1930;
        _1977 = (((cbLight._m0[_2134].y * 0.3183098733425140380859375) * _2152) * _2153) + _1932;
        _1979 = (((cbLight._m0[_2134].z * 0.3183098733425140380859375) * _2152) * _2153) + _1934;
    }
    uint _1982 = _1846 + 8u;
    float _1995 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _664) * 0.949999988079071044921875);
    float _1996 = _1995 * _1995;
    float _1997 = cbLight._m0[_1846].x + _740;
    float _1998 = cbLight._m0[_1846].y + _741;
    float _1999 = cbLight._m0[_1846].z + _742;
    float _2003 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
    float _2004 = _2003 * _1997;
    float _2005 = _2003 * _1998;
    float _2006 = _2003 * _1999;
    float _2007 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_1846].xyz));
    float _4072 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _2011 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _2012 = dot(vec3(_661, _662, _663), vec3(_2004, _2005, _2006));
    float _4094 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _2016 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2004, _2005, _2006));
    float _4105 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2020 = _1996 * _1996;
    float _2024 = ((_2015 * _2015) * (_2020 + (-1.0))) + 1.0;
    float _2035 = (exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2036 = 1.0 - _1996;
    float _2047 = (0.5 / (((_2011 * ((_2010 * _2036) + _1996)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2036) + _1996) * _2010))) * _2010;
    float _4116 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2020 / ((_2024 * _2024) * 3.141590118408203125));
    uint _2060 = _1846 + 9u;
    float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _664) * 0.949999988079071044921875);
    float _2072 = _2071 * _2071;
    float _2073 = cbLight._m0[_1883].x + _740;
    float _2074 = cbLight._m0[_1883].y + _741;
    float _2075 = cbLight._m0[_1883].z + _742;
    float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
    float _2080 = _2079 * _2073;
    float _2081 = _2079 * _2074;
    float _2082 = _2079 * _2075;
    float _2083 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_1883].xyz));
    float _4127 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2087 = dot(vec3(_661, _662, _663), vec3(_2080, _2081, _2082));
    float _4138 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_2080, _2081, _2082));
    float _4149 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2072 * _2072;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2108 = (exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2109 = 1.0 - _2072;
    float _2119 = (0.5 / (((_2011 * ((_2086 * _2109) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2109) + _2072) * _2086))) * _2086;
    float _4160 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2121 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    float _2131 = (((_2108 * cbLight._m0[_2060].x) * _2121) * _1869) + (((_2035 * cbLight._m0[_1982].x) * _2049) * _1879);
    float _2132 = (((_2108 * cbLight._m0[_2060].y) * _2121) * _1869) + (((_2035 * cbLight._m0[_1982].y) * _2049) * _1879);
    float _2133 = (((_2108 * cbLight._m0[_2060].z) * _2121) * _1869) + (((_2035 * cbLight._m0[_1982].z) * _2049) * _1879);
    float _2195;
    float _2197;
    float _2199;
    if (_1919)
    {
        _2195 = _2131;
        _2197 = _2132;
        _2199 = _2133;
    }
    else
    {
        uint _2201 = _1846 + 2u;
        uint _2205 = _1846 + 10u;
        float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _664) * 0.949999988079071044921875);
        float _2220 = _2219 * _2219;
        float _2221 = cbLight._m0[_2201].x + _740;
        float _2222 = cbLight._m0[_2201].y + _741;
        float _2223 = cbLight._m0[_2201].z + _742;
        float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
        float _2228 = _2227 * _2221;
        float _2229 = _2227 * _2222;
        float _2230 = _2227 * _2223;
        float _2231 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2201].xyz));
        float _4171 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2235 = dot(vec3(_661, _662, _663), vec3(_2228, _2229, _2230));
        float _4182 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2239 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2228, _2229, _2230));
        float _4193 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2243 = _2220 * _2220;
        float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
        float _2256 = (exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2257 = 1.0 - _2220;
        float _2267 = (0.5 / (((_2011 * ((_2234 * _2257) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2257) + _2220) * _2234))) * _2234;
        float _4204 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2269 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
        float _2270 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2195 = (((_2256 * cbLight._m0[_2205].x) * _2269) * _2270) + _2131;
        _2197 = (((_2256 * cbLight._m0[_2205].y) * _2269) * _2270) + _2132;
        _2199 = (((_2256 * cbLight._m0[_2205].z) * _2269) * _2270) + _2133;
    }
    float _2305;
    float _2307;
    float _2309;
    if (_1937)
    {
        _2305 = _2195;
        _2307 = _2197;
        _2309 = _2199;
    }
    else
    {
        uint _2316 = _1846 + 3u;
        uint _2320 = _1846 + 11u;
        float _2334 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2316].w)) * _664) * 0.949999988079071044921875);
        float _2335 = _2334 * _2334;
        float _2336 = cbLight._m0[_2316].x + _740;
        float _2337 = cbLight._m0[_2316].y + _741;
        float _2338 = cbLight._m0[_2316].z + _742;
        float _2342 = inversesqrt(dot(vec3(_2336, _2337, _2338), vec3(_2336, _2337, _2338)));
        float _2343 = _2342 * _2336;
        float _2344 = _2342 * _2337;
        float _2345 = _2342 * _2338;
        float _2346 = dot(vec3(_661, _662, _663), vec3(cbLight._m0[_2316].xyz));
        float _4220 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2350 = dot(vec3(_661, _662, _663), vec3(_2343, _2344, _2345));
        float _4231 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2354 = dot(vec3(cbLight._m0[_2316].xyz), vec3(_2343, _2344, _2345));
        float _4242 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2358 = _2335 * _2335;
        float _2362 = ((_2353 * _2353) * (_2358 + (-1.0))) + 1.0;
        float _2371 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2372 = 1.0 - _2335;
        float _2382 = (0.5 / (((_2011 * ((_2349 * _2372) + _2335)) + 9.9999999392252902907785028219223e-09) + (((_2011 * _2372) + _2335) * _2349))) * _2349;
        float _4253 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2384 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2358 / ((_2362 * _2362) * 3.141590118408203125));
        float _2385 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2305 = (((_2371 * cbLight._m0[_2320].x) * _2384) * _2385) + _2195;
        _2307 = (((_2371 * cbLight._m0[_2320].y) * _2384) * _2385) + _2197;
        _2309 = (((_2371 * cbLight._m0[_2320].z) * _2384) * _2385) + _2199;
    }
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    float _2530;
    if (_1844.y == 0u)
    {
        float _2460 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2461 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2460;
        float _2462 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2460;
        float _2463 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2460;
        uvec4 _2475 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2476 = _2475.x;
        uint _2487 = uint((float(_2475.y) * floor(float(uint(cbSceneParam._m0[85u].y * _749) / _2476))) + floor(float(uint(cbSceneParam._m0[85u].x * _748) / _2476)));
        float _2497 = (log2(_2463 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2498 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        uint _2501 = uint(isnan(14.0) ? _2498 : (isnan(_2498) ? 14.0 : min(_2498, 14.0)));
        uvec4 _2506 = texelFetch(g_lightClusterGridBuffer, int(((_2501 << 2u) + (_2487 << 6u)) >> 2u));
        uint _2507 = _2506.x;
        uint _2508 = _2475.z;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        if (((((1u << ((_2508 >> 4u) & 15u)) + 4294967295u) & _2507) == 0u) || ((_2508 & 240u) == 0u))
        {
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
            _2614 = 0.0;
            _2616 = 0.0;
            _2618 = 0.0;
        }
        else
        {
            float _2609;
            float _2611;
            float _2613;
            float _2615;
            float _2617;
            float _2619;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            uint _2759 = 0u;
            uint _2768;
            bool _2769;
            for (;;)
            {
                _2768 = texelFetch(g_lightClassification, int((((_2501 << 5u) + (_2487 << 9u)) + (_2759 << 2u)) >> 2u)).x;
                _2769 = _2768 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2769)
                {
                    frontier_phi_61_pred = _2753;
                    frontier_phi_61_pred_1 = _2758;
                    frontier_phi_61_pred_2 = _2757;
                    frontier_phi_61_pred_3 = _2756;
                    frontier_phi_61_pred_4 = _2755;
                    frontier_phi_61_pred_5 = _2754;
                }
                else
                {
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    uint _2883;
                    _2877 = _2753;
                    _2878 = _2754;
                    _2879 = _2755;
                    _2880 = _2756;
                    _2881 = _2757;
                    _2882 = _2758;
                    _2883 = _2768;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    for (;;)
                    {
                        uint _2887 = uint(findLSB(_2883)) + (_2759 << 5u);
                        uint _2884 = (_2883 + 4294967295u) & _2883;
                        uint _2889 = _2887 * 48u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2889)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2889 + 3u)).x));
                        uint _2909 = (_2887 * 48u) + 4u;
                        vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 3u)).x));
                        uint _2928 = (_2887 * 48u) + 8u;
                        vec3 _2939 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2928)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2928 + 2u)).x));
                        float _2943 = _2903.x - _2461;
                        float _2944 = _2903.y - _2462;
                        float _2945 = _2903.z - _2463;
                        float _2946 = dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945));
                        float _2949 = inversesqrt(_2946);
                        float _2950 = _2949 * _2943;
                        float _2951 = _2949 * _2944;
                        float _2952 = _2949 * _2945;
                        float _2953 = dot(vec3(_767, _770, _773), vec3(_2950, _2951, _2952));
                        float _2958 = 1.0 - (_2946 * _2903.w);
                        float _4279 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2959 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2960 = sqrt(_2946) * _2922.w;
                        float _2963 = 1.39999997615814208984375 / (_2960 + 1.39999997615814208984375);
                        float _2964 = _2963 * _2963;
                        float _2967 = ((1.0 - _2964) * _2953) + _2964;
                        float _2970 = _2960 * _2960;
                        float _2974 = ((isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0))) * _2959) / ((_2970 * 0.699999988079071044921875) + 1.0);
                        float _2978 = (-0.0) - _2461;
                        float _2979 = (-0.0) - _2462;
                        float _2980 = (-0.0) - _2463;
                        float _2984 = inversesqrt(dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980)));
                        float _2985 = _2984 * _2978;
                        float _2986 = _2984 * _2979;
                        float _2987 = _2984 * _2980;
                        float _2995 = exp2(log2(1.0 / ((_2970 * 3.5) + 5.0)) * 0.25);
                        float _2996 = 1.0 - _827;
                        float _3003 = sqrt(1.0 - ((1.0 - (_2996 * _2996)) * (1.0 - (_2995 * _2995))));
                        float _3004 = _3003 * _3003;
                        float _3005 = _3004 * _3004;
                        float _3006 = _2985 + _2950;
                        float _3007 = _2986 + _2951;
                        float _3008 = _2987 + _2952;
                        float _3012 = inversesqrt(dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008)));
                        float _3016 = dot(vec3(_767, _770, _773), vec3(_2985, _2986, _2987));
                        float _4295 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3019 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _3020 = dot(vec3(_767, _770, _773), vec3(_3012 * _3006, _3012 * _3007, _3012 * _3008));
                        float _4306 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3023 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3027 = ((_3023 * _3023) * (_3005 + (-1.0))) + 1.0;
                        float _3028 = _2963 * _3004;
                        float _3029 = _3028 * _3028;
                        float _3032 = ((1.0 - _3029) * _2953) + _3029;
                        float _4317 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3033 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3034 = 1.0 - _3004;
                        float _3044 = (0.5 / (((_3033 * ((_3019 * _3034) + _3004)) + 9.9999999392252902907785028219223e-09) + (((_3033 * _3034) + _3004) * _3019))) * _3033;
                        float _4328 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                        float _3054 = (((_3005 * 3.1415927410125732421875) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) / ((_3027 * _3027) * ((_2970 * 2.1991131305694580078125) + 3.141590118408203125))) * _2959;
                        _2812 = (_2974 * _2922.x) + _2880;
                        _2813 = (_2974 * _2922.y) + _2881;
                        _2814 = (_2974 * _2922.z) + _2882;
                        _2809 = (_3054 * _2939.x) + _2877;
                        _2810 = (_3054 * _2939.y) + _2878;
                        _2811 = (_3054 * _2939.z) + _2879;
                        if (_2884 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2877 = _2809;
                            _2878 = _2810;
                            _2879 = _2811;
                            _2880 = _2812;
                            _2881 = _2813;
                            _2882 = _2814;
                            _2883 = _2884;
                        }
                    }
                    frontier_phi_61_pred = _2809;
                    frontier_phi_61_pred_1 = _2814;
                    frontier_phi_61_pred_2 = _2813;
                    frontier_phi_61_pred_3 = _2812;
                    frontier_phi_61_pred_4 = _2811;
                    frontier_phi_61_pred_5 = _2810;
                }
                _2609 = frontier_phi_61_pred;
                _2619 = frontier_phi_61_pred_1;
                _2617 = frontier_phi_61_pred_2;
                _2615 = frontier_phi_61_pred_3;
                _2613 = frontier_phi_61_pred_4;
                _2611 = frontier_phi_61_pred_5;
                uint _2760 = _2759 + 1u;
                if (_2760 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2753 = _2609;
                    _2754 = _2611;
                    _2755 = _2613;
                    _2756 = _2615;
                    _2757 = _2617;
                    _2758 = _2619;
                    _2759 = _2760;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
            _2614 = _2615;
            _2616 = _2617;
            _2618 = _2619;
        }
        uvec4 _2622 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2623 = _2622.z;
        uint _2625 = (_2623 >> 8u) & 15u;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        if (((4294967295u << _2625) & _2507) == 0u)
        {
            _2721 = _2608;
            _2723 = _2610;
            _2725 = _2612;
            _2727 = _2614;
            _2729 = _2616;
            _2731 = _2618;
        }
        else
        {
            float _2746 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
            float _2747 = _2746 * _2461;
            float _2748 = _2746 * _2462;
            float _2749 = _2746 * _2463;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2625 < ((_2623 >> 12u) & 15u))
            {
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2732;
                float _2860 = _2608;
                float _2861 = _2610;
                float _2862 = _2612;
                float _2863 = _2614;
                float _2864 = _2616;
                float _2865 = _2618;
                uint _2866 = _2625;
                uint _2875;
                bool _2876;
                for (;;)
                {
                    _2875 = texelFetch(g_lightClassification, int((((_2501 << 5u) + (_2487 << 9u)) + (_2866 << 2u)) >> 2u)).x;
                    _2876 = _2875 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2876)
                    {
                        frontier_phi_67_pred = _2863;
                        frontier_phi_67_pred_1 = _2864;
                        frontier_phi_67_pred_2 = _2865;
                        frontier_phi_67_pred_3 = _2862;
                        frontier_phi_67_pred_4 = _2861;
                        frontier_phi_67_pred_5 = _2860;
                    }
                    else
                    {
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3072 = _2860;
                        float _3073 = _2861;
                        float _3074 = _2862;
                        float _3075 = _2863;
                        float _3076 = _2864;
                        float _3077 = _2865;
                        uint _3078 = _2875;
                        uint _3079;
                        vec4 _3104;
                        float _3105;
                        vec4 _3120;
                        vec3 _3132;
                        vec4 _3147;
                        vec4 _3163;
                        float _3209;
                        bool _3210;
                        for (;;)
                        {
                            uint _3089 = ((_2866 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3078));
                            _3079 = (_3078 + 4294967295u) & _3078;
                            uint _3091 = _3089 * 40u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            _3105 = _3104.w;
                            uint _3107 = (_3089 * 40u) + 4u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3122 = (_3089 * 40u) + 8u;
                            _3132 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x));
                            uint _3134 = (_3089 * 40u) + 16u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            uint _3150 = (_3089 * 40u) + 20u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3165 = (_3089 * 40u) + 24u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3184 = (_3089 * 40u) + 28u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3209 = fma(_2463, _3197.z, fma(_2462, _3197.y, _3197.x * _2461)) + _3197.w;
                            _3210 = !((fma(_2463, _3178.z, fma(_2462, _3178.y, _3178.x * _2461)) + _3178.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3210)
                            {
                                float _3237 = _3104.x - _2461;
                                float _3238 = _3104.y - _2462;
                                float _3239 = _3104.z - _2463;
                                float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                                float _3243 = inversesqrt(_3240);
                                float _3244 = _3243 * _3237;
                                float _3245 = _3243 * _3238;
                                float _3246 = _3243 * _3239;
                                float _3250 = 1.0 - (_3240 / (_3105 * _3105));
                                float _4339 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3255 = sqrt(_3240) * _3120.w;
                                float _3257 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                                float _3258 = _3257 * _3257;
                                float _3261 = ((1.0 - _3258) * dot(vec3(_3244, _3245, _3246), vec3(_767, _770, _773))) + _3258;
                                float _3264 = _3255 * _3255;
                                float _3268 = (fma(_2463, _3147.z, fma(_2462, _3147.y, _3147.x * _2461)) + _3147.w) / _3209;
                                float _3269 = (fma(_2463, _3163.z, fma(_2462, _3163.y, _3163.x * _2461)) + _3163.w) / _3209;
                                float _3273 = 1.0 - dot(vec2(_3268, _3269), vec2(_3268, _3269));
                                float _4355 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3275 = _3274 * (((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3251) / ((_3264 * 0.699999988079071044921875) + 1.0));
                                float _3287 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                                float _3288 = 1.0 - _827;
                                float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                                float _3296 = _3295 * _3295;
                                float _3297 = _3296 * _3296;
                                float _3298 = _3244 - _2747;
                                float _3299 = _3245 - _2748;
                                float _3300 = _3246 - _2749;
                                float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                                float _3308 = dot(vec3(_767, _770, _773), vec3((-0.0) - _2747, (-0.0) - _2748, (-0.0) - _2749));
                                float _4366 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3311 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3312 = dot(vec3(_767, _770, _773), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                                float _4377 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                                float _3320 = _3257 * _3296;
                                float _3321 = _3320 * _3320;
                                float _3327 = ((1.0 - _3321) * dot(vec3(_767, _770, _773), vec3(_3244, _3245, _3246))) + _3321;
                                float _4388 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3329 = 1.0 - _3296;
                                float _3339 = (0.5 / (((_3328 * ((_3311 * _3329) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3296) * _3311))) * _3328;
                                float _4399 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3349 = (_3274 * _3251) * (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) / ((_3319 * _3319) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3349 * _3132.x;
                                frontier_phi_73_pred_1 = _3349 * _3132.y;
                                frontier_phi_73_pred_2 = _3275 * _3120.z;
                                frontier_phi_73_pred_3 = _3275 * _3120.y;
                                frontier_phi_73_pred_4 = _3275 * _3120.x;
                                frontier_phi_73_pred_5 = _3349 * _3132.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3353 = frontier_phi_73_pred;
                            _3354 = frontier_phi_73_pred_1;
                            _3358 = frontier_phi_73_pred_2;
                            _3357 = frontier_phi_73_pred_3;
                            _3356 = frontier_phi_73_pred_4;
                            _3355 = frontier_phi_73_pred_5;
                            _3062 = _3356 + _3075;
                            _3063 = _3357 + _3076;
                            _3064 = _3358 + _3077;
                            _3059 = _3353 + _3072;
                            _3060 = _3354 + _3073;
                            _3061 = _3355 + _3074;
                            if (_3079 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3063;
                                _3077 = _3064;
                                _3078 = _3079;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3062;
                        frontier_phi_67_pred_1 = _3063;
                        frontier_phi_67_pred_2 = _3064;
                        frontier_phi_67_pred_3 = _3061;
                        frontier_phi_67_pred_4 = _3060;
                        frontier_phi_67_pred_5 = _3059;
                    }
                    _2728 = frontier_phi_67_pred;
                    _2730 = frontier_phi_67_pred_1;
                    _2732 = frontier_phi_67_pred_2;
                    _2726 = frontier_phi_67_pred_3;
                    _2724 = frontier_phi_67_pred_4;
                    _2722 = frontier_phi_67_pred_5;
                    uint _2867 = _2866 + 1u;
                    if (_2867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2860 = _2722;
                        _2861 = _2724;
                        _2862 = _2726;
                        _2863 = _2728;
                        _2864 = _2730;
                        _2865 = _2732;
                        _2866 = _2867;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2730;
                frontier_phi_55_56_ladder_1 = _2732;
                frontier_phi_55_56_ladder_2 = _2728;
                frontier_phi_55_56_ladder_3 = _2726;
                frontier_phi_55_56_ladder_4 = _2724;
                frontier_phi_55_56_ladder_5 = _2722;
            }
            else
            {
                frontier_phi_55_56_ladder = _2616;
                frontier_phi_55_56_ladder_1 = _2618;
                frontier_phi_55_56_ladder_2 = _2614;
                frontier_phi_55_56_ladder_3 = _2612;
                frontier_phi_55_56_ladder_4 = _2610;
                frontier_phi_55_56_ladder_5 = _2608;
            }
            _2721 = frontier_phi_55_56_ladder_5;
            _2723 = frontier_phi_55_56_ladder_4;
            _2725 = frontier_phi_55_56_ladder_3;
            _2727 = frontier_phi_55_56_ladder_2;
            _2729 = frontier_phi_55_56_ladder;
            _2731 = frontier_phi_55_56_ladder_1;
        }
        float _2736 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
        _2520 = (_2736 * _2727) + _1975;
        _2522 = (_2736 * _2729) + _1977;
        _2524 = (_2736 * _2731) + _1979;
        _2526 = ((_2721 * 0.039999999105930328369140625) * _2736) + _2305;
        _2528 = ((_2723 * 0.039999999105930328369140625) * _2736) + _2307;
        _2530 = ((_2725 * 0.039999999105930328369140625) * _2736) + _2309;
    }
    else
    {
        _2520 = _1975;
        _2522 = _1977;
        _2524 = _1979;
        _2526 = _2305;
        _2528 = _2307;
        _2530 = _2309;
    }
    float _4415 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4426 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4437 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    uint _2550 = _239 + 6u;
    float _2558 = _748 / cbSceneParam._m0[86u].x;
    float _2559 = _749 / cbSceneParam._m0[86u].y;
    vec4 _2573 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2558, _2559, (log2((isnan(cbSceneParam._m0[77u].w) ? _682 : (isnan(_682) ? cbSceneParam._m0[77u].w : min(_682, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2575 = _2573.x;
    float _2576 = _2573.y;
    float _2577 = _2573.z;
    float _2578 = _2573.w;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    if (_682 > cbSceneParam._m0[78u].w)
    {
        float _2633 = isnan(_682) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _682 : min(cbSceneParam._m0[80u].w, _682));
        float _2634 = _2633 / _682;
        float _2645 = _2634 * _733;
        float _2646 = _734 * _2634;
        float _2647 = (-0.0) - _2646;
        float _2649 = _2634 * _735;
        float _2651 = (cbSceneParam._m0[77u].w * _2647) / _2633;
        float _2652 = _2651 + cbSceneParam._m0[79u].w;
        float _2653 = cbSceneParam._m0[79u].w - _2646;
        float _2659 = sqrt(((_2645 * _2645) + (_2646 * _2646)) + (_2649 * _2649));
        float _2662 = (1.0 - (cbSceneParam._m0[77u].w / _2633)) * _2659;
        float _2667 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2669 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2822;
        if (abs((_2647 - _2651) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2822 = ((((_2652 > 0.0) ? exp2(_2667 * _2652) : (2.0 - exp2(_2669 * _2652))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2662;
        }
        else
        {
            float _2782 = 1.0 / cbSceneParam._m0[80u].x;
            float _2783 = isnan(_2653) ? _2652 : (isnan(_2652) ? _2653 : max(_2652, _2653));
            float _2784 = isnan(_2653) ? _2652 : (isnan(_2652) ? _2653 : min(_2652, _2653));
            float _2793 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : min(_2783, 0.0));
            float _2794 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : min(_2784, 0.0));
            _2822 = ((abs(_2659 / _2647) * cbSceneParam._m0[80u].y) * ((((_2793 - _2794) * 2.0) - ((exp2(_2667 * (isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0)))) - exp2(_2667 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))))) * _2782)) - ((exp2(_2669 * _2793) - exp2(_2669 * _2794)) * _2782))) + (_2662 * cbSceneParam._m0[80u].z);
        }
        vec4 _2824 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2558, _2559, 1.0), 0.0);
        float _2833 = exp2((_2822 * (-1.44269502162933349609375)) * (1.0 - _2824.w));
        float _2834 = log2(_2833);
        float _2850 = log2(_2578);
        _2671 = (exp2(_2850 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2834 * cbSceneParam._m0[78u].x)) * _2824.x) / cbSceneParam._m0[78u].x)) + _2575;
        _2673 = (exp2(_2850 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2834 * cbSceneParam._m0[78u].y)) * _2824.y) / cbSceneParam._m0[78u].y)) + _2576;
        _2675 = (exp2(_2850 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2834 * cbSceneParam._m0[78u].z)) * _2824.z) / cbSceneParam._m0[78u].z)) + _2577;
        _2677 = _2833 * _2578;
    }
    else
    {
        _2671 = _2575;
        _2673 = _2576;
        _2675 = _2577;
        _2677 = _2578;
    }
    float _2689 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2690 = _2689 == 3.0;
    float _2691 = log2(_2677);
    float _2698 = exp2(_2691 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2520 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _811))) + ((_2526 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1614)) * cbPerFrame._m0[3u].x));
    float _2699 = exp2(_2691 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2522 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _811))) + ((_2528 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1614)) * cbPerFrame._m0[3u].x));
    float _2700 = exp2(_2691 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2524 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _811))) + ((_2530 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1614)) * cbPerFrame._m0[3u].x));
    float _2709 = (_2689 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2709 * (_2690 ? _2698 : (_2698 + (cbSceneParam._m0[72u].w * _2671)));
    SV_Target.y = _2709 * (_2690 ? _2699 : (_2699 + (cbSceneParam._m0[72u].w * _2673)));
    SV_Target.z = _2709 * (_2690 ? _2700 : (_2700 + (cbSceneParam._m0[72u].w * _2675)));
    SV_Target.w = cbInstanceData._m0[_2550].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2550].w;
}


