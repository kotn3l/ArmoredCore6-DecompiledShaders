#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1079;
float _3466;
float _3467;
float _3468;
float _3469;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _245 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _246 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3478 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3489 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3500 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _261 = _256 + 1u;
    uint _265 = _256 + 2u;
    float _274 = sqrt(((cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x));
    float _275 = _274 * TEXCOORD.z;
    float _276 = _274 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _275) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _317 = _312.x * cbMtdParam._m0[9u].x;
    float _318 = _312.y * cbMtdParam._m0[9u].y;
    float _319 = _312.z * cbMtdParam._m0[9u].z;
    float _323 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _289.x) * _317;
    float _326 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _289.y) * _318;
    float _329 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _289.z) * _319;
    float _336 = ((_317 - _323) * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) + _323;
    float _337 = ((_318 - _326) * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) + _326;
    float _338 = ((_319 - _329) * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) + _329;
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _275) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _276) + cbTextureTilingScale._m0[20u].w));
    vec4 _382 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _386 = _382.z;
    float _390 = (_382.x * 2.0) + (-1.0);
    float _391 = (_382.y * 2.0) + (-1.0);
    float _392 = dot(vec2(_390, _391), vec2(_390, _391));
    float _3511 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _397 = sqrt(1.0 - (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))));
    float _402 = _390 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_356.x * 2.0) + (-1.0)));
    float _403 = _391 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_356.y * 2.0) + (-1.0)));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _275) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _422 = _420.x;
    float _423 = 1.0 - _422;
    float _439 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_422 - _423) * cbMtdParam._m0[24u].z) + _423) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3522 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _440 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _447 = (_440 * (cbMtdParam._m0[17u].x - _336)) + _336;
    float _448 = (_440 * (cbMtdParam._m0[17u].y - _337)) + _337;
    float _449 = (_440 * (cbMtdParam._m0[17u].z - _338)) + _338;
    float _454 = (((_356.z - _386) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _386;
    vec4 _467 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _275) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _276) + cbTextureTilingScale._m0[15u].w));
    float _474 = (_467.x * 2.0) + (-1.0);
    float _475 = (_467.y * 2.0) + (-1.0);
    float _476 = dot(vec2(_474, _475), vec2(_474, _475));
    float _3533 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _484 = (_440 * (_467.z - _454)) + _454;
    float _496 = (((_474 - _402) + (cbMtdParam._m0[21u].x * _402)) * _440) + _402;
    float _497 = (((_475 - _403) + (cbMtdParam._m0[21u].x * _403)) * _440) + _403;
    float _498 = (_440 * (sqrt(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) - _397)) + _397;
    float _500 = cbMtdParam._m0[22u].x + _382.w;
    float _503 = fma(_498, _222 * NORMAL.x, fma(_497, _229 * TANGENT.x, (_215 * _207) * _496));
    float _506 = fma(_498, _222 * NORMAL.y, fma(_497, _229 * TANGENT.y, (_215 * _208) * _496));
    float _509 = fma(_498, _222 * NORMAL.z, fma(_497, _229 * TANGENT.z, (_215 * _209) * _496));
    float _513 = inversesqrt(dot(vec3(_503, _506, _509), vec3(_503, _506, _509)));
    float _514 = _513 * _503;
    float _515 = _513 * _506;
    float _516 = _513 * _509;
    float _3544 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _517 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3566 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3577 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3588 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _535 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _586 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _576);
    float _587 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _576);
    float _588 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _576);
    float _592 = inversesqrt(dot(vec3(_586, _587, _588), vec3(_586, _587, _588)));
    float _593 = _586 * _592;
    float _594 = _587 * _592;
    float _595 = _588 * _592;
    vec4 _600 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _602 = _600.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _759 = sqrt(((_586 * _586) + (_587 * _587)) + (_588 * _588));
        float _765 = (cbMatDynParam._m0[5u].x * _759) + cbMatDynParam._m0[5u].y;
        float _3599 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _770 = (cbMatDynParam._m0[5u].z * _759) + cbMatDynParam._m0[5u].w;
        float _3610 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) - _766)) + _766) < ((_602 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _614 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _615 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _635 = fma(_516, cbSceneParam._m0[5u].z, fma(_515, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _514));
    float _638 = fma(_516, cbSceneParam._m0[6u].z, fma(_515, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _514));
    float _641 = fma(_516, cbSceneParam._m0[7u].z, fma(_515, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _514));
    uint _654 = _256 + 9u;
    uint _655 = _654 + uint(cbMatDynParam._m0[0u].w);
    float _661 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_655].x;
    float _662 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_655].y;
    float _663 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_655].z;
    float _3621 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    vec4 _675 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _614, cbSceneParam._m0[86u].y * _615));
    float _679 = ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * TEXCOORD_5.w) * _675.x;
    float _680 = dot(vec3(_514, _515, _516), vec3(_593, _594, _595));
    float _683 = _680 * 2.0;
    float _687 = (_683 * _514) - _593;
    float _688 = (_683 * _515) - _594;
    float _689 = (_683 * _516) - _595;
    float _693 = abs(dot(vec3(_593, _594, _595), vec3(_514, _515, _516)));
    float _3654 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _695 = sqrt(_517);
    float _708 = exp2((_695 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_695 * 3.0));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1078;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _803 = fma(_748, cbModelParam._m0[26u].z, fma(_744, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740));
        float _807 = fma(_748, cbModelParam._m0[27u].z, fma(_744, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740));
        float _811 = fma(_748, cbModelParam._m0[28u].z, fma(_744, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740));
        float _836 = _740 + _514;
        float _837 = _744 + _515;
        float _838 = _748 + _516;
        float _848 = fma(_838, cbModelParam._m0[26u].z, fma(_837, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _836)) - _803;
        float _849 = fma(_838, cbModelParam._m0[27u].z, fma(_837, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _836)) - _807;
        float _850 = fma(_838, cbModelParam._m0[28u].z, fma(_837, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _836)) - _811;
        float _854 = inversesqrt(dot(vec3(_848, _849, _850), vec3(_848, _849, _850)));
        float _867 = ((_854 * _848) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_803 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _868 = ((_854 * _849) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_807 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _869 = ((_854 * _850) / cbModelParam._m0[34u].z) + ((((((_811 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _886 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        vec4 _893 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_867, _868, _869), 0.0);
        float _906 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_872.x + (-0.5));
        float _908 = _906 * (_872.y + (-0.5));
        float _909 = _906 * (_872.z + (-0.5));
        float _916 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_879.x + (-0.5));
        float _918 = _916 * (_879.y + (-0.5));
        float _919 = _916 * (_879.z + (-0.5));
        float _926 = exp2((_886.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_886.x + (-0.5));
        float _928 = _926 * (_886.y + (-0.5));
        float _929 = _926 * (_886.z + (-0.5));
        float _936 = exp2((_893.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_893.x + (-0.5));
        float _938 = _936 * (_893.y + (-0.5));
        float _939 = _936 * (_893.z + (-0.5));
        float _940 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _941 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _942 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _943 = _907 * 0.5;
        float _944 = _917 * 0.5;
        float _945 = _927 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _960 = (dot(vec3(_514, _515, _516), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _970 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_940 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3702 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_972 + 1.0))) + _977) * _940;
        float _987 = _908 * 0.5;
        float _988 = _918 * 0.5;
        float _989 = _928 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_514, _515, _516), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_941 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3735 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1014 + 1.0))) + _1019) * _941;
        float _1029 = _909 * 0.5;
        float _1030 = _919 * 0.5;
        float _1031 = _929 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_514, _515, _516), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_942 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3768 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1056 + 1.0))) + _1061) * _942;
        _1078 = _909;
        _1080 = _908;
        _1081 = _907;
        _1082 = _919;
        _1083 = _918;
        _1084 = _917;
        _1085 = _929;
        _1086 = _928;
        _1087 = _927;
        _1088 = _942;
        _1089 = _941;
        _1090 = _940;
        _1091 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
        _1092 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1093 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
    }
    else
    {
        _1078 = _1079;
        _1080 = _1079;
        _1081 = _1079;
        _1082 = _1079;
        _1083 = _1079;
        _1084 = _1079;
        _1085 = _1079;
        _1086 = _1079;
        _1087 = _1079;
        _1088 = _1079;
        _1089 = _1079;
        _1090 = _1079;
        _1091 = 0.0;
        _1092 = 0.0;
        _1093 = 0.0;
    }
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1121 = fma(_748, cbModelParam._m0[30u].z, fma(_744, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _740));
        float _1125 = fma(_748, cbModelParam._m0[31u].z, fma(_744, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _740));
        float _1129 = fma(_748, cbModelParam._m0[32u].z, fma(_744, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _740));
        float _1152 = _740 + _514;
        float _1153 = _744 + _515;
        float _1154 = _748 + _516;
        float _1164 = fma(_1154, cbModelParam._m0[30u].z, fma(_1153, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1152)) - _1121;
        float _1165 = fma(_1154, cbModelParam._m0[31u].z, fma(_1153, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1152)) - _1125;
        float _1166 = fma(_1154, cbModelParam._m0[32u].z, fma(_1153, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1152)) - _1129;
        float _1170 = inversesqrt(dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166)));
        float _1183 = ((_1170 * _1164) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1121 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1184 = ((_1170 * _1165) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1125 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1170 * _1166) / cbModelParam._m0[35u].z) + ((((((_1129 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1183, _1184, _1185), 0.0);
        float _1220 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1187.x + (-0.5));
        float _1222 = _1220 * (_1187.y + (-0.5));
        float _1223 = _1220 * (_1187.z + (-0.5));
        float _1230 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1194.x + (-0.5));
        float _1232 = _1230 * (_1194.y + (-0.5));
        float _1233 = _1230 * (_1194.z + (-0.5));
        float _1240 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1201.x + (-0.5));
        float _1242 = _1240 * (_1201.y + (-0.5));
        float _1243 = _1240 * (_1201.z + (-0.5));
        float _1250 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1208.x + (-0.5));
        float _1252 = _1250 * (_1208.y + (-0.5));
        float _1253 = _1250 * (_1208.z + (-0.5));
        float _1254 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1255 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1256 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1257 = _1221 * 0.5;
        float _1258 = _1231 * 0.5;
        float _1259 = _1241 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_514, _515, _516), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1254 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3831 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1284 + 1.0))) + _1289) * _1254;
        float _1299 = _1222 * 0.5;
        float _1300 = _1232 * 0.5;
        float _1301 = _1242 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_514, _515, _516), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1255 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3864 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1326 + 1.0))) + _1331) * _1255;
        float _1341 = _1223 * 0.5;
        float _1342 = _1233 * 0.5;
        float _1343 = _1243 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_514, _515, _516), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1256 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3897 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1368 + 1.0))) + _1373) * _1256;
        _1390 = _1223;
        _1391 = _1222;
        _1392 = _1221;
        _1393 = _1233;
        _1394 = _1232;
        _1395 = _1231;
        _1396 = _1243;
        _1397 = _1242;
        _1398 = _1241;
        _1399 = _1256;
        _1400 = _1255;
        _1401 = _1254;
        _1402 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1403 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1404 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    }
    else
    {
        _1390 = _1079;
        _1391 = _1079;
        _1392 = _1079;
        _1393 = _1079;
        _1394 = _1079;
        _1395 = _1079;
        _1396 = _1079;
        _1397 = _1079;
        _1398 = _1079;
        _1399 = _1079;
        _1400 = _1079;
        _1401 = _1079;
        _1402 = 0.0;
        _1403 = 0.0;
        _1404 = 0.0;
    }
    float _1414 = (cbModelParam._m0[1u].x * (_1402 - _1091)) + _1091;
    float _1415 = (cbModelParam._m0[1u].x * (_1403 - _1092)) + _1092;
    float _1416 = (cbModelParam._m0[1u].x * (_1404 - _1093)) + _1093;
    float _1437 = fma(_1416, cbSceneParam._m0[89u].z, fma(_1415, cbSceneParam._m0[89u].y, _1414 * cbSceneParam._m0[89u].x));
    float _1440 = fma(_1416, cbSceneParam._m0[90u].z, fma(_1415, cbSceneParam._m0[90u].y, _1414 * cbSceneParam._m0[90u].x));
    float _1443 = fma(_1416, cbSceneParam._m0[91u].z, fma(_1415, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1414));
    float _1458 = _687 * 0.5;
    float _1459 = _688 * 0.5;
    float _1460 = _689 * 0.5;
    float _1461 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1392, _1395, _1398, _1401));
    float _1464 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1391, _1394, _1397, _1400));
    float _1467 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1390, _1393, _1396, _1399));
    float _1501;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1474 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1078, _1082, _1085, _1088));
        float _1478 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1080, _1083, _1086, _1089));
        float _1482 = dot(vec4(_1458, _1459, _1460, 1.0), vec4(_1081, _1084, _1087, _1090));
        float _1489 = dot(vec4(cbModelParam._m0[39u]), vec4(_1458, _1459, _1460, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1489) ? 0.0 : (isnan(0.0) ? _1489 : max(0.0, _1489))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1512;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1503 = dot(vec4(cbModelParam._m0[40u]), vec4(_1458, _1459, _1460, 1.0));
        _1512 = dot(vec3(isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1512 = 1.0;
    }
    float _1516 = (_1512 * cbModelParam._m0[1u].x) + (_1501 * (1.0 - cbModelParam._m0[1u].x));
    float _1526 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _517);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1526 : min(cbModelParam._m0[25u].z, _1526));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1575 = fma(_748, cbModelParam._m0[13u].z, fma(_744, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _740)) + cbModelParam._m0[13u].w;
        float _1579 = fma(_748, cbModelParam._m0[14u].z, fma(_744, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _740)) + cbModelParam._m0[14u].w;
        float _1583 = fma(_748, cbModelParam._m0[15u].z, fma(_744, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _740)) + cbModelParam._m0[15u].w;
        float _1586 = fma(_689, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687));
        float _1589 = fma(_689, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687));
        float _1592 = fma(_689, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687));
        float _1620;
        if (_1586 > 0.0)
        {
            _1620 = abs((1.0 - _1575) / _1586);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1575 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1620 = frontier_phi_17_15_ladder;
        }
        float _1845;
        if (_1589 > 0.0)
        {
            _1845 = abs((1.0 - _1579) / _1589);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1579 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1845 = frontier_phi_26_22_ladder;
        }
        float _2091;
        if (_1592 > 0.0)
        {
            _2091 = abs((1.0 - _1583) / _1592);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1583 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2091 = frontier_phi_38_33_ladder;
        }
        float _2093 = isnan(_1845) ? _1620 : (isnan(_1620) ? _1845 : min(_1620, _1845));
        float _2094 = isnan(_2091) ? _2093 : (isnan(_2093) ? _2091 : min(_2093, _2091));
        float _2098 = (_2094 * _1586) + _1575;
        float _2099 = (_2094 * _1589) + _1579;
        float _2100 = (_2094 * _1592) + _1583;
        float _2101 = _2094 * 9.9999997473787516355514526367188e-05;
        float _2103 = (-1.0) - _2101;
        float _2105 = _2101 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2100 > _2105) || ((_2100 < _2103) || ((_2099 > _2105) || ((_2099 < _2103) || ((_2098 < _2103) || (_2098 > _2105))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2224 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2100, cbModelParam._m0[9u].z, fma(_2099, cbModelParam._m0[9u].y, _2098 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2100, cbModelParam._m0[10u].z, fma(_2099, cbModelParam._m0[10u].y, _2098 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2100, cbModelParam._m0[11u].z, fma(_2099, cbModelParam._m0[11u].y, _2098 * cbModelParam._m0[11u].x))), _1527);
            frontier_phi_16_38_ladder = _2224.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2224.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2224.x * cbModelParam._m0[1u].y;
        }
        _1608 = frontier_phi_16_38_ladder_2;
        _1610 = frontier_phi_16_38_ladder_1;
        _1612 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1596 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_687, _688, _689), _1527);
        _1608 = _1596.x * cbModelParam._m0[1u].y;
        _1610 = _1596.y * cbModelParam._m0[1u].y;
        _1612 = _1596.z * cbModelParam._m0[1u].y;
    }
    float _1616 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _517);
    float _1617 = isnan(_1616) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1616 : min(cbModelParam._m0[25u].w, _1616));
    float _1708;
    float _1710;
    float _1712;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1672 = fma(_748, cbModelParam._m0[21u].z, fma(_744, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _740)) + cbModelParam._m0[21u].w;
        float _1676 = fma(_748, cbModelParam._m0[22u].z, fma(_744, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _740)) + cbModelParam._m0[22u].w;
        float _1680 = fma(_748, cbModelParam._m0[23u].z, fma(_744, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _740)) + cbModelParam._m0[23u].w;
        float _1683 = fma(_689, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687));
        float _1686 = fma(_689, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687));
        float _1689 = fma(_689, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687));
        float _1850;
        if (_1683 > 0.0)
        {
            _1850 = abs((1.0 - _1672) / _1683);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1672 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1850 = frontier_phi_28_24_ladder;
        }
        float _2118;
        if (_1686 > 0.0)
        {
            _2118 = abs((1.0 - _1676) / _1686);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1676 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2118 = frontier_phi_40_35_ladder;
        }
        float _2323;
        if (_1689 > 0.0)
        {
            _2323 = abs((1.0 - _1680) / _1689);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1680 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2323 = frontier_phi_49_46_ladder;
        }
        float _2325 = isnan(_2118) ? _1850 : (isnan(_1850) ? _2118 : min(_1850, _2118));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1683) + _1672;
        float _2331 = (_2326 * _1686) + _1676;
        float _2332 = (_2326 * _1689) + _1680;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2333;
        float _2336 = _2333 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2332 > _2336) || ((_2332 < _2334) || ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 < _2334) || (_2330 > _2336))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2531 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2332, cbModelParam._m0[17u].z, fma(_2331, cbModelParam._m0[17u].y, _2330 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2332, cbModelParam._m0[18u].z, fma(_2331, cbModelParam._m0[18u].y, _2330 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2332, cbModelParam._m0[19u].z, fma(_2331, cbModelParam._m0[19u].y, _2330 * cbModelParam._m0[19u].x))), _1617);
            frontier_phi_25_49_ladder = _2531.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2531.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2531.x * cbModelParam._m0[1u].z;
        }
        _1708 = frontier_phi_25_49_ladder_2;
        _1710 = frontier_phi_25_49_ladder_1;
        _1712 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1692 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_687, _688, _689), _1617);
        _1708 = _1692.x * cbModelParam._m0[1u].z;
        _1710 = _1692.y * cbModelParam._m0[1u].z;
        _1712 = _1692.z * cbModelParam._m0[1u].z;
    }
    float _1724 = ((((1.0 - _708) * ((_695 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_708 * _695)) * _679;
    float _1725 = _1724 * ((cbModelParam._m0[1u].w * (_1708 - _1608)) + _1608);
    float _1726 = _1724 * ((cbModelParam._m0[1u].w * (_1710 - _1610)) + _1610);
    float _1727 = _1724 * ((cbModelParam._m0[1u].w * (_1712 - _1612)) + _1612);
    float _1730 = fma(_1727, cbSceneParam._m0[89u].z, fma(_1726, cbSceneParam._m0[89u].y, _1725 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1727, cbSceneParam._m0[90u].z, fma(_1726, cbSceneParam._m0[90u].y, _1725 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1727, cbSceneParam._m0[91u].z, fma(_1726, cbSceneParam._m0[91u].y, _1725 * cbSceneParam._m0[91u].x));
    vec4 _1744 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_614, _615));
    float _1746 = _1744.w;
    float _1758 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1746);
    float _1759 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1746);
    float _1760 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1746);
    uvec4 _1764 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _1766 = _1764.x * 14u;
    uint _1767 = _1766 + 13u;
    float _1774 = _679 + (-1.0);
    float _1779 = (cbLight._m0[_1767].x * _1774) + 1.0;
    float _1780 = (cbLight._m0[_1767].y * _1774) + 1.0;
    float _1781 = (cbLight._m0[_1767].z * _1774) + 1.0;
    float _1782 = (cbLight._m0[_1767].w * _1774) + 1.0;
    uint _1783 = _1766 + 5u;
    float _1789 = isnan(1.0) ? _1780 : (isnan(_1780) ? 1.0 : min(_1780, 1.0));
    uint _1793 = _1766 + 4u;
    float _1803 = isnan(1.0) ? _1779 : (isnan(_1779) ? 1.0 : min(_1779, 1.0));
    uint _1807 = _1766 | 1u;
    float _1818 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_514, _515, _516));
    float _1821 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_514, _515, _516));
    float _4033 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _4044 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1826 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.3183098733425140380859375;
    float _1828 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.3183098733425140380859375;
    float _1835 = ((cbLight._m0[_1783].x * _1789) * _1828) + (((cbLight._m0[_1793].x * _1758) * _1803) * _1826);
    float _1836 = ((_1789 * cbLight._m0[_1783].y) * _1828) + (((cbLight._m0[_1793].y * _1759) * _1803) * _1826);
    float _1837 = ((_1789 * cbLight._m0[_1783].z) * _1828) + (((cbLight._m0[_1793].z * _1760) * _1803) * _1826);
    uvec4 _1842 = floatBitsToUint(cbLight._m0[_1766 + 12u]);
    bool _1844 = _1842.x == 0u;
    float _1855;
    float _1857;
    float _1859;
    if (_1844)
    {
        _1855 = _1835;
        _1857 = _1836;
        _1859 = _1837;
    }
    else
    {
        uint _1863 = _1766 + 6u;
        float _1879 = (dot(vec3(cbLight._m0[_1766 + 2u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _1880 = _1879 * _1879;
        float _4055 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1882 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _1855 = (((cbLight._m0[_1863].x * 0.3183098733425140380859375) * _1881) * _1882) + _1835;
        _1857 = (((cbLight._m0[_1863].y * 0.3183098733425140380859375) * _1881) * _1882) + _1836;
        _1859 = (((cbLight._m0[_1863].z * 0.3183098733425140380859375) * _1881) * _1882) + _1837;
    }
    bool _1862 = _1842.y == 0u;
    float _1900;
    float _1902;
    float _1904;
    if (_1862)
    {
        _1900 = _1855;
        _1902 = _1857;
        _1904 = _1859;
    }
    else
    {
        uint _2062 = _1766 + 7u;
        float _2078 = (dot(vec3(cbLight._m0[_1766 + 3u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _2079 = _2078 * _2078;
        float _4071 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2080 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _2081 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
        _1900 = (((cbLight._m0[_2062].x * 0.3183098733425140380859375) * _2080) * _2081) + _1855;
        _1902 = (((cbLight._m0[_2062].y * 0.3183098733425140380859375) * _2080) * _2081) + _1857;
        _1904 = (((cbLight._m0[_2062].z * 0.3183098733425140380859375) * _2080) * _2081) + _1859;
    }
    uint _1907 = _1766 + 8u;
    float _1920 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1766].w)) * _517) * 0.949999988079071044921875);
    float _1921 = _1920 * _1920;
    float _1922 = cbLight._m0[_1766].x + _593;
    float _1923 = cbLight._m0[_1766].y + _594;
    float _1924 = cbLight._m0[_1766].z + _595;
    float _1928 = inversesqrt(dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924)));
    float _1929 = _1928 * _1922;
    float _1930 = _1928 * _1923;
    float _1931 = _1928 * _1924;
    float _1932 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1766].xyz));
    float _4087 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _4098 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _1936 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _1937 = dot(vec3(_514, _515, _516), vec3(_1929, _1930, _1931));
    float _4109 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _1941 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_1929, _1930, _1931));
    float _4120 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1945 = _1921 * _1921;
    float _1949 = ((_1940 * _1940) * (_1945 + (-1.0))) + 1.0;
    float _1960 = (exp2(log2(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1961 = 1.0 - _1921;
    float _1972 = (0.5 / (((_1936 * ((_1935 * _1961) + _1921)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _1961) + _1921) * _1935))) * _1935;
    float _4131 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1974 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1945 / ((_1949 * _1949) * 3.141590118408203125));
    uint _1988 = _1766 + 9u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _517) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1807].x + _593;
    float _2002 = cbLight._m0[_1807].y + _594;
    float _2003 = cbLight._m0[_1807].z + _595;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1807].xyz));
    float _4142 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2015 = dot(vec3(_514, _515, _516), vec3(_2008, _2009, _2010));
    float _4153 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2019 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_2008, _2009, _2010));
    float _4164 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2023 = _2000 * _2000;
    float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
    float _2036 = (exp2(log2(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2037 = 1.0 - _2000;
    float _2047 = (0.5 / (((_1936 * ((_2014 * _2037) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _2037) + _2000) * _2014))) * _2014;
    float _4175 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
    float _2059 = (((_2036 * cbLight._m0[_1988].x) * _2049) * _1789) + ((((cbLight._m0[_1907].x * _1758) * _1960) * _1974) * _1803);
    float _2060 = (((_2036 * cbLight._m0[_1988].y) * _2049) * _1789) + ((((cbLight._m0[_1907].y * _1759) * _1960) * _1974) * _1803);
    float _2061 = (((_2036 * cbLight._m0[_1988].z) * _2049) * _1789) + ((((cbLight._m0[_1907].z * _1760) * _1960) * _1974) * _1803);
    float _2123;
    float _2125;
    float _2127;
    if (_1844)
    {
        _2123 = _2059;
        _2125 = _2060;
        _2127 = _2061;
    }
    else
    {
        uint _2129 = _1766 + 2u;
        uint _2133 = _1766 + 10u;
        float _2147 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _517) * 0.949999988079071044921875);
        float _2148 = _2147 * _2147;
        float _2149 = cbLight._m0[_2129].x + _593;
        float _2150 = cbLight._m0[_2129].y + _594;
        float _2151 = cbLight._m0[_2129].z + _595;
        float _2155 = inversesqrt(dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151)));
        float _2156 = _2155 * _2149;
        float _2157 = _2155 * _2150;
        float _2158 = _2155 * _2151;
        float _2159 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2129].xyz));
        float _4186 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
        float _2162 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2163 = dot(vec3(_514, _515, _516), vec3(_2156, _2157, _2158));
        float _4197 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2166 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2167 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2156, _2157, _2158));
        float _4208 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2171 = _2148 * _2148;
        float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
        float _2184 = (exp2(log2(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2185 = 1.0 - _2148;
        float _2195 = (0.5 / (((_1936 * ((_2162 * _2185) + _2148)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _2185) + _2148) * _2162))) * _2162;
        float _4219 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2197 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
        float _2198 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
        _2123 = (((_2184 * cbLight._m0[_2133].x) * _2197) * _2198) + _2059;
        _2125 = (((_2184 * cbLight._m0[_2133].y) * _2197) * _2198) + _2060;
        _2127 = (((_2184 * cbLight._m0[_2133].z) * _2197) * _2198) + _2061;
    }
    float _2233;
    float _2235;
    float _2237;
    if (_1862)
    {
        _2233 = _2123;
        _2235 = _2125;
        _2237 = _2127;
    }
    else
    {
        uint _2244 = _1766 + 3u;
        uint _2248 = _1766 + 11u;
        float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _517) * 0.949999988079071044921875);
        float _2263 = _2262 * _2262;
        float _2264 = cbLight._m0[_2244].x + _593;
        float _2265 = cbLight._m0[_2244].y + _594;
        float _2266 = cbLight._m0[_2244].z + _595;
        float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
        float _2271 = _2270 * _2264;
        float _2272 = _2270 * _2265;
        float _2273 = _2270 * _2266;
        float _2274 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2244].xyz));
        float _4235 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
        float _2277 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2278 = dot(vec3(_514, _515, _516), vec3(_2271, _2272, _2273));
        float _4246 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        float _2281 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2282 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2271, _2272, _2273));
        float _4257 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2286 = _2263 * _2263;
        float _2290 = ((_2281 * _2281) * (_2286 + (-1.0))) + 1.0;
        float _2299 = (exp2(log2(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2300 = 1.0 - _2263;
        float _2310 = (0.5 / (((_1936 * ((_2277 * _2300) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_1936 * _2300) + _2263) * _2277))) * _2277;
        float _4268 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2312 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2286 / ((_2290 * _2290) * 3.141590118408203125));
        float _2313 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
        _2233 = (((_2299 * cbLight._m0[_2248].x) * _2312) * _2313) + _2123;
        _2235 = (((_2299 * cbLight._m0[_2248].y) * _2312) * _2313) + _2125;
        _2237 = (((_2299 * cbLight._m0[_2248].z) * _2312) * _2313) + _2127;
    }
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_1764.y == 0u)
    {
        float _2388 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2389 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2388;
        float _2390 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2388;
        float _2391 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2388;
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.x;
        uint _2415 = uint((float(_2403.y) * floor(float(uint(cbSceneParam._m0[85u].y * _615) / _2404))) + floor(float(uint(cbSceneParam._m0[85u].x * _614) / _2404)));
        float _2425 = (log2(_2391 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2426 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        uint _2429 = uint(isnan(14.0) ? _2426 : (isnan(_2426) ? 14.0 : min(_2426, 14.0)));
        uvec4 _2434 = texelFetch(g_lightClusterGridBuffer, int(((_2429 << 2u) + (_2415 << 6u)) >> 2u));
        uint _2435 = _2434.x;
        uint _2436 = _2403.z;
        float _2536;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        if (((((1u << ((_2436 >> 4u) & 15u)) + 4294967295u) & _2435) == 0u) || ((_2436 & 240u) == 0u))
        {
            _2536 = 0.0;
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
        }
        else
        {
            float _2537;
            float _2539;
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            uint _2695 = 0u;
            uint _2704;
            bool _2705;
            for (;;)
            {
                _2704 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2695 << 2u)) >> 2u)).x;
                _2705 = _2704 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2705)
                {
                    frontier_phi_66_pred = _2689;
                    frontier_phi_66_pred_1 = _2694;
                    frontier_phi_66_pred_2 = _2693;
                    frontier_phi_66_pred_3 = _2692;
                    frontier_phi_66_pred_4 = _2691;
                    frontier_phi_66_pred_5 = _2690;
                }
                else
                {
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    uint _2840;
                    _2834 = _2689;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2692;
                    _2838 = _2693;
                    _2839 = _2694;
                    _2840 = _2704;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    for (;;)
                    {
                        uint _2844 = uint(findLSB(_2840)) + (_2695 << 5u);
                        uint _2841 = (_2840 + 4294967295u) & _2840;
                        uint _2846 = _2844 * 48u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2866 = (_2844 * 48u) + 4u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2885 = (_2844 * 48u) + 8u;
                        vec3 _2896 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x));
                        float _2900 = _2860.x - _2389;
                        float _2901 = _2860.y - _2390;
                        float _2902 = _2860.z - _2391;
                        float _2903 = dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902));
                        float _2906 = inversesqrt(_2903);
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2910 = dot(vec3(_635, _638, _641), vec3(_2907, _2908, _2909));
                        float _2915 = 1.0 - (_2903 * _2860.w);
                        float _4294 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                        float _2917 = sqrt(_2903) * _2879.w;
                        float _2920 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2910) + _2921;
                        float _2927 = _2917 * _2917;
                        float _2931 = ((isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))) * _2916) / ((_2927 * 0.699999988079071044921875) + 1.0);
                        float _2935 = (-0.0) - _2389;
                        float _2936 = (-0.0) - _2390;
                        float _2937 = (-0.0) - _2391;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2952 = exp2(log2(1.0 / ((_2927 * 3.5) + 5.0)) * 0.25);
                        float _2953 = 1.0 - _695;
                        float _2960 = sqrt(1.0 - ((1.0 - (_2953 * _2953)) * (1.0 - (_2952 * _2952))));
                        float _2961 = _2960 * _2960;
                        float _2962 = _2961 * _2961;
                        float _2963 = _2942 + _2907;
                        float _2964 = _2943 + _2908;
                        float _2965 = _2944 + _2909;
                        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                        float _2973 = dot(vec3(_635, _638, _641), vec3(_2942, _2943, _2944));
                        float _4310 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2976 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                        float _2977 = dot(vec3(_635, _638, _641), vec3(_2969 * _2963, _2969 * _2964, _2969 * _2965));
                        float _4321 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _2984 = ((_2980 * _2980) * (_2962 + (-1.0))) + 1.0;
                        float _2985 = _2920 * _2961;
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2910) + _2986;
                        float _4332 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _2990 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _2991 = 1.0 - _2961;
                        float _3001 = (0.5 / (((_2990 * ((_2976 * _2991) + _2961)) + 9.9999999392252902907785028219223e-09) + (((_2990 * _2991) + _2961) * _2976))) * _2990;
                        float _4343 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                        float _3012 = (((_2962 * 3.1415927410125732421875) * (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) / ((_2984 * _2984) * ((_2927 * 2.1991131305694580078125) + 3.141590118408203125))) * _2916;
                        _2764 = (_2931 * _2879.x) + _2837;
                        _2765 = (_2931 * _2879.y) + _2838;
                        _2766 = (_2931 * _2879.z) + _2839;
                        _2761 = (_3012 * _2896.x) + _2834;
                        _2762 = (_3012 * _2896.y) + _2835;
                        _2763 = (_3012 * _2896.z) + _2836;
                        if (_2841 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2834 = _2761;
                            _2835 = _2762;
                            _2836 = _2763;
                            _2837 = _2764;
                            _2838 = _2765;
                            _2839 = _2766;
                            _2840 = _2841;
                        }
                    }
                    frontier_phi_66_pred = _2761;
                    frontier_phi_66_pred_1 = _2766;
                    frontier_phi_66_pred_2 = _2765;
                    frontier_phi_66_pred_3 = _2764;
                    frontier_phi_66_pred_4 = _2763;
                    frontier_phi_66_pred_5 = _2762;
                }
                _2537 = frontier_phi_66_pred;
                _2547 = frontier_phi_66_pred_1;
                _2545 = frontier_phi_66_pred_2;
                _2543 = frontier_phi_66_pred_3;
                _2541 = frontier_phi_66_pred_4;
                _2539 = frontier_phi_66_pred_5;
                uint _2696 = _2695 + 1u;
                if (_2696 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2689 = _2537;
                    _2690 = _2539;
                    _2691 = _2541;
                    _2692 = _2543;
                    _2693 = _2545;
                    _2694 = _2547;
                    _2695 = _2696;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2536 = _2537;
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
        }
        uvec4 _2550 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2551 = _2550.z;
        uint _2553 = (_2551 >> 8u) & 15u;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((4294967295u << _2553) & _2435) == 0u)
        {
            _2657 = _2536;
            _2659 = _2538;
            _2661 = _2540;
            _2663 = _2542;
            _2665 = _2544;
            _2667 = _2546;
        }
        else
        {
            float _2682 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
            float _2683 = _2682 * _2389;
            float _2684 = _2682 * _2390;
            float _2685 = _2682 * _2391;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2553 < ((_2551 >> 12u) & 15u))
            {
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2817 = _2536;
                float _2818 = _2538;
                float _2819 = _2540;
                float _2820 = _2542;
                float _2821 = _2544;
                float _2822 = _2546;
                uint _2823 = _2553;
                uint _2832;
                bool _2833;
                for (;;)
                {
                    _2832 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                    _2833 = _2832 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2833)
                    {
                        frontier_phi_77_pred = _2822;
                        frontier_phi_77_pred_1 = _2821;
                        frontier_phi_77_pred_2 = _2820;
                        frontier_phi_77_pred_3 = _2819;
                        frontier_phi_77_pred_4 = _2818;
                        frontier_phi_77_pred_5 = _2817;
                    }
                    else
                    {
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3039 = _2817;
                        float _3040 = _2818;
                        float _3041 = _2819;
                        float _3042 = _2820;
                        float _3043 = _2821;
                        float _3044 = _2822;
                        uint _3045 = _2832;
                        uint _3046;
                        vec4 _3071;
                        float _3072;
                        vec4 _3087;
                        vec3 _3099;
                        vec4 _3114;
                        vec4 _3129;
                        float _3175;
                        bool _3176;
                        for (;;)
                        {
                            uint _3056 = ((_2823 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3045));
                            _3046 = (_3045 + 4294967295u) & _3045;
                            uint _3058 = _3056 * 40u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            _3072 = _3071.w;
                            uint _3074 = (_3056 * 40u) + 4u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3089 = (_3056 * 40u) + 8u;
                            _3099 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x));
                            uint _3101 = (_3056 * 40u) + 16u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3056 * 40u) + 20u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3056 * 40u) + 24u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3150 = (_3056 * 40u) + 28u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3175 = fma(_2391, _3163.z, fma(_2390, _3163.y, _3163.x * _2389)) + _3163.w;
                            _3176 = !((fma(_2391, _3144.z, fma(_2390, _3144.y, _3144.x * _2389)) + _3144.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3176)
                            {
                                float _3203 = _3071.x - _2389;
                                float _3204 = _3071.y - _2390;
                                float _3205 = _3071.z - _2391;
                                float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                                float _3209 = inversesqrt(_3206);
                                float _3210 = _3209 * _3203;
                                float _3211 = _3209 * _3204;
                                float _3212 = _3209 * _3205;
                                float _3216 = 1.0 - (_3206 / (_3072 * _3072));
                                float _4354 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                                float _3221 = sqrt(_3206) * _3087.w;
                                float _3223 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                                float _3224 = _3223 * _3223;
                                float _3227 = ((1.0 - _3224) * dot(vec3(_3210, _3211, _3212), vec3(_635, _638, _641))) + _3224;
                                float _3230 = _3221 * _3221;
                                float _3234 = (fma(_2391, _3114.z, fma(_2390, _3114.y, _3114.x * _2389)) + _3114.w) / _3175;
                                float _3235 = (fma(_2391, _3129.z, fma(_2390, _3129.y, _3129.x * _2389)) + _3129.w) / _3175;
                                float _3239 = 1.0 - dot(vec2(_3234, _3235), vec2(_3234, _3235));
                                float _4370 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3241 = _3240 * (((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3217) / ((_3230 * 0.699999988079071044921875) + 1.0));
                                float _3253 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                                float _3254 = 1.0 - _695;
                                float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                                float _3262 = _3261 * _3261;
                                float _3263 = _3262 * _3262;
                                float _3264 = _3210 - _2683;
                                float _3265 = _3211 - _2684;
                                float _3266 = _3212 - _2685;
                                float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                                float _3274 = dot(vec3(_635, _638, _641), vec3((-0.0) - _2683, (-0.0) - _2684, (-0.0) - _2685));
                                float _4381 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3278 = dot(vec3(_635, _638, _641), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                                float _4392 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3281 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                                float _3286 = _3223 * _3262;
                                float _3287 = _3286 * _3286;
                                float _3293 = ((1.0 - _3287) * dot(vec3(_635, _638, _641), vec3(_3210, _3211, _3212))) + _3287;
                                float _4403 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3295 = 1.0 - _3262;
                                float _3305 = (0.5 / (((_3294 * ((_3277 * _3295) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3294 * _3295) + _3262) * _3277))) * _3294;
                                float _4414 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3315 = (_3240 * _3217) * (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) / ((_3285 * _3285) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3241 * _3087.y;
                                frontier_phi_83_pred_1 = _3241 * _3087.x;
                                frontier_phi_83_pred_2 = _3315 * _3099.z;
                                frontier_phi_83_pred_3 = _3315 * _3099.y;
                                frontier_phi_83_pred_4 = _3315 * _3099.x;
                                frontier_phi_83_pred_5 = _3241 * _3087.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3323 = frontier_phi_83_pred;
                            _3322 = frontier_phi_83_pred_1;
                            _3321 = frontier_phi_83_pred_2;
                            _3320 = frontier_phi_83_pred_3;
                            _3319 = frontier_phi_83_pred_4;
                            _3324 = frontier_phi_83_pred_5;
                            _3029 = _3322 + _3042;
                            _3030 = _3323 + _3043;
                            _3031 = _3324 + _3044;
                            _3026 = _3319 + _3039;
                            _3027 = _3320 + _3040;
                            _3028 = _3321 + _3041;
                            if (_3046 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3046;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3031;
                        frontier_phi_77_pred_1 = _3030;
                        frontier_phi_77_pred_2 = _3029;
                        frontier_phi_77_pred_3 = _3028;
                        frontier_phi_77_pred_4 = _3027;
                        frontier_phi_77_pred_5 = _3026;
                    }
                    _2668 = frontier_phi_77_pred;
                    _2666 = frontier_phi_77_pred_1;
                    _2664 = frontier_phi_77_pred_2;
                    _2662 = frontier_phi_77_pred_3;
                    _2660 = frontier_phi_77_pred_4;
                    _2658 = frontier_phi_77_pred_5;
                    uint _2824 = _2823 + 1u;
                    if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2817 = _2658;
                        _2818 = _2660;
                        _2819 = _2662;
                        _2820 = _2664;
                        _2821 = _2666;
                        _2822 = _2668;
                        _2823 = _2824;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2662;
                frontier_phi_58_59_ladder_1 = _2668;
                frontier_phi_58_59_ladder_2 = _2666;
                frontier_phi_58_59_ladder_3 = _2664;
                frontier_phi_58_59_ladder_4 = _2660;
                frontier_phi_58_59_ladder_5 = _2658;
            }
            else
            {
                frontier_phi_58_59_ladder = _2540;
                frontier_phi_58_59_ladder_1 = _2546;
                frontier_phi_58_59_ladder_2 = _2544;
                frontier_phi_58_59_ladder_3 = _2542;
                frontier_phi_58_59_ladder_4 = _2538;
                frontier_phi_58_59_ladder_5 = _2536;
            }
            _2657 = frontier_phi_58_59_ladder_5;
            _2659 = frontier_phi_58_59_ladder_4;
            _2661 = frontier_phi_58_59_ladder;
            _2663 = frontier_phi_58_59_ladder_3;
            _2665 = frontier_phi_58_59_ladder_2;
            _2667 = frontier_phi_58_59_ladder_1;
        }
        float _2672 = isnan(1.0) ? _679 : (isnan(_679) ? 1.0 : min(_679, 1.0));
        _2448 = (_2672 * _2663) + _1900;
        _2450 = (_2672 * _2665) + _1902;
        _2452 = (_2672 * _2667) + _1904;
        _2454 = ((_2657 * 0.039999999105930328369140625) * _2672) + _2233;
        _2456 = ((_2659 * 0.039999999105930328369140625) * _2672) + _2235;
        _2458 = ((_2661 * 0.039999999105930328369140625) * _2672) + _2237;
    }
    else
    {
        _2448 = _1900;
        _2450 = _1902;
        _2452 = _1904;
        _2454 = _2233;
        _2456 = _2235;
        _2458 = _2237;
    }
    float _4430 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _4441 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _4452 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _2475 = ((isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2448 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _679))) + ((_2454 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1516)) * cbPerFrame._m0[3u].x);
    float _2476 = ((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2450 + ((isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))) * _679))) + ((_2456 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1516)) * cbPerFrame._m0[3u].x);
    float _2477 = ((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2452 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _679))) + ((_2458 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1516)) * cbPerFrame._m0[3u].x);
    uint _2478 = _256 + 6u;
    float _2486 = _614 / cbSceneParam._m0[86u].x;
    float _2487 = _615 / cbSceneParam._m0[86u].y;
    vec4 _2501 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2486, _2487, (log2((isnan(cbSceneParam._m0[77u].w) ? _535 : (isnan(_535) ? cbSceneParam._m0[77u].w : min(_535, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2503 = _2501.x;
    float _2504 = _2501.y;
    float _2505 = _2501.z;
    float _2506 = _2501.w;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_535 > cbSceneParam._m0[78u].w)
    {
        float _2561 = isnan(_535) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _535 : min(cbSceneParam._m0[80u].w, _535));
        float _2562 = _2561 / _535;
        float _2573 = _2562 * _586;
        float _2574 = _587 * _2562;
        float _2575 = (-0.0) - _2574;
        float _2577 = _2562 * _588;
        float _2579 = (cbSceneParam._m0[77u].w * _2575) / _2561;
        float _2580 = _2579 + cbSceneParam._m0[79u].w;
        float _2581 = cbSceneParam._m0[79u].w - _2574;
        float _2587 = sqrt(((_2573 * _2573) + (_2574 * _2574)) + (_2577 * _2577));
        float _2590 = (1.0 - (cbSceneParam._m0[77u].w / _2561)) * _2587;
        float _2595 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2597 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2774;
        if (abs((_2575 - _2579) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2774 = ((((_2580 > 0.0) ? exp2(_2595 * _2580) : (2.0 - exp2(_2597 * _2580))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2590;
        }
        else
        {
            float _2718 = 1.0 / cbSceneParam._m0[80u].x;
            float _2719 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : max(_2580, _2581));
            float _2720 = isnan(_2581) ? _2580 : (isnan(_2580) ? _2581 : min(_2580, _2581));
            float _2729 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : min(_2719, 0.0));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            _2774 = ((abs(_2587 / _2575) * cbSceneParam._m0[80u].y) * ((((_2729 - _2730) * 2.0) - ((exp2(_2595 * (isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0)))) - exp2(_2595 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))))) * _2718)) - ((exp2(_2597 * _2729) - exp2(_2597 * _2730)) * _2718))) + (_2590 * cbSceneParam._m0[80u].z);
        }
        vec4 _2776 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2486, _2487, 1.0), 0.0);
        float _2785 = exp2((_2774 * (-1.44269502162933349609375)) * (1.0 - _2776.w));
        float _2786 = log2(_2785);
        float _2802 = log2(_2506);
        _2599 = (exp2(_2802 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].x)) * _2776.x) / cbSceneParam._m0[78u].x)) + _2503;
        _2601 = (exp2(_2802 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].y)) * _2776.y) / cbSceneParam._m0[78u].y)) + _2504;
        _2603 = (exp2(_2802 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2786 * cbSceneParam._m0[78u].z)) * _2776.z) / cbSceneParam._m0[78u].z)) + _2505;
        _2605 = _2785 * _2506;
    }
    else
    {
        _2599 = _2503;
        _2601 = _2504;
        _2603 = _2505;
        _2605 = _2506;
    }
    bool _2812;
    vec4 _2615;
    vec4 _2637;
    float _2639;
    float _2643;
    float _2644;
    float _2645;
    float _2646;
    bool _2656;
    for (;;)
    {
        _2615 = cbMatDynParam._m0[0u];
        float _2617 = roundEven(_2615.y);
        bool _2618 = _2617 == 3.0;
        float _2619 = log2(_2605);
        float _2626 = exp2(_2619 * cbSceneParam._m0[78u].x) * _2475;
        float _2627 = exp2(_2619 * cbSceneParam._m0[78u].y) * _2476;
        float _2628 = exp2(_2619 * cbSceneParam._m0[78u].z) * _2477;
        float _2635 = _602 + (-0.5);
        _2637 = cbMtdParam._m0[1u];
        _2639 = _2637.y * _2635;
        float _2642 = (_2617 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2643 = _2642 * (_2618 ? _2626 : (_2626 + (cbSceneParam._m0[72u].w * _2599)));
        _2644 = _2642 * (_2618 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2601)));
        _2645 = _2642 * (_2618 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2603)));
        _2646 = _2635 * 0.999000012874603271484375;
        _2656 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2656)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _2646) < 0.5)
            {
                _2812 = true;
                break;
            }
        }
        uint _2753 = _654 + uint(_2615.w);
        if ((cbInstanceData._m0[_2753].w < 1.0) && ((cbInstanceData._m0[_2753].w + _2646) < 0.5))
        {
            _2812 = true;
            break;
        }
        if ((_2639 + 1.0) < _2637.x)
        {
            _2812 = true;
            break;
        }
        _2812 = false;
        break;
    }
    float _3017;
    if (_2812)
    {
        discard_state = true;
        _3017 = 0.0;
    }
    else
    {
        _3017 = cbInstanceData._m0[_2478].w;
    }
    SV_Target.x = _2643;
    SV_Target.y = _2644;
    SV_Target.z = _2645;
    SV_Target.w = _3017;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2478].w;
    discard_exit();
}


