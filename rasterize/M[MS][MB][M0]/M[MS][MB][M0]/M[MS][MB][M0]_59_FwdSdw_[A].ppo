#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1277;
float _3919;
float _3920;
float _3921;
float _3922;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _235 = _234 * _226;
    float _236 = _234 * _227;
    float _237 = _234 * _228;
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = _241 * NORMAL.x;
    float _243 = _241 * NORMAL.y;
    float _244 = _241 * NORMAL.z;
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = _248 * TANGENT.x;
    float _250 = _248 * TANGENT.y;
    float _251 = _248 * TANGENT.z;
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3931 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3942 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3953 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _329 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _334 = _329.x * cbMtdParam._m0[9u].x;
    float _335 = _329.y * cbMtdParam._m0[9u].y;
    float _336 = _329.z * cbMtdParam._m0[9u].z;
    float _340 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _334;
    float _343 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _335;
    float _346 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _336;
    float _353 = ((_334 - _340) * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) + _340;
    float _354 = ((_335 - _343) * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) + _343;
    float _355 = ((_336 - _346) * (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) + _346;
    vec4 _374 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _292) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _293) + cbTextureTilingScale._m0[14u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _424 = _420.z;
    float _428 = (_420.x * 2.0) + (-1.0);
    float _429 = (_420.y * 2.0) + (-1.0);
    float _430 = dot(vec2(_428, _429), vec2(_428, _429));
    float _3964 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))));
    float _440 = _428 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_394.x * 2.0) + (-1.0)));
    float _441 = _429 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_394.y * 2.0) + (-1.0)));
    float _444 = fma(_435, _242, fma(_441, _249, _440 * _235));
    float _447 = fma(_435, _243, fma(_441, _250, _440 * _236));
    float _450 = fma(_435, _244, fma(_441, _251, _440 * _237));
    float _454 = inversesqrt(dot(vec3(_444, _447, _450), vec3(_444, _447, _450)));
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _492 = _490.x;
    float _493 = 1.0 - _492;
    float _500 = ((_492 - _493) * cbMtdParam._m0[24u].z) + _493;
    float _502 = (cbMtdParam._m0[19u].x + dot(vec4(_454 * _444, _454 * _447, _454 * _450, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_500 * cbMtdParam._m0[21u].z);
    float _3975 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _505 = (-0.0) - cbMtdParam._m0[24u].y;
    float _507 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _508 = isnan(1.0) ? _507 : (isnan(_507) ? 1.0 : min(_507, 1.0));
    float _515 = _503 - ((_503 * TEXCOORD_8.x) * _508);
    float _516 = _503 - ((_503 * TEXCOORD_8.y) * _508);
    float _517 = _503 - ((_503 * TEXCOORD_8.z) * _508);
    float _524 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _528 = ((isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : min(_524, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _536 = (_528 - (((_500 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _528))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4006 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _537 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _541 = ((_515 * ((_374.x * cbMtdParam._m0[18u].x) - _353)) * _537) + _353;
    float _542 = ((_516 * ((_374.y * cbMtdParam._m0[18u].y) - _354)) * _537) + _354;
    float _543 = ((_517 * ((_374.z * cbMtdParam._m0[18u].z) - _355)) * _537) + _355;
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _557 = _555.x;
    float _558 = 1.0 - _557;
    float _585 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_557 - _558) * cbMtdParam._m0[24u].w) + _558) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4017 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _594 = ((((cbMtdParam._m0[10u].x - _541) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _586) + _541;
    float _595 = ((((cbMtdParam._m0[10u].y - _542) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _586) + _542;
    float _596 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _543)) * _586) + _543;
    float _601 = (((_394.z - _424) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _424;
    vec4 _615 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _622 = (_615.x * 2.0) + (-1.0);
    float _623 = (_615.y * 2.0) + (-1.0);
    float _624 = dot(vec2(_622, _623), vec2(_622, _623));
    float _4028 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _633 = (((_615.z - _601) * _515) * _537) + _601;
    float _636 = ((cbMtdParam._m0[23u].y - _633) * _586) + _633;
    vec4 _655 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _661 = (_655.x * 2.0) + (-1.0);
    float _662 = (_655.y * 2.0) + (-1.0);
    float _663 = dot(vec2(_661, _662), vec2(_661, _662));
    float _4039 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _683 = (((cbMtdParam._m0[21u].x * _440) + ((_622 - _440) * _515)) * _537) + _440;
    float _684 = (((cbMtdParam._m0[21u].x * _441) + ((_623 - _441) * _516)) * _537) + _441;
    float _685 = (((sqrt(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) - _435) * _517) * _537) + _435;
    float _696 = (((_661 - _683) + (_683 * cbMtdParam._m0[22u].z)) * _586) + _683;
    float _697 = (((_662 - _684) + (_684 * cbMtdParam._m0[22u].z)) * _586) + _684;
    float _698 = ((sqrt(1.0 - (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) - _685) * _586) + _685;
    float _700 = cbMtdParam._m0[22u].x + _420.w;
    float _703 = fma(_698, _242, fma(_697, _249, _696 * _235));
    float _706 = fma(_698, _243, fma(_697, _250, _696 * _236));
    float _709 = fma(_698, _244, fma(_697, _251, _696 * _237));
    float _713 = inversesqrt(dot(vec3(_703, _706, _709), vec3(_703, _706, _709)));
    float _714 = _713 * _703;
    float _715 = _713 * _706;
    float _716 = _713 * _709;
    float _4050 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _717 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _4061 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _4072 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _4083 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4094 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _735 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _785 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _775);
    float _786 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _775);
    float _787 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _775);
    float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
    float _792 = _785 * _791;
    float _793 = _786 * _791;
    float _794 = _787 * _791;
    vec4 _799 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _801 = _799.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _958 = sqrt(((_785 * _785) + (_786 * _786)) + (_787 * _787));
        float _964 = (cbMatDynParam._m0[5u].x * _958) + cbMatDynParam._m0[5u].y;
        float _4105 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _969 = (cbMatDynParam._m0[5u].z * _958) + cbMatDynParam._m0[5u].w;
        float _4116 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) - _965)) + _965) < ((_801 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _813 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _814 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _834 = fma(_716, cbSceneParam._m0[5u].z, fma(_715, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _714));
    float _837 = fma(_716, cbSceneParam._m0[6u].z, fma(_715, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _714));
    float _840 = fma(_716, cbSceneParam._m0[7u].z, fma(_715, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _714));
    uint _853 = _273 + 9u;
    uint _854 = _853 + uint(cbMatDynParam._m0[0u].w);
    float _860 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * cbInstanceData._m0[_854].x;
    float _861 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) * cbInstanceData._m0[_854].y;
    float _862 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * cbInstanceData._m0[_854].z;
    float _4127 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _4149 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    vec4 _874 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _813, cbSceneParam._m0[86u].y * _814));
    float _878 = ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) * TEXCOORD_5.w) * _874.x;
    float _879 = dot(vec3(_714, _715, _716), vec3(_792, _793, _794));
    float _882 = _879 * 2.0;
    float _886 = (_882 * _714) - _792;
    float _887 = (_882 * _715) - _793;
    float _888 = (_882 * _716) - _794;
    float _892 = abs(dot(vec3(_792, _793, _794), vec3(_714, _715, _716)));
    float _4160 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _894 = sqrt(_717);
    float _907 = exp2((_894 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_894 * 3.0));
    float _939 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _943 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1276;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1001 = fma(_947, cbModelParam._m0[26u].z, fma(_943, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939));
        float _1005 = fma(_947, cbModelParam._m0[27u].z, fma(_943, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939));
        float _1009 = fma(_947, cbModelParam._m0[28u].z, fma(_943, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939));
        float _1034 = _939 + _714;
        float _1035 = _943 + _715;
        float _1036 = _947 + _716;
        float _1046 = fma(_1036, cbModelParam._m0[26u].z, fma(_1035, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1034)) - _1001;
        float _1047 = fma(_1036, cbModelParam._m0[27u].z, fma(_1035, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1034)) - _1005;
        float _1048 = fma(_1036, cbModelParam._m0[28u].z, fma(_1035, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1034)) - _1009;
        float _1052 = inversesqrt(dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048)));
        float _1065 = ((_1052 * _1046) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1001 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1066 = ((_1052 * _1047) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1005 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1067 = ((_1052 * _1048) / cbModelParam._m0[34u].z) + ((((((_1009 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1065, _1066, _1067), 0.0);
        float _1104 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1070.x + (-0.5));
        float _1106 = _1104 * (_1070.y + (-0.5));
        float _1107 = _1104 * (_1070.z + (-0.5));
        float _1114 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1077.x + (-0.5));
        float _1116 = _1114 * (_1077.y + (-0.5));
        float _1117 = _1114 * (_1077.z + (-0.5));
        float _1124 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1084.x + (-0.5));
        float _1126 = _1124 * (_1084.y + (-0.5));
        float _1127 = _1124 * (_1084.z + (-0.5));
        float _1134 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1091.x + (-0.5));
        float _1136 = _1134 * (_1091.y + (-0.5));
        float _1137 = _1134 * (_1091.z + (-0.5));
        float _1138 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = _1105 * 0.5;
        float _1142 = _1115 * 0.5;
        float _1143 = _1125 * 0.5;
        float _1144 = dot(vec3(_1141, _1142, _1143), vec3(_1141, _1142, _1143));
        float _1149 = (_1144 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1144);
        float _1158 = (dot(vec3(_714, _715, _716), vec3(_1149 * _1141, _1149 * _1142, _1149 * _1143)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1168 = sqrt(((_1142 * _1142) + (_1141 * _1141)) + (_1143 * _1143)) / (_1138 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1170 = _1169 * 2.0;
        float _1174 = (1.0 - _1169) / (_1169 + 1.0);
        float _4208 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1184 = ((((1.0 - _1175) * (_1170 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1170 + 1.0))) + _1175) * _1138;
        float _1185 = _1106 * 0.5;
        float _1186 = _1116 * 0.5;
        float _1187 = _1126 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1201 = (dot(vec3(_714, _715, _716), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1210 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _4241 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1212 + 1.0))) + _1217) * _1139;
        float _1227 = _1107 * 0.5;
        float _1228 = _1117 * 0.5;
        float _1229 = _1127 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_714, _715, _716), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4274 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1254 + 1.0))) + _1259) * _1140;
        _1276 = _1107;
        _1278 = _1106;
        _1279 = _1105;
        _1280 = _1117;
        _1281 = _1116;
        _1282 = _1115;
        _1283 = _1127;
        _1284 = _1126;
        _1285 = _1125;
        _1286 = _1140;
        _1287 = _1139;
        _1288 = _1138;
        _1289 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0)));
        _1290 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1291 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
    }
    else
    {
        _1276 = _1277;
        _1278 = _1277;
        _1279 = _1277;
        _1280 = _1277;
        _1281 = _1277;
        _1282 = _1277;
        _1283 = _1277;
        _1284 = _1277;
        _1285 = _1277;
        _1286 = _1277;
        _1287 = _1277;
        _1288 = _1277;
        _1289 = 0.0;
        _1290 = 0.0;
        _1291 = 0.0;
    }
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1319 = fma(_947, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _939));
        float _1323 = fma(_947, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _939));
        float _1327 = fma(_947, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _939));
        float _1350 = _939 + _714;
        float _1351 = _943 + _715;
        float _1352 = _947 + _716;
        float _1362 = fma(_1352, cbModelParam._m0[30u].z, fma(_1351, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1350)) - _1319;
        float _1363 = fma(_1352, cbModelParam._m0[31u].z, fma(_1351, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1350)) - _1323;
        float _1364 = fma(_1352, cbModelParam._m0[32u].z, fma(_1351, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1350)) - _1327;
        float _1368 = inversesqrt(dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364)));
        float _1381 = ((_1368 * _1362) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1319 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1382 = ((_1368 * _1363) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1323 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1368 * _1364) / cbModelParam._m0[35u].z) + ((((((_1327 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1381, _1382, _1383), 0.0);
        float _1418 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1385.x + (-0.5));
        float _1420 = _1418 * (_1385.y + (-0.5));
        float _1421 = _1418 * (_1385.z + (-0.5));
        float _1428 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1392.x + (-0.5));
        float _1430 = _1428 * (_1392.y + (-0.5));
        float _1431 = _1428 * (_1392.z + (-0.5));
        float _1438 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1399.x + (-0.5));
        float _1440 = _1438 * (_1399.y + (-0.5));
        float _1441 = _1438 * (_1399.z + (-0.5));
        float _1448 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1406.x + (-0.5));
        float _1450 = _1448 * (_1406.y + (-0.5));
        float _1451 = _1448 * (_1406.z + (-0.5));
        float _1452 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = _1419 * 0.5;
        float _1456 = _1429 * 0.5;
        float _1457 = _1439 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_714, _715, _716), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1452 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4337 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1482 + 1.0))) + _1487) * _1452;
        float _1497 = _1420 * 0.5;
        float _1498 = _1430 * 0.5;
        float _1499 = _1440 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_714, _715, _716), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4370 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1524 + 1.0))) + _1529) * _1453;
        float _1539 = _1421 * 0.5;
        float _1540 = _1431 * 0.5;
        float _1541 = _1441 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_714, _715, _716), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4403 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1566 + 1.0))) + _1571) * _1454;
        _1588 = _1421;
        _1589 = _1420;
        _1590 = _1419;
        _1591 = _1431;
        _1592 = _1430;
        _1593 = _1429;
        _1594 = _1441;
        _1595 = _1440;
        _1596 = _1439;
        _1597 = _1454;
        _1598 = _1453;
        _1599 = _1452;
        _1600 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
    }
    else
    {
        _1588 = _1277;
        _1589 = _1277;
        _1590 = _1277;
        _1591 = _1277;
        _1592 = _1277;
        _1593 = _1277;
        _1594 = _1277;
        _1595 = _1277;
        _1596 = _1277;
        _1597 = _1277;
        _1598 = _1277;
        _1599 = _1277;
        _1600 = 0.0;
        _1601 = 0.0;
        _1602 = 0.0;
    }
    float _1612 = (cbModelParam._m0[1u].x * (_1600 - _1289)) + _1289;
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1290)) + _1290;
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1291)) + _1291;
    float _1635 = fma(_1614, cbSceneParam._m0[89u].z, fma(_1613, cbSceneParam._m0[89u].y, _1612 * cbSceneParam._m0[89u].x));
    float _1638 = fma(_1614, cbSceneParam._m0[90u].z, fma(_1613, cbSceneParam._m0[90u].y, _1612 * cbSceneParam._m0[90u].x));
    float _1641 = fma(_1614, cbSceneParam._m0[91u].z, fma(_1613, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1612));
    float _1656 = _886 * 0.5;
    float _1657 = _887 * 0.5;
    float _1658 = _888 * 0.5;
    float _1659 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1662 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1665 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1588, _1591, _1594, _1597));
    float _1699;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1672 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1276, _1280, _1283, _1286));
        float _1676 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1278, _1281, _1284, _1287));
        float _1680 = dot(vec4(_1656, _1657, _1658, 1.0), vec4(_1279, _1282, _1285, _1288));
        float _1687 = dot(vec4(cbModelParam._m0[39u]), vec4(_1656, _1657, _1658, 1.0));
        _1699 = dot(vec3(isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1687) ? 0.0 : (isnan(0.0) ? _1687 : max(0.0, _1687))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1699 = 1.0;
    }
    float _1710;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1701 = dot(vec4(cbModelParam._m0[40u]), vec4(_1656, _1657, _1658, 1.0));
        _1710 = dot(vec3(isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)), isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1710 = 1.0;
    }
    float _1714 = (_1710 * cbModelParam._m0[1u].x) + (_1699 * (1.0 - cbModelParam._m0[1u].x));
    float _1724 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _717);
    float _1725 = isnan(_1724) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1724 : min(cbModelParam._m0[25u].z, _1724));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1772 = fma(_947, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939)) + cbModelParam._m0[13u].w;
        float _1776 = fma(_947, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939)) + cbModelParam._m0[14u].w;
        float _1780 = fma(_947, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939)) + cbModelParam._m0[15u].w;
        float _1783 = fma(_888, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _886));
        float _1786 = fma(_888, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _886));
        float _1789 = fma(_888, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _886));
        float _1817;
        if (_1783 > 0.0)
        {
            _1817 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1817 = frontier_phi_17_15_ladder;
        }
        float _1987;
        if (_1786 > 0.0)
        {
            _1987 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1987 = frontier_phi_26_22_ladder;
        }
        float _2283;
        if (_1789 > 0.0)
        {
            _2283 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2283 = frontier_phi_38_33_ladder;
        }
        float _2285 = isnan(_1987) ? _1817 : (isnan(_1817) ? _1987 : min(_1817, _1987));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1783) + _1772;
        float _2291 = (_2286 * _1786) + _1776;
        float _2292 = (_2286 * _1789) + _1780;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2293;
        float _2297 = _2293 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 > _2297) || ((_2291 < _2295) || ((_2290 < _2295) || (_2290 > _2297))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2292, cbModelParam._m0[9u].z, fma(_2291, cbModelParam._m0[9u].y, _2290 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2292, cbModelParam._m0[10u].z, fma(_2291, cbModelParam._m0[10u].y, _2290 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2292, cbModelParam._m0[11u].z, fma(_2291, cbModelParam._m0[11u].y, _2290 * cbModelParam._m0[11u].x))), _1725);
            frontier_phi_16_38_ladder = _2437.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2437.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2437.x * cbModelParam._m0[1u].y;
        }
        _1805 = frontier_phi_16_38_ladder_2;
        _1807 = frontier_phi_16_38_ladder_1;
        _1809 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1793 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_886, _887, _888), _1725);
        _1805 = _1793.x * cbModelParam._m0[1u].y;
        _1807 = _1793.y * cbModelParam._m0[1u].y;
        _1809 = _1793.z * cbModelParam._m0[1u].y;
    }
    float _1813 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _717);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1813 : min(cbModelParam._m0[25u].w, _1813));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1867 = fma(_947, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939)) + cbModelParam._m0[21u].w;
        float _1871 = fma(_947, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939)) + cbModelParam._m0[22u].w;
        float _1875 = fma(_947, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939)) + cbModelParam._m0[23u].w;
        float _1878 = fma(_888, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _886));
        float _1881 = fma(_888, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _886));
        float _1884 = fma(_888, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _886));
        float _1992;
        if (_1878 > 0.0)
        {
            _1992 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1992 = frontier_phi_28_24_ladder;
        }
        float _2310;
        if (_1881 > 0.0)
        {
            _2310 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2310 = frontier_phi_40_35_ladder;
        }
        float _2637;
        if (_1884 > 0.0)
        {
            _2637 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2637 = frontier_phi_50_47_ladder;
        }
        float _2639 = isnan(_2310) ? _1992 : (isnan(_1992) ? _2310 : min(_1992, _2310));
        float _2640 = isnan(_2637) ? _2639 : (isnan(_2639) ? _2637 : min(_2639, _2637));
        float _2644 = (_2640 * _1878) + _1867;
        float _2645 = (_2640 * _1881) + _1871;
        float _2646 = (_2640 * _1884) + _1875;
        float _2647 = _2640 * 9.9999997473787516355514526367188e-05;
        float _2648 = (-1.0) - _2647;
        float _2650 = _2647 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2646 > _2650) || ((_2646 < _2648) || ((_2645 > _2650) || ((_2645 < _2648) || ((_2644 < _2648) || (_2644 > _2650))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2646, cbModelParam._m0[17u].z, fma(_2645, cbModelParam._m0[17u].y, _2644 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2646, cbModelParam._m0[18u].z, fma(_2645, cbModelParam._m0[18u].y, _2644 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2646, cbModelParam._m0[19u].z, fma(_2645, cbModelParam._m0[19u].y, _2644 * cbModelParam._m0[19u].x))), _1814);
            frontier_phi_25_50_ladder = _2764.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2764.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2764.x * cbModelParam._m0[1u].z;
        }
        _1903 = frontier_phi_25_50_ladder_2;
        _1905 = frontier_phi_25_50_ladder_1;
        _1907 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_886, _887, _888), _1814);
        _1903 = _1887.x * cbModelParam._m0[1u].z;
        _1905 = _1887.y * cbModelParam._m0[1u].z;
        _1907 = _1887.z * cbModelParam._m0[1u].z;
    }
    float _1919 = ((((1.0 - _907) * ((_894 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_907 * _894)) * _878;
    float _1920 = _1919 * ((cbModelParam._m0[1u].w * (_1903 - _1805)) + _1805);
    float _1921 = _1919 * ((cbModelParam._m0[1u].w * (_1905 - _1807)) + _1807);
    float _1922 = _1919 * ((cbModelParam._m0[1u].w * (_1907 - _1809)) + _1809);
    float _1925 = fma(_1922, cbSceneParam._m0[89u].z, fma(_1921, cbSceneParam._m0[89u].y, _1920 * cbSceneParam._m0[89u].x));
    float _1928 = fma(_1922, cbSceneParam._m0[90u].z, fma(_1921, cbSceneParam._m0[90u].y, _1920 * cbSceneParam._m0[90u].x));
    float _1931 = fma(_1922, cbSceneParam._m0[91u].z, fma(_1921, cbSceneParam._m0[91u].y, _1920 * cbSceneParam._m0[91u].x));
    float _1966 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1970 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1974 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1979 = _1966 / _1978;
    float _1980 = _1970 / _1978;
    float _1981 = _1974 / _1978;
    float _2128;
    float _2129;
    float _2130;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2008 = ((uint(_1981 > cbSceneParam._m0[59u].y) + uint(_1981 > cbSceneParam._m0[59u].x)) + uint(_1981 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2009 = _2008 + 43u;
        uint _2017 = _2008 + 44u;
        uint _2025 = _2008 + 45u;
        uint _2033 = _2008 + 46u;
        float _2044 = fma(_1978, cbSceneParam._m0[_2009].w, fma(_1974, cbSceneParam._m0[_2009].z, fma(_1970, cbSceneParam._m0[_2009].y, _1966 * cbSceneParam._m0[_2009].x)));
        float _2048 = fma(_1978, cbSceneParam._m0[_2017].w, fma(_1974, cbSceneParam._m0[_2017].z, fma(_1970, cbSceneParam._m0[_2017].y, _1966 * cbSceneParam._m0[_2017].x)));
        float _2056 = fma(_1978, cbSceneParam._m0[_2033].w, fma(_1974, cbSceneParam._m0[_2033].z, fma(_1970, cbSceneParam._m0[_2033].y, _1966 * cbSceneParam._m0[_2033].x)));
        float _2061 = cbSceneParam._m0[33u].z * _2056;
        float _2063 = cbSceneParam._m0[33u].w * _2056;
        float _2066 = fma(_1978, cbSceneParam._m0[_2025].w, fma(_1974, cbSceneParam._m0[_2025].z, fma(_1970, cbSceneParam._m0[_2025].y, _1966 * cbSceneParam._m0[_2025].x))) / _2056;
        float _2114 = (cbSceneParam._m0[33u].x - sqrt(((_1980 * _1980) + (_1979 * _1979)) + (_1981 * _1981))) * cbSceneParam._m0[33u].y;
        float _4529 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2121 = (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 + _2044) / _2056, (_2063 + _2048) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 + _2044) / _2056, (_2048 - _2061) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 - _2061) / _2056, (_2048 - _2063) / _2056), _2066), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 - _2063) / _2056, (_2061 + _2048) / _2056), _2066), 0.0)).x), vec4(0.25)));
        _2128 = 1.0 - (_2121 * cbSceneParam._m0[34u].x);
        _2129 = 1.0 - (_2121 * cbSceneParam._m0[34u].y);
        _2130 = 1.0 - (_2121 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2128 = 1.0;
        _2129 = 1.0;
        _2130 = 1.0;
    }
    float _2194;
    float _2196;
    float _2198;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2182 = fma(_1978, cbSceneParam._m0[63u].w, fma(_1974, cbSceneParam._m0[63u].z, fma(_1970, cbSceneParam._m0[63u].y, _1966 * cbSceneParam._m0[63u].x)));
        float _2183 = fma(_1978, cbSceneParam._m0[60u].w, fma(_1974, cbSceneParam._m0[60u].z, fma(_1970, cbSceneParam._m0[60u].y, _1966 * cbSceneParam._m0[60u].x))) / _2182;
        float _2184 = fma(_1978, cbSceneParam._m0[61u].w, fma(_1974, cbSceneParam._m0[61u].z, fma(_1970, cbSceneParam._m0[61u].y, _1966 * cbSceneParam._m0[61u].x))) / _2182;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2183 >= cbSceneParam._m0[64u].x) && (_2184 >= cbSceneParam._m0[64u].y)) && (_2183 <= cbSceneParam._m0[64u].z)) && (_2184 <= cbSceneParam._m0[64u].w))
        {
            float _2323 = fma(_1978, cbSceneParam._m0[62u].w, fma(_1974, cbSceneParam._m0[62u].z, fma(_1970, cbSceneParam._m0[62u].y, _1966 * cbSceneParam._m0[62u].x))) / _2182;
            float _2327 = isnan(cbSceneParam._m0[41u].w) ? _2323 : (isnan(_2323) ? cbSceneParam._m0[41u].w : max(_2323, cbSceneParam._m0[41u].w));
            float _2370 = (cbSceneParam._m0[33u].x - sqrt(((_1980 * _1980) + (_1979 * _1979)) + (_1981 * _1981))) * cbSceneParam._m0[33u].y;
            float _4545 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
            float _2377 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2183, cbSceneParam._m0[33u].w + _2184), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2183, _2184 - cbSceneParam._m0[33u].z), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2183 - cbSceneParam._m0[33u].z, _2184 - cbSceneParam._m0[33u].w), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2183 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2184), _2327), 0.0)).x), vec4(0.25)));
            float _2381 = 1.0 - (_2377 * cbSceneParam._m0[34u].x);
            float _2382 = 1.0 - (_2377 * cbSceneParam._m0[34u].y);
            float _2383 = 1.0 - (_2377 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2383) ? _2130 : (isnan(_2130) ? _2383 : min(_2130, _2383));
            frontier_phi_37_36_ladder_1 = isnan(_2382) ? _2129 : (isnan(_2129) ? _2382 : min(_2129, _2382));
            frontier_phi_37_36_ladder_2 = isnan(_2381) ? _2128 : (isnan(_2128) ? _2381 : min(_2128, _2381));
        }
        else
        {
            frontier_phi_37_36_ladder = _2130;
            frontier_phi_37_36_ladder_1 = _2129;
            frontier_phi_37_36_ladder_2 = _2128;
        }
        _2194 = frontier_phi_37_36_ladder_2;
        _2196 = frontier_phi_37_36_ladder_1;
        _2198 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2194 = _2128;
        _2196 = _2129;
        _2198 = _2130;
    }
    uvec4 _2203 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2205 = _2203.x * 14u;
    uint _2206 = _2205 + 13u;
    float _2213 = _878 + (-1.0);
    float _2218 = (cbLight._m0[_2206].x * _2213) + 1.0;
    float _2219 = (cbLight._m0[_2206].y * _2213) + 1.0;
    float _2220 = (cbLight._m0[_2206].z * _2213) + 1.0;
    float _2221 = (cbLight._m0[_2206].w * _2213) + 1.0;
    uint _2222 = _2205 + 5u;
    float _2228 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
    uint _2232 = _2205 + 4u;
    float _2242 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
    uint _2246 = _2205 | 1u;
    float _2257 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_714, _715, _716));
    float _2260 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_714, _715, _716));
    float _4581 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _4592 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2265 = (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * 0.3183098733425140380859375;
    float _2267 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * 0.3183098733425140380859375;
    float _2274 = ((cbLight._m0[_2222].x * _2228) * _2267) + (((cbLight._m0[_2232].x * _2194) * _2242) * _2265);
    float _2275 = ((_2228 * cbLight._m0[_2222].y) * _2267) + (((cbLight._m0[_2232].y * _2196) * _2242) * _2265);
    float _2276 = ((_2228 * cbLight._m0[_2222].z) * _2267) + (((cbLight._m0[_2232].z * _2198) * _2242) * _2265);
    uvec4 _2280 = floatBitsToUint(cbLight._m0[_2205 + 12u]);
    bool _2282 = _2280.x == 0u;
    float _2384;
    float _2386;
    float _2388;
    if (_2282)
    {
        _2384 = _2274;
        _2386 = _2275;
        _2388 = _2276;
    }
    else
    {
        uint _2392 = _2205 + 6u;
        float _2408 = (dot(vec3(cbLight._m0[_2205 + 2u].xyz), vec3(_714, _715, _716)) * 0.5) + 0.5;
        float _2409 = _2408 * _2408;
        float _4603 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2410 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2411 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2384 = (((cbLight._m0[_2392].x * 0.3183098733425140380859375) * _2410) * _2411) + _2274;
        _2386 = (((cbLight._m0[_2392].y * 0.3183098733425140380859375) * _2410) * _2411) + _2275;
        _2388 = (((cbLight._m0[_2392].z * 0.3183098733425140380859375) * _2410) * _2411) + _2276;
    }
    bool _2391 = _2280.y == 0u;
    float _2446;
    float _2448;
    float _2450;
    if (_2391)
    {
        _2446 = _2384;
        _2448 = _2386;
        _2450 = _2388;
    }
    else
    {
        uint _2608 = _2205 + 7u;
        float _2624 = (dot(vec3(cbLight._m0[_2205 + 3u].xyz), vec3(_714, _715, _716)) * 0.5) + 0.5;
        float _2625 = _2624 * _2624;
        float _4619 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2626 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _2627 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2446 = (((cbLight._m0[_2608].x * 0.3183098733425140380859375) * _2626) * _2627) + _2384;
        _2448 = (((cbLight._m0[_2608].y * 0.3183098733425140380859375) * _2626) * _2627) + _2386;
        _2450 = (((cbLight._m0[_2608].z * 0.3183098733425140380859375) * _2626) * _2627) + _2388;
    }
    uint _2453 = _2205 + 8u;
    float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2205].w)) * _717) * 0.949999988079071044921875);
    float _2467 = _2466 * _2466;
    float _2468 = cbLight._m0[_2205].x + _792;
    float _2469 = cbLight._m0[_2205].y + _793;
    float _2470 = cbLight._m0[_2205].z + _794;
    float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
    float _2475 = _2474 * _2468;
    float _2476 = _2474 * _2469;
    float _2477 = _2474 * _2470;
    float _2478 = dot(vec3(_714, _715, _716), vec3(cbLight._m0[_2205].xyz));
    float _4635 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
    float _4646 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _2482 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
    float _2483 = dot(vec3(_714, _715, _716), vec3(_2475, _2476, _2477));
    float _4657 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
    float _2487 = dot(vec3(cbLight._m0[_2205].xyz), vec3(_2475, _2476, _2477));
    float _4668 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2491 = _2467 * _2467;
    float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
    float _2506 = (exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2507 = 1.0 - _2467;
    float _2518 = (0.5 / (((_2482 * ((_2481 * _2507) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2507) + _2467) * _2481))) * _2481;
    float _4679 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2520 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
    uint _2534 = _2205 + 9u;
    float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _717) * 0.949999988079071044921875);
    float _2546 = _2545 * _2545;
    float _2547 = cbLight._m0[_2246].x + _792;
    float _2548 = cbLight._m0[_2246].y + _793;
    float _2549 = cbLight._m0[_2246].z + _794;
    float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
    float _2554 = _2553 * _2547;
    float _2555 = _2553 * _2548;
    float _2556 = _2553 * _2549;
    float _2557 = dot(vec3(_714, _715, _716), vec3(cbLight._m0[_2246].xyz));
    float _4690 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
    float _2561 = dot(vec3(_714, _715, _716), vec3(_2554, _2555, _2556));
    float _4701 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
    float _2565 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2554, _2555, _2556));
    float _4712 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2569 = _2546 * _2546;
    float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
    float _2582 = (exp2(log2(1.0 - (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2583 = 1.0 - _2546;
    float _2593 = (0.5 / (((_2482 * ((_2560 * _2583) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2583) + _2546) * _2560))) * _2560;
    float _4723 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2595 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
    float _2605 = (((_2582 * cbLight._m0[_2534].x) * _2595) * _2228) + ((((cbLight._m0[_2453].x * _2194) * _2506) * _2520) * _2242);
    float _2606 = (((_2582 * cbLight._m0[_2534].y) * _2595) * _2228) + ((((cbLight._m0[_2453].y * _2196) * _2506) * _2520) * _2242);
    float _2607 = (((_2582 * cbLight._m0[_2534].z) * _2595) * _2228) + ((((cbLight._m0[_2453].z * _2198) * _2506) * _2520) * _2242);
    float _2663;
    float _2665;
    float _2667;
    if (_2282)
    {
        _2663 = _2605;
        _2665 = _2606;
        _2667 = _2607;
    }
    else
    {
        uint _2669 = _2205 + 2u;
        uint _2673 = _2205 + 10u;
        float _2687 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2669].w)) * _717) * 0.949999988079071044921875);
        float _2688 = _2687 * _2687;
        float _2689 = cbLight._m0[_2669].x + _792;
        float _2690 = cbLight._m0[_2669].y + _793;
        float _2691 = cbLight._m0[_2669].z + _794;
        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
        float _2696 = _2695 * _2689;
        float _2697 = _2695 * _2690;
        float _2698 = _2695 * _2691;
        float _2699 = dot(vec3(_714, _715, _716), vec3(cbLight._m0[_2669].xyz));
        float _4734 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2702 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2703 = dot(vec3(_714, _715, _716), vec3(_2696, _2697, _2698));
        float _4745 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
        float _2706 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2707 = dot(vec3(cbLight._m0[_2669].xyz), vec3(_2696, _2697, _2698));
        float _4756 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2711 = _2688 * _2688;
        float _2715 = ((_2706 * _2706) * (_2711 + (-1.0))) + 1.0;
        float _2724 = (exp2(log2(1.0 - (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2725 = 1.0 - _2688;
        float _2735 = (0.5 / (((_2482 * ((_2702 * _2725) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2725) + _2688) * _2702))) * _2702;
        float _4767 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2737 = (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0))) * (_2711 / ((_2715 * _2715) * 3.141590118408203125));
        float _2738 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
        _2663 = (((_2724 * cbLight._m0[_2673].x) * _2737) * _2738) + _2605;
        _2665 = (((_2724 * cbLight._m0[_2673].y) * _2737) * _2738) + _2606;
        _2667 = (((_2724 * cbLight._m0[_2673].z) * _2737) * _2738) + _2607;
    }
    float _2769;
    float _2771;
    float _2773;
    if (_2391)
    {
        _2769 = _2663;
        _2771 = _2665;
        _2773 = _2667;
    }
    else
    {
        uint _2780 = _2205 + 3u;
        uint _2784 = _2205 + 11u;
        float _2798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2780].w)) * _717) * 0.949999988079071044921875);
        float _2799 = _2798 * _2798;
        float _2800 = cbLight._m0[_2780].x + _792;
        float _2801 = cbLight._m0[_2780].y + _793;
        float _2802 = cbLight._m0[_2780].z + _794;
        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
        float _2807 = _2806 * _2800;
        float _2808 = _2806 * _2801;
        float _2809 = _2806 * _2802;
        float _2810 = dot(vec3(_714, _715, _716), vec3(cbLight._m0[_2780].xyz));
        float _4783 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2814 = dot(vec3(_714, _715, _716), vec3(_2807, _2808, _2809));
        float _4794 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2818 = dot(vec3(cbLight._m0[_2780].xyz), vec3(_2807, _2808, _2809));
        float _4805 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2822 = _2799 * _2799;
        float _2826 = ((_2817 * _2817) * (_2822 + (-1.0))) + 1.0;
        float _2835 = (exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2836 = 1.0 - _2799;
        float _2846 = (0.5 / (((_2482 * ((_2813 * _2836) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2836) + _2799) * _2813))) * _2813;
        float _4816 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2848 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2822 / ((_2826 * _2826) * 3.141590118408203125));
        float _2849 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2769 = (((_2835 * cbLight._m0[_2784].x) * _2848) * _2849) + _2663;
        _2771 = (((_2835 * cbLight._m0[_2784].y) * _2848) * _2849) + _2665;
        _2773 = (((_2835 * cbLight._m0[_2784].z) * _2848) * _2849) + _2667;
    }
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    if (_2203.y == 0u)
    {
        uvec4 _2870 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2871 = _2870.x;
        uint _2882 = uint((float(_2870.y) * floor(float(uint(cbSceneParam._m0[85u].y * _814) / _2871))) + floor(float(uint(cbSceneParam._m0[85u].x * _813) / _2871)));
        float _2892 = (log2(_1981 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2893 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        uint _2896 = uint(isnan(14.0) ? _2893 : (isnan(_2893) ? 14.0 : min(_2893, 14.0)));
        uvec4 _2901 = texelFetch(g_lightClusterGridBuffer, int(((_2896 << 2u) + (_2882 << 6u)) >> 2u));
        uint _2902 = _2901.x;
        uint _2903 = _2870.z;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        if (((((1u << ((_2903 >> 4u) & 15u)) + 4294967295u) & _2902) == 0u) || ((_2903 & 240u) == 0u))
        {
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
        }
        else
        {
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            uint _3140 = 0u;
            uint _3149;
            bool _3150;
            for (;;)
            {
                _3149 = texelFetch(g_lightClassification, int((((_2896 << 5u) + (_2882 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                _3150 = _3149 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3150)
                {
                    frontier_phi_71_pred = _3139;
                    frontier_phi_71_pred_1 = _3138;
                    frontier_phi_71_pred_2 = _3137;
                    frontier_phi_71_pred_3 = _3136;
                    frontier_phi_71_pred_4 = _3135;
                    frontier_phi_71_pred_5 = _3134;
                }
                else
                {
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    uint _3285;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3149;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    for (;;)
                    {
                        uint _3289 = uint(findLSB(_3285)) + (_3140 << 5u);
                        uint _3286 = (_3285 + 4294967295u) & _3285;
                        uint _3291 = _3289 * 48u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 3u)).x));
                        uint _3311 = (_3289 * 48u) + 4u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 3u)).x));
                        uint _3330 = (_3289 * 48u) + 8u;
                        vec3 _3341 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x));
                        float _3345 = _3305.x - _1979;
                        float _3346 = _3305.y - _1980;
                        float _3347 = _3305.z - _1981;
                        float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                        float _3351 = inversesqrt(_3348);
                        float _3352 = _3351 * _3345;
                        float _3353 = _3351 * _3346;
                        float _3354 = _3351 * _3347;
                        float _3355 = dot(vec3(_834, _837, _840), vec3(_3352, _3353, _3354));
                        float _3360 = 1.0 - (_3348 * _3305.w);
                        float _4842 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3361 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                        float _3362 = sqrt(_3348) * _3324.w;
                        float _3365 = 1.39999997615814208984375 / (_3362 + 1.39999997615814208984375);
                        float _3366 = _3365 * _3365;
                        float _3369 = ((1.0 - _3366) * _3355) + _3366;
                        float _3372 = _3362 * _3362;
                        float _3376 = ((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3361) / ((_3372 * 0.699999988079071044921875) + 1.0);
                        float _3380 = (-0.0) - _1979;
                        float _3381 = (-0.0) - _1980;
                        float _3382 = (-0.0) - _1981;
                        float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                        float _3387 = _3386 * _3380;
                        float _3388 = _3386 * _3381;
                        float _3389 = _3386 * _3382;
                        float _3396 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                        float _3397 = 1.0 - _894;
                        float _3404 = sqrt(1.0 - ((1.0 - (_3397 * _3397)) * (1.0 - (_3396 * _3396))));
                        float _3405 = _3404 * _3404;
                        float _3406 = _3405 * _3405;
                        float _3407 = _3387 + _3352;
                        float _3408 = _3388 + _3353;
                        float _3409 = _3389 + _3354;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3417 = dot(vec3(_834, _837, _840), vec3(_3387, _3388, _3389));
                        float _4858 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                        float _3421 = dot(vec3(_834, _837, _840), vec3(_3413 * _3407, _3413 * _3408, _3413 * _3409));
                        float _4869 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                        float _3428 = ((_3424 * _3424) * (_3406 + (-1.0))) + 1.0;
                        float _3429 = _3365 * _3405;
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3355) + _3430;
                        float _4880 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3434 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                        float _3435 = 1.0 - _3405;
                        float _3445 = (0.5 / (((_3434 * ((_3420 * _3435) + _3405)) + 9.9999999392252902907785028219223e-09) + (((_3434 * _3435) + _3405) * _3420))) * _3434;
                        float _4891 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3456 = (((_3406 * 3.1415927410125732421875) * (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) / ((_3428 * _3428) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125))) * _3361;
                        _3209 = (_3376 * _3324.x) + _3282;
                        _3210 = (_3376 * _3324.y) + _3283;
                        _3211 = (_3376 * _3324.z) + _3284;
                        _3206 = (_3456 * _3341.x) + _3279;
                        _3207 = (_3456 * _3341.y) + _3280;
                        _3208 = (_3456 * _3341.z) + _3281;
                        if (_3286 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3286;
                        }
                    }
                    frontier_phi_71_pred = _3211;
                    frontier_phi_71_pred_1 = _3210;
                    frontier_phi_71_pred_2 = _3209;
                    frontier_phi_71_pred_3 = _3208;
                    frontier_phi_71_pred_4 = _3207;
                    frontier_phi_71_pred_5 = _3206;
                }
                _2993 = frontier_phi_71_pred;
                _2991 = frontier_phi_71_pred_1;
                _2989 = frontier_phi_71_pred_2;
                _2987 = frontier_phi_71_pred_3;
                _2985 = frontier_phi_71_pred_4;
                _2983 = frontier_phi_71_pred_5;
                uint _3141 = _3140 + 1u;
                if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3134 = _2983;
                    _3135 = _2985;
                    _3136 = _2987;
                    _3137 = _2989;
                    _3138 = _2991;
                    _3139 = _2993;
                    _3140 = _3141;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
        }
        uvec4 _2996 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2997 = _2996.z;
        uint _2999 = (_2997 >> 8u) & 15u;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        if (((4294967295u << _2999) & _2902) == 0u)
        {
            _3102 = _2982;
            _3104 = _2984;
            _3106 = _2986;
            _3108 = _2988;
            _3110 = _2990;
            _3112 = _2992;
        }
        else
        {
            float _3127 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
            float _3128 = _3127 * _1979;
            float _3129 = _3127 * _1980;
            float _3130 = _3127 * _1981;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2999 < ((_2997 >> 12u) & 15u))
            {
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3262 = _2982;
                float _3263 = _2984;
                float _3264 = _2986;
                float _3265 = _2988;
                float _3266 = _2990;
                float _3267 = _2992;
                uint _3268 = _2999;
                uint _3277;
                bool _3278;
                for (;;)
                {
                    _3277 = texelFetch(g_lightClassification, int((((_2896 << 5u) + (_2882 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                    _3278 = _3277 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3278)
                    {
                        frontier_phi_82_pred = _3267;
                        frontier_phi_82_pred_1 = _3266;
                        frontier_phi_82_pred_2 = _3265;
                        frontier_phi_82_pred_3 = _3264;
                        frontier_phi_82_pred_4 = _3263;
                        frontier_phi_82_pred_5 = _3262;
                    }
                    else
                    {
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3483 = _3262;
                        float _3484 = _3263;
                        float _3485 = _3264;
                        float _3486 = _3265;
                        float _3487 = _3266;
                        float _3488 = _3267;
                        uint _3489 = _3277;
                        uint _3490;
                        vec4 _3515;
                        float _3516;
                        vec4 _3531;
                        vec3 _3543;
                        vec4 _3558;
                        vec4 _3573;
                        float _3619;
                        bool _3620;
                        for (;;)
                        {
                            uint _3500 = ((_3268 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3489));
                            _3490 = (_3489 + 4294967295u) & _3489;
                            uint _3502 = _3500 * 40u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3516 = _3515.w;
                            uint _3518 = (_3500 * 40u) + 4u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3500 * 40u) + 8u;
                            _3543 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x));
                            uint _3545 = (_3500 * 40u) + 16u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3560 = (_3500 * 40u) + 20u;
                            _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3575 = (_3500 * 40u) + 24u;
                            vec4 _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3594 = (_3500 * 40u) + 28u;
                            vec4 _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            _3619 = fma(_1981, _3607.z, fma(_1980, _3607.y, _3607.x * _1979)) + _3607.w;
                            _3620 = !((fma(_1981, _3588.z, fma(_1980, _3588.y, _3588.x * _1979)) + _3588.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3620)
                            {
                                float _3647 = _3515.x - _1979;
                                float _3648 = _3515.y - _1980;
                                float _3649 = _3515.z - _1981;
                                float _3650 = dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649));
                                float _3653 = inversesqrt(_3650);
                                float _3654 = _3653 * _3647;
                                float _3655 = _3653 * _3648;
                                float _3656 = _3653 * _3649;
                                float _3660 = 1.0 - (_3650 / (_3516 * _3516));
                                float _4902 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
                                float _3665 = sqrt(_3650) * _3531.w;
                                float _3667 = 1.39999997615814208984375 / (_3665 + 1.39999997615814208984375);
                                float _3668 = _3667 * _3667;
                                float _3671 = ((1.0 - _3668) * dot(vec3(_3654, _3655, _3656), vec3(_834, _837, _840))) + _3668;
                                float _3674 = _3665 * _3665;
                                float _3678 = (fma(_1981, _3558.z, fma(_1980, _3558.y, _3558.x * _1979)) + _3558.w) / _3619;
                                float _3679 = (fma(_1981, _3573.z, fma(_1980, _3573.y, _3573.x * _1979)) + _3573.w) / _3619;
                                float _3683 = 1.0 - dot(vec2(_3678, _3679), vec2(_3678, _3679));
                                float _4918 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                                float _3685 = _3684 * (((isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0))) * _3661) / ((_3674 * 0.699999988079071044921875) + 1.0));
                                float _3697 = exp2(log2(1.0 / ((_3674 * 3.5) + 5.0)) * 0.25);
                                float _3698 = 1.0 - _894;
                                float _3705 = sqrt(1.0 - ((1.0 - (_3698 * _3698)) * (1.0 - (_3697 * _3697))));
                                float _3706 = _3705 * _3705;
                                float _3707 = _3706 * _3706;
                                float _3708 = _3654 - _3128;
                                float _3709 = _3655 - _3129;
                                float _3710 = _3656 - _3130;
                                float _3714 = inversesqrt(dot(vec3(_3708, _3709, _3710), vec3(_3708, _3709, _3710)));
                                float _3718 = dot(vec3(_834, _837, _840), vec3((-0.0) - _3128, (-0.0) - _3129, (-0.0) - _3130));
                                float _4929 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3721 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                                float _3722 = dot(vec3(_834, _837, _840), vec3(_3714 * _3708, _3714 * _3709, _3714 * _3710));
                                float _4940 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                                float _3729 = ((_3725 * _3725) * (_3707 + (-1.0))) + 1.0;
                                float _3730 = _3667 * _3706;
                                float _3731 = _3730 * _3730;
                                float _3737 = ((1.0 - _3731) * dot(vec3(_834, _837, _840), vec3(_3654, _3655, _3656))) + _3731;
                                float _4951 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3738 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3739 = 1.0 - _3706;
                                float _3749 = (0.5 / (((_3738 * ((_3721 * _3739) + _3706)) + 9.9999999392252902907785028219223e-09) + (((_3738 * _3739) + _3706) * _3721))) * _3738;
                                float _4962 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3759 = (_3684 * _3661) * (((_3707 * 3.1415927410125732421875) * (isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0)))) / ((_3729 * _3729) * ((_3674 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3685 * _3531.z;
                                frontier_phi_88_pred_1 = _3685 * _3531.y;
                                frontier_phi_88_pred_2 = _3685 * _3531.x;
                                frontier_phi_88_pred_3 = _3759 * _3543.z;
                                frontier_phi_88_pred_4 = _3759 * _3543.y;
                                frontier_phi_88_pred_5 = _3759 * _3543.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3768 = frontier_phi_88_pred;
                            _3767 = frontier_phi_88_pred_1;
                            _3766 = frontier_phi_88_pred_2;
                            _3765 = frontier_phi_88_pred_3;
                            _3764 = frontier_phi_88_pred_4;
                            _3763 = frontier_phi_88_pred_5;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            if (_3490 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3490;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3475;
                        frontier_phi_82_pred_1 = _3474;
                        frontier_phi_82_pred_2 = _3473;
                        frontier_phi_82_pred_3 = _3472;
                        frontier_phi_82_pred_4 = _3471;
                        frontier_phi_82_pred_5 = _3470;
                    }
                    _3113 = frontier_phi_82_pred;
                    _3111 = frontier_phi_82_pred_1;
                    _3109 = frontier_phi_82_pred_2;
                    _3107 = frontier_phi_82_pred_3;
                    _3105 = frontier_phi_82_pred_4;
                    _3103 = frontier_phi_82_pred_5;
                    uint _3269 = _3268 + 1u;
                    if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3262 = _3103;
                        _3263 = _3105;
                        _3264 = _3107;
                        _3265 = _3109;
                        _3266 = _3111;
                        _3267 = _3113;
                        _3268 = _3269;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3109;
                frontier_phi_63_64_ladder_1 = _3113;
                frontier_phi_63_64_ladder_2 = _3111;
                frontier_phi_63_64_ladder_3 = _3107;
                frontier_phi_63_64_ladder_4 = _3105;
                frontier_phi_63_64_ladder_5 = _3103;
            }
            else
            {
                frontier_phi_63_64_ladder = _2988;
                frontier_phi_63_64_ladder_1 = _2992;
                frontier_phi_63_64_ladder_2 = _2990;
                frontier_phi_63_64_ladder_3 = _2986;
                frontier_phi_63_64_ladder_4 = _2984;
                frontier_phi_63_64_ladder_5 = _2982;
            }
            _3102 = frontier_phi_63_64_ladder_5;
            _3104 = frontier_phi_63_64_ladder_4;
            _3106 = frontier_phi_63_64_ladder_3;
            _3108 = frontier_phi_63_64_ladder;
            _3110 = frontier_phi_63_64_ladder_2;
            _3112 = frontier_phi_63_64_ladder_1;
        }
        float _3117 = isnan(1.0) ? _878 : (isnan(_878) ? 1.0 : min(_878, 1.0));
        _2915 = (_3117 * _3108) + _2446;
        _2917 = (_3117 * _3110) + _2448;
        _2919 = (_3117 * _3112) + _2450;
        _2921 = ((_3102 * 0.039999999105930328369140625) * _3117) + _2769;
        _2923 = ((_3104 * 0.039999999105930328369140625) * _3117) + _2771;
        _2925 = ((_3106 * 0.039999999105930328369140625) * _3117) + _2773;
    }
    else
    {
        _2915 = _2446;
        _2917 = _2448;
        _2919 = _2450;
        _2921 = _2769;
        _2923 = _2771;
        _2925 = _2773;
    }
    float _4978 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4989 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _5000 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2942 = ((isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0))) * (_2915 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _878))) + ((_2921 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1714)) * cbPerFrame._m0[3u].x);
    float _2943 = ((isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0))) * (_2917 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _878))) + ((_2923 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1714)) * cbPerFrame._m0[3u].x);
    float _2944 = ((isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0))) * (_2919 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _878))) + ((_2925 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1714)) * cbPerFrame._m0[3u].x);
    uint _2945 = _273 + 6u;
    float _2953 = _813 / cbSceneParam._m0[86u].x;
    float _2954 = _814 / cbSceneParam._m0[86u].y;
    vec4 _2968 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2953, _2954, (log2((isnan(cbSceneParam._m0[77u].w) ? _735 : (isnan(_735) ? cbSceneParam._m0[77u].w : min(_735, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2970 = _2968.x;
    float _2971 = _2968.y;
    float _2972 = _2968.z;
    float _2973 = _2968.w;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    if (_735 > cbSceneParam._m0[78u].w)
    {
        float _3007 = isnan(_735) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _735 : min(cbSceneParam._m0[80u].w, _735));
        float _3008 = _3007 / _735;
        float _3019 = _3008 * _785;
        float _3020 = _786 * _3008;
        float _3021 = (-0.0) - _3020;
        float _3022 = _3008 * _787;
        float _3024 = (cbSceneParam._m0[77u].w * _3021) / _3007;
        float _3025 = _3024 + cbSceneParam._m0[79u].w;
        float _3026 = cbSceneParam._m0[79u].w - _3020;
        float _3032 = sqrt(((_3019 * _3019) + (_3020 * _3020)) + (_3022 * _3022));
        float _3035 = (1.0 - (cbSceneParam._m0[77u].w / _3007)) * _3032;
        float _3040 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3042 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3219;
        if (abs((_3021 - _3024) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3219 = ((((_3025 > 0.0) ? exp2(_3040 * _3025) : (2.0 - exp2(_3042 * _3025))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3035;
        }
        else
        {
            float _3163 = 1.0 / cbSceneParam._m0[80u].x;
            float _3164 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : max(_3025, _3026));
            float _3165 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : min(_3025, _3026));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            float _3175 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : min(_3165, 0.0));
            _3219 = ((abs(_3032 / _3021) * cbSceneParam._m0[80u].y) * ((((_3174 - _3175) * 2.0) - ((exp2(_3040 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0)))) - exp2(_3040 * (isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))))) * _3163)) - ((exp2(_3042 * _3174) - exp2(_3042 * _3175)) * _3163))) + (_3035 * cbSceneParam._m0[80u].z);
        }
        vec4 _3221 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2953, _2954, 1.0), 0.0);
        float _3230 = exp2((_3219 * (-1.44269502162933349609375)) * (1.0 - _3221.w));
        float _3231 = log2(_3230);
        float _3247 = log2(_2973);
        _3044 = (exp2(_3247 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].x)) * _3221.x) / cbSceneParam._m0[78u].x)) + _2970;
        _3046 = (exp2(_3247 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].y)) * _3221.y) / cbSceneParam._m0[78u].y)) + _2971;
        _3048 = (exp2(_3247 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].z)) * _3221.z) / cbSceneParam._m0[78u].z)) + _2972;
        _3050 = _3230 * _2973;
    }
    else
    {
        _3044 = _2970;
        _3046 = _2971;
        _3048 = _2972;
        _3050 = _2973;
    }
    bool _3257;
    vec4 _3060;
    vec4 _3082;
    float _3084;
    float _3088;
    float _3089;
    float _3090;
    float _3091;
    bool _3101;
    for (;;)
    {
        _3060 = cbMatDynParam._m0[0u];
        float _3062 = roundEven(_3060.y);
        bool _3063 = _3062 == 3.0;
        float _3064 = log2(_3050);
        float _3071 = exp2(_3064 * cbSceneParam._m0[78u].x) * _2942;
        float _3072 = exp2(_3064 * cbSceneParam._m0[78u].y) * _2943;
        float _3073 = exp2(_3064 * cbSceneParam._m0[78u].z) * _2944;
        float _3080 = _801 + (-0.5);
        _3082 = cbMtdParam._m0[1u];
        _3084 = _3082.y * _3080;
        float _3087 = (_3062 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3088 = _3087 * (_3063 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3044)));
        _3089 = _3087 * (_3063 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3046)));
        _3090 = _3087 * (_3063 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3048)));
        _3091 = _3080 * 0.999000012874603271484375;
        _3101 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3101)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _3091) < 0.5)
            {
                _3257 = true;
                break;
            }
        }
        uint _3198 = _853 + uint(_3060.w);
        if ((cbInstanceData._m0[_3198].w < 1.0) && ((cbInstanceData._m0[_3198].w + _3091) < 0.5))
        {
            _3257 = true;
            break;
        }
        if ((_3084 + 1.0) < _3082.x)
        {
            _3257 = true;
            break;
        }
        _3257 = false;
        break;
    }
    float _3461;
    if (_3257)
    {
        discard_state = true;
        _3461 = 0.0;
    }
    else
    {
        _3461 = cbInstanceData._m0[_2945].w;
    }
    SV_Target.x = _3088;
    SV_Target.y = _3089;
    SV_Target.z = _3090;
    SV_Target.w = _3461;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2945].w;
    discard_exit();
}


