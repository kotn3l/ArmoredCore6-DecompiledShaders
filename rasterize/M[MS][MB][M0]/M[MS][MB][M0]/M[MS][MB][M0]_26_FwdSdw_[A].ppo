#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1176;
float _3821;
float _3822;
float _3823;
float _3824;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _284.x * cbMtdParam._m0[9u].x;
    float _291 = _284.y * cbMtdParam._m0[9u].y;
    float _292 = _284.z * cbMtdParam._m0[9u].z;
    vec4 _310 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _340 = _336.z;
    float _344 = (_336.x * 2.0) + (-1.0);
    float _345 = (_336.y * 2.0) + (-1.0);
    float _346 = dot(vec2(_344, _345), vec2(_344, _345));
    float _3833 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _352 = sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))));
    float _357 = _344 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_310.x * 2.0) + (-1.0)));
    float _358 = _345 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_310.y * 2.0) + (-1.0)));
    float _361 = fma(_352, _233, fma(_358, _240, _357 * _226));
    float _364 = fma(_352, _234, fma(_358, _241, _357 * _227));
    float _367 = fma(_352, _235, fma(_358, _242, _357 * _228));
    float _371 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    vec4 _407 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _409 = _407.x;
    float _410 = 1.0 - _409;
    float _419 = (cbMtdParam._m0[19u].x + dot(vec4(_371 * _361, _371 * _364, _371 * _367, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_409 - _410) * cbMtdParam._m0[24u].z) + _410) * cbMtdParam._m0[21u].z);
    float _3844 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _422 = (-0.0) - cbMtdParam._m0[24u].y;
    float _424 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _425 = isnan(1.0) ? _424 : (isnan(_424) ? 1.0 : min(_424, 1.0));
    float _432 = _420 - ((_420 * TEXCOORD_8.x) * _425);
    float _433 = _420 - ((_420 * TEXCOORD_8.y) * _425);
    float _434 = _420 - ((_420 * TEXCOORD_8.z) * _425);
    float _441 = (_432 * (cbMtdParam._m0[17u].x - _290)) + _290;
    float _442 = (_433 * (cbMtdParam._m0[17u].y - _291)) + _291;
    float _443 = (_434 * (cbMtdParam._m0[17u].z - _292)) + _292;
    vec4 _455 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _457 = _455.x;
    float _458 = 1.0 - _457;
    float _488 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_457 - _458) * cbMtdParam._m0[24u].w) + _458) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3865 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _489 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _497 = ((((cbMtdParam._m0[10u].x - _441) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _489) + _441;
    float _498 = ((((cbMtdParam._m0[10u].y - _442) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _489) + _442;
    float _499 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _443)) * _489) + _443;
    float _504 = (((_310.z - _340) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _340;
    vec4 _518 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _525 = (_518.x * 2.0) + (-1.0);
    float _526 = (_518.y * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3876 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _535 = ((_518.z - _504) * _432) + _504;
    float _538 = ((cbMtdParam._m0[23u].y - _535) * _489) + _535;
    vec4 _557 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _563 = (_557.x * 2.0) + (-1.0);
    float _564 = (_557.y * 2.0) + (-1.0);
    float _565 = dot(vec2(_563, _564), vec2(_563, _564));
    float _3887 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _580 = ((sqrt(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) - _352) * _434) + _352;
    float _583 = (((_525 - _357) * _432) + _357) + (cbMtdParam._m0[21u].x * _357);
    float _584 = (((_526 - _358) * _433) + _358) + (cbMtdParam._m0[21u].x * _358);
    float _595 = (((_563 - _583) + (_583 * cbMtdParam._m0[22u].z)) * _489) + _583;
    float _596 = (((_564 - _584) + (_584 * cbMtdParam._m0[22u].z)) * _489) + _584;
    float _597 = (_489 * (sqrt(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) - _580)) + _580;
    float _599 = cbMtdParam._m0[22u].x + _336.w;
    float _602 = fma(_597, _233, fma(_596, _240, _595 * _226));
    float _605 = fma(_597, _234, fma(_596, _241, _595 * _227));
    float _608 = fma(_597, _235, fma(_596, _242, _595 * _228));
    float _612 = inversesqrt(dot(vec3(_602, _605, _608), vec3(_602, _605, _608)));
    float _613 = _612 * _602;
    float _614 = _612 * _605;
    float _615 = _612 * _608;
    float _3898 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _616 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3920 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _3931 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3942 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _634 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _684 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _674);
    float _685 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _674);
    float _686 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _674);
    float _690 = inversesqrt(dot(vec3(_684, _685, _686), vec3(_684, _685, _686)));
    float _691 = _684 * _690;
    float _692 = _685 * _690;
    float _693 = _686 * _690;
    vec4 _698 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _700 = _698.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _857 = sqrt(((_684 * _684) + (_685 * _685)) + (_686 * _686));
        float _863 = (cbMatDynParam._m0[5u].x * _857) + cbMatDynParam._m0[5u].y;
        float _3953 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _868 = (cbMatDynParam._m0[5u].z * _857) + cbMatDynParam._m0[5u].w;
        float _3964 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) - _864)) + _864) < ((_700 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _712 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _713 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _733 = fma(_615, cbSceneParam._m0[5u].z, fma(_614, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _613));
    float _736 = fma(_615, cbSceneParam._m0[6u].z, fma(_614, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _613));
    float _739 = fma(_615, cbSceneParam._m0[7u].z, fma(_614, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _613));
    uint _752 = _245 + 9u;
    uint _753 = _752 + uint(cbMatDynParam._m0[0u].w);
    float _759 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * cbInstanceData._m0[_753].x;
    float _760 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_753].y;
    float _761 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_753].z;
    float _3975 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _762 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _763 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _764 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    vec4 _773 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _712, cbSceneParam._m0[86u].y * _713));
    float _777 = ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * TEXCOORD_5.w) * _773.x;
    float _778 = dot(vec3(_613, _614, _615), vec3(_691, _692, _693));
    float _781 = _778 * 2.0;
    float _785 = (_781 * _613) - _691;
    float _786 = (_781 * _614) - _692;
    float _787 = (_781 * _615) - _693;
    float _791 = abs(dot(vec3(_691, _692, _693), vec3(_613, _614, _615)));
    float _4008 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _793 = sqrt(_616);
    float _806 = exp2((_793 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_793 * 3.0));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1175;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _900 = fma(_846, cbModelParam._m0[26u].z, fma(_842, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _838));
        float _904 = fma(_846, cbModelParam._m0[27u].z, fma(_842, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _838));
        float _908 = fma(_846, cbModelParam._m0[28u].z, fma(_842, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _838));
        float _933 = _838 + _613;
        float _934 = _842 + _614;
        float _935 = _846 + _615;
        float _945 = fma(_935, cbModelParam._m0[26u].z, fma(_934, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _933)) - _900;
        float _946 = fma(_935, cbModelParam._m0[27u].z, fma(_934, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _933)) - _904;
        float _947 = fma(_935, cbModelParam._m0[28u].z, fma(_934, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _933)) - _908;
        float _951 = inversesqrt(dot(vec3(_945, _946, _947), vec3(_945, _946, _947)));
        float _964 = ((_951 * _945) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_900 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_951 * _946) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_904 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_951 * _947) / cbModelParam._m0[34u].z) + ((((((_908 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_964, _965, _966), 0.0);
        float _1003 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_969.x + (-0.5));
        float _1005 = _1003 * (_969.y + (-0.5));
        float _1006 = _1003 * (_969.z + (-0.5));
        float _1013 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_976.x + (-0.5));
        float _1015 = _1013 * (_976.y + (-0.5));
        float _1016 = _1013 * (_976.z + (-0.5));
        float _1023 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_983.x + (-0.5));
        float _1025 = _1023 * (_983.y + (-0.5));
        float _1026 = _1023 * (_983.z + (-0.5));
        float _1033 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_990.x + (-0.5));
        float _1035 = _1033 * (_990.y + (-0.5));
        float _1036 = _1033 * (_990.z + (-0.5));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1040 = _1004 * 0.5;
        float _1041 = _1014 * 0.5;
        float _1042 = _1024 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1057 = (dot(vec3(_613, _614, _615), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1067 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _4056 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1069 + 1.0))) + _1074) * _1037;
        float _1084 = _1005 * 0.5;
        float _1085 = _1015 * 0.5;
        float _1086 = _1025 * 0.5;
        float _1087 = dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086));
        float _1092 = (_1087 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1087);
        float _1100 = (dot(vec3(_613, _614, _615), vec3(_1092 * _1084, _1092 * _1085, _1092 * _1086)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1109 = sqrt(((_1085 * _1085) + (_1084 * _1084)) + (_1086 * _1086)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _4089 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1111 + 1.0))) + _1116) * _1038;
        float _1126 = _1006 * 0.5;
        float _1127 = _1016 * 0.5;
        float _1128 = _1026 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_613, _614, _615), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1039 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4122 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1153 + 1.0))) + _1158) * _1039;
        _1175 = _1006;
        _1177 = _1005;
        _1178 = _1004;
        _1179 = _1016;
        _1180 = _1015;
        _1181 = _1014;
        _1182 = _1026;
        _1183 = _1025;
        _1184 = _1024;
        _1185 = _1039;
        _1186 = _1038;
        _1187 = _1037;
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1190 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
    }
    else
    {
        _1175 = _1176;
        _1177 = _1176;
        _1178 = _1176;
        _1179 = _1176;
        _1180 = _1176;
        _1181 = _1176;
        _1182 = _1176;
        _1183 = _1176;
        _1184 = _1176;
        _1185 = _1176;
        _1186 = _1176;
        _1187 = _1176;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1218 = fma(_846, cbModelParam._m0[30u].z, fma(_842, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _838));
        float _1222 = fma(_846, cbModelParam._m0[31u].z, fma(_842, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _838));
        float _1226 = fma(_846, cbModelParam._m0[32u].z, fma(_842, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _838));
        float _1249 = _838 + _613;
        float _1250 = _842 + _614;
        float _1251 = _846 + _615;
        float _1261 = fma(_1251, cbModelParam._m0[30u].z, fma(_1250, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1249)) - _1218;
        float _1262 = fma(_1251, cbModelParam._m0[31u].z, fma(_1250, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1249)) - _1222;
        float _1263 = fma(_1251, cbModelParam._m0[32u].z, fma(_1250, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1249)) - _1226;
        float _1267 = inversesqrt(dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263)));
        float _1280 = ((_1267 * _1261) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1218 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1267 * _1262) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1222 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1267 * _1263) / cbModelParam._m0[35u].z) + ((((((_1226 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        float _1317 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1284.x + (-0.5));
        float _1319 = _1317 * (_1284.y + (-0.5));
        float _1320 = _1317 * (_1284.z + (-0.5));
        float _1327 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1291.x + (-0.5));
        float _1329 = _1327 * (_1291.y + (-0.5));
        float _1330 = _1327 * (_1291.z + (-0.5));
        float _1337 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1298.x + (-0.5));
        float _1339 = _1337 * (_1298.y + (-0.5));
        float _1340 = _1337 * (_1298.z + (-0.5));
        float _1347 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1305.x + (-0.5));
        float _1349 = _1347 * (_1305.y + (-0.5));
        float _1350 = _1347 * (_1305.z + (-0.5));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = _1318 * 0.5;
        float _1355 = _1328 * 0.5;
        float _1356 = _1338 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_613, _614, _615), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4185 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1381 + 1.0))) + _1386) * _1351;
        float _1396 = _1319 * 0.5;
        float _1397 = _1329 * 0.5;
        float _1398 = _1339 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_613, _614, _615), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4218 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1423 + 1.0))) + _1428) * _1352;
        float _1438 = _1320 * 0.5;
        float _1439 = _1330 * 0.5;
        float _1440 = _1340 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_613, _614, _615), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4251 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1465 + 1.0))) + _1470) * _1353;
        _1487 = _1320;
        _1488 = _1319;
        _1489 = _1318;
        _1490 = _1330;
        _1491 = _1329;
        _1492 = _1328;
        _1493 = _1340;
        _1494 = _1339;
        _1495 = _1338;
        _1496 = _1353;
        _1497 = _1352;
        _1498 = _1351;
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
    }
    else
    {
        _1487 = _1176;
        _1488 = _1176;
        _1489 = _1176;
        _1490 = _1176;
        _1491 = _1176;
        _1492 = _1176;
        _1493 = _1176;
        _1494 = _1176;
        _1495 = _1176;
        _1496 = _1176;
        _1497 = _1176;
        _1498 = _1176;
        _1499 = 0.0;
        _1500 = 0.0;
        _1501 = 0.0;
    }
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1188)) + _1188;
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1189)) + _1189;
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1190)) + _1190;
    float _1534 = fma(_1513, cbSceneParam._m0[89u].z, fma(_1512, cbSceneParam._m0[89u].y, _1511 * cbSceneParam._m0[89u].x));
    float _1537 = fma(_1513, cbSceneParam._m0[90u].z, fma(_1512, cbSceneParam._m0[90u].y, _1511 * cbSceneParam._m0[90u].x));
    float _1540 = fma(_1513, cbSceneParam._m0[91u].z, fma(_1512, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1511));
    float _1555 = _785 * 0.5;
    float _1556 = _786 * 0.5;
    float _1557 = _787 * 0.5;
    float _1558 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1561 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1564 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1598;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1571 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1175, _1179, _1182, _1185));
        float _1575 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1579 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1178, _1181, _1184, _1187));
        float _1586 = dot(vec4(cbModelParam._m0[39u]), vec4(_1555, _1556, _1557, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1586) ? 0.0 : (isnan(0.0) ? _1586 : max(0.0, _1586))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1609;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1600 = dot(vec4(cbModelParam._m0[40u]), vec4(_1555, _1556, _1557, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1613 = (_1609 * cbModelParam._m0[1u].x) + (_1598 * (1.0 - cbModelParam._m0[1u].x));
    float _1623 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _616);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1623 : min(cbModelParam._m0[25u].z, _1623));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1672 = fma(_846, cbModelParam._m0[13u].z, fma(_842, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _838)) + cbModelParam._m0[13u].w;
        float _1676 = fma(_846, cbModelParam._m0[14u].z, fma(_842, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _838)) + cbModelParam._m0[14u].w;
        float _1680 = fma(_846, cbModelParam._m0[15u].z, fma(_842, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _838)) + cbModelParam._m0[15u].w;
        float _1683 = fma(_787, cbModelParam._m0[13u].z, fma(_786, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _785));
        float _1686 = fma(_787, cbModelParam._m0[14u].z, fma(_786, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _785));
        float _1689 = fma(_787, cbModelParam._m0[15u].z, fma(_786, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _785));
        float _1717;
        if (_1683 > 0.0)
        {
            _1717 = abs((1.0 - _1672) / _1683);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1672 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1717 = frontier_phi_17_15_ladder;
        }
        float _1888;
        if (_1686 > 0.0)
        {
            _1888 = abs((1.0 - _1676) / _1686);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1676 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1888 = frontier_phi_26_22_ladder;
        }
        float _2184;
        if (_1689 > 0.0)
        {
            _2184 = abs((1.0 - _1680) / _1689);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1680 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2184 = frontier_phi_38_33_ladder;
        }
        float _2186 = isnan(_1888) ? _1717 : (isnan(_1717) ? _1888 : min(_1717, _1888));
        float _2187 = isnan(_2184) ? _2186 : (isnan(_2186) ? _2184 : min(_2186, _2184));
        float _2191 = (_2187 * _1683) + _1672;
        float _2192 = (_2187 * _1686) + _1676;
        float _2193 = (_2187 * _1689) + _1680;
        float _2194 = _2187 * 9.9999997473787516355514526367188e-05;
        float _2196 = (-1.0) - _2194;
        float _2198 = _2194 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2193 > _2198) || ((_2193 < _2196) || ((_2192 > _2198) || ((_2192 < _2196) || ((_2191 < _2196) || (_2191 > _2198))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2338 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2193, cbModelParam._m0[9u].z, fma(_2192, cbModelParam._m0[9u].y, _2191 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2193, cbModelParam._m0[10u].z, fma(_2192, cbModelParam._m0[10u].y, _2191 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2193, cbModelParam._m0[11u].z, fma(_2192, cbModelParam._m0[11u].y, _2191 * cbModelParam._m0[11u].x))), _1624);
            frontier_phi_16_38_ladder = _2338.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2338.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2338.x * cbModelParam._m0[1u].y;
        }
        _1705 = frontier_phi_16_38_ladder_2;
        _1707 = frontier_phi_16_38_ladder_1;
        _1709 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_785, _786, _787), _1624);
        _1705 = _1693.x * cbModelParam._m0[1u].y;
        _1707 = _1693.y * cbModelParam._m0[1u].y;
        _1709 = _1693.z * cbModelParam._m0[1u].y;
    }
    float _1713 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _616);
    float _1714 = isnan(_1713) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1713 : min(cbModelParam._m0[25u].w, _1713));
    float _1804;
    float _1806;
    float _1808;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1768 = fma(_846, cbModelParam._m0[21u].z, fma(_842, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _838)) + cbModelParam._m0[21u].w;
        float _1772 = fma(_846, cbModelParam._m0[22u].z, fma(_842, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _838)) + cbModelParam._m0[22u].w;
        float _1776 = fma(_846, cbModelParam._m0[23u].z, fma(_842, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _838)) + cbModelParam._m0[23u].w;
        float _1779 = fma(_787, cbModelParam._m0[21u].z, fma(_786, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _785));
        float _1782 = fma(_787, cbModelParam._m0[22u].z, fma(_786, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _785));
        float _1785 = fma(_787, cbModelParam._m0[23u].z, fma(_786, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _785));
        float _1893;
        if (_1779 > 0.0)
        {
            _1893 = abs((1.0 - _1768) / _1779);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1768 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1893 = frontier_phi_28_24_ladder;
        }
        float _2211;
        if (_1782 > 0.0)
        {
            _2211 = abs((1.0 - _1772) / _1782);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1772 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2211 = frontier_phi_40_35_ladder;
        }
        float _2538;
        if (_1785 > 0.0)
        {
            _2538 = abs((1.0 - _1776) / _1785);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1776 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2538 = frontier_phi_50_47_ladder;
        }
        float _2540 = isnan(_2211) ? _1893 : (isnan(_1893) ? _2211 : min(_1893, _2211));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _1779) + _1768;
        float _2546 = (_2541 * _1782) + _1772;
        float _2547 = (_2541 * _1785) + _1776;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2548;
        float _2551 = _2548 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2547 > _2551) || ((_2547 < _2549) || ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 < _2549) || (_2545 > _2551))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2665 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2547, cbModelParam._m0[17u].z, fma(_2546, cbModelParam._m0[17u].y, _2545 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2547, cbModelParam._m0[18u].z, fma(_2546, cbModelParam._m0[18u].y, _2545 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2547, cbModelParam._m0[19u].z, fma(_2546, cbModelParam._m0[19u].y, _2545 * cbModelParam._m0[19u].x))), _1714);
            frontier_phi_25_50_ladder = _2665.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2665.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2665.x * cbModelParam._m0[1u].z;
        }
        _1804 = frontier_phi_25_50_ladder_2;
        _1806 = frontier_phi_25_50_ladder_1;
        _1808 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1788 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_785, _786, _787), _1714);
        _1804 = _1788.x * cbModelParam._m0[1u].z;
        _1806 = _1788.y * cbModelParam._m0[1u].z;
        _1808 = _1788.z * cbModelParam._m0[1u].z;
    }
    float _1820 = ((((1.0 - _806) * ((_793 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_806 * _793)) * _777;
    float _1821 = _1820 * ((cbModelParam._m0[1u].w * (_1804 - _1705)) + _1705);
    float _1822 = _1820 * ((cbModelParam._m0[1u].w * (_1806 - _1707)) + _1707);
    float _1823 = _1820 * ((cbModelParam._m0[1u].w * (_1808 - _1709)) + _1709);
    float _1826 = fma(_1823, cbSceneParam._m0[89u].z, fma(_1822, cbSceneParam._m0[89u].y, _1821 * cbSceneParam._m0[89u].x));
    float _1829 = fma(_1823, cbSceneParam._m0[90u].z, fma(_1822, cbSceneParam._m0[90u].y, _1821 * cbSceneParam._m0[90u].x));
    float _1832 = fma(_1823, cbSceneParam._m0[91u].z, fma(_1822, cbSceneParam._m0[91u].y, _1821 * cbSceneParam._m0[91u].x));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1879 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1880 = _1867 / _1879;
    float _1881 = _1871 / _1879;
    float _1882 = _1875 / _1879;
    float _2029;
    float _2030;
    float _2031;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1909 = ((uint(_1882 > cbSceneParam._m0[59u].y) + uint(_1882 > cbSceneParam._m0[59u].x)) + uint(_1882 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1910 = _1909 + 43u;
        uint _1918 = _1909 + 44u;
        uint _1926 = _1909 + 45u;
        uint _1934 = _1909 + 46u;
        float _1945 = fma(_1879, cbSceneParam._m0[_1910].w, fma(_1875, cbSceneParam._m0[_1910].z, fma(_1871, cbSceneParam._m0[_1910].y, _1867 * cbSceneParam._m0[_1910].x)));
        float _1949 = fma(_1879, cbSceneParam._m0[_1918].w, fma(_1875, cbSceneParam._m0[_1918].z, fma(_1871, cbSceneParam._m0[_1918].y, _1867 * cbSceneParam._m0[_1918].x)));
        float _1957 = fma(_1879, cbSceneParam._m0[_1934].w, fma(_1875, cbSceneParam._m0[_1934].z, fma(_1871, cbSceneParam._m0[_1934].y, _1867 * cbSceneParam._m0[_1934].x)));
        float _1962 = cbSceneParam._m0[33u].z * _1957;
        float _1964 = cbSceneParam._m0[33u].w * _1957;
        float _1967 = fma(_1879, cbSceneParam._m0[_1926].w, fma(_1875, cbSceneParam._m0[_1926].z, fma(_1871, cbSceneParam._m0[_1926].y, _1867 * cbSceneParam._m0[_1926].x))) / _1957;
        float _2015 = (cbSceneParam._m0[33u].x - sqrt(((_1881 * _1881) + (_1880 * _1880)) + (_1882 * _1882))) * cbSceneParam._m0[33u].y;
        float _4377 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2022 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1962 + _1945) / _1957, (_1964 + _1949) / _1957), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 + _1945) / _1957, (_1949 - _1962) / _1957), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 - _1962) / _1957, (_1949 - _1964) / _1957), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 - _1964) / _1957, (_1962 + _1949) / _1957), _1967), 0.0)).x), vec4(0.25)));
        _2029 = 1.0 - (_2022 * cbSceneParam._m0[34u].x);
        _2030 = 1.0 - (_2022 * cbSceneParam._m0[34u].y);
        _2031 = 1.0 - (_2022 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2029 = 1.0;
        _2030 = 1.0;
        _2031 = 1.0;
    }
    float _2095;
    float _2097;
    float _2099;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2083 = fma(_1879, cbSceneParam._m0[63u].w, fma(_1875, cbSceneParam._m0[63u].z, fma(_1871, cbSceneParam._m0[63u].y, _1867 * cbSceneParam._m0[63u].x)));
        float _2084 = fma(_1879, cbSceneParam._m0[60u].w, fma(_1875, cbSceneParam._m0[60u].z, fma(_1871, cbSceneParam._m0[60u].y, _1867 * cbSceneParam._m0[60u].x))) / _2083;
        float _2085 = fma(_1879, cbSceneParam._m0[61u].w, fma(_1875, cbSceneParam._m0[61u].z, fma(_1871, cbSceneParam._m0[61u].y, _1867 * cbSceneParam._m0[61u].x))) / _2083;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2084 >= cbSceneParam._m0[64u].x) && (_2085 >= cbSceneParam._m0[64u].y)) && (_2084 <= cbSceneParam._m0[64u].z)) && (_2085 <= cbSceneParam._m0[64u].w))
        {
            float _2224 = fma(_1879, cbSceneParam._m0[62u].w, fma(_1875, cbSceneParam._m0[62u].z, fma(_1871, cbSceneParam._m0[62u].y, _1867 * cbSceneParam._m0[62u].x))) / _2083;
            float _2228 = isnan(cbSceneParam._m0[41u].w) ? _2224 : (isnan(_2224) ? cbSceneParam._m0[41u].w : max(_2224, cbSceneParam._m0[41u].w));
            float _2271 = (cbSceneParam._m0[33u].x - sqrt(((_1881 * _1881) + (_1880 * _1880)) + (_1882 * _1882))) * cbSceneParam._m0[33u].y;
            float _4393 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
            float _2278 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2084, cbSceneParam._m0[33u].w + _2085), _2228), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2084, _2085 - cbSceneParam._m0[33u].z), _2228), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2084 - cbSceneParam._m0[33u].z, _2085 - cbSceneParam._m0[33u].w), _2228), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2084 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2085), _2228), 0.0)).x), vec4(0.25)));
            float _2282 = 1.0 - (_2278 * cbSceneParam._m0[34u].x);
            float _2283 = 1.0 - (_2278 * cbSceneParam._m0[34u].y);
            float _2284 = 1.0 - (_2278 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2284) ? _2031 : (isnan(_2031) ? _2284 : min(_2031, _2284));
            frontier_phi_37_36_ladder_1 = isnan(_2283) ? _2030 : (isnan(_2030) ? _2283 : min(_2030, _2283));
            frontier_phi_37_36_ladder_2 = isnan(_2282) ? _2029 : (isnan(_2029) ? _2282 : min(_2029, _2282));
        }
        else
        {
            frontier_phi_37_36_ladder = _2031;
            frontier_phi_37_36_ladder_1 = _2030;
            frontier_phi_37_36_ladder_2 = _2029;
        }
        _2095 = frontier_phi_37_36_ladder_2;
        _2097 = frontier_phi_37_36_ladder_1;
        _2099 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2095 = _2029;
        _2097 = _2030;
        _2099 = _2031;
    }
    uvec4 _2104 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _2106 = _2104.x * 14u;
    uint _2107 = _2106 + 13u;
    float _2114 = _777 + (-1.0);
    float _2119 = (cbLight._m0[_2107].x * _2114) + 1.0;
    float _2120 = (cbLight._m0[_2107].y * _2114) + 1.0;
    float _2121 = (cbLight._m0[_2107].z * _2114) + 1.0;
    float _2122 = (cbLight._m0[_2107].w * _2114) + 1.0;
    uint _2123 = _2106 + 5u;
    float _2129 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2133 = _2106 + 4u;
    float _2143 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
    uint _2147 = _2106 | 1u;
    float _2158 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_613, _614, _615));
    float _2161 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_613, _614, _615));
    float _4429 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _4440 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2166 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * 0.3183098733425140380859375;
    float _2168 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * 0.3183098733425140380859375;
    float _2175 = ((cbLight._m0[_2123].x * _2129) * _2168) + (((cbLight._m0[_2133].x * _2095) * _2143) * _2166);
    float _2176 = ((_2129 * cbLight._m0[_2123].y) * _2168) + (((cbLight._m0[_2133].y * _2097) * _2143) * _2166);
    float _2177 = ((_2129 * cbLight._m0[_2123].z) * _2168) + (((cbLight._m0[_2133].z * _2099) * _2143) * _2166);
    uvec4 _2181 = floatBitsToUint(cbLight._m0[_2106 + 12u]);
    bool _2183 = _2181.x == 0u;
    float _2285;
    float _2287;
    float _2289;
    if (_2183)
    {
        _2285 = _2175;
        _2287 = _2176;
        _2289 = _2177;
    }
    else
    {
        uint _2293 = _2106 + 6u;
        float _2309 = (dot(vec3(cbLight._m0[_2106 + 2u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2310 = _2309 * _2309;
        float _4451 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2311 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2312 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2285 = (((cbLight._m0[_2293].x * 0.3183098733425140380859375) * _2311) * _2312) + _2175;
        _2287 = (((cbLight._m0[_2293].y * 0.3183098733425140380859375) * _2311) * _2312) + _2176;
        _2289 = (((cbLight._m0[_2293].z * 0.3183098733425140380859375) * _2311) * _2312) + _2177;
    }
    bool _2292 = _2181.y == 0u;
    float _2347;
    float _2349;
    float _2351;
    if (_2292)
    {
        _2347 = _2285;
        _2349 = _2287;
        _2351 = _2289;
    }
    else
    {
        uint _2509 = _2106 + 7u;
        float _2525 = (dot(vec3(cbLight._m0[_2106 + 3u].xyz), vec3(_613, _614, _615)) * 0.5) + 0.5;
        float _2526 = _2525 * _2525;
        float _4467 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2527 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2528 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2347 = (((cbLight._m0[_2509].x * 0.3183098733425140380859375) * _2527) * _2528) + _2285;
        _2349 = (((cbLight._m0[_2509].y * 0.3183098733425140380859375) * _2527) * _2528) + _2287;
        _2351 = (((cbLight._m0[_2509].z * 0.3183098733425140380859375) * _2527) * _2528) + _2289;
    }
    uint _2354 = _2106 + 8u;
    float _2367 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _616) * 0.949999988079071044921875);
    float _2368 = _2367 * _2367;
    float _2369 = cbLight._m0[_2106].x + _691;
    float _2370 = cbLight._m0[_2106].y + _692;
    float _2371 = cbLight._m0[_2106].z + _693;
    float _2375 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
    float _2376 = _2375 * _2369;
    float _2377 = _2375 * _2370;
    float _2378 = _2375 * _2371;
    float _2379 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2106].xyz));
    float _4483 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _4494 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _2383 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2384 = dot(vec3(_613, _614, _615), vec3(_2376, _2377, _2378));
    float _4505 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2387 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2388 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2376, _2377, _2378));
    float _4516 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2392 = _2368 * _2368;
    float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
    float _2407 = (exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2408 = 1.0 - _2368;
    float _2419 = (0.5 / (((_2383 * ((_2382 * _2408) + _2368)) + 9.9999999392252902907785028219223e-09) + (((_2383 * _2408) + _2368) * _2382))) * _2382;
    float _4527 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2421 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
    uint _2435 = _2106 + 9u;
    float _2446 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _616) * 0.949999988079071044921875);
    float _2447 = _2446 * _2446;
    float _2448 = cbLight._m0[_2147].x + _691;
    float _2449 = cbLight._m0[_2147].y + _692;
    float _2450 = cbLight._m0[_2147].z + _693;
    float _2454 = inversesqrt(dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450)));
    float _2455 = _2454 * _2448;
    float _2456 = _2454 * _2449;
    float _2457 = _2454 * _2450;
    float _2458 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2147].xyz));
    float _4538 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2461 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2462 = dot(vec3(_613, _614, _615), vec3(_2455, _2456, _2457));
    float _4549 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2465 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2466 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2455, _2456, _2457));
    float _4560 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2470 = _2447 * _2447;
    float _2474 = ((_2465 * _2465) * (_2470 + (-1.0))) + 1.0;
    float _2483 = (exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2484 = 1.0 - _2447;
    float _2494 = (0.5 / (((_2383 * ((_2461 * _2484) + _2447)) + 9.9999999392252902907785028219223e-09) + (((_2383 * _2484) + _2447) * _2461))) * _2461;
    float _4571 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2496 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2470 / ((_2474 * _2474) * 3.141590118408203125));
    float _2506 = (((_2483 * cbLight._m0[_2435].x) * _2496) * _2129) + ((((cbLight._m0[_2354].x * _2095) * _2407) * _2421) * _2143);
    float _2507 = (((_2483 * cbLight._m0[_2435].y) * _2496) * _2129) + ((((cbLight._m0[_2354].y * _2097) * _2407) * _2421) * _2143);
    float _2508 = (((_2483 * cbLight._m0[_2435].z) * _2496) * _2129) + ((((cbLight._m0[_2354].z * _2099) * _2407) * _2421) * _2143);
    float _2564;
    float _2566;
    float _2568;
    if (_2183)
    {
        _2564 = _2506;
        _2566 = _2507;
        _2568 = _2508;
    }
    else
    {
        uint _2570 = _2106 + 2u;
        uint _2574 = _2106 + 10u;
        float _2588 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2570].w)) * _616) * 0.949999988079071044921875);
        float _2589 = _2588 * _2588;
        float _2590 = cbLight._m0[_2570].x + _691;
        float _2591 = cbLight._m0[_2570].y + _692;
        float _2592 = cbLight._m0[_2570].z + _693;
        float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
        float _2597 = _2596 * _2590;
        float _2598 = _2596 * _2591;
        float _2599 = _2596 * _2592;
        float _2600 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2570].xyz));
        float _4582 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2604 = dot(vec3(_613, _614, _615), vec3(_2597, _2598, _2599));
        float _4593 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2608 = dot(vec3(cbLight._m0[_2570].xyz), vec3(_2597, _2598, _2599));
        float _4604 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2612 = _2589 * _2589;
        float _2616 = ((_2607 * _2607) * (_2612 + (-1.0))) + 1.0;
        float _2625 = (exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2626 = 1.0 - _2589;
        float _2636 = (0.5 / (((_2383 * ((_2603 * _2626) + _2589)) + 9.9999999392252902907785028219223e-09) + (((_2383 * _2626) + _2589) * _2603))) * _2603;
        float _4615 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2638 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2612 / ((_2616 * _2616) * 3.141590118408203125));
        float _2639 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2564 = (((_2625 * cbLight._m0[_2574].x) * _2638) * _2639) + _2506;
        _2566 = (((_2625 * cbLight._m0[_2574].y) * _2638) * _2639) + _2507;
        _2568 = (((_2625 * cbLight._m0[_2574].z) * _2638) * _2639) + _2508;
    }
    float _2670;
    float _2672;
    float _2674;
    if (_2292)
    {
        _2670 = _2564;
        _2672 = _2566;
        _2674 = _2568;
    }
    else
    {
        uint _2681 = _2106 + 3u;
        uint _2685 = _2106 + 11u;
        float _2699 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2681].w)) * _616) * 0.949999988079071044921875);
        float _2700 = _2699 * _2699;
        float _2701 = cbLight._m0[_2681].x + _691;
        float _2702 = cbLight._m0[_2681].y + _692;
        float _2703 = cbLight._m0[_2681].z + _693;
        float _2707 = inversesqrt(dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703)));
        float _2708 = _2707 * _2701;
        float _2709 = _2707 * _2702;
        float _2710 = _2707 * _2703;
        float _2711 = dot(vec3(_613, _614, _615), vec3(cbLight._m0[_2681].xyz));
        float _4631 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2714 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2715 = dot(vec3(_613, _614, _615), vec3(_2708, _2709, _2710));
        float _4642 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2719 = dot(vec3(cbLight._m0[_2681].xyz), vec3(_2708, _2709, _2710));
        float _4653 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2723 = _2700 * _2700;
        float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
        float _2736 = (exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2737 = 1.0 - _2700;
        float _2747 = (0.5 / (((_2383 * ((_2714 * _2737) + _2700)) + 9.9999999392252902907785028219223e-09) + (((_2383 * _2737) + _2700) * _2714))) * _2714;
        float _4664 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2749 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
        float _2750 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2670 = (((_2736 * cbLight._m0[_2685].x) * _2749) * _2750) + _2564;
        _2672 = (((_2736 * cbLight._m0[_2685].y) * _2749) * _2750) + _2566;
        _2674 = (((_2736 * cbLight._m0[_2685].z) * _2749) * _2750) + _2568;
    }
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    float _2826;
    if (_2104.y == 0u)
    {
        uvec4 _2771 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2772 = _2771.x;
        uint _2783 = uint((float(_2771.y) * floor(float(uint(cbSceneParam._m0[85u].y * _713) / _2772))) + floor(float(uint(cbSceneParam._m0[85u].x * _712) / _2772)));
        float _2793 = (log2(_1882 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2794 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
        uint _2797 = uint(isnan(14.0) ? _2794 : (isnan(_2794) ? 14.0 : min(_2794, 14.0)));
        uvec4 _2802 = texelFetch(g_lightClusterGridBuffer, int(((_2797 << 2u) + (_2783 << 6u)) >> 2u));
        uint _2803 = _2802.x;
        uint _2804 = _2771.z;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        if (((((1u << ((_2804 >> 4u) & 15u)) + 4294967295u) & _2803) == 0u) || ((_2804 & 240u) == 0u))
        {
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
        }
        else
        {
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _2894;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            float _3039 = 0.0;
            float _3040 = 0.0;
            uint _3041 = 0u;
            uint _3050;
            bool _3051;
            for (;;)
            {
                _3050 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3041 << 2u)) >> 2u)).x;
                _3051 = _3050 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3051)
                {
                    frontier_phi_71_pred = _3040;
                    frontier_phi_71_pred_1 = _3039;
                    frontier_phi_71_pred_2 = _3038;
                    frontier_phi_71_pred_3 = _3037;
                    frontier_phi_71_pred_4 = _3036;
                    frontier_phi_71_pred_5 = _3035;
                }
                else
                {
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    uint _3186;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3039;
                    _3185 = _3040;
                    _3186 = _3050;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    for (;;)
                    {
                        uint _3190 = uint(findLSB(_3186)) + (_3041 << 5u);
                        uint _3187 = (_3186 + 4294967295u) & _3186;
                        uint _3192 = _3190 * 48u;
                        vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3192)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3192 + 3u)).x));
                        uint _3212 = (_3190 * 48u) + 4u;
                        vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3212)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3212 + 3u)).x));
                        uint _3231 = (_3190 * 48u) + 8u;
                        vec3 _3242 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3231)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3231 + 2u)).x));
                        float _3246 = _3206.x - _1880;
                        float _3247 = _3206.y - _1881;
                        float _3248 = _3206.z - _1882;
                        float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                        float _3252 = inversesqrt(_3249);
                        float _3253 = _3252 * _3246;
                        float _3254 = _3252 * _3247;
                        float _3255 = _3252 * _3248;
                        float _3256 = dot(vec3(_733, _736, _739), vec3(_3253, _3254, _3255));
                        float _3261 = 1.0 - (_3249 * _3206.w);
                        float _4690 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                        float _3262 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3263 = sqrt(_3249) * _3225.w;
                        float _3266 = 1.39999997615814208984375 / (_3263 + 1.39999997615814208984375);
                        float _3267 = _3266 * _3266;
                        float _3270 = ((1.0 - _3267) * _3256) + _3267;
                        float _3273 = _3263 * _3263;
                        float _3277 = ((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3262) / ((_3273 * 0.699999988079071044921875) + 1.0);
                        float _3281 = (-0.0) - _1880;
                        float _3282 = (-0.0) - _1881;
                        float _3283 = (-0.0) - _1882;
                        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                        float _3288 = _3287 * _3281;
                        float _3289 = _3287 * _3282;
                        float _3290 = _3287 * _3283;
                        float _3297 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                        float _3298 = 1.0 - _793;
                        float _3305 = sqrt(1.0 - ((1.0 - (_3298 * _3298)) * (1.0 - (_3297 * _3297))));
                        float _3306 = _3305 * _3305;
                        float _3307 = _3306 * _3306;
                        float _3308 = _3288 + _3253;
                        float _3309 = _3289 + _3254;
                        float _3310 = _3290 + _3255;
                        float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                        float _3318 = dot(vec3(_733, _736, _739), vec3(_3288, _3289, _3290));
                        float _4706 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3321 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                        float _3322 = dot(vec3(_733, _736, _739), vec3(_3314 * _3308, _3314 * _3309, _3314 * _3310));
                        float _4717 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                        float _3325 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3329 = ((_3325 * _3325) * (_3307 + (-1.0))) + 1.0;
                        float _3330 = _3266 * _3306;
                        float _3331 = _3330 * _3330;
                        float _3334 = ((1.0 - _3331) * _3256) + _3331;
                        float _4728 = isnan(0.0) ? _3334 : (isnan(_3334) ? 0.0 : max(_3334, 0.0));
                        float _3335 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3336 = 1.0 - _3306;
                        float _3346 = (0.5 / (((_3335 * ((_3321 * _3336) + _3306)) + 9.9999999392252902907785028219223e-09) + (((_3335 * _3336) + _3306) * _3321))) * _3335;
                        float _4739 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3357 = (((_3307 * 3.1415927410125732421875) * (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) / ((_3329 * _3329) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125))) * _3262;
                        _3110 = (_3277 * _3225.x) + _3183;
                        _3111 = (_3277 * _3225.y) + _3184;
                        _3112 = (_3277 * _3225.z) + _3185;
                        _3107 = (_3357 * _3242.x) + _3180;
                        _3108 = (_3357 * _3242.y) + _3181;
                        _3109 = (_3357 * _3242.z) + _3182;
                        if (_3187 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3111;
                            _3185 = _3112;
                            _3186 = _3187;
                        }
                    }
                    frontier_phi_71_pred = _3112;
                    frontier_phi_71_pred_1 = _3111;
                    frontier_phi_71_pred_2 = _3110;
                    frontier_phi_71_pred_3 = _3109;
                    frontier_phi_71_pred_4 = _3108;
                    frontier_phi_71_pred_5 = _3107;
                }
                _2894 = frontier_phi_71_pred;
                _2892 = frontier_phi_71_pred_1;
                _2890 = frontier_phi_71_pred_2;
                _2888 = frontier_phi_71_pred_3;
                _2886 = frontier_phi_71_pred_4;
                _2884 = frontier_phi_71_pred_5;
                uint _3042 = _3041 + 1u;
                if (_3042 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3035 = _2884;
                    _3036 = _2886;
                    _3037 = _2888;
                    _3038 = _2890;
                    _3039 = _2892;
                    _3040 = _2894;
                    _3041 = _3042;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
        }
        uvec4 _2897 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2898 = _2897.z;
        uint _2900 = (_2898 >> 8u) & 15u;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((4294967295u << _2900) & _2803) == 0u)
        {
            _3003 = _2883;
            _3005 = _2885;
            _3007 = _2887;
            _3009 = _2889;
            _3011 = _2891;
            _3013 = _2893;
        }
        else
        {
            float _3028 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
            float _3029 = _3028 * _1880;
            float _3030 = _3028 * _1881;
            float _3031 = _3028 * _1882;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2900 < ((_2898 >> 12u) & 15u))
            {
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3014;
                float _3163 = _2883;
                float _3164 = _2885;
                float _3165 = _2887;
                float _3166 = _2889;
                float _3167 = _2891;
                float _3168 = _2893;
                uint _3169 = _2900;
                uint _3178;
                bool _3179;
                for (;;)
                {
                    _3178 = texelFetch(g_lightClassification, int((((_2797 << 5u) + (_2783 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                    _3179 = _3178 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3179)
                    {
                        frontier_phi_82_pred = _3168;
                        frontier_phi_82_pred_1 = _3167;
                        frontier_phi_82_pred_2 = _3166;
                        frontier_phi_82_pred_3 = _3165;
                        frontier_phi_82_pred_4 = _3164;
                        frontier_phi_82_pred_5 = _3163;
                    }
                    else
                    {
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3384 = _3163;
                        float _3385 = _3164;
                        float _3386 = _3165;
                        float _3387 = _3166;
                        float _3388 = _3167;
                        float _3389 = _3168;
                        uint _3390 = _3178;
                        uint _3391;
                        vec4 _3416;
                        float _3417;
                        vec4 _3432;
                        vec3 _3444;
                        vec4 _3460;
                        vec4 _3475;
                        float _3521;
                        bool _3522;
                        for (;;)
                        {
                            uint _3401 = ((_3169 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3390));
                            _3391 = (_3390 + 4294967295u) & _3390;
                            uint _3403 = _3401 * 40u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            _3417 = _3416.w;
                            uint _3419 = (_3401 * 40u) + 4u;
                            _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3434 = (_3401 * 40u) + 8u;
                            _3444 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x));
                            uint _3447 = (_3401 * 40u) + 16u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3462 = (_3401 * 40u) + 20u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3401 * 40u) + 24u;
                            vec4 _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3496 = (_3401 * 40u) + 28u;
                            vec4 _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            _3521 = fma(_1882, _3509.z, fma(_1881, _3509.y, _3509.x * _1880)) + _3509.w;
                            _3522 = !((fma(_1882, _3490.z, fma(_1881, _3490.y, _3490.x * _1880)) + _3490.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3522)
                            {
                                float _3549 = _3416.x - _1880;
                                float _3550 = _3416.y - _1881;
                                float _3551 = _3416.z - _1882;
                                float _3552 = dot(vec3(_3549, _3550, _3551), vec3(_3549, _3550, _3551));
                                float _3555 = inversesqrt(_3552);
                                float _3556 = _3555 * _3549;
                                float _3557 = _3555 * _3550;
                                float _3558 = _3555 * _3551;
                                float _3562 = 1.0 - (_3552 / (_3417 * _3417));
                                float _4750 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3563 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3567 = sqrt(_3552) * _3432.w;
                                float _3569 = 1.39999997615814208984375 / (_3567 + 1.39999997615814208984375);
                                float _3570 = _3569 * _3569;
                                float _3573 = ((1.0 - _3570) * dot(vec3(_3556, _3557, _3558), vec3(_733, _736, _739))) + _3570;
                                float _3576 = _3567 * _3567;
                                float _3580 = (fma(_1882, _3460.z, fma(_1881, _3460.y, _3460.x * _1880)) + _3460.w) / _3521;
                                float _3581 = (fma(_1882, _3475.z, fma(_1881, _3475.y, _3475.x * _1880)) + _3475.w) / _3521;
                                float _3585 = 1.0 - dot(vec2(_3580, _3581), vec2(_3580, _3581));
                                float _4766 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3586 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3587 = _3586 * (((isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0))) * _3563) / ((_3576 * 0.699999988079071044921875) + 1.0));
                                float _3599 = exp2(log2(1.0 / ((_3576 * 3.5) + 5.0)) * 0.25);
                                float _3600 = 1.0 - _793;
                                float _3607 = sqrt(1.0 - ((1.0 - (_3600 * _3600)) * (1.0 - (_3599 * _3599))));
                                float _3608 = _3607 * _3607;
                                float _3609 = _3608 * _3608;
                                float _3610 = _3556 - _3029;
                                float _3611 = _3557 - _3030;
                                float _3612 = _3558 - _3031;
                                float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                                float _3620 = dot(vec3(_733, _736, _739), vec3((-0.0) - _3029, (-0.0) - _3030, (-0.0) - _3031));
                                float _4777 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3623 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3624 = dot(vec3(_733, _736, _739), vec3(_3616 * _3610, _3616 * _3611, _3616 * _3612));
                                float _4788 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3627 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3631 = ((_3627 * _3627) * (_3609 + (-1.0))) + 1.0;
                                float _3632 = _3569 * _3608;
                                float _3633 = _3632 * _3632;
                                float _3639 = ((1.0 - _3633) * dot(vec3(_733, _736, _739), vec3(_3556, _3557, _3558))) + _3633;
                                float _4799 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3640 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3641 = 1.0 - _3608;
                                float _3651 = (0.5 / (((_3640 * ((_3623 * _3641) + _3608)) + 9.9999999392252902907785028219223e-09) + (((_3640 * _3641) + _3608) * _3623))) * _3640;
                                float _4810 = isnan(0.0) ? _3651 : (isnan(_3651) ? 0.0 : max(_3651, 0.0));
                                float _3661 = (_3586 * _3563) * (((_3609 * 3.1415927410125732421875) * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) / ((_3631 * _3631) * ((_3576 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3587 * _3432.z;
                                frontier_phi_88_pred_1 = _3587 * _3432.y;
                                frontier_phi_88_pred_2 = _3587 * _3432.x;
                                frontier_phi_88_pred_3 = _3661 * _3444.z;
                                frontier_phi_88_pred_4 = _3661 * _3444.y;
                                frontier_phi_88_pred_5 = _3661 * _3444.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3670 = frontier_phi_88_pred;
                            _3669 = frontier_phi_88_pred_1;
                            _3668 = frontier_phi_88_pred_2;
                            _3667 = frontier_phi_88_pred_3;
                            _3666 = frontier_phi_88_pred_4;
                            _3665 = frontier_phi_88_pred_5;
                            _3374 = _3668 + _3387;
                            _3375 = _3669 + _3388;
                            _3376 = _3670 + _3389;
                            _3371 = _3665 + _3384;
                            _3372 = _3666 + _3385;
                            _3373 = _3667 + _3386;
                            if (_3391 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3391;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3376;
                        frontier_phi_82_pred_1 = _3375;
                        frontier_phi_82_pred_2 = _3374;
                        frontier_phi_82_pred_3 = _3373;
                        frontier_phi_82_pred_4 = _3372;
                        frontier_phi_82_pred_5 = _3371;
                    }
                    _3014 = frontier_phi_82_pred;
                    _3012 = frontier_phi_82_pred_1;
                    _3010 = frontier_phi_82_pred_2;
                    _3008 = frontier_phi_82_pred_3;
                    _3006 = frontier_phi_82_pred_4;
                    _3004 = frontier_phi_82_pred_5;
                    uint _3170 = _3169 + 1u;
                    if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3163 = _3004;
                        _3164 = _3006;
                        _3165 = _3008;
                        _3166 = _3010;
                        _3167 = _3012;
                        _3168 = _3014;
                        _3169 = _3170;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3010;
                frontier_phi_63_64_ladder_1 = _3014;
                frontier_phi_63_64_ladder_2 = _3012;
                frontier_phi_63_64_ladder_3 = _3008;
                frontier_phi_63_64_ladder_4 = _3006;
                frontier_phi_63_64_ladder_5 = _3004;
            }
            else
            {
                frontier_phi_63_64_ladder = _2889;
                frontier_phi_63_64_ladder_1 = _2893;
                frontier_phi_63_64_ladder_2 = _2891;
                frontier_phi_63_64_ladder_3 = _2887;
                frontier_phi_63_64_ladder_4 = _2885;
                frontier_phi_63_64_ladder_5 = _2883;
            }
            _3003 = frontier_phi_63_64_ladder_5;
            _3005 = frontier_phi_63_64_ladder_4;
            _3007 = frontier_phi_63_64_ladder_3;
            _3009 = frontier_phi_63_64_ladder;
            _3011 = frontier_phi_63_64_ladder_2;
            _3013 = frontier_phi_63_64_ladder_1;
        }
        float _3018 = isnan(1.0) ? _777 : (isnan(_777) ? 1.0 : min(_777, 1.0));
        _2816 = (_3018 * _3009) + _2347;
        _2818 = (_3018 * _3011) + _2349;
        _2820 = (_3018 * _3013) + _2351;
        _2822 = ((_3003 * 0.039999999105930328369140625) * _3018) + _2670;
        _2824 = ((_3005 * 0.039999999105930328369140625) * _3018) + _2672;
        _2826 = ((_3007 * 0.039999999105930328369140625) * _3018) + _2674;
    }
    else
    {
        _2816 = _2347;
        _2818 = _2349;
        _2820 = _2351;
        _2822 = _2670;
        _2824 = _2672;
        _2826 = _2674;
    }
    float _4826 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4837 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4848 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _2843 = ((isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2816 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _777))) + ((_2822 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1613)) * cbPerFrame._m0[3u].x);
    float _2844 = ((isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2818 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _777))) + ((_2824 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1613)) * cbPerFrame._m0[3u].x);
    float _2845 = ((isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2820 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _777))) + ((_2826 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1613)) * cbPerFrame._m0[3u].x);
    uint _2846 = _245 + 6u;
    float _2854 = _712 / cbSceneParam._m0[86u].x;
    float _2855 = _713 / cbSceneParam._m0[86u].y;
    vec4 _2869 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2854, _2855, (log2((isnan(cbSceneParam._m0[77u].w) ? _634 : (isnan(_634) ? cbSceneParam._m0[77u].w : min(_634, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2871 = _2869.x;
    float _2872 = _2869.y;
    float _2873 = _2869.z;
    float _2874 = _2869.w;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_634 > cbSceneParam._m0[78u].w)
    {
        float _2908 = isnan(_634) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _634 : min(cbSceneParam._m0[80u].w, _634));
        float _2909 = _2908 / _634;
        float _2920 = _2909 * _684;
        float _2921 = _685 * _2909;
        float _2922 = (-0.0) - _2921;
        float _2923 = _2909 * _686;
        float _2925 = (cbSceneParam._m0[77u].w * _2922) / _2908;
        float _2926 = _2925 + cbSceneParam._m0[79u].w;
        float _2927 = cbSceneParam._m0[79u].w - _2921;
        float _2933 = sqrt(((_2920 * _2920) + (_2921 * _2921)) + (_2923 * _2923));
        float _2936 = (1.0 - (cbSceneParam._m0[77u].w / _2908)) * _2933;
        float _2941 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2943 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3120;
        if (abs((_2922 - _2925) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3120 = ((((_2926 > 0.0) ? exp2(_2941 * _2926) : (2.0 - exp2(_2943 * _2926))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2936;
        }
        else
        {
            float _3064 = 1.0 / cbSceneParam._m0[80u].x;
            float _3065 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : max(_2926, _2927));
            float _3066 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : min(_2926, _2927));
            float _3075 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : min(_3065, 0.0));
            float _3076 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : min(_3066, 0.0));
            _3120 = ((abs(_2933 / _2922) * cbSceneParam._m0[80u].y) * ((((_3075 - _3076) * 2.0) - ((exp2(_2941 * (isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0)))) - exp2(_2941 * (isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))))) * _3064)) - ((exp2(_2943 * _3075) - exp2(_2943 * _3076)) * _3064))) + (_2936 * cbSceneParam._m0[80u].z);
        }
        vec4 _3122 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2854, _2855, 1.0), 0.0);
        float _3131 = exp2((_3120 * (-1.44269502162933349609375)) * (1.0 - _3122.w));
        float _3132 = log2(_3131);
        float _3148 = log2(_2874);
        _2945 = (exp2(_3148 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].x)) * _3122.x) / cbSceneParam._m0[78u].x)) + _2871;
        _2947 = (exp2(_3148 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].y)) * _3122.y) / cbSceneParam._m0[78u].y)) + _2872;
        _2949 = (exp2(_3148 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].z)) * _3122.z) / cbSceneParam._m0[78u].z)) + _2873;
        _2951 = _3131 * _2874;
    }
    else
    {
        _2945 = _2871;
        _2947 = _2872;
        _2949 = _2873;
        _2951 = _2874;
    }
    bool _3158;
    vec4 _2961;
    vec4 _2983;
    float _2985;
    float _2989;
    float _2990;
    float _2991;
    float _2992;
    bool _3002;
    for (;;)
    {
        _2961 = cbMatDynParam._m0[0u];
        float _2963 = roundEven(_2961.y);
        bool _2964 = _2963 == 3.0;
        float _2965 = log2(_2951);
        float _2972 = exp2(_2965 * cbSceneParam._m0[78u].x) * _2843;
        float _2973 = exp2(_2965 * cbSceneParam._m0[78u].y) * _2844;
        float _2974 = exp2(_2965 * cbSceneParam._m0[78u].z) * _2845;
        float _2981 = _700 + (-0.5);
        _2983 = cbMtdParam._m0[1u];
        _2985 = _2983.y * _2981;
        float _2988 = (_2963 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2989 = _2988 * (_2964 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2945)));
        _2990 = _2988 * (_2964 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2947)));
        _2991 = _2988 * (_2964 ? _2974 : (_2974 + (cbSceneParam._m0[72u].w * _2949)));
        _2992 = _2981 * 0.999000012874603271484375;
        _3002 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3002)
        {
            if ((cbInstanceData._m0[_245 + 7u].x + _2992) < 0.5)
            {
                _3158 = true;
                break;
            }
        }
        uint _3099 = _752 + uint(_2961.w);
        if ((cbInstanceData._m0[_3099].w < 1.0) && ((cbInstanceData._m0[_3099].w + _2992) < 0.5))
        {
            _3158 = true;
            break;
        }
        if ((_2985 + 1.0) < _2983.x)
        {
            _3158 = true;
            break;
        }
        _3158 = false;
        break;
    }
    float _3362;
    if (_3158)
    {
        discard_state = true;
        _3362 = 0.0;
    }
    else
    {
        _3362 = cbInstanceData._m0[_2846].w;
    }
    SV_Target.x = _2989;
    SV_Target.y = _2990;
    SV_Target.z = _2991;
    SV_Target.w = _3362;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2846].w;
    discard_exit();
}


