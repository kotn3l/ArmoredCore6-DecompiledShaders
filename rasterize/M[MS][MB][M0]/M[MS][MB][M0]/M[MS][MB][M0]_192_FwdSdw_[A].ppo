#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1455;
float _4097;
float _4098;
float _4099;
float _4100;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4109 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4120 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4131 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    uint _287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _292 = _287 + 1u;
    uint _296 = _287 + 2u;
    float _305 = sqrt(((cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x)) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x));
    float _306 = _305 * TEXCOORD.z;
    float _307 = _305 * TEXCOORD.w;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _306) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _307) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _349 = _344.x * cbMtdParam._m0[11u].x;
    float _350 = _344.y * cbMtdParam._m0[11u].y;
    float _351 = _344.z * cbMtdParam._m0[11u].z;
    vec4 _370 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _306) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _307) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _419 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _436 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_409 - _419) * cbMtdParam._m0[24u].x) + _419) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4142 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _444 = (_437 * ((_370.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _445 = (_437 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _446 = (_437 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _463 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _306) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _307) + cbTextureTilingScale._m0[3u].w));
    vec4 _483 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _485 = _483.x;
    float _495 = dot(vec4(_485, _483.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _509 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_485 - _495) * cbMtdParam._m0[24u].x) + _495) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4153 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _510 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _517 = (_510 * ((_463.x * cbMtdParam._m0[13u].x) - _444)) + _444;
    float _518 = (_510 * ((_463.y * cbMtdParam._m0[13u].y) - _445)) + _445;
    float _519 = (_510 * ((_463.z * cbMtdParam._m0[13u].z) - _446)) + _446;
    float _523 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _320.x) * _517;
    float _526 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _320.y) * _518;
    float _529 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _320.z) * _519;
    float _536 = ((_517 - _523) * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) + _523;
    float _537 = ((_518 - _526) * (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) + _526;
    float _538 = ((_519 - _529) * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) + _529;
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _306) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _307) + cbTextureTilingScale._m0[20u].w));
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _306) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _307) + cbTextureTilingScale._m0[4u].w));
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _597 = _595.x;
    float _598 = _595.y;
    float _599 = _595.z;
    float _606 = ((_578.x - _597) * _437) + _597;
    float _607 = ((_578.y - _598) * _437) + _598;
    float _608 = ((_578.z - _599) * _437) + _599;
    vec4 _620 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _306) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _307) + cbTextureTilingScale._m0[2u].w));
    float _633 = ((_620.z - _608) * _510) + _608;
    float _636 = ((((_620.x - _606) * _510) + _606) * 2.0) + (-1.0);
    float _637 = ((((_620.y - _607) * _510) + _607) * 2.0) + (-1.0);
    float _638 = dot(vec2(_636, _637), vec2(_636, _637));
    float _4164 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _643 = sqrt(1.0 - (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))));
    vec4 _657 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _682 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _306) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _307) + cbTextureTilingScale._m0[11u].w));
    float _684 = _682.x;
    float _685 = 1.0 - _684;
    float _691 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _694 = ((isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : min(_691, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _703 = (_694 - ((((((_684 - _685) * cbMtdParam._m0[24u].z) + _685) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _694))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4185 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _704 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _711 = (_704 * (cbMtdParam._m0[17u].x - _536)) + _536;
    float _712 = (_704 * (cbMtdParam._m0[17u].y - _537)) + _537;
    float _713 = (_704 * (cbMtdParam._m0[17u].z - _538)) + _538;
    vec4 _725 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _306) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _307) + cbTextureTilingScale._m0[19u].w));
    float _727 = _725.x;
    float _728 = 1.0 - _727;
    float _753 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_727 - _728) * cbMtdParam._m0[24u].w) + _728) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4196 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _762 = ((((cbMtdParam._m0[10u].x - _711) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _754) + _711;
    float _763 = ((((cbMtdParam._m0[10u].y - _712) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _754) + _712;
    float _764 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _713)) * _754) + _713;
    float _769 = (((_555.z - _633) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _633;
    float _773 = ((_657.z - _769) * cbMtdParam._m0[19u].w) + _769;
    vec4 _787 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _306) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _307) + cbTextureTilingScale._m0[15u].w));
    float _794 = (_787.x * 2.0) + (-1.0);
    float _795 = (_787.y * 2.0) + (-1.0);
    float _796 = dot(vec2(_794, _795), vec2(_794, _795));
    float _4207 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _804 = (_704 * (_787.z - _773)) + _773;
    float _807 = ((cbMtdParam._m0[23u].y - _804) * _754) + _804;
    vec4 _826 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _306) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _307) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _832 = (_826.x * 2.0) + (-1.0);
    float _833 = (_826.y * 2.0) + (-1.0);
    float _834 = dot(vec2(_832, _833), vec2(_832, _833));
    float _4218 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _848 = (_636 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_555.x * 2.0) + (-1.0)))) + (((_657.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _849 = (_637 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_555.y * 2.0) + (-1.0)))) + (((_657.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _861 = (((_794 - _848) + (cbMtdParam._m0[21u].x * _848)) * _704) + _848;
    float _862 = (((_795 - _849) + (cbMtdParam._m0[21u].x * _849)) * _704) + _849;
    float _863 = (_704 * (sqrt(1.0 - (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) - _643)) + _643;
    float _874 = (((_832 - _861) + (_861 * cbMtdParam._m0[22u].z)) * _754) + _861;
    float _875 = (((_833 - _862) + (_862 * cbMtdParam._m0[22u].z)) * _754) + _862;
    float _876 = ((sqrt(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) - _863) * _754) + _863;
    float _880 = cbMtdParam._m0[22u].x + _657.w;
    float _883 = fma(_876, _255 * NORMAL.x, fma(_875, _262 * TANGENT.x, (_248 * _240) * _874));
    float _886 = fma(_876, _255 * NORMAL.y, fma(_875, _262 * TANGENT.y, (_248 * _241) * _874));
    float _889 = fma(_876, _255 * NORMAL.z, fma(_875, _262 * TANGENT.z, (_248 * _242) * _874));
    float _893 = inversesqrt(dot(vec3(_883, _886, _889), vec3(_883, _886, _889)));
    float _894 = _893 * _883;
    float _895 = _893 * _886;
    float _896 = _893 * _889;
    float _4229 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _897 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _4240 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4251 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4262 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4273 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _915 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _966 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _956);
    float _967 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _956);
    float _968 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _956);
    float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
    float _973 = _966 * _972;
    float _974 = _967 * _972;
    float _975 = _968 * _972;
    vec4 _980 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _982 = _980.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1136 = sqrt(((_966 * _966) + (_967 * _967)) + (_968 * _968));
        float _1142 = (cbMatDynParam._m0[5u].x * _1136) + cbMatDynParam._m0[5u].y;
        float _4284 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1147 = (cbMatDynParam._m0[5u].z * _1136) + cbMatDynParam._m0[5u].w;
        float _4295 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) - _1143)) + _1143) < ((_982 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _993 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _994 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1012 = fma(_896, cbSceneParam._m0[5u].z, fma(_895, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _894));
    float _1015 = fma(_896, cbSceneParam._m0[6u].z, fma(_895, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _894));
    float _1018 = fma(_896, cbSceneParam._m0[7u].z, fma(_895, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _894));
    uint _1031 = _287 + 9u;
    uint _1032 = _1031 + uint(cbMatDynParam._m0[0u].w);
    float _1038 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * cbInstanceData._m0[_1032].x;
    float _1039 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * cbInstanceData._m0[_1032].y;
    float _1040 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * cbInstanceData._m0[_1032].z;
    float _4306 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1041 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _4317 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
    float _1042 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _4328 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
    float _1043 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    vec4 _1052 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _993, cbSceneParam._m0[86u].y * _994));
    float _1056 = ((isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * TEXCOORD_5.w) * _1052.x;
    float _1057 = dot(vec3(_894, _895, _896), vec3(_973, _974, _975));
    float _1060 = _1057 * 2.0;
    float _1064 = (_1060 * _894) - _973;
    float _1065 = (_1060 * _895) - _974;
    float _1066 = (_1060 * _896) - _975;
    float _1070 = abs(dot(vec3(_973, _974, _975), vec3(_894, _895, _896)));
    float _4339 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1072 = sqrt(_897);
    float _1085 = exp2((_1072 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1072 * 3.0));
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1454;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1179 = fma(_1125, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117));
        float _1183 = fma(_1125, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117));
        float _1187 = fma(_1125, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117));
        float _1212 = _1117 + _894;
        float _1213 = _1121 + _895;
        float _1214 = _1125 + _896;
        float _1224 = fma(_1214, cbModelParam._m0[26u].z, fma(_1213, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1212)) - _1179;
        float _1225 = fma(_1214, cbModelParam._m0[27u].z, fma(_1213, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1212)) - _1183;
        float _1226 = fma(_1214, cbModelParam._m0[28u].z, fma(_1213, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1212)) - _1187;
        float _1230 = inversesqrt(dot(vec3(_1224, _1225, _1226), vec3(_1224, _1225, _1226)));
        float _1243 = ((_1230 * _1224) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1179 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1230 * _1225) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1183 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1230 * _1226) / cbModelParam._m0[34u].z) + ((((((_1187 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1243, _1244, _1245), 0.0);
        float _1282 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1248.x + (-0.5));
        float _1284 = _1282 * (_1248.y + (-0.5));
        float _1285 = _1282 * (_1248.z + (-0.5));
        float _1292 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1255.x + (-0.5));
        float _1294 = _1292 * (_1255.y + (-0.5));
        float _1295 = _1292 * (_1255.z + (-0.5));
        float _1302 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1262.x + (-0.5));
        float _1304 = _1302 * (_1262.y + (-0.5));
        float _1305 = _1302 * (_1262.z + (-0.5));
        float _1312 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1269.x + (-0.5));
        float _1314 = _1312 * (_1269.y + (-0.5));
        float _1315 = _1312 * (_1269.z + (-0.5));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = _1283 * 0.5;
        float _1320 = _1293 * 0.5;
        float _1321 = _1303 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1336 = (dot(vec3(_894, _895, _896), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1346 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4387 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1348 + 1.0))) + _1353) * _1316;
        float _1363 = _1284 * 0.5;
        float _1364 = _1294 * 0.5;
        float _1365 = _1304 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_894, _895, _896), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4420 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1390 + 1.0))) + _1395) * _1317;
        float _1405 = _1285 * 0.5;
        float _1406 = _1295 * 0.5;
        float _1407 = _1305 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_894, _895, _896), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4453 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1432 + 1.0))) + _1437) * _1318;
        _1454 = _1285;
        _1456 = _1284;
        _1457 = _1283;
        _1458 = _1295;
        _1459 = _1294;
        _1460 = _1293;
        _1461 = _1305;
        _1462 = _1304;
        _1463 = _1303;
        _1464 = _1318;
        _1465 = _1317;
        _1466 = _1316;
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
    }
    else
    {
        _1454 = _1455;
        _1456 = _1455;
        _1457 = _1455;
        _1458 = _1455;
        _1459 = _1455;
        _1460 = _1455;
        _1461 = _1455;
        _1462 = _1455;
        _1463 = _1455;
        _1464 = _1455;
        _1465 = _1455;
        _1466 = _1455;
        _1467 = 0.0;
        _1468 = 0.0;
        _1469 = 0.0;
    }
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1496 = fma(_1125, cbModelParam._m0[30u].z, fma(_1121, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1117));
        float _1500 = fma(_1125, cbModelParam._m0[31u].z, fma(_1121, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1117));
        float _1504 = fma(_1125, cbModelParam._m0[32u].z, fma(_1121, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1117));
        float _1527 = _1117 + _894;
        float _1528 = _1121 + _895;
        float _1529 = _1125 + _896;
        float _1539 = fma(_1529, cbModelParam._m0[30u].z, fma(_1528, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1527)) - _1496;
        float _1540 = fma(_1529, cbModelParam._m0[31u].z, fma(_1528, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1527)) - _1500;
        float _1541 = fma(_1529, cbModelParam._m0[32u].z, fma(_1528, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1527)) - _1504;
        float _1545 = inversesqrt(dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541)));
        float _1558 = ((_1545 * _1539) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1496 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1545 * _1540) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1500 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1545 * _1541) / cbModelParam._m0[35u].z) + ((((((_1504 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1569 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1558, _1559, _1560), 0.0);
        float _1595 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1562.x + (-0.5));
        float _1597 = _1595 * (_1562.y + (-0.5));
        float _1598 = _1595 * (_1562.z + (-0.5));
        float _1605 = exp2((_1569.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1569.x + (-0.5));
        float _1607 = _1605 * (_1569.y + (-0.5));
        float _1608 = _1605 * (_1569.z + (-0.5));
        float _1615 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1576.x + (-0.5));
        float _1617 = _1615 * (_1576.y + (-0.5));
        float _1618 = _1615 * (_1576.z + (-0.5));
        float _1625 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1583.x + (-0.5));
        float _1627 = _1625 * (_1583.y + (-0.5));
        float _1628 = _1625 * (_1583.z + (-0.5));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = _1596 * 0.5;
        float _1633 = _1606 * 0.5;
        float _1634 = _1616 * 0.5;
        float _1635 = dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634));
        float _1640 = (_1635 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1635);
        float _1648 = (dot(vec3(_894, _895, _896), vec3(_1640 * _1632, _1640 * _1633, _1640 * _1634)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1657 = sqrt(((_1633 * _1633) + (_1632 * _1632)) + (_1634 * _1634)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1659 = _1658 * 2.0;
        float _1663 = (1.0 - _1658) / (_1658 + 1.0);
        float _4516 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1673 = ((((1.0 - _1664) * (_1659 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1659 + 1.0))) + _1664) * _1629;
        float _1674 = _1597 * 0.5;
        float _1675 = _1607 * 0.5;
        float _1676 = _1617 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_894, _895, _896), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4549 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_1701 + 1.0))) + _1706) * _1630;
        float _1716 = _1598 * 0.5;
        float _1717 = _1608 * 0.5;
        float _1718 = _1618 * 0.5;
        float _1719 = dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718));
        float _1724 = (_1719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1719);
        float _1732 = (dot(vec3(_894, _895, _896), vec3(_1724 * _1716, _1724 * _1717, _1724 * _1718)) + 1.0) * 0.5;
        float _4560 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4571 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1743 = _1742 * 2.0;
        float _1747 = (1.0 - _1742) / (_1742 + 1.0);
        float _4582 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1757 = ((((1.0 - _1748) * (_1743 + 2.0)) * exp2(log2(isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_1743 + 1.0))) + _1748) * _1631;
        _1765 = _1598;
        _1766 = _1597;
        _1767 = _1596;
        _1768 = _1608;
        _1769 = _1607;
        _1770 = _1606;
        _1771 = _1618;
        _1772 = _1617;
        _1773 = _1616;
        _1774 = _1631;
        _1775 = _1630;
        _1776 = _1629;
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)));
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)));
    }
    else
    {
        _1765 = _1455;
        _1766 = _1455;
        _1767 = _1455;
        _1768 = _1455;
        _1769 = _1455;
        _1770 = _1455;
        _1771 = _1455;
        _1772 = _1455;
        _1773 = _1455;
        _1774 = _1455;
        _1775 = _1455;
        _1776 = _1455;
        _1777 = 0.0;
        _1778 = 0.0;
        _1779 = 0.0;
    }
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1467)) + _1467;
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1468)) + _1468;
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1469)) + _1469;
    float _1812 = fma(_1791, cbSceneParam._m0[89u].z, fma(_1790, cbSceneParam._m0[89u].y, _1789 * cbSceneParam._m0[89u].x));
    float _1815 = fma(_1791, cbSceneParam._m0[90u].z, fma(_1790, cbSceneParam._m0[90u].y, _1789 * cbSceneParam._m0[90u].x));
    float _1818 = fma(_1791, cbSceneParam._m0[91u].z, fma(_1790, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1789));
    float _1833 = _1064 * 0.5;
    float _1834 = _1065 * 0.5;
    float _1835 = _1066 * 0.5;
    float _1836 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1839 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1842 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1876;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1849 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1454, _1458, _1461, _1464));
        float _1853 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1857 = dot(vec4(_1833, _1834, _1835, 1.0), vec4(_1457, _1460, _1463, _1466));
        float _1864 = dot(vec4(cbModelParam._m0[39u]), vec4(_1833, _1834, _1835, 1.0));
        _1876 = dot(vec3(isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1864) ? 0.0 : (isnan(0.0) ? _1864 : max(0.0, _1864))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1876 = 1.0;
    }
    float _1887;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1878 = dot(vec4(cbModelParam._m0[40u]), vec4(_1833, _1834, _1835, 1.0));
        _1887 = dot(vec3(isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0)), isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1878) ? 0.0 : (isnan(0.0) ? _1878 : max(0.0, _1878))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1887 = 1.0;
    }
    float _1891 = (_1887 * cbModelParam._m0[1u].x) + (_1876 * (1.0 - cbModelParam._m0[1u].x));
    float _1901 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _897);
    float _1902 = isnan(_1901) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1901 : min(cbModelParam._m0[25u].z, _1901));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1950 = fma(_1125, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1117)) + cbModelParam._m0[13u].w;
        float _1954 = fma(_1125, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1117)) + cbModelParam._m0[14u].w;
        float _1958 = fma(_1125, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1117)) + cbModelParam._m0[15u].w;
        float _1961 = fma(_1066, cbModelParam._m0[13u].z, fma(_1065, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1064));
        float _1964 = fma(_1066, cbModelParam._m0[14u].z, fma(_1065, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1064));
        float _1967 = fma(_1066, cbModelParam._m0[15u].z, fma(_1065, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1064));
        float _1995;
        if (_1961 > 0.0)
        {
            _1995 = abs((1.0 - _1950) / _1961);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1950 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1995 = frontier_phi_17_15_ladder;
        }
        float _2165;
        if (_1964 > 0.0)
        {
            _2165 = abs((1.0 - _1954) / _1964);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1954 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2165 = frontier_phi_26_22_ladder;
        }
        float _2460;
        if (_1967 > 0.0)
        {
            _2460 = abs((1.0 - _1958) / _1967);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1958 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2460 = frontier_phi_38_33_ladder;
        }
        float _2462 = isnan(_2165) ? _1995 : (isnan(_1995) ? _2165 : min(_1995, _2165));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1961) + _1950;
        float _2468 = (_2463 * _1964) + _1954;
        float _2469 = (_2463 * _1967) + _1958;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2472 = (-1.0) - _2470;
        float _2474 = _2470 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2469 > _2474) || ((_2469 < _2472) || ((_2468 > _2474) || ((_2468 < _2472) || ((_2467 < _2472) || (_2467 > _2474))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2469, cbModelParam._m0[9u].z, fma(_2468, cbModelParam._m0[9u].y, _2467 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2469, cbModelParam._m0[10u].z, fma(_2468, cbModelParam._m0[10u].y, _2467 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2469, cbModelParam._m0[11u].z, fma(_2468, cbModelParam._m0[11u].y, _2467 * cbModelParam._m0[11u].x))), _1902);
            frontier_phi_16_38_ladder = _2614.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2614.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2614.x * cbModelParam._m0[1u].y;
        }
        _1983 = frontier_phi_16_38_ladder_2;
        _1985 = frontier_phi_16_38_ladder_1;
        _1987 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1064, _1065, _1066), _1902);
        _1983 = _1971.x * cbModelParam._m0[1u].y;
        _1985 = _1971.y * cbModelParam._m0[1u].y;
        _1987 = _1971.z * cbModelParam._m0[1u].y;
    }
    float _1991 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _897);
    float _1992 = isnan(_1991) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1991 : min(cbModelParam._m0[25u].w, _1991));
    float _2082;
    float _2084;
    float _2086;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2046 = fma(_1125, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1117)) + cbModelParam._m0[21u].w;
        float _2050 = fma(_1125, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1117)) + cbModelParam._m0[22u].w;
        float _2054 = fma(_1125, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1117)) + cbModelParam._m0[23u].w;
        float _2057 = fma(_1066, cbModelParam._m0[21u].z, fma(_1065, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1064));
        float _2060 = fma(_1066, cbModelParam._m0[22u].z, fma(_1065, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1064));
        float _2063 = fma(_1066, cbModelParam._m0[23u].z, fma(_1065, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1064));
        float _2170;
        if (_2057 > 0.0)
        {
            _2170 = abs((1.0 - _2046) / _2057);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2046 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2170 = frontier_phi_28_24_ladder;
        }
        float _2487;
        if (_2060 > 0.0)
        {
            _2487 = abs((1.0 - _2050) / _2060);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2060 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2050 + 1.0) / _2060);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2487 = frontier_phi_40_35_ladder;
        }
        float _2814;
        if (_2063 > 0.0)
        {
            _2814 = abs((1.0 - _2054) / _2063);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2063 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2054 + 1.0) / _2063);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2814 = frontier_phi_50_47_ladder;
        }
        float _2816 = isnan(_2487) ? _2170 : (isnan(_2170) ? _2487 : min(_2170, _2487));
        float _2817 = isnan(_2814) ? _2816 : (isnan(_2816) ? _2814 : min(_2816, _2814));
        float _2821 = (_2817 * _2057) + _2046;
        float _2822 = (_2817 * _2060) + _2050;
        float _2823 = (_2817 * _2063) + _2054;
        float _2824 = _2817 * 9.9999997473787516355514526367188e-05;
        float _2825 = (-1.0) - _2824;
        float _2827 = _2824 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2823 > _2827) || ((_2823 < _2825) || ((_2822 > _2827) || ((_2822 < _2825) || ((_2821 < _2825) || (_2821 > _2827))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2941 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2823, cbModelParam._m0[17u].z, fma(_2822, cbModelParam._m0[17u].y, _2821 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2823, cbModelParam._m0[18u].z, fma(_2822, cbModelParam._m0[18u].y, _2821 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2823, cbModelParam._m0[19u].z, fma(_2822, cbModelParam._m0[19u].y, _2821 * cbModelParam._m0[19u].x))), _1992);
            frontier_phi_25_50_ladder = _2941.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2941.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2941.x * cbModelParam._m0[1u].z;
        }
        _2082 = frontier_phi_25_50_ladder_2;
        _2084 = frontier_phi_25_50_ladder_1;
        _2086 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2066 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1064, _1065, _1066), _1992);
        _2082 = _2066.x * cbModelParam._m0[1u].z;
        _2084 = _2066.y * cbModelParam._m0[1u].z;
        _2086 = _2066.z * cbModelParam._m0[1u].z;
    }
    float _2098 = ((((1.0 - _1085) * ((_1072 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1085 * _1072)) * _1056;
    float _2099 = _2098 * ((cbModelParam._m0[1u].w * (_2082 - _1983)) + _1983);
    float _2100 = _2098 * ((cbModelParam._m0[1u].w * (_2084 - _1985)) + _1985);
    float _2101 = _2098 * ((cbModelParam._m0[1u].w * (_2086 - _1987)) + _1987);
    float _2104 = fma(_2101, cbSceneParam._m0[89u].z, fma(_2100, cbSceneParam._m0[89u].y, _2099 * cbSceneParam._m0[89u].x));
    float _2107 = fma(_2101, cbSceneParam._m0[90u].z, fma(_2100, cbSceneParam._m0[90u].y, _2099 * cbSceneParam._m0[90u].x));
    float _2110 = fma(_2101, cbSceneParam._m0[91u].z, fma(_2100, cbSceneParam._m0[91u].y, _2099 * cbSceneParam._m0[91u].x));
    float _2144 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2148 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2152 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2156 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2157 = _2144 / _2156;
    float _2158 = _2148 / _2156;
    float _2159 = _2152 / _2156;
    float _2306;
    float _2307;
    float _2308;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2186 = ((uint(_2159 > cbSceneParam._m0[59u].y) + uint(_2159 > cbSceneParam._m0[59u].x)) + uint(_2159 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2187 = _2186 + 43u;
        uint _2195 = _2186 + 44u;
        uint _2203 = _2186 + 45u;
        uint _2211 = _2186 + 46u;
        float _2222 = fma(_2156, cbSceneParam._m0[_2187].w, fma(_2152, cbSceneParam._m0[_2187].z, fma(_2148, cbSceneParam._m0[_2187].y, _2144 * cbSceneParam._m0[_2187].x)));
        float _2226 = fma(_2156, cbSceneParam._m0[_2195].w, fma(_2152, cbSceneParam._m0[_2195].z, fma(_2148, cbSceneParam._m0[_2195].y, _2144 * cbSceneParam._m0[_2195].x)));
        float _2234 = fma(_2156, cbSceneParam._m0[_2211].w, fma(_2152, cbSceneParam._m0[_2211].z, fma(_2148, cbSceneParam._m0[_2211].y, _2144 * cbSceneParam._m0[_2211].x)));
        float _2239 = cbSceneParam._m0[33u].z * _2234;
        float _2241 = cbSceneParam._m0[33u].w * _2234;
        float _2244 = fma(_2156, cbSceneParam._m0[_2203].w, fma(_2152, cbSceneParam._m0[_2203].z, fma(_2148, cbSceneParam._m0[_2203].y, _2144 * cbSceneParam._m0[_2203].x))) / _2234;
        float _2292 = (cbSceneParam._m0[33u].x - sqrt(((_2158 * _2158) + (_2157 * _2157)) + (_2159 * _2159))) * cbSceneParam._m0[33u].y;
        float _4708 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2299 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2239 + _2222) / _2234, (_2241 + _2226) / _2234), _2244), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2241 + _2222) / _2234, (_2226 - _2239) / _2234), _2244), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2222 - _2239) / _2234, (_2226 - _2241) / _2234), _2244), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2222 - _2241) / _2234, (_2239 + _2226) / _2234), _2244), 0.0)).x), vec4(0.25)));
        _2306 = 1.0 - (_2299 * cbSceneParam._m0[34u].x);
        _2307 = 1.0 - (_2299 * cbSceneParam._m0[34u].y);
        _2308 = 1.0 - (_2299 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2306 = 1.0;
        _2307 = 1.0;
        _2308 = 1.0;
    }
    float _2372;
    float _2374;
    float _2376;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2360 = fma(_2156, cbSceneParam._m0[63u].w, fma(_2152, cbSceneParam._m0[63u].z, fma(_2148, cbSceneParam._m0[63u].y, _2144 * cbSceneParam._m0[63u].x)));
        float _2361 = fma(_2156, cbSceneParam._m0[60u].w, fma(_2152, cbSceneParam._m0[60u].z, fma(_2148, cbSceneParam._m0[60u].y, _2144 * cbSceneParam._m0[60u].x))) / _2360;
        float _2362 = fma(_2156, cbSceneParam._m0[61u].w, fma(_2152, cbSceneParam._m0[61u].z, fma(_2148, cbSceneParam._m0[61u].y, _2144 * cbSceneParam._m0[61u].x))) / _2360;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2361 >= cbSceneParam._m0[64u].x) && (_2362 >= cbSceneParam._m0[64u].y)) && (_2361 <= cbSceneParam._m0[64u].z)) && (_2362 <= cbSceneParam._m0[64u].w))
        {
            float _2500 = fma(_2156, cbSceneParam._m0[62u].w, fma(_2152, cbSceneParam._m0[62u].z, fma(_2148, cbSceneParam._m0[62u].y, _2144 * cbSceneParam._m0[62u].x))) / _2360;
            float _2504 = isnan(cbSceneParam._m0[41u].w) ? _2500 : (isnan(_2500) ? cbSceneParam._m0[41u].w : max(_2500, cbSceneParam._m0[41u].w));
            float _2547 = (cbSceneParam._m0[33u].x - sqrt(((_2158 * _2158) + (_2157 * _2157)) + (_2159 * _2159))) * cbSceneParam._m0[33u].y;
            float _4724 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
            float _2554 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2361, cbSceneParam._m0[33u].w + _2362), _2504), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2361, _2362 - cbSceneParam._m0[33u].z), _2504), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2361 - cbSceneParam._m0[33u].z, _2362 - cbSceneParam._m0[33u].w), _2504), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2361 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2362), _2504), 0.0)).x), vec4(0.25)));
            float _2558 = 1.0 - (_2554 * cbSceneParam._m0[34u].x);
            float _2559 = 1.0 - (_2554 * cbSceneParam._m0[34u].y);
            float _2560 = 1.0 - (_2554 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2560) ? _2308 : (isnan(_2308) ? _2560 : min(_2308, _2560));
            frontier_phi_37_36_ladder_1 = isnan(_2559) ? _2307 : (isnan(_2307) ? _2559 : min(_2307, _2559));
            frontier_phi_37_36_ladder_2 = isnan(_2558) ? _2306 : (isnan(_2306) ? _2558 : min(_2306, _2558));
        }
        else
        {
            frontier_phi_37_36_ladder = _2308;
            frontier_phi_37_36_ladder_1 = _2307;
            frontier_phi_37_36_ladder_2 = _2306;
        }
        _2372 = frontier_phi_37_36_ladder_2;
        _2374 = frontier_phi_37_36_ladder_1;
        _2376 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2372 = _2306;
        _2374 = _2307;
        _2376 = _2308;
    }
    uvec4 _2381 = floatBitsToUint(cbInstanceData._m0[_287 + 5u]);
    uint _2383 = _2381.x * 14u;
    uint _2384 = _2383 + 13u;
    float _2391 = _1056 + (-1.0);
    float _2396 = (cbLight._m0[_2384].x * _2391) + 1.0;
    float _2397 = (cbLight._m0[_2384].y * _2391) + 1.0;
    float _2398 = (cbLight._m0[_2384].z * _2391) + 1.0;
    float _2399 = (cbLight._m0[_2384].w * _2391) + 1.0;
    uint _2400 = _2383 + 5u;
    float _2406 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
    uint _2410 = _2383 + 4u;
    float _2419 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
    uint _2423 = _2383 | 1u;
    float _2434 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_894, _895, _896));
    float _2437 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_894, _895, _896));
    float _4760 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _4771 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2442 = (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0))) * 0.3183098733425140380859375;
    float _2444 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * 0.3183098733425140380859375;
    float _2451 = ((cbLight._m0[_2400].x * _2406) * _2444) + (((cbLight._m0[_2410].x * _2372) * _2419) * _2442);
    float _2452 = ((_2406 * cbLight._m0[_2400].y) * _2444) + (((cbLight._m0[_2410].y * _2374) * _2419) * _2442);
    float _2453 = ((_2406 * cbLight._m0[_2400].z) * _2444) + (((cbLight._m0[_2410].z * _2376) * _2419) * _2442);
    uvec4 _2457 = floatBitsToUint(cbLight._m0[_2383 + 12u]);
    bool _2459 = _2457.x == 0u;
    float _2561;
    float _2563;
    float _2565;
    if (_2459)
    {
        _2561 = _2451;
        _2563 = _2452;
        _2565 = _2453;
    }
    else
    {
        uint _2569 = _2383 + 6u;
        float _2585 = (dot(vec3(cbLight._m0[_2383 + 2u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2586 = _2585 * _2585;
        float _4782 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2587 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
        float _2588 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2561 = (((cbLight._m0[_2569].x * 0.3183098733425140380859375) * _2587) * _2588) + _2451;
        _2563 = (((cbLight._m0[_2569].y * 0.3183098733425140380859375) * _2587) * _2588) + _2452;
        _2565 = (((cbLight._m0[_2569].z * 0.3183098733425140380859375) * _2587) * _2588) + _2453;
    }
    bool _2568 = _2457.y == 0u;
    float _2623;
    float _2625;
    float _2627;
    if (_2568)
    {
        _2623 = _2561;
        _2625 = _2563;
        _2627 = _2565;
    }
    else
    {
        uint _2785 = _2383 + 7u;
        float _2801 = (dot(vec3(cbLight._m0[_2383 + 3u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2802 = _2801 * _2801;
        float _4798 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2803 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2804 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2623 = (((cbLight._m0[_2785].x * 0.3183098733425140380859375) * _2803) * _2804) + _2561;
        _2625 = (((cbLight._m0[_2785].y * 0.3183098733425140380859375) * _2803) * _2804) + _2563;
        _2627 = (((cbLight._m0[_2785].z * 0.3183098733425140380859375) * _2803) * _2804) + _2565;
    }
    uint _2630 = _2383 + 8u;
    float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2383].w)) * _897) * 0.949999988079071044921875);
    float _2644 = _2643 * _2643;
    float _2645 = cbLight._m0[_2383].x + _973;
    float _2646 = cbLight._m0[_2383].y + _974;
    float _2647 = cbLight._m0[_2383].z + _975;
    float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
    float _2652 = _2651 * _2645;
    float _2653 = _2651 * _2646;
    float _2654 = _2651 * _2647;
    float _2655 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2383].xyz));
    float _4814 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2658 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
    float _4825 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _2659 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
    float _2660 = dot(vec3(_894, _895, _896), vec3(_2652, _2653, _2654));
    float _4836 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2663 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _2664 = dot(vec3(cbLight._m0[_2383].xyz), vec3(_2652, _2653, _2654));
    float _4847 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2668 = _2644 * _2644;
    float _2672 = ((_2663 * _2663) * (_2668 + (-1.0))) + 1.0;
    float _2683 = (exp2(log2(1.0 - (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2684 = 1.0 - _2644;
    float _2695 = (0.5 / (((_2659 * ((_2658 * _2684) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2659 * _2684) + _2644) * _2658))) * _2658;
    float _4858 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2697 = (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2668 / ((_2672 * _2672) * 3.141590118408203125));
    uint _2711 = _2383 + 9u;
    float _2722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _897) * 0.949999988079071044921875);
    float _2723 = _2722 * _2722;
    float _2724 = cbLight._m0[_2423].x + _973;
    float _2725 = cbLight._m0[_2423].y + _974;
    float _2726 = cbLight._m0[_2423].z + _975;
    float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
    float _2731 = _2730 * _2724;
    float _2732 = _2730 * _2725;
    float _2733 = _2730 * _2726;
    float _2734 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2423].xyz));
    float _4869 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
    float _2737 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
    float _2738 = dot(vec3(_894, _895, _896), vec3(_2731, _2732, _2733));
    float _4880 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2741 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
    float _2742 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2731, _2732, _2733));
    float _4891 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2746 = _2723 * _2723;
    float _2750 = ((_2741 * _2741) * (_2746 + (-1.0))) + 1.0;
    float _2759 = (exp2(log2(1.0 - (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2760 = 1.0 - _2723;
    float _2770 = (0.5 / (((_2659 * ((_2737 * _2760) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2659 * _2760) + _2723) * _2737))) * _2737;
    float _4902 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2772 = (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2746 / ((_2750 * _2750) * 3.141590118408203125));
    float _2782 = (((_2759 * cbLight._m0[_2711].x) * _2772) * _2406) + ((((cbLight._m0[_2630].x * _2372) * _2683) * _2697) * _2419);
    float _2783 = (((_2759 * cbLight._m0[_2711].y) * _2772) * _2406) + ((((cbLight._m0[_2630].y * _2374) * _2683) * _2697) * _2419);
    float _2784 = (((_2759 * cbLight._m0[_2711].z) * _2772) * _2406) + ((((cbLight._m0[_2630].z * _2376) * _2683) * _2697) * _2419);
    float _2840;
    float _2842;
    float _2844;
    if (_2459)
    {
        _2840 = _2782;
        _2842 = _2783;
        _2844 = _2784;
    }
    else
    {
        uint _2846 = _2383 + 2u;
        uint _2850 = _2383 + 10u;
        float _2864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2846].w)) * _897) * 0.949999988079071044921875);
        float _2865 = _2864 * _2864;
        float _2866 = cbLight._m0[_2846].x + _973;
        float _2867 = cbLight._m0[_2846].y + _974;
        float _2868 = cbLight._m0[_2846].z + _975;
        float _2872 = inversesqrt(dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868)));
        float _2873 = _2872 * _2866;
        float _2874 = _2872 * _2867;
        float _2875 = _2872 * _2868;
        float _2876 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2846].xyz));
        float _4913 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2879 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
        float _2880 = dot(vec3(_894, _895, _896), vec3(_2873, _2874, _2875));
        float _4924 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2883 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
        float _2884 = dot(vec3(cbLight._m0[_2846].xyz), vec3(_2873, _2874, _2875));
        float _4935 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2888 = _2865 * _2865;
        float _2892 = ((_2883 * _2883) * (_2888 + (-1.0))) + 1.0;
        float _2901 = (exp2(log2(1.0 - (isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2902 = 1.0 - _2865;
        float _2912 = (0.5 / (((_2659 * ((_2879 * _2902) + _2865)) + 9.9999999392252902907785028219223e-09) + (((_2659 * _2902) + _2865) * _2879))) * _2879;
        float _4946 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2914 = (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2888 / ((_2892 * _2892) * 3.141590118408203125));
        float _2915 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2840 = (((_2901 * cbLight._m0[_2850].x) * _2914) * _2915) + _2782;
        _2842 = (((_2901 * cbLight._m0[_2850].y) * _2914) * _2915) + _2783;
        _2844 = (((_2901 * cbLight._m0[_2850].z) * _2914) * _2915) + _2784;
    }
    float _2946;
    float _2948;
    float _2950;
    if (_2568)
    {
        _2946 = _2840;
        _2948 = _2842;
        _2950 = _2844;
    }
    else
    {
        uint _2957 = _2383 + 3u;
        uint _2961 = _2383 + 11u;
        float _2975 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2957].w)) * _897) * 0.949999988079071044921875);
        float _2976 = _2975 * _2975;
        float _2977 = cbLight._m0[_2957].x + _973;
        float _2978 = cbLight._m0[_2957].y + _974;
        float _2979 = cbLight._m0[_2957].z + _975;
        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
        float _2984 = _2983 * _2977;
        float _2985 = _2983 * _2978;
        float _2986 = _2983 * _2979;
        float _2987 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2957].xyz));
        float _4962 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2990 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
        float _2991 = dot(vec3(_894, _895, _896), vec3(_2984, _2985, _2986));
        float _4973 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        float _2994 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
        float _2995 = dot(vec3(cbLight._m0[_2957].xyz), vec3(_2984, _2985, _2986));
        float _4984 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        float _2999 = _2976 * _2976;
        float _3003 = ((_2994 * _2994) * (_2999 + (-1.0))) + 1.0;
        float _3012 = (exp2(log2(1.0 - (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _3013 = 1.0 - _2976;
        float _3023 = (0.5 / (((_2659 * ((_2990 * _3013) + _2976)) + 9.9999999392252902907785028219223e-09) + (((_2659 * _3013) + _2976) * _2990))) * _2990;
        float _4995 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        float _3025 = (isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0))) * (_2999 / ((_3003 * _3003) * 3.141590118408203125));
        float _3026 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
        _2946 = (((_3012 * cbLight._m0[_2961].x) * _3025) * _3026) + _2840;
        _2948 = (((_3012 * cbLight._m0[_2961].y) * _3025) * _3026) + _2842;
        _2950 = (((_3012 * cbLight._m0[_2961].z) * _3025) * _3026) + _2844;
    }
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    float _3102;
    if (_2381.y == 0u)
    {
        uvec4 _3047 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3048 = _3047.x;
        uint _3059 = uint((float(_3047.y) * floor(float(uint(cbSceneParam._m0[85u].y * _994) / _3048))) + floor(float(uint(cbSceneParam._m0[85u].x * _993) / _3048)));
        float _3069 = (log2(_2159 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3070 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        uint _3073 = uint(isnan(14.0) ? _3070 : (isnan(_3070) ? 14.0 : min(_3070, 14.0)));
        uvec4 _3078 = texelFetch(g_lightClusterGridBuffer, int(((_3073 << 2u) + (_3059 << 6u)) >> 2u));
        uint _3079 = _3078.x;
        uint _3080 = _3047.z;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        if (((((1u << ((_3080 >> 4u) & 15u)) + 4294967295u) & _3079) == 0u) || ((_3080 & 240u) == 0u))
        {
            _3159 = 0.0;
            _3161 = 0.0;
            _3163 = 0.0;
            _3165 = 0.0;
            _3167 = 0.0;
            _3169 = 0.0;
        }
        else
        {
            float _3160;
            float _3162;
            float _3164;
            float _3166;
            float _3168;
            float _3170;
            float _3312 = 0.0;
            float _3313 = 0.0;
            float _3314 = 0.0;
            float _3315 = 0.0;
            float _3316 = 0.0;
            float _3317 = 0.0;
            uint _3318 = 0u;
            uint _3327;
            bool _3328;
            for (;;)
            {
                _3327 = texelFetch(g_lightClassification, int((((_3073 << 5u) + (_3059 << 9u)) + (_3318 << 2u)) >> 2u)).x;
                _3328 = _3327 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3328)
                {
                    frontier_phi_71_pred = _3317;
                    frontier_phi_71_pred_1 = _3316;
                    frontier_phi_71_pred_2 = _3315;
                    frontier_phi_71_pred_3 = _3314;
                    frontier_phi_71_pred_4 = _3313;
                    frontier_phi_71_pred_5 = _3312;
                }
                else
                {
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    uint _3463;
                    _3457 = _3312;
                    _3458 = _3313;
                    _3459 = _3314;
                    _3460 = _3315;
                    _3461 = _3316;
                    _3462 = _3317;
                    _3463 = _3327;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    for (;;)
                    {
                        uint _3467 = uint(findLSB(_3463)) + (_3318 << 5u);
                        uint _3464 = (_3463 + 4294967295u) & _3463;
                        uint _3469 = _3467 * 48u;
                        vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 3u)).x));
                        uint _3489 = (_3467 * 48u) + 4u;
                        vec4 _3502 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3489)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 3u)).x));
                        uint _3508 = (_3467 * 48u) + 8u;
                        vec3 _3519 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3508)).x, texelFetch(g_PointLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3508 + 2u)).x));
                        float _3523 = _3483.x - _2157;
                        float _3524 = _3483.y - _2158;
                        float _3525 = _3483.z - _2159;
                        float _3526 = dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525));
                        float _3529 = inversesqrt(_3526);
                        float _3530 = _3529 * _3523;
                        float _3531 = _3529 * _3524;
                        float _3532 = _3529 * _3525;
                        float _3533 = dot(vec3(_1012, _1015, _1018), vec3(_3530, _3531, _3532));
                        float _3538 = 1.0 - (_3526 * _3483.w);
                        float _5021 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3539 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                        float _3540 = sqrt(_3526) * _3502.w;
                        float _3543 = 1.39999997615814208984375 / (_3540 + 1.39999997615814208984375);
                        float _3544 = _3543 * _3543;
                        float _3547 = ((1.0 - _3544) * _3533) + _3544;
                        float _3550 = _3540 * _3540;
                        float _3554 = ((isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0))) * _3539) / ((_3550 * 0.699999988079071044921875) + 1.0);
                        float _3558 = (-0.0) - _2157;
                        float _3559 = (-0.0) - _2158;
                        float _3560 = (-0.0) - _2159;
                        float _3564 = inversesqrt(dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560)));
                        float _3565 = _3564 * _3558;
                        float _3566 = _3564 * _3559;
                        float _3567 = _3564 * _3560;
                        float _3574 = exp2(log2(1.0 / ((_3550 * 3.5) + 5.0)) * 0.25);
                        float _3575 = 1.0 - _1072;
                        float _3582 = sqrt(1.0 - ((1.0 - (_3575 * _3575)) * (1.0 - (_3574 * _3574))));
                        float _3583 = _3582 * _3582;
                        float _3584 = _3583 * _3583;
                        float _3585 = _3565 + _3530;
                        float _3586 = _3566 + _3531;
                        float _3587 = _3567 + _3532;
                        float _3591 = inversesqrt(dot(vec3(_3585, _3586, _3587), vec3(_3585, _3586, _3587)));
                        float _3595 = dot(vec3(_1012, _1015, _1018), vec3(_3565, _3566, _3567));
                        float _5037 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3598 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
                        float _3599 = dot(vec3(_1012, _1015, _1018), vec3(_3591 * _3585, _3591 * _3586, _3591 * _3587));
                        float _5048 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                        float _3602 = isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0));
                        float _3606 = ((_3602 * _3602) * (_3584 + (-1.0))) + 1.0;
                        float _3607 = _3543 * _3583;
                        float _3608 = _3607 * _3607;
                        float _3611 = ((1.0 - _3608) * _3533) + _3608;
                        float _5059 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                        float _3612 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                        float _3613 = 1.0 - _3583;
                        float _3623 = (0.5 / (((_3612 * ((_3598 * _3613) + _3583)) + 9.9999999392252902907785028219223e-09) + (((_3612 * _3613) + _3583) * _3598))) * _3612;
                        float _5070 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                        float _3634 = (((_3584 * 3.1415927410125732421875) * (isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0)))) / ((_3606 * _3606) * ((_3550 * 2.1991131305694580078125) + 3.141590118408203125))) * _3539;
                        _3387 = (_3554 * _3502.x) + _3460;
                        _3388 = (_3554 * _3502.y) + _3461;
                        _3389 = (_3554 * _3502.z) + _3462;
                        _3384 = (_3634 * _3519.x) + _3457;
                        _3385 = (_3634 * _3519.y) + _3458;
                        _3386 = (_3634 * _3519.z) + _3459;
                        if (_3464 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3457 = _3384;
                            _3458 = _3385;
                            _3459 = _3386;
                            _3460 = _3387;
                            _3461 = _3388;
                            _3462 = _3389;
                            _3463 = _3464;
                        }
                    }
                    frontier_phi_71_pred = _3389;
                    frontier_phi_71_pred_1 = _3388;
                    frontier_phi_71_pred_2 = _3387;
                    frontier_phi_71_pred_3 = _3386;
                    frontier_phi_71_pred_4 = _3385;
                    frontier_phi_71_pred_5 = _3384;
                }
                _3170 = frontier_phi_71_pred;
                _3168 = frontier_phi_71_pred_1;
                _3166 = frontier_phi_71_pred_2;
                _3164 = frontier_phi_71_pred_3;
                _3162 = frontier_phi_71_pred_4;
                _3160 = frontier_phi_71_pred_5;
                uint _3319 = _3318 + 1u;
                if (_3319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3312 = _3160;
                    _3313 = _3162;
                    _3314 = _3164;
                    _3315 = _3166;
                    _3316 = _3168;
                    _3317 = _3170;
                    _3318 = _3319;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3159 = _3160;
            _3161 = _3162;
            _3163 = _3164;
            _3165 = _3166;
            _3167 = _3168;
            _3169 = _3170;
        }
        uvec4 _3173 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3174 = _3173.z;
        uint _3176 = (_3174 >> 8u) & 15u;
        float _3280;
        float _3282;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        if (((4294967295u << _3176) & _3079) == 0u)
        {
            _3280 = _3159;
            _3282 = _3161;
            _3284 = _3163;
            _3286 = _3165;
            _3288 = _3167;
            _3290 = _3169;
        }
        else
        {
            float _3305 = inversesqrt(dot(vec3(_2157, _2158, _2159), vec3(_2157, _2158, _2159)));
            float _3306 = _3305 * _2157;
            float _3307 = _3305 * _2158;
            float _3308 = _3305 * _2159;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3176 < ((_3174 >> 12u) & 15u))
            {
                float _3281;
                float _3283;
                float _3285;
                float _3287;
                float _3289;
                float _3291;
                float _3440 = _3159;
                float _3441 = _3161;
                float _3442 = _3163;
                float _3443 = _3165;
                float _3444 = _3167;
                float _3445 = _3169;
                uint _3446 = _3176;
                uint _3455;
                bool _3456;
                for (;;)
                {
                    _3455 = texelFetch(g_lightClassification, int((((_3073 << 5u) + (_3059 << 9u)) + (_3446 << 2u)) >> 2u)).x;
                    _3456 = _3455 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3456)
                    {
                        frontier_phi_82_pred = _3445;
                        frontier_phi_82_pred_1 = _3444;
                        frontier_phi_82_pred_2 = _3443;
                        frontier_phi_82_pred_3 = _3442;
                        frontier_phi_82_pred_4 = _3441;
                        frontier_phi_82_pred_5 = _3440;
                    }
                    else
                    {
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3941;
                        float _3942;
                        float _3943;
                        float _3944;
                        float _3945;
                        float _3946;
                        float _3661 = _3440;
                        float _3662 = _3441;
                        float _3663 = _3442;
                        float _3664 = _3443;
                        float _3665 = _3444;
                        float _3666 = _3445;
                        uint _3667 = _3455;
                        uint _3668;
                        vec4 _3693;
                        float _3694;
                        vec4 _3709;
                        vec3 _3721;
                        vec4 _3736;
                        vec4 _3751;
                        float _3797;
                        bool _3798;
                        for (;;)
                        {
                            uint _3678 = ((_3446 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3667));
                            _3668 = (_3667 + 4294967295u) & _3667;
                            uint _3680 = _3678 * 40u;
                            _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            _3694 = _3693.w;
                            uint _3696 = (_3678 * 40u) + 4u;
                            _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            uint _3711 = (_3678 * 40u) + 8u;
                            _3721 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x));
                            uint _3723 = (_3678 * 40u) + 16u;
                            _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            uint _3738 = (_3678 * 40u) + 20u;
                            _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            uint _3753 = (_3678 * 40u) + 24u;
                            vec4 _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            uint _3772 = (_3678 * 40u) + 28u;
                            vec4 _3785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3772 + 3u)).x));
                            _3797 = fma(_2159, _3785.z, fma(_2158, _3785.y, _3785.x * _2157)) + _3785.w;
                            _3798 = !((fma(_2159, _3766.z, fma(_2158, _3766.y, _3766.x * _2157)) + _3766.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3798)
                            {
                                float _3825 = _3693.x - _2157;
                                float _3826 = _3693.y - _2158;
                                float _3827 = _3693.z - _2159;
                                float _3828 = dot(vec3(_3825, _3826, _3827), vec3(_3825, _3826, _3827));
                                float _3831 = inversesqrt(_3828);
                                float _3832 = _3831 * _3825;
                                float _3833 = _3831 * _3826;
                                float _3834 = _3831 * _3827;
                                float _3838 = 1.0 - (_3828 / (_3694 * _3694));
                                float _5081 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3839 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                                float _3843 = sqrt(_3828) * _3709.w;
                                float _3845 = 1.39999997615814208984375 / (_3843 + 1.39999997615814208984375);
                                float _3846 = _3845 * _3845;
                                float _3849 = ((1.0 - _3846) * dot(vec3(_3832, _3833, _3834), vec3(_1012, _1015, _1018))) + _3846;
                                float _3852 = _3843 * _3843;
                                float _3856 = (fma(_2159, _3736.z, fma(_2158, _3736.y, _3736.x * _2157)) + _3736.w) / _3797;
                                float _3857 = (fma(_2159, _3751.z, fma(_2158, _3751.y, _3751.x * _2157)) + _3751.w) / _3797;
                                float _3861 = 1.0 - dot(vec2(_3856, _3857), vec2(_3856, _3857));
                                float _5097 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0));
                                float _3863 = _3862 * (((isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0))) * _3839) / ((_3852 * 0.699999988079071044921875) + 1.0));
                                float _3875 = exp2(log2(1.0 / ((_3852 * 3.5) + 5.0)) * 0.25);
                                float _3876 = 1.0 - _1072;
                                float _3883 = sqrt(1.0 - ((1.0 - (_3876 * _3876)) * (1.0 - (_3875 * _3875))));
                                float _3884 = _3883 * _3883;
                                float _3885 = _3884 * _3884;
                                float _3886 = _3832 - _3306;
                                float _3887 = _3833 - _3307;
                                float _3888 = _3834 - _3308;
                                float _3892 = inversesqrt(dot(vec3(_3886, _3887, _3888), vec3(_3886, _3887, _3888)));
                                float _3896 = dot(vec3(_1012, _1015, _1018), vec3((-0.0) - _3306, (-0.0) - _3307, (-0.0) - _3308));
                                float _5108 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3899 = isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0));
                                float _3900 = dot(vec3(_1012, _1015, _1018), vec3(_3892 * _3886, _3892 * _3887, _3892 * _3888));
                                float _5119 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3903 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3907 = ((_3903 * _3903) * (_3885 + (-1.0))) + 1.0;
                                float _3908 = _3845 * _3884;
                                float _3909 = _3908 * _3908;
                                float _3915 = ((1.0 - _3909) * dot(vec3(_1012, _1015, _1018), vec3(_3832, _3833, _3834))) + _3909;
                                float _5130 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3916 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                                float _3917 = 1.0 - _3884;
                                float _3927 = (0.5 / (((_3916 * ((_3899 * _3917) + _3884)) + 9.9999999392252902907785028219223e-09) + (((_3916 * _3917) + _3884) * _3899))) * _3916;
                                float _5141 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3937 = (_3862 * _3839) * (((_3885 * 3.1415927410125732421875) * (isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0)))) / ((_3907 * _3907) * ((_3852 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3863 * _3709.z;
                                frontier_phi_88_pred_1 = _3863 * _3709.y;
                                frontier_phi_88_pred_2 = _3863 * _3709.x;
                                frontier_phi_88_pred_3 = _3937 * _3721.z;
                                frontier_phi_88_pred_4 = _3937 * _3721.y;
                                frontier_phi_88_pred_5 = _3937 * _3721.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3946 = frontier_phi_88_pred;
                            _3945 = frontier_phi_88_pred_1;
                            _3944 = frontier_phi_88_pred_2;
                            _3943 = frontier_phi_88_pred_3;
                            _3942 = frontier_phi_88_pred_4;
                            _3941 = frontier_phi_88_pred_5;
                            _3651 = _3944 + _3664;
                            _3652 = _3945 + _3665;
                            _3653 = _3946 + _3666;
                            _3648 = _3941 + _3661;
                            _3649 = _3942 + _3662;
                            _3650 = _3943 + _3663;
                            if (_3668 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3661 = _3648;
                                _3662 = _3649;
                                _3663 = _3650;
                                _3664 = _3651;
                                _3665 = _3652;
                                _3666 = _3653;
                                _3667 = _3668;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3653;
                        frontier_phi_82_pred_1 = _3652;
                        frontier_phi_82_pred_2 = _3651;
                        frontier_phi_82_pred_3 = _3650;
                        frontier_phi_82_pred_4 = _3649;
                        frontier_phi_82_pred_5 = _3648;
                    }
                    _3291 = frontier_phi_82_pred;
                    _3289 = frontier_phi_82_pred_1;
                    _3287 = frontier_phi_82_pred_2;
                    _3285 = frontier_phi_82_pred_3;
                    _3283 = frontier_phi_82_pred_4;
                    _3281 = frontier_phi_82_pred_5;
                    uint _3447 = _3446 + 1u;
                    if (_3447 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3440 = _3281;
                        _3441 = _3283;
                        _3442 = _3285;
                        _3443 = _3287;
                        _3444 = _3289;
                        _3445 = _3291;
                        _3446 = _3447;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3287;
                frontier_phi_63_64_ladder_1 = _3291;
                frontier_phi_63_64_ladder_2 = _3289;
                frontier_phi_63_64_ladder_3 = _3285;
                frontier_phi_63_64_ladder_4 = _3283;
                frontier_phi_63_64_ladder_5 = _3281;
            }
            else
            {
                frontier_phi_63_64_ladder = _3165;
                frontier_phi_63_64_ladder_1 = _3169;
                frontier_phi_63_64_ladder_2 = _3167;
                frontier_phi_63_64_ladder_3 = _3163;
                frontier_phi_63_64_ladder_4 = _3161;
                frontier_phi_63_64_ladder_5 = _3159;
            }
            _3280 = frontier_phi_63_64_ladder_5;
            _3282 = frontier_phi_63_64_ladder_4;
            _3284 = frontier_phi_63_64_ladder_3;
            _3286 = frontier_phi_63_64_ladder;
            _3288 = frontier_phi_63_64_ladder_2;
            _3290 = frontier_phi_63_64_ladder_1;
        }
        float _3295 = isnan(1.0) ? _1056 : (isnan(_1056) ? 1.0 : min(_1056, 1.0));
        _3092 = (_3295 * _3286) + _2623;
        _3094 = (_3295 * _3288) + _2625;
        _3096 = (_3295 * _3290) + _2627;
        _3098 = ((_3280 * 0.039999999105930328369140625) * _3295) + _2946;
        _3100 = ((_3282 * 0.039999999105930328369140625) * _3295) + _2948;
        _3102 = ((_3284 * 0.039999999105930328369140625) * _3295) + _2950;
    }
    else
    {
        _3092 = _2623;
        _3094 = _2625;
        _3096 = _2627;
        _3098 = _2946;
        _3100 = _2948;
        _3102 = _2950;
    }
    float _5157 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _5168 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _5179 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _3119 = ((isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0))) * (_3092 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1056))) + ((_3098 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1891)) * cbPerFrame._m0[3u].x);
    float _3120 = ((isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0))) * (_3094 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1056))) + ((_3100 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1891)) * cbPerFrame._m0[3u].x);
    float _3121 = ((isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0))) * (_3096 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1056))) + ((_3102 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1891)) * cbPerFrame._m0[3u].x);
    uint _3122 = _287 + 6u;
    float _3130 = _993 / cbSceneParam._m0[86u].x;
    float _3131 = _994 / cbSceneParam._m0[86u].y;
    vec4 _3145 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3130, _3131, (log2((isnan(cbSceneParam._m0[77u].w) ? _915 : (isnan(_915) ? cbSceneParam._m0[77u].w : min(_915, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3147 = _3145.x;
    float _3148 = _3145.y;
    float _3149 = _3145.z;
    float _3150 = _3145.w;
    float _3222;
    float _3224;
    float _3226;
    float _3228;
    if (_915 > cbSceneParam._m0[78u].w)
    {
        float _3184 = isnan(_915) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _915 : min(cbSceneParam._m0[80u].w, _915));
        float _3185 = _3184 / _915;
        float _3196 = _3185 * _966;
        float _3197 = _967 * _3185;
        float _3198 = (-0.0) - _3197;
        float _3200 = _3185 * _968;
        float _3202 = (cbSceneParam._m0[77u].w * _3198) / _3184;
        float _3203 = _3202 + cbSceneParam._m0[79u].w;
        float _3204 = cbSceneParam._m0[79u].w - _3197;
        float _3210 = sqrt(((_3196 * _3196) + (_3197 * _3197)) + (_3200 * _3200));
        float _3213 = (1.0 - (cbSceneParam._m0[77u].w / _3184)) * _3210;
        float _3218 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3220 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3397;
        if (abs((_3198 - _3202) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3397 = ((((_3203 > 0.0) ? exp2(_3218 * _3203) : (2.0 - exp2(_3220 * _3203))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3213;
        }
        else
        {
            float _3341 = 1.0 / cbSceneParam._m0[80u].x;
            float _3342 = isnan(_3204) ? _3203 : (isnan(_3203) ? _3204 : max(_3203, _3204));
            float _3343 = isnan(_3204) ? _3203 : (isnan(_3203) ? _3204 : min(_3203, _3204));
            float _3352 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : min(_3342, 0.0));
            float _3353 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : min(_3343, 0.0));
            _3397 = ((abs(_3210 / _3198) * cbSceneParam._m0[80u].y) * ((((_3352 - _3353) * 2.0) - ((exp2(_3218 * (isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0)))) - exp2(_3218 * (isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0))))) * _3341)) - ((exp2(_3220 * _3352) - exp2(_3220 * _3353)) * _3341))) + (_3213 * cbSceneParam._m0[80u].z);
        }
        vec4 _3399 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3130, _3131, 1.0), 0.0);
        float _3408 = exp2((_3397 * (-1.44269502162933349609375)) * (1.0 - _3399.w));
        float _3409 = log2(_3408);
        float _3425 = log2(_3150);
        _3222 = (exp2(_3425 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3409 * cbSceneParam._m0[78u].x)) * _3399.x) / cbSceneParam._m0[78u].x)) + _3147;
        _3224 = (exp2(_3425 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3409 * cbSceneParam._m0[78u].y)) * _3399.y) / cbSceneParam._m0[78u].y)) + _3148;
        _3226 = (exp2(_3425 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3409 * cbSceneParam._m0[78u].z)) * _3399.z) / cbSceneParam._m0[78u].z)) + _3149;
        _3228 = _3408 * _3150;
    }
    else
    {
        _3222 = _3147;
        _3224 = _3148;
        _3226 = _3149;
        _3228 = _3150;
    }
    bool _3435;
    vec4 _3238;
    vec4 _3260;
    float _3262;
    float _3266;
    float _3267;
    float _3268;
    float _3269;
    bool _3279;
    for (;;)
    {
        _3238 = cbMatDynParam._m0[0u];
        float _3240 = roundEven(_3238.y);
        bool _3241 = _3240 == 3.0;
        float _3242 = log2(_3228);
        float _3249 = exp2(_3242 * cbSceneParam._m0[78u].x) * _3119;
        float _3250 = exp2(_3242 * cbSceneParam._m0[78u].y) * _3120;
        float _3251 = exp2(_3242 * cbSceneParam._m0[78u].z) * _3121;
        float _3258 = _982 + (-0.5);
        _3260 = cbMtdParam._m0[1u];
        _3262 = _3260.y * _3258;
        float _3265 = (_3240 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3266 = _3265 * (_3241 ? _3249 : (_3249 + (cbSceneParam._m0[72u].w * _3222)));
        _3267 = _3265 * (_3241 ? _3250 : (_3250 + (cbSceneParam._m0[72u].w * _3224)));
        _3268 = _3265 * (_3241 ? _3251 : (_3251 + (cbSceneParam._m0[72u].w * _3226)));
        _3269 = _3258 * 0.999000012874603271484375;
        _3279 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3279)
        {
            if ((cbInstanceData._m0[_287 + 7u].x + _3269) < 0.5)
            {
                _3435 = true;
                break;
            }
        }
        uint _3376 = _1031 + uint(_3238.w);
        if ((cbInstanceData._m0[_3376].w < 1.0) && ((cbInstanceData._m0[_3376].w + _3269) < 0.5))
        {
            _3435 = true;
            break;
        }
        if ((_3262 + 1.0) < _3260.x)
        {
            _3435 = true;
            break;
        }
        _3435 = false;
        break;
    }
    float _3639;
    if (_3435)
    {
        discard_state = true;
        _3639 = 0.0;
    }
    else
    {
        _3639 = cbInstanceData._m0[_3122].w;
    }
    SV_Target.x = _3266;
    SV_Target.y = _3267;
    SV_Target.z = _3268;
    SV_Target.w = _3639;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3122].w;
    discard_exit();
}


