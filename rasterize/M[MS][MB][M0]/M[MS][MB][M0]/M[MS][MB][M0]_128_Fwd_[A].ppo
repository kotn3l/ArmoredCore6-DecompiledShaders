#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1200;
float _3558;
float _3559;
float _3560;
float _3561;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _358 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _358) * cbMtdParam._m0[24u].x) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3570 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _383 = (_376 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _384 = (_376 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _385 = (_376 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _404 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _424 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _466 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _468 = _466.x;
    float _469 = _466.y;
    float _470 = _466.z;
    float _479 = ((_449.z - _470) * _376) + _470;
    float _482 = ((((_449.x - _468) * _376) + _468) * 2.0) + (-1.0);
    float _483 = ((((_449.y - _469) * _376) + _469) * 2.0) + (-1.0);
    float _484 = dot(vec2(_482, _483), vec2(_482, _483));
    float _3581 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _489 = sqrt(1.0 - (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))));
    vec4 _505 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _532 = _530.x;
    float _533 = 1.0 - _532;
    float _546 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_532 - _533) * cbMtdParam._m0[24u].z) + _533) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3592 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _554 = (_547 * ((_404.x * cbMtdParam._m0[18u].x) - _383)) + _383;
    float _555 = (_547 * ((_404.y * cbMtdParam._m0[18u].y) - _384)) + _384;
    float _556 = (_547 * ((_404.z * cbMtdParam._m0[18u].z) - _385)) + _385;
    float _561 = (((_424.z - _479) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _479;
    float _565 = ((_505.z - _561) * cbMtdParam._m0[19u].w) + _561;
    vec4 _578 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _585 = (_578.x * 2.0) + (-1.0);
    float _586 = (_578.y * 2.0) + (-1.0);
    float _587 = dot(vec2(_585, _586), vec2(_585, _586));
    float _3603 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _595 = (_547 * (_578.z - _565)) + _565;
    float _604 = (_482 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_424.x * 2.0) + (-1.0)))) + (((_505.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _605 = (_483 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_424.y * 2.0) + (-1.0)))) + (((_505.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _617 = (((_585 - _604) + (cbMtdParam._m0[21u].x * _604)) * _547) + _604;
    float _618 = (((_586 - _605) + (cbMtdParam._m0[21u].x * _605)) * _547) + _605;
    float _619 = (_547 * (sqrt(1.0 - (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) - _489)) + _489;
    float _624 = cbMtdParam._m0[22u].x + _505.w;
    float _627 = fma(_619, _227 * NORMAL.x, fma(_618, _234 * TANGENT.x, (_220 * _212) * _617));
    float _630 = fma(_619, _227 * NORMAL.y, fma(_618, _234 * TANGENT.y, (_220 * _213) * _617));
    float _633 = fma(_619, _227 * NORMAL.z, fma(_618, _234 * TANGENT.z, (_220 * _214) * _617));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    float _638 = _637 * _627;
    float _639 = _637 * _630;
    float _640 = _637 * _633;
    float _3614 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _641 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3636 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3647 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3658 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _659 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _711 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _701);
    float _712 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _701);
    float _713 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _701);
    float _717 = inversesqrt(dot(vec3(_711, _712, _713), vec3(_711, _712, _713)));
    float _718 = _711 * _717;
    float _719 = _712 * _717;
    float _720 = _713 * _717;
    vec4 _725 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _727 = _725.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _881 = sqrt(((_711 * _711) + (_712 * _712)) + (_713 * _713));
        float _887 = (cbMatDynParam._m0[5u].x * _881) + cbMatDynParam._m0[5u].y;
        float _3669 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _892 = (cbMatDynParam._m0[5u].z * _881) + cbMatDynParam._m0[5u].w;
        float _3680 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) - _888)) + _888) < ((_727 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _738 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _739 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _757 = fma(_640, cbSceneParam._m0[5u].z, fma(_639, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _638));
    float _760 = fma(_640, cbSceneParam._m0[6u].z, fma(_639, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _638));
    float _763 = fma(_640, cbSceneParam._m0[7u].z, fma(_639, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _638));
    uint _776 = _240 + 9u;
    uint _777 = _776 + uint(cbMatDynParam._m0[0u].w);
    float _783 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * cbInstanceData._m0[_777].x;
    float _784 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * cbInstanceData._m0[_777].y;
    float _785 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * cbInstanceData._m0[_777].z;
    float _3691 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _3713 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    vec4 _797 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _738, cbSceneParam._m0[86u].y * _739));
    float _801 = ((isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * TEXCOORD_5.w) * _797.x;
    float _802 = dot(vec3(_638, _639, _640), vec3(_718, _719, _720));
    float _805 = _802 * 2.0;
    float _809 = (_805 * _638) - _718;
    float _810 = (_805 * _639) - _719;
    float _811 = (_805 * _640) - _720;
    float _815 = abs(dot(vec3(_718, _719, _720), vec3(_638, _639, _640)));
    float _3724 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _817 = sqrt(_641);
    float _830 = exp2((_817 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_817 * 3.0));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1199;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _924 = fma(_870, cbModelParam._m0[26u].z, fma(_866, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _862));
        float _928 = fma(_870, cbModelParam._m0[27u].z, fma(_866, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _862));
        float _932 = fma(_870, cbModelParam._m0[28u].z, fma(_866, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _862));
        float _957 = _862 + _638;
        float _958 = _866 + _639;
        float _959 = _870 + _640;
        float _969 = fma(_959, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _957)) - _924;
        float _970 = fma(_959, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _957)) - _928;
        float _971 = fma(_959, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _957)) - _932;
        float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
        float _988 = ((_975 * _969) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_924 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_975 * _970) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_928 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_975 * _971) / cbModelParam._m0[34u].z) + ((((((_932 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        float _1027 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_993.x + (-0.5));
        float _1029 = _1027 * (_993.y + (-0.5));
        float _1030 = _1027 * (_993.z + (-0.5));
        float _1037 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_1000.x + (-0.5));
        float _1039 = _1037 * (_1000.y + (-0.5));
        float _1040 = _1037 * (_1000.z + (-0.5));
        float _1047 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1007.x + (-0.5));
        float _1049 = _1047 * (_1007.y + (-0.5));
        float _1050 = _1047 * (_1007.z + (-0.5));
        float _1057 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1014.x + (-0.5));
        float _1059 = _1057 * (_1014.y + (-0.5));
        float _1060 = _1057 * (_1014.z + (-0.5));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1064 = _1028 * 0.5;
        float _1065 = _1038 * 0.5;
        float _1066 = _1048 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1081 = (dot(vec3(_638, _639, _640), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1091 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3772 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1093 + 1.0))) + _1098) * _1061;
        float _1108 = _1029 * 0.5;
        float _1109 = _1039 * 0.5;
        float _1110 = _1049 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_638, _639, _640), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3805 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1135 + 1.0))) + _1140) * _1062;
        float _1150 = _1030 * 0.5;
        float _1151 = _1040 * 0.5;
        float _1152 = _1050 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_638, _639, _640), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1063 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3838 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1177 + 1.0))) + _1182) * _1063;
        _1199 = _1030;
        _1201 = _1029;
        _1202 = _1028;
        _1203 = _1040;
        _1204 = _1039;
        _1205 = _1038;
        _1206 = _1050;
        _1207 = _1049;
        _1208 = _1048;
        _1209 = _1063;
        _1210 = _1062;
        _1211 = _1061;
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1214 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
    }
    else
    {
        _1199 = _1200;
        _1201 = _1200;
        _1202 = _1200;
        _1203 = _1200;
        _1204 = _1200;
        _1205 = _1200;
        _1206 = _1200;
        _1207 = _1200;
        _1208 = _1200;
        _1209 = _1200;
        _1210 = _1200;
        _1211 = _1200;
        _1212 = 0.0;
        _1213 = 0.0;
        _1214 = 0.0;
    }
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1242 = fma(_870, cbModelParam._m0[30u].z, fma(_866, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _862));
        float _1246 = fma(_870, cbModelParam._m0[31u].z, fma(_866, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _862));
        float _1250 = fma(_870, cbModelParam._m0[32u].z, fma(_866, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _862));
        float _1273 = _862 + _638;
        float _1274 = _866 + _639;
        float _1275 = _870 + _640;
        float _1285 = fma(_1275, cbModelParam._m0[30u].z, fma(_1274, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1273)) - _1242;
        float _1286 = fma(_1275, cbModelParam._m0[31u].z, fma(_1274, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1273)) - _1246;
        float _1287 = fma(_1275, cbModelParam._m0[32u].z, fma(_1274, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1273)) - _1250;
        float _1291 = inversesqrt(dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287)));
        float _1304 = ((_1291 * _1285) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1242 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1291 * _1286) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1246 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1306 = ((_1291 * _1287) / cbModelParam._m0[35u].z) + ((((((_1250 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1304, _1305, _1306), 0.0);
        float _1341 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1308.x + (-0.5));
        float _1343 = _1341 * (_1308.y + (-0.5));
        float _1344 = _1341 * (_1308.z + (-0.5));
        float _1351 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1315.x + (-0.5));
        float _1353 = _1351 * (_1315.y + (-0.5));
        float _1354 = _1351 * (_1315.z + (-0.5));
        float _1361 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1322.x + (-0.5));
        float _1363 = _1361 * (_1322.y + (-0.5));
        float _1364 = _1361 * (_1322.z + (-0.5));
        float _1371 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1329.x + (-0.5));
        float _1373 = _1371 * (_1329.y + (-0.5));
        float _1374 = _1371 * (_1329.z + (-0.5));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1378 = _1342 * 0.5;
        float _1379 = _1352 * 0.5;
        float _1380 = _1362 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_638, _639, _640), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _3901 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1405 + 1.0))) + _1410) * _1375;
        float _1420 = _1343 * 0.5;
        float _1421 = _1353 * 0.5;
        float _1422 = _1363 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_638, _639, _640), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _3912 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _3923 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _3934 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1447 + 1.0))) + _1452) * _1376;
        float _1462 = _1344 * 0.5;
        float _1463 = _1354 * 0.5;
        float _1464 = _1364 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_638, _639, _640), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _3945 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1377 + 9.9999997473787516355514526367188e-06);
        float _3956 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _3967 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1489 + 1.0))) + _1494) * _1377;
        _1511 = _1344;
        _1512 = _1343;
        _1513 = _1342;
        _1514 = _1354;
        _1515 = _1353;
        _1516 = _1352;
        _1517 = _1364;
        _1518 = _1363;
        _1519 = _1362;
        _1520 = _1377;
        _1521 = _1376;
        _1522 = _1375;
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1525 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
    }
    else
    {
        _1511 = _1200;
        _1512 = _1200;
        _1513 = _1200;
        _1514 = _1200;
        _1515 = _1200;
        _1516 = _1200;
        _1517 = _1200;
        _1518 = _1200;
        _1519 = _1200;
        _1520 = _1200;
        _1521 = _1200;
        _1522 = _1200;
        _1523 = 0.0;
        _1524 = 0.0;
        _1525 = 0.0;
    }
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1212)) + _1212;
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1213)) + _1213;
    float _1537 = (cbModelParam._m0[1u].x * (_1525 - _1214)) + _1214;
    float _1558 = fma(_1537, cbSceneParam._m0[89u].z, fma(_1536, cbSceneParam._m0[89u].y, _1535 * cbSceneParam._m0[89u].x));
    float _1561 = fma(_1537, cbSceneParam._m0[90u].z, fma(_1536, cbSceneParam._m0[90u].y, _1535 * cbSceneParam._m0[90u].x));
    float _1564 = fma(_1537, cbSceneParam._m0[91u].z, fma(_1536, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1535));
    float _1579 = _809 * 0.5;
    float _1580 = _810 * 0.5;
    float _1581 = _811 * 0.5;
    float _1582 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1513, _1516, _1519, _1522));
    float _1585 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1588 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1622;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1595 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1199, _1203, _1206, _1209));
        float _1599 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1603 = dot(vec4(_1579, _1580, _1581, 1.0), vec4(_1202, _1205, _1208, _1211));
        float _1610 = dot(vec4(cbModelParam._m0[39u]), vec4(_1579, _1580, _1581, 1.0));
        _1622 = dot(vec3(isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1610) ? 0.0 : (isnan(0.0) ? _1610 : max(0.0, _1610))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1622 = 1.0;
    }
    float _1633;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1624 = dot(vec4(cbModelParam._m0[40u]), vec4(_1579, _1580, _1581, 1.0));
        _1633 = dot(vec3(isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1633 = 1.0;
    }
    float _1637 = (_1633 * cbModelParam._m0[1u].x) + (_1622 * (1.0 - cbModelParam._m0[1u].x));
    float _1647 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _641);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1647 : min(cbModelParam._m0[25u].z, _1647));
    float _1728;
    float _1730;
    float _1732;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1695 = fma(_870, cbModelParam._m0[13u].z, fma(_866, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862)) + cbModelParam._m0[13u].w;
        float _1699 = fma(_870, cbModelParam._m0[14u].z, fma(_866, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862)) + cbModelParam._m0[14u].w;
        float _1703 = fma(_870, cbModelParam._m0[15u].z, fma(_866, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862)) + cbModelParam._m0[15u].w;
        float _1706 = fma(_811, cbModelParam._m0[13u].z, fma(_810, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809));
        float _1709 = fma(_811, cbModelParam._m0[14u].z, fma(_810, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809));
        float _1712 = fma(_811, cbModelParam._m0[15u].z, fma(_810, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809));
        float _1740;
        if (_1706 > 0.0)
        {
            _1740 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1740 = frontier_phi_17_15_ladder;
        }
        float _1940;
        if (_1709 > 0.0)
        {
            _1940 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1940 = frontier_phi_26_22_ladder;
        }
        float _2183;
        if (_1712 > 0.0)
        {
            _2183 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2183 = frontier_phi_38_33_ladder;
        }
        float _2185 = isnan(_1940) ? _1740 : (isnan(_1740) ? _1940 : min(_1740, _1940));
        float _2186 = isnan(_2183) ? _2185 : (isnan(_2185) ? _2183 : min(_2185, _2183));
        float _2190 = (_2186 * _1706) + _1695;
        float _2191 = (_2186 * _1709) + _1699;
        float _2192 = (_2186 * _1712) + _1703;
        float _2193 = _2186 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2193;
        float _2197 = _2193 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 > _2197) || ((_2191 < _2195) || ((_2190 < _2195) || (_2190 > _2197))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2316 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2192, cbModelParam._m0[9u].z, fma(_2191, cbModelParam._m0[9u].y, _2190 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2192, cbModelParam._m0[10u].z, fma(_2191, cbModelParam._m0[10u].y, _2190 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2192, cbModelParam._m0[11u].z, fma(_2191, cbModelParam._m0[11u].y, _2190 * cbModelParam._m0[11u].x))), _1648);
            frontier_phi_16_38_ladder = _2316.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2316.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2316.x * cbModelParam._m0[1u].y;
        }
        _1728 = frontier_phi_16_38_ladder_2;
        _1730 = frontier_phi_16_38_ladder_1;
        _1732 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1716 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_809, _810, _811), _1648);
        _1728 = _1716.x * cbModelParam._m0[1u].y;
        _1730 = _1716.y * cbModelParam._m0[1u].y;
        _1732 = _1716.z * cbModelParam._m0[1u].y;
    }
    float _1736 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _641);
    float _1737 = isnan(_1736) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1736 : min(cbModelParam._m0[25u].w, _1736));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1790 = fma(_870, cbModelParam._m0[21u].z, fma(_866, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862)) + cbModelParam._m0[21u].w;
        float _1794 = fma(_870, cbModelParam._m0[22u].z, fma(_866, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862)) + cbModelParam._m0[22u].w;
        float _1798 = fma(_870, cbModelParam._m0[23u].z, fma(_866, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862)) + cbModelParam._m0[23u].w;
        float _1801 = fma(_811, cbModelParam._m0[21u].z, fma(_810, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809));
        float _1804 = fma(_811, cbModelParam._m0[22u].z, fma(_810, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809));
        float _1807 = fma(_811, cbModelParam._m0[23u].z, fma(_810, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809));
        float _1945;
        if (_1801 > 0.0)
        {
            _1945 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1945 = frontier_phi_28_24_ladder;
        }
        float _2210;
        if (_1804 > 0.0)
        {
            _2210 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2210 = frontier_phi_40_35_ladder;
        }
        float _2415;
        if (_1807 > 0.0)
        {
            _2415 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2415 = frontier_phi_49_46_ladder;
        }
        float _2417 = isnan(_2210) ? _1945 : (isnan(_1945) ? _2210 : min(_1945, _2210));
        float _2418 = isnan(_2415) ? _2417 : (isnan(_2417) ? _2415 : min(_2417, _2415));
        float _2422 = (_2418 * _1801) + _1790;
        float _2423 = (_2418 * _1804) + _1794;
        float _2424 = (_2418 * _1807) + _1798;
        float _2425 = _2418 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2425;
        float _2428 = _2425 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2424 > _2428) || ((_2424 < _2426) || ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 < _2426) || (_2422 > _2428))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2623 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2424, cbModelParam._m0[17u].z, fma(_2423, cbModelParam._m0[17u].y, _2422 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2424, cbModelParam._m0[18u].z, fma(_2423, cbModelParam._m0[18u].y, _2422 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2424, cbModelParam._m0[19u].z, fma(_2423, cbModelParam._m0[19u].y, _2422 * cbModelParam._m0[19u].x))), _1737);
            frontier_phi_25_49_ladder = _2623.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2623.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2623.x * cbModelParam._m0[1u].z;
        }
        _1826 = frontier_phi_25_49_ladder_2;
        _1828 = frontier_phi_25_49_ladder_1;
        _1830 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1810 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_809, _810, _811), _1737);
        _1826 = _1810.x * cbModelParam._m0[1u].z;
        _1828 = _1810.y * cbModelParam._m0[1u].z;
        _1830 = _1810.z * cbModelParam._m0[1u].z;
    }
    float _1842 = ((((1.0 - _830) * ((_817 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_830 * _817)) * _801;
    float _1843 = _1842 * ((cbModelParam._m0[1u].w * (_1826 - _1728)) + _1728);
    float _1844 = _1842 * ((cbModelParam._m0[1u].w * (_1828 - _1730)) + _1730);
    float _1845 = _1842 * ((cbModelParam._m0[1u].w * (_1830 - _1732)) + _1732);
    float _1848 = fma(_1845, cbSceneParam._m0[89u].z, fma(_1844, cbSceneParam._m0[89u].y, _1843 * cbSceneParam._m0[89u].x));
    float _1851 = fma(_1845, cbSceneParam._m0[90u].z, fma(_1844, cbSceneParam._m0[90u].y, _1843 * cbSceneParam._m0[90u].x));
    float _1854 = fma(_1845, cbSceneParam._m0[91u].z, fma(_1844, cbSceneParam._m0[91u].y, _1843 * cbSceneParam._m0[91u].x));
    uvec4 _1864 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1866 = _1864.x * 14u;
    uint _1867 = _1866 + 13u;
    float _1874 = _801 + (-1.0);
    float _1879 = (cbLight._m0[_1867].x * _1874) + 1.0;
    float _1880 = (cbLight._m0[_1867].y * _1874) + 1.0;
    float _1881 = (cbLight._m0[_1867].z * _1874) + 1.0;
    float _1882 = (cbLight._m0[_1867].w * _1874) + 1.0;
    uint _1883 = _1866 + 5u;
    float _1889 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
    uint _1893 = _1866 + 4u;
    float _1899 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
    uint _1903 = _1866 | 1u;
    float _1914 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_638, _639, _640));
    float _1917 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_638, _639, _640));
    float _4103 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    float _4114 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1922 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.3183098733425140380859375;
    float _1924 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.3183098733425140380859375;
    float _1931 = ((cbLight._m0[_1883].x * _1889) * _1924) + ((cbLight._m0[_1893].x * _1899) * _1922);
    float _1932 = ((_1889 * cbLight._m0[_1883].y) * _1924) + ((_1899 * cbLight._m0[_1893].y) * _1922);
    float _1933 = ((_1889 * cbLight._m0[_1883].z) * _1924) + ((_1899 * cbLight._m0[_1893].z) * _1922);
    uvec4 _1937 = floatBitsToUint(cbLight._m0[_1866 + 12u]);
    bool _1939 = _1937.x == 0u;
    float _1950;
    float _1952;
    float _1954;
    if (_1939)
    {
        _1950 = _1931;
        _1952 = _1932;
        _1954 = _1933;
    }
    else
    {
        uint _1958 = _1866 + 6u;
        float _1974 = (dot(vec3(cbLight._m0[_1866 + 2u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _1975 = _1974 * _1974;
        float _4125 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
        float _1976 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1977 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _1950 = (((cbLight._m0[_1958].x * 0.3183098733425140380859375) * _1976) * _1977) + _1931;
        _1952 = (((cbLight._m0[_1958].y * 0.3183098733425140380859375) * _1976) * _1977) + _1932;
        _1954 = (((cbLight._m0[_1958].z * 0.3183098733425140380859375) * _1976) * _1977) + _1933;
    }
    bool _1957 = _1937.y == 0u;
    float _1995;
    float _1997;
    float _1999;
    if (_1957)
    {
        _1995 = _1950;
        _1997 = _1952;
        _1999 = _1954;
    }
    else
    {
        uint _2154 = _1866 + 7u;
        float _2170 = (dot(vec3(cbLight._m0[_1866 + 3u].xyz), vec3(_638, _639, _640)) * 0.5) + 0.5;
        float _2171 = _2170 * _2170;
        float _4141 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2172 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2173 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _1995 = (((cbLight._m0[_2154].x * 0.3183098733425140380859375) * _2172) * _2173) + _1950;
        _1997 = (((cbLight._m0[_2154].y * 0.3183098733425140380859375) * _2172) * _2173) + _1952;
        _1999 = (((cbLight._m0[_2154].z * 0.3183098733425140380859375) * _2172) * _2173) + _1954;
    }
    uint _2002 = _1866 + 8u;
    float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _641) * 0.949999988079071044921875);
    float _2016 = _2015 * _2015;
    float _2017 = cbLight._m0[_1866].x + _718;
    float _2018 = cbLight._m0[_1866].y + _719;
    float _2019 = cbLight._m0[_1866].z + _720;
    float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
    float _2024 = _2023 * _2017;
    float _2025 = _2023 * _2018;
    float _2026 = _2023 * _2019;
    float _2027 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_1866].xyz));
    float _4157 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _4168 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _2031 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _2032 = dot(vec3(_638, _639, _640), vec3(_2024, _2025, _2026));
    float _4179 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2035 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _2036 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_2024, _2025, _2026));
    float _4190 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2040 = _2016 * _2016;
    float _2044 = ((_2035 * _2035) * (_2040 + (-1.0))) + 1.0;
    float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2056 = 1.0 - _2016;
    float _2067 = (0.5 / (((_2031 * ((_2030 * _2056) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2056) + _2016) * _2030))) * _2030;
    float _4201 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2040 / ((_2044 * _2044) * 3.141590118408203125));
    uint _2080 = _1866 + 9u;
    float _2091 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1903].w)) * _641) * 0.949999988079071044921875);
    float _2092 = _2091 * _2091;
    float _2093 = cbLight._m0[_1903].x + _718;
    float _2094 = cbLight._m0[_1903].y + _719;
    float _2095 = cbLight._m0[_1903].z + _720;
    float _2099 = inversesqrt(dot(vec3(_2093, _2094, _2095), vec3(_2093, _2094, _2095)));
    float _2100 = _2099 * _2093;
    float _2101 = _2099 * _2094;
    float _2102 = _2099 * _2095;
    float _2103 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_1903].xyz));
    float _4212 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _2107 = dot(vec3(_638, _639, _640), vec3(_2100, _2101, _2102));
    float _4223 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2111 = dot(vec3(cbLight._m0[_1903].xyz), vec3(_2100, _2101, _2102));
    float _4234 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2115 = _2092 * _2092;
    float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
    float _2128 = (exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2129 = 1.0 - _2092;
    float _2139 = (0.5 / (((_2031 * ((_2106 * _2129) + _2092)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2129) + _2092) * _2106))) * _2106;
    float _4245 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
    float _2151 = (((_2128 * cbLight._m0[_2080].x) * _2141) * _1889) + (((_2055 * cbLight._m0[_2002].x) * _2069) * _1899);
    float _2152 = (((_2128 * cbLight._m0[_2080].y) * _2141) * _1889) + (((_2055 * cbLight._m0[_2002].y) * _2069) * _1899);
    float _2153 = (((_2128 * cbLight._m0[_2080].z) * _2141) * _1889) + (((_2055 * cbLight._m0[_2002].z) * _2069) * _1899);
    float _2215;
    float _2217;
    float _2219;
    if (_1939)
    {
        _2215 = _2151;
        _2217 = _2152;
        _2219 = _2153;
    }
    else
    {
        uint _2221 = _1866 + 2u;
        uint _2225 = _1866 + 10u;
        float _2239 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _641) * 0.949999988079071044921875);
        float _2240 = _2239 * _2239;
        float _2241 = cbLight._m0[_2221].x + _718;
        float _2242 = cbLight._m0[_2221].y + _719;
        float _2243 = cbLight._m0[_2221].z + _720;
        float _2247 = inversesqrt(dot(vec3(_2241, _2242, _2243), vec3(_2241, _2242, _2243)));
        float _2248 = _2247 * _2241;
        float _2249 = _2247 * _2242;
        float _2250 = _2247 * _2243;
        float _2251 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2221].xyz));
        float _4256 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
        float _2254 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2255 = dot(vec3(_638, _639, _640), vec3(_2248, _2249, _2250));
        float _4267 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2258 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2259 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2248, _2249, _2250));
        float _4278 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2263 = _2240 * _2240;
        float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
        float _2276 = (exp2(log2(1.0 - (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2277 = 1.0 - _2240;
        float _2287 = (0.5 / (((_2031 * ((_2254 * _2277) + _2240)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2277) + _2240) * _2254))) * _2254;
        float _4289 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2289 = (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
        float _2290 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2215 = (((_2276 * cbLight._m0[_2225].x) * _2289) * _2290) + _2151;
        _2217 = (((_2276 * cbLight._m0[_2225].y) * _2289) * _2290) + _2152;
        _2219 = (((_2276 * cbLight._m0[_2225].z) * _2289) * _2290) + _2153;
    }
    float _2325;
    float _2327;
    float _2329;
    if (_1957)
    {
        _2325 = _2215;
        _2327 = _2217;
        _2329 = _2219;
    }
    else
    {
        uint _2336 = _1866 + 3u;
        uint _2340 = _1866 + 11u;
        float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _641) * 0.949999988079071044921875);
        float _2355 = _2354 * _2354;
        float _2356 = cbLight._m0[_2336].x + _718;
        float _2357 = cbLight._m0[_2336].y + _719;
        float _2358 = cbLight._m0[_2336].z + _720;
        float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
        float _2363 = _2362 * _2356;
        float _2364 = _2362 * _2357;
        float _2365 = _2362 * _2358;
        float _2366 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2336].xyz));
        float _4305 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2370 = dot(vec3(_638, _639, _640), vec3(_2363, _2364, _2365));
        float _4316 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _2374 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2363, _2364, _2365));
        float _4327 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2378 = _2355 * _2355;
        float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
        float _2391 = (exp2(log2(1.0 - (isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2392 = 1.0 - _2355;
        float _2402 = (0.5 / (((_2031 * ((_2369 * _2392) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2031 * _2392) + _2355) * _2369))) * _2369;
        float _4338 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2404 = (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
        float _2405 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2325 = (((_2391 * cbLight._m0[_2340].x) * _2404) * _2405) + _2215;
        _2327 = (((_2391 * cbLight._m0[_2340].y) * _2404) * _2405) + _2217;
        _2329 = (((_2391 * cbLight._m0[_2340].z) * _2404) * _2405) + _2219;
    }
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    if (_1864.y == 0u)
    {
        float _2480 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2481 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2480;
        float _2482 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2480;
        float _2483 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2480;
        uvec4 _2495 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2496 = _2495.x;
        uint _2507 = uint((float(_2495.y) * floor(float(uint(cbSceneParam._m0[85u].y * _739) / _2496))) + floor(float(uint(cbSceneParam._m0[85u].x * _738) / _2496)));
        float _2517 = (log2(_2483 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2518 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        uint _2521 = uint(isnan(14.0) ? _2518 : (isnan(_2518) ? 14.0 : min(_2518, 14.0)));
        uvec4 _2526 = texelFetch(g_lightClusterGridBuffer, int(((_2521 << 2u) + (_2507 << 6u)) >> 2u));
        uint _2527 = _2526.x;
        uint _2528 = _2495.z;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        if (((((1u << ((_2528 >> 4u) & 15u)) + 4294967295u) & _2527) == 0u) || ((_2528 & 240u) == 0u))
        {
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
        }
        else
        {
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            float _2786 = 0.0;
            uint _2787 = 0u;
            uint _2796;
            bool _2797;
            for (;;)
            {
                _2796 = texelFetch(g_lightClassification, int((((_2521 << 5u) + (_2507 << 9u)) + (_2787 << 2u)) >> 2u)).x;
                _2797 = _2796 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2797)
                {
                    frontier_phi_66_pred = _2781;
                    frontier_phi_66_pred_1 = _2786;
                    frontier_phi_66_pred_2 = _2785;
                    frontier_phi_66_pred_3 = _2784;
                    frontier_phi_66_pred_4 = _2783;
                    frontier_phi_66_pred_5 = _2782;
                }
                else
                {
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    uint _2932;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2786;
                    _2932 = _2796;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    float _2858;
                    for (;;)
                    {
                        uint _2936 = uint(findLSB(_2932)) + (_2787 << 5u);
                        uint _2933 = (_2932 + 4294967295u) & _2932;
                        uint _2938 = _2936 * 48u;
                        vec4 _2952 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 3u)).x));
                        uint _2958 = (_2936 * 48u) + 4u;
                        vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2958)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2958 + 3u)).x));
                        uint _2977 = (_2936 * 48u) + 8u;
                        vec3 _2988 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2977)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2977 + 2u)).x));
                        float _2992 = _2952.x - _2481;
                        float _2993 = _2952.y - _2482;
                        float _2994 = _2952.z - _2483;
                        float _2995 = dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994));
                        float _2998 = inversesqrt(_2995);
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3002 = dot(vec3(_757, _760, _763), vec3(_2999, _3000, _3001));
                        float _3007 = 1.0 - (_2995 * _2952.w);
                        float _4364 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3008 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
                        float _3009 = sqrt(_2995) * _2971.w;
                        float _3012 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _3002) + _3013;
                        float _3019 = _3009 * _3009;
                        float _3023 = ((isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0))) * _3008) / ((_3019 * 0.699999988079071044921875) + 1.0);
                        float _3027 = (-0.0) - _2481;
                        float _3028 = (-0.0) - _2482;
                        float _3029 = (-0.0) - _2483;
                        float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                        float _3034 = _3033 * _3027;
                        float _3035 = _3033 * _3028;
                        float _3036 = _3033 * _3029;
                        float _3044 = exp2(log2(1.0 / ((_3019 * 3.5) + 5.0)) * 0.25);
                        float _3045 = 1.0 - _817;
                        float _3052 = sqrt(1.0 - ((1.0 - (_3045 * _3045)) * (1.0 - (_3044 * _3044))));
                        float _3053 = _3052 * _3052;
                        float _3054 = _3053 * _3053;
                        float _3055 = _3034 + _2999;
                        float _3056 = _3035 + _3000;
                        float _3057 = _3036 + _3001;
                        float _3061 = inversesqrt(dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057)));
                        float _3065 = dot(vec3(_757, _760, _763), vec3(_3034, _3035, _3036));
                        float _4380 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3068 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                        float _3069 = dot(vec3(_757, _760, _763), vec3(_3061 * _3055, _3061 * _3056, _3061 * _3057));
                        float _4391 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3072 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
                        float _3076 = ((_3072 * _3072) * (_3054 + (-1.0))) + 1.0;
                        float _3077 = _3012 * _3053;
                        float _3078 = _3077 * _3077;
                        float _3081 = ((1.0 - _3078) * _3002) + _3078;
                        float _4402 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                        float _3082 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
                        float _3083 = 1.0 - _3053;
                        float _3093 = (0.5 / (((_3082 * ((_3068 * _3083) + _3053)) + 9.9999999392252902907785028219223e-09) + (((_3082 * _3083) + _3053) * _3068))) * _3082;
                        float _4413 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                        float _3104 = (((_3054 * 3.1415927410125732421875) * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) / ((_3076 * _3076) * ((_3019 * 2.1991131305694580078125) + 3.141590118408203125))) * _3008;
                        _2856 = (_3023 * _2971.x) + _2929;
                        _2857 = (_3023 * _2971.y) + _2930;
                        _2858 = (_3023 * _2971.z) + _2931;
                        _2853 = (_3104 * _2988.x) + _2926;
                        _2854 = (_3104 * _2988.y) + _2927;
                        _2855 = (_3104 * _2988.z) + _2928;
                        if (_2933 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2858;
                            _2932 = _2933;
                        }
                    }
                    frontier_phi_66_pred = _2853;
                    frontier_phi_66_pred_1 = _2858;
                    frontier_phi_66_pred_2 = _2857;
                    frontier_phi_66_pred_3 = _2856;
                    frontier_phi_66_pred_4 = _2855;
                    frontier_phi_66_pred_5 = _2854;
                }
                _2629 = frontier_phi_66_pred;
                _2639 = frontier_phi_66_pred_1;
                _2637 = frontier_phi_66_pred_2;
                _2635 = frontier_phi_66_pred_3;
                _2633 = frontier_phi_66_pred_4;
                _2631 = frontier_phi_66_pred_5;
                uint _2788 = _2787 + 1u;
                if (_2788 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2781 = _2629;
                    _2782 = _2631;
                    _2783 = _2633;
                    _2784 = _2635;
                    _2785 = _2637;
                    _2786 = _2639;
                    _2787 = _2788;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
        }
        uvec4 _2642 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2643 = _2642.z;
        uint _2645 = (_2643 >> 8u) & 15u;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        if (((4294967295u << _2645) & _2527) == 0u)
        {
            _2749 = _2628;
            _2751 = _2630;
            _2753 = _2632;
            _2755 = _2634;
            _2757 = _2636;
            _2759 = _2638;
        }
        else
        {
            float _2774 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
            float _2775 = _2774 * _2481;
            float _2776 = _2774 * _2482;
            float _2777 = _2774 * _2483;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2645 < ((_2643 >> 12u) & 15u))
            {
                float _2750;
                float _2752;
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2909 = _2628;
                float _2910 = _2630;
                float _2911 = _2632;
                float _2912 = _2634;
                float _2913 = _2636;
                float _2914 = _2638;
                uint _2915 = _2645;
                uint _2924;
                bool _2925;
                for (;;)
                {
                    _2924 = texelFetch(g_lightClassification, int((((_2521 << 5u) + (_2507 << 9u)) + (_2915 << 2u)) >> 2u)).x;
                    _2925 = _2924 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2925)
                    {
                        frontier_phi_77_pred = _2914;
                        frontier_phi_77_pred_1 = _2913;
                        frontier_phi_77_pred_2 = _2912;
                        frontier_phi_77_pred_3 = _2911;
                        frontier_phi_77_pred_4 = _2910;
                        frontier_phi_77_pred_5 = _2909;
                    }
                    else
                    {
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3411;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3131 = _2909;
                        float _3132 = _2910;
                        float _3133 = _2911;
                        float _3134 = _2912;
                        float _3135 = _2913;
                        float _3136 = _2914;
                        uint _3137 = _2924;
                        uint _3138;
                        vec4 _3163;
                        float _3164;
                        vec4 _3179;
                        vec3 _3191;
                        vec4 _3206;
                        vec4 _3221;
                        float _3267;
                        bool _3268;
                        for (;;)
                        {
                            uint _3148 = ((_2915 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3137));
                            _3138 = (_3137 + 4294967295u) & _3137;
                            uint _3150 = _3148 * 40u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3164 = _3163.w;
                            uint _3166 = (_3148 * 40u) + 4u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3181 = (_3148 * 40u) + 8u;
                            _3191 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3181)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3181 + 2u)).x));
                            uint _3193 = (_3148 * 40u) + 16u;
                            _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3208 = (_3148 * 40u) + 20u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3223 = (_3148 * 40u) + 24u;
                            vec4 _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3242 = (_3148 * 40u) + 28u;
                            vec4 _3255 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 3u)).x));
                            _3267 = fma(_2483, _3255.z, fma(_2482, _3255.y, _3255.x * _2481)) + _3255.w;
                            _3268 = !((fma(_2483, _3236.z, fma(_2482, _3236.y, _3236.x * _2481)) + _3236.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3268)
                            {
                                float _3295 = _3163.x - _2481;
                                float _3296 = _3163.y - _2482;
                                float _3297 = _3163.z - _2483;
                                float _3298 = dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297));
                                float _3301 = inversesqrt(_3298);
                                float _3302 = _3301 * _3295;
                                float _3303 = _3301 * _3296;
                                float _3304 = _3301 * _3297;
                                float _3308 = 1.0 - (_3298 / (_3164 * _3164));
                                float _4424 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3309 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
                                float _3313 = sqrt(_3298) * _3179.w;
                                float _3315 = 1.39999997615814208984375 / (_3313 + 1.39999997615814208984375);
                                float _3316 = _3315 * _3315;
                                float _3319 = ((1.0 - _3316) * dot(vec3(_3302, _3303, _3304), vec3(_757, _760, _763))) + _3316;
                                float _3322 = _3313 * _3313;
                                float _3326 = (fma(_2483, _3206.z, fma(_2482, _3206.y, _3206.x * _2481)) + _3206.w) / _3267;
                                float _3327 = (fma(_2483, _3221.z, fma(_2482, _3221.y, _3221.x * _2481)) + _3221.w) / _3267;
                                float _3331 = 1.0 - dot(vec2(_3326, _3327), vec2(_3326, _3327));
                                float _4440 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                                float _3332 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
                                float _3333 = _3332 * (((isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))) * _3309) / ((_3322 * 0.699999988079071044921875) + 1.0));
                                float _3345 = exp2(log2(1.0 / ((_3322 * 3.5) + 5.0)) * 0.25);
                                float _3346 = 1.0 - _817;
                                float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                                float _3354 = _3353 * _3353;
                                float _3355 = _3354 * _3354;
                                float _3356 = _3302 - _2775;
                                float _3357 = _3303 - _2776;
                                float _3358 = _3304 - _2777;
                                float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                                float _3366 = dot(vec3(_757, _760, _763), vec3((-0.0) - _2775, (-0.0) - _2776, (-0.0) - _2777));
                                float _4451 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3369 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
                                float _3370 = dot(vec3(_757, _760, _763), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                                float _4462 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                                float _3378 = _3315 * _3354;
                                float _3379 = _3378 * _3378;
                                float _3385 = ((1.0 - _3379) * dot(vec3(_757, _760, _763), vec3(_3302, _3303, _3304))) + _3379;
                                float _4473 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                                float _3386 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3387 = 1.0 - _3354;
                                float _3397 = (0.5 / (((_3386 * ((_3369 * _3387) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3386 * _3387) + _3354) * _3369))) * _3386;
                                float _4484 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3407 = (_3332 * _3309) * (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0)))) / ((_3377 * _3377) * ((_3322 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3333 * _3179.y;
                                frontier_phi_83_pred_1 = _3333 * _3179.x;
                                frontier_phi_83_pred_2 = _3407 * _3191.z;
                                frontier_phi_83_pred_3 = _3407 * _3191.y;
                                frontier_phi_83_pred_4 = _3407 * _3191.x;
                                frontier_phi_83_pred_5 = _3333 * _3179.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3415 = frontier_phi_83_pred;
                            _3414 = frontier_phi_83_pred_1;
                            _3413 = frontier_phi_83_pred_2;
                            _3412 = frontier_phi_83_pred_3;
                            _3411 = frontier_phi_83_pred_4;
                            _3416 = frontier_phi_83_pred_5;
                            _3121 = _3414 + _3134;
                            _3122 = _3415 + _3135;
                            _3123 = _3416 + _3136;
                            _3118 = _3411 + _3131;
                            _3119 = _3412 + _3132;
                            _3120 = _3413 + _3133;
                            if (_3138 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3138;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3123;
                        frontier_phi_77_pred_1 = _3122;
                        frontier_phi_77_pred_2 = _3121;
                        frontier_phi_77_pred_3 = _3120;
                        frontier_phi_77_pred_4 = _3119;
                        frontier_phi_77_pred_5 = _3118;
                    }
                    _2760 = frontier_phi_77_pred;
                    _2758 = frontier_phi_77_pred_1;
                    _2756 = frontier_phi_77_pred_2;
                    _2754 = frontier_phi_77_pred_3;
                    _2752 = frontier_phi_77_pred_4;
                    _2750 = frontier_phi_77_pred_5;
                    uint _2916 = _2915 + 1u;
                    if (_2916 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2909 = _2750;
                        _2910 = _2752;
                        _2911 = _2754;
                        _2912 = _2756;
                        _2913 = _2758;
                        _2914 = _2760;
                        _2915 = _2916;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2754;
                frontier_phi_58_59_ladder_1 = _2760;
                frontier_phi_58_59_ladder_2 = _2758;
                frontier_phi_58_59_ladder_3 = _2756;
                frontier_phi_58_59_ladder_4 = _2752;
                frontier_phi_58_59_ladder_5 = _2750;
            }
            else
            {
                frontier_phi_58_59_ladder = _2632;
                frontier_phi_58_59_ladder_1 = _2638;
                frontier_phi_58_59_ladder_2 = _2636;
                frontier_phi_58_59_ladder_3 = _2634;
                frontier_phi_58_59_ladder_4 = _2630;
                frontier_phi_58_59_ladder_5 = _2628;
            }
            _2749 = frontier_phi_58_59_ladder_5;
            _2751 = frontier_phi_58_59_ladder_4;
            _2753 = frontier_phi_58_59_ladder;
            _2755 = frontier_phi_58_59_ladder_3;
            _2757 = frontier_phi_58_59_ladder_2;
            _2759 = frontier_phi_58_59_ladder_1;
        }
        float _2764 = isnan(1.0) ? _801 : (isnan(_801) ? 1.0 : min(_801, 1.0));
        _2540 = (_2764 * _2755) + _1995;
        _2542 = (_2764 * _2757) + _1997;
        _2544 = (_2764 * _2759) + _1999;
        _2546 = ((_2749 * 0.039999999105930328369140625) * _2764) + _2325;
        _2548 = ((_2751 * 0.039999999105930328369140625) * _2764) + _2327;
        _2550 = ((_2753 * 0.039999999105930328369140625) * _2764) + _2329;
    }
    else
    {
        _2540 = _1995;
        _2542 = _1997;
        _2544 = _1999;
        _2546 = _2325;
        _2548 = _2327;
        _2550 = _2329;
    }
    float _4500 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4511 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4522 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _2567 = ((isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2540 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _801))) + ((_2546 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1637)) * cbPerFrame._m0[3u].x);
    float _2568 = ((isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (_2542 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _801))) + ((_2548 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1637)) * cbPerFrame._m0[3u].x);
    float _2569 = ((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2544 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _801))) + ((_2550 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1637)) * cbPerFrame._m0[3u].x);
    uint _2570 = _240 + 6u;
    float _2578 = _738 / cbSceneParam._m0[86u].x;
    float _2579 = _739 / cbSceneParam._m0[86u].y;
    vec4 _2593 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2578, _2579, (log2((isnan(cbSceneParam._m0[77u].w) ? _659 : (isnan(_659) ? cbSceneParam._m0[77u].w : min(_659, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2595 = _2593.x;
    float _2596 = _2593.y;
    float _2597 = _2593.z;
    float _2598 = _2593.w;
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    if (_659 > cbSceneParam._m0[78u].w)
    {
        float _2653 = isnan(_659) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _659 : min(cbSceneParam._m0[80u].w, _659));
        float _2654 = _2653 / _659;
        float _2665 = _2654 * _711;
        float _2666 = _712 * _2654;
        float _2667 = (-0.0) - _2666;
        float _2669 = _2654 * _713;
        float _2671 = (cbSceneParam._m0[77u].w * _2667) / _2653;
        float _2672 = _2671 + cbSceneParam._m0[79u].w;
        float _2673 = cbSceneParam._m0[79u].w - _2666;
        float _2679 = sqrt(((_2665 * _2665) + (_2666 * _2666)) + (_2669 * _2669));
        float _2682 = (1.0 - (cbSceneParam._m0[77u].w / _2653)) * _2679;
        float _2687 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2689 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2866;
        if (abs((_2667 - _2671) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2866 = ((((_2672 > 0.0) ? exp2(_2687 * _2672) : (2.0 - exp2(_2689 * _2672))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2682;
        }
        else
        {
            float _2810 = 1.0 / cbSceneParam._m0[80u].x;
            float _2811 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : max(_2672, _2673));
            float _2812 = isnan(_2673) ? _2672 : (isnan(_2672) ? _2673 : min(_2672, _2673));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            float _2822 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : min(_2812, 0.0));
            _2866 = ((abs(_2679 / _2667) * cbSceneParam._m0[80u].y) * ((((_2821 - _2822) * 2.0) - ((exp2(_2687 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0)))) - exp2(_2687 * (isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))))) * _2810)) - ((exp2(_2689 * _2821) - exp2(_2689 * _2822)) * _2810))) + (_2682 * cbSceneParam._m0[80u].z);
        }
        vec4 _2868 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2578, _2579, 1.0), 0.0);
        float _2877 = exp2((_2866 * (-1.44269502162933349609375)) * (1.0 - _2868.w));
        float _2878 = log2(_2877);
        float _2894 = log2(_2598);
        _2691 = (exp2(_2894 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].x)) * _2868.x) / cbSceneParam._m0[78u].x)) + _2595;
        _2693 = (exp2(_2894 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].y)) * _2868.y) / cbSceneParam._m0[78u].y)) + _2596;
        _2695 = (exp2(_2894 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2878 * cbSceneParam._m0[78u].z)) * _2868.z) / cbSceneParam._m0[78u].z)) + _2597;
        _2697 = _2877 * _2598;
    }
    else
    {
        _2691 = _2595;
        _2693 = _2596;
        _2695 = _2597;
        _2697 = _2598;
    }
    bool _2904;
    vec4 _2707;
    vec4 _2729;
    float _2731;
    float _2735;
    float _2736;
    float _2737;
    float _2738;
    bool _2748;
    for (;;)
    {
        _2707 = cbMatDynParam._m0[0u];
        float _2709 = roundEven(_2707.y);
        bool _2710 = _2709 == 3.0;
        float _2711 = log2(_2697);
        float _2718 = exp2(_2711 * cbSceneParam._m0[78u].x) * _2567;
        float _2719 = exp2(_2711 * cbSceneParam._m0[78u].y) * _2568;
        float _2720 = exp2(_2711 * cbSceneParam._m0[78u].z) * _2569;
        float _2727 = _727 + (-0.5);
        _2729 = cbMtdParam._m0[1u];
        _2731 = _2729.y * _2727;
        float _2734 = (_2709 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2735 = _2734 * (_2710 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2691)));
        _2736 = _2734 * (_2710 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2693)));
        _2737 = _2734 * (_2710 ? _2720 : (_2720 + (cbSceneParam._m0[72u].w * _2695)));
        _2738 = _2727 * 0.999000012874603271484375;
        _2748 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2748)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2738) < 0.5)
            {
                _2904 = true;
                break;
            }
        }
        uint _2845 = _776 + uint(_2707.w);
        if ((cbInstanceData._m0[_2845].w < 1.0) && ((cbInstanceData._m0[_2845].w + _2738) < 0.5))
        {
            _2904 = true;
            break;
        }
        if ((_2731 + 1.0) < _2729.x)
        {
            _2904 = true;
            break;
        }
        _2904 = false;
        break;
    }
    float _3109;
    if (_2904)
    {
        discard_state = true;
        _3109 = 0.0;
    }
    else
    {
        _3109 = cbInstanceData._m0[_2570].w;
    }
    SV_Target.x = _2735;
    SV_Target.y = _2736;
    SV_Target.z = _2737;
    SV_Target.w = _3109;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2570].w;
    discard_exit();
}


