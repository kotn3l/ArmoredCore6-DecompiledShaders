#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1087;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    uint _231 = uint(roundEven(NORMAL.w)) * 13u;
    uint _236 = _231 + 1u;
    uint _240 = _231 + 2u;
    float _249 = sqrt(((cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x) + (cbInstanceData._m0[_231].x * cbInstanceData._m0[_231].x)) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x));
    float _250 = _249 * TEXCOORD.z;
    float _251 = _249 * TEXCOORD.w;
    vec4 _270 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _270.x * cbMtdParam._m0[9u].x;
    float _277 = _270.y * cbMtdParam._m0[9u].y;
    float _278 = _270.z * cbMtdParam._m0[9u].z;
    vec4 _296 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _300 = _296.z;
    float _305 = (_296.x * 2.0) + (-1.0);
    float _307 = (_296.y * 2.0) + (-1.0);
    float _308 = dot(vec2(_305, _307), vec2(_305, _307));
    float _3396 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _314 = sqrt(1.0 - (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))));
    float _317 = fma(_314, _219, fma(_307, _226, _305 * _212));
    float _320 = fma(_314, _220, fma(_307, _227, _305 * _213));
    float _323 = fma(_314, _221, fma(_307, _228, _305 * _214));
    float _327 = inversesqrt(dot(vec3(_317, _320, _323), vec3(_317, _320, _323)));
    vec4 _363 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _250) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _251) + cbTextureTilingScale._m0[11u].w));
    float _365 = _363.x;
    float _366 = 1.0 - _365;
    float _375 = (cbMtdParam._m0[19u].x + dot(vec4(_327 * _317, _327 * _320, _327 * _323, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_365 - _366) * cbMtdParam._m0[24u].z) + _366) * cbMtdParam._m0[21u].z);
    float _3407 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _378 = (-0.0) - cbMtdParam._m0[24u].y;
    float _380 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _381 = isnan(1.0) ? _380 : (isnan(_380) ? 1.0 : min(_380, 1.0));
    float _388 = _376 - ((_376 * TEXCOORD_8.x) * _381);
    float _389 = _376 - ((_376 * TEXCOORD_8.y) * _381);
    float _390 = _376 - ((_376 * TEXCOORD_8.z) * _381);
    float _397 = (_388 * (cbMtdParam._m0[17u].x - _276)) + _276;
    float _398 = (_389 * (cbMtdParam._m0[17u].y - _277)) + _277;
    float _399 = (_390 * (cbMtdParam._m0[17u].z - _278)) + _278;
    vec4 _411 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _250) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _251) + cbTextureTilingScale._m0[19u].w));
    float _413 = _411.x;
    float _414 = 1.0 - _413;
    float _444 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_413 - _414) * cbMtdParam._m0[24u].w) + _414) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3428 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
    float _453 = ((((cbMtdParam._m0[10u].x - _397) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _445) + _397;
    float _454 = ((((cbMtdParam._m0[10u].y - _398) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _445) + _398;
    float _455 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _399)) * _445) + _399;
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _250) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _251) + cbTextureTilingScale._m0[15u].w));
    float _476 = (_469.x * 2.0) + (-1.0);
    float _477 = (_469.y * 2.0) + (-1.0);
    float _478 = dot(vec2(_476, _477), vec2(_476, _477));
    float _3439 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _486 = ((_469.z - _300) * _388) + _300;
    float _489 = ((cbMtdParam._m0[23u].y - _486) * _445) + _486;
    vec4 _508 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _250) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _251) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _514 = (_508.x * 2.0) + (-1.0);
    float _515 = (_508.y * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3450 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _531 = ((sqrt(1.0 - (isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0)))) - _314) * _390) + _314;
    float _534 = (((_476 - _305) * _388) + _305) + (cbMtdParam._m0[21u].x * _305);
    float _535 = (((_477 - _307) * _389) + _307) + (cbMtdParam._m0[21u].x * _307);
    float _546 = (((_514 - _534) + (_534 * cbMtdParam._m0[22u].z)) * _445) + _534;
    float _547 = (((_515 - _535) + (_535 * cbMtdParam._m0[22u].z)) * _445) + _535;
    float _548 = (_445 * (sqrt(1.0 - (isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0)))) - _531)) + _531;
    float _550 = cbMtdParam._m0[22u].x + _296.w;
    float _553 = fma(_548, _219, fma(_547, _226, _546 * _212));
    float _556 = fma(_548, _220, fma(_547, _227, _546 * _213));
    float _559 = fma(_548, _221, fma(_547, _228, _546 * _214));
    float _563 = inversesqrt(dot(vec3(_553, _556, _559), vec3(_553, _556, _559)));
    float _564 = _563 * _553;
    float _565 = _563 * _556;
    float _566 = _563 * _559;
    float _3461 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _567 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _3483 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3494 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3505 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _585 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _635 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _625);
    float _636 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _625);
    float _637 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _625);
    float _641 = inversesqrt(dot(vec3(_635, _636, _637), vec3(_635, _636, _637)));
    float _642 = _635 * _641;
    float _643 = _636 * _641;
    float _644 = _637 * _641;
    float _650 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _651 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _672 = fma(_566, cbSceneParam._m0[5u].z, fma(_565, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _564));
    float _675 = fma(_566, cbSceneParam._m0[6u].z, fma(_565, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _564));
    float _678 = fma(_566, cbSceneParam._m0[7u].z, fma(_565, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _564));
    uint _692 = (_231 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _698 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * cbInstanceData._m0[_692].x;
    float _699 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_692].y;
    float _700 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0)))) * cbInstanceData._m0[_692].z;
    float _3516 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _701 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _3527 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _702 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _3538 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _703 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    vec4 _712 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _650, cbSceneParam._m0[86u].y * _651));
    float _716 = ((isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * TEXCOORD_5.w) * _712.x;
    float _717 = dot(vec3(_564, _565, _566), vec3(_642, _643, _644));
    float _720 = _717 * 2.0;
    float _724 = (_720 * _564) - _642;
    float _725 = (_720 * _565) - _643;
    float _726 = (_720 * _566) - _644;
    float _730 = abs(dot(vec3(_642, _643, _644), vec3(_564, _565, _566)));
    float _3549 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _732 = sqrt(_567);
    float _745 = exp2((_732 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_732 * 3.0));
    float _777 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1086;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _811 = fma(_785, cbModelParam._m0[26u].z, fma(_781, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _777));
        float _815 = fma(_785, cbModelParam._m0[27u].z, fma(_781, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _777));
        float _819 = fma(_785, cbModelParam._m0[28u].z, fma(_781, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _777));
        float _844 = _777 + _564;
        float _845 = _781 + _565;
        float _846 = _785 + _566;
        float _856 = fma(_846, cbModelParam._m0[26u].z, fma(_845, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844)) - _811;
        float _857 = fma(_846, cbModelParam._m0[27u].z, fma(_845, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844)) - _815;
        float _858 = fma(_846, cbModelParam._m0[28u].z, fma(_845, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844)) - _819;
        float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
        float _875 = ((_862 * _856) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_811 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _876 = ((_862 * _857) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_815 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_862 * _858) / cbModelParam._m0[34u].z) + ((((((_819 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_875, _876, _877), 0.0);
        float _914 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_880.x + (-0.5));
        float _916 = _914 * (_880.y + (-0.5));
        float _917 = _914 * (_880.z + (-0.5));
        float _924 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_887.x + (-0.5));
        float _926 = _924 * (_887.y + (-0.5));
        float _927 = _924 * (_887.z + (-0.5));
        float _934 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_894.x + (-0.5));
        float _936 = _934 * (_894.y + (-0.5));
        float _937 = _934 * (_894.z + (-0.5));
        float _944 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_901.x + (-0.5));
        float _946 = _944 * (_901.y + (-0.5));
        float _947 = _944 * (_901.z + (-0.5));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = _915 * 0.5;
        float _952 = _925 * 0.5;
        float _953 = _935 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _968 = (dot(vec3(_564, _565, _566), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _978 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3597 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_980 + 1.0))) + _985) * _948;
        float _995 = _916 * 0.5;
        float _996 = _926 * 0.5;
        float _997 = _936 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(_564, _565, _566), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3630 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1022 + 1.0))) + _1027) * _949;
        float _1037 = _917 * 0.5;
        float _1038 = _927 * 0.5;
        float _1039 = _937 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_564, _565, _566), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3663 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_1064 + 1.0))) + _1069) * _950;
        _1086 = _917;
        _1088 = _916;
        _1089 = _915;
        _1090 = _927;
        _1091 = _926;
        _1092 = _925;
        _1093 = _937;
        _1094 = _936;
        _1095 = _935;
        _1096 = _950;
        _1097 = _949;
        _1098 = _948;
        _1099 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1100 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
    }
    else
    {
        _1086 = _1087;
        _1088 = _1087;
        _1089 = _1087;
        _1090 = _1087;
        _1091 = _1087;
        _1092 = _1087;
        _1093 = _1087;
        _1094 = _1087;
        _1095 = _1087;
        _1096 = _1087;
        _1097 = _1087;
        _1098 = _1087;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1126 = fma(_785, cbModelParam._m0[30u].z, fma(_781, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _777));
        float _1130 = fma(_785, cbModelParam._m0[31u].z, fma(_781, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _777));
        float _1134 = fma(_785, cbModelParam._m0[32u].z, fma(_781, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _777));
        float _1157 = _777 + _564;
        float _1158 = _781 + _565;
        float _1159 = _785 + _566;
        float _1169 = fma(_1159, cbModelParam._m0[30u].z, fma(_1158, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1157)) - _1126;
        float _1170 = fma(_1159, cbModelParam._m0[31u].z, fma(_1158, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1157)) - _1130;
        float _1171 = fma(_1159, cbModelParam._m0[32u].z, fma(_1158, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1157)) - _1134;
        float _1175 = inversesqrt(dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171)));
        float _1188 = ((_1175 * _1169) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1126 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1175 * _1170) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1130 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1175 * _1171) / cbModelParam._m0[35u].z) + ((((((_1134 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1188, _1189, _1190), 0.0);
        float _1225 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1192.x + (-0.5));
        float _1227 = _1225 * (_1192.y + (-0.5));
        float _1228 = _1225 * (_1192.z + (-0.5));
        float _1235 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1199.x + (-0.5));
        float _1237 = _1235 * (_1199.y + (-0.5));
        float _1238 = _1235 * (_1199.z + (-0.5));
        float _1245 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1206.x + (-0.5));
        float _1247 = _1245 * (_1206.y + (-0.5));
        float _1248 = _1245 * (_1206.z + (-0.5));
        float _1255 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1213.x + (-0.5));
        float _1257 = _1255 * (_1213.y + (-0.5));
        float _1258 = _1255 * (_1213.z + (-0.5));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = _1226 * 0.5;
        float _1263 = _1236 * 0.5;
        float _1264 = _1246 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_564, _565, _566), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3726 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1289 + 1.0))) + _1294) * _1259;
        float _1304 = _1227 * 0.5;
        float _1305 = _1237 * 0.5;
        float _1306 = _1247 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_564, _565, _566), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3759 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1331 + 1.0))) + _1336) * _1260;
        float _1346 = _1228 * 0.5;
        float _1347 = _1238 * 0.5;
        float _1348 = _1248 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_564, _565, _566), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3792 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1373 + 1.0))) + _1378) * _1261;
        _1395 = _1228;
        _1396 = _1227;
        _1397 = _1226;
        _1398 = _1238;
        _1399 = _1237;
        _1400 = _1236;
        _1401 = _1248;
        _1402 = _1247;
        _1403 = _1246;
        _1404 = _1261;
        _1405 = _1260;
        _1406 = _1259;
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
    }
    else
    {
        _1395 = _1087;
        _1396 = _1087;
        _1397 = _1087;
        _1398 = _1087;
        _1399 = _1087;
        _1400 = _1087;
        _1401 = _1087;
        _1402 = _1087;
        _1403 = _1087;
        _1404 = _1087;
        _1405 = _1087;
        _1406 = _1087;
        _1407 = 0.0;
        _1408 = 0.0;
        _1409 = 0.0;
    }
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1099)) + _1099;
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1100)) + _1100;
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1101)) + _1101;
    float _1442 = fma(_1421, cbSceneParam._m0[89u].z, fma(_1420, cbSceneParam._m0[89u].y, _1419 * cbSceneParam._m0[89u].x));
    float _1445 = fma(_1421, cbSceneParam._m0[90u].z, fma(_1420, cbSceneParam._m0[90u].y, _1419 * cbSceneParam._m0[90u].x));
    float _1448 = fma(_1421, cbSceneParam._m0[91u].z, fma(_1420, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1419));
    float _1463 = _724 * 0.5;
    float _1464 = _725 * 0.5;
    float _1465 = _726 * 0.5;
    float _1466 = dot(vec4(_1463, _1464, _1465, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1469 = dot(vec4(_1463, _1464, _1465, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1472 = dot(vec4(_1463, _1464, _1465, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1506;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1479 = dot(vec4(_1463, _1464, _1465, 1.0), vec4(_1086, _1090, _1093, _1096));
        float _1483 = dot(vec4(_1463, _1464, _1465, 1.0), vec4(_1088, _1091, _1094, _1097));
        float _1487 = dot(vec4(_1463, _1464, _1465, 1.0), vec4(_1089, _1092, _1095, _1098));
        float _1494 = dot(vec4(cbModelParam._m0[39u]), vec4(_1463, _1464, _1465, 1.0));
        _1506 = dot(vec3(isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)), isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1494) ? 0.0 : (isnan(0.0) ? _1494 : max(0.0, _1494))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1506 = 1.0;
    }
    float _1517;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1508 = dot(vec4(cbModelParam._m0[40u]), vec4(_1463, _1464, _1465, 1.0));
        _1517 = dot(vec3(isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1508) ? 0.0 : (isnan(0.0) ? _1508 : max(0.0, _1508))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1517 = 1.0;
    }
    float _1521 = (_1517 * cbModelParam._m0[1u].x) + (_1506 * (1.0 - cbModelParam._m0[1u].x));
    float _1531 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _567);
    float _1532 = isnan(_1531) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1531 : min(cbModelParam._m0[25u].z, _1531));
    float _1613;
    float _1615;
    float _1617;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1580 = fma(_785, cbModelParam._m0[13u].z, fma(_781, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777)) + cbModelParam._m0[13u].w;
        float _1584 = fma(_785, cbModelParam._m0[14u].z, fma(_781, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777)) + cbModelParam._m0[14u].w;
        float _1588 = fma(_785, cbModelParam._m0[15u].z, fma(_781, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777)) + cbModelParam._m0[15u].w;
        float _1591 = fma(_726, cbModelParam._m0[13u].z, fma(_725, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _724));
        float _1594 = fma(_726, cbModelParam._m0[14u].z, fma(_725, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _724));
        float _1597 = fma(_726, cbModelParam._m0[15u].z, fma(_725, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _724));
        float _1625;
        if (_1591 > 0.0)
        {
            _1625 = abs((1.0 - _1580) / _1591);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1580 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1625 = frontier_phi_14_12_ladder;
        }
        float _1828;
        if (_1594 > 0.0)
        {
            _1828 = abs((1.0 - _1584) / _1594);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1584 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1828 = frontier_phi_23_19_ladder;
        }
        float _2071;
        if (_1597 > 0.0)
        {
            _2071 = abs((1.0 - _1588) / _1597);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1588 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2071 = frontier_phi_35_30_ladder;
        }
        float _2073 = isnan(_1828) ? _1625 : (isnan(_1625) ? _1828 : min(_1625, _1828));
        float _2074 = isnan(_2071) ? _2073 : (isnan(_2073) ? _2071 : min(_2073, _2071));
        float _2078 = (_2074 * _1591) + _1580;
        float _2079 = (_2074 * _1594) + _1584;
        float _2080 = (_2074 * _1597) + _1588;
        float _2081 = _2074 * 9.9999997473787516355514526367188e-05;
        float _2083 = (-1.0) - _2081;
        float _2085 = _2081 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2080 > _2085) || ((_2080 < _2083) || ((_2079 > _2085) || ((_2079 < _2083) || ((_2078 < _2083) || (_2078 > _2085))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2204 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2080, cbModelParam._m0[9u].z, fma(_2079, cbModelParam._m0[9u].y, _2078 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2080, cbModelParam._m0[10u].z, fma(_2079, cbModelParam._m0[10u].y, _2078 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2080, cbModelParam._m0[11u].z, fma(_2079, cbModelParam._m0[11u].y, _2078 * cbModelParam._m0[11u].x))), _1532);
            frontier_phi_13_35_ladder = _2204.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2204.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2204.x * cbModelParam._m0[1u].y;
        }
        _1613 = frontier_phi_13_35_ladder_2;
        _1615 = frontier_phi_13_35_ladder_1;
        _1617 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1601 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_724, _725, _726), _1532);
        _1613 = _1601.x * cbModelParam._m0[1u].y;
        _1615 = _1601.y * cbModelParam._m0[1u].y;
        _1617 = _1601.z * cbModelParam._m0[1u].y;
    }
    float _1621 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _567);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1621 : min(cbModelParam._m0[25u].w, _1621));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1676 = fma(_785, cbModelParam._m0[21u].z, fma(_781, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777)) + cbModelParam._m0[21u].w;
        float _1680 = fma(_785, cbModelParam._m0[22u].z, fma(_781, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777)) + cbModelParam._m0[22u].w;
        float _1684 = fma(_785, cbModelParam._m0[23u].z, fma(_781, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777)) + cbModelParam._m0[23u].w;
        float _1687 = fma(_726, cbModelParam._m0[21u].z, fma(_725, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _724));
        float _1690 = fma(_726, cbModelParam._m0[22u].z, fma(_725, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _724));
        float _1693 = fma(_726, cbModelParam._m0[23u].z, fma(_725, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _724));
        float _1833;
        if (_1687 > 0.0)
        {
            _1833 = abs((1.0 - _1676) / _1687);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1676 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1833 = frontier_phi_25_21_ladder;
        }
        float _2098;
        if (_1690 > 0.0)
        {
            _2098 = abs((1.0 - _1680) / _1690);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1680 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2098 = frontier_phi_37_32_ladder;
        }
        float _2303;
        if (_1693 > 0.0)
        {
            _2303 = abs((1.0 - _1684) / _1693);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1684 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2303 = frontier_phi_46_43_ladder;
        }
        float _2305 = isnan(_2098) ? _1833 : (isnan(_1833) ? _2098 : min(_1833, _2098));
        float _2306 = isnan(_2303) ? _2305 : (isnan(_2305) ? _2303 : min(_2305, _2303));
        float _2310 = (_2306 * _1687) + _1676;
        float _2311 = (_2306 * _1690) + _1680;
        float _2312 = (_2306 * _1693) + _1684;
        float _2313 = _2306 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2313;
        float _2316 = _2313 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2312 > _2316) || ((_2312 < _2314) || ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 < _2314) || (_2310 > _2316))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2511 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2312, cbModelParam._m0[17u].z, fma(_2311, cbModelParam._m0[17u].y, _2310 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2312, cbModelParam._m0[18u].z, fma(_2311, cbModelParam._m0[18u].y, _2310 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2312, cbModelParam._m0[19u].z, fma(_2311, cbModelParam._m0[19u].y, _2310 * cbModelParam._m0[19u].x))), _1622);
            frontier_phi_22_46_ladder = _2511.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2511.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2511.x * cbModelParam._m0[1u].z;
        }
        _1712 = frontier_phi_22_46_ladder_2;
        _1714 = frontier_phi_22_46_ladder_1;
        _1716 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_724, _725, _726), _1622);
        _1712 = _1696.x * cbModelParam._m0[1u].z;
        _1714 = _1696.y * cbModelParam._m0[1u].z;
        _1716 = _1696.z * cbModelParam._m0[1u].z;
    }
    float _1728 = ((((1.0 - _745) * ((_732 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_745 * _732)) * _716;
    float _1729 = _1728 * ((cbModelParam._m0[1u].w * (_1712 - _1613)) + _1613);
    float _1730 = _1728 * ((cbModelParam._m0[1u].w * (_1714 - _1615)) + _1615);
    float _1731 = _1728 * ((cbModelParam._m0[1u].w * (_1716 - _1617)) + _1617);
    float _1734 = fma(_1731, cbSceneParam._m0[89u].z, fma(_1730, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1731, cbSceneParam._m0[90u].z, fma(_1730, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1731, cbSceneParam._m0[91u].z, fma(_1730, cbSceneParam._m0[91u].y, _1729 * cbSceneParam._m0[91u].x));
    uvec4 _1750 = floatBitsToUint(cbInstanceData._m0[_231 + 5u]);
    uint _1752 = _1750.x * 14u;
    uint _1753 = _1752 + 13u;
    float _1760 = _716 + (-1.0);
    float _1765 = (cbLight._m0[_1753].x * _1760) + 1.0;
    float _1766 = (cbLight._m0[_1753].y * _1760) + 1.0;
    float _1767 = (cbLight._m0[_1753].z * _1760) + 1.0;
    float _1768 = (cbLight._m0[_1753].w * _1760) + 1.0;
    uint _1769 = _1752 + 5u;
    float _1775 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    uint _1779 = _1752 + 4u;
    float _1786 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
    uint _1790 = _1752 | 1u;
    float _1801 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_564, _565, _566));
    float _1804 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_564, _565, _566));
    float _3928 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _3939 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1809 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.3183098733425140380859375;
    float _1811 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * 0.3183098733425140380859375;
    float _1818 = ((cbLight._m0[_1769].x * _1775) * _1811) + ((cbLight._m0[_1779].x * _1786) * _1809);
    float _1819 = ((_1775 * cbLight._m0[_1769].y) * _1811) + ((_1786 * cbLight._m0[_1779].y) * _1809);
    float _1820 = ((_1775 * cbLight._m0[_1769].z) * _1811) + ((_1786 * cbLight._m0[_1779].z) * _1809);
    uvec4 _1825 = floatBitsToUint(cbLight._m0[_1752 + 12u]);
    bool _1827 = _1825.x == 0u;
    float _1838;
    float _1840;
    float _1842;
    if (_1827)
    {
        _1838 = _1818;
        _1840 = _1819;
        _1842 = _1820;
    }
    else
    {
        uint _1846 = _1752 + 6u;
        float _1862 = (dot(vec3(cbLight._m0[_1752 + 2u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _1863 = _1862 * _1862;
        float _3950 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1865 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _1838 = (((cbLight._m0[_1846].x * 0.3183098733425140380859375) * _1864) * _1865) + _1818;
        _1840 = (((cbLight._m0[_1846].y * 0.3183098733425140380859375) * _1864) * _1865) + _1819;
        _1842 = (((cbLight._m0[_1846].z * 0.3183098733425140380859375) * _1864) * _1865) + _1820;
    }
    bool _1845 = _1825.y == 0u;
    float _1883;
    float _1885;
    float _1887;
    if (_1845)
    {
        _1883 = _1838;
        _1885 = _1840;
        _1887 = _1842;
    }
    else
    {
        uint _2042 = _1752 + 7u;
        float _2058 = (dot(vec3(cbLight._m0[_1752 + 3u].xyz), vec3(_564, _565, _566)) * 0.5) + 0.5;
        float _2059 = _2058 * _2058;
        float _3966 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        float _2060 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _2061 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _1883 = (((cbLight._m0[_2042].x * 0.3183098733425140380859375) * _2060) * _2061) + _1838;
        _1885 = (((cbLight._m0[_2042].y * 0.3183098733425140380859375) * _2060) * _2061) + _1840;
        _1887 = (((cbLight._m0[_2042].z * 0.3183098733425140380859375) * _2060) * _2061) + _1842;
    }
    uint _1890 = _1752 + 8u;
    float _1903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1752].w)) * _567) * 0.949999988079071044921875);
    float _1904 = _1903 * _1903;
    float _1905 = cbLight._m0[_1752].x + _642;
    float _1906 = cbLight._m0[_1752].y + _643;
    float _1907 = cbLight._m0[_1752].z + _644;
    float _1911 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
    float _1912 = _1911 * _1905;
    float _1913 = _1911 * _1906;
    float _1914 = _1911 * _1907;
    float _1915 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_1752].xyz));
    float _3982 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _3993 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _1919 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _1920 = dot(vec3(_564, _565, _566), vec3(_1912, _1913, _1914));
    float _4004 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _1924 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_1912, _1913, _1914));
    float _4015 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1928 = _1904 * _1904;
    float _1932 = ((_1923 * _1923) * (_1928 + (-1.0))) + 1.0;
    float _1943 = (exp2(log2(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1944 = 1.0 - _1904;
    float _1955 = (0.5 / (((_1919 * ((_1918 * _1944) + _1904)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _1944) + _1904) * _1918))) * _1918;
    float _4026 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1957 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1928 / ((_1932 * _1932) * 3.141590118408203125));
    uint _1968 = _1752 + 9u;
    float _1979 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * _567) * 0.949999988079071044921875);
    float _1980 = _1979 * _1979;
    float _1981 = cbLight._m0[_1790].x + _642;
    float _1982 = cbLight._m0[_1790].y + _643;
    float _1983 = cbLight._m0[_1790].z + _644;
    float _1987 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
    float _1988 = _1987 * _1981;
    float _1989 = _1987 * _1982;
    float _1990 = _1987 * _1983;
    float _1991 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_1790].xyz));
    float _4037 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1994 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _1995 = dot(vec3(_564, _565, _566), vec3(_1988, _1989, _1990));
    float _4048 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _1999 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1988, _1989, _1990));
    float _4059 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2003 = _1980 * _1980;
    float _2007 = ((_1998 * _1998) * (_2003 + (-1.0))) + 1.0;
    float _2016 = (exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2017 = 1.0 - _1980;
    float _2027 = (0.5 / (((_1919 * ((_1994 * _2017) + _1980)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2017) + _1980) * _1994))) * _1994;
    float _4070 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2029 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2003 / ((_2007 * _2007) * 3.141590118408203125));
    float _2039 = (((_2016 * cbLight._m0[_1968].x) * _2029) * _1775) + (((_1943 * cbLight._m0[_1890].x) * _1957) * _1786);
    float _2040 = (((_2016 * cbLight._m0[_1968].y) * _2029) * _1775) + (((_1943 * cbLight._m0[_1890].y) * _1957) * _1786);
    float _2041 = (((_2016 * cbLight._m0[_1968].z) * _2029) * _1775) + (((_1943 * cbLight._m0[_1890].z) * _1957) * _1786);
    float _2103;
    float _2105;
    float _2107;
    if (_1827)
    {
        _2103 = _2039;
        _2105 = _2040;
        _2107 = _2041;
    }
    else
    {
        uint _2109 = _1752 + 2u;
        uint _2113 = _1752 + 10u;
        float _2127 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2109].w)) * _567) * 0.949999988079071044921875);
        float _2128 = _2127 * _2127;
        float _2129 = cbLight._m0[_2109].x + _642;
        float _2130 = cbLight._m0[_2109].y + _643;
        float _2131 = cbLight._m0[_2109].z + _644;
        float _2135 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
        float _2136 = _2135 * _2129;
        float _2137 = _2135 * _2130;
        float _2138 = _2135 * _2131;
        float _2139 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2109].xyz));
        float _4081 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2142 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _2143 = dot(vec3(_564, _565, _566), vec3(_2136, _2137, _2138));
        float _4092 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _2147 = dot(vec3(cbLight._m0[_2109].xyz), vec3(_2136, _2137, _2138));
        float _4103 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2151 = _2128 * _2128;
        float _2155 = ((_2146 * _2146) * (_2151 + (-1.0))) + 1.0;
        float _2164 = (exp2(log2(1.0 - (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2165 = 1.0 - _2128;
        float _2175 = (0.5 / (((_1919 * ((_2142 * _2165) + _2128)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2165) + _2128) * _2142))) * _2142;
        float _4114 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
        float _2177 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2151 / ((_2155 * _2155) * 3.141590118408203125));
        float _2178 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _2103 = (((_2164 * cbLight._m0[_2113].x) * _2177) * _2178) + _2039;
        _2105 = (((_2164 * cbLight._m0[_2113].y) * _2177) * _2178) + _2040;
        _2107 = (((_2164 * cbLight._m0[_2113].z) * _2177) * _2178) + _2041;
    }
    float _2213;
    float _2215;
    float _2217;
    if (_1845)
    {
        _2213 = _2103;
        _2215 = _2105;
        _2217 = _2107;
    }
    else
    {
        uint _2224 = _1752 + 3u;
        uint _2228 = _1752 + 11u;
        float _2242 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2224].w)) * _567) * 0.949999988079071044921875);
        float _2243 = _2242 * _2242;
        float _2244 = cbLight._m0[_2224].x + _642;
        float _2245 = cbLight._m0[_2224].y + _643;
        float _2246 = cbLight._m0[_2224].z + _644;
        float _2250 = inversesqrt(dot(vec3(_2244, _2245, _2246), vec3(_2244, _2245, _2246)));
        float _2251 = _2250 * _2244;
        float _2252 = _2250 * _2245;
        float _2253 = _2250 * _2246;
        float _2254 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_2224].xyz));
        float _4130 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2257 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _2258 = dot(vec3(_564, _565, _566), vec3(_2251, _2252, _2253));
        float _4141 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2261 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _2262 = dot(vec3(cbLight._m0[_2224].xyz), vec3(_2251, _2252, _2253));
        float _4152 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2266 = _2243 * _2243;
        float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
        float _2279 = (exp2(log2(1.0 - (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2280 = 1.0 - _2243;
        float _2290 = (0.5 / (((_1919 * ((_2257 * _2280) + _2243)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2280) + _2243) * _2257))) * _2257;
        float _4163 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2292 = (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
        float _2293 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
        _2213 = (((_2279 * cbLight._m0[_2228].x) * _2292) * _2293) + _2103;
        _2215 = (((_2279 * cbLight._m0[_2228].y) * _2292) * _2293) + _2105;
        _2217 = (((_2279 * cbLight._m0[_2228].z) * _2292) * _2293) + _2107;
    }
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    if (_1750.y == 0u)
    {
        float _2368 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2369 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2368;
        float _2370 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2368;
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2368;
        uvec4 _2383 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2384 = _2383.x;
        uint _2395 = uint((float(_2383.y) * floor(float(uint(cbSceneParam._m0[85u].y * _651) / _2384))) + floor(float(uint(cbSceneParam._m0[85u].x * _650) / _2384)));
        float _2405 = (log2(_2371 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2406 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        uint _2409 = uint(isnan(14.0) ? _2406 : (isnan(_2406) ? 14.0 : min(_2406, 14.0)));
        uvec4 _2414 = texelFetch(g_lightClusterGridBuffer, int(((_2409 << 2u) + (_2395 << 6u)) >> 2u));
        uint _2415 = _2414.x;
        uint _2416 = _2383.z;
        float _2516;
        float _2518;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        if (((((1u << ((_2416 >> 4u) & 15u)) + 4294967295u) & _2415) == 0u) || ((_2416 & 240u) == 0u))
        {
            _2516 = 0.0;
            _2518 = 0.0;
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
        }
        else
        {
            float _2517;
            float _2519;
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2660 = 0.0;
            float _2661 = 0.0;
            float _2662 = 0.0;
            float _2663 = 0.0;
            float _2664 = 0.0;
            float _2665 = 0.0;
            uint _2666 = 0u;
            uint _2675;
            bool _2676;
            for (;;)
            {
                _2675 = texelFetch(g_lightClassification, int((((_2409 << 5u) + (_2395 << 9u)) + (_2666 << 2u)) >> 2u)).x;
                _2676 = _2675 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2676)
                {
                    frontier_phi_61_pred = _2660;
                    frontier_phi_61_pred_1 = _2665;
                    frontier_phi_61_pred_2 = _2664;
                    frontier_phi_61_pred_3 = _2663;
                    frontier_phi_61_pred_4 = _2662;
                    frontier_phi_61_pred_5 = _2661;
                }
                else
                {
                    float _2784;
                    float _2785;
                    float _2786;
                    float _2787;
                    float _2788;
                    float _2789;
                    uint _2790;
                    _2784 = _2660;
                    _2785 = _2661;
                    _2786 = _2662;
                    _2787 = _2663;
                    _2788 = _2664;
                    _2789 = _2665;
                    _2790 = _2675;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    for (;;)
                    {
                        uint _2794 = uint(findLSB(_2790)) + (_2666 << 5u);
                        uint _2791 = (_2790 + 4294967295u) & _2790;
                        uint _2796 = _2794 * 48u;
                        vec4 _2810 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2796)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2796 + 3u)).x));
                        uint _2816 = (_2794 * 48u) + 4u;
                        vec4 _2829 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2816)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 3u)).x));
                        uint _2835 = (_2794 * 48u) + 8u;
                        vec3 _2846 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2835)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2835 + 2u)).x));
                        float _2850 = _2810.x - _2369;
                        float _2851 = _2810.y - _2370;
                        float _2852 = _2810.z - _2371;
                        float _2853 = dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852));
                        float _2856 = inversesqrt(_2853);
                        float _2857 = _2856 * _2850;
                        float _2858 = _2856 * _2851;
                        float _2859 = _2856 * _2852;
                        float _2860 = dot(vec3(_672, _675, _678), vec3(_2857, _2858, _2859));
                        float _2865 = 1.0 - (_2853 * _2810.w);
                        float _4189 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2866 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                        float _2867 = sqrt(_2853) * _2829.w;
                        float _2870 = 1.39999997615814208984375 / (_2867 + 1.39999997615814208984375);
                        float _2871 = _2870 * _2870;
                        float _2874 = ((1.0 - _2871) * _2860) + _2871;
                        float _2877 = _2867 * _2867;
                        float _2881 = ((isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0))) * _2866) / ((_2877 * 0.699999988079071044921875) + 1.0);
                        float _2885 = (-0.0) - _2369;
                        float _2886 = (-0.0) - _2370;
                        float _2887 = (-0.0) - _2371;
                        float _2891 = inversesqrt(dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887)));
                        float _2892 = _2891 * _2885;
                        float _2893 = _2891 * _2886;
                        float _2894 = _2891 * _2887;
                        float _2902 = exp2(log2(1.0 / ((_2877 * 3.5) + 5.0)) * 0.25);
                        float _2903 = 1.0 - _732;
                        float _2910 = sqrt(1.0 - ((1.0 - (_2903 * _2903)) * (1.0 - (_2902 * _2902))));
                        float _2911 = _2910 * _2910;
                        float _2912 = _2911 * _2911;
                        float _2913 = _2892 + _2857;
                        float _2914 = _2893 + _2858;
                        float _2915 = _2894 + _2859;
                        float _2919 = inversesqrt(dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915)));
                        float _2923 = dot(vec3(_672, _675, _678), vec3(_2892, _2893, _2894));
                        float _4205 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
                        float _2926 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                        float _2927 = dot(vec3(_672, _675, _678), vec3(_2919 * _2913, _2919 * _2914, _2919 * _2915));
                        float _4216 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2930 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                        float _2934 = ((_2930 * _2930) * (_2912 + (-1.0))) + 1.0;
                        float _2935 = _2870 * _2911;
                        float _2936 = _2935 * _2935;
                        float _2939 = ((1.0 - _2936) * _2860) + _2936;
                        float _4227 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
                        float _2941 = 1.0 - _2911;
                        float _2951 = (0.5 / (((_2940 * ((_2926 * _2941) + _2911)) + 9.9999999392252902907785028219223e-09) + (((_2940 * _2941) + _2911) * _2926))) * _2940;
                        float _4238 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2962 = (((_2912 * 3.1415927410125732421875) * (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) / ((_2934 * _2934) * ((_2877 * 2.1991131305694580078125) + 3.141590118408203125))) * _2866;
                        _2719 = (_2881 * _2829.x) + _2787;
                        _2720 = (_2881 * _2829.y) + _2788;
                        _2721 = (_2881 * _2829.z) + _2789;
                        _2716 = (_2962 * _2846.x) + _2784;
                        _2717 = (_2962 * _2846.y) + _2785;
                        _2718 = (_2962 * _2846.z) + _2786;
                        if (_2791 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2784 = _2716;
                            _2785 = _2717;
                            _2786 = _2718;
                            _2787 = _2719;
                            _2788 = _2720;
                            _2789 = _2721;
                            _2790 = _2791;
                        }
                    }
                    frontier_phi_61_pred = _2716;
                    frontier_phi_61_pred_1 = _2721;
                    frontier_phi_61_pred_2 = _2720;
                    frontier_phi_61_pred_3 = _2719;
                    frontier_phi_61_pred_4 = _2718;
                    frontier_phi_61_pred_5 = _2717;
                }
                _2517 = frontier_phi_61_pred;
                _2527 = frontier_phi_61_pred_1;
                _2525 = frontier_phi_61_pred_2;
                _2523 = frontier_phi_61_pred_3;
                _2521 = frontier_phi_61_pred_4;
                _2519 = frontier_phi_61_pred_5;
                uint _2667 = _2666 + 1u;
                if (_2667 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2660 = _2517;
                    _2661 = _2519;
                    _2662 = _2521;
                    _2663 = _2523;
                    _2664 = _2525;
                    _2665 = _2527;
                    _2666 = _2667;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2516 = _2517;
            _2518 = _2519;
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
        }
        uvec4 _2530 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2531 = _2530.z;
        uint _2533 = (_2531 >> 8u) & 15u;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        if (((4294967295u << _2533) & _2415) == 0u)
        {
            _2628 = _2516;
            _2630 = _2518;
            _2632 = _2520;
            _2634 = _2522;
            _2636 = _2524;
            _2638 = _2526;
        }
        else
        {
            float _2653 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
            float _2654 = _2653 * _2369;
            float _2655 = _2653 * _2370;
            float _2656 = _2653 * _2371;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2533 < ((_2531 >> 12u) & 15u))
            {
                float _2629;
                float _2631;
                float _2633;
                float _2635;
                float _2637;
                float _2639;
                float _2767 = _2516;
                float _2768 = _2518;
                float _2769 = _2520;
                float _2770 = _2522;
                float _2771 = _2524;
                float _2772 = _2526;
                uint _2773 = _2533;
                uint _2782;
                bool _2783;
                for (;;)
                {
                    _2782 = texelFetch(g_lightClassification, int((((_2409 << 5u) + (_2395 << 9u)) + (_2773 << 2u)) >> 2u)).x;
                    _2783 = _2782 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2783)
                    {
                        frontier_phi_67_pred = _2770;
                        frontier_phi_67_pred_1 = _2771;
                        frontier_phi_67_pred_2 = _2772;
                        frontier_phi_67_pred_3 = _2769;
                        frontier_phi_67_pred_4 = _2768;
                        frontier_phi_67_pred_5 = _2767;
                    }
                    else
                    {
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _2980 = _2767;
                        float _2981 = _2768;
                        float _2982 = _2769;
                        float _2983 = _2770;
                        float _2984 = _2771;
                        float _2985 = _2772;
                        uint _2986 = _2782;
                        uint _2987;
                        vec4 _3012;
                        float _3013;
                        vec4 _3028;
                        vec3 _3040;
                        vec4 _3056;
                        vec4 _3072;
                        float _3118;
                        bool _3119;
                        for (;;)
                        {
                            uint _2997 = ((_2773 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2986));
                            _2987 = (_2986 + 4294967295u) & _2986;
                            uint _2999 = _2997 * 40u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            _3013 = _3012.w;
                            uint _3015 = (_2997 * 40u) + 4u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3030 = (_2997 * 40u) + 8u;
                            _3040 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x));
                            uint _3043 = (_2997 * 40u) + 16u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            uint _3059 = (_2997 * 40u) + 20u;
                            _3072 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 3u)).x));
                            uint _3074 = (_2997 * 40u) + 24u;
                            vec4 _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3093 = (_2997 * 40u) + 28u;
                            vec4 _3106 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 3u)).x));
                            _3118 = fma(_2371, _3106.z, fma(_2370, _3106.y, _3106.x * _2369)) + _3106.w;
                            _3119 = !((fma(_2371, _3087.z, fma(_2370, _3087.y, _3087.x * _2369)) + _3087.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3119)
                            {
                                float _3146 = _3012.x - _2369;
                                float _3147 = _3012.y - _2370;
                                float _3148 = _3012.z - _2371;
                                float _3149 = dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148));
                                float _3152 = inversesqrt(_3149);
                                float _3153 = _3152 * _3146;
                                float _3154 = _3152 * _3147;
                                float _3155 = _3152 * _3148;
                                float _3159 = 1.0 - (_3149 / (_3013 * _3013));
                                float _4249 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                                float _3160 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                                float _3164 = sqrt(_3149) * _3028.w;
                                float _3166 = 1.39999997615814208984375 / (_3164 + 1.39999997615814208984375);
                                float _3167 = _3166 * _3166;
                                float _3170 = ((1.0 - _3167) * dot(vec3(_3153, _3154, _3155), vec3(_672, _675, _678))) + _3167;
                                float _3173 = _3164 * _3164;
                                float _3177 = (fma(_2371, _3056.z, fma(_2370, _3056.y, _3056.x * _2369)) + _3056.w) / _3118;
                                float _3178 = (fma(_2371, _3072.z, fma(_2370, _3072.y, _3072.x * _2369)) + _3072.w) / _3118;
                                float _3182 = 1.0 - dot(vec2(_3177, _3178), vec2(_3177, _3178));
                                float _4265 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3183 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3184 = _3183 * (((isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0))) * _3160) / ((_3173 * 0.699999988079071044921875) + 1.0));
                                float _3196 = exp2(log2(1.0 / ((_3173 * 3.5) + 5.0)) * 0.25);
                                float _3197 = 1.0 - _732;
                                float _3204 = sqrt(1.0 - ((1.0 - (_3197 * _3197)) * (1.0 - (_3196 * _3196))));
                                float _3205 = _3204 * _3204;
                                float _3206 = _3205 * _3205;
                                float _3207 = _3153 - _2654;
                                float _3208 = _3154 - _2655;
                                float _3209 = _3155 - _2656;
                                float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                                float _3217 = dot(vec3(_672, _675, _678), vec3((-0.0) - _2654, (-0.0) - _2655, (-0.0) - _2656));
                                float _4276 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                                float _3220 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
                                float _3221 = dot(vec3(_672, _675, _678), vec3(_3213 * _3207, _3213 * _3208, _3213 * _3209));
                                float _4287 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3224 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
                                float _3228 = ((_3224 * _3224) * (_3206 + (-1.0))) + 1.0;
                                float _3229 = _3166 * _3205;
                                float _3230 = _3229 * _3229;
                                float _3236 = ((1.0 - _3230) * dot(vec3(_672, _675, _678), vec3(_3153, _3154, _3155))) + _3230;
                                float _4298 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3237 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3238 = 1.0 - _3205;
                                float _3248 = (0.5 / (((_3237 * ((_3220 * _3238) + _3205)) + 9.9999999392252902907785028219223e-09) + (((_3237 * _3238) + _3205) * _3220))) * _3237;
                                float _4309 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3258 = (_3183 * _3160) * (((_3206 * 3.1415927410125732421875) * (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) / ((_3228 * _3228) * ((_3173 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3258 * _3040.x;
                                frontier_phi_73_pred_1 = _3258 * _3040.y;
                                frontier_phi_73_pred_2 = _3184 * _3028.z;
                                frontier_phi_73_pred_3 = _3184 * _3028.y;
                                frontier_phi_73_pred_4 = _3184 * _3028.x;
                                frontier_phi_73_pred_5 = _3258 * _3040.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3262 = frontier_phi_73_pred;
                            _3263 = frontier_phi_73_pred_1;
                            _3267 = frontier_phi_73_pred_2;
                            _3266 = frontier_phi_73_pred_3;
                            _3265 = frontier_phi_73_pred_4;
                            _3264 = frontier_phi_73_pred_5;
                            _2970 = _3265 + _2983;
                            _2971 = _3266 + _2984;
                            _2972 = _3267 + _2985;
                            _2967 = _3262 + _2980;
                            _2968 = _3263 + _2981;
                            _2969 = _3264 + _2982;
                            if (_2987 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2980 = _2967;
                                _2981 = _2968;
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2987;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2970;
                        frontier_phi_67_pred_1 = _2971;
                        frontier_phi_67_pred_2 = _2972;
                        frontier_phi_67_pred_3 = _2969;
                        frontier_phi_67_pred_4 = _2968;
                        frontier_phi_67_pred_5 = _2967;
                    }
                    _2635 = frontier_phi_67_pred;
                    _2637 = frontier_phi_67_pred_1;
                    _2639 = frontier_phi_67_pred_2;
                    _2633 = frontier_phi_67_pred_3;
                    _2631 = frontier_phi_67_pred_4;
                    _2629 = frontier_phi_67_pred_5;
                    uint _2774 = _2773 + 1u;
                    if (_2774 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2767 = _2629;
                        _2768 = _2631;
                        _2769 = _2633;
                        _2770 = _2635;
                        _2771 = _2637;
                        _2772 = _2639;
                        _2773 = _2774;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2637;
                frontier_phi_55_56_ladder_1 = _2639;
                frontier_phi_55_56_ladder_2 = _2635;
                frontier_phi_55_56_ladder_3 = _2633;
                frontier_phi_55_56_ladder_4 = _2631;
                frontier_phi_55_56_ladder_5 = _2629;
            }
            else
            {
                frontier_phi_55_56_ladder = _2524;
                frontier_phi_55_56_ladder_1 = _2526;
                frontier_phi_55_56_ladder_2 = _2522;
                frontier_phi_55_56_ladder_3 = _2520;
                frontier_phi_55_56_ladder_4 = _2518;
                frontier_phi_55_56_ladder_5 = _2516;
            }
            _2628 = frontier_phi_55_56_ladder_5;
            _2630 = frontier_phi_55_56_ladder_4;
            _2632 = frontier_phi_55_56_ladder_3;
            _2634 = frontier_phi_55_56_ladder_2;
            _2636 = frontier_phi_55_56_ladder;
            _2638 = frontier_phi_55_56_ladder_1;
        }
        float _2643 = isnan(1.0) ? _716 : (isnan(_716) ? 1.0 : min(_716, 1.0));
        _2428 = (_2643 * _2634) + _1883;
        _2430 = (_2643 * _2636) + _1885;
        _2432 = (_2643 * _2638) + _1887;
        _2434 = ((_2628 * 0.039999999105930328369140625) * _2643) + _2213;
        _2436 = ((_2630 * 0.039999999105930328369140625) * _2643) + _2215;
        _2438 = ((_2632 * 0.039999999105930328369140625) * _2643) + _2217;
    }
    else
    {
        _2428 = _1883;
        _2430 = _1885;
        _2432 = _1887;
        _2434 = _2213;
        _2436 = _2215;
        _2438 = _2217;
    }
    float _4325 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4336 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _4347 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    uint _2458 = _231 + 6u;
    float _2466 = _650 / cbSceneParam._m0[86u].x;
    float _2467 = _651 / cbSceneParam._m0[86u].y;
    vec4 _2481 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2466, _2467, (log2((isnan(cbSceneParam._m0[77u].w) ? _585 : (isnan(_585) ? cbSceneParam._m0[77u].w : min(_585, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2483 = _2481.x;
    float _2484 = _2481.y;
    float _2485 = _2481.z;
    float _2486 = _2481.w;
    float _2578;
    float _2580;
    float _2582;
    float _2584;
    if (_585 > cbSceneParam._m0[78u].w)
    {
        float _2541 = isnan(_585) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _585 : min(cbSceneParam._m0[80u].w, _585));
        float _2542 = _2541 / _585;
        float _2553 = _2542 * _635;
        float _2554 = _636 * _2542;
        float _2555 = (-0.0) - _2554;
        float _2556 = _2542 * _637;
        float _2558 = (cbSceneParam._m0[77u].w * _2555) / _2541;
        float _2559 = _2558 + cbSceneParam._m0[79u].w;
        float _2560 = cbSceneParam._m0[79u].w - _2554;
        float _2566 = sqrt(((_2553 * _2553) + (_2554 * _2554)) + (_2556 * _2556));
        float _2569 = (1.0 - (cbSceneParam._m0[77u].w / _2541)) * _2566;
        float _2574 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2576 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2729;
        if (abs((_2555 - _2558) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2729 = ((((_2559 > 0.0) ? exp2(_2574 * _2559) : (2.0 - exp2(_2576 * _2559))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2569;
        }
        else
        {
            float _2689 = 1.0 / cbSceneParam._m0[80u].x;
            float _2690 = isnan(_2560) ? _2559 : (isnan(_2559) ? _2560 : max(_2559, _2560));
            float _2691 = isnan(_2560) ? _2559 : (isnan(_2559) ? _2560 : min(_2559, _2560));
            float _2700 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : min(_2690, 0.0));
            float _2701 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : min(_2691, 0.0));
            _2729 = ((abs(_2566 / _2555) * cbSceneParam._m0[80u].y) * ((((_2700 - _2701) * 2.0) - ((exp2(_2574 * (isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0)))) - exp2(_2574 * (isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0))))) * _2689)) - ((exp2(_2576 * _2700) - exp2(_2576 * _2701)) * _2689))) + (_2569 * cbSceneParam._m0[80u].z);
        }
        vec4 _2731 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2466, _2467, 1.0), 0.0);
        float _2740 = exp2((_2729 * (-1.44269502162933349609375)) * (1.0 - _2731.w));
        float _2741 = log2(_2740);
        float _2757 = log2(_2486);
        _2578 = (exp2(_2757 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2741 * cbSceneParam._m0[78u].x)) * _2731.x) / cbSceneParam._m0[78u].x)) + _2483;
        _2580 = (exp2(_2757 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2741 * cbSceneParam._m0[78u].y)) * _2731.y) / cbSceneParam._m0[78u].y)) + _2484;
        _2582 = (exp2(_2757 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2741 * cbSceneParam._m0[78u].z)) * _2731.z) / cbSceneParam._m0[78u].z)) + _2485;
        _2584 = _2740 * _2486;
    }
    else
    {
        _2578 = _2483;
        _2580 = _2484;
        _2582 = _2485;
        _2584 = _2486;
    }
    float _2596 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2597 = _2596 == 3.0;
    float _2598 = log2(_2584);
    float _2605 = exp2(_2598 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2428 + ((isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))) * _716))) + ((_2434 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1521)) * cbPerFrame._m0[3u].x));
    float _2606 = exp2(_2598 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2430 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _716))) + ((_2436 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1521)) * cbPerFrame._m0[3u].x));
    float _2607 = exp2(_2598 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2432 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _716))) + ((_2438 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1521)) * cbPerFrame._m0[3u].x));
    float _2616 = (_2596 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2616 * (_2597 ? _2605 : (_2605 + (cbSceneParam._m0[72u].w * _2578)));
    SV_Target.y = _2616 * (_2597 ? _2606 : (_2606 + (cbSceneParam._m0[72u].w * _2580)));
    SV_Target.z = _2616 * (_2597 ? _2607 : (_2607 + (cbSceneParam._m0[72u].w * _2582)));
    SV_Target.w = cbInstanceData._m0[_2458].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2458].w;
}


