#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1102;
float _3749;
float _3750;
float _3751;
float _3752;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3761 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3772 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3783 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _284) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _285) + cbTextureTilingScale._m0[13u].w));
    vec4 _321 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _326 = _321.x * cbMtdParam._m0[9u].x;
    float _327 = _321.y * cbMtdParam._m0[9u].y;
    float _328 = _321.z * cbMtdParam._m0[9u].z;
    float _332 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _298.x) * _326;
    float _335 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _298.y) * _327;
    float _338 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _298.z) * _328;
    float _345 = ((_326 - _332) * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) + _332;
    float _346 = ((_327 - _335) * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) + _335;
    float _347 = ((_328 - _338) * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) + _338;
    vec4 _360 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _284) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _285) + cbTextureTilingScale._m0[20u].w));
    vec4 _386 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _390 = _386.z;
    float _394 = (_386.x * 2.0) + (-1.0);
    float _395 = (_386.y * 2.0) + (-1.0);
    float _396 = dot(vec2(_394, _395), vec2(_394, _395));
    float _3794 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _401 = sqrt(1.0 - (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))));
    float _406 = _394 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_360.x * 2.0) + (-1.0)));
    float _407 = _395 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_360.y * 2.0) + (-1.0)));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _422 = _420.x;
    float _423 = 1.0 - _422;
    float _454 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_422 - _423) * cbMtdParam._m0[24u].w) + _423) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3805 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _463 = ((((cbMtdParam._m0[10u].x - _345) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _455) + _345;
    float _464 = ((((cbMtdParam._m0[10u].y - _346) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _455) + _346;
    float _465 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _347)) * _455) + _347;
    float _470 = (((_360.z - _390) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _390;
    float _474 = ((cbMtdParam._m0[23u].y - _470) * _455) + _470;
    vec4 _496 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _502 = (_496.x * 2.0) + (-1.0);
    float _503 = (_496.y * 2.0) + (-1.0);
    float _504 = dot(vec2(_502, _503), vec2(_502, _503));
    float _3816 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _520 = (_455 * (((cbMtdParam._m0[22u].z * _406) - _406) + _502)) + _406;
    float _521 = (_455 * (((cbMtdParam._m0[22u].z * _407) - _407) + _503)) + _407;
    float _522 = (_455 * (sqrt(1.0 - (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) - _401)) + _401;
    float _524 = cbMtdParam._m0[22u].x + _386.w;
    float _527 = fma(_522, _233 * NORMAL.x, fma(_521, _240 * TANGENT.x, (_226 * _218) * _520));
    float _530 = fma(_522, _233 * NORMAL.y, fma(_521, _240 * TANGENT.y, (_226 * _219) * _520));
    float _533 = fma(_522, _233 * NORMAL.z, fma(_521, _240 * TANGENT.z, (_226 * _220) * _520));
    float _537 = inversesqrt(dot(vec3(_527, _530, _533), vec3(_527, _530, _533)));
    float _538 = _537 * _527;
    float _539 = _537 * _530;
    float _540 = _537 * _533;
    float _3827 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _541 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3849 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3860 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _3871 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _559 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _610 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _600);
    float _611 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _600);
    float _612 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _600);
    float _616 = inversesqrt(dot(vec3(_610, _611, _612), vec3(_610, _611, _612)));
    float _617 = _610 * _616;
    float _618 = _611 * _616;
    float _619 = _612 * _616;
    vec4 _624 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _626 = _624.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _783 = sqrt(((_610 * _610) + (_611 * _611)) + (_612 * _612));
        float _789 = (cbMatDynParam._m0[5u].x * _783) + cbMatDynParam._m0[5u].y;
        float _3882 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _794 = (cbMatDynParam._m0[5u].z * _783) + cbMatDynParam._m0[5u].w;
        float _3893 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) - _790)) + _790) < ((_626 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _638 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _639 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _659 = fma(_540, cbSceneParam._m0[5u].z, fma(_539, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _538));
    float _662 = fma(_540, cbSceneParam._m0[6u].z, fma(_539, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _538));
    float _665 = fma(_540, cbSceneParam._m0[7u].z, fma(_539, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _538));
    uint _678 = _265 + 9u;
    uint _679 = _678 + uint(cbMatDynParam._m0[0u].w);
    float _685 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * cbInstanceData._m0[_679].x;
    float _686 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_679].y;
    float _687 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) * cbInstanceData._m0[_679].z;
    float _3904 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _3915 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _689 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _3926 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _690 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    vec4 _699 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _638, cbSceneParam._m0[86u].y * _639));
    float _703 = ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * TEXCOORD_5.w) * _699.x;
    float _704 = dot(vec3(_538, _539, _540), vec3(_617, _618, _619));
    float _707 = _704 * 2.0;
    float _711 = (_707 * _538) - _617;
    float _712 = (_707 * _539) - _618;
    float _713 = (_707 * _540) - _619;
    float _717 = abs(dot(vec3(_617, _618, _619), vec3(_538, _539, _540)));
    float _3937 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _719 = sqrt(_541);
    float _732 = exp2((_719 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_719 * 3.0));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1101;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _826 = fma(_772, cbModelParam._m0[26u].z, fma(_768, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _764));
        float _830 = fma(_772, cbModelParam._m0[27u].z, fma(_768, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _764));
        float _834 = fma(_772, cbModelParam._m0[28u].z, fma(_768, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _764));
        float _859 = _764 + _538;
        float _860 = _768 + _539;
        float _861 = _772 + _540;
        float _871 = fma(_861, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) - _826;
        float _872 = fma(_861, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) - _830;
        float _873 = fma(_861, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) - _834;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_826 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_830 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[34u].z) + ((((((_834 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _929 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_895.x + (-0.5));
        float _931 = _929 * (_895.y + (-0.5));
        float _932 = _929 * (_895.z + (-0.5));
        float _939 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_902.x + (-0.5));
        float _941 = _939 * (_902.y + (-0.5));
        float _942 = _939 * (_902.z + (-0.5));
        float _949 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_909.x + (-0.5));
        float _951 = _949 * (_909.y + (-0.5));
        float _952 = _949 * (_909.z + (-0.5));
        float _959 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_916.x + (-0.5));
        float _961 = _959 * (_916.y + (-0.5));
        float _962 = _959 * (_916.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _983 = (dot(vec3(_538, _539, _540), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3963 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _993 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3974 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3985 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_995 + 1.0))) + _1000) * _963;
        float _1010 = _931 * 0.5;
        float _1011 = _941 * 0.5;
        float _1012 = _951 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_538, _539, _540), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3996 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _4007 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _4018 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_1037 + 1.0))) + _1042) * _964;
        float _1052 = _932 * 0.5;
        float _1053 = _942 * 0.5;
        float _1054 = _952 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_538, _539, _540), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _4029 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _4040 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _4051 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_1079 + 1.0))) + _1084) * _965;
        _1101 = _932;
        _1103 = _931;
        _1104 = _930;
        _1105 = _942;
        _1106 = _941;
        _1107 = _940;
        _1108 = _952;
        _1109 = _951;
        _1110 = _950;
        _1111 = _965;
        _1112 = _964;
        _1113 = _963;
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _1102;
        _1103 = _1102;
        _1104 = _1102;
        _1105 = _1102;
        _1106 = _1102;
        _1107 = _1102;
        _1108 = _1102;
        _1109 = _1102;
        _1110 = _1102;
        _1111 = _1102;
        _1112 = _1102;
        _1113 = _1102;
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1144 = fma(_772, cbModelParam._m0[30u].z, fma(_768, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _764));
        float _1148 = fma(_772, cbModelParam._m0[31u].z, fma(_768, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _764));
        float _1152 = fma(_772, cbModelParam._m0[32u].z, fma(_768, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _764));
        float _1175 = _764 + _538;
        float _1176 = _768 + _539;
        float _1177 = _772 + _540;
        float _1187 = fma(_1177, cbModelParam._m0[30u].z, fma(_1176, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1175)) - _1144;
        float _1188 = fma(_1177, cbModelParam._m0[31u].z, fma(_1176, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1175)) - _1148;
        float _1189 = fma(_1177, cbModelParam._m0[32u].z, fma(_1176, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1175)) - _1152;
        float _1193 = inversesqrt(dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189)));
        float _1206 = ((_1193 * _1187) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1144 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1207 = ((_1193 * _1188) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1148 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1208 = ((_1193 * _1189) / cbModelParam._m0[35u].z) + ((((((_1152 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1206, _1207, _1208), 0.0);
        float _1243 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1210.x + (-0.5));
        float _1245 = _1243 * (_1210.y + (-0.5));
        float _1246 = _1243 * (_1210.z + (-0.5));
        float _1253 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1217.x + (-0.5));
        float _1255 = _1253 * (_1217.y + (-0.5));
        float _1256 = _1253 * (_1217.z + (-0.5));
        float _1263 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1224.x + (-0.5));
        float _1265 = _1263 * (_1224.y + (-0.5));
        float _1266 = _1263 * (_1224.z + (-0.5));
        float _1273 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1231.x + (-0.5));
        float _1275 = _1273 * (_1231.y + (-0.5));
        float _1276 = _1273 * (_1231.z + (-0.5));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = _1244 * 0.5;
        float _1281 = _1254 * 0.5;
        float _1282 = _1264 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_538, _539, _540), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4092 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _4103 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4114 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_1307 + 1.0))) + _1312) * _1277;
        float _1322 = _1245 * 0.5;
        float _1323 = _1255 * 0.5;
        float _1324 = _1265 * 0.5;
        float _1325 = dot(vec3(_1322, _1323, _1324), vec3(_1322, _1323, _1324));
        float _1330 = (_1325 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1325);
        float _1338 = (dot(vec3(_538, _539, _540), vec3(_1330 * _1322, _1330 * _1323, _1330 * _1324)) + 1.0) * 0.5;
        float _4125 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1347 = sqrt(((_1323 * _1323) + (_1322 * _1322)) + (_1324 * _1324)) / (_1278 + 9.9999997473787516355514526367188e-06);
        float _4136 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _1349 = _1348 * 2.0;
        float _1353 = (1.0 - _1348) / (_1348 + 1.0);
        float _4147 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1363 = ((((1.0 - _1354) * (_1349 + 2.0)) * exp2(log2(isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_1349 + 1.0))) + _1354) * _1278;
        float _1364 = _1246 * 0.5;
        float _1365 = _1256 * 0.5;
        float _1366 = _1266 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_538, _539, _540), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4158 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4169 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4180 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_1391 + 1.0))) + _1396) * _1279;
        _1413 = _1246;
        _1414 = _1245;
        _1415 = _1244;
        _1416 = _1256;
        _1417 = _1255;
        _1418 = _1254;
        _1419 = _1266;
        _1420 = _1265;
        _1421 = _1264;
        _1422 = _1279;
        _1423 = _1278;
        _1424 = _1277;
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
        _1426 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)));
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
    }
    else
    {
        _1413 = _1102;
        _1414 = _1102;
        _1415 = _1102;
        _1416 = _1102;
        _1417 = _1102;
        _1418 = _1102;
        _1419 = _1102;
        _1420 = _1102;
        _1421 = _1102;
        _1422 = _1102;
        _1423 = _1102;
        _1424 = _1102;
        _1425 = 0.0;
        _1426 = 0.0;
        _1427 = 0.0;
    }
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1114)) + _1114;
    float _1438 = (cbModelParam._m0[1u].x * (_1426 - _1115)) + _1115;
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1116)) + _1116;
    float _1460 = fma(_1439, cbSceneParam._m0[89u].z, fma(_1438, cbSceneParam._m0[89u].y, _1437 * cbSceneParam._m0[89u].x));
    float _1463 = fma(_1439, cbSceneParam._m0[90u].z, fma(_1438, cbSceneParam._m0[90u].y, _1437 * cbSceneParam._m0[90u].x));
    float _1466 = fma(_1439, cbSceneParam._m0[91u].z, fma(_1438, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1437));
    float _1481 = _711 * 0.5;
    float _1482 = _712 * 0.5;
    float _1483 = _713 * 0.5;
    float _1484 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1487 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1414, _1417, _1420, _1423));
    float _1490 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1524;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1497 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1101, _1105, _1108, _1111));
        float _1501 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1505 = dot(vec4(_1481, _1482, _1483, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1512 = dot(vec4(cbModelParam._m0[39u]), vec4(_1481, _1482, _1483, 1.0));
        _1524 = dot(vec3(isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1512) ? 0.0 : (isnan(0.0) ? _1512 : max(0.0, _1512))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1524 = 1.0;
    }
    float _1535;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1526 = dot(vec4(cbModelParam._m0[40u]), vec4(_1481, _1482, _1483, 1.0));
        _1535 = dot(vec3(isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1526) ? 0.0 : (isnan(0.0) ? _1526 : max(0.0, _1526))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1535 = 1.0;
    }
    float _1539 = (_1535 * cbModelParam._m0[1u].x) + (_1524 * (1.0 - cbModelParam._m0[1u].x));
    float _1549 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _541);
    float _1550 = isnan(_1549) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1549 : min(cbModelParam._m0[25u].z, _1549));
    float _1632;
    float _1634;
    float _1636;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1599 = fma(_772, cbModelParam._m0[13u].z, fma(_768, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764)) + cbModelParam._m0[13u].w;
        float _1603 = fma(_772, cbModelParam._m0[14u].z, fma(_768, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764)) + cbModelParam._m0[14u].w;
        float _1607 = fma(_772, cbModelParam._m0[15u].z, fma(_768, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764)) + cbModelParam._m0[15u].w;
        float _1610 = fma(_713, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _711));
        float _1613 = fma(_713, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _711));
        float _1616 = fma(_713, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _711));
        float _1644;
        if (_1610 > 0.0)
        {
            _1644 = abs((1.0 - _1599) / _1610);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1599 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1644 = frontier_phi_17_15_ladder;
        }
        float _1816;
        if (_1613 > 0.0)
        {
            _1816 = abs((1.0 - _1603) / _1613);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1603 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1816 = frontier_phi_26_22_ladder;
        }
        float _2112;
        if (_1616 > 0.0)
        {
            _2112 = abs((1.0 - _1607) / _1616);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1607 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2112 = frontier_phi_38_33_ladder;
        }
        float _2114 = isnan(_1816) ? _1644 : (isnan(_1644) ? _1816 : min(_1644, _1816));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1610) + _1599;
        float _2120 = (_2115 * _1613) + _1603;
        float _2121 = (_2115 * _1616) + _1607;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2122;
        float _2126 = _2122 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 > _2126) || ((_2120 < _2124) || ((_2119 < _2124) || (_2119 > _2126))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2121, cbModelParam._m0[9u].z, fma(_2120, cbModelParam._m0[9u].y, _2119 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2121, cbModelParam._m0[10u].z, fma(_2120, cbModelParam._m0[10u].y, _2119 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2121, cbModelParam._m0[11u].z, fma(_2120, cbModelParam._m0[11u].y, _2119 * cbModelParam._m0[11u].x))), _1550);
            frontier_phi_16_38_ladder = _2266.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2266.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2266.x * cbModelParam._m0[1u].y;
        }
        _1632 = frontier_phi_16_38_ladder_2;
        _1634 = frontier_phi_16_38_ladder_1;
        _1636 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_711, _712, _713), _1550);
        _1632 = _1620.x * cbModelParam._m0[1u].y;
        _1634 = _1620.y * cbModelParam._m0[1u].y;
        _1636 = _1620.z * cbModelParam._m0[1u].y;
    }
    float _1640 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _541);
    float _1641 = isnan(_1640) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1640 : min(cbModelParam._m0[25u].w, _1640));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1696 = fma(_772, cbModelParam._m0[21u].z, fma(_768, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764)) + cbModelParam._m0[21u].w;
        float _1700 = fma(_772, cbModelParam._m0[22u].z, fma(_768, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764)) + cbModelParam._m0[22u].w;
        float _1704 = fma(_772, cbModelParam._m0[23u].z, fma(_768, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764)) + cbModelParam._m0[23u].w;
        float _1707 = fma(_713, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _711));
        float _1710 = fma(_713, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _711));
        float _1713 = fma(_713, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _711));
        float _1821;
        if (_1707 > 0.0)
        {
            _1821 = abs((1.0 - _1696) / _1707);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1696 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1821 = frontier_phi_28_24_ladder;
        }
        float _2139;
        if (_1710 > 0.0)
        {
            _2139 = abs((1.0 - _1700) / _1710);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1700 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2139 = frontier_phi_40_35_ladder;
        }
        float _2466;
        if (_1713 > 0.0)
        {
            _2466 = abs((1.0 - _1704) / _1713);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1704 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2466 = frontier_phi_50_47_ladder;
        }
        float _2468 = isnan(_2139) ? _1821 : (isnan(_1821) ? _2139 : min(_1821, _2139));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1707) + _1696;
        float _2474 = (_2469 * _1710) + _1700;
        float _2475 = (_2469 * _1713) + _1704;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2476;
        float _2479 = _2476 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2475 > _2479) || ((_2475 < _2477) || ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 < _2477) || (_2473 > _2479))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2593 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2475, cbModelParam._m0[17u].z, fma(_2474, cbModelParam._m0[17u].y, _2473 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2475, cbModelParam._m0[18u].z, fma(_2474, cbModelParam._m0[18u].y, _2473 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2475, cbModelParam._m0[19u].z, fma(_2474, cbModelParam._m0[19u].y, _2473 * cbModelParam._m0[19u].x))), _1641);
            frontier_phi_25_50_ladder = _2593.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2593.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2593.x * cbModelParam._m0[1u].z;
        }
        _1732 = frontier_phi_25_50_ladder_2;
        _1734 = frontier_phi_25_50_ladder_1;
        _1736 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1716 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_711, _712, _713), _1641);
        _1732 = _1716.x * cbModelParam._m0[1u].z;
        _1734 = _1716.y * cbModelParam._m0[1u].z;
        _1736 = _1716.z * cbModelParam._m0[1u].z;
    }
    float _1748 = ((((1.0 - _732) * ((_719 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_732 * _719)) * _703;
    float _1749 = _1748 * ((cbModelParam._m0[1u].w * (_1732 - _1632)) + _1632);
    float _1750 = _1748 * ((cbModelParam._m0[1u].w * (_1734 - _1634)) + _1634);
    float _1751 = _1748 * ((cbModelParam._m0[1u].w * (_1736 - _1636)) + _1636);
    float _1754 = fma(_1751, cbSceneParam._m0[89u].z, fma(_1750, cbSceneParam._m0[89u].y, _1749 * cbSceneParam._m0[89u].x));
    float _1757 = fma(_1751, cbSceneParam._m0[90u].z, fma(_1750, cbSceneParam._m0[90u].y, _1749 * cbSceneParam._m0[90u].x));
    float _1760 = fma(_1751, cbSceneParam._m0[91u].z, fma(_1750, cbSceneParam._m0[91u].y, _1749 * cbSceneParam._m0[91u].x));
    float _1795 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1799 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1803 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1807 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1808 = _1795 / _1807;
    float _1809 = _1799 / _1807;
    float _1810 = _1803 / _1807;
    float _1957;
    float _1958;
    float _1959;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1837 = ((uint(_1810 > cbSceneParam._m0[59u].y) + uint(_1810 > cbSceneParam._m0[59u].x)) + uint(_1810 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1838 = _1837 + 43u;
        uint _1846 = _1837 + 44u;
        uint _1854 = _1837 + 45u;
        uint _1862 = _1837 + 46u;
        float _1873 = fma(_1807, cbSceneParam._m0[_1838].w, fma(_1803, cbSceneParam._m0[_1838].z, fma(_1799, cbSceneParam._m0[_1838].y, _1795 * cbSceneParam._m0[_1838].x)));
        float _1877 = fma(_1807, cbSceneParam._m0[_1846].w, fma(_1803, cbSceneParam._m0[_1846].z, fma(_1799, cbSceneParam._m0[_1846].y, _1795 * cbSceneParam._m0[_1846].x)));
        float _1885 = fma(_1807, cbSceneParam._m0[_1862].w, fma(_1803, cbSceneParam._m0[_1862].z, fma(_1799, cbSceneParam._m0[_1862].y, _1795 * cbSceneParam._m0[_1862].x)));
        float _1890 = cbSceneParam._m0[33u].z * _1885;
        float _1892 = cbSceneParam._m0[33u].w * _1885;
        float _1895 = fma(_1807, cbSceneParam._m0[_1854].w, fma(_1803, cbSceneParam._m0[_1854].z, fma(_1799, cbSceneParam._m0[_1854].y, _1795 * cbSceneParam._m0[_1854].x))) / _1885;
        float _1943 = (cbSceneParam._m0[33u].x - sqrt(((_1809 * _1809) + (_1808 * _1808)) + (_1810 * _1810))) * cbSceneParam._m0[33u].y;
        float _4306 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1950 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1890 + _1873) / _1885, (_1892 + _1877) / _1885), _1895), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1892 + _1873) / _1885, (_1877 - _1890) / _1885), _1895), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1873 - _1890) / _1885, (_1877 - _1892) / _1885), _1895), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1873 - _1892) / _1885, (_1890 + _1877) / _1885), _1895), 0.0)).x), vec4(0.25)));
        _1957 = 1.0 - (_1950 * cbSceneParam._m0[34u].x);
        _1958 = 1.0 - (_1950 * cbSceneParam._m0[34u].y);
        _1959 = 1.0 - (_1950 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1957 = 1.0;
        _1958 = 1.0;
        _1959 = 1.0;
    }
    float _2023;
    float _2025;
    float _2027;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2011 = fma(_1807, cbSceneParam._m0[63u].w, fma(_1803, cbSceneParam._m0[63u].z, fma(_1799, cbSceneParam._m0[63u].y, _1795 * cbSceneParam._m0[63u].x)));
        float _2012 = fma(_1807, cbSceneParam._m0[60u].w, fma(_1803, cbSceneParam._m0[60u].z, fma(_1799, cbSceneParam._m0[60u].y, _1795 * cbSceneParam._m0[60u].x))) / _2011;
        float _2013 = fma(_1807, cbSceneParam._m0[61u].w, fma(_1803, cbSceneParam._m0[61u].z, fma(_1799, cbSceneParam._m0[61u].y, _1795 * cbSceneParam._m0[61u].x))) / _2011;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2012 >= cbSceneParam._m0[64u].x) && (_2013 >= cbSceneParam._m0[64u].y)) && (_2012 <= cbSceneParam._m0[64u].z)) && (_2013 <= cbSceneParam._m0[64u].w))
        {
            float _2152 = fma(_1807, cbSceneParam._m0[62u].w, fma(_1803, cbSceneParam._m0[62u].z, fma(_1799, cbSceneParam._m0[62u].y, _1795 * cbSceneParam._m0[62u].x))) / _2011;
            float _2156 = isnan(cbSceneParam._m0[41u].w) ? _2152 : (isnan(_2152) ? cbSceneParam._m0[41u].w : max(_2152, cbSceneParam._m0[41u].w));
            float _2199 = (cbSceneParam._m0[33u].x - sqrt(((_1809 * _1809) + (_1808 * _1808)) + (_1810 * _1810))) * cbSceneParam._m0[33u].y;
            float _4322 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
            float _2206 = (isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2012, cbSceneParam._m0[33u].w + _2013), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2012, _2013 - cbSceneParam._m0[33u].z), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2012 - cbSceneParam._m0[33u].z, _2013 - cbSceneParam._m0[33u].w), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2012 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2013), _2156), 0.0)).x), vec4(0.25)));
            float _2210 = 1.0 - (_2206 * cbSceneParam._m0[34u].x);
            float _2211 = 1.0 - (_2206 * cbSceneParam._m0[34u].y);
            float _2212 = 1.0 - (_2206 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2212) ? _1959 : (isnan(_1959) ? _2212 : min(_1959, _2212));
            frontier_phi_37_36_ladder_1 = isnan(_2211) ? _1958 : (isnan(_1958) ? _2211 : min(_1958, _2211));
            frontier_phi_37_36_ladder_2 = isnan(_2210) ? _1957 : (isnan(_1957) ? _2210 : min(_1957, _2210));
        }
        else
        {
            frontier_phi_37_36_ladder = _1959;
            frontier_phi_37_36_ladder_1 = _1958;
            frontier_phi_37_36_ladder_2 = _1957;
        }
        _2023 = frontier_phi_37_36_ladder_2;
        _2025 = frontier_phi_37_36_ladder_1;
        _2027 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2023 = _1957;
        _2025 = _1958;
        _2027 = _1959;
    }
    uvec4 _2032 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2034 = _2032.x * 14u;
    uint _2035 = _2034 + 13u;
    float _2042 = _703 + (-1.0);
    float _2047 = (cbLight._m0[_2035].x * _2042) + 1.0;
    float _2048 = (cbLight._m0[_2035].y * _2042) + 1.0;
    float _2049 = (cbLight._m0[_2035].z * _2042) + 1.0;
    float _2050 = (cbLight._m0[_2035].w * _2042) + 1.0;
    uint _2051 = _2034 + 5u;
    float _2057 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2061 = _2034 + 4u;
    float _2071 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    uint _2075 = _2034 | 1u;
    float _2086 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_538, _539, _540));
    float _2089 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_538, _539, _540));
    float _4358 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _4369 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2094 = (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * 0.3183098733425140380859375;
    float _2096 = (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.3183098733425140380859375;
    float _2103 = ((cbLight._m0[_2051].x * _2057) * _2096) + (((cbLight._m0[_2061].x * _2023) * _2071) * _2094);
    float _2104 = ((_2057 * cbLight._m0[_2051].y) * _2096) + (((cbLight._m0[_2061].y * _2025) * _2071) * _2094);
    float _2105 = ((_2057 * cbLight._m0[_2051].z) * _2096) + (((cbLight._m0[_2061].z * _2027) * _2071) * _2094);
    uvec4 _2109 = floatBitsToUint(cbLight._m0[_2034 + 12u]);
    bool _2111 = _2109.x == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2111)
    {
        _2213 = _2103;
        _2215 = _2104;
        _2217 = _2105;
    }
    else
    {
        uint _2221 = _2034 + 6u;
        float _2237 = (dot(vec3(cbLight._m0[_2034 + 2u].xyz), vec3(_538, _539, _540)) * 0.5) + 0.5;
        float _2238 = _2237 * _2237;
        float _4380 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2239 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _2240 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2213 = (((cbLight._m0[_2221].x * 0.3183098733425140380859375) * _2239) * _2240) + _2103;
        _2215 = (((cbLight._m0[_2221].y * 0.3183098733425140380859375) * _2239) * _2240) + _2104;
        _2217 = (((cbLight._m0[_2221].z * 0.3183098733425140380859375) * _2239) * _2240) + _2105;
    }
    bool _2220 = _2109.y == 0u;
    float _2275;
    float _2277;
    float _2279;
    if (_2220)
    {
        _2275 = _2213;
        _2277 = _2215;
        _2279 = _2217;
    }
    else
    {
        uint _2437 = _2034 + 7u;
        float _2453 = (dot(vec3(cbLight._m0[_2034 + 3u].xyz), vec3(_538, _539, _540)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4396 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2456 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2275 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2213;
        _2277 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2215;
        _2279 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2217;
    }
    uint _2282 = _2034 + 8u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _541) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2034].x + _617;
    float _2298 = cbLight._m0[_2034].y + _618;
    float _2299 = cbLight._m0[_2034].z + _619;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_2034].xyz));
    float _4412 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _4423 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _2311 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2312 = dot(vec3(_538, _539, _540), vec3(_2304, _2305, _2306));
    float _4434 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2304, _2305, _2306));
    float _4445 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2296 * _2296;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2335 = (exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2336 = 1.0 - _2296;
    float _2347 = (0.5 / (((_2311 * ((_2310 * _2336) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2336) + _2296) * _2310))) * _2310;
    float _4456 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2349 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    uint _2363 = _2034 + 9u;
    float _2374 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _541) * 0.949999988079071044921875);
    float _2375 = _2374 * _2374;
    float _2376 = cbLight._m0[_2075].x + _617;
    float _2377 = cbLight._m0[_2075].y + _618;
    float _2378 = cbLight._m0[_2075].z + _619;
    float _2382 = inversesqrt(dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378)));
    float _2383 = _2382 * _2376;
    float _2384 = _2382 * _2377;
    float _2385 = _2382 * _2378;
    float _2386 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_2075].xyz));
    float _4467 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _2390 = dot(vec3(_538, _539, _540), vec3(_2383, _2384, _2385));
    float _4478 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2383, _2384, _2385));
    float _4489 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2375 * _2375;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2411 = (exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2412 = 1.0 - _2375;
    float _2422 = (0.5 / (((_2311 * ((_2389 * _2412) + _2375)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2412) + _2375) * _2389))) * _2389;
    float _4500 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2424 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    float _2434 = (((_2411 * cbLight._m0[_2363].x) * _2424) * _2057) + ((((cbLight._m0[_2282].x * _2023) * _2335) * _2349) * _2071);
    float _2435 = (((_2411 * cbLight._m0[_2363].y) * _2424) * _2057) + ((((cbLight._m0[_2282].y * _2025) * _2335) * _2349) * _2071);
    float _2436 = (((_2411 * cbLight._m0[_2363].z) * _2424) * _2057) + ((((cbLight._m0[_2282].z * _2027) * _2335) * _2349) * _2071);
    float _2492;
    float _2494;
    float _2496;
    if (_2111)
    {
        _2492 = _2434;
        _2494 = _2435;
        _2496 = _2436;
    }
    else
    {
        uint _2498 = _2034 + 2u;
        uint _2502 = _2034 + 10u;
        float _2516 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2498].w)) * _541) * 0.949999988079071044921875);
        float _2517 = _2516 * _2516;
        float _2518 = cbLight._m0[_2498].x + _617;
        float _2519 = cbLight._m0[_2498].y + _618;
        float _2520 = cbLight._m0[_2498].z + _619;
        float _2524 = inversesqrt(dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520)));
        float _2525 = _2524 * _2518;
        float _2526 = _2524 * _2519;
        float _2527 = _2524 * _2520;
        float _2528 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_2498].xyz));
        float _4511 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2532 = dot(vec3(_538, _539, _540), vec3(_2525, _2526, _2527));
        float _4522 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2536 = dot(vec3(cbLight._m0[_2498].xyz), vec3(_2525, _2526, _2527));
        float _4533 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2540 = _2517 * _2517;
        float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
        float _2553 = (exp2(log2(1.0 - (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2554 = 1.0 - _2517;
        float _2564 = (0.5 / (((_2311 * ((_2531 * _2554) + _2517)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2554) + _2517) * _2531))) * _2531;
        float _4544 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2492 = (((_2553 * cbLight._m0[_2502].x) * _2566) * _2567) + _2434;
        _2494 = (((_2553 * cbLight._m0[_2502].y) * _2566) * _2567) + _2435;
        _2496 = (((_2553 * cbLight._m0[_2502].z) * _2566) * _2567) + _2436;
    }
    float _2598;
    float _2600;
    float _2602;
    if (_2220)
    {
        _2598 = _2492;
        _2600 = _2494;
        _2602 = _2496;
    }
    else
    {
        uint _2609 = _2034 + 3u;
        uint _2613 = _2034 + 11u;
        float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2609].w)) * _541) * 0.949999988079071044921875);
        float _2628 = _2627 * _2627;
        float _2629 = cbLight._m0[_2609].x + _617;
        float _2630 = cbLight._m0[_2609].y + _618;
        float _2631 = cbLight._m0[_2609].z + _619;
        float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
        float _2636 = _2635 * _2629;
        float _2637 = _2635 * _2630;
        float _2638 = _2635 * _2631;
        float _2639 = dot(vec3(_538, _539, _540), vec3(cbLight._m0[_2609].xyz));
        float _4560 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2643 = dot(vec3(_538, _539, _540), vec3(_2636, _2637, _2638));
        float _4571 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2647 = dot(vec3(cbLight._m0[_2609].xyz), vec3(_2636, _2637, _2638));
        float _4582 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2651 = _2628 * _2628;
        float _2655 = ((_2646 * _2646) * (_2651 + (-1.0))) + 1.0;
        float _2664 = (exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2665 = 1.0 - _2628;
        float _2675 = (0.5 / (((_2311 * ((_2642 * _2665) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2665) + _2628) * _2642))) * _2642;
        float _4593 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2651 / ((_2655 * _2655) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2598 = (((_2664 * cbLight._m0[_2613].x) * _2677) * _2678) + _2492;
        _2600 = (((_2664 * cbLight._m0[_2613].y) * _2677) * _2678) + _2494;
        _2602 = (((_2664 * cbLight._m0[_2613].z) * _2677) * _2678) + _2496;
    }
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    float _2754;
    if (_2032.y == 0u)
    {
        uvec4 _2699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2700 = _2699.x;
        uint _2711 = uint((float(_2699.y) * floor(float(uint(cbSceneParam._m0[85u].y * _639) / _2700))) + floor(float(uint(cbSceneParam._m0[85u].x * _638) / _2700)));
        float _2721 = (log2(_1810 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2722 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        uint _2725 = uint(isnan(14.0) ? _2722 : (isnan(_2722) ? 14.0 : min(_2722, 14.0)));
        uvec4 _2730 = texelFetch(g_lightClusterGridBuffer, int(((_2725 << 2u) + (_2711 << 6u)) >> 2u));
        uint _2731 = _2730.x;
        uint _2732 = _2699.z;
        float _2811;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        if (((((1u << ((_2732 >> 4u) & 15u)) + 4294967295u) & _2731) == 0u) || ((_2732 & 240u) == 0u))
        {
            _2811 = 0.0;
            _2813 = 0.0;
            _2815 = 0.0;
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
        }
        else
        {
            float _2812;
            float _2814;
            float _2816;
            float _2818;
            float _2820;
            float _2822;
            float _2964 = 0.0;
            float _2965 = 0.0;
            float _2966 = 0.0;
            float _2967 = 0.0;
            float _2968 = 0.0;
            float _2969 = 0.0;
            uint _2970 = 0u;
            uint _2979;
            bool _2980;
            for (;;)
            {
                _2979 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_2970 << 2u)) >> 2u)).x;
                _2980 = _2979 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2980)
                {
                    frontier_phi_71_pred = _2969;
                    frontier_phi_71_pred_1 = _2968;
                    frontier_phi_71_pred_2 = _2967;
                    frontier_phi_71_pred_3 = _2966;
                    frontier_phi_71_pred_4 = _2965;
                    frontier_phi_71_pred_5 = _2964;
                }
                else
                {
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    uint _3115;
                    _3109 = _2964;
                    _3110 = _2965;
                    _3111 = _2966;
                    _3112 = _2967;
                    _3113 = _2968;
                    _3114 = _2969;
                    _3115 = _2979;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    for (;;)
                    {
                        uint _3119 = uint(findLSB(_3115)) + (_2970 << 5u);
                        uint _3116 = (_3115 + 4294967295u) & _3115;
                        uint _3121 = _3119 * 48u;
                        vec4 _3135 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 3u)).x));
                        uint _3141 = (_3119 * 48u) + 4u;
                        vec4 _3154 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 3u)).x));
                        uint _3160 = (_3119 * 48u) + 8u;
                        vec3 _3171 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3160)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 2u)).x));
                        float _3175 = _3135.x - _1808;
                        float _3176 = _3135.y - _1809;
                        float _3177 = _3135.z - _1810;
                        float _3178 = dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177));
                        float _3181 = inversesqrt(_3178);
                        float _3182 = _3181 * _3175;
                        float _3183 = _3181 * _3176;
                        float _3184 = _3181 * _3177;
                        float _3185 = dot(vec3(_659, _662, _665), vec3(_3182, _3183, _3184));
                        float _3190 = 1.0 - (_3178 * _3135.w);
                        float _4619 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3191 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
                        float _3192 = sqrt(_3178) * _3154.w;
                        float _3195 = 1.39999997615814208984375 / (_3192 + 1.39999997615814208984375);
                        float _3196 = _3195 * _3195;
                        float _3199 = ((1.0 - _3196) * _3185) + _3196;
                        float _3202 = _3192 * _3192;
                        float _3206 = ((isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0))) * _3191) / ((_3202 * 0.699999988079071044921875) + 1.0);
                        float _3210 = (-0.0) - _1808;
                        float _3211 = (-0.0) - _1809;
                        float _3212 = (-0.0) - _1810;
                        float _3216 = inversesqrt(dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212)));
                        float _3217 = _3216 * _3210;
                        float _3218 = _3216 * _3211;
                        float _3219 = _3216 * _3212;
                        float _3226 = exp2(log2(1.0 / ((_3202 * 3.5) + 5.0)) * 0.25);
                        float _3227 = 1.0 - _719;
                        float _3234 = sqrt(1.0 - ((1.0 - (_3227 * _3227)) * (1.0 - (_3226 * _3226))));
                        float _3235 = _3234 * _3234;
                        float _3236 = _3235 * _3235;
                        float _3237 = _3217 + _3182;
                        float _3238 = _3218 + _3183;
                        float _3239 = _3219 + _3184;
                        float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                        float _3247 = dot(vec3(_659, _662, _665), vec3(_3217, _3218, _3219));
                        float _4635 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3250 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3251 = dot(vec3(_659, _662, _665), vec3(_3243 * _3237, _3243 * _3238, _3243 * _3239));
                        float _4646 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3254 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3258 = ((_3254 * _3254) * (_3236 + (-1.0))) + 1.0;
                        float _3259 = _3195 * _3235;
                        float _3260 = _3259 * _3259;
                        float _3263 = ((1.0 - _3260) * _3185) + _3260;
                        float _4657 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3264 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                        float _3265 = 1.0 - _3235;
                        float _3275 = (0.5 / (((_3264 * ((_3250 * _3265) + _3235)) + 9.9999999392252902907785028219223e-09) + (((_3264 * _3265) + _3235) * _3250))) * _3264;
                        float _4668 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3286 = (((_3236 * 3.1415927410125732421875) * (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) / ((_3258 * _3258) * ((_3202 * 2.1991131305694580078125) + 3.141590118408203125))) * _3191;
                        _3039 = (_3206 * _3154.x) + _3112;
                        _3040 = (_3206 * _3154.y) + _3113;
                        _3041 = (_3206 * _3154.z) + _3114;
                        _3036 = (_3286 * _3171.x) + _3109;
                        _3037 = (_3286 * _3171.y) + _3110;
                        _3038 = (_3286 * _3171.z) + _3111;
                        if (_3116 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3109 = _3036;
                            _3110 = _3037;
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3040;
                            _3114 = _3041;
                            _3115 = _3116;
                        }
                    }
                    frontier_phi_71_pred = _3041;
                    frontier_phi_71_pred_1 = _3040;
                    frontier_phi_71_pred_2 = _3039;
                    frontier_phi_71_pred_3 = _3038;
                    frontier_phi_71_pred_4 = _3037;
                    frontier_phi_71_pred_5 = _3036;
                }
                _2822 = frontier_phi_71_pred;
                _2820 = frontier_phi_71_pred_1;
                _2818 = frontier_phi_71_pred_2;
                _2816 = frontier_phi_71_pred_3;
                _2814 = frontier_phi_71_pred_4;
                _2812 = frontier_phi_71_pred_5;
                uint _2971 = _2970 + 1u;
                if (_2971 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2964 = _2812;
                    _2965 = _2814;
                    _2966 = _2816;
                    _2967 = _2818;
                    _2968 = _2820;
                    _2969 = _2822;
                    _2970 = _2971;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2811 = _2812;
            _2813 = _2814;
            _2815 = _2816;
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
        }
        uvec4 _2825 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2826 = _2825.z;
        uint _2828 = (_2826 >> 8u) & 15u;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        float _2940;
        float _2942;
        if (((4294967295u << _2828) & _2731) == 0u)
        {
            _2932 = _2811;
            _2934 = _2813;
            _2936 = _2815;
            _2938 = _2817;
            _2940 = _2819;
            _2942 = _2821;
        }
        else
        {
            float _2957 = inversesqrt(dot(vec3(_1808, _1809, _1810), vec3(_1808, _1809, _1810)));
            float _2958 = _2957 * _1808;
            float _2959 = _2957 * _1809;
            float _2960 = _2957 * _1810;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2828 < ((_2826 >> 12u) & 15u))
            {
                float _2933;
                float _2935;
                float _2937;
                float _2939;
                float _2941;
                float _2943;
                float _3092 = _2811;
                float _3093 = _2813;
                float _3094 = _2815;
                float _3095 = _2817;
                float _3096 = _2819;
                float _3097 = _2821;
                uint _3098 = _2828;
                uint _3107;
                bool _3108;
                for (;;)
                {
                    _3107 = texelFetch(g_lightClassification, int((((_2725 << 5u) + (_2711 << 9u)) + (_3098 << 2u)) >> 2u)).x;
                    _3108 = _3107 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3108)
                    {
                        frontier_phi_82_pred = _3097;
                        frontier_phi_82_pred_1 = _3096;
                        frontier_phi_82_pred_2 = _3095;
                        frontier_phi_82_pred_3 = _3094;
                        frontier_phi_82_pred_4 = _3093;
                        frontier_phi_82_pred_5 = _3092;
                    }
                    else
                    {
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3313 = _3092;
                        float _3314 = _3093;
                        float _3315 = _3094;
                        float _3316 = _3095;
                        float _3317 = _3096;
                        float _3318 = _3097;
                        uint _3319 = _3107;
                        uint _3320;
                        vec4 _3345;
                        float _3346;
                        vec4 _3361;
                        vec3 _3373;
                        vec4 _3388;
                        vec4 _3403;
                        float _3449;
                        bool _3450;
                        for (;;)
                        {
                            uint _3330 = ((_3098 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3319));
                            _3320 = (_3319 + 4294967295u) & _3319;
                            uint _3332 = _3330 * 40u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            _3346 = _3345.w;
                            uint _3348 = (_3330 * 40u) + 4u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3363 = (_3330 * 40u) + 8u;
                            _3373 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x));
                            uint _3375 = (_3330 * 40u) + 16u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3390 = (_3330 * 40u) + 20u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3405 = (_3330 * 40u) + 24u;
                            vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3424 = (_3330 * 40u) + 28u;
                            vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 3u)).x));
                            _3449 = fma(_1810, _3437.z, fma(_1809, _3437.y, _3437.x * _1808)) + _3437.w;
                            _3450 = !((fma(_1810, _3418.z, fma(_1809, _3418.y, _3418.x * _1808)) + _3418.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3450)
                            {
                                float _3477 = _3345.x - _1808;
                                float _3478 = _3345.y - _1809;
                                float _3479 = _3345.z - _1810;
                                float _3480 = dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479));
                                float _3483 = inversesqrt(_3480);
                                float _3484 = _3483 * _3477;
                                float _3485 = _3483 * _3478;
                                float _3486 = _3483 * _3479;
                                float _3490 = 1.0 - (_3480 / (_3346 * _3346));
                                float _4679 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3491 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
                                float _3495 = sqrt(_3480) * _3361.w;
                                float _3497 = 1.39999997615814208984375 / (_3495 + 1.39999997615814208984375);
                                float _3498 = _3497 * _3497;
                                float _3501 = ((1.0 - _3498) * dot(vec3(_3484, _3485, _3486), vec3(_659, _662, _665))) + _3498;
                                float _3504 = _3495 * _3495;
                                float _3508 = (fma(_1810, _3388.z, fma(_1809, _3388.y, _3388.x * _1808)) + _3388.w) / _3449;
                                float _3509 = (fma(_1810, _3403.z, fma(_1809, _3403.y, _3403.x * _1808)) + _3403.w) / _3449;
                                float _3513 = 1.0 - dot(vec2(_3508, _3509), vec2(_3508, _3509));
                                float _4695 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3514 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3515 = _3514 * (((isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0))) * _3491) / ((_3504 * 0.699999988079071044921875) + 1.0));
                                float _3527 = exp2(log2(1.0 / ((_3504 * 3.5) + 5.0)) * 0.25);
                                float _3528 = 1.0 - _719;
                                float _3535 = sqrt(1.0 - ((1.0 - (_3528 * _3528)) * (1.0 - (_3527 * _3527))));
                                float _3536 = _3535 * _3535;
                                float _3537 = _3536 * _3536;
                                float _3538 = _3484 - _2958;
                                float _3539 = _3485 - _2959;
                                float _3540 = _3486 - _2960;
                                float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                                float _3548 = dot(vec3(_659, _662, _665), vec3((-0.0) - _2958, (-0.0) - _2959, (-0.0) - _2960));
                                float _4706 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3551 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3552 = dot(vec3(_659, _662, _665), vec3(_3544 * _3538, _3544 * _3539, _3544 * _3540));
                                float _4717 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3555 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                                float _3559 = ((_3555 * _3555) * (_3537 + (-1.0))) + 1.0;
                                float _3560 = _3497 * _3536;
                                float _3561 = _3560 * _3560;
                                float _3567 = ((1.0 - _3561) * dot(vec3(_659, _662, _665), vec3(_3484, _3485, _3486))) + _3561;
                                float _4728 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                                float _3569 = 1.0 - _3536;
                                float _3579 = (0.5 / (((_3568 * ((_3551 * _3569) + _3536)) + 9.9999999392252902907785028219223e-09) + (((_3568 * _3569) + _3536) * _3551))) * _3568;
                                float _4739 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3589 = (_3514 * _3491) * (((_3537 * 3.1415927410125732421875) * (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) / ((_3559 * _3559) * ((_3504 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3515 * _3361.z;
                                frontier_phi_88_pred_1 = _3515 * _3361.y;
                                frontier_phi_88_pred_2 = _3515 * _3361.x;
                                frontier_phi_88_pred_3 = _3589 * _3373.z;
                                frontier_phi_88_pred_4 = _3589 * _3373.y;
                                frontier_phi_88_pred_5 = _3589 * _3373.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3598 = frontier_phi_88_pred;
                            _3597 = frontier_phi_88_pred_1;
                            _3596 = frontier_phi_88_pred_2;
                            _3595 = frontier_phi_88_pred_3;
                            _3594 = frontier_phi_88_pred_4;
                            _3593 = frontier_phi_88_pred_5;
                            _3303 = _3596 + _3316;
                            _3304 = _3597 + _3317;
                            _3305 = _3598 + _3318;
                            _3300 = _3593 + _3313;
                            _3301 = _3594 + _3314;
                            _3302 = _3595 + _3315;
                            if (_3320 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3320;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3305;
                        frontier_phi_82_pred_1 = _3304;
                        frontier_phi_82_pred_2 = _3303;
                        frontier_phi_82_pred_3 = _3302;
                        frontier_phi_82_pred_4 = _3301;
                        frontier_phi_82_pred_5 = _3300;
                    }
                    _2943 = frontier_phi_82_pred;
                    _2941 = frontier_phi_82_pred_1;
                    _2939 = frontier_phi_82_pred_2;
                    _2937 = frontier_phi_82_pred_3;
                    _2935 = frontier_phi_82_pred_4;
                    _2933 = frontier_phi_82_pred_5;
                    uint _3099 = _3098 + 1u;
                    if (_3099 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3092 = _2933;
                        _3093 = _2935;
                        _3094 = _2937;
                        _3095 = _2939;
                        _3096 = _2941;
                        _3097 = _2943;
                        _3098 = _3099;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2939;
                frontier_phi_63_64_ladder_1 = _2943;
                frontier_phi_63_64_ladder_2 = _2941;
                frontier_phi_63_64_ladder_3 = _2937;
                frontier_phi_63_64_ladder_4 = _2935;
                frontier_phi_63_64_ladder_5 = _2933;
            }
            else
            {
                frontier_phi_63_64_ladder = _2817;
                frontier_phi_63_64_ladder_1 = _2821;
                frontier_phi_63_64_ladder_2 = _2819;
                frontier_phi_63_64_ladder_3 = _2815;
                frontier_phi_63_64_ladder_4 = _2813;
                frontier_phi_63_64_ladder_5 = _2811;
            }
            _2932 = frontier_phi_63_64_ladder_5;
            _2934 = frontier_phi_63_64_ladder_4;
            _2936 = frontier_phi_63_64_ladder_3;
            _2938 = frontier_phi_63_64_ladder;
            _2940 = frontier_phi_63_64_ladder_2;
            _2942 = frontier_phi_63_64_ladder_1;
        }
        float _2947 = isnan(1.0) ? _703 : (isnan(_703) ? 1.0 : min(_703, 1.0));
        _2744 = (_2947 * _2938) + _2275;
        _2746 = (_2947 * _2940) + _2277;
        _2748 = (_2947 * _2942) + _2279;
        _2750 = ((_2932 * 0.039999999105930328369140625) * _2947) + _2598;
        _2752 = ((_2934 * 0.039999999105930328369140625) * _2947) + _2600;
        _2754 = ((_2936 * 0.039999999105930328369140625) * _2947) + _2602;
    }
    else
    {
        _2744 = _2275;
        _2746 = _2277;
        _2748 = _2279;
        _2750 = _2598;
        _2752 = _2600;
        _2754 = _2602;
    }
    float _4755 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _4766 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4777 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _2771 = ((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2744 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _703))) + ((_2750 + ((isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))) * _1539)) * cbPerFrame._m0[3u].x);
    float _2772 = ((isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (_2746 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _703))) + ((_2752 + ((isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))) * _1539)) * cbPerFrame._m0[3u].x);
    float _2773 = ((isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (_2748 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _703))) + ((_2754 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1539)) * cbPerFrame._m0[3u].x);
    uint _2774 = _265 + 6u;
    float _2782 = _638 / cbSceneParam._m0[86u].x;
    float _2783 = _639 / cbSceneParam._m0[86u].y;
    vec4 _2797 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, (log2((isnan(cbSceneParam._m0[77u].w) ? _559 : (isnan(_559) ? cbSceneParam._m0[77u].w : min(_559, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2799 = _2797.x;
    float _2800 = _2797.y;
    float _2801 = _2797.z;
    float _2802 = _2797.w;
    float _2874;
    float _2876;
    float _2878;
    float _2880;
    if (_559 > cbSceneParam._m0[78u].w)
    {
        float _2836 = isnan(_559) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _559 : min(cbSceneParam._m0[80u].w, _559));
        float _2837 = _2836 / _559;
        float _2848 = _2837 * _610;
        float _2849 = _611 * _2837;
        float _2850 = (-0.0) - _2849;
        float _2852 = _2837 * _612;
        float _2854 = (cbSceneParam._m0[77u].w * _2850) / _2836;
        float _2855 = _2854 + cbSceneParam._m0[79u].w;
        float _2856 = cbSceneParam._m0[79u].w - _2849;
        float _2862 = sqrt(((_2848 * _2848) + (_2849 * _2849)) + (_2852 * _2852));
        float _2865 = (1.0 - (cbSceneParam._m0[77u].w / _2836)) * _2862;
        float _2870 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2872 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3049;
        if (abs((_2850 - _2854) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3049 = ((((_2855 > 0.0) ? exp2(_2870 * _2855) : (2.0 - exp2(_2872 * _2855))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2865;
        }
        else
        {
            float _2993 = 1.0 / cbSceneParam._m0[80u].x;
            float _2994 = isnan(_2856) ? _2855 : (isnan(_2855) ? _2856 : max(_2855, _2856));
            float _2995 = isnan(_2856) ? _2855 : (isnan(_2855) ? _2856 : min(_2855, _2856));
            float _3004 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : min(_2994, 0.0));
            float _3005 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : min(_2995, 0.0));
            _3049 = ((abs(_2862 / _2850) * cbSceneParam._m0[80u].y) * ((((_3004 - _3005) * 2.0) - ((exp2(_2870 * (isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0)))) - exp2(_2870 * (isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0))))) * _2993)) - ((exp2(_2872 * _3004) - exp2(_2872 * _3005)) * _2993))) + (_2865 * cbSceneParam._m0[80u].z);
        }
        vec4 _3051 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2782, _2783, 1.0), 0.0);
        float _3060 = exp2((_3049 * (-1.44269502162933349609375)) * (1.0 - _3051.w));
        float _3061 = log2(_3060);
        float _3077 = log2(_2802);
        _2874 = (exp2(_3077 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3061 * cbSceneParam._m0[78u].x)) * _3051.x) / cbSceneParam._m0[78u].x)) + _2799;
        _2876 = (exp2(_3077 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3061 * cbSceneParam._m0[78u].y)) * _3051.y) / cbSceneParam._m0[78u].y)) + _2800;
        _2878 = (exp2(_3077 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3061 * cbSceneParam._m0[78u].z)) * _3051.z) / cbSceneParam._m0[78u].z)) + _2801;
        _2880 = _3060 * _2802;
    }
    else
    {
        _2874 = _2799;
        _2876 = _2800;
        _2878 = _2801;
        _2880 = _2802;
    }
    bool _3087;
    vec4 _2890;
    vec4 _2912;
    float _2914;
    float _2918;
    float _2919;
    float _2920;
    float _2921;
    bool _2931;
    for (;;)
    {
        _2890 = cbMatDynParam._m0[0u];
        float _2892 = roundEven(_2890.y);
        bool _2893 = _2892 == 3.0;
        float _2894 = log2(_2880);
        float _2901 = exp2(_2894 * cbSceneParam._m0[78u].x) * _2771;
        float _2902 = exp2(_2894 * cbSceneParam._m0[78u].y) * _2772;
        float _2903 = exp2(_2894 * cbSceneParam._m0[78u].z) * _2773;
        float _2910 = _626 + (-0.5);
        _2912 = cbMtdParam._m0[1u];
        _2914 = _2912.y * _2910;
        float _2917 = (_2892 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2918 = _2917 * (_2893 ? _2901 : (_2901 + (cbSceneParam._m0[72u].w * _2874)));
        _2919 = _2917 * (_2893 ? _2902 : (_2902 + (cbSceneParam._m0[72u].w * _2876)));
        _2920 = _2917 * (_2893 ? _2903 : (_2903 + (cbSceneParam._m0[72u].w * _2878)));
        _2921 = _2910 * 0.999000012874603271484375;
        _2931 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2931)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _2921) < 0.5)
            {
                _3087 = true;
                break;
            }
        }
        uint _3028 = _678 + uint(_2890.w);
        if ((cbInstanceData._m0[_3028].w < 1.0) && ((cbInstanceData._m0[_3028].w + _2921) < 0.5))
        {
            _3087 = true;
            break;
        }
        if ((_2914 + 1.0) < _2912.x)
        {
            _3087 = true;
            break;
        }
        _3087 = false;
        break;
    }
    float _3291;
    if (_3087)
    {
        discard_state = true;
        _3291 = 0.0;
    }
    else
    {
        _3291 = cbInstanceData._m0[_2774].w;
    }
    SV_Target.x = _2918;
    SV_Target.y = _2919;
    SV_Target.z = _2920;
    SV_Target.w = _3291;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2774].w;
    discard_exit();
}


