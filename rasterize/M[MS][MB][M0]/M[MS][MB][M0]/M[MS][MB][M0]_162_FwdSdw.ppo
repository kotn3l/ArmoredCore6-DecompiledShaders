#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1365;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3951 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3962 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3973 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _410 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _410) * cbMtdParam._m0[24u].x) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3984 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _435 = (_428 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _436 = (_428 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _437 = (_428 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) + _447;
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _298) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _299) + cbTextureTilingScale._m0[14u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _539 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _543 = _539.z;
    float _552 = ((_522.z - _543) * _428) + _543;
    float _555 = ((((_522.x - _541) * _428) + _541) * 2.0) + (-1.0);
    float _556 = ((((_522.y - _542) * _428) + _542) * 2.0) + (-1.0);
    float _557 = dot(vec2(_555, _556), vec2(_555, _556));
    float _3995 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _562 = sqrt(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))));
    float _565 = _555 + ((((_495.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _566 = _556 + ((((_495.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _569 = fma(_562, _248, fma(_566, _255, _565 * _241));
    float _572 = fma(_562, _249, fma(_566, _256, _565 * _242));
    float _575 = fma(_562, _250, fma(_566, _257, _565 * _243));
    float _579 = inversesqrt(dot(vec3(_569, _572, _575), vec3(_569, _572, _575)));
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _623 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _625 = _623.x;
    float _626 = 1.0 - _625;
    float _630 = ((_625 - _626) * cbMtdParam._m0[24u].z) + _626;
    float _632 = (cbMtdParam._m0[19u].x + dot(vec4(_579 * _569, _579 * _572, _579 * _575, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_630 * cbMtdParam._m0[21u].z);
    float _4006 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _635 = (-0.0) - cbMtdParam._m0[24u].y;
    float _637 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _637 : (isnan(_637) ? 1.0 : min(_637, 1.0));
    float _645 = _633 - ((_633 * TEXCOORD_8.x) * _638);
    float _646 = _633 - ((_633 * TEXCOORD_8.y) * _638);
    float _647 = _633 - ((_633 * TEXCOORD_8.z) * _638);
    float _654 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _658 = ((isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : min(_654, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _666 = (_658 - (((_630 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _658))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4037 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _671 = ((_645 * ((_475.x * cbMtdParam._m0[18u].x) - _454)) * _667) + _454;
    float _672 = ((_646 * ((_475.y * cbMtdParam._m0[18u].y) - _455)) * _667) + _455;
    float _673 = ((_647 * ((_475.z * cbMtdParam._m0[18u].z) - _456)) * _667) + _456;
    vec4 _685 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _687 = _685.x;
    float _688 = 1.0 - _687;
    float _713 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_687 - _688) * cbMtdParam._m0[24u].w) + _688) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4048 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _714 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _722 = ((((cbMtdParam._m0[10u].x - _671) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _714) + _671;
    float _723 = ((((cbMtdParam._m0[10u].y - _672) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _714) + _672;
    float _724 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _673)) * _714) + _673;
    float _729 = (((_495.z - _552) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _552;
    vec4 _743 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _750 = (_743.x * 2.0) + (-1.0);
    float _751 = (_743.y * 2.0) + (-1.0);
    float _752 = dot(vec2(_750, _751), vec2(_750, _751));
    float _4059 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _761 = (((_743.z - _729) * _645) * _667) + _729;
    float _764 = ((cbMtdParam._m0[23u].y - _761) * _714) + _761;
    vec4 _783 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _789 = (_783.x * 2.0) + (-1.0);
    float _790 = (_783.y * 2.0) + (-1.0);
    float _791 = dot(vec2(_789, _790), vec2(_789, _790));
    float _4070 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _811 = (((cbMtdParam._m0[21u].x * _565) + ((_750 - _565) * _645)) * _667) + _565;
    float _812 = (((cbMtdParam._m0[21u].x * _566) + ((_751 - _566) * _646)) * _667) + _566;
    float _813 = (((sqrt(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) - _562) * _647) * _667) + _562;
    float _824 = (((_789 - _811) + (_811 * cbMtdParam._m0[22u].z)) * _714) + _811;
    float _825 = (((_790 - _812) + (_812 * cbMtdParam._m0[22u].z)) * _714) + _812;
    float _826 = ((sqrt(1.0 - (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) - _813) * _714) + _813;
    float _830 = cbMtdParam._m0[22u].x + _595.w;
    float _833 = fma(_826, _248, fma(_825, _255, _824 * _241));
    float _836 = fma(_826, _249, fma(_825, _256, _824 * _242));
    float _839 = fma(_826, _250, fma(_825, _257, _824 * _243));
    float _843 = inversesqrt(dot(vec3(_833, _836, _839), vec3(_833, _836, _839)));
    float _844 = _843 * _833;
    float _845 = _843 * _836;
    float _846 = _843 * _839;
    float _4081 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _847 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4103 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _4114 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4125 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _865 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _916 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _906);
    float _917 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _906);
    float _918 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _906);
    float _922 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
    float _923 = _916 * _922;
    float _924 = _917 * _922;
    float _925 = _918 * _922;
    float _931 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _932 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _950 = fma(_846, cbSceneParam._m0[5u].z, fma(_845, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _844));
    float _953 = fma(_846, cbSceneParam._m0[6u].z, fma(_845, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _844));
    float _956 = fma(_846, cbSceneParam._m0[7u].z, fma(_845, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _844));
    uint _970 = (_279 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _976 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) * cbInstanceData._m0[_970].x;
    float _977 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * cbInstanceData._m0[_970].y;
    float _978 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) * cbInstanceData._m0[_970].z;
    float _4136 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _979 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _4147 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _980 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _981 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    vec4 _990 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _931, cbSceneParam._m0[86u].y * _932));
    float _994 = ((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * TEXCOORD_5.w) * _990.x;
    float _995 = dot(vec3(_844, _845, _846), vec3(_923, _924, _925));
    float _998 = _995 * 2.0;
    float _1002 = (_998 * _844) - _923;
    float _1003 = (_998 * _845) - _924;
    float _1004 = (_998 * _846) - _925;
    float _1008 = abs(dot(vec3(_923, _924, _925), vec3(_844, _845, _846)));
    float _4169 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1010 = sqrt(_847);
    float _1023 = exp2((_1010 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1010 * 3.0));
    float _1055 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1059 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1063 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1364;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1089 = fma(_1063, cbModelParam._m0[26u].z, fma(_1059, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055));
        float _1093 = fma(_1063, cbModelParam._m0[27u].z, fma(_1059, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055));
        float _1097 = fma(_1063, cbModelParam._m0[28u].z, fma(_1059, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055));
        float _1122 = _1055 + _844;
        float _1123 = _1059 + _845;
        float _1124 = _1063 + _846;
        float _1134 = fma(_1124, cbModelParam._m0[26u].z, fma(_1123, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1122)) - _1089;
        float _1135 = fma(_1124, cbModelParam._m0[27u].z, fma(_1123, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1122)) - _1093;
        float _1136 = fma(_1124, cbModelParam._m0[28u].z, fma(_1123, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1122)) - _1097;
        float _1140 = inversesqrt(dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136)));
        float _1153 = ((_1140 * _1134) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1089 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1140 * _1135) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1093 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1140 * _1136) / cbModelParam._m0[34u].z) + ((((((_1097 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        float _1192 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1158.x + (-0.5));
        float _1194 = _1192 * (_1158.y + (-0.5));
        float _1195 = _1192 * (_1158.z + (-0.5));
        float _1202 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1165.x + (-0.5));
        float _1204 = _1202 * (_1165.y + (-0.5));
        float _1205 = _1202 * (_1165.z + (-0.5));
        float _1212 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1172.x + (-0.5));
        float _1214 = _1212 * (_1172.y + (-0.5));
        float _1215 = _1212 * (_1172.z + (-0.5));
        float _1222 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1179.x + (-0.5));
        float _1224 = _1222 * (_1179.y + (-0.5));
        float _1225 = _1222 * (_1179.z + (-0.5));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = _1193 * 0.5;
        float _1230 = _1203 * 0.5;
        float _1231 = _1213 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1246 = (dot(vec3(_844, _845, _846), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1256 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _4217 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1258 + 1.0))) + _1263) * _1226;
        float _1273 = _1194 * 0.5;
        float _1274 = _1204 * 0.5;
        float _1275 = _1214 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_844, _845, _846), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4250 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1300 + 1.0))) + _1305) * _1227;
        float _1315 = _1195 * 0.5;
        float _1316 = _1205 * 0.5;
        float _1317 = _1215 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_844, _845, _846), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4261 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4272 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4283 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_1342 + 1.0))) + _1347) * _1228;
        _1364 = _1195;
        _1366 = _1194;
        _1367 = _1193;
        _1368 = _1205;
        _1369 = _1204;
        _1370 = _1203;
        _1371 = _1215;
        _1372 = _1214;
        _1373 = _1213;
        _1374 = _1228;
        _1375 = _1227;
        _1376 = _1226;
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    }
    else
    {
        _1364 = _1365;
        _1366 = _1365;
        _1367 = _1365;
        _1368 = _1365;
        _1369 = _1365;
        _1370 = _1365;
        _1371 = _1365;
        _1372 = _1365;
        _1373 = _1365;
        _1374 = _1365;
        _1375 = _1365;
        _1376 = _1365;
        _1377 = 0.0;
        _1378 = 0.0;
        _1379 = 0.0;
    }
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1404 = fma(_1063, cbModelParam._m0[30u].z, fma(_1059, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055));
        float _1408 = fma(_1063, cbModelParam._m0[31u].z, fma(_1059, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055));
        float _1412 = fma(_1063, cbModelParam._m0[32u].z, fma(_1059, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055));
        float _1435 = _1055 + _844;
        float _1436 = _1059 + _845;
        float _1437 = _1063 + _846;
        float _1447 = fma(_1437, cbModelParam._m0[30u].z, fma(_1436, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1435)) - _1404;
        float _1448 = fma(_1437, cbModelParam._m0[31u].z, fma(_1436, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1435)) - _1408;
        float _1449 = fma(_1437, cbModelParam._m0[32u].z, fma(_1436, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1435)) - _1412;
        float _1453 = inversesqrt(dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449)));
        float _1466 = ((_1453 * _1447) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1404 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1467 = ((_1453 * _1448) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1408 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1453 * _1449) / cbModelParam._m0[35u].z) + ((((((_1412 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1466, _1467, _1468), 0.0);
        float _1503 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1470.x + (-0.5));
        float _1505 = _1503 * (_1470.y + (-0.5));
        float _1506 = _1503 * (_1470.z + (-0.5));
        float _1513 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1477.x + (-0.5));
        float _1515 = _1513 * (_1477.y + (-0.5));
        float _1516 = _1513 * (_1477.z + (-0.5));
        float _1523 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1484.x + (-0.5));
        float _1525 = _1523 * (_1484.y + (-0.5));
        float _1526 = _1523 * (_1484.z + (-0.5));
        float _1533 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1491.x + (-0.5));
        float _1535 = _1533 * (_1491.y + (-0.5));
        float _1536 = _1533 * (_1491.z + (-0.5));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = _1504 * 0.5;
        float _1541 = _1514 * 0.5;
        float _1542 = _1524 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_844, _845, _846), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4346 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1567 + 1.0))) + _1572) * _1537;
        float _1582 = _1505 * 0.5;
        float _1583 = _1515 * 0.5;
        float _1584 = _1525 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_844, _845, _846), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4357 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4368 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4379 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_1609 + 1.0))) + _1614) * _1538;
        float _1624 = _1506 * 0.5;
        float _1625 = _1516 * 0.5;
        float _1626 = _1526 * 0.5;
        float _1627 = dot(vec3(_1624, _1625, _1626), vec3(_1624, _1625, _1626));
        float _1632 = (_1627 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1627);
        float _1640 = (dot(vec3(_844, _845, _846), vec3(_1632 * _1624, _1632 * _1625, _1632 * _1626)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1649 = sqrt(((_1625 * _1625) + (_1624 * _1624)) + (_1626 * _1626)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1651 = _1650 * 2.0;
        float _1655 = (1.0 - _1650) / (_1650 + 1.0);
        float _4412 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1665 = ((((1.0 - _1656) * (_1651 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1651 + 1.0))) + _1656) * _1539;
        _1673 = _1506;
        _1674 = _1505;
        _1675 = _1504;
        _1676 = _1516;
        _1677 = _1515;
        _1678 = _1514;
        _1679 = _1526;
        _1680 = _1525;
        _1681 = _1524;
        _1682 = _1539;
        _1683 = _1538;
        _1684 = _1537;
        _1685 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)));
    }
    else
    {
        _1673 = _1365;
        _1674 = _1365;
        _1675 = _1365;
        _1676 = _1365;
        _1677 = _1365;
        _1678 = _1365;
        _1679 = _1365;
        _1680 = _1365;
        _1681 = _1365;
        _1682 = _1365;
        _1683 = _1365;
        _1684 = _1365;
        _1685 = 0.0;
        _1686 = 0.0;
        _1687 = 0.0;
    }
    float _1697 = (cbModelParam._m0[1u].x * (_1685 - _1377)) + _1377;
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1378)) + _1378;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1379)) + _1379;
    float _1720 = fma(_1699, cbSceneParam._m0[89u].z, fma(_1698, cbSceneParam._m0[89u].y, _1697 * cbSceneParam._m0[89u].x));
    float _1723 = fma(_1699, cbSceneParam._m0[90u].z, fma(_1698, cbSceneParam._m0[90u].y, _1697 * cbSceneParam._m0[90u].x));
    float _1726 = fma(_1699, cbSceneParam._m0[91u].z, fma(_1698, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1697));
    float _1741 = _1002 * 0.5;
    float _1742 = _1003 * 0.5;
    float _1743 = _1004 * 0.5;
    float _1744 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1747 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1750 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1673, _1676, _1679, _1682));
    float _1784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1757 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1364, _1368, _1371, _1374));
        float _1761 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1366, _1369, _1372, _1375));
        float _1765 = dot(vec4(_1741, _1742, _1743, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1772 = dot(vec4(cbModelParam._m0[39u]), vec4(_1741, _1742, _1743, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1772) ? 0.0 : (isnan(0.0) ? _1772 : max(0.0, _1772))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1786 = dot(vec4(cbModelParam._m0[40u]), vec4(_1741, _1742, _1743, 1.0));
        _1795 = dot(vec3(isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1795 = 1.0;
    }
    float _1799 = (_1795 * cbModelParam._m0[1u].x) + (_1784 * (1.0 - cbModelParam._m0[1u].x));
    float _1809 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _847);
    float _1810 = isnan(_1809) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1809 : min(cbModelParam._m0[25u].z, _1809));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1857 = fma(_1063, cbModelParam._m0[13u].z, fma(_1059, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1055)) + cbModelParam._m0[13u].w;
        float _1861 = fma(_1063, cbModelParam._m0[14u].z, fma(_1059, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1055)) + cbModelParam._m0[14u].w;
        float _1865 = fma(_1063, cbModelParam._m0[15u].z, fma(_1059, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1055)) + cbModelParam._m0[15u].w;
        float _1868 = fma(_1004, cbModelParam._m0[13u].z, fma(_1003, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002));
        float _1871 = fma(_1004, cbModelParam._m0[14u].z, fma(_1003, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002));
        float _1874 = fma(_1004, cbModelParam._m0[15u].z, fma(_1003, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002));
        float _1902;
        if (_1868 > 0.0)
        {
            _1902 = abs((1.0 - _1857) / _1868);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1857 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1902 = frontier_phi_14_12_ladder;
        }
        float _2071;
        if (_1871 > 0.0)
        {
            _2071 = abs((1.0 - _1861) / _1871);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1861 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2071 = frontier_phi_23_19_ladder;
        }
        float _2366;
        if (_1874 > 0.0)
        {
            _2366 = abs((1.0 - _1865) / _1874);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1865 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2366 = frontier_phi_35_30_ladder;
        }
        float _2368 = isnan(_2071) ? _1902 : (isnan(_1902) ? _2071 : min(_1902, _2071));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1868) + _1857;
        float _2374 = (_2369 * _1871) + _1861;
        float _2375 = (_2369 * _1874) + _1865;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2378 = (-1.0) - _2376;
        float _2380 = _2376 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2375 > _2380) || ((_2375 < _2378) || ((_2374 > _2380) || ((_2374 < _2378) || ((_2373 < _2378) || (_2373 > _2380))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2520 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2375, cbModelParam._m0[9u].z, fma(_2374, cbModelParam._m0[9u].y, _2373 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2375, cbModelParam._m0[10u].z, fma(_2374, cbModelParam._m0[10u].y, _2373 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2375, cbModelParam._m0[11u].z, fma(_2374, cbModelParam._m0[11u].y, _2373 * cbModelParam._m0[11u].x))), _1810);
            frontier_phi_13_35_ladder = _2520.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2520.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2520.x * cbModelParam._m0[1u].y;
        }
        _1890 = frontier_phi_13_35_ladder_2;
        _1892 = frontier_phi_13_35_ladder_1;
        _1894 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1002, _1003, _1004), _1810);
        _1890 = _1878.x * cbModelParam._m0[1u].y;
        _1892 = _1878.y * cbModelParam._m0[1u].y;
        _1894 = _1878.z * cbModelParam._m0[1u].y;
    }
    float _1898 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _847);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1898 : min(cbModelParam._m0[25u].w, _1898));
    float _1988;
    float _1990;
    float _1992;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1952 = fma(_1063, cbModelParam._m0[21u].z, fma(_1059, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1055)) + cbModelParam._m0[21u].w;
        float _1956 = fma(_1063, cbModelParam._m0[22u].z, fma(_1059, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1055)) + cbModelParam._m0[22u].w;
        float _1960 = fma(_1063, cbModelParam._m0[23u].z, fma(_1059, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1055)) + cbModelParam._m0[23u].w;
        float _1963 = fma(_1004, cbModelParam._m0[21u].z, fma(_1003, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002));
        float _1966 = fma(_1004, cbModelParam._m0[22u].z, fma(_1003, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002));
        float _1969 = fma(_1004, cbModelParam._m0[23u].z, fma(_1003, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002));
        float _2076;
        if (_1963 > 0.0)
        {
            _2076 = abs((1.0 - _1952) / _1963);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1952 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2076 = frontier_phi_25_21_ladder;
        }
        float _2393;
        if (_1966 > 0.0)
        {
            _2393 = abs((1.0 - _1956) / _1966);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1956 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2393 = frontier_phi_37_32_ladder;
        }
        float _2720;
        if (_1969 > 0.0)
        {
            _2720 = abs((1.0 - _1960) / _1969);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1960 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2720 = frontier_phi_47_44_ladder;
        }
        float _2722 = isnan(_2393) ? _2076 : (isnan(_2076) ? _2393 : min(_2076, _2393));
        float _2723 = isnan(_2720) ? _2722 : (isnan(_2722) ? _2720 : min(_2722, _2720));
        float _2727 = (_2723 * _1963) + _1952;
        float _2728 = (_2723 * _1966) + _1956;
        float _2729 = (_2723 * _1969) + _1960;
        float _2730 = _2723 * 9.9999997473787516355514526367188e-05;
        float _2731 = (-1.0) - _2730;
        float _2733 = _2730 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2729 > _2733) || ((_2729 < _2731) || ((_2728 > _2733) || ((_2728 < _2731) || ((_2727 < _2731) || (_2727 > _2733))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2729, cbModelParam._m0[17u].z, fma(_2728, cbModelParam._m0[17u].y, _2727 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2729, cbModelParam._m0[18u].z, fma(_2728, cbModelParam._m0[18u].y, _2727 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2729, cbModelParam._m0[19u].z, fma(_2728, cbModelParam._m0[19u].y, _2727 * cbModelParam._m0[19u].x))), _1899);
            frontier_phi_22_47_ladder = _2847.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2847.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2847.x * cbModelParam._m0[1u].z;
        }
        _1988 = frontier_phi_22_47_ladder_2;
        _1990 = frontier_phi_22_47_ladder_1;
        _1992 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1972 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1002, _1003, _1004), _1899);
        _1988 = _1972.x * cbModelParam._m0[1u].z;
        _1990 = _1972.y * cbModelParam._m0[1u].z;
        _1992 = _1972.z * cbModelParam._m0[1u].z;
    }
    float _2004 = ((((1.0 - _1023) * ((_1010 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1023 * _1010)) * _994;
    float _2005 = _2004 * ((cbModelParam._m0[1u].w * (_1988 - _1890)) + _1890);
    float _2006 = _2004 * ((cbModelParam._m0[1u].w * (_1990 - _1892)) + _1892);
    float _2007 = _2004 * ((cbModelParam._m0[1u].w * (_1992 - _1894)) + _1894);
    float _2010 = fma(_2007, cbSceneParam._m0[89u].z, fma(_2006, cbSceneParam._m0[89u].y, _2005 * cbSceneParam._m0[89u].x));
    float _2013 = fma(_2007, cbSceneParam._m0[90u].z, fma(_2006, cbSceneParam._m0[90u].y, _2005 * cbSceneParam._m0[90u].x));
    float _2016 = fma(_2007, cbSceneParam._m0[91u].z, fma(_2006, cbSceneParam._m0[91u].y, _2005 * cbSceneParam._m0[91u].x));
    float _2050 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2062 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2063 = _2050 / _2062;
    float _2064 = _2054 / _2062;
    float _2065 = _2058 / _2062;
    float _2212;
    float _2213;
    float _2214;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2092 = ((uint(_2065 > cbSceneParam._m0[59u].y) + uint(_2065 > cbSceneParam._m0[59u].x)) + uint(_2065 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2093 = _2092 + 43u;
        uint _2101 = _2092 + 44u;
        uint _2109 = _2092 + 45u;
        uint _2117 = _2092 + 46u;
        float _2128 = fma(_2062, cbSceneParam._m0[_2093].w, fma(_2058, cbSceneParam._m0[_2093].z, fma(_2054, cbSceneParam._m0[_2093].y, _2050 * cbSceneParam._m0[_2093].x)));
        float _2132 = fma(_2062, cbSceneParam._m0[_2101].w, fma(_2058, cbSceneParam._m0[_2101].z, fma(_2054, cbSceneParam._m0[_2101].y, _2050 * cbSceneParam._m0[_2101].x)));
        float _2140 = fma(_2062, cbSceneParam._m0[_2117].w, fma(_2058, cbSceneParam._m0[_2117].z, fma(_2054, cbSceneParam._m0[_2117].y, _2050 * cbSceneParam._m0[_2117].x)));
        float _2145 = cbSceneParam._m0[33u].z * _2140;
        float _2147 = cbSceneParam._m0[33u].w * _2140;
        float _2150 = fma(_2062, cbSceneParam._m0[_2109].w, fma(_2058, cbSceneParam._m0[_2109].z, fma(_2054, cbSceneParam._m0[_2109].y, _2050 * cbSceneParam._m0[_2109].x))) / _2140;
        float _2198 = (cbSceneParam._m0[33u].x - sqrt(((_2064 * _2064) + (_2063 * _2063)) + (_2065 * _2065))) * cbSceneParam._m0[33u].y;
        float _4538 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2205 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2145 + _2128) / _2140, (_2147 + _2132) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2147 + _2128) / _2140, (_2132 - _2145) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 - _2145) / _2140, (_2132 - _2147) / _2140), _2150), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2128 - _2147) / _2140, (_2145 + _2132) / _2140), _2150), 0.0)).x), vec4(0.25)));
        _2212 = 1.0 - (_2205 * cbSceneParam._m0[34u].x);
        _2213 = 1.0 - (_2205 * cbSceneParam._m0[34u].y);
        _2214 = 1.0 - (_2205 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2212 = 1.0;
        _2213 = 1.0;
        _2214 = 1.0;
    }
    float _2278;
    float _2280;
    float _2282;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2266 = fma(_2062, cbSceneParam._m0[63u].w, fma(_2058, cbSceneParam._m0[63u].z, fma(_2054, cbSceneParam._m0[63u].y, _2050 * cbSceneParam._m0[63u].x)));
        float _2267 = fma(_2062, cbSceneParam._m0[60u].w, fma(_2058, cbSceneParam._m0[60u].z, fma(_2054, cbSceneParam._m0[60u].y, _2050 * cbSceneParam._m0[60u].x))) / _2266;
        float _2268 = fma(_2062, cbSceneParam._m0[61u].w, fma(_2058, cbSceneParam._m0[61u].z, fma(_2054, cbSceneParam._m0[61u].y, _2050 * cbSceneParam._m0[61u].x))) / _2266;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2267 >= cbSceneParam._m0[64u].x) && (_2268 >= cbSceneParam._m0[64u].y)) && (_2267 <= cbSceneParam._m0[64u].z)) && (_2268 <= cbSceneParam._m0[64u].w))
        {
            float _2406 = fma(_2062, cbSceneParam._m0[62u].w, fma(_2058, cbSceneParam._m0[62u].z, fma(_2054, cbSceneParam._m0[62u].y, _2050 * cbSceneParam._m0[62u].x))) / _2266;
            float _2410 = isnan(cbSceneParam._m0[41u].w) ? _2406 : (isnan(_2406) ? cbSceneParam._m0[41u].w : max(_2406, cbSceneParam._m0[41u].w));
            float _2453 = (cbSceneParam._m0[33u].x - sqrt(((_2064 * _2064) + (_2063 * _2063)) + (_2065 * _2065))) * cbSceneParam._m0[33u].y;
            float _4554 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
            float _2460 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2267, cbSceneParam._m0[33u].w + _2268), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2267, _2268 - cbSceneParam._m0[33u].z), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2267 - cbSceneParam._m0[33u].z, _2268 - cbSceneParam._m0[33u].w), _2410), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2267 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2268), _2410), 0.0)).x), vec4(0.25)));
            float _2464 = 1.0 - (_2460 * cbSceneParam._m0[34u].x);
            float _2465 = 1.0 - (_2460 * cbSceneParam._m0[34u].y);
            float _2466 = 1.0 - (_2460 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2466) ? _2214 : (isnan(_2214) ? _2466 : min(_2214, _2466));
            frontier_phi_34_33_ladder_1 = isnan(_2465) ? _2213 : (isnan(_2213) ? _2465 : min(_2213, _2465));
            frontier_phi_34_33_ladder_2 = isnan(_2464) ? _2212 : (isnan(_2212) ? _2464 : min(_2212, _2464));
        }
        else
        {
            frontier_phi_34_33_ladder = _2214;
            frontier_phi_34_33_ladder_1 = _2213;
            frontier_phi_34_33_ladder_2 = _2212;
        }
        _2278 = frontier_phi_34_33_ladder_2;
        _2280 = frontier_phi_34_33_ladder_1;
        _2282 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2278 = _2212;
        _2280 = _2213;
        _2282 = _2214;
    }
    uvec4 _2287 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2289 = _2287.x * 14u;
    uint _2290 = _2289 + 13u;
    float _2297 = _994 + (-1.0);
    float _2302 = (cbLight._m0[_2290].x * _2297) + 1.0;
    float _2303 = (cbLight._m0[_2290].y * _2297) + 1.0;
    float _2304 = (cbLight._m0[_2290].z * _2297) + 1.0;
    float _2305 = (cbLight._m0[_2290].w * _2297) + 1.0;
    uint _2306 = _2289 + 5u;
    float _2312 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
    uint _2316 = _2289 + 4u;
    float _2325 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
    uint _2329 = _2289 | 1u;
    float _2340 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_844, _845, _846));
    float _2343 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_844, _845, _846));
    float _4590 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _4601 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2348 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * 0.3183098733425140380859375;
    float _2350 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * 0.3183098733425140380859375;
    float _2357 = ((cbLight._m0[_2306].x * _2312) * _2350) + (((cbLight._m0[_2316].x * _2278) * _2325) * _2348);
    float _2358 = ((_2312 * cbLight._m0[_2306].y) * _2350) + (((cbLight._m0[_2316].y * _2280) * _2325) * _2348);
    float _2359 = ((_2312 * cbLight._m0[_2306].z) * _2350) + (((cbLight._m0[_2316].z * _2282) * _2325) * _2348);
    uvec4 _2363 = floatBitsToUint(cbLight._m0[_2289 + 12u]);
    bool _2365 = _2363.x == 0u;
    float _2467;
    float _2469;
    float _2471;
    if (_2365)
    {
        _2467 = _2357;
        _2469 = _2358;
        _2471 = _2359;
    }
    else
    {
        uint _2475 = _2289 + 6u;
        float _2491 = (dot(vec3(cbLight._m0[_2289 + 2u].xyz), vec3(_844, _845, _846)) * 0.5) + 0.5;
        float _2492 = _2491 * _2491;
        float _4612 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2493 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2494 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2467 = (((cbLight._m0[_2475].x * 0.3183098733425140380859375) * _2493) * _2494) + _2357;
        _2469 = (((cbLight._m0[_2475].y * 0.3183098733425140380859375) * _2493) * _2494) + _2358;
        _2471 = (((cbLight._m0[_2475].z * 0.3183098733425140380859375) * _2493) * _2494) + _2359;
    }
    bool _2474 = _2363.y == 0u;
    float _2529;
    float _2531;
    float _2533;
    if (_2474)
    {
        _2529 = _2467;
        _2531 = _2469;
        _2533 = _2471;
    }
    else
    {
        uint _2691 = _2289 + 7u;
        float _2707 = (dot(vec3(cbLight._m0[_2289 + 3u].xyz), vec3(_844, _845, _846)) * 0.5) + 0.5;
        float _2708 = _2707 * _2707;
        float _4628 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2709 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2710 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2529 = (((cbLight._m0[_2691].x * 0.3183098733425140380859375) * _2709) * _2710) + _2467;
        _2531 = (((cbLight._m0[_2691].y * 0.3183098733425140380859375) * _2709) * _2710) + _2469;
        _2533 = (((cbLight._m0[_2691].z * 0.3183098733425140380859375) * _2709) * _2710) + _2471;
    }
    uint _2536 = _2289 + 8u;
    float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _847) * 0.949999988079071044921875);
    float _2550 = _2549 * _2549;
    float _2551 = cbLight._m0[_2289].x + _923;
    float _2552 = cbLight._m0[_2289].y + _924;
    float _2553 = cbLight._m0[_2289].z + _925;
    float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
    float _2558 = _2557 * _2551;
    float _2559 = _2557 * _2552;
    float _2560 = _2557 * _2553;
    float _2561 = dot(vec3(_844, _845, _846), vec3(cbLight._m0[_2289].xyz));
    float _4644 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _4655 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _2565 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2566 = dot(vec3(_844, _845, _846), vec3(_2558, _2559, _2560));
    float _4666 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2569 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2570 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2558, _2559, _2560));
    float _4677 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2574 = _2550 * _2550;
    float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
    float _2589 = (exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2590 = 1.0 - _2550;
    float _2601 = (0.5 / (((_2565 * ((_2564 * _2590) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2590) + _2550) * _2564))) * _2564;
    float _4688 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2603 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
    uint _2617 = _2289 + 9u;
    float _2628 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2329].w)) * _847) * 0.949999988079071044921875);
    float _2629 = _2628 * _2628;
    float _2630 = cbLight._m0[_2329].x + _923;
    float _2631 = cbLight._m0[_2329].y + _924;
    float _2632 = cbLight._m0[_2329].z + _925;
    float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
    float _2637 = _2636 * _2630;
    float _2638 = _2636 * _2631;
    float _2639 = _2636 * _2632;
    float _2640 = dot(vec3(_844, _845, _846), vec3(cbLight._m0[_2329].xyz));
    float _4699 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2643 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
    float _2644 = dot(vec3(_844, _845, _846), vec3(_2637, _2638, _2639));
    float _4710 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2647 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _2648 = dot(vec3(cbLight._m0[_2329].xyz), vec3(_2637, _2638, _2639));
    float _4721 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2652 = _2629 * _2629;
    float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
    float _2665 = (exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2666 = 1.0 - _2629;
    float _2676 = (0.5 / (((_2565 * ((_2643 * _2666) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2666) + _2629) * _2643))) * _2643;
    float _4732 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2678 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
    float _2688 = (((_2665 * cbLight._m0[_2617].x) * _2678) * _2312) + ((((cbLight._m0[_2536].x * _2278) * _2589) * _2603) * _2325);
    float _2689 = (((_2665 * cbLight._m0[_2617].y) * _2678) * _2312) + ((((cbLight._m0[_2536].y * _2280) * _2589) * _2603) * _2325);
    float _2690 = (((_2665 * cbLight._m0[_2617].z) * _2678) * _2312) + ((((cbLight._m0[_2536].z * _2282) * _2589) * _2603) * _2325);
    float _2746;
    float _2748;
    float _2750;
    if (_2365)
    {
        _2746 = _2688;
        _2748 = _2689;
        _2750 = _2690;
    }
    else
    {
        uint _2752 = _2289 + 2u;
        uint _2756 = _2289 + 10u;
        float _2770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2752].w)) * _847) * 0.949999988079071044921875);
        float _2771 = _2770 * _2770;
        float _2772 = cbLight._m0[_2752].x + _923;
        float _2773 = cbLight._m0[_2752].y + _924;
        float _2774 = cbLight._m0[_2752].z + _925;
        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
        float _2779 = _2778 * _2772;
        float _2780 = _2778 * _2773;
        float _2781 = _2778 * _2774;
        float _2782 = dot(vec3(_844, _845, _846), vec3(cbLight._m0[_2752].xyz));
        float _4743 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _2786 = dot(vec3(_844, _845, _846), vec3(_2779, _2780, _2781));
        float _4754 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2790 = dot(vec3(cbLight._m0[_2752].xyz), vec3(_2779, _2780, _2781));
        float _4765 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2794 = _2771 * _2771;
        float _2798 = ((_2789 * _2789) * (_2794 + (-1.0))) + 1.0;
        float _2807 = (exp2(log2(1.0 - (isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2808 = 1.0 - _2771;
        float _2818 = (0.5 / (((_2565 * ((_2785 * _2808) + _2771)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2808) + _2771) * _2785))) * _2785;
        float _4776 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2820 = (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2794 / ((_2798 * _2798) * 3.141590118408203125));
        float _2821 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
        _2746 = (((_2807 * cbLight._m0[_2756].x) * _2820) * _2821) + _2688;
        _2748 = (((_2807 * cbLight._m0[_2756].y) * _2820) * _2821) + _2689;
        _2750 = (((_2807 * cbLight._m0[_2756].z) * _2820) * _2821) + _2690;
    }
    float _2852;
    float _2854;
    float _2856;
    if (_2474)
    {
        _2852 = _2746;
        _2854 = _2748;
        _2856 = _2750;
    }
    else
    {
        uint _2863 = _2289 + 3u;
        uint _2867 = _2289 + 11u;
        float _2881 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2863].w)) * _847) * 0.949999988079071044921875);
        float _2882 = _2881 * _2881;
        float _2883 = cbLight._m0[_2863].x + _923;
        float _2884 = cbLight._m0[_2863].y + _924;
        float _2885 = cbLight._m0[_2863].z + _925;
        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
        float _2890 = _2889 * _2883;
        float _2891 = _2889 * _2884;
        float _2892 = _2889 * _2885;
        float _2893 = dot(vec3(_844, _845, _846), vec3(cbLight._m0[_2863].xyz));
        float _4792 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2896 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2897 = dot(vec3(_844, _845, _846), vec3(_2890, _2891, _2892));
        float _4803 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2900 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2901 = dot(vec3(cbLight._m0[_2863].xyz), vec3(_2890, _2891, _2892));
        float _4814 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2905 = _2882 * _2882;
        float _2909 = ((_2900 * _2900) * (_2905 + (-1.0))) + 1.0;
        float _2918 = (exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2919 = 1.0 - _2882;
        float _2929 = (0.5 / (((_2565 * ((_2896 * _2919) + _2882)) + 9.9999999392252902907785028219223e-09) + (((_2565 * _2919) + _2882) * _2896))) * _2896;
        float _4825 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2931 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2905 / ((_2909 * _2909) * 3.141590118408203125));
        float _2932 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
        _2852 = (((_2918 * cbLight._m0[_2867].x) * _2931) * _2932) + _2746;
        _2854 = (((_2918 * cbLight._m0[_2867].y) * _2931) * _2932) + _2748;
        _2856 = (((_2918 * cbLight._m0[_2867].z) * _2931) * _2932) + _2750;
    }
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    if (_2287.y == 0u)
    {
        uvec4 _2953 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2954 = _2953.x;
        uint _2965 = uint((float(_2953.y) * floor(float(uint(cbSceneParam._m0[85u].y * _932) / _2954))) + floor(float(uint(cbSceneParam._m0[85u].x * _931) / _2954)));
        float _2975 = (log2(_2065 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2976 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        uint _2979 = uint(isnan(14.0) ? _2976 : (isnan(_2976) ? 14.0 : min(_2976, 14.0)));
        uvec4 _2984 = texelFetch(g_lightClusterGridBuffer, int(((_2979 << 2u) + (_2965 << 6u)) >> 2u));
        uint _2985 = _2984.x;
        uint _2986 = _2953.z;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        if (((((1u << ((_2986 >> 4u) & 15u)) + 4294967295u) & _2985) == 0u) || ((_2986 & 240u) == 0u))
        {
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
        }
        else
        {
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            uint _3215 = 0u;
            uint _3224;
            bool _3225;
            for (;;)
            {
                _3224 = texelFetch(g_lightClassification, int((((_2979 << 5u) + (_2965 << 9u)) + (_3215 << 2u)) >> 2u)).x;
                _3225 = _3224 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3225)
                {
                    frontier_phi_66_pred = _3214;
                    frontier_phi_66_pred_1 = _3213;
                    frontier_phi_66_pred_2 = _3212;
                    frontier_phi_66_pred_3 = _3211;
                    frontier_phi_66_pred_4 = _3210;
                    frontier_phi_66_pred_5 = _3209;
                }
                else
                {
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    float _3338;
                    uint _3339;
                    _3333 = _3209;
                    _3334 = _3210;
                    _3335 = _3211;
                    _3336 = _3212;
                    _3337 = _3213;
                    _3338 = _3214;
                    _3339 = _3224;
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    for (;;)
                    {
                        uint _3343 = uint(findLSB(_3339)) + (_3215 << 5u);
                        uint _3340 = (_3339 + 4294967295u) & _3339;
                        uint _3345 = _3343 * 48u;
                        vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3345)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 3u)).x));
                        uint _3365 = (_3343 * 48u) + 4u;
                        vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3365)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 3u)).x));
                        uint _3384 = (_3343 * 48u) + 8u;
                        vec3 _3395 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3384)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 2u)).x));
                        float _3399 = _3359.x - _2063;
                        float _3400 = _3359.y - _2064;
                        float _3401 = _3359.z - _2065;
                        float _3402 = dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401));
                        float _3405 = inversesqrt(_3402);
                        float _3406 = _3405 * _3399;
                        float _3407 = _3405 * _3400;
                        float _3408 = _3405 * _3401;
                        float _3409 = dot(vec3(_950, _953, _956), vec3(_3406, _3407, _3408));
                        float _3414 = 1.0 - (_3402 * _3359.w);
                        float _4851 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3415 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                        float _3416 = sqrt(_3402) * _3378.w;
                        float _3419 = 1.39999997615814208984375 / (_3416 + 1.39999997615814208984375);
                        float _3420 = _3419 * _3419;
                        float _3423 = ((1.0 - _3420) * _3409) + _3420;
                        float _3426 = _3416 * _3416;
                        float _3430 = ((isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0))) * _3415) / ((_3426 * 0.699999988079071044921875) + 1.0);
                        float _3434 = (-0.0) - _2063;
                        float _3435 = (-0.0) - _2064;
                        float _3436 = (-0.0) - _2065;
                        float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                        float _3441 = _3440 * _3434;
                        float _3442 = _3440 * _3435;
                        float _3443 = _3440 * _3436;
                        float _3450 = exp2(log2(1.0 / ((_3426 * 3.5) + 5.0)) * 0.25);
                        float _3451 = 1.0 - _1010;
                        float _3458 = sqrt(1.0 - ((1.0 - (_3451 * _3451)) * (1.0 - (_3450 * _3450))));
                        float _3459 = _3458 * _3458;
                        float _3460 = _3459 * _3459;
                        float _3461 = _3441 + _3406;
                        float _3462 = _3442 + _3407;
                        float _3463 = _3443 + _3408;
                        float _3467 = inversesqrt(dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463)));
                        float _3471 = dot(vec3(_950, _953, _956), vec3(_3441, _3442, _3443));
                        float _4867 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3474 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3475 = dot(vec3(_950, _953, _956), vec3(_3467 * _3461, _3467 * _3462, _3467 * _3463));
                        float _4878 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3478 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                        float _3482 = ((_3478 * _3478) * (_3460 + (-1.0))) + 1.0;
                        float _3483 = _3419 * _3459;
                        float _3484 = _3483 * _3483;
                        float _3487 = ((1.0 - _3484) * _3409) + _3484;
                        float _4889 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3488 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3489 = 1.0 - _3459;
                        float _3499 = (0.5 / (((_3488 * ((_3474 * _3489) + _3459)) + 9.9999999392252902907785028219223e-09) + (((_3488 * _3489) + _3459) * _3474))) * _3488;
                        float _4900 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3510 = (((_3460 * 3.1415927410125732421875) * (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) / ((_3482 * _3482) * ((_3426 * 2.1991131305694580078125) + 3.141590118408203125))) * _3415;
                        _3268 = (_3430 * _3378.x) + _3336;
                        _3269 = (_3430 * _3378.y) + _3337;
                        _3270 = (_3430 * _3378.z) + _3338;
                        _3265 = (_3510 * _3395.x) + _3333;
                        _3266 = (_3510 * _3395.y) + _3334;
                        _3267 = (_3510 * _3395.z) + _3335;
                        if (_3340 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3333 = _3265;
                            _3334 = _3266;
                            _3335 = _3267;
                            _3336 = _3268;
                            _3337 = _3269;
                            _3338 = _3270;
                            _3339 = _3340;
                        }
                    }
                    frontier_phi_66_pred = _3270;
                    frontier_phi_66_pred_1 = _3269;
                    frontier_phi_66_pred_2 = _3268;
                    frontier_phi_66_pred_3 = _3267;
                    frontier_phi_66_pred_4 = _3266;
                    frontier_phi_66_pred_5 = _3265;
                }
                _3076 = frontier_phi_66_pred;
                _3074 = frontier_phi_66_pred_1;
                _3072 = frontier_phi_66_pred_2;
                _3070 = frontier_phi_66_pred_3;
                _3068 = frontier_phi_66_pred_4;
                _3066 = frontier_phi_66_pred_5;
                uint _3216 = _3215 + 1u;
                if (_3216 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3209 = _3066;
                    _3210 = _3068;
                    _3211 = _3070;
                    _3212 = _3072;
                    _3213 = _3074;
                    _3214 = _3076;
                    _3215 = _3216;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
        }
        uvec4 _3079 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3080 = _3079.z;
        uint _3082 = (_3080 >> 8u) & 15u;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        if (((4294967295u << _3082) & _2985) == 0u)
        {
            _3177 = _3065;
            _3179 = _3067;
            _3181 = _3069;
            _3183 = _3071;
            _3185 = _3073;
            _3187 = _3075;
        }
        else
        {
            float _3202 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
            float _3203 = _3202 * _2063;
            float _3204 = _3202 * _2064;
            float _3205 = _3202 * _2065;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3082 < ((_3080 >> 12u) & 15u))
            {
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3316 = _3065;
                float _3317 = _3067;
                float _3318 = _3069;
                float _3319 = _3071;
                float _3320 = _3073;
                float _3321 = _3075;
                uint _3322 = _3082;
                uint _3331;
                bool _3332;
                for (;;)
                {
                    _3331 = texelFetch(g_lightClassification, int((((_2979 << 5u) + (_2965 << 9u)) + (_3322 << 2u)) >> 2u)).x;
                    _3332 = _3331 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3332)
                    {
                        frontier_phi_72_pred = _3321;
                        frontier_phi_72_pred_1 = _3320;
                        frontier_phi_72_pred_2 = _3319;
                        frontier_phi_72_pred_3 = _3318;
                        frontier_phi_72_pred_4 = _3317;
                        frontier_phi_72_pred_5 = _3316;
                    }
                    else
                    {
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3528 = _3316;
                        float _3529 = _3317;
                        float _3530 = _3318;
                        float _3531 = _3319;
                        float _3532 = _3320;
                        float _3533 = _3321;
                        uint _3534 = _3331;
                        uint _3535;
                        vec4 _3560;
                        float _3561;
                        vec4 _3576;
                        vec3 _3588;
                        vec4 _3603;
                        vec4 _3618;
                        float _3664;
                        bool _3665;
                        for (;;)
                        {
                            uint _3545 = ((_3322 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3534));
                            _3535 = (_3534 + 4294967295u) & _3534;
                            uint _3547 = _3545 * 40u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            _3561 = _3560.w;
                            uint _3563 = (_3545 * 40u) + 4u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3545 * 40u) + 8u;
                            _3588 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x));
                            uint _3590 = (_3545 * 40u) + 16u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3545 * 40u) + 20u;
                            _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3620 = (_3545 * 40u) + 24u;
                            vec4 _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3639 = (_3545 * 40u) + 28u;
                            vec4 _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            _3664 = fma(_2065, _3652.z, fma(_2064, _3652.y, _3652.x * _2063)) + _3652.w;
                            _3665 = !((fma(_2065, _3633.z, fma(_2064, _3633.y, _3633.x * _2063)) + _3633.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3665)
                            {
                                float _3692 = _3560.x - _2063;
                                float _3693 = _3560.y - _2064;
                                float _3694 = _3560.z - _2065;
                                float _3695 = dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694));
                                float _3698 = inversesqrt(_3695);
                                float _3699 = _3698 * _3692;
                                float _3700 = _3698 * _3693;
                                float _3701 = _3698 * _3694;
                                float _3705 = 1.0 - (_3695 / (_3561 * _3561));
                                float _4911 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3710 = sqrt(_3695) * _3576.w;
                                float _3712 = 1.39999997615814208984375 / (_3710 + 1.39999997615814208984375);
                                float _3713 = _3712 * _3712;
                                float _3716 = ((1.0 - _3713) * dot(vec3(_3699, _3700, _3701), vec3(_950, _953, _956))) + _3713;
                                float _3719 = _3710 * _3710;
                                float _3723 = (fma(_2065, _3603.z, fma(_2064, _3603.y, _3603.x * _2063)) + _3603.w) / _3664;
                                float _3724 = (fma(_2065, _3618.z, fma(_2064, _3618.y, _3618.x * _2063)) + _3618.w) / _3664;
                                float _3728 = 1.0 - dot(vec2(_3723, _3724), vec2(_3723, _3724));
                                float _4927 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3730 = _3729 * (((isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0))) * _3706) / ((_3719 * 0.699999988079071044921875) + 1.0));
                                float _3742 = exp2(log2(1.0 / ((_3719 * 3.5) + 5.0)) * 0.25);
                                float _3743 = 1.0 - _1010;
                                float _3750 = sqrt(1.0 - ((1.0 - (_3743 * _3743)) * (1.0 - (_3742 * _3742))));
                                float _3751 = _3750 * _3750;
                                float _3752 = _3751 * _3751;
                                float _3753 = _3699 - _3203;
                                float _3754 = _3700 - _3204;
                                float _3755 = _3701 - _3205;
                                float _3759 = inversesqrt(dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755)));
                                float _3763 = dot(vec3(_950, _953, _956), vec3((-0.0) - _3203, (-0.0) - _3204, (-0.0) - _3205));
                                float _4938 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3767 = dot(vec3(_950, _953, _956), vec3(_3759 * _3753, _3759 * _3754, _3759 * _3755));
                                float _4949 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3770 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3774 = ((_3770 * _3770) * (_3752 + (-1.0))) + 1.0;
                                float _3775 = _3712 * _3751;
                                float _3776 = _3775 * _3775;
                                float _3782 = ((1.0 - _3776) * dot(vec3(_950, _953, _956), vec3(_3699, _3700, _3701))) + _3776;
                                float _4960 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3784 = 1.0 - _3751;
                                float _3794 = (0.5 / (((_3783 * ((_3766 * _3784) + _3751)) + 9.9999999392252902907785028219223e-09) + (((_3783 * _3784) + _3751) * _3766))) * _3783;
                                float _4971 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3804 = (_3729 * _3706) * (((_3752 * 3.1415927410125732421875) * (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0)))) / ((_3774 * _3774) * ((_3719 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3730 * _3576.y;
                                frontier_phi_78_pred_1 = _3730 * _3576.x;
                                frontier_phi_78_pred_2 = _3804 * _3588.z;
                                frontier_phi_78_pred_3 = _3804 * _3588.y;
                                frontier_phi_78_pred_4 = _3804 * _3588.x;
                                frontier_phi_78_pred_5 = _3730 * _3576.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3812 = frontier_phi_78_pred;
                            _3811 = frontier_phi_78_pred_1;
                            _3810 = frontier_phi_78_pred_2;
                            _3809 = frontier_phi_78_pred_3;
                            _3808 = frontier_phi_78_pred_4;
                            _3813 = frontier_phi_78_pred_5;
                            _3518 = _3811 + _3531;
                            _3519 = _3812 + _3532;
                            _3520 = _3813 + _3533;
                            _3515 = _3808 + _3528;
                            _3516 = _3809 + _3529;
                            _3517 = _3810 + _3530;
                            if (_3535 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3535;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3520;
                        frontier_phi_72_pred_1 = _3519;
                        frontier_phi_72_pred_2 = _3518;
                        frontier_phi_72_pred_3 = _3517;
                        frontier_phi_72_pred_4 = _3516;
                        frontier_phi_72_pred_5 = _3515;
                    }
                    _3188 = frontier_phi_72_pred;
                    _3186 = frontier_phi_72_pred_1;
                    _3184 = frontier_phi_72_pred_2;
                    _3182 = frontier_phi_72_pred_3;
                    _3180 = frontier_phi_72_pred_4;
                    _3178 = frontier_phi_72_pred_5;
                    uint _3323 = _3322 + 1u;
                    if (_3323 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3316 = _3178;
                        _3317 = _3180;
                        _3318 = _3182;
                        _3319 = _3184;
                        _3320 = _3186;
                        _3321 = _3188;
                        _3322 = _3323;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3188;
                frontier_phi_60_61_ladder_1 = _3186;
                frontier_phi_60_61_ladder_2 = _3182;
                frontier_phi_60_61_ladder_3 = _3180;
                frontier_phi_60_61_ladder_4 = _3178;
                frontier_phi_60_61_ladder_5 = _3184;
            }
            else
            {
                frontier_phi_60_61_ladder = _3075;
                frontier_phi_60_61_ladder_1 = _3073;
                frontier_phi_60_61_ladder_2 = _3069;
                frontier_phi_60_61_ladder_3 = _3067;
                frontier_phi_60_61_ladder_4 = _3065;
                frontier_phi_60_61_ladder_5 = _3071;
            }
            _3177 = frontier_phi_60_61_ladder_4;
            _3179 = frontier_phi_60_61_ladder_3;
            _3181 = frontier_phi_60_61_ladder_2;
            _3183 = frontier_phi_60_61_ladder_5;
            _3185 = frontier_phi_60_61_ladder_1;
            _3187 = frontier_phi_60_61_ladder;
        }
        float _3192 = isnan(1.0) ? _994 : (isnan(_994) ? 1.0 : min(_994, 1.0));
        _2998 = (_3192 * _3183) + _2529;
        _3000 = (_3192 * _3185) + _2531;
        _3002 = (_3192 * _3187) + _2533;
        _3004 = ((_3177 * 0.039999999105930328369140625) * _3192) + _2852;
        _3006 = ((_3179 * 0.039999999105930328369140625) * _3192) + _2854;
        _3008 = ((_3181 * 0.039999999105930328369140625) * _3192) + _2856;
    }
    else
    {
        _2998 = _2529;
        _3000 = _2531;
        _3002 = _2533;
        _3004 = _2852;
        _3006 = _2854;
        _3008 = _2856;
    }
    float _4987 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4998 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _5009 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    uint _3028 = _279 + 6u;
    float _3036 = _931 / cbSceneParam._m0[86u].x;
    float _3037 = _932 / cbSceneParam._m0[86u].y;
    vec4 _3051 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3036, _3037, (log2((isnan(cbSceneParam._m0[77u].w) ? _865 : (isnan(_865) ? cbSceneParam._m0[77u].w : min(_865, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3053 = _3051.x;
    float _3054 = _3051.y;
    float _3055 = _3051.z;
    float _3056 = _3051.w;
    float _3127;
    float _3129;
    float _3131;
    float _3133;
    if (_865 > cbSceneParam._m0[78u].w)
    {
        float _3090 = isnan(_865) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _865 : min(cbSceneParam._m0[80u].w, _865));
        float _3091 = _3090 / _865;
        float _3102 = _3091 * _916;
        float _3103 = _917 * _3091;
        float _3104 = (-0.0) - _3103;
        float _3105 = _3091 * _918;
        float _3107 = (cbSceneParam._m0[77u].w * _3104) / _3090;
        float _3108 = _3107 + cbSceneParam._m0[79u].w;
        float _3109 = cbSceneParam._m0[79u].w - _3103;
        float _3115 = sqrt(((_3102 * _3102) + (_3103 * _3103)) + (_3105 * _3105));
        float _3118 = (1.0 - (cbSceneParam._m0[77u].w / _3090)) * _3115;
        float _3123 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3125 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3278;
        if (abs((_3104 - _3107) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3278 = ((((_3108 > 0.0) ? exp2(_3123 * _3108) : (2.0 - exp2(_3125 * _3108))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3118;
        }
        else
        {
            float _3238 = 1.0 / cbSceneParam._m0[80u].x;
            float _3239 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : max(_3108, _3109));
            float _3240 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : min(_3108, _3109));
            float _3249 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : min(_3239, 0.0));
            float _3250 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : min(_3240, 0.0));
            _3278 = ((abs(_3115 / _3104) * cbSceneParam._m0[80u].y) * ((((_3249 - _3250) * 2.0) - ((exp2(_3123 * (isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0)))) - exp2(_3123 * (isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))))) * _3238)) - ((exp2(_3125 * _3249) - exp2(_3125 * _3250)) * _3238))) + (_3118 * cbSceneParam._m0[80u].z);
        }
        vec4 _3280 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3036, _3037, 1.0), 0.0);
        float _3289 = exp2((_3278 * (-1.44269502162933349609375)) * (1.0 - _3280.w));
        float _3290 = log2(_3289);
        float _3306 = log2(_3056);
        _3127 = (exp2(_3306 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].x)) * _3280.x) / cbSceneParam._m0[78u].x)) + _3053;
        _3129 = (exp2(_3306 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].y)) * _3280.y) / cbSceneParam._m0[78u].y)) + _3054;
        _3131 = (exp2(_3306 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3290 * cbSceneParam._m0[78u].z)) * _3280.z) / cbSceneParam._m0[78u].z)) + _3055;
        _3133 = _3289 * _3056;
    }
    else
    {
        _3127 = _3053;
        _3129 = _3054;
        _3131 = _3055;
        _3133 = _3056;
    }
    float _3145 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3146 = _3145 == 3.0;
    float _3147 = log2(_3133);
    float _3154 = exp2(_3147 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_2998 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _994))) + ((_3004 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1799)) * cbPerFrame._m0[3u].x));
    float _3155 = exp2(_3147 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_3000 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _994))) + ((_3006 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1799)) * cbPerFrame._m0[3u].x));
    float _3156 = exp2(_3147 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_3002 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _994))) + ((_3008 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1799)) * cbPerFrame._m0[3u].x));
    float _3165 = (_3145 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3165 * (_3146 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3127)));
    SV_Target.y = _3165 * (_3146 ? _3155 : (_3155 + (cbSceneParam._m0[72u].w * _3129)));
    SV_Target.z = _3165 * (_3146 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3131)));
    SV_Target.w = cbInstanceData._m0[_3028].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3028].w;
}


