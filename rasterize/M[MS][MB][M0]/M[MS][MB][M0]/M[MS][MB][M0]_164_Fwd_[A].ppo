#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1423;
float _3780;
float _3781;
float _3782;
float _3783;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _241 = _240 * _232;
    float _242 = _240 * _233;
    float _243 = _240 * _234;
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = _247 * NORMAL.x;
    float _249 = _247 * NORMAL.y;
    float _250 = _247 * NORMAL.z;
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = _254 * TANGENT.x;
    float _256 = _254 * TANGENT.y;
    float _257 = _254 * TANGENT.z;
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3792 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _3803 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3814 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    uint _279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _284 = _279 + 1u;
    uint _288 = _279 + 2u;
    float _297 = sqrt(((cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x) + (cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x)) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x));
    float _298 = _297 * TEXCOORD.z;
    float _299 = _297 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _298) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _299) + cbTextureTilingScale._m0[13u].w));
    vec4 _336 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _298) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _299) + cbTextureTilingScale._m0[5u].w));
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _410 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_400 - _410) * cbMtdParam._m0[24u].x) + _410) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3825 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _435 = (_428 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _436 = (_428 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _437 = (_428 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    float _441 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _312.x) * _435;
    float _444 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _312.y) * _436;
    float _447 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _312.z) * _437;
    float _454 = ((_435 - _441) * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) + _441;
    float _455 = ((_436 - _444) * (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) + _444;
    float _456 = ((_437 - _447) * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) + _447;
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _298) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _299) + cbTextureTilingScale._m0[14u].w));
    vec4 _495 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _298) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _299) + cbTextureTilingScale._m0[20u].w));
    vec4 _522 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _298) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _299) + cbTextureTilingScale._m0[4u].w));
    vec4 _539 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _541 = _539.x;
    float _542 = _539.y;
    float _543 = _539.z;
    float _552 = ((_522.z - _543) * _428) + _543;
    float _555 = ((((_522.x - _541) * _428) + _541) * 2.0) + (-1.0);
    float _556 = ((((_522.y - _542) * _428) + _542) * 2.0) + (-1.0);
    float _557 = dot(vec2(_555, _556), vec2(_555, _556));
    float _3836 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _562 = sqrt(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))));
    vec4 _582 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _594 = (_555 + ((((_495.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_582.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _595 = (_556 + ((((_495.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_582.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _598 = fma(_562, _248, fma(_595, _255, _594 * _241));
    float _601 = fma(_562, _249, fma(_595, _256, _594 * _242));
    float _604 = fma(_562, _250, fma(_595, _257, _594 * _243));
    float _608 = inversesqrt(dot(vec3(_598, _601, _604), vec3(_598, _601, _604)));
    vec4 _637 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _298) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _299) + cbTextureTilingScale._m0[11u].w));
    float _639 = _637.x;
    float _640 = 1.0 - _639;
    float _644 = ((_639 - _640) * cbMtdParam._m0[24u].z) + _640;
    float _646 = (cbMtdParam._m0[19u].x + dot(vec4(_608 * _598, _608 * _601, _608 * _604, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_644 * cbMtdParam._m0[21u].z);
    float _3847 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _647 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _649 = (-0.0) - cbMtdParam._m0[24u].y;
    float _651 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _651 : (isnan(_651) ? 1.0 : min(_651, 1.0));
    float _659 = _647 - ((_647 * TEXCOORD_8.x) * _652);
    float _660 = _647 - ((_647 * TEXCOORD_8.y) * _652);
    float _661 = _647 - ((_647 * TEXCOORD_8.z) * _652);
    float _668 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _672 = ((isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : min(_668, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _680 = (_672 - (((_644 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _672))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3878 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _685 = ((_659 * ((_475.x * cbMtdParam._m0[18u].x) - _454)) * _681) + _454;
    float _686 = ((_660 * ((_475.y * cbMtdParam._m0[18u].y) - _455)) * _681) + _455;
    float _687 = ((_661 * ((_475.z * cbMtdParam._m0[18u].z) - _456)) * _681) + _456;
    vec4 _699 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _298) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _299) + cbTextureTilingScale._m0[19u].w));
    float _701 = _699.x;
    float _702 = 1.0 - _701;
    float _727 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_701 - _702) * cbMtdParam._m0[24u].w) + _702) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3889 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _728 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _736 = ((((cbMtdParam._m0[10u].x - _685) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _728) + _685;
    float _737 = ((((cbMtdParam._m0[10u].y - _686) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _728) + _686;
    float _738 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _687)) * _728) + _687;
    float _743 = (((_495.z - _552) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _552;
    float _747 = ((_582.z - _743) * cbMtdParam._m0[19u].w) + _743;
    vec4 _761 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _298) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _299) + cbTextureTilingScale._m0[15u].w));
    float _768 = (_761.x * 2.0) + (-1.0);
    float _769 = (_761.y * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _3900 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _779 = (((_761.z - _747) * _659) * _681) + _747;
    float _782 = ((cbMtdParam._m0[23u].y - _779) * _728) + _779;
    vec4 _801 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _298) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _299) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _807 = (_801.x * 2.0) + (-1.0);
    float _808 = (_801.y * 2.0) + (-1.0);
    float _809 = dot(vec2(_807, _808), vec2(_807, _808));
    float _3911 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _829 = (((cbMtdParam._m0[21u].x * _594) + ((_768 - _594) * _659)) * _681) + _594;
    float _830 = (((cbMtdParam._m0[21u].x * _595) + ((_769 - _595) * _660)) * _681) + _595;
    float _831 = (((sqrt(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) - _562) * _661) * _681) + _562;
    float _842 = (((_807 - _829) + (_829 * cbMtdParam._m0[22u].z)) * _728) + _829;
    float _843 = (((_808 - _830) + (_830 * cbMtdParam._m0[22u].z)) * _728) + _830;
    float _844 = ((sqrt(1.0 - (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) - _831) * _728) + _831;
    float _848 = cbMtdParam._m0[22u].x + _582.w;
    float _851 = fma(_844, _248, fma(_843, _255, _842 * _241));
    float _854 = fma(_844, _249, fma(_843, _256, _842 * _242));
    float _857 = fma(_844, _250, fma(_843, _257, _842 * _243));
    float _861 = inversesqrt(dot(vec3(_851, _854, _857), vec3(_851, _854, _857)));
    float _862 = _861 * _851;
    float _863 = _861 * _854;
    float _864 = _861 * _857;
    float _3922 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _865 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _3944 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _3955 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3966 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _883 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _934 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _924);
    float _935 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _924);
    float _936 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _924);
    float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
    float _941 = _934 * _940;
    float _942 = _935 * _940;
    float _943 = _936 * _940;
    vec4 _948 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _950 = _948.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1104 = sqrt(((_934 * _934) + (_935 * _935)) + (_936 * _936));
        float _1110 = (cbMatDynParam._m0[5u].x * _1104) + cbMatDynParam._m0[5u].y;
        float _3977 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1115 = (cbMatDynParam._m0[5u].z * _1104) + cbMatDynParam._m0[5u].w;
        float _3988 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) - _1111)) + _1111) < ((_950 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _961 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _962 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _980 = fma(_864, cbSceneParam._m0[5u].z, fma(_863, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _862));
    float _983 = fma(_864, cbSceneParam._m0[6u].z, fma(_863, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _862));
    float _986 = fma(_864, cbSceneParam._m0[7u].z, fma(_863, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _862));
    uint _999 = _279 + 9u;
    uint _1000 = _999 + uint(cbMatDynParam._m0[0u].w);
    float _1006 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_1000].x;
    float _1007 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * cbInstanceData._m0[_1000].y;
    float _1008 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * cbInstanceData._m0[_1000].z;
    float _3999 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1009 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _4010 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    vec4 _1020 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _961, cbSceneParam._m0[86u].y * _962));
    float _1024 = ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * TEXCOORD_5.w) * _1020.x;
    float _1025 = dot(vec3(_862, _863, _864), vec3(_941, _942, _943));
    float _1028 = _1025 * 2.0;
    float _1032 = (_1028 * _862) - _941;
    float _1033 = (_1028 * _863) - _942;
    float _1034 = (_1028 * _864) - _943;
    float _1038 = abs(dot(vec3(_941, _942, _943), vec3(_862, _863, _864)));
    float _4032 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _1040 = sqrt(_865);
    float _1053 = exp2((_1040 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1040 * 3.0));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1422;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1147 = fma(_1093, cbModelParam._m0[26u].z, fma(_1089, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1085));
        float _1151 = fma(_1093, cbModelParam._m0[27u].z, fma(_1089, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1085));
        float _1155 = fma(_1093, cbModelParam._m0[28u].z, fma(_1089, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1085));
        float _1180 = _1085 + _862;
        float _1181 = _1089 + _863;
        float _1182 = _1093 + _864;
        float _1192 = fma(_1182, cbModelParam._m0[26u].z, fma(_1181, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1180)) - _1147;
        float _1193 = fma(_1182, cbModelParam._m0[27u].z, fma(_1181, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1180)) - _1151;
        float _1194 = fma(_1182, cbModelParam._m0[28u].z, fma(_1181, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1180)) - _1155;
        float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
        float _1211 = ((_1198 * _1192) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1147 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1198 * _1193) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1151 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1198 * _1194) / cbModelParam._m0[34u].z) + ((((((_1155 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1216 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        float _1250 = exp2((_1216.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1216.x + (-0.5));
        float _1252 = _1250 * (_1216.y + (-0.5));
        float _1253 = _1250 * (_1216.z + (-0.5));
        float _1260 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1223.x + (-0.5));
        float _1262 = _1260 * (_1223.y + (-0.5));
        float _1263 = _1260 * (_1223.z + (-0.5));
        float _1270 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1230.x + (-0.5));
        float _1272 = _1270 * (_1230.y + (-0.5));
        float _1273 = _1270 * (_1230.z + (-0.5));
        float _1280 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1237.x + (-0.5));
        float _1282 = _1280 * (_1237.y + (-0.5));
        float _1283 = _1280 * (_1237.z + (-0.5));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = _1251 * 0.5;
        float _1288 = _1261 * 0.5;
        float _1289 = _1271 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1304 = (dot(vec3(_862, _863, _864), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1314 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4080 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1316 + 1.0))) + _1321) * _1284;
        float _1331 = _1252 * 0.5;
        float _1332 = _1262 * 0.5;
        float _1333 = _1272 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_862, _863, _864), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4113 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1358 + 1.0))) + _1363) * _1285;
        float _1373 = _1253 * 0.5;
        float _1374 = _1263 * 0.5;
        float _1375 = _1273 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_862, _863, _864), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4146 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1400 + 1.0))) + _1405) * _1286;
        _1422 = _1253;
        _1424 = _1252;
        _1425 = _1251;
        _1426 = _1263;
        _1427 = _1262;
        _1428 = _1261;
        _1429 = _1273;
        _1430 = _1272;
        _1431 = _1271;
        _1432 = _1286;
        _1433 = _1285;
        _1434 = _1284;
        _1435 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1423;
        _1424 = _1423;
        _1425 = _1423;
        _1426 = _1423;
        _1427 = _1423;
        _1428 = _1423;
        _1429 = _1423;
        _1430 = _1423;
        _1431 = _1423;
        _1432 = _1423;
        _1433 = _1423;
        _1434 = _1423;
        _1435 = 0.0;
        _1436 = 0.0;
        _1437 = 0.0;
    }
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1465 = fma(_1093, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1085));
        float _1469 = fma(_1093, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1085));
        float _1473 = fma(_1093, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1085));
        float _1496 = _1085 + _862;
        float _1497 = _1089 + _863;
        float _1498 = _1093 + _864;
        float _1508 = fma(_1498, cbModelParam._m0[30u].z, fma(_1497, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1496)) - _1465;
        float _1509 = fma(_1498, cbModelParam._m0[31u].z, fma(_1497, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1496)) - _1469;
        float _1510 = fma(_1498, cbModelParam._m0[32u].z, fma(_1497, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1496)) - _1473;
        float _1514 = inversesqrt(dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510)));
        float _1527 = ((_1514 * _1508) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1465 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1528 = ((_1514 * _1509) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1469 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1514 * _1510) / cbModelParam._m0[35u].z) + ((((((_1473 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        float _1564 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1531.x + (-0.5));
        float _1566 = _1564 * (_1531.y + (-0.5));
        float _1567 = _1564 * (_1531.z + (-0.5));
        float _1574 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1538.x + (-0.5));
        float _1576 = _1574 * (_1538.y + (-0.5));
        float _1577 = _1574 * (_1538.z + (-0.5));
        float _1584 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1545.x + (-0.5));
        float _1586 = _1584 * (_1545.y + (-0.5));
        float _1587 = _1584 * (_1545.z + (-0.5));
        float _1594 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1552.x + (-0.5));
        float _1596 = _1594 * (_1552.y + (-0.5));
        float _1597 = _1594 * (_1552.z + (-0.5));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = _1565 * 0.5;
        float _1602 = _1575 * 0.5;
        float _1603 = _1585 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_862, _863, _864), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4209 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1628 + 1.0))) + _1633) * _1598;
        float _1643 = _1566 * 0.5;
        float _1644 = _1576 * 0.5;
        float _1645 = _1586 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_862, _863, _864), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4242 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1670 + 1.0))) + _1675) * _1599;
        float _1685 = _1567 * 0.5;
        float _1686 = _1577 * 0.5;
        float _1687 = _1587 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_862, _863, _864), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4275 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1712 + 1.0))) + _1717) * _1600;
        _1734 = _1567;
        _1735 = _1566;
        _1736 = _1565;
        _1737 = _1577;
        _1738 = _1576;
        _1739 = _1575;
        _1740 = _1587;
        _1741 = _1586;
        _1742 = _1585;
        _1743 = _1600;
        _1744 = _1599;
        _1745 = _1598;
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
    }
    else
    {
        _1734 = _1423;
        _1735 = _1423;
        _1736 = _1423;
        _1737 = _1423;
        _1738 = _1423;
        _1739 = _1423;
        _1740 = _1423;
        _1741 = _1423;
        _1742 = _1423;
        _1743 = _1423;
        _1744 = _1423;
        _1745 = _1423;
        _1746 = 0.0;
        _1747 = 0.0;
        _1748 = 0.0;
    }
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1435)) + _1435;
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1436)) + _1436;
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1437)) + _1437;
    float _1781 = fma(_1760, cbSceneParam._m0[89u].z, fma(_1759, cbSceneParam._m0[89u].y, _1758 * cbSceneParam._m0[89u].x));
    float _1784 = fma(_1760, cbSceneParam._m0[90u].z, fma(_1759, cbSceneParam._m0[90u].y, _1758 * cbSceneParam._m0[90u].x));
    float _1787 = fma(_1760, cbSceneParam._m0[91u].z, fma(_1759, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1758));
    float _1802 = _1032 * 0.5;
    float _1803 = _1033 * 0.5;
    float _1804 = _1034 * 0.5;
    float _1805 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1808 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1811 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1845;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1818 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1422, _1426, _1429, _1432));
        float _1822 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1424, _1427, _1430, _1433));
        float _1826 = dot(vec4(_1802, _1803, _1804, 1.0), vec4(_1425, _1428, _1431, _1434));
        float _1833 = dot(vec4(cbModelParam._m0[39u]), vec4(_1802, _1803, _1804, 1.0));
        _1845 = dot(vec3(isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1833) ? 0.0 : (isnan(0.0) ? _1833 : max(0.0, _1833))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1845 = 1.0;
    }
    float _1856;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1847 = dot(vec4(cbModelParam._m0[40u]), vec4(_1802, _1803, _1804, 1.0));
        _1856 = dot(vec3(isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)), isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1847) ? 0.0 : (isnan(0.0) ? _1847 : max(0.0, _1847))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1856 = 1.0;
    }
    float _1860 = (_1856 * cbModelParam._m0[1u].x) + (_1845 * (1.0 - cbModelParam._m0[1u].x));
    float _1870 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _865);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1870 : min(cbModelParam._m0[25u].z, _1870));
    float _1951;
    float _1953;
    float _1955;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1918 = fma(_1093, cbModelParam._m0[13u].z, fma(_1089, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085)) + cbModelParam._m0[13u].w;
        float _1922 = fma(_1093, cbModelParam._m0[14u].z, fma(_1089, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085)) + cbModelParam._m0[14u].w;
        float _1926 = fma(_1093, cbModelParam._m0[15u].z, fma(_1089, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085)) + cbModelParam._m0[15u].w;
        float _1929 = fma(_1034, cbModelParam._m0[13u].z, fma(_1033, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032));
        float _1932 = fma(_1034, cbModelParam._m0[14u].z, fma(_1033, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032));
        float _1935 = fma(_1034, cbModelParam._m0[15u].z, fma(_1033, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032));
        float _1963;
        if (_1929 > 0.0)
        {
            _1963 = abs((1.0 - _1918) / _1929);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1918 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1963 = frontier_phi_17_15_ladder;
        }
        float _2163;
        if (_1932 > 0.0)
        {
            _2163 = abs((1.0 - _1922) / _1932);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1922 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2163 = frontier_phi_26_22_ladder;
        }
        float _2406;
        if (_1935 > 0.0)
        {
            _2406 = abs((1.0 - _1926) / _1935);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1926 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2406 = frontier_phi_38_33_ladder;
        }
        float _2408 = isnan(_2163) ? _1963 : (isnan(_1963) ? _2163 : min(_1963, _2163));
        float _2409 = isnan(_2406) ? _2408 : (isnan(_2408) ? _2406 : min(_2408, _2406));
        float _2413 = (_2409 * _1929) + _1918;
        float _2414 = (_2409 * _1932) + _1922;
        float _2415 = (_2409 * _1935) + _1926;
        float _2416 = _2409 * 9.9999997473787516355514526367188e-05;
        float _2418 = (-1.0) - _2416;
        float _2420 = _2416 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2415 > _2420) || ((_2415 < _2418) || ((_2414 > _2420) || ((_2414 < _2418) || ((_2413 < _2418) || (_2413 > _2420))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2539 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2415, cbModelParam._m0[9u].z, fma(_2414, cbModelParam._m0[9u].y, _2413 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2415, cbModelParam._m0[10u].z, fma(_2414, cbModelParam._m0[10u].y, _2413 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2415, cbModelParam._m0[11u].z, fma(_2414, cbModelParam._m0[11u].y, _2413 * cbModelParam._m0[11u].x))), _1871);
            frontier_phi_16_38_ladder = _2539.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2539.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2539.x * cbModelParam._m0[1u].y;
        }
        _1951 = frontier_phi_16_38_ladder_2;
        _1953 = frontier_phi_16_38_ladder_1;
        _1955 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1939 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1032, _1033, _1034), _1871);
        _1951 = _1939.x * cbModelParam._m0[1u].y;
        _1953 = _1939.y * cbModelParam._m0[1u].y;
        _1955 = _1939.z * cbModelParam._m0[1u].y;
    }
    float _1959 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _865);
    float _1960 = isnan(_1959) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1959 : min(cbModelParam._m0[25u].w, _1959));
    float _2049;
    float _2051;
    float _2053;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2013 = fma(_1093, cbModelParam._m0[21u].z, fma(_1089, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085)) + cbModelParam._m0[21u].w;
        float _2017 = fma(_1093, cbModelParam._m0[22u].z, fma(_1089, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085)) + cbModelParam._m0[22u].w;
        float _2021 = fma(_1093, cbModelParam._m0[23u].z, fma(_1089, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085)) + cbModelParam._m0[23u].w;
        float _2024 = fma(_1034, cbModelParam._m0[21u].z, fma(_1033, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032));
        float _2027 = fma(_1034, cbModelParam._m0[22u].z, fma(_1033, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032));
        float _2030 = fma(_1034, cbModelParam._m0[23u].z, fma(_1033, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032));
        float _2168;
        if (_2024 > 0.0)
        {
            _2168 = abs((1.0 - _2013) / _2024);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2013 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2168 = frontier_phi_28_24_ladder;
        }
        float _2433;
        if (_2027 > 0.0)
        {
            _2433 = abs((1.0 - _2017) / _2027);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2017 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2433 = frontier_phi_40_35_ladder;
        }
        float _2638;
        if (_2030 > 0.0)
        {
            _2638 = abs((1.0 - _2021) / _2030);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2021 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2638 = frontier_phi_49_46_ladder;
        }
        float _2640 = isnan(_2433) ? _2168 : (isnan(_2168) ? _2433 : min(_2168, _2433));
        float _2641 = isnan(_2638) ? _2640 : (isnan(_2640) ? _2638 : min(_2640, _2638));
        float _2645 = (_2641 * _2024) + _2013;
        float _2646 = (_2641 * _2027) + _2017;
        float _2647 = (_2641 * _2030) + _2021;
        float _2648 = _2641 * 9.9999997473787516355514526367188e-05;
        float _2649 = (-1.0) - _2648;
        float _2651 = _2648 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2647 > _2651) || ((_2647 < _2649) || ((_2646 > _2651) || ((_2646 < _2649) || ((_2645 < _2649) || (_2645 > _2651))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2647, cbModelParam._m0[17u].z, fma(_2646, cbModelParam._m0[17u].y, _2645 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2647, cbModelParam._m0[18u].z, fma(_2646, cbModelParam._m0[18u].y, _2645 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2647, cbModelParam._m0[19u].z, fma(_2646, cbModelParam._m0[19u].y, _2645 * cbModelParam._m0[19u].x))), _1960);
            frontier_phi_25_49_ladder = _2846.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2846.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2846.x * cbModelParam._m0[1u].z;
        }
        _2049 = frontier_phi_25_49_ladder_2;
        _2051 = frontier_phi_25_49_ladder_1;
        _2053 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2033 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1032, _1033, _1034), _1960);
        _2049 = _2033.x * cbModelParam._m0[1u].z;
        _2051 = _2033.y * cbModelParam._m0[1u].z;
        _2053 = _2033.z * cbModelParam._m0[1u].z;
    }
    float _2065 = ((((1.0 - _1053) * ((_1040 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1053 * _1040)) * _1024;
    float _2066 = _2065 * ((cbModelParam._m0[1u].w * (_2049 - _1951)) + _1951);
    float _2067 = _2065 * ((cbModelParam._m0[1u].w * (_2051 - _1953)) + _1953);
    float _2068 = _2065 * ((cbModelParam._m0[1u].w * (_2053 - _1955)) + _1955);
    float _2071 = fma(_2068, cbSceneParam._m0[89u].z, fma(_2067, cbSceneParam._m0[89u].y, _2066 * cbSceneParam._m0[89u].x));
    float _2074 = fma(_2068, cbSceneParam._m0[90u].z, fma(_2067, cbSceneParam._m0[90u].y, _2066 * cbSceneParam._m0[90u].x));
    float _2077 = fma(_2068, cbSceneParam._m0[91u].z, fma(_2067, cbSceneParam._m0[91u].y, _2066 * cbSceneParam._m0[91u].x));
    uvec4 _2087 = floatBitsToUint(cbInstanceData._m0[_279 + 5u]);
    uint _2089 = _2087.x * 14u;
    uint _2090 = _2089 + 13u;
    float _2097 = _1024 + (-1.0);
    float _2102 = (cbLight._m0[_2090].x * _2097) + 1.0;
    float _2103 = (cbLight._m0[_2090].y * _2097) + 1.0;
    float _2104 = (cbLight._m0[_2090].z * _2097) + 1.0;
    float _2105 = (cbLight._m0[_2090].w * _2097) + 1.0;
    uint _2106 = _2089 + 5u;
    float _2112 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
    uint _2116 = _2089 + 4u;
    float _2122 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2126 = _2089 | 1u;
    float _2137 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_862, _863, _864));
    float _2140 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_862, _863, _864));
    float _4411 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _4422 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2145 = (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * 0.3183098733425140380859375;
    float _2147 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * 0.3183098733425140380859375;
    float _2154 = ((cbLight._m0[_2106].x * _2112) * _2147) + ((cbLight._m0[_2116].x * _2122) * _2145);
    float _2155 = ((_2112 * cbLight._m0[_2106].y) * _2147) + ((_2122 * cbLight._m0[_2116].y) * _2145);
    float _2156 = ((_2112 * cbLight._m0[_2106].z) * _2147) + ((_2122 * cbLight._m0[_2116].z) * _2145);
    uvec4 _2160 = floatBitsToUint(cbLight._m0[_2089 + 12u]);
    bool _2162 = _2160.x == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2162)
    {
        _2173 = _2154;
        _2175 = _2155;
        _2177 = _2156;
    }
    else
    {
        uint _2181 = _2089 + 6u;
        float _2197 = (dot(vec3(cbLight._m0[_2089 + 2u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2198 = _2197 * _2197;
        float _4433 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2199 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2200 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2173 = (((cbLight._m0[_2181].x * 0.3183098733425140380859375) * _2199) * _2200) + _2154;
        _2175 = (((cbLight._m0[_2181].y * 0.3183098733425140380859375) * _2199) * _2200) + _2155;
        _2177 = (((cbLight._m0[_2181].z * 0.3183098733425140380859375) * _2199) * _2200) + _2156;
    }
    bool _2180 = _2160.y == 0u;
    float _2218;
    float _2220;
    float _2222;
    if (_2180)
    {
        _2218 = _2173;
        _2220 = _2175;
        _2222 = _2177;
    }
    else
    {
        uint _2377 = _2089 + 7u;
        float _2393 = (dot(vec3(cbLight._m0[_2089 + 3u].xyz), vec3(_862, _863, _864)) * 0.5) + 0.5;
        float _2394 = _2393 * _2393;
        float _4449 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2395 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2396 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2218 = (((cbLight._m0[_2377].x * 0.3183098733425140380859375) * _2395) * _2396) + _2173;
        _2220 = (((cbLight._m0[_2377].y * 0.3183098733425140380859375) * _2395) * _2396) + _2175;
        _2222 = (((cbLight._m0[_2377].z * 0.3183098733425140380859375) * _2395) * _2396) + _2177;
    }
    uint _2225 = _2089 + 8u;
    float _2238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _865) * 0.949999988079071044921875);
    float _2239 = _2238 * _2238;
    float _2240 = cbLight._m0[_2089].x + _941;
    float _2241 = cbLight._m0[_2089].y + _942;
    float _2242 = cbLight._m0[_2089].z + _943;
    float _2246 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
    float _2247 = _2246 * _2240;
    float _2248 = _2246 * _2241;
    float _2249 = _2246 * _2242;
    float _2250 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2089].xyz));
    float _4465 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _4476 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _2254 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
    float _2255 = dot(vec3(_862, _863, _864), vec3(_2247, _2248, _2249));
    float _4487 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2258 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2259 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2247, _2248, _2249));
    float _4498 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2263 = _2239 * _2239;
    float _2267 = ((_2258 * _2258) * (_2263 + (-1.0))) + 1.0;
    float _2278 = (exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2279 = 1.0 - _2239;
    float _2290 = (0.5 / (((_2254 * ((_2253 * _2279) + _2239)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2279) + _2239) * _2253))) * _2253;
    float _4509 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2292 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2263 / ((_2267 * _2267) * 3.141590118408203125));
    uint _2303 = _2089 + 9u;
    float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2126].w)) * _865) * 0.949999988079071044921875);
    float _2315 = _2314 * _2314;
    float _2316 = cbLight._m0[_2126].x + _941;
    float _2317 = cbLight._m0[_2126].y + _942;
    float _2318 = cbLight._m0[_2126].z + _943;
    float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
    float _2323 = _2322 * _2316;
    float _2324 = _2322 * _2317;
    float _2325 = _2322 * _2318;
    float _2326 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2126].xyz));
    float _4520 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
    float _2330 = dot(vec3(_862, _863, _864), vec3(_2323, _2324, _2325));
    float _4531 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2126].xyz), vec3(_2323, _2324, _2325));
    float _4542 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2315 * _2315;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2351 = (exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2352 = 1.0 - _2315;
    float _2362 = (0.5 / (((_2254 * ((_2329 * _2352) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2352) + _2315) * _2329))) * _2329;
    float _4553 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    float _2374 = (((_2351 * cbLight._m0[_2303].x) * _2364) * _2112) + (((_2278 * cbLight._m0[_2225].x) * _2292) * _2122);
    float _2375 = (((_2351 * cbLight._m0[_2303].y) * _2364) * _2112) + (((_2278 * cbLight._m0[_2225].y) * _2292) * _2122);
    float _2376 = (((_2351 * cbLight._m0[_2303].z) * _2364) * _2112) + (((_2278 * cbLight._m0[_2225].z) * _2292) * _2122);
    float _2438;
    float _2440;
    float _2442;
    if (_2162)
    {
        _2438 = _2374;
        _2440 = _2375;
        _2442 = _2376;
    }
    else
    {
        uint _2444 = _2089 + 2u;
        uint _2448 = _2089 + 10u;
        float _2462 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2444].w)) * _865) * 0.949999988079071044921875);
        float _2463 = _2462 * _2462;
        float _2464 = cbLight._m0[_2444].x + _941;
        float _2465 = cbLight._m0[_2444].y + _942;
        float _2466 = cbLight._m0[_2444].z + _943;
        float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
        float _2471 = _2470 * _2464;
        float _2472 = _2470 * _2465;
        float _2473 = _2470 * _2466;
        float _2474 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2444].xyz));
        float _4564 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2478 = dot(vec3(_862, _863, _864), vec3(_2471, _2472, _2473));
        float _4575 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2481 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2482 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_2471, _2472, _2473));
        float _4586 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2486 = _2463 * _2463;
        float _2490 = ((_2481 * _2481) * (_2486 + (-1.0))) + 1.0;
        float _2499 = (exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2500 = 1.0 - _2463;
        float _2510 = (0.5 / (((_2254 * ((_2477 * _2500) + _2463)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2500) + _2463) * _2477))) * _2477;
        float _4597 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2512 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2486 / ((_2490 * _2490) * 3.141590118408203125));
        float _2513 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2438 = (((_2499 * cbLight._m0[_2448].x) * _2512) * _2513) + _2374;
        _2440 = (((_2499 * cbLight._m0[_2448].y) * _2512) * _2513) + _2375;
        _2442 = (((_2499 * cbLight._m0[_2448].z) * _2512) * _2513) + _2376;
    }
    float _2548;
    float _2550;
    float _2552;
    if (_2180)
    {
        _2548 = _2438;
        _2550 = _2440;
        _2552 = _2442;
    }
    else
    {
        uint _2559 = _2089 + 3u;
        uint _2563 = _2089 + 11u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _865) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _941;
        float _2580 = cbLight._m0[_2559].y + _942;
        float _2581 = cbLight._m0[_2559].z + _943;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_862, _863, _864), vec3(cbLight._m0[_2559].xyz));
        float _4613 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _2593 = dot(vec3(_862, _863, _864), vec3(_2586, _2587, _2588));
        float _4624 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4635 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2614 = (exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2615 = 1.0 - _2578;
        float _2625 = (0.5 / (((_2254 * ((_2592 * _2615) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2254 * _2615) + _2578) * _2592))) * _2592;
        float _4646 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2627 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2628 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
        _2548 = (((_2614 * cbLight._m0[_2563].x) * _2627) * _2628) + _2438;
        _2550 = (((_2614 * cbLight._m0[_2563].y) * _2627) * _2628) + _2440;
        _2552 = (((_2614 * cbLight._m0[_2563].z) * _2627) * _2628) + _2442;
    }
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    if (_2087.y == 0u)
    {
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2703;
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2703;
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2703;
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.x;
        uint _2730 = uint((float(_2718.y) * floor(float(uint(cbSceneParam._m0[85u].y * _962) / _2719))) + floor(float(uint(cbSceneParam._m0[85u].x * _961) / _2719)));
        float _2740 = (log2(_2706 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2741 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        uint _2744 = uint(isnan(14.0) ? _2741 : (isnan(_2741) ? 14.0 : min(_2741, 14.0)));
        uvec4 _2749 = texelFetch(g_lightClusterGridBuffer, int(((_2744 << 2u) + (_2730 << 6u)) >> 2u));
        uint _2750 = _2749.x;
        uint _2751 = _2718.z;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        if (((((1u << ((_2751 >> 4u) & 15u)) + 4294967295u) & _2750) == 0u) || ((_2751 & 240u) == 0u))
        {
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
        }
        else
        {
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            uint _3009 = 0u;
            uint _3018;
            bool _3019;
            for (;;)
            {
                _3018 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                _3019 = _3018 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3019)
                {
                    frontier_phi_66_pred = _3003;
                    frontier_phi_66_pred_1 = _3008;
                    frontier_phi_66_pred_2 = _3007;
                    frontier_phi_66_pred_3 = _3006;
                    frontier_phi_66_pred_4 = _3005;
                    frontier_phi_66_pred_5 = _3004;
                }
                else
                {
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    uint _3154;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3018;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    for (;;)
                    {
                        uint _3158 = uint(findLSB(_3154)) + (_3009 << 5u);
                        uint _3155 = (_3154 + 4294967295u) & _3154;
                        uint _3160 = _3158 * 48u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3160)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3160 + 3u)).x));
                        uint _3180 = (_3158 * 48u) + 4u;
                        vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 3u)).x));
                        uint _3199 = (_3158 * 48u) + 8u;
                        vec3 _3210 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x));
                        float _3214 = _3174.x - _2704;
                        float _3215 = _3174.y - _2705;
                        float _3216 = _3174.z - _2706;
                        float _3217 = dot(vec3(_3214, _3215, _3216), vec3(_3214, _3215, _3216));
                        float _3220 = inversesqrt(_3217);
                        float _3221 = _3220 * _3214;
                        float _3222 = _3220 * _3215;
                        float _3223 = _3220 * _3216;
                        float _3224 = dot(vec3(_980, _983, _986), vec3(_3221, _3222, _3223));
                        float _3229 = 1.0 - (_3217 * _3174.w);
                        float _4672 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3230 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                        float _3231 = sqrt(_3217) * _3193.w;
                        float _3234 = 1.39999997615814208984375 / (_3231 + 1.39999997615814208984375);
                        float _3235 = _3234 * _3234;
                        float _3238 = ((1.0 - _3235) * _3224) + _3235;
                        float _3241 = _3231 * _3231;
                        float _3245 = ((isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))) * _3230) / ((_3241 * 0.699999988079071044921875) + 1.0);
                        float _3249 = (-0.0) - _2704;
                        float _3250 = (-0.0) - _2705;
                        float _3251 = (-0.0) - _2706;
                        float _3255 = inversesqrt(dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251)));
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3266 = exp2(log2(1.0 / ((_3241 * 3.5) + 5.0)) * 0.25);
                        float _3267 = 1.0 - _1040;
                        float _3274 = sqrt(1.0 - ((1.0 - (_3267 * _3267)) * (1.0 - (_3266 * _3266))));
                        float _3275 = _3274 * _3274;
                        float _3276 = _3275 * _3275;
                        float _3277 = _3256 + _3221;
                        float _3278 = _3257 + _3222;
                        float _3279 = _3258 + _3223;
                        float _3283 = inversesqrt(dot(vec3(_3277, _3278, _3279), vec3(_3277, _3278, _3279)));
                        float _3287 = dot(vec3(_980, _983, _986), vec3(_3256, _3257, _3258));
                        float _4688 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                        float _3290 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3291 = dot(vec3(_980, _983, _986), vec3(_3283 * _3277, _3283 * _3278, _3283 * _3279));
                        float _4699 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3294 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                        float _3298 = ((_3294 * _3294) * (_3276 + (-1.0))) + 1.0;
                        float _3299 = _3234 * _3275;
                        float _3300 = _3299 * _3299;
                        float _3303 = ((1.0 - _3300) * _3224) + _3300;
                        float _4710 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3304 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                        float _3305 = 1.0 - _3275;
                        float _3315 = (0.5 / (((_3304 * ((_3290 * _3305) + _3275)) + 9.9999999392252902907785028219223e-09) + (((_3304 * _3305) + _3275) * _3290))) * _3304;
                        float _4721 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                        float _3326 = (((_3276 * 3.1415927410125732421875) * (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) / ((_3298 * _3298) * ((_3241 * 2.1991131305694580078125) + 3.141590118408203125))) * _3230;
                        _3078 = (_3245 * _3193.x) + _3151;
                        _3079 = (_3245 * _3193.y) + _3152;
                        _3080 = (_3245 * _3193.z) + _3153;
                        _3075 = (_3326 * _3210.x) + _3148;
                        _3076 = (_3326 * _3210.y) + _3149;
                        _3077 = (_3326 * _3210.z) + _3150;
                        if (_3155 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3155;
                        }
                    }
                    frontier_phi_66_pred = _3075;
                    frontier_phi_66_pred_1 = _3080;
                    frontier_phi_66_pred_2 = _3079;
                    frontier_phi_66_pred_3 = _3078;
                    frontier_phi_66_pred_4 = _3077;
                    frontier_phi_66_pred_5 = _3076;
                }
                _2852 = frontier_phi_66_pred;
                _2862 = frontier_phi_66_pred_1;
                _2860 = frontier_phi_66_pred_2;
                _2858 = frontier_phi_66_pred_3;
                _2856 = frontier_phi_66_pred_4;
                _2854 = frontier_phi_66_pred_5;
                uint _3010 = _3009 + 1u;
                if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3003 = _2852;
                    _3004 = _2854;
                    _3005 = _2856;
                    _3006 = _2858;
                    _3007 = _2860;
                    _3008 = _2862;
                    _3009 = _3010;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
        }
        uvec4 _2865 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2866 = _2865.z;
        uint _2868 = (_2866 >> 8u) & 15u;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        if (((4294967295u << _2868) & _2750) == 0u)
        {
            _2971 = _2851;
            _2973 = _2853;
            _2975 = _2855;
            _2977 = _2857;
            _2979 = _2859;
            _2981 = _2861;
        }
        else
        {
            float _2996 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
            float _2997 = _2996 * _2704;
            float _2998 = _2996 * _2705;
            float _2999 = _2996 * _2706;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2868 < ((_2866 >> 12u) & 15u))
            {
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _3131 = _2851;
                float _3132 = _2853;
                float _3133 = _2855;
                float _3134 = _2857;
                float _3135 = _2859;
                float _3136 = _2861;
                uint _3137 = _2868;
                uint _3146;
                bool _3147;
                for (;;)
                {
                    _3146 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3137 << 2u)) >> 2u)).x;
                    _3147 = _3146 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3147)
                    {
                        frontier_phi_77_pred = _3136;
                        frontier_phi_77_pred_1 = _3135;
                        frontier_phi_77_pred_2 = _3134;
                        frontier_phi_77_pred_3 = _3133;
                        frontier_phi_77_pred_4 = _3132;
                        frontier_phi_77_pred_5 = _3131;
                    }
                    else
                    {
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3353 = _3131;
                        float _3354 = _3132;
                        float _3355 = _3133;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        float _3358 = _3136;
                        uint _3359 = _3146;
                        uint _3360;
                        vec4 _3385;
                        float _3386;
                        vec4 _3401;
                        vec3 _3413;
                        vec4 _3428;
                        vec4 _3443;
                        float _3489;
                        bool _3490;
                        for (;;)
                        {
                            uint _3370 = ((_3137 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3359));
                            _3360 = (_3359 + 4294967295u) & _3359;
                            uint _3372 = _3370 * 40u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            _3386 = _3385.w;
                            uint _3388 = (_3370 * 40u) + 4u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3370 * 40u) + 8u;
                            _3413 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x));
                            uint _3415 = (_3370 * 40u) + 16u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3370 * 40u) + 20u;
                            _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3445 = (_3370 * 40u) + 24u;
                            vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3464 = (_3370 * 40u) + 28u;
                            vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            _3489 = fma(_2706, _3477.z, fma(_2705, _3477.y, _3477.x * _2704)) + _3477.w;
                            _3490 = !((fma(_2706, _3458.z, fma(_2705, _3458.y, _3458.x * _2704)) + _3458.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3490)
                            {
                                float _3517 = _3385.x - _2704;
                                float _3518 = _3385.y - _2705;
                                float _3519 = _3385.z - _2706;
                                float _3520 = dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519));
                                float _3523 = inversesqrt(_3520);
                                float _3524 = _3523 * _3517;
                                float _3525 = _3523 * _3518;
                                float _3526 = _3523 * _3519;
                                float _3530 = 1.0 - (_3520 / (_3386 * _3386));
                                float _4732 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3535 = sqrt(_3520) * _3401.w;
                                float _3537 = 1.39999997615814208984375 / (_3535 + 1.39999997615814208984375);
                                float _3538 = _3537 * _3537;
                                float _3541 = ((1.0 - _3538) * dot(vec3(_3524, _3525, _3526), vec3(_980, _983, _986))) + _3538;
                                float _3544 = _3535 * _3535;
                                float _3548 = (fma(_2706, _3428.z, fma(_2705, _3428.y, _3428.x * _2704)) + _3428.w) / _3489;
                                float _3549 = (fma(_2706, _3443.z, fma(_2705, _3443.y, _3443.x * _2704)) + _3443.w) / _3489;
                                float _3553 = 1.0 - dot(vec2(_3548, _3549), vec2(_3548, _3549));
                                float _4748 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3555 = _3554 * (((isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0))) * _3531) / ((_3544 * 0.699999988079071044921875) + 1.0));
                                float _3567 = exp2(log2(1.0 / ((_3544 * 3.5) + 5.0)) * 0.25);
                                float _3568 = 1.0 - _1040;
                                float _3575 = sqrt(1.0 - ((1.0 - (_3568 * _3568)) * (1.0 - (_3567 * _3567))));
                                float _3576 = _3575 * _3575;
                                float _3577 = _3576 * _3576;
                                float _3578 = _3524 - _2997;
                                float _3579 = _3525 - _2998;
                                float _3580 = _3526 - _2999;
                                float _3584 = inversesqrt(dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580)));
                                float _3588 = dot(vec3(_980, _983, _986), vec3((-0.0) - _2997, (-0.0) - _2998, (-0.0) - _2999));
                                float _4759 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3592 = dot(vec3(_980, _983, _986), vec3(_3584 * _3578, _3584 * _3579, _3584 * _3580));
                                float _4770 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                                float _3599 = ((_3595 * _3595) * (_3577 + (-1.0))) + 1.0;
                                float _3600 = _3537 * _3576;
                                float _3601 = _3600 * _3600;
                                float _3607 = ((1.0 - _3601) * dot(vec3(_980, _983, _986), vec3(_3524, _3525, _3526))) + _3601;
                                float _4781 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                                float _3609 = 1.0 - _3576;
                                float _3619 = (0.5 / (((_3608 * ((_3591 * _3609) + _3576)) + 9.9999999392252902907785028219223e-09) + (((_3608 * _3609) + _3576) * _3591))) * _3608;
                                float _4792 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3629 = (_3554 * _3531) * (((_3577 * 3.1415927410125732421875) * (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) / ((_3599 * _3599) * ((_3544 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3555 * _3401.y;
                                frontier_phi_83_pred_1 = _3555 * _3401.x;
                                frontier_phi_83_pred_2 = _3629 * _3413.z;
                                frontier_phi_83_pred_3 = _3629 * _3413.y;
                                frontier_phi_83_pred_4 = _3629 * _3413.x;
                                frontier_phi_83_pred_5 = _3555 * _3401.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3637 = frontier_phi_83_pred;
                            _3636 = frontier_phi_83_pred_1;
                            _3635 = frontier_phi_83_pred_2;
                            _3634 = frontier_phi_83_pred_3;
                            _3633 = frontier_phi_83_pred_4;
                            _3638 = frontier_phi_83_pred_5;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            _3345 = _3638 + _3358;
                            _3340 = _3633 + _3353;
                            _3341 = _3634 + _3354;
                            _3342 = _3635 + _3355;
                            if (_3360 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3360;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3345;
                        frontier_phi_77_pred_1 = _3344;
                        frontier_phi_77_pred_2 = _3343;
                        frontier_phi_77_pred_3 = _3342;
                        frontier_phi_77_pred_4 = _3341;
                        frontier_phi_77_pred_5 = _3340;
                    }
                    _2982 = frontier_phi_77_pred;
                    _2980 = frontier_phi_77_pred_1;
                    _2978 = frontier_phi_77_pred_2;
                    _2976 = frontier_phi_77_pred_3;
                    _2974 = frontier_phi_77_pred_4;
                    _2972 = frontier_phi_77_pred_5;
                    uint _3138 = _3137 + 1u;
                    if (_3138 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3131 = _2972;
                        _3132 = _2974;
                        _3133 = _2976;
                        _3134 = _2978;
                        _3135 = _2980;
                        _3136 = _2982;
                        _3137 = _3138;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2976;
                frontier_phi_58_59_ladder_1 = _2982;
                frontier_phi_58_59_ladder_2 = _2980;
                frontier_phi_58_59_ladder_3 = _2978;
                frontier_phi_58_59_ladder_4 = _2974;
                frontier_phi_58_59_ladder_5 = _2972;
            }
            else
            {
                frontier_phi_58_59_ladder = _2855;
                frontier_phi_58_59_ladder_1 = _2861;
                frontier_phi_58_59_ladder_2 = _2859;
                frontier_phi_58_59_ladder_3 = _2857;
                frontier_phi_58_59_ladder_4 = _2853;
                frontier_phi_58_59_ladder_5 = _2851;
            }
            _2971 = frontier_phi_58_59_ladder_5;
            _2973 = frontier_phi_58_59_ladder_4;
            _2975 = frontier_phi_58_59_ladder;
            _2977 = frontier_phi_58_59_ladder_3;
            _2979 = frontier_phi_58_59_ladder_2;
            _2981 = frontier_phi_58_59_ladder_1;
        }
        float _2986 = isnan(1.0) ? _1024 : (isnan(_1024) ? 1.0 : min(_1024, 1.0));
        _2763 = (_2986 * _2977) + _2218;
        _2765 = (_2986 * _2979) + _2220;
        _2767 = (_2986 * _2981) + _2222;
        _2769 = ((_2971 * 0.039999999105930328369140625) * _2986) + _2548;
        _2771 = ((_2973 * 0.039999999105930328369140625) * _2986) + _2550;
        _2773 = ((_2975 * 0.039999999105930328369140625) * _2986) + _2552;
    }
    else
    {
        _2763 = _2218;
        _2765 = _2220;
        _2767 = _2222;
        _2769 = _2548;
        _2771 = _2550;
        _2773 = _2552;
    }
    float _4808 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _4819 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _4830 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _2790 = ((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2763 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1024))) + ((_2769 + ((isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0))) * _1860)) * cbPerFrame._m0[3u].x);
    float _2791 = ((isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2765 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1024))) + ((_2771 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1860)) * cbPerFrame._m0[3u].x);
    float _2792 = ((isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2767 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1024))) + ((_2773 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1860)) * cbPerFrame._m0[3u].x);
    uint _2793 = _279 + 6u;
    float _2801 = _961 / cbSceneParam._m0[86u].x;
    float _2802 = _962 / cbSceneParam._m0[86u].y;
    vec4 _2816 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2801, _2802, (log2((isnan(cbSceneParam._m0[77u].w) ? _883 : (isnan(_883) ? cbSceneParam._m0[77u].w : min(_883, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2818 = _2816.x;
    float _2819 = _2816.y;
    float _2820 = _2816.z;
    float _2821 = _2816.w;
    float _2913;
    float _2915;
    float _2917;
    float _2919;
    if (_883 > cbSceneParam._m0[78u].w)
    {
        float _2876 = isnan(_883) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _883 : min(cbSceneParam._m0[80u].w, _883));
        float _2877 = _2876 / _883;
        float _2888 = _2877 * _934;
        float _2889 = _935 * _2877;
        float _2890 = (-0.0) - _2889;
        float _2891 = _2877 * _936;
        float _2893 = (cbSceneParam._m0[77u].w * _2890) / _2876;
        float _2894 = _2893 + cbSceneParam._m0[79u].w;
        float _2895 = cbSceneParam._m0[79u].w - _2889;
        float _2901 = sqrt(((_2888 * _2888) + (_2889 * _2889)) + (_2891 * _2891));
        float _2904 = (1.0 - (cbSceneParam._m0[77u].w / _2876)) * _2901;
        float _2909 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2911 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3088;
        if (abs((_2890 - _2893) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3088 = ((((_2894 > 0.0) ? exp2(_2909 * _2894) : (2.0 - exp2(_2911 * _2894))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2904;
        }
        else
        {
            float _3032 = 1.0 / cbSceneParam._m0[80u].x;
            float _3033 = isnan(_2895) ? _2894 : (isnan(_2894) ? _2895 : max(_2894, _2895));
            float _3034 = isnan(_2895) ? _2894 : (isnan(_2894) ? _2895 : min(_2894, _2895));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            float _3044 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : min(_3034, 0.0));
            _3088 = ((abs(_2901 / _2890) * cbSceneParam._m0[80u].y) * ((((_3043 - _3044) * 2.0) - ((exp2(_2909 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0)))) - exp2(_2909 * (isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))))) * _3032)) - ((exp2(_2911 * _3043) - exp2(_2911 * _3044)) * _3032))) + (_2904 * cbSceneParam._m0[80u].z);
        }
        vec4 _3090 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2801, _2802, 1.0), 0.0);
        float _3099 = exp2((_3088 * (-1.44269502162933349609375)) * (1.0 - _3090.w));
        float _3100 = log2(_3099);
        float _3116 = log2(_2821);
        _2913 = (exp2(_3116 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3100 * cbSceneParam._m0[78u].x)) * _3090.x) / cbSceneParam._m0[78u].x)) + _2818;
        _2915 = (exp2(_3116 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3100 * cbSceneParam._m0[78u].y)) * _3090.y) / cbSceneParam._m0[78u].y)) + _2819;
        _2917 = (exp2(_3116 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3100 * cbSceneParam._m0[78u].z)) * _3090.z) / cbSceneParam._m0[78u].z)) + _2820;
        _2919 = _3099 * _2821;
    }
    else
    {
        _2913 = _2818;
        _2915 = _2819;
        _2917 = _2820;
        _2919 = _2821;
    }
    bool _3126;
    vec4 _2929;
    vec4 _2951;
    float _2953;
    float _2957;
    float _2958;
    float _2959;
    float _2960;
    bool _2970;
    for (;;)
    {
        _2929 = cbMatDynParam._m0[0u];
        float _2931 = roundEven(_2929.y);
        bool _2932 = _2931 == 3.0;
        float _2933 = log2(_2919);
        float _2940 = exp2(_2933 * cbSceneParam._m0[78u].x) * _2790;
        float _2941 = exp2(_2933 * cbSceneParam._m0[78u].y) * _2791;
        float _2942 = exp2(_2933 * cbSceneParam._m0[78u].z) * _2792;
        float _2949 = _950 + (-0.5);
        _2951 = cbMtdParam._m0[1u];
        _2953 = _2951.y * _2949;
        float _2956 = (_2931 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2957 = _2956 * (_2932 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2913)));
        _2958 = _2956 * (_2932 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2915)));
        _2959 = _2956 * (_2932 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2917)));
        _2960 = _2949 * 0.999000012874603271484375;
        _2970 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2970)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _2960) < 0.5)
            {
                _3126 = true;
                break;
            }
        }
        uint _3067 = _999 + uint(_2929.w);
        if ((cbInstanceData._m0[_3067].w < 1.0) && ((cbInstanceData._m0[_3067].w + _2960) < 0.5))
        {
            _3126 = true;
            break;
        }
        if ((_2953 + 1.0) < _2951.x)
        {
            _3126 = true;
            break;
        }
        _3126 = false;
        break;
    }
    float _3331;
    if (_3126)
    {
        discard_state = true;
        _3331 = 0.0;
    }
    else
    {
        _3331 = cbInstanceData._m0[_2793].w;
    }
    SV_Target.x = _2957;
    SV_Target.y = _2958;
    SV_Target.z = _2959;
    SV_Target.w = _3331;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2793].w;
    discard_exit();
}


