#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1159;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _256 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3750 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3761 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3772 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _286) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _287) + cbTextureTilingScale._m0[13u].w));
    vec4 _323 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _328 = _323.x * cbMtdParam._m0[9u].x;
    float _329 = _323.y * cbMtdParam._m0[9u].y;
    float _330 = _323.z * cbMtdParam._m0[9u].z;
    float _334 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _300.x) * _328;
    float _337 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _300.y) * _329;
    float _340 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _300.z) * _330;
    float _347 = ((_328 - _334) * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) + _334;
    float _348 = ((_329 - _337) * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) + _337;
    float _349 = ((_330 - _340) * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) + _340;
    vec4 _367 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _286) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _287) + cbTextureTilingScale._m0[20u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _397 = _393.z;
    float _401 = (_393.x * 2.0) + (-1.0);
    float _402 = (_393.y * 2.0) + (-1.0);
    float _403 = dot(vec2(_401, _402), vec2(_401, _402));
    float _3783 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _408 = sqrt(1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))));
    float _413 = _401 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_367.x * 2.0) + (-1.0)));
    float _414 = _402 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_367.y * 2.0) + (-1.0)));
    vec4 _431 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _433 = _431.x;
    float _434 = 1.0 - _433;
    float _443 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _446 = ((isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : min(_443, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _455 = (_446 - ((((((_433 - _434) * cbMtdParam._m0[24u].z) + _434) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _446))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3804 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _463 = (_456 * (cbMtdParam._m0[17u].x - _347)) + _347;
    float _464 = (_456 * (cbMtdParam._m0[17u].y - _348)) + _348;
    float _465 = (_456 * (cbMtdParam._m0[17u].z - _349)) + _349;
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _480 = _478.x;
    float _481 = 1.0 - _480;
    float _508 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_480 - _481) * cbMtdParam._m0[24u].w) + _481) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3815 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _517 = ((((cbMtdParam._m0[10u].x - _463) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _509) + _463;
    float _518 = ((((cbMtdParam._m0[10u].y - _464) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _509) + _464;
    float _519 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _465)) * _509) + _465;
    float _524 = (((_367.z - _397) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _397;
    vec4 _538 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _545 = (_538.x * 2.0) + (-1.0);
    float _546 = (_538.y * 2.0) + (-1.0);
    float _547 = dot(vec2(_545, _546), vec2(_545, _546));
    float _3826 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _555 = (_456 * (_538.z - _524)) + _524;
    float _558 = ((cbMtdParam._m0[23u].y - _555) * _509) + _555;
    vec4 _580 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _586 = (_580.x * 2.0) + (-1.0);
    float _587 = (_580.y * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _3837 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _605 = (((_545 - _413) + (cbMtdParam._m0[21u].x * _413)) * _456) + _413;
    float _606 = (((_546 - _414) + (cbMtdParam._m0[21u].x * _414)) * _456) + _414;
    float _607 = (_456 * (sqrt(1.0 - (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0)))) - _408)) + _408;
    float _618 = (((_586 - _605) + (_605 * cbMtdParam._m0[22u].z)) * _509) + _605;
    float _619 = (((_587 - _606) + (_606 * cbMtdParam._m0[22u].z)) * _509) + _606;
    float _620 = ((sqrt(1.0 - (isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0)))) - _607) * _509) + _607;
    float _622 = cbMtdParam._m0[22u].x + _393.w;
    float _625 = fma(_620, _235 * NORMAL.x, fma(_619, _242 * TANGENT.x, (_228 * _220) * _618));
    float _628 = fma(_620, _235 * NORMAL.y, fma(_619, _242 * TANGENT.y, (_228 * _221) * _618));
    float _631 = fma(_620, _235 * NORMAL.z, fma(_619, _242 * TANGENT.z, (_228 * _222) * _618));
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    float _636 = _635 * _625;
    float _637 = _635 * _628;
    float _638 = _635 * _631;
    float _3848 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _639 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3870 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _3881 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _3892 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _657 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _707 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _697);
    float _708 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _697);
    float _709 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _697);
    float _713 = inversesqrt(dot(vec3(_707, _708, _709), vec3(_707, _708, _709)));
    float _714 = _707 * _713;
    float _715 = _708 * _713;
    float _716 = _709 * _713;
    float _722 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _723 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _744 = fma(_638, cbSceneParam._m0[5u].z, fma(_637, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _636));
    float _747 = fma(_638, cbSceneParam._m0[6u].z, fma(_637, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _636));
    float _750 = fma(_638, cbSceneParam._m0[7u].z, fma(_637, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _636));
    uint _764 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _770 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * cbInstanceData._m0[_764].x;
    float _771 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0)))) * cbInstanceData._m0[_764].y;
    float _772 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * cbInstanceData._m0[_764].z;
    float _3903 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _3914 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    vec4 _784 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _722, cbSceneParam._m0[86u].y * _723));
    float _788 = ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * TEXCOORD_5.w) * _784.x;
    float _789 = dot(vec3(_636, _637, _638), vec3(_714, _715, _716));
    float _792 = _789 * 2.0;
    float _796 = (_792 * _636) - _714;
    float _797 = (_792 * _637) - _715;
    float _798 = (_792 * _638) - _716;
    float _802 = abs(dot(vec3(_714, _715, _716), vec3(_636, _637, _638)));
    float _3936 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _804 = sqrt(_639);
    float _817 = exp2((_804 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_804 * 3.0));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1158;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _883 = fma(_857, cbModelParam._m0[26u].z, fma(_853, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849));
        float _887 = fma(_857, cbModelParam._m0[27u].z, fma(_853, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849));
        float _891 = fma(_857, cbModelParam._m0[28u].z, fma(_853, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849));
        float _916 = _849 + _636;
        float _917 = _853 + _637;
        float _918 = _857 + _638;
        float _928 = fma(_918, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916)) - _883;
        float _929 = fma(_918, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916)) - _887;
        float _930 = fma(_918, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916)) - _891;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_883 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_887 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[34u].z) + ((((((_891 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _986 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_952.x + (-0.5));
        float _988 = _986 * (_952.y + (-0.5));
        float _989 = _986 * (_952.z + (-0.5));
        float _996 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_959.x + (-0.5));
        float _998 = _996 * (_959.y + (-0.5));
        float _999 = _996 * (_959.z + (-0.5));
        float _1006 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_966.x + (-0.5));
        float _1008 = _1006 * (_966.y + (-0.5));
        float _1009 = _1006 * (_966.z + (-0.5));
        float _1016 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_973.x + (-0.5));
        float _1018 = _1016 * (_973.y + (-0.5));
        float _1019 = _1016 * (_973.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1040 = (dot(vec3(_636, _637, _638), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1050 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3984 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1052 + 1.0))) + _1057) * _1020;
        float _1067 = _988 * 0.5;
        float _1068 = _998 * 0.5;
        float _1069 = _1008 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_636, _637, _638), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3995 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _4006 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _4017 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1094 + 1.0))) + _1099) * _1021;
        float _1109 = _989 * 0.5;
        float _1110 = _999 * 0.5;
        float _1111 = _1009 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_636, _637, _638), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _4028 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _4039 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _4050 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1136 + 1.0))) + _1141) * _1022;
        _1158 = _989;
        _1160 = _988;
        _1161 = _987;
        _1162 = _999;
        _1163 = _998;
        _1164 = _997;
        _1165 = _1009;
        _1166 = _1008;
        _1167 = _1007;
        _1168 = _1022;
        _1169 = _1021;
        _1170 = _1020;
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _1159;
        _1160 = _1159;
        _1161 = _1159;
        _1162 = _1159;
        _1163 = _1159;
        _1164 = _1159;
        _1165 = _1159;
        _1166 = _1159;
        _1167 = _1159;
        _1168 = _1159;
        _1169 = _1159;
        _1170 = _1159;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1198 = fma(_857, cbModelParam._m0[30u].z, fma(_853, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _849));
        float _1202 = fma(_857, cbModelParam._m0[31u].z, fma(_853, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _849));
        float _1206 = fma(_857, cbModelParam._m0[32u].z, fma(_853, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _849));
        float _1229 = _849 + _636;
        float _1230 = _853 + _637;
        float _1231 = _857 + _638;
        float _1241 = fma(_1231, cbModelParam._m0[30u].z, fma(_1230, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1229)) - _1198;
        float _1242 = fma(_1231, cbModelParam._m0[31u].z, fma(_1230, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1229)) - _1202;
        float _1243 = fma(_1231, cbModelParam._m0[32u].z, fma(_1230, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1229)) - _1206;
        float _1247 = inversesqrt(dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243)));
        float _1260 = ((_1247 * _1241) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1198 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1247 * _1242) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1202 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1247 * _1243) / cbModelParam._m0[35u].z) + ((((((_1206 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1260, _1261, _1262), 0.0);
        float _1297 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1264.x + (-0.5));
        float _1299 = _1297 * (_1264.y + (-0.5));
        float _1300 = _1297 * (_1264.z + (-0.5));
        float _1307 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1271.x + (-0.5));
        float _1309 = _1307 * (_1271.y + (-0.5));
        float _1310 = _1307 * (_1271.z + (-0.5));
        float _1317 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1278.x + (-0.5));
        float _1319 = _1317 * (_1278.y + (-0.5));
        float _1320 = _1317 * (_1278.z + (-0.5));
        float _1327 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1285.x + (-0.5));
        float _1329 = _1327 * (_1285.y + (-0.5));
        float _1330 = _1327 * (_1285.z + (-0.5));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = _1298 * 0.5;
        float _1335 = _1308 * 0.5;
        float _1336 = _1318 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_636, _637, _638), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4113 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1361 + 1.0))) + _1366) * _1331;
        float _1376 = _1299 * 0.5;
        float _1377 = _1309 * 0.5;
        float _1378 = _1319 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_636, _637, _638), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4146 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1403 + 1.0))) + _1408) * _1332;
        float _1418 = _1300 * 0.5;
        float _1419 = _1310 * 0.5;
        float _1420 = _1320 * 0.5;
        float _1421 = dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420));
        float _1426 = (_1421 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1421);
        float _1434 = (dot(vec3(_636, _637, _638), vec3(_1426 * _1418, _1426 * _1419, _1426 * _1420)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1443 = sqrt(((_1419 * _1419) + (_1418 * _1418)) + (_1420 * _1420)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4179 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1445 + 1.0))) + _1450) * _1333;
        _1467 = _1300;
        _1468 = _1299;
        _1469 = _1298;
        _1470 = _1310;
        _1471 = _1309;
        _1472 = _1308;
        _1473 = _1320;
        _1474 = _1319;
        _1475 = _1318;
        _1476 = _1333;
        _1477 = _1332;
        _1478 = _1331;
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
    }
    else
    {
        _1467 = _1159;
        _1468 = _1159;
        _1469 = _1159;
        _1470 = _1159;
        _1471 = _1159;
        _1472 = _1159;
        _1473 = _1159;
        _1474 = _1159;
        _1475 = _1159;
        _1476 = _1159;
        _1477 = _1159;
        _1478 = _1159;
        _1479 = 0.0;
        _1480 = 0.0;
        _1481 = 0.0;
    }
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1171)) + _1171;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1172)) + _1172;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1173)) + _1173;
    float _1514 = fma(_1493, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1517 = fma(_1493, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1520 = fma(_1493, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1491));
    float _1535 = _796 * 0.5;
    float _1536 = _797 * 0.5;
    float _1537 = _798 * 0.5;
    float _1538 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1541 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1544 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1578;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1551 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1158, _1162, _1165, _1168));
        float _1555 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1559 = dot(vec4(_1535, _1536, _1537, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1566 = dot(vec4(cbModelParam._m0[39u]), vec4(_1535, _1536, _1537, 1.0));
        _1578 = dot(vec3(isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1566) ? 0.0 : (isnan(0.0) ? _1566 : max(0.0, _1566))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1578 = 1.0;
    }
    float _1589;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1580 = dot(vec4(cbModelParam._m0[40u]), vec4(_1535, _1536, _1537, 1.0));
        _1589 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1589 = 1.0;
    }
    float _1593 = (_1589 * cbModelParam._m0[1u].x) + (_1578 * (1.0 - cbModelParam._m0[1u].x));
    float _1603 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _639);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1603 : min(cbModelParam._m0[25u].z, _1603));
    float _1685;
    float _1687;
    float _1689;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1652 = fma(_857, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _849)) + cbModelParam._m0[13u].w;
        float _1656 = fma(_857, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _849)) + cbModelParam._m0[14u].w;
        float _1660 = fma(_857, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _849)) + cbModelParam._m0[15u].w;
        float _1663 = fma(_798, cbModelParam._m0[13u].z, fma(_797, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _796));
        float _1666 = fma(_798, cbModelParam._m0[14u].z, fma(_797, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _796));
        float _1669 = fma(_798, cbModelParam._m0[15u].z, fma(_797, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _796));
        float _1697;
        if (_1663 > 0.0)
        {
            _1697 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1697 = frontier_phi_14_12_ladder;
        }
        float _1868;
        if (_1666 > 0.0)
        {
            _1868 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1868 = frontier_phi_23_19_ladder;
        }
        float _2164;
        if (_1669 > 0.0)
        {
            _2164 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2164 = frontier_phi_35_30_ladder;
        }
        float _2166 = isnan(_1868) ? _1697 : (isnan(_1697) ? _1868 : min(_1697, _1868));
        float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
        float _2171 = (_2167 * _1663) + _1652;
        float _2172 = (_2167 * _1666) + _1656;
        float _2173 = (_2167 * _1669) + _1660;
        float _2174 = _2167 * 9.9999997473787516355514526367188e-05;
        float _2176 = (-1.0) - _2174;
        float _2178 = _2174 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2173 > _2178) || ((_2173 < _2176) || ((_2172 > _2178) || ((_2172 < _2176) || ((_2171 < _2176) || (_2171 > _2178))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2318 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2173, cbModelParam._m0[9u].z, fma(_2172, cbModelParam._m0[9u].y, _2171 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2173, cbModelParam._m0[10u].z, fma(_2172, cbModelParam._m0[10u].y, _2171 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2173, cbModelParam._m0[11u].z, fma(_2172, cbModelParam._m0[11u].y, _2171 * cbModelParam._m0[11u].x))), _1604);
            frontier_phi_13_35_ladder = _2318.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2318.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2318.x * cbModelParam._m0[1u].y;
        }
        _1685 = frontier_phi_13_35_ladder_2;
        _1687 = frontier_phi_13_35_ladder_1;
        _1689 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1673 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_796, _797, _798), _1604);
        _1685 = _1673.x * cbModelParam._m0[1u].y;
        _1687 = _1673.y * cbModelParam._m0[1u].y;
        _1689 = _1673.z * cbModelParam._m0[1u].y;
    }
    float _1693 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _639);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1693 : min(cbModelParam._m0[25u].w, _1693));
    float _1784;
    float _1786;
    float _1788;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1748 = fma(_857, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _849)) + cbModelParam._m0[21u].w;
        float _1752 = fma(_857, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _849)) + cbModelParam._m0[22u].w;
        float _1756 = fma(_857, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _849)) + cbModelParam._m0[23u].w;
        float _1759 = fma(_798, cbModelParam._m0[21u].z, fma(_797, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _796));
        float _1762 = fma(_798, cbModelParam._m0[22u].z, fma(_797, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _796));
        float _1765 = fma(_798, cbModelParam._m0[23u].z, fma(_797, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _796));
        float _1873;
        if (_1759 > 0.0)
        {
            _1873 = abs((1.0 - _1748) / _1759);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1748 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1873 = frontier_phi_25_21_ladder;
        }
        float _2191;
        if (_1762 > 0.0)
        {
            _2191 = abs((1.0 - _1752) / _1762);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1752 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2191 = frontier_phi_37_32_ladder;
        }
        float _2518;
        if (_1765 > 0.0)
        {
            _2518 = abs((1.0 - _1756) / _1765);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1756 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2518 = frontier_phi_47_44_ladder;
        }
        float _2520 = isnan(_2191) ? _1873 : (isnan(_1873) ? _2191 : min(_1873, _2191));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _1759) + _1748;
        float _2526 = (_2521 * _1762) + _1752;
        float _2527 = (_2521 * _1765) + _1756;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2529 = (-1.0) - _2528;
        float _2531 = _2528 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2527 > _2531) || ((_2527 < _2529) || ((_2526 > _2531) || ((_2526 < _2529) || ((_2525 < _2529) || (_2525 > _2531))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2645 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2527, cbModelParam._m0[17u].z, fma(_2526, cbModelParam._m0[17u].y, _2525 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2527, cbModelParam._m0[18u].z, fma(_2526, cbModelParam._m0[18u].y, _2525 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2527, cbModelParam._m0[19u].z, fma(_2526, cbModelParam._m0[19u].y, _2525 * cbModelParam._m0[19u].x))), _1694);
            frontier_phi_22_47_ladder = _2645.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2645.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2645.x * cbModelParam._m0[1u].z;
        }
        _1784 = frontier_phi_22_47_ladder_2;
        _1786 = frontier_phi_22_47_ladder_1;
        _1788 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_796, _797, _798), _1694);
        _1784 = _1768.x * cbModelParam._m0[1u].z;
        _1786 = _1768.y * cbModelParam._m0[1u].z;
        _1788 = _1768.z * cbModelParam._m0[1u].z;
    }
    float _1800 = ((((1.0 - _817) * ((_804 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_817 * _804)) * _788;
    float _1801 = _1800 * ((cbModelParam._m0[1u].w * (_1784 - _1685)) + _1685);
    float _1802 = _1800 * ((cbModelParam._m0[1u].w * (_1786 - _1687)) + _1687);
    float _1803 = _1800 * ((cbModelParam._m0[1u].w * (_1788 - _1689)) + _1689);
    float _1806 = fma(_1803, cbSceneParam._m0[89u].z, fma(_1802, cbSceneParam._m0[89u].y, _1801 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1803, cbSceneParam._m0[90u].z, fma(_1802, cbSceneParam._m0[90u].y, _1801 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1803, cbSceneParam._m0[91u].z, fma(_1802, cbSceneParam._m0[91u].y, _1801 * cbSceneParam._m0[91u].x));
    float _1847 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1851 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1855 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1859 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1860 = _1847 / _1859;
    float _1861 = _1851 / _1859;
    float _1862 = _1855 / _1859;
    float _2009;
    float _2010;
    float _2011;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1889 = ((uint(_1862 > cbSceneParam._m0[59u].y) + uint(_1862 > cbSceneParam._m0[59u].x)) + uint(_1862 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1890 = _1889 + 43u;
        uint _1898 = _1889 + 44u;
        uint _1906 = _1889 + 45u;
        uint _1914 = _1889 + 46u;
        float _1925 = fma(_1859, cbSceneParam._m0[_1890].w, fma(_1855, cbSceneParam._m0[_1890].z, fma(_1851, cbSceneParam._m0[_1890].y, _1847 * cbSceneParam._m0[_1890].x)));
        float _1929 = fma(_1859, cbSceneParam._m0[_1898].w, fma(_1855, cbSceneParam._m0[_1898].z, fma(_1851, cbSceneParam._m0[_1898].y, _1847 * cbSceneParam._m0[_1898].x)));
        float _1937 = fma(_1859, cbSceneParam._m0[_1914].w, fma(_1855, cbSceneParam._m0[_1914].z, fma(_1851, cbSceneParam._m0[_1914].y, _1847 * cbSceneParam._m0[_1914].x)));
        float _1942 = cbSceneParam._m0[33u].z * _1937;
        float _1944 = cbSceneParam._m0[33u].w * _1937;
        float _1947 = fma(_1859, cbSceneParam._m0[_1906].w, fma(_1855, cbSceneParam._m0[_1906].z, fma(_1851, cbSceneParam._m0[_1906].y, _1847 * cbSceneParam._m0[_1906].x))) / _1937;
        float _1995 = (cbSceneParam._m0[33u].x - sqrt(((_1861 * _1861) + (_1860 * _1860)) + (_1862 * _1862))) * cbSceneParam._m0[33u].y;
        float _4305 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _2002 = (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1942 + _1925) / _1937, (_1944 + _1929) / _1937), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1944 + _1925) / _1937, (_1929 - _1942) / _1937), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1925 - _1942) / _1937, (_1929 - _1944) / _1937), _1947), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1925 - _1944) / _1937, (_1942 + _1929) / _1937), _1947), 0.0)).x), vec4(0.25)));
        _2009 = 1.0 - (_2002 * cbSceneParam._m0[34u].x);
        _2010 = 1.0 - (_2002 * cbSceneParam._m0[34u].y);
        _2011 = 1.0 - (_2002 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2009 = 1.0;
        _2010 = 1.0;
        _2011 = 1.0;
    }
    float _2075;
    float _2077;
    float _2079;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2063 = fma(_1859, cbSceneParam._m0[63u].w, fma(_1855, cbSceneParam._m0[63u].z, fma(_1851, cbSceneParam._m0[63u].y, _1847 * cbSceneParam._m0[63u].x)));
        float _2064 = fma(_1859, cbSceneParam._m0[60u].w, fma(_1855, cbSceneParam._m0[60u].z, fma(_1851, cbSceneParam._m0[60u].y, _1847 * cbSceneParam._m0[60u].x))) / _2063;
        float _2065 = fma(_1859, cbSceneParam._m0[61u].w, fma(_1855, cbSceneParam._m0[61u].z, fma(_1851, cbSceneParam._m0[61u].y, _1847 * cbSceneParam._m0[61u].x))) / _2063;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2064 >= cbSceneParam._m0[64u].x) && (_2065 >= cbSceneParam._m0[64u].y)) && (_2064 <= cbSceneParam._m0[64u].z)) && (_2065 <= cbSceneParam._m0[64u].w))
        {
            float _2204 = fma(_1859, cbSceneParam._m0[62u].w, fma(_1855, cbSceneParam._m0[62u].z, fma(_1851, cbSceneParam._m0[62u].y, _1847 * cbSceneParam._m0[62u].x))) / _2063;
            float _2208 = isnan(cbSceneParam._m0[41u].w) ? _2204 : (isnan(_2204) ? cbSceneParam._m0[41u].w : max(_2204, cbSceneParam._m0[41u].w));
            float _2251 = (cbSceneParam._m0[33u].x - sqrt(((_1861 * _1861) + (_1860 * _1860)) + (_1862 * _1862))) * cbSceneParam._m0[33u].y;
            float _4321 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
            float _2258 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2064, cbSceneParam._m0[33u].w + _2065), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2064, _2065 - cbSceneParam._m0[33u].z), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2064 - cbSceneParam._m0[33u].z, _2065 - cbSceneParam._m0[33u].w), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2064 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2065), _2208), 0.0)).x), vec4(0.25)));
            float _2262 = 1.0 - (_2258 * cbSceneParam._m0[34u].x);
            float _2263 = 1.0 - (_2258 * cbSceneParam._m0[34u].y);
            float _2264 = 1.0 - (_2258 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2264) ? _2011 : (isnan(_2011) ? _2264 : min(_2011, _2264));
            frontier_phi_34_33_ladder_1 = isnan(_2263) ? _2010 : (isnan(_2010) ? _2263 : min(_2010, _2263));
            frontier_phi_34_33_ladder_2 = isnan(_2262) ? _2009 : (isnan(_2009) ? _2262 : min(_2009, _2262));
        }
        else
        {
            frontier_phi_34_33_ladder = _2011;
            frontier_phi_34_33_ladder_1 = _2010;
            frontier_phi_34_33_ladder_2 = _2009;
        }
        _2075 = frontier_phi_34_33_ladder_2;
        _2077 = frontier_phi_34_33_ladder_1;
        _2079 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2075 = _2009;
        _2077 = _2010;
        _2079 = _2011;
    }
    uvec4 _2084 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2086 = _2084.x * 14u;
    uint _2087 = _2086 + 13u;
    float _2094 = _788 + (-1.0);
    float _2099 = (cbLight._m0[_2087].x * _2094) + 1.0;
    float _2100 = (cbLight._m0[_2087].y * _2094) + 1.0;
    float _2101 = (cbLight._m0[_2087].z * _2094) + 1.0;
    float _2102 = (cbLight._m0[_2087].w * _2094) + 1.0;
    uint _2103 = _2086 + 5u;
    float _2109 = isnan(1.0) ? _2100 : (isnan(_2100) ? 1.0 : min(_2100, 1.0));
    uint _2113 = _2086 + 4u;
    float _2123 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2127 = _2086 | 1u;
    float _2138 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_636, _637, _638));
    float _2141 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_636, _637, _638));
    float _4357 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _4368 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2146 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * 0.3183098733425140380859375;
    float _2148 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.3183098733425140380859375;
    float _2155 = ((cbLight._m0[_2103].x * _2109) * _2148) + (((cbLight._m0[_2113].x * _2075) * _2123) * _2146);
    float _2156 = ((_2109 * cbLight._m0[_2103].y) * _2148) + (((cbLight._m0[_2113].y * _2077) * _2123) * _2146);
    float _2157 = ((_2109 * cbLight._m0[_2103].z) * _2148) + (((cbLight._m0[_2113].z * _2079) * _2123) * _2146);
    uvec4 _2161 = floatBitsToUint(cbLight._m0[_2086 + 12u]);
    bool _2163 = _2161.x == 0u;
    float _2265;
    float _2267;
    float _2269;
    if (_2163)
    {
        _2265 = _2155;
        _2267 = _2156;
        _2269 = _2157;
    }
    else
    {
        uint _2273 = _2086 + 6u;
        float _2289 = (dot(vec3(cbLight._m0[_2086 + 2u].xyz), vec3(_636, _637, _638)) * 0.5) + 0.5;
        float _2290 = _2289 * _2289;
        float _4379 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2291 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2292 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2265 = (((cbLight._m0[_2273].x * 0.3183098733425140380859375) * _2291) * _2292) + _2155;
        _2267 = (((cbLight._m0[_2273].y * 0.3183098733425140380859375) * _2291) * _2292) + _2156;
        _2269 = (((cbLight._m0[_2273].z * 0.3183098733425140380859375) * _2291) * _2292) + _2157;
    }
    bool _2272 = _2161.y == 0u;
    float _2327;
    float _2329;
    float _2331;
    if (_2272)
    {
        _2327 = _2265;
        _2329 = _2267;
        _2331 = _2269;
    }
    else
    {
        uint _2489 = _2086 + 7u;
        float _2505 = (dot(vec3(cbLight._m0[_2086 + 3u].xyz), vec3(_636, _637, _638)) * 0.5) + 0.5;
        float _2506 = _2505 * _2505;
        float _4395 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2507 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2508 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2327 = (((cbLight._m0[_2489].x * 0.3183098733425140380859375) * _2507) * _2508) + _2265;
        _2329 = (((cbLight._m0[_2489].y * 0.3183098733425140380859375) * _2507) * _2508) + _2267;
        _2331 = (((cbLight._m0[_2489].z * 0.3183098733425140380859375) * _2507) * _2508) + _2269;
    }
    uint _2334 = _2086 + 8u;
    float _2347 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _639) * 0.949999988079071044921875);
    float _2348 = _2347 * _2347;
    float _2349 = cbLight._m0[_2086].x + _714;
    float _2350 = cbLight._m0[_2086].y + _715;
    float _2351 = cbLight._m0[_2086].z + _716;
    float _2355 = inversesqrt(dot(vec3(_2349, _2350, _2351), vec3(_2349, _2350, _2351)));
    float _2356 = _2355 * _2349;
    float _2357 = _2355 * _2350;
    float _2358 = _2355 * _2351;
    float _2359 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2086].xyz));
    float _4411 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _4422 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _2363 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2364 = dot(vec3(_636, _637, _638), vec3(_2356, _2357, _2358));
    float _4433 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2356, _2357, _2358));
    float _4444 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2348 * _2348;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2387 = (exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2388 = 1.0 - _2348;
    float _2399 = (0.5 / (((_2363 * ((_2362 * _2388) + _2348)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2388) + _2348) * _2362))) * _2362;
    float _4455 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2401 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    uint _2415 = _2086 + 9u;
    float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2127].w)) * _639) * 0.949999988079071044921875);
    float _2427 = _2426 * _2426;
    float _2428 = cbLight._m0[_2127].x + _714;
    float _2429 = cbLight._m0[_2127].y + _715;
    float _2430 = cbLight._m0[_2127].z + _716;
    float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
    float _2435 = _2434 * _2428;
    float _2436 = _2434 * _2429;
    float _2437 = _2434 * _2430;
    float _2438 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2127].xyz));
    float _4466 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
    float _2442 = dot(vec3(_636, _637, _638), vec3(_2435, _2436, _2437));
    float _4477 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2445 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2446 = dot(vec3(cbLight._m0[_2127].xyz), vec3(_2435, _2436, _2437));
    float _4488 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2450 = _2427 * _2427;
    float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
    float _2463 = (exp2(log2(1.0 - (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2464 = 1.0 - _2427;
    float _2474 = (0.5 / (((_2363 * ((_2441 * _2464) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2464) + _2427) * _2441))) * _2441;
    float _4499 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2476 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
    float _2486 = (((_2463 * cbLight._m0[_2415].x) * _2476) * _2109) + ((((cbLight._m0[_2334].x * _2075) * _2387) * _2401) * _2123);
    float _2487 = (((_2463 * cbLight._m0[_2415].y) * _2476) * _2109) + ((((cbLight._m0[_2334].y * _2077) * _2387) * _2401) * _2123);
    float _2488 = (((_2463 * cbLight._m0[_2415].z) * _2476) * _2109) + ((((cbLight._m0[_2334].z * _2079) * _2387) * _2401) * _2123);
    float _2544;
    float _2546;
    float _2548;
    if (_2163)
    {
        _2544 = _2486;
        _2546 = _2487;
        _2548 = _2488;
    }
    else
    {
        uint _2550 = _2086 + 2u;
        uint _2554 = _2086 + 10u;
        float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2550].w)) * _639) * 0.949999988079071044921875);
        float _2569 = _2568 * _2568;
        float _2570 = cbLight._m0[_2550].x + _714;
        float _2571 = cbLight._m0[_2550].y + _715;
        float _2572 = cbLight._m0[_2550].z + _716;
        float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
        float _2577 = _2576 * _2570;
        float _2578 = _2576 * _2571;
        float _2579 = _2576 * _2572;
        float _2580 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2550].xyz));
        float _4510 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2584 = dot(vec3(_636, _637, _638), vec3(_2577, _2578, _2579));
        float _4521 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2587 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2588 = dot(vec3(cbLight._m0[_2550].xyz), vec3(_2577, _2578, _2579));
        float _4532 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
        float _2592 = _2569 * _2569;
        float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
        float _2605 = (exp2(log2(1.0 - (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2606 = 1.0 - _2569;
        float _2616 = (0.5 / (((_2363 * ((_2583 * _2606) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2606) + _2569) * _2583))) * _2583;
        float _4543 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2618 = (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
        float _2619 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
        _2544 = (((_2605 * cbLight._m0[_2554].x) * _2618) * _2619) + _2486;
        _2546 = (((_2605 * cbLight._m0[_2554].y) * _2618) * _2619) + _2487;
        _2548 = (((_2605 * cbLight._m0[_2554].z) * _2618) * _2619) + _2488;
    }
    float _2650;
    float _2652;
    float _2654;
    if (_2272)
    {
        _2650 = _2544;
        _2652 = _2546;
        _2654 = _2548;
    }
    else
    {
        uint _2661 = _2086 + 3u;
        uint _2665 = _2086 + 11u;
        float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2661].w)) * _639) * 0.949999988079071044921875);
        float _2680 = _2679 * _2679;
        float _2681 = cbLight._m0[_2661].x + _714;
        float _2682 = cbLight._m0[_2661].y + _715;
        float _2683 = cbLight._m0[_2661].z + _716;
        float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
        float _2688 = _2687 * _2681;
        float _2689 = _2687 * _2682;
        float _2690 = _2687 * _2683;
        float _2691 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2661].xyz));
        float _4559 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2694 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2695 = dot(vec3(_636, _637, _638), vec3(_2688, _2689, _2690));
        float _4570 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2698 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2699 = dot(vec3(cbLight._m0[_2661].xyz), vec3(_2688, _2689, _2690));
        float _4581 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2703 = _2680 * _2680;
        float _2707 = ((_2698 * _2698) * (_2703 + (-1.0))) + 1.0;
        float _2716 = (exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2717 = 1.0 - _2680;
        float _2727 = (0.5 / (((_2363 * ((_2694 * _2717) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2363 * _2717) + _2680) * _2694))) * _2694;
        float _4592 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2729 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2703 / ((_2707 * _2707) * 3.141590118408203125));
        float _2730 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
        _2650 = (((_2716 * cbLight._m0[_2665].x) * _2729) * _2730) + _2544;
        _2652 = (((_2716 * cbLight._m0[_2665].y) * _2729) * _2730) + _2546;
        _2654 = (((_2716 * cbLight._m0[_2665].z) * _2729) * _2730) + _2548;
    }
    float _2796;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    float _2806;
    if (_2084.y == 0u)
    {
        uvec4 _2751 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2752 = _2751.x;
        uint _2763 = uint((float(_2751.y) * floor(float(uint(cbSceneParam._m0[85u].y * _723) / _2752))) + floor(float(uint(cbSceneParam._m0[85u].x * _722) / _2752)));
        float _2773 = (log2(_1862 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2774 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        uint _2777 = uint(isnan(14.0) ? _2774 : (isnan(_2774) ? 14.0 : min(_2774, 14.0)));
        uvec4 _2782 = texelFetch(g_lightClusterGridBuffer, int(((_2777 << 2u) + (_2763 << 6u)) >> 2u));
        uint _2783 = _2782.x;
        uint _2784 = _2751.z;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        if (((((1u << ((_2784 >> 4u) & 15u)) + 4294967295u) & _2783) == 0u) || ((_2784 & 240u) == 0u))
        {
            _2863 = 0.0;
            _2865 = 0.0;
            _2867 = 0.0;
            _2869 = 0.0;
            _2871 = 0.0;
            _2873 = 0.0;
        }
        else
        {
            float _2864;
            float _2866;
            float _2868;
            float _2870;
            float _2872;
            float _2874;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            uint _3014 = 0u;
            uint _3023;
            bool _3024;
            for (;;)
            {
                _3023 = texelFetch(g_lightClassification, int((((_2777 << 5u) + (_2763 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                _3024 = _3023 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3024)
                {
                    frontier_phi_66_pred = _3013;
                    frontier_phi_66_pred_1 = _3012;
                    frontier_phi_66_pred_2 = _3011;
                    frontier_phi_66_pred_3 = _3010;
                    frontier_phi_66_pred_4 = _3009;
                    frontier_phi_66_pred_5 = _3008;
                }
                else
                {
                    float _3132;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    uint _3138;
                    _3132 = _3008;
                    _3133 = _3009;
                    _3134 = _3010;
                    _3135 = _3011;
                    _3136 = _3012;
                    _3137 = _3013;
                    _3138 = _3023;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    for (;;)
                    {
                        uint _3142 = uint(findLSB(_3138)) + (_3014 << 5u);
                        uint _3139 = (_3138 + 4294967295u) & _3138;
                        uint _3144 = _3142 * 48u;
                        vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3144)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3144 + 3u)).x));
                        uint _3164 = (_3142 * 48u) + 4u;
                        vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3183 = (_3142 * 48u) + 8u;
                        vec3 _3194 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x));
                        float _3198 = _3158.x - _1860;
                        float _3199 = _3158.y - _1861;
                        float _3200 = _3158.z - _1862;
                        float _3201 = dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200));
                        float _3204 = inversesqrt(_3201);
                        float _3205 = _3204 * _3198;
                        float _3206 = _3204 * _3199;
                        float _3207 = _3204 * _3200;
                        float _3208 = dot(vec3(_744, _747, _750), vec3(_3205, _3206, _3207));
                        float _3213 = 1.0 - (_3201 * _3158.w);
                        float _4618 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                        float _3215 = sqrt(_3201) * _3177.w;
                        float _3218 = 1.39999997615814208984375 / (_3215 + 1.39999997615814208984375);
                        float _3219 = _3218 * _3218;
                        float _3222 = ((1.0 - _3219) * _3208) + _3219;
                        float _3225 = _3215 * _3215;
                        float _3229 = ((isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0))) * _3214) / ((_3225 * 0.699999988079071044921875) + 1.0);
                        float _3233 = (-0.0) - _1860;
                        float _3234 = (-0.0) - _1861;
                        float _3235 = (-0.0) - _1862;
                        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                        float _3240 = _3239 * _3233;
                        float _3241 = _3239 * _3234;
                        float _3242 = _3239 * _3235;
                        float _3249 = exp2(log2(1.0 / ((_3225 * 3.5) + 5.0)) * 0.25);
                        float _3250 = 1.0 - _804;
                        float _3257 = sqrt(1.0 - ((1.0 - (_3250 * _3250)) * (1.0 - (_3249 * _3249))));
                        float _3258 = _3257 * _3257;
                        float _3259 = _3258 * _3258;
                        float _3260 = _3240 + _3205;
                        float _3261 = _3241 + _3206;
                        float _3262 = _3242 + _3207;
                        float _3266 = inversesqrt(dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262)));
                        float _3270 = dot(vec3(_744, _747, _750), vec3(_3240, _3241, _3242));
                        float _4634 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3273 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3274 = dot(vec3(_744, _747, _750), vec3(_3266 * _3260, _3266 * _3261, _3266 * _3262));
                        float _4645 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3277 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3281 = ((_3277 * _3277) * (_3259 + (-1.0))) + 1.0;
                        float _3282 = _3218 * _3258;
                        float _3283 = _3282 * _3282;
                        float _3286 = ((1.0 - _3283) * _3208) + _3283;
                        float _4656 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3287 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3288 = 1.0 - _3258;
                        float _3298 = (0.5 / (((_3287 * ((_3273 * _3288) + _3258)) + 9.9999999392252902907785028219223e-09) + (((_3287 * _3288) + _3258) * _3273))) * _3287;
                        float _4667 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                        float _3309 = (((_3259 * 3.1415927410125732421875) * (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) / ((_3281 * _3281) * ((_3225 * 2.1991131305694580078125) + 3.141590118408203125))) * _3214;
                        _3067 = (_3229 * _3177.x) + _3135;
                        _3068 = (_3229 * _3177.y) + _3136;
                        _3069 = (_3229 * _3177.z) + _3137;
                        _3064 = (_3309 * _3194.x) + _3132;
                        _3065 = (_3309 * _3194.y) + _3133;
                        _3066 = (_3309 * _3194.z) + _3134;
                        if (_3139 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3132 = _3064;
                            _3133 = _3065;
                            _3134 = _3066;
                            _3135 = _3067;
                            _3136 = _3068;
                            _3137 = _3069;
                            _3138 = _3139;
                        }
                    }
                    frontier_phi_66_pred = _3069;
                    frontier_phi_66_pred_1 = _3068;
                    frontier_phi_66_pred_2 = _3067;
                    frontier_phi_66_pred_3 = _3066;
                    frontier_phi_66_pred_4 = _3065;
                    frontier_phi_66_pred_5 = _3064;
                }
                _2874 = frontier_phi_66_pred;
                _2872 = frontier_phi_66_pred_1;
                _2870 = frontier_phi_66_pred_2;
                _2868 = frontier_phi_66_pred_3;
                _2866 = frontier_phi_66_pred_4;
                _2864 = frontier_phi_66_pred_5;
                uint _3015 = _3014 + 1u;
                if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3008 = _2864;
                    _3009 = _2866;
                    _3010 = _2868;
                    _3011 = _2870;
                    _3012 = _2872;
                    _3013 = _2874;
                    _3014 = _3015;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2863 = _2864;
            _2865 = _2866;
            _2867 = _2868;
            _2869 = _2870;
            _2871 = _2872;
            _2873 = _2874;
        }
        uvec4 _2877 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2878 = _2877.z;
        uint _2880 = (_2878 >> 8u) & 15u;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        if (((4294967295u << _2880) & _2783) == 0u)
        {
            _2976 = _2863;
            _2978 = _2865;
            _2980 = _2867;
            _2982 = _2869;
            _2984 = _2871;
            _2986 = _2873;
        }
        else
        {
            float _3001 = inversesqrt(dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862)));
            float _3002 = _3001 * _1860;
            float _3003 = _3001 * _1861;
            float _3004 = _3001 * _1862;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2880 < ((_2878 >> 12u) & 15u))
            {
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _3115 = _2863;
                float _3116 = _2865;
                float _3117 = _2867;
                float _3118 = _2869;
                float _3119 = _2871;
                float _3120 = _2873;
                uint _3121 = _2880;
                uint _3130;
                bool _3131;
                for (;;)
                {
                    _3130 = texelFetch(g_lightClassification, int((((_2777 << 5u) + (_2763 << 9u)) + (_3121 << 2u)) >> 2u)).x;
                    _3131 = _3130 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3131)
                    {
                        frontier_phi_72_pred = _3120;
                        frontier_phi_72_pred_1 = _3119;
                        frontier_phi_72_pred_2 = _3118;
                        frontier_phi_72_pred_3 = _3117;
                        frontier_phi_72_pred_4 = _3116;
                        frontier_phi_72_pred_5 = _3115;
                    }
                    else
                    {
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3327 = _3115;
                        float _3328 = _3116;
                        float _3329 = _3117;
                        float _3330 = _3118;
                        float _3331 = _3119;
                        float _3332 = _3120;
                        uint _3333 = _3130;
                        uint _3334;
                        vec4 _3359;
                        float _3360;
                        vec4 _3375;
                        vec3 _3387;
                        vec4 _3402;
                        vec4 _3417;
                        float _3463;
                        bool _3464;
                        for (;;)
                        {
                            uint _3344 = ((_3121 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3333));
                            _3334 = (_3333 + 4294967295u) & _3333;
                            uint _3346 = _3344 * 40u;
                            _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            _3360 = _3359.w;
                            uint _3362 = (_3344 * 40u) + 4u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3377 = (_3344 * 40u) + 8u;
                            _3387 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x));
                            uint _3389 = (_3344 * 40u) + 16u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3404 = (_3344 * 40u) + 20u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            uint _3419 = (_3344 * 40u) + 24u;
                            vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3438 = (_3344 * 40u) + 28u;
                            vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            _3463 = fma(_1862, _3451.z, fma(_1861, _3451.y, _3451.x * _1860)) + _3451.w;
                            _3464 = !((fma(_1862, _3432.z, fma(_1861, _3432.y, _3432.x * _1860)) + _3432.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3464)
                            {
                                float _3491 = _3359.x - _1860;
                                float _3492 = _3359.y - _1861;
                                float _3493 = _3359.z - _1862;
                                float _3494 = dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493));
                                float _3497 = inversesqrt(_3494);
                                float _3498 = _3497 * _3491;
                                float _3499 = _3497 * _3492;
                                float _3500 = _3497 * _3493;
                                float _3504 = 1.0 - (_3494 / (_3360 * _3360));
                                float _4678 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                                float _3509 = sqrt(_3494) * _3375.w;
                                float _3511 = 1.39999997615814208984375 / (_3509 + 1.39999997615814208984375);
                                float _3512 = _3511 * _3511;
                                float _3515 = ((1.0 - _3512) * dot(vec3(_3498, _3499, _3500), vec3(_744, _747, _750))) + _3512;
                                float _3518 = _3509 * _3509;
                                float _3522 = (fma(_1862, _3402.z, fma(_1861, _3402.y, _3402.x * _1860)) + _3402.w) / _3463;
                                float _3523 = (fma(_1862, _3417.z, fma(_1861, _3417.y, _3417.x * _1860)) + _3417.w) / _3463;
                                float _3527 = 1.0 - dot(vec2(_3522, _3523), vec2(_3522, _3523));
                                float _4694 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3529 = _3528 * (((isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0))) * _3505) / ((_3518 * 0.699999988079071044921875) + 1.0));
                                float _3541 = exp2(log2(1.0 / ((_3518 * 3.5) + 5.0)) * 0.25);
                                float _3542 = 1.0 - _804;
                                float _3549 = sqrt(1.0 - ((1.0 - (_3542 * _3542)) * (1.0 - (_3541 * _3541))));
                                float _3550 = _3549 * _3549;
                                float _3551 = _3550 * _3550;
                                float _3552 = _3498 - _3002;
                                float _3553 = _3499 - _3003;
                                float _3554 = _3500 - _3004;
                                float _3558 = inversesqrt(dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554)));
                                float _3562 = dot(vec3(_744, _747, _750), vec3((-0.0) - _3002, (-0.0) - _3003, (-0.0) - _3004));
                                float _4705 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3565 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3566 = dot(vec3(_744, _747, _750), vec3(_3558 * _3552, _3558 * _3553, _3558 * _3554));
                                float _4716 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3569 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3573 = ((_3569 * _3569) * (_3551 + (-1.0))) + 1.0;
                                float _3574 = _3511 * _3550;
                                float _3575 = _3574 * _3574;
                                float _3581 = ((1.0 - _3575) * dot(vec3(_744, _747, _750), vec3(_3498, _3499, _3500))) + _3575;
                                float _4727 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3583 = 1.0 - _3550;
                                float _3593 = (0.5 / (((_3582 * ((_3565 * _3583) + _3550)) + 9.9999999392252902907785028219223e-09) + (((_3582 * _3583) + _3550) * _3565))) * _3582;
                                float _4738 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3603 = (_3528 * _3505) * (((_3551 * 3.1415927410125732421875) * (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) / ((_3573 * _3573) * ((_3518 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3529 * _3375.y;
                                frontier_phi_78_pred_1 = _3529 * _3375.x;
                                frontier_phi_78_pred_2 = _3603 * _3387.z;
                                frontier_phi_78_pred_3 = _3603 * _3387.y;
                                frontier_phi_78_pred_4 = _3603 * _3387.x;
                                frontier_phi_78_pred_5 = _3529 * _3375.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3611 = frontier_phi_78_pred;
                            _3610 = frontier_phi_78_pred_1;
                            _3609 = frontier_phi_78_pred_2;
                            _3608 = frontier_phi_78_pred_3;
                            _3607 = frontier_phi_78_pred_4;
                            _3612 = frontier_phi_78_pred_5;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            _3319 = _3612 + _3332;
                            _3314 = _3607 + _3327;
                            _3315 = _3608 + _3328;
                            _3316 = _3609 + _3329;
                            if (_3334 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3334;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3319;
                        frontier_phi_72_pred_1 = _3318;
                        frontier_phi_72_pred_2 = _3317;
                        frontier_phi_72_pred_3 = _3316;
                        frontier_phi_72_pred_4 = _3315;
                        frontier_phi_72_pred_5 = _3314;
                    }
                    _2987 = frontier_phi_72_pred;
                    _2985 = frontier_phi_72_pred_1;
                    _2983 = frontier_phi_72_pred_2;
                    _2981 = frontier_phi_72_pred_3;
                    _2979 = frontier_phi_72_pred_4;
                    _2977 = frontier_phi_72_pred_5;
                    uint _3122 = _3121 + 1u;
                    if (_3122 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3115 = _2977;
                        _3116 = _2979;
                        _3117 = _2981;
                        _3118 = _2983;
                        _3119 = _2985;
                        _3120 = _2987;
                        _3121 = _3122;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2987;
                frontier_phi_60_61_ladder_1 = _2985;
                frontier_phi_60_61_ladder_2 = _2981;
                frontier_phi_60_61_ladder_3 = _2979;
                frontier_phi_60_61_ladder_4 = _2977;
                frontier_phi_60_61_ladder_5 = _2983;
            }
            else
            {
                frontier_phi_60_61_ladder = _2873;
                frontier_phi_60_61_ladder_1 = _2871;
                frontier_phi_60_61_ladder_2 = _2867;
                frontier_phi_60_61_ladder_3 = _2865;
                frontier_phi_60_61_ladder_4 = _2863;
                frontier_phi_60_61_ladder_5 = _2869;
            }
            _2976 = frontier_phi_60_61_ladder_4;
            _2978 = frontier_phi_60_61_ladder_3;
            _2980 = frontier_phi_60_61_ladder_2;
            _2982 = frontier_phi_60_61_ladder_5;
            _2984 = frontier_phi_60_61_ladder_1;
            _2986 = frontier_phi_60_61_ladder;
        }
        float _2991 = isnan(1.0) ? _788 : (isnan(_788) ? 1.0 : min(_788, 1.0));
        _2796 = (_2991 * _2982) + _2327;
        _2798 = (_2991 * _2984) + _2329;
        _2800 = (_2991 * _2986) + _2331;
        _2802 = ((_2976 * 0.039999999105930328369140625) * _2991) + _2650;
        _2804 = ((_2978 * 0.039999999105930328369140625) * _2991) + _2652;
        _2806 = ((_2980 * 0.039999999105930328369140625) * _2991) + _2654;
    }
    else
    {
        _2796 = _2327;
        _2798 = _2329;
        _2800 = _2331;
        _2802 = _2650;
        _2804 = _2652;
        _2806 = _2654;
    }
    float _4754 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4765 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4776 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    uint _2826 = _267 + 6u;
    float _2834 = _722 / cbSceneParam._m0[86u].x;
    float _2835 = _723 / cbSceneParam._m0[86u].y;
    vec4 _2849 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, (log2((isnan(cbSceneParam._m0[77u].w) ? _657 : (isnan(_657) ? cbSceneParam._m0[77u].w : min(_657, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2851 = _2849.x;
    float _2852 = _2849.y;
    float _2853 = _2849.z;
    float _2854 = _2849.w;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_657 > cbSceneParam._m0[78u].w)
    {
        float _2888 = isnan(_657) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _657 : min(cbSceneParam._m0[80u].w, _657));
        float _2889 = _2888 / _657;
        float _2900 = _2889 * _707;
        float _2901 = _708 * _2889;
        float _2902 = (-0.0) - _2901;
        float _2904 = _2889 * _709;
        float _2906 = (cbSceneParam._m0[77u].w * _2902) / _2888;
        float _2907 = _2906 + cbSceneParam._m0[79u].w;
        float _2908 = cbSceneParam._m0[79u].w - _2901;
        float _2914 = sqrt(((_2900 * _2900) + (_2901 * _2901)) + (_2904 * _2904));
        float _2917 = (1.0 - (cbSceneParam._m0[77u].w / _2888)) * _2914;
        float _2922 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2924 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3077;
        if (abs((_2902 - _2906) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3077 = ((((_2907 > 0.0) ? exp2(_2922 * _2907) : (2.0 - exp2(_2924 * _2907))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2917;
        }
        else
        {
            float _3037 = 1.0 / cbSceneParam._m0[80u].x;
            float _3038 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : max(_2907, _2908));
            float _3039 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : min(_2907, _2908));
            float _3048 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : min(_3038, 0.0));
            float _3049 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : min(_3039, 0.0));
            _3077 = ((abs(_2914 / _2902) * cbSceneParam._m0[80u].y) * ((((_3048 - _3049) * 2.0) - ((exp2(_2922 * (isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0)))) - exp2(_2922 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))))) * _3037)) - ((exp2(_2924 * _3048) - exp2(_2924 * _3049)) * _3037))) + (_2917 * cbSceneParam._m0[80u].z);
        }
        vec4 _3079 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2834, _2835, 1.0), 0.0);
        float _3088 = exp2((_3077 * (-1.44269502162933349609375)) * (1.0 - _3079.w));
        float _3089 = log2(_3088);
        float _3105 = log2(_2854);
        _2926 = (exp2(_3105 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].x)) * _3079.x) / cbSceneParam._m0[78u].x)) + _2851;
        _2928 = (exp2(_3105 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].y)) * _3079.y) / cbSceneParam._m0[78u].y)) + _2852;
        _2930 = (exp2(_3105 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3089 * cbSceneParam._m0[78u].z)) * _3079.z) / cbSceneParam._m0[78u].z)) + _2853;
        _2932 = _3088 * _2854;
    }
    else
    {
        _2926 = _2851;
        _2928 = _2852;
        _2930 = _2853;
        _2932 = _2854;
    }
    float _2944 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2945 = _2944 == 3.0;
    float _2946 = log2(_2932);
    float _2953 = exp2(_2946 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2796 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _788))) + ((_2802 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1593)) * cbPerFrame._m0[3u].x));
    float _2954 = exp2(_2946 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2798 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _788))) + ((_2804 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1593)) * cbPerFrame._m0[3u].x));
    float _2955 = exp2(_2946 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2800 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _788))) + ((_2806 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1593)) * cbPerFrame._m0[3u].x));
    float _2964 = (_2944 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2964 * (_2945 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2926)));
    SV_Target.y = _2964 * (_2945 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2928)));
    SV_Target.z = _2964 * (_2945 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2930)));
    SV_Target.w = cbInstanceData._m0[_2826].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2826].w;
}


