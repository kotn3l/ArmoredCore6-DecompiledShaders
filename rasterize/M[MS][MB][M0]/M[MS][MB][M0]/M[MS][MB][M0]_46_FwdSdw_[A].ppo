#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1071;
float _3715;
float _3716;
float _3717;
float _3718;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _272 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _272.x * cbMtdParam._m0[9u].x;
    float _279 = _272.y * cbMtdParam._m0[9u].y;
    float _280 = _272.z * cbMtdParam._m0[9u].z;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _252) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _319 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _252) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _253) + cbTextureTilingScale._m0[20u].w));
    vec4 _345 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _349 = _345.z;
    float _353 = (_345.x * 2.0) + (-1.0);
    float _354 = (_345.y * 2.0) + (-1.0);
    float _355 = dot(vec2(_353, _354), vec2(_353, _354));
    float _3727 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _361 = sqrt(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))));
    float _366 = _353 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_319.x * 2.0) + (-1.0)));
    float _367 = _354 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_319.y * 2.0) + (-1.0)));
    float _370 = fma(_361, _220, fma(_367, _227, _366 * _213));
    float _373 = fma(_361, _221, fma(_367, _228, _366 * _214));
    float _376 = fma(_361, _222, fma(_367, _229, _366 * _215));
    float _380 = inversesqrt(dot(vec3(_370, _373, _376), vec3(_370, _373, _376)));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _418 = _416.x;
    float _419 = 1.0 - _418;
    float _428 = (cbMtdParam._m0[19u].x + dot(vec4(_380 * _370, _380 * _373, _380 * _376, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_418 - _419) * cbMtdParam._m0[24u].z) + _419) * cbMtdParam._m0[21u].z);
    float _3738 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _436 = (_429 * ((_299.x * cbMtdParam._m0[18u].x) - _278)) + _278;
    float _437 = (_429 * ((_299.y * cbMtdParam._m0[18u].y) - _279)) + _279;
    float _438 = (_429 * ((_299.z * cbMtdParam._m0[18u].z) - _280)) + _280;
    float _443 = (((_319.z - _349) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _349;
    vec4 _456 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _463 = (_456.x * 2.0) + (-1.0);
    float _464 = (_456.y * 2.0) + (-1.0);
    float _465 = dot(vec2(_463, _464), vec2(_463, _464));
    float _3749 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _473 = ((_456.z - _443) * _429) + _443;
    float _483 = ((sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0)))) - _361) * _429) + _361;
    float _486 = (((_463 - _366) * _429) + _366) + (cbMtdParam._m0[21u].x * _366);
    float _487 = (((_464 - _367) * _429) + _367) + (cbMtdParam._m0[21u].x * _367);
    float _492 = cbMtdParam._m0[22u].x + _345.w;
    float _495 = fma(_483, _220, fma(_487, _227, _486 * _213));
    float _498 = fma(_483, _221, fma(_487, _228, _486 * _214));
    float _501 = fma(_483, _222, fma(_487, _229, _486 * _215));
    float _505 = inversesqrt(dot(vec3(_495, _498, _501), vec3(_495, _498, _501)));
    float _506 = _505 * _495;
    float _507 = _505 * _498;
    float _508 = _505 * _501;
    float _3760 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _509 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3782 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3793 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3804 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _527 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _578 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _568);
    float _579 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _568);
    float _580 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _568);
    float _584 = inversesqrt(dot(vec3(_578, _579, _580), vec3(_578, _579, _580)));
    float _585 = _578 * _584;
    float _586 = _579 * _584;
    float _587 = _580 * _584;
    vec4 _592 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _594 = _592.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _751 = sqrt(((_578 * _578) + (_579 * _579)) + (_580 * _580));
        float _757 = (cbMatDynParam._m0[5u].x * _751) + cbMatDynParam._m0[5u].y;
        float _3815 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _762 = (cbMatDynParam._m0[5u].z * _751) + cbMatDynParam._m0[5u].w;
        float _3826 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) - _758)) + _758) < ((_594 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _606 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _607 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _627 = fma(_508, cbSceneParam._m0[5u].z, fma(_507, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _506));
    float _630 = fma(_508, cbSceneParam._m0[6u].z, fma(_507, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _506));
    float _633 = fma(_508, cbSceneParam._m0[7u].z, fma(_507, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _506));
    uint _646 = _232 + 9u;
    uint _647 = _646 + uint(cbMatDynParam._m0[0u].w);
    float _653 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_647].x;
    float _654 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_647].y;
    float _655 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_647].z;
    float _3837 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _658 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    vec4 _667 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _606, cbSceneParam._m0[86u].y * _607));
    float _671 = ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * TEXCOORD_5.w) * _667.x;
    float _672 = dot(vec3(_506, _507, _508), vec3(_585, _586, _587));
    float _675 = _672 * 2.0;
    float _679 = (_675 * _506) - _585;
    float _680 = (_675 * _507) - _586;
    float _681 = (_675 * _508) - _587;
    float _685 = abs(dot(vec3(_585, _586, _587), vec3(_506, _507, _508)));
    float _3870 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _687 = sqrt(_509);
    float _700 = exp2((_687 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_687 * 3.0));
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1070;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _795 = fma(_740, cbModelParam._m0[26u].z, fma(_736, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _732));
        float _799 = fma(_740, cbModelParam._m0[27u].z, fma(_736, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _732));
        float _803 = fma(_740, cbModelParam._m0[28u].z, fma(_736, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _732));
        float _828 = _732 + _506;
        float _829 = _736 + _507;
        float _830 = _740 + _508;
        float _840 = fma(_830, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828)) - _795;
        float _841 = fma(_830, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828)) - _799;
        float _842 = fma(_830, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828)) - _803;
        float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
        float _859 = ((_846 * _840) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_795 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_846 * _841) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_799 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_846 * _842) / cbModelParam._m0[34u].z) + ((((((_803 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        float _898 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_864.x + (-0.5));
        float _900 = _898 * (_864.y + (-0.5));
        float _901 = _898 * (_864.z + (-0.5));
        float _908 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_871.x + (-0.5));
        float _910 = _908 * (_871.y + (-0.5));
        float _911 = _908 * (_871.z + (-0.5));
        float _918 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_878.x + (-0.5));
        float _920 = _918 * (_878.y + (-0.5));
        float _921 = _918 * (_878.z + (-0.5));
        float _928 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_885.x + (-0.5));
        float _930 = _928 * (_885.y + (-0.5));
        float _931 = _928 * (_885.z + (-0.5));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = _899 * 0.5;
        float _936 = _909 * 0.5;
        float _937 = _919 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _952 = (dot(vec3(_506, _507, _508), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _962 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3918 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_964 + 1.0))) + _969) * _932;
        float _979 = _900 * 0.5;
        float _980 = _910 * 0.5;
        float _981 = _920 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_506, _507, _508), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3951 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_1006 + 1.0))) + _1011) * _933;
        float _1021 = _901 * 0.5;
        float _1022 = _911 * 0.5;
        float _1023 = _921 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_506, _507, _508), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3984 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_1048 + 1.0))) + _1053) * _934;
        _1070 = _901;
        _1072 = _900;
        _1073 = _899;
        _1074 = _911;
        _1075 = _910;
        _1076 = _909;
        _1077 = _921;
        _1078 = _920;
        _1079 = _919;
        _1080 = _934;
        _1081 = _933;
        _1082 = _932;
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
    }
    else
    {
        _1070 = _1071;
        _1072 = _1071;
        _1073 = _1071;
        _1074 = _1071;
        _1075 = _1071;
        _1076 = _1071;
        _1077 = _1071;
        _1078 = _1071;
        _1079 = _1071;
        _1080 = _1071;
        _1081 = _1071;
        _1082 = _1071;
        _1083 = 0.0;
        _1084 = 0.0;
        _1085 = 0.0;
    }
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1113 = fma(_740, cbModelParam._m0[30u].z, fma(_736, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _732));
        float _1117 = fma(_740, cbModelParam._m0[31u].z, fma(_736, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _732));
        float _1121 = fma(_740, cbModelParam._m0[32u].z, fma(_736, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _732));
        float _1144 = _732 + _506;
        float _1145 = _736 + _507;
        float _1146 = _740 + _508;
        float _1156 = fma(_1146, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1144)) - _1113;
        float _1157 = fma(_1146, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1144)) - _1117;
        float _1158 = fma(_1146, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1144)) - _1121;
        float _1162 = inversesqrt(dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158)));
        float _1175 = ((_1162 * _1156) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1113 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1162 * _1157) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1117 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1162 * _1158) / cbModelParam._m0[35u].z) + ((((((_1121 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        float _1212 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1179.x + (-0.5));
        float _1214 = _1212 * (_1179.y + (-0.5));
        float _1215 = _1212 * (_1179.z + (-0.5));
        float _1222 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1186.x + (-0.5));
        float _1224 = _1222 * (_1186.y + (-0.5));
        float _1225 = _1222 * (_1186.z + (-0.5));
        float _1232 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1193.x + (-0.5));
        float _1234 = _1232 * (_1193.y + (-0.5));
        float _1235 = _1232 * (_1193.z + (-0.5));
        float _1242 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1200.x + (-0.5));
        float _1244 = _1242 * (_1200.y + (-0.5));
        float _1245 = _1242 * (_1200.z + (-0.5));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = _1213 * 0.5;
        float _1250 = _1223 * 0.5;
        float _1251 = _1233 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_506, _507, _508), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4047 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1276 + 1.0))) + _1281) * _1246;
        float _1291 = _1214 * 0.5;
        float _1292 = _1224 * 0.5;
        float _1293 = _1234 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_506, _507, _508), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4080 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1318 + 1.0))) + _1323) * _1247;
        float _1333 = _1215 * 0.5;
        float _1334 = _1225 * 0.5;
        float _1335 = _1235 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_506, _507, _508), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4113 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1360 + 1.0))) + _1365) * _1248;
        _1382 = _1215;
        _1383 = _1214;
        _1384 = _1213;
        _1385 = _1225;
        _1386 = _1224;
        _1387 = _1223;
        _1388 = _1235;
        _1389 = _1234;
        _1390 = _1233;
        _1391 = _1248;
        _1392 = _1247;
        _1393 = _1246;
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
    }
    else
    {
        _1382 = _1071;
        _1383 = _1071;
        _1384 = _1071;
        _1385 = _1071;
        _1386 = _1071;
        _1387 = _1071;
        _1388 = _1071;
        _1389 = _1071;
        _1390 = _1071;
        _1391 = _1071;
        _1392 = _1071;
        _1393 = _1071;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1083)) + _1083;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1084)) + _1084;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1085)) + _1085;
    float _1429 = fma(_1408, cbSceneParam._m0[89u].z, fma(_1407, cbSceneParam._m0[89u].y, _1406 * cbSceneParam._m0[89u].x));
    float _1432 = fma(_1408, cbSceneParam._m0[90u].z, fma(_1407, cbSceneParam._m0[90u].y, _1406 * cbSceneParam._m0[90u].x));
    float _1435 = fma(_1408, cbSceneParam._m0[91u].z, fma(_1407, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1406));
    float _1450 = _679 * 0.5;
    float _1451 = _680 * 0.5;
    float _1452 = _681 * 0.5;
    float _1453 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1456 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1459 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1493;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1466 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1070, _1074, _1077, _1080));
        float _1470 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1474 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1481 = dot(vec4(cbModelParam._m0[39u]), vec4(_1450, _1451, _1452, 1.0));
        _1493 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1493 = 1.0;
    }
    float _1504;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1495 = dot(vec4(cbModelParam._m0[40u]), vec4(_1450, _1451, _1452, 1.0));
        _1504 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1495) ? 0.0 : (isnan(0.0) ? _1495 : max(0.0, _1495))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1504 = 1.0;
    }
    float _1508 = (_1504 * cbModelParam._m0[1u].x) + (_1493 * (1.0 - cbModelParam._m0[1u].x));
    float _1518 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _509);
    float _1519 = isnan(_1518) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1518 : min(cbModelParam._m0[25u].z, _1518));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1566 = fma(_740, cbModelParam._m0[13u].z, fma(_736, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732)) + cbModelParam._m0[13u].w;
        float _1570 = fma(_740, cbModelParam._m0[14u].z, fma(_736, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732)) + cbModelParam._m0[14u].w;
        float _1574 = fma(_740, cbModelParam._m0[15u].z, fma(_736, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732)) + cbModelParam._m0[15u].w;
        float _1577 = fma(_681, cbModelParam._m0[13u].z, fma(_680, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _679));
        float _1580 = fma(_681, cbModelParam._m0[14u].z, fma(_680, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _679));
        float _1583 = fma(_681, cbModelParam._m0[15u].z, fma(_680, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _679));
        float _1611;
        if (_1577 > 0.0)
        {
            _1611 = abs((1.0 - _1566) / _1577);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1566 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1611 = frontier_phi_17_15_ladder;
        }
        float _1781;
        if (_1580 > 0.0)
        {
            _1781 = abs((1.0 - _1570) / _1580);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1570 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1781 = frontier_phi_26_22_ladder;
        }
        float _2077;
        if (_1583 > 0.0)
        {
            _2077 = abs((1.0 - _1574) / _1583);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1574 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2077 = frontier_phi_38_33_ladder;
        }
        float _2079 = isnan(_1781) ? _1611 : (isnan(_1611) ? _1781 : min(_1611, _1781));
        float _2080 = isnan(_2077) ? _2079 : (isnan(_2079) ? _2077 : min(_2079, _2077));
        float _2084 = (_2080 * _1577) + _1566;
        float _2085 = (_2080 * _1580) + _1570;
        float _2086 = (_2080 * _1583) + _1574;
        float _2087 = _2080 * 9.9999997473787516355514526367188e-05;
        float _2089 = (-1.0) - _2087;
        float _2091 = _2087 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2086 > _2091) || ((_2086 < _2089) || ((_2085 > _2091) || ((_2085 < _2089) || ((_2084 < _2089) || (_2084 > _2091))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2231 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2086, cbModelParam._m0[9u].z, fma(_2085, cbModelParam._m0[9u].y, _2084 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2086, cbModelParam._m0[10u].z, fma(_2085, cbModelParam._m0[10u].y, _2084 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2086, cbModelParam._m0[11u].z, fma(_2085, cbModelParam._m0[11u].y, _2084 * cbModelParam._m0[11u].x))), _1519);
            frontier_phi_16_38_ladder = _2231.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2231.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2231.x * cbModelParam._m0[1u].y;
        }
        _1599 = frontier_phi_16_38_ladder_2;
        _1601 = frontier_phi_16_38_ladder_1;
        _1603 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_679, _680, _681), _1519);
        _1599 = _1587.x * cbModelParam._m0[1u].y;
        _1601 = _1587.y * cbModelParam._m0[1u].y;
        _1603 = _1587.z * cbModelParam._m0[1u].y;
    }
    float _1607 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _509);
    float _1608 = isnan(_1607) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1607 : min(cbModelParam._m0[25u].w, _1607));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1661 = fma(_740, cbModelParam._m0[21u].z, fma(_736, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732)) + cbModelParam._m0[21u].w;
        float _1665 = fma(_740, cbModelParam._m0[22u].z, fma(_736, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732)) + cbModelParam._m0[22u].w;
        float _1669 = fma(_740, cbModelParam._m0[23u].z, fma(_736, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732)) + cbModelParam._m0[23u].w;
        float _1672 = fma(_681, cbModelParam._m0[21u].z, fma(_680, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _679));
        float _1675 = fma(_681, cbModelParam._m0[22u].z, fma(_680, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _679));
        float _1678 = fma(_681, cbModelParam._m0[23u].z, fma(_680, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _679));
        float _1786;
        if (_1672 > 0.0)
        {
            _1786 = abs((1.0 - _1661) / _1672);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1661 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1786 = frontier_phi_28_24_ladder;
        }
        float _2104;
        if (_1675 > 0.0)
        {
            _2104 = abs((1.0 - _1665) / _1675);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1665 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2104 = frontier_phi_40_35_ladder;
        }
        float _2431;
        if (_1678 > 0.0)
        {
            _2431 = abs((1.0 - _1669) / _1678);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1669 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2431 = frontier_phi_50_47_ladder;
        }
        float _2433 = isnan(_2104) ? _1786 : (isnan(_1786) ? _2104 : min(_1786, _2104));
        float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
        float _2438 = (_2434 * _1672) + _1661;
        float _2439 = (_2434 * _1675) + _1665;
        float _2440 = (_2434 * _1678) + _1669;
        float _2441 = _2434 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2441;
        float _2444 = _2441 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2440 > _2444) || ((_2440 < _2442) || ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 < _2442) || (_2438 > _2444))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2440, cbModelParam._m0[17u].z, fma(_2439, cbModelParam._m0[17u].y, _2438 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2440, cbModelParam._m0[18u].z, fma(_2439, cbModelParam._m0[18u].y, _2438 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2440, cbModelParam._m0[19u].z, fma(_2439, cbModelParam._m0[19u].y, _2438 * cbModelParam._m0[19u].x))), _1608);
            frontier_phi_25_50_ladder = _2558.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2558.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2558.x * cbModelParam._m0[1u].z;
        }
        _1697 = frontier_phi_25_50_ladder_2;
        _1699 = frontier_phi_25_50_ladder_1;
        _1701 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_679, _680, _681), _1608);
        _1697 = _1681.x * cbModelParam._m0[1u].z;
        _1699 = _1681.y * cbModelParam._m0[1u].z;
        _1701 = _1681.z * cbModelParam._m0[1u].z;
    }
    float _1713 = ((((1.0 - _700) * ((_687 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_700 * _687)) * _671;
    float _1714 = _1713 * ((cbModelParam._m0[1u].w * (_1697 - _1599)) + _1599);
    float _1715 = _1713 * ((cbModelParam._m0[1u].w * (_1699 - _1601)) + _1601);
    float _1716 = _1713 * ((cbModelParam._m0[1u].w * (_1701 - _1603)) + _1603);
    float _1719 = fma(_1716, cbSceneParam._m0[89u].z, fma(_1715, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1722 = fma(_1716, cbSceneParam._m0[90u].z, fma(_1715, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1725 = fma(_1716, cbSceneParam._m0[91u].z, fma(_1715, cbSceneParam._m0[91u].y, _1714 * cbSceneParam._m0[91u].x));
    float _1760 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1764 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1768 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1772 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1773 = _1760 / _1772;
    float _1774 = _1764 / _1772;
    float _1775 = _1768 / _1772;
    float _1922;
    float _1923;
    float _1924;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1802 = ((uint(_1775 > cbSceneParam._m0[59u].y) + uint(_1775 > cbSceneParam._m0[59u].x)) + uint(_1775 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1803 = _1802 + 43u;
        uint _1811 = _1802 + 44u;
        uint _1819 = _1802 + 45u;
        uint _1827 = _1802 + 46u;
        float _1838 = fma(_1772, cbSceneParam._m0[_1803].w, fma(_1768, cbSceneParam._m0[_1803].z, fma(_1764, cbSceneParam._m0[_1803].y, _1760 * cbSceneParam._m0[_1803].x)));
        float _1842 = fma(_1772, cbSceneParam._m0[_1811].w, fma(_1768, cbSceneParam._m0[_1811].z, fma(_1764, cbSceneParam._m0[_1811].y, _1760 * cbSceneParam._m0[_1811].x)));
        float _1850 = fma(_1772, cbSceneParam._m0[_1827].w, fma(_1768, cbSceneParam._m0[_1827].z, fma(_1764, cbSceneParam._m0[_1827].y, _1760 * cbSceneParam._m0[_1827].x)));
        float _1855 = cbSceneParam._m0[33u].z * _1850;
        float _1857 = cbSceneParam._m0[33u].w * _1850;
        float _1860 = fma(_1772, cbSceneParam._m0[_1819].w, fma(_1768, cbSceneParam._m0[_1819].z, fma(_1764, cbSceneParam._m0[_1819].y, _1760 * cbSceneParam._m0[_1819].x))) / _1850;
        float _1908 = (cbSceneParam._m0[33u].x - sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775))) * cbSceneParam._m0[33u].y;
        float _4239 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1915 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1855 + _1838) / _1850, (_1857 + _1842) / _1850), _1860), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1857 + _1838) / _1850, (_1842 - _1855) / _1850), _1860), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1838 - _1855) / _1850, (_1842 - _1857) / _1850), _1860), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1838 - _1857) / _1850, (_1855 + _1842) / _1850), _1860), 0.0)).x), vec4(0.25)));
        _1922 = 1.0 - (_1915 * cbSceneParam._m0[34u].x);
        _1923 = 1.0 - (_1915 * cbSceneParam._m0[34u].y);
        _1924 = 1.0 - (_1915 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1922 = 1.0;
        _1923 = 1.0;
        _1924 = 1.0;
    }
    float _1988;
    float _1990;
    float _1992;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1976 = fma(_1772, cbSceneParam._m0[63u].w, fma(_1768, cbSceneParam._m0[63u].z, fma(_1764, cbSceneParam._m0[63u].y, _1760 * cbSceneParam._m0[63u].x)));
        float _1977 = fma(_1772, cbSceneParam._m0[60u].w, fma(_1768, cbSceneParam._m0[60u].z, fma(_1764, cbSceneParam._m0[60u].y, _1760 * cbSceneParam._m0[60u].x))) / _1976;
        float _1978 = fma(_1772, cbSceneParam._m0[61u].w, fma(_1768, cbSceneParam._m0[61u].z, fma(_1764, cbSceneParam._m0[61u].y, _1760 * cbSceneParam._m0[61u].x))) / _1976;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1977 >= cbSceneParam._m0[64u].x) && (_1978 >= cbSceneParam._m0[64u].y)) && (_1977 <= cbSceneParam._m0[64u].z)) && (_1978 <= cbSceneParam._m0[64u].w))
        {
            float _2117 = fma(_1772, cbSceneParam._m0[62u].w, fma(_1768, cbSceneParam._m0[62u].z, fma(_1764, cbSceneParam._m0[62u].y, _1760 * cbSceneParam._m0[62u].x))) / _1976;
            float _2121 = isnan(cbSceneParam._m0[41u].w) ? _2117 : (isnan(_2117) ? cbSceneParam._m0[41u].w : max(_2117, cbSceneParam._m0[41u].w));
            float _2164 = (cbSceneParam._m0[33u].x - sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775))) * cbSceneParam._m0[33u].y;
            float _4255 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
            float _2171 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1977, cbSceneParam._m0[33u].w + _1978), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1977, _1978 - cbSceneParam._m0[33u].z), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1977 - cbSceneParam._m0[33u].z, _1978 - cbSceneParam._m0[33u].w), _2121), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1977 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1978), _2121), 0.0)).x), vec4(0.25)));
            float _2175 = 1.0 - (_2171 * cbSceneParam._m0[34u].x);
            float _2176 = 1.0 - (_2171 * cbSceneParam._m0[34u].y);
            float _2177 = 1.0 - (_2171 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2177) ? _1924 : (isnan(_1924) ? _2177 : min(_1924, _2177));
            frontier_phi_37_36_ladder_1 = isnan(_2176) ? _1923 : (isnan(_1923) ? _2176 : min(_1923, _2176));
            frontier_phi_37_36_ladder_2 = isnan(_2175) ? _1922 : (isnan(_1922) ? _2175 : min(_1922, _2175));
        }
        else
        {
            frontier_phi_37_36_ladder = _1924;
            frontier_phi_37_36_ladder_1 = _1923;
            frontier_phi_37_36_ladder_2 = _1922;
        }
        _1988 = frontier_phi_37_36_ladder_2;
        _1990 = frontier_phi_37_36_ladder_1;
        _1992 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1988 = _1922;
        _1990 = _1923;
        _1992 = _1924;
    }
    uvec4 _1997 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _1999 = _1997.x * 14u;
    uint _2000 = _1999 + 13u;
    float _2007 = _671 + (-1.0);
    float _2012 = (cbLight._m0[_2000].x * _2007) + 1.0;
    float _2013 = (cbLight._m0[_2000].y * _2007) + 1.0;
    float _2014 = (cbLight._m0[_2000].z * _2007) + 1.0;
    float _2015 = (cbLight._m0[_2000].w * _2007) + 1.0;
    uint _2016 = _1999 + 5u;
    float _2022 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2026 = _1999 + 4u;
    float _2036 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
    uint _2040 = _1999 | 1u;
    float _2051 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_506, _507, _508));
    float _2054 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_506, _507, _508));
    float _4291 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _4302 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2059 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * 0.3183098733425140380859375;
    float _2061 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * 0.3183098733425140380859375;
    float _2068 = ((cbLight._m0[_2016].x * _2022) * _2061) + (((cbLight._m0[_2026].x * _1988) * _2036) * _2059);
    float _2069 = ((_2022 * cbLight._m0[_2016].y) * _2061) + (((cbLight._m0[_2026].y * _1990) * _2036) * _2059);
    float _2070 = ((_2022 * cbLight._m0[_2016].z) * _2061) + (((cbLight._m0[_2026].z * _1992) * _2036) * _2059);
    uvec4 _2074 = floatBitsToUint(cbLight._m0[_1999 + 12u]);
    bool _2076 = _2074.x == 0u;
    float _2178;
    float _2180;
    float _2182;
    if (_2076)
    {
        _2178 = _2068;
        _2180 = _2069;
        _2182 = _2070;
    }
    else
    {
        uint _2186 = _1999 + 6u;
        float _2202 = (dot(vec3(cbLight._m0[_1999 + 2u].xyz), vec3(_506, _507, _508)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4313 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2205 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2178 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _2068;
        _2180 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _2069;
        _2182 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _2070;
    }
    bool _2185 = _2074.y == 0u;
    float _2240;
    float _2242;
    float _2244;
    if (_2185)
    {
        _2240 = _2178;
        _2242 = _2180;
        _2244 = _2182;
    }
    else
    {
        uint _2402 = _1999 + 7u;
        float _2418 = (dot(vec3(cbLight._m0[_1999 + 3u].xyz), vec3(_506, _507, _508)) * 0.5) + 0.5;
        float _2419 = _2418 * _2418;
        float _4329 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2420 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2421 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2240 = (((cbLight._m0[_2402].x * 0.3183098733425140380859375) * _2420) * _2421) + _2178;
        _2242 = (((cbLight._m0[_2402].y * 0.3183098733425140380859375) * _2420) * _2421) + _2180;
        _2244 = (((cbLight._m0[_2402].z * 0.3183098733425140380859375) * _2420) * _2421) + _2182;
    }
    uint _2247 = _1999 + 8u;
    float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _509) * 0.949999988079071044921875);
    float _2261 = _2260 * _2260;
    float _2262 = cbLight._m0[_1999].x + _585;
    float _2263 = cbLight._m0[_1999].y + _586;
    float _2264 = cbLight._m0[_1999].z + _587;
    float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
    float _2269 = _2268 * _2262;
    float _2270 = _2268 * _2263;
    float _2271 = _2268 * _2264;
    float _2272 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_1999].xyz));
    float _4345 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _4356 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _2276 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2277 = dot(vec3(_506, _507, _508), vec3(_2269, _2270, _2271));
    float _4367 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2281 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2269, _2270, _2271));
    float _4378 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2285 = _2261 * _2261;
    float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
    float _2300 = (exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2301 = 1.0 - _2261;
    float _2312 = (0.5 / (((_2276 * ((_2275 * _2301) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2301) + _2261) * _2275))) * _2275;
    float _4389 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2314 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
    uint _2328 = _1999 + 9u;
    float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2040].w)) * _509) * 0.949999988079071044921875);
    float _2340 = _2339 * _2339;
    float _2341 = cbLight._m0[_2040].x + _585;
    float _2342 = cbLight._m0[_2040].y + _586;
    float _2343 = cbLight._m0[_2040].z + _587;
    float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
    float _2348 = _2347 * _2341;
    float _2349 = _2347 * _2342;
    float _2350 = _2347 * _2343;
    float _2351 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_2040].xyz));
    float _4400 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2355 = dot(vec3(_506, _507, _508), vec3(_2348, _2349, _2350));
    float _4411 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2359 = dot(vec3(cbLight._m0[_2040].xyz), vec3(_2348, _2349, _2350));
    float _4422 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2363 = _2340 * _2340;
    float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
    float _2376 = (exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2377 = 1.0 - _2340;
    float _2387 = (0.5 / (((_2276 * ((_2354 * _2377) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2377) + _2340) * _2354))) * _2354;
    float _4433 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2389 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
    float _2399 = (((_2376 * cbLight._m0[_2328].x) * _2389) * _2022) + ((((cbLight._m0[_2247].x * _1988) * _2300) * _2314) * _2036);
    float _2400 = (((_2376 * cbLight._m0[_2328].y) * _2389) * _2022) + ((((cbLight._m0[_2247].y * _1990) * _2300) * _2314) * _2036);
    float _2401 = (((_2376 * cbLight._m0[_2328].z) * _2389) * _2022) + ((((cbLight._m0[_2247].z * _1992) * _2300) * _2314) * _2036);
    float _2457;
    float _2459;
    float _2461;
    if (_2076)
    {
        _2457 = _2399;
        _2459 = _2400;
        _2461 = _2401;
    }
    else
    {
        uint _2463 = _1999 + 2u;
        uint _2467 = _1999 + 10u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _509) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _585;
        float _2484 = cbLight._m0[_2463].y + _586;
        float _2485 = cbLight._m0[_2463].z + _587;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_2463].xyz));
        float _4444 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2497 = dot(vec3(_506, _507, _508), vec3(_2490, _2491, _2492));
        float _4455 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4466 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2518 = (exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2519 = 1.0 - _2482;
        float _2529 = (0.5 / (((_2276 * ((_2496 * _2519) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2519) + _2482) * _2496))) * _2496;
        float _4477 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2531 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2532 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
        _2457 = (((_2518 * cbLight._m0[_2467].x) * _2531) * _2532) + _2399;
        _2459 = (((_2518 * cbLight._m0[_2467].y) * _2531) * _2532) + _2400;
        _2461 = (((_2518 * cbLight._m0[_2467].z) * _2531) * _2532) + _2401;
    }
    float _2563;
    float _2565;
    float _2567;
    if (_2185)
    {
        _2563 = _2457;
        _2565 = _2459;
        _2567 = _2461;
    }
    else
    {
        uint _2574 = _1999 + 3u;
        uint _2578 = _1999 + 11u;
        float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2574].w)) * _509) * 0.949999988079071044921875);
        float _2593 = _2592 * _2592;
        float _2594 = cbLight._m0[_2574].x + _585;
        float _2595 = cbLight._m0[_2574].y + _586;
        float _2596 = cbLight._m0[_2574].z + _587;
        float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
        float _2601 = _2600 * _2594;
        float _2602 = _2600 * _2595;
        float _2603 = _2600 * _2596;
        float _2604 = dot(vec3(_506, _507, _508), vec3(cbLight._m0[_2574].xyz));
        float _4493 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2608 = dot(vec3(_506, _507, _508), vec3(_2601, _2602, _2603));
        float _4504 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2612 = dot(vec3(cbLight._m0[_2574].xyz), vec3(_2601, _2602, _2603));
        float _4515 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2616 = _2593 * _2593;
        float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
        float _2629 = (exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2630 = 1.0 - _2593;
        float _2640 = (0.5 / (((_2276 * ((_2607 * _2630) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2630) + _2593) * _2607))) * _2607;
        float _4526 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2642 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
        float _2643 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
        _2563 = (((_2629 * cbLight._m0[_2578].x) * _2642) * _2643) + _2457;
        _2565 = (((_2629 * cbLight._m0[_2578].y) * _2642) * _2643) + _2459;
        _2567 = (((_2629 * cbLight._m0[_2578].z) * _2642) * _2643) + _2461;
    }
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    float _2719;
    if (_1997.y == 0u)
    {
        uvec4 _2664 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2665 = _2664.x;
        uint _2676 = uint((float(_2664.y) * floor(float(uint(cbSceneParam._m0[85u].y * _607) / _2665))) + floor(float(uint(cbSceneParam._m0[85u].x * _606) / _2665)));
        float _2686 = (log2(_1775 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2687 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        uint _2690 = uint(isnan(14.0) ? _2687 : (isnan(_2687) ? 14.0 : min(_2687, 14.0)));
        uvec4 _2695 = texelFetch(g_lightClusterGridBuffer, int(((_2690 << 2u) + (_2676 << 6u)) >> 2u));
        uint _2696 = _2695.x;
        uint _2697 = _2664.z;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        if (((((1u << ((_2697 >> 4u) & 15u)) + 4294967295u) & _2696) == 0u) || ((_2697 & 240u) == 0u))
        {
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
        }
        else
        {
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            uint _2935 = 0u;
            uint _2944;
            bool _2945;
            for (;;)
            {
                _2944 = texelFetch(g_lightClassification, int((((_2690 << 5u) + (_2676 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                _2945 = _2944 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2945)
                {
                    frontier_phi_71_pred = _2934;
                    frontier_phi_71_pred_1 = _2933;
                    frontier_phi_71_pred_2 = _2932;
                    frontier_phi_71_pred_3 = _2931;
                    frontier_phi_71_pred_4 = _2930;
                    frontier_phi_71_pred_5 = _2929;
                }
                else
                {
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    uint _3080;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2934;
                    _3080 = _2944;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    for (;;)
                    {
                        uint _3084 = uint(findLSB(_3080)) + (_2935 << 5u);
                        uint _3081 = (_3080 + 4294967295u) & _3080;
                        uint _3086 = _3084 * 48u;
                        vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3106 = (_3084 * 48u) + 4u;
                        vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3125 = (_3084 * 48u) + 8u;
                        vec3 _3136 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3125)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 2u)).x));
                        float _3140 = _3100.x - _1773;
                        float _3141 = _3100.y - _1774;
                        float _3142 = _3100.z - _1775;
                        float _3143 = dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142));
                        float _3146 = inversesqrt(_3143);
                        float _3147 = _3146 * _3140;
                        float _3148 = _3146 * _3141;
                        float _3149 = _3146 * _3142;
                        float _3150 = dot(vec3(_627, _630, _633), vec3(_3147, _3148, _3149));
                        float _3155 = 1.0 - (_3143 * _3100.w);
                        float _4552 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3157 = sqrt(_3143) * _3119.w;
                        float _3160 = 1.39999997615814208984375 / (_3157 + 1.39999997615814208984375);
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3150) + _3161;
                        float _3167 = _3157 * _3157;
                        float _3171 = ((isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))) * _3156) / ((_3167 * 0.699999988079071044921875) + 1.0);
                        float _3175 = (-0.0) - _1773;
                        float _3176 = (-0.0) - _1774;
                        float _3177 = (-0.0) - _1775;
                        float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                        float _3182 = _3181 * _3175;
                        float _3183 = _3181 * _3176;
                        float _3184 = _3181 * _3177;
                        float _3191 = exp2(log2(1.0 / ((_3167 * 3.5) + 5.0)) * 0.25);
                        float _3192 = 1.0 - _687;
                        float _3199 = sqrt(1.0 - ((1.0 - (_3192 * _3192)) * (1.0 - (_3191 * _3191))));
                        float _3200 = _3199 * _3199;
                        float _3201 = _3200 * _3200;
                        float _3202 = _3182 + _3147;
                        float _3203 = _3183 + _3148;
                        float _3204 = _3184 + _3149;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3212 = dot(vec3(_627, _630, _633), vec3(_3182, _3183, _3184));
                        float _4568 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3216 = dot(vec3(_627, _630, _633), vec3(_3208 * _3202, _3208 * _3203, _3208 * _3204));
                        float _4579 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3223 = ((_3219 * _3219) * (_3201 + (-1.0))) + 1.0;
                        float _3224 = _3160 * _3200;
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3150) + _3225;
                        float _4590 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3230 = 1.0 - _3200;
                        float _3240 = (0.5 / (((_3229 * ((_3215 * _3230) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_3229 * _3230) + _3200) * _3215))) * _3229;
                        float _4601 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3251 = (((_3201 * 3.1415927410125732421875) * (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) / ((_3223 * _3223) * ((_3167 * 2.1991131305694580078125) + 3.141590118408203125))) * _3156;
                        _3004 = (_3171 * _3119.x) + _3077;
                        _3005 = (_3171 * _3119.y) + _3078;
                        _3006 = (_3171 * _3119.z) + _3079;
                        _3001 = (_3251 * _3136.x) + _3074;
                        _3002 = (_3251 * _3136.y) + _3075;
                        _3003 = (_3251 * _3136.z) + _3076;
                        if (_3081 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3081;
                        }
                    }
                    frontier_phi_71_pred = _3006;
                    frontier_phi_71_pred_1 = _3005;
                    frontier_phi_71_pred_2 = _3004;
                    frontier_phi_71_pred_3 = _3003;
                    frontier_phi_71_pred_4 = _3002;
                    frontier_phi_71_pred_5 = _3001;
                }
                _2787 = frontier_phi_71_pred;
                _2785 = frontier_phi_71_pred_1;
                _2783 = frontier_phi_71_pred_2;
                _2781 = frontier_phi_71_pred_3;
                _2779 = frontier_phi_71_pred_4;
                _2777 = frontier_phi_71_pred_5;
                uint _2936 = _2935 + 1u;
                if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2929 = _2777;
                    _2930 = _2779;
                    _2931 = _2781;
                    _2932 = _2783;
                    _2933 = _2785;
                    _2934 = _2787;
                    _2935 = _2936;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
        }
        uvec4 _2790 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2791 = _2790.z;
        uint _2793 = (_2791 >> 8u) & 15u;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((4294967295u << _2793) & _2696) == 0u)
        {
            _2897 = _2776;
            _2899 = _2778;
            _2901 = _2780;
            _2903 = _2782;
            _2905 = _2784;
            _2907 = _2786;
        }
        else
        {
            float _2922 = inversesqrt(dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775)));
            float _2923 = _2922 * _1773;
            float _2924 = _2922 * _1774;
            float _2925 = _2922 * _1775;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2793 < ((_2791 >> 12u) & 15u))
            {
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _3057 = _2776;
                float _3058 = _2778;
                float _3059 = _2780;
                float _3060 = _2782;
                float _3061 = _2784;
                float _3062 = _2786;
                uint _3063 = _2793;
                uint _3072;
                bool _3073;
                for (;;)
                {
                    _3072 = texelFetch(g_lightClassification, int((((_2690 << 5u) + (_2676 << 9u)) + (_3063 << 2u)) >> 2u)).x;
                    _3073 = _3072 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3073)
                    {
                        frontier_phi_82_pred = _3062;
                        frontier_phi_82_pred_1 = _3061;
                        frontier_phi_82_pred_2 = _3060;
                        frontier_phi_82_pred_3 = _3059;
                        frontier_phi_82_pred_4 = _3058;
                        frontier_phi_82_pred_5 = _3057;
                    }
                    else
                    {
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3278 = _3057;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        float _3281 = _3060;
                        float _3282 = _3061;
                        float _3283 = _3062;
                        uint _3284 = _3072;
                        uint _3285;
                        vec4 _3310;
                        float _3311;
                        vec4 _3326;
                        vec3 _3338;
                        vec4 _3354;
                        vec4 _3369;
                        float _3415;
                        bool _3416;
                        for (;;)
                        {
                            uint _3295 = ((_3063 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3284));
                            _3285 = (_3284 + 4294967295u) & _3284;
                            uint _3297 = _3295 * 40u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3311 = _3310.w;
                            uint _3313 = (_3295 * 40u) + 4u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3295 * 40u) + 8u;
                            _3338 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x));
                            uint _3341 = (_3295 * 40u) + 16u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            uint _3356 = (_3295 * 40u) + 20u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3371 = (_3295 * 40u) + 24u;
                            vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3390 = (_3295 * 40u) + 28u;
                            vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3415 = fma(_1775, _3403.z, fma(_1774, _3403.y, _3403.x * _1773)) + _3403.w;
                            _3416 = !((fma(_1775, _3384.z, fma(_1774, _3384.y, _3384.x * _1773)) + _3384.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3416)
                            {
                                float _3443 = _3310.x - _1773;
                                float _3444 = _3310.y - _1774;
                                float _3445 = _3310.z - _1775;
                                float _3446 = dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445));
                                float _3449 = inversesqrt(_3446);
                                float _3450 = _3449 * _3443;
                                float _3451 = _3449 * _3444;
                                float _3452 = _3449 * _3445;
                                float _3456 = 1.0 - (_3446 / (_3311 * _3311));
                                float _4612 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3461 = sqrt(_3446) * _3326.w;
                                float _3463 = 1.39999997615814208984375 / (_3461 + 1.39999997615814208984375);
                                float _3464 = _3463 * _3463;
                                float _3467 = ((1.0 - _3464) * dot(vec3(_3450, _3451, _3452), vec3(_627, _630, _633))) + _3464;
                                float _3470 = _3461 * _3461;
                                float _3474 = (fma(_1775, _3354.z, fma(_1774, _3354.y, _3354.x * _1773)) + _3354.w) / _3415;
                                float _3475 = (fma(_1775, _3369.z, fma(_1774, _3369.y, _3369.x * _1773)) + _3369.w) / _3415;
                                float _3479 = 1.0 - dot(vec2(_3474, _3475), vec2(_3474, _3475));
                                float _4628 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3481 = _3480 * (((isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0))) * _3457) / ((_3470 * 0.699999988079071044921875) + 1.0));
                                float _3493 = exp2(log2(1.0 / ((_3470 * 3.5) + 5.0)) * 0.25);
                                float _3494 = 1.0 - _687;
                                float _3501 = sqrt(1.0 - ((1.0 - (_3494 * _3494)) * (1.0 - (_3493 * _3493))));
                                float _3502 = _3501 * _3501;
                                float _3503 = _3502 * _3502;
                                float _3504 = _3450 - _2923;
                                float _3505 = _3451 - _2924;
                                float _3506 = _3452 - _2925;
                                float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                                float _3514 = dot(vec3(_627, _630, _633), vec3((-0.0) - _2923, (-0.0) - _2924, (-0.0) - _2925));
                                float _4639 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3517 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3518 = dot(vec3(_627, _630, _633), vec3(_3510 * _3504, _3510 * _3505, _3510 * _3506));
                                float _4650 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3521 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3525 = ((_3521 * _3521) * (_3503 + (-1.0))) + 1.0;
                                float _3526 = _3463 * _3502;
                                float _3527 = _3526 * _3526;
                                float _3533 = ((1.0 - _3527) * dot(vec3(_627, _630, _633), vec3(_3450, _3451, _3452))) + _3527;
                                float _4661 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3535 = 1.0 - _3502;
                                float _3545 = (0.5 / (((_3534 * ((_3517 * _3535) + _3502)) + 9.9999999392252902907785028219223e-09) + (((_3534 * _3535) + _3502) * _3517))) * _3534;
                                float _4672 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3555 = (_3480 * _3457) * (((_3503 * 3.1415927410125732421875) * (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) / ((_3525 * _3525) * ((_3470 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3481 * _3326.z;
                                frontier_phi_88_pred_1 = _3481 * _3326.y;
                                frontier_phi_88_pred_2 = _3481 * _3326.x;
                                frontier_phi_88_pred_3 = _3555 * _3338.z;
                                frontier_phi_88_pred_4 = _3555 * _3338.y;
                                frontier_phi_88_pred_5 = _3555 * _3338.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3564 = frontier_phi_88_pred;
                            _3563 = frontier_phi_88_pred_1;
                            _3562 = frontier_phi_88_pred_2;
                            _3561 = frontier_phi_88_pred_3;
                            _3560 = frontier_phi_88_pred_4;
                            _3559 = frontier_phi_88_pred_5;
                            _3268 = _3562 + _3281;
                            _3269 = _3563 + _3282;
                            _3270 = _3564 + _3283;
                            _3265 = _3559 + _3278;
                            _3266 = _3560 + _3279;
                            _3267 = _3561 + _3280;
                            if (_3285 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3285;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3270;
                        frontier_phi_82_pred_1 = _3269;
                        frontier_phi_82_pred_2 = _3268;
                        frontier_phi_82_pred_3 = _3267;
                        frontier_phi_82_pred_4 = _3266;
                        frontier_phi_82_pred_5 = _3265;
                    }
                    _2908 = frontier_phi_82_pred;
                    _2906 = frontier_phi_82_pred_1;
                    _2904 = frontier_phi_82_pred_2;
                    _2902 = frontier_phi_82_pred_3;
                    _2900 = frontier_phi_82_pred_4;
                    _2898 = frontier_phi_82_pred_5;
                    uint _3064 = _3063 + 1u;
                    if (_3064 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3057 = _2898;
                        _3058 = _2900;
                        _3059 = _2902;
                        _3060 = _2904;
                        _3061 = _2906;
                        _3062 = _2908;
                        _3063 = _3064;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2904;
                frontier_phi_63_64_ladder_1 = _2908;
                frontier_phi_63_64_ladder_2 = _2906;
                frontier_phi_63_64_ladder_3 = _2902;
                frontier_phi_63_64_ladder_4 = _2900;
                frontier_phi_63_64_ladder_5 = _2898;
            }
            else
            {
                frontier_phi_63_64_ladder = _2782;
                frontier_phi_63_64_ladder_1 = _2786;
                frontier_phi_63_64_ladder_2 = _2784;
                frontier_phi_63_64_ladder_3 = _2780;
                frontier_phi_63_64_ladder_4 = _2778;
                frontier_phi_63_64_ladder_5 = _2776;
            }
            _2897 = frontier_phi_63_64_ladder_5;
            _2899 = frontier_phi_63_64_ladder_4;
            _2901 = frontier_phi_63_64_ladder_3;
            _2903 = frontier_phi_63_64_ladder;
            _2905 = frontier_phi_63_64_ladder_2;
            _2907 = frontier_phi_63_64_ladder_1;
        }
        float _2912 = isnan(1.0) ? _671 : (isnan(_671) ? 1.0 : min(_671, 1.0));
        _2709 = (_2912 * _2903) + _2240;
        _2711 = (_2912 * _2905) + _2242;
        _2713 = (_2912 * _2907) + _2244;
        _2715 = ((_2897 * 0.039999999105930328369140625) * _2912) + _2563;
        _2717 = ((_2899 * 0.039999999105930328369140625) * _2912) + _2565;
        _2719 = ((_2901 * 0.039999999105930328369140625) * _2912) + _2567;
    }
    else
    {
        _2709 = _2240;
        _2711 = _2242;
        _2713 = _2244;
        _2715 = _2563;
        _2717 = _2565;
        _2719 = _2567;
    }
    float _4688 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4699 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4710 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _2736 = ((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2709 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _671))) + ((_2715 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1508)) * cbPerFrame._m0[3u].x);
    float _2737 = ((isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2711 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _671))) + ((_2717 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _1508)) * cbPerFrame._m0[3u].x);
    float _2738 = ((isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2713 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _671))) + ((_2719 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1508)) * cbPerFrame._m0[3u].x);
    uint _2739 = _232 + 6u;
    float _2747 = _606 / cbSceneParam._m0[86u].x;
    float _2748 = _607 / cbSceneParam._m0[86u].y;
    vec4 _2762 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2747, _2748, (log2((isnan(cbSceneParam._m0[77u].w) ? _527 : (isnan(_527) ? cbSceneParam._m0[77u].w : min(_527, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2764 = _2762.x;
    float _2765 = _2762.y;
    float _2766 = _2762.z;
    float _2767 = _2762.w;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    if (_527 > cbSceneParam._m0[78u].w)
    {
        float _2801 = isnan(_527) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _527 : min(cbSceneParam._m0[80u].w, _527));
        float _2802 = _2801 / _527;
        float _2813 = _2802 * _578;
        float _2814 = _579 * _2802;
        float _2815 = (-0.0) - _2814;
        float _2817 = _2802 * _580;
        float _2819 = (cbSceneParam._m0[77u].w * _2815) / _2801;
        float _2820 = _2819 + cbSceneParam._m0[79u].w;
        float _2821 = cbSceneParam._m0[79u].w - _2814;
        float _2827 = sqrt(((_2813 * _2813) + (_2814 * _2814)) + (_2817 * _2817));
        float _2830 = (1.0 - (cbSceneParam._m0[77u].w / _2801)) * _2827;
        float _2835 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2837 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3014;
        if (abs((_2815 - _2819) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3014 = ((((_2820 > 0.0) ? exp2(_2835 * _2820) : (2.0 - exp2(_2837 * _2820))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2830;
        }
        else
        {
            float _2958 = 1.0 / cbSceneParam._m0[80u].x;
            float _2959 = isnan(_2821) ? _2820 : (isnan(_2820) ? _2821 : max(_2820, _2821));
            float _2960 = isnan(_2821) ? _2820 : (isnan(_2820) ? _2821 : min(_2820, _2821));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            _3014 = ((abs(_2827 / _2815) * cbSceneParam._m0[80u].y) * ((((_2969 - _2970) * 2.0) - ((exp2(_2835 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0)))) - exp2(_2835 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))))) * _2958)) - ((exp2(_2837 * _2969) - exp2(_2837 * _2970)) * _2958))) + (_2830 * cbSceneParam._m0[80u].z);
        }
        vec4 _3016 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2747, _2748, 1.0), 0.0);
        float _3025 = exp2((_3014 * (-1.44269502162933349609375)) * (1.0 - _3016.w));
        float _3026 = log2(_3025);
        float _3042 = log2(_2767);
        _2839 = (exp2(_3042 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3026 * cbSceneParam._m0[78u].x)) * _3016.x) / cbSceneParam._m0[78u].x)) + _2764;
        _2841 = (exp2(_3042 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3026 * cbSceneParam._m0[78u].y)) * _3016.y) / cbSceneParam._m0[78u].y)) + _2765;
        _2843 = (exp2(_3042 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3026 * cbSceneParam._m0[78u].z)) * _3016.z) / cbSceneParam._m0[78u].z)) + _2766;
        _2845 = _3025 * _2767;
    }
    else
    {
        _2839 = _2764;
        _2841 = _2765;
        _2843 = _2766;
        _2845 = _2767;
    }
    bool _3052;
    vec4 _2855;
    vec4 _2877;
    float _2879;
    float _2883;
    float _2884;
    float _2885;
    float _2886;
    bool _2896;
    for (;;)
    {
        _2855 = cbMatDynParam._m0[0u];
        float _2857 = roundEven(_2855.y);
        bool _2858 = _2857 == 3.0;
        float _2859 = log2(_2845);
        float _2866 = exp2(_2859 * cbSceneParam._m0[78u].x) * _2736;
        float _2867 = exp2(_2859 * cbSceneParam._m0[78u].y) * _2737;
        float _2868 = exp2(_2859 * cbSceneParam._m0[78u].z) * _2738;
        float _2875 = _594 + (-0.5);
        _2877 = cbMtdParam._m0[1u];
        _2879 = _2877.y * _2875;
        float _2882 = (_2857 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2883 = _2882 * (_2858 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2839)));
        _2884 = _2882 * (_2858 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2841)));
        _2885 = _2882 * (_2858 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2843)));
        _2886 = _2875 * 0.999000012874603271484375;
        _2896 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2896)
        {
            if ((cbInstanceData._m0[_232 + 7u].x + _2886) < 0.5)
            {
                _3052 = true;
                break;
            }
        }
        uint _2993 = _646 + uint(_2855.w);
        if ((cbInstanceData._m0[_2993].w < 1.0) && ((cbInstanceData._m0[_2993].w + _2886) < 0.5))
        {
            _3052 = true;
            break;
        }
        if ((_2879 + 1.0) < _2877.x)
        {
            _3052 = true;
            break;
        }
        _3052 = false;
        break;
    }
    float _3256;
    if (_3052)
    {
        discard_state = true;
        _3256 = 0.0;
    }
    else
    {
        _3256 = cbInstanceData._m0[_2739].w;
    }
    SV_Target.x = _2883;
    SV_Target.y = _2884;
    SV_Target.z = _2885;
    SV_Target.w = _3256;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2739].w;
    discard_exit();
}


