#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1218;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _358 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _358) * cbMtdParam._m0[24u].x) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3524 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _383 = (_376 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _384 = (_376 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _385 = (_376 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _433 = ((_403.z - _424) * _376) + _424;
    float _436 = ((((_403.x - _422) * _376) + _422) * 2.0) + (-1.0);
    float _438 = ((((_403.y - _423) * _376) + _423) * 2.0) + (-1.0);
    float _439 = dot(vec2(_436, _438), vec2(_436, _438));
    float _3535 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _444 = sqrt(1.0 - (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))));
    float _447 = fma(_444, _229, fma(_438, _236, _436 * _222));
    float _450 = fma(_444, _230, fma(_438, _237, _436 * _223));
    float _453 = fma(_444, _231, fma(_438, _238, _436 * _224));
    float _457 = inversesqrt(dot(vec3(_447, _450, _453), vec3(_447, _450, _453)));
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _503 = _501.x;
    float _504 = 1.0 - _503;
    float _510 = (cbMtdParam._m0[19u].x + dot(vec4(_457 * _447, _457 * _450, _457 * _453, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_503 - _504) * cbMtdParam._m0[24u].z) + _504) * cbMtdParam._m0[21u].z);
    float _3546 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _511 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _513 = (-0.0) - cbMtdParam._m0[24u].y;
    float _515 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _516 = isnan(1.0) ? _515 : (isnan(_515) ? 1.0 : min(_515, 1.0));
    float _523 = _511 - ((_511 * TEXCOORD_8.x) * _516);
    float _524 = _511 - ((_511 * TEXCOORD_8.y) * _516);
    float _525 = _511 - ((_511 * TEXCOORD_8.z) * _516);
    float _532 = (_523 * (cbMtdParam._m0[17u].x - _383)) + _383;
    float _533 = (_524 * (cbMtdParam._m0[17u].y - _384)) + _384;
    float _534 = (_525 * (cbMtdParam._m0[17u].z - _385)) + _385;
    vec4 _546 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _548 = _546.x;
    float _549 = 1.0 - _548;
    float _577 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_548 - _549) * cbMtdParam._m0[24u].w) + _549) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3567 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _586 = ((((cbMtdParam._m0[10u].x - _532) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _578) + _532;
    float _587 = ((((cbMtdParam._m0[10u].y - _533) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _578) + _533;
    float _588 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _534)) * _578) + _534;
    vec4 _602 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _609 = (_602.x * 2.0) + (-1.0);
    float _610 = (_602.y * 2.0) + (-1.0);
    float _611 = dot(vec2(_609, _610), vec2(_609, _610));
    float _3578 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _619 = ((_602.z - _433) * _523) + _433;
    float _622 = ((cbMtdParam._m0[23u].y - _619) * _578) + _619;
    vec4 _641 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _647 = (_641.x * 2.0) + (-1.0);
    float _648 = (_641.y * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _3589 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _664 = ((sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) - _444) * _525) + _444;
    float _667 = (((_609 - _436) * _523) + _436) + (cbMtdParam._m0[21u].x * _436);
    float _668 = (((_610 - _438) * _524) + _438) + (cbMtdParam._m0[21u].x * _438);
    float _679 = (((_647 - _667) + (_667 * cbMtdParam._m0[22u].z)) * _578) + _667;
    float _680 = (((_648 - _668) + (_668 * cbMtdParam._m0[22u].z)) * _578) + _668;
    float _681 = (_578 * (sqrt(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) - _664)) + _664;
    float _683 = cbMtdParam._m0[22u].x + _473.w;
    float _686 = fma(_681, _229, fma(_680, _236, _679 * _222));
    float _689 = fma(_681, _230, fma(_680, _237, _679 * _223));
    float _692 = fma(_681, _231, fma(_680, _238, _679 * _224));
    float _696 = inversesqrt(dot(vec3(_686, _689, _692), vec3(_686, _689, _692)));
    float _697 = _696 * _686;
    float _698 = _696 * _689;
    float _699 = _696 * _692;
    float _3600 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _700 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _3622 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _3633 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3644 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _718 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _769 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _759);
    float _770 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _759);
    float _771 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _759);
    float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
    float _776 = _769 * _775;
    float _777 = _770 * _775;
    float _778 = _771 * _775;
    float _784 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _785 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _803 = fma(_699, cbSceneParam._m0[5u].z, fma(_698, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _697));
    float _806 = fma(_699, cbSceneParam._m0[6u].z, fma(_698, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _697));
    float _809 = fma(_699, cbSceneParam._m0[7u].z, fma(_698, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _697));
    uint _823 = (_241 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _829 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_823].x;
    float _830 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * cbInstanceData._m0[_823].y;
    float _831 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_823].z;
    float _3655 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    vec4 _843 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _784, cbSceneParam._m0[86u].y * _785));
    float _847 = ((isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * TEXCOORD_5.w) * _843.x;
    float _848 = dot(vec3(_697, _698, _699), vec3(_776, _777, _778));
    float _851 = _848 * 2.0;
    float _855 = (_851 * _697) - _776;
    float _856 = (_851 * _698) - _777;
    float _857 = (_851 * _699) - _778;
    float _861 = abs(dot(vec3(_776, _777, _778), vec3(_697, _698, _699)));
    float _3688 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _863 = sqrt(_700);
    float _876 = exp2((_863 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_863 * 3.0));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1217;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _942 = fma(_916, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908));
        float _946 = fma(_916, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908));
        float _950 = fma(_916, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908));
        float _975 = _908 + _697;
        float _976 = _912 + _698;
        float _977 = _916 + _699;
        float _987 = fma(_977, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975)) - _942;
        float _988 = fma(_977, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975)) - _946;
        float _989 = fma(_977, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975)) - _950;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_942 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_946 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[34u].z) + ((((((_950 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1045 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1011.x + (-0.5));
        float _1047 = _1045 * (_1011.y + (-0.5));
        float _1048 = _1045 * (_1011.z + (-0.5));
        float _1055 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1018.x + (-0.5));
        float _1057 = _1055 * (_1018.y + (-0.5));
        float _1058 = _1055 * (_1018.z + (-0.5));
        float _1065 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1025.x + (-0.5));
        float _1067 = _1065 * (_1025.y + (-0.5));
        float _1068 = _1065 * (_1025.z + (-0.5));
        float _1075 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1032.x + (-0.5));
        float _1077 = _1075 * (_1032.y + (-0.5));
        float _1078 = _1075 * (_1032.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1099 = (dot(vec3(_697, _698, _699), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1109 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _3736 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1111 + 1.0))) + _1116) * _1079;
        float _1126 = _1047 * 0.5;
        float _1127 = _1057 * 0.5;
        float _1128 = _1067 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_697, _698, _699), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3769 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1153 + 1.0))) + _1158) * _1080;
        float _1168 = _1048 * 0.5;
        float _1169 = _1058 * 0.5;
        float _1170 = _1068 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_697, _698, _699), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3802 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1195 + 1.0))) + _1200) * _1081;
        _1217 = _1048;
        _1219 = _1047;
        _1220 = _1046;
        _1221 = _1058;
        _1222 = _1057;
        _1223 = _1056;
        _1224 = _1068;
        _1225 = _1067;
        _1226 = _1066;
        _1227 = _1081;
        _1228 = _1080;
        _1229 = _1079;
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _1218;
        _1219 = _1218;
        _1220 = _1218;
        _1221 = _1218;
        _1222 = _1218;
        _1223 = _1218;
        _1224 = _1218;
        _1225 = _1218;
        _1226 = _1218;
        _1227 = _1218;
        _1228 = _1218;
        _1229 = _1218;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1257 = fma(_916, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _908));
        float _1261 = fma(_916, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _908));
        float _1265 = fma(_916, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _908));
        float _1288 = _908 + _697;
        float _1289 = _912 + _698;
        float _1290 = _916 + _699;
        float _1300 = fma(_1290, cbModelParam._m0[30u].z, fma(_1289, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1288)) - _1257;
        float _1301 = fma(_1290, cbModelParam._m0[31u].z, fma(_1289, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1288)) - _1261;
        float _1302 = fma(_1290, cbModelParam._m0[32u].z, fma(_1289, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1288)) - _1265;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1319 = ((_1306 * _1300) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1257 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1301) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1261 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1306 * _1302) / cbModelParam._m0[35u].z) + ((((((_1265 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        float _1356 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1323.x + (-0.5));
        float _1358 = _1356 * (_1323.y + (-0.5));
        float _1359 = _1356 * (_1323.z + (-0.5));
        float _1366 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1330.x + (-0.5));
        float _1368 = _1366 * (_1330.y + (-0.5));
        float _1369 = _1366 * (_1330.z + (-0.5));
        float _1376 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1337.x + (-0.5));
        float _1378 = _1376 * (_1337.y + (-0.5));
        float _1379 = _1376 * (_1337.z + (-0.5));
        float _1386 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1344.x + (-0.5));
        float _1388 = _1386 * (_1344.y + (-0.5));
        float _1389 = _1386 * (_1344.z + (-0.5));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = _1357 * 0.5;
        float _1394 = _1367 * 0.5;
        float _1395 = _1377 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_697, _698, _699), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3865 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1420 + 1.0))) + _1425) * _1390;
        float _1435 = _1358 * 0.5;
        float _1436 = _1368 * 0.5;
        float _1437 = _1378 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_697, _698, _699), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _3876 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _3887 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _3898 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1462 + 1.0))) + _1467) * _1391;
        float _1477 = _1359 * 0.5;
        float _1478 = _1369 * 0.5;
        float _1479 = _1379 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_697, _698, _699), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _3909 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _3920 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _3931 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * (_1504 + 1.0))) + _1509) * _1392;
        _1526 = _1359;
        _1527 = _1358;
        _1528 = _1357;
        _1529 = _1369;
        _1530 = _1368;
        _1531 = _1367;
        _1532 = _1379;
        _1533 = _1378;
        _1534 = _1377;
        _1535 = _1392;
        _1536 = _1391;
        _1537 = _1390;
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
    }
    else
    {
        _1526 = _1218;
        _1527 = _1218;
        _1528 = _1218;
        _1529 = _1218;
        _1530 = _1218;
        _1531 = _1218;
        _1532 = _1218;
        _1533 = _1218;
        _1534 = _1218;
        _1535 = _1218;
        _1536 = _1218;
        _1537 = _1218;
        _1538 = 0.0;
        _1539 = 0.0;
        _1540 = 0.0;
    }
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1230)) + _1230;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1231)) + _1231;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1232)) + _1232;
    float _1573 = fma(_1552, cbSceneParam._m0[89u].z, fma(_1551, cbSceneParam._m0[89u].y, _1550 * cbSceneParam._m0[89u].x));
    float _1576 = fma(_1552, cbSceneParam._m0[90u].z, fma(_1551, cbSceneParam._m0[90u].y, _1550 * cbSceneParam._m0[90u].x));
    float _1579 = fma(_1552, cbSceneParam._m0[91u].z, fma(_1551, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1550));
    float _1594 = _855 * 0.5;
    float _1595 = _856 * 0.5;
    float _1596 = _857 * 0.5;
    float _1597 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1600 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1603 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1637;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1610 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1217, _1221, _1224, _1227));
        float _1614 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1618 = dot(vec4(_1594, _1595, _1596, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1625 = dot(vec4(cbModelParam._m0[39u]), vec4(_1594, _1595, _1596, 1.0));
        _1637 = dot(vec3(isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)), isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1625) ? 0.0 : (isnan(0.0) ? _1625 : max(0.0, _1625))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1637 = 1.0;
    }
    float _1648;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1639 = dot(vec4(cbModelParam._m0[40u]), vec4(_1594, _1595, _1596, 1.0));
        _1648 = dot(vec3(isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1639) ? 0.0 : (isnan(0.0) ? _1639 : max(0.0, _1639))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1648 = 1.0;
    }
    float _1652 = (_1648 * cbModelParam._m0[1u].x) + (_1637 * (1.0 - cbModelParam._m0[1u].x));
    float _1662 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _700);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1662 : min(cbModelParam._m0[25u].z, _1662));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1711 = fma(_916, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908)) + cbModelParam._m0[13u].w;
        float _1715 = fma(_916, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908)) + cbModelParam._m0[14u].w;
        float _1719 = fma(_916, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908)) + cbModelParam._m0[15u].w;
        float _1722 = fma(_857, cbModelParam._m0[13u].z, fma(_856, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855));
        float _1725 = fma(_857, cbModelParam._m0[14u].z, fma(_856, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855));
        float _1728 = fma(_857, cbModelParam._m0[15u].z, fma(_856, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855));
        float _1756;
        if (_1722 > 0.0)
        {
            _1756 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1756 = frontier_phi_14_12_ladder;
        }
        float _1957;
        if (_1725 > 0.0)
        {
            _1957 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1957 = frontier_phi_23_19_ladder;
        }
        float _2200;
        if (_1728 > 0.0)
        {
            _2200 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2200 = frontier_phi_35_30_ladder;
        }
        float _2202 = isnan(_1957) ? _1756 : (isnan(_1756) ? _1957 : min(_1756, _1957));
        float _2203 = isnan(_2200) ? _2202 : (isnan(_2202) ? _2200 : min(_2202, _2200));
        float _2207 = (_2203 * _1722) + _1711;
        float _2208 = (_2203 * _1725) + _1715;
        float _2209 = (_2203 * _1728) + _1719;
        float _2210 = _2203 * 9.9999997473787516355514526367188e-05;
        float _2212 = (-1.0) - _2210;
        float _2214 = _2210 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2209 > _2214) || ((_2209 < _2212) || ((_2208 > _2214) || ((_2208 < _2212) || ((_2207 < _2212) || (_2207 > _2214))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2333 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2209, cbModelParam._m0[9u].z, fma(_2208, cbModelParam._m0[9u].y, _2207 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2209, cbModelParam._m0[10u].z, fma(_2208, cbModelParam._m0[10u].y, _2207 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2209, cbModelParam._m0[11u].z, fma(_2208, cbModelParam._m0[11u].y, _2207 * cbModelParam._m0[11u].x))), _1663);
            frontier_phi_13_35_ladder = _2333.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2333.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2333.x * cbModelParam._m0[1u].y;
        }
        _1744 = frontier_phi_13_35_ladder_2;
        _1746 = frontier_phi_13_35_ladder_1;
        _1748 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_855, _856, _857), _1663);
        _1744 = _1732.x * cbModelParam._m0[1u].y;
        _1746 = _1732.y * cbModelParam._m0[1u].y;
        _1748 = _1732.z * cbModelParam._m0[1u].y;
    }
    float _1752 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _700);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1752 : min(cbModelParam._m0[25u].w, _1752));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1807 = fma(_916, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908)) + cbModelParam._m0[21u].w;
        float _1811 = fma(_916, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908)) + cbModelParam._m0[22u].w;
        float _1815 = fma(_916, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908)) + cbModelParam._m0[23u].w;
        float _1818 = fma(_857, cbModelParam._m0[21u].z, fma(_856, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855));
        float _1821 = fma(_857, cbModelParam._m0[22u].z, fma(_856, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855));
        float _1824 = fma(_857, cbModelParam._m0[23u].z, fma(_856, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855));
        float _1962;
        if (_1818 > 0.0)
        {
            _1962 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1962 = frontier_phi_25_21_ladder;
        }
        float _2227;
        if (_1821 > 0.0)
        {
            _2227 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2227 = frontier_phi_37_32_ladder;
        }
        float _2432;
        if (_1824 > 0.0)
        {
            _2432 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2432 = frontier_phi_46_43_ladder;
        }
        float _2434 = isnan(_2227) ? _1962 : (isnan(_1962) ? _2227 : min(_1962, _2227));
        float _2435 = isnan(_2432) ? _2434 : (isnan(_2434) ? _2432 : min(_2434, _2432));
        float _2439 = (_2435 * _1818) + _1807;
        float _2440 = (_2435 * _1821) + _1811;
        float _2441 = (_2435 * _1824) + _1815;
        float _2442 = _2435 * 9.9999997473787516355514526367188e-05;
        float _2443 = (-1.0) - _2442;
        float _2445 = _2442 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2441 > _2445) || ((_2441 < _2443) || ((_2440 > _2445) || ((_2440 < _2443) || ((_2439 < _2443) || (_2439 > _2445))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2441, cbModelParam._m0[17u].z, fma(_2440, cbModelParam._m0[17u].y, _2439 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2441, cbModelParam._m0[18u].z, fma(_2440, cbModelParam._m0[18u].y, _2439 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2441, cbModelParam._m0[19u].z, fma(_2440, cbModelParam._m0[19u].y, _2439 * cbModelParam._m0[19u].x))), _1753);
            frontier_phi_22_46_ladder = _2640.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2640.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2640.x * cbModelParam._m0[1u].z;
        }
        _1843 = frontier_phi_22_46_ladder_2;
        _1845 = frontier_phi_22_46_ladder_1;
        _1847 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_855, _856, _857), _1753);
        _1843 = _1827.x * cbModelParam._m0[1u].z;
        _1845 = _1827.y * cbModelParam._m0[1u].z;
        _1847 = _1827.z * cbModelParam._m0[1u].z;
    }
    float _1859 = ((((1.0 - _876) * ((_863 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_876 * _863)) * _847;
    float _1860 = _1859 * ((cbModelParam._m0[1u].w * (_1843 - _1744)) + _1744);
    float _1861 = _1859 * ((cbModelParam._m0[1u].w * (_1845 - _1746)) + _1746);
    float _1862 = _1859 * ((cbModelParam._m0[1u].w * (_1847 - _1748)) + _1748);
    float _1865 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, _1860 * cbSceneParam._m0[91u].x));
    uvec4 _1881 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1883 = _1881.x * 14u;
    uint _1884 = _1883 + 13u;
    float _1891 = _847 + (-1.0);
    float _1896 = (cbLight._m0[_1884].x * _1891) + 1.0;
    float _1897 = (cbLight._m0[_1884].y * _1891) + 1.0;
    float _1898 = (cbLight._m0[_1884].z * _1891) + 1.0;
    float _1899 = (cbLight._m0[_1884].w * _1891) + 1.0;
    uint _1900 = _1883 + 5u;
    float _1906 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
    uint _1910 = _1883 + 4u;
    float _1916 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1920 = _1883 | 1u;
    float _1931 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_697, _698, _699));
    float _1934 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_697, _698, _699));
    float _4067 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _4078 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1939 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.3183098733425140380859375;
    float _1941 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.3183098733425140380859375;
    float _1948 = ((cbLight._m0[_1900].x * _1906) * _1941) + ((cbLight._m0[_1910].x * _1916) * _1939);
    float _1949 = ((_1906 * cbLight._m0[_1900].y) * _1941) + ((_1916 * cbLight._m0[_1910].y) * _1939);
    float _1950 = ((_1906 * cbLight._m0[_1900].z) * _1941) + ((_1916 * cbLight._m0[_1910].z) * _1939);
    uvec4 _1954 = floatBitsToUint(cbLight._m0[_1883 + 12u]);
    bool _1956 = _1954.x == 0u;
    float _1967;
    float _1969;
    float _1971;
    if (_1956)
    {
        _1967 = _1948;
        _1969 = _1949;
        _1971 = _1950;
    }
    else
    {
        uint _1975 = _1883 + 6u;
        float _1991 = (dot(vec3(cbLight._m0[_1883 + 2u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _1992 = _1991 * _1991;
        float _4089 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1994 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _1967 = (((cbLight._m0[_1975].x * 0.3183098733425140380859375) * _1993) * _1994) + _1948;
        _1969 = (((cbLight._m0[_1975].y * 0.3183098733425140380859375) * _1993) * _1994) + _1949;
        _1971 = (((cbLight._m0[_1975].z * 0.3183098733425140380859375) * _1993) * _1994) + _1950;
    }
    bool _1974 = _1954.y == 0u;
    float _2012;
    float _2014;
    float _2016;
    if (_1974)
    {
        _2012 = _1967;
        _2014 = _1969;
        _2016 = _1971;
    }
    else
    {
        uint _2171 = _1883 + 7u;
        float _2187 = (dot(vec3(cbLight._m0[_1883 + 3u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2188 = _2187 * _2187;
        float _4105 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2189 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
        float _2190 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2012 = (((cbLight._m0[_2171].x * 0.3183098733425140380859375) * _2189) * _2190) + _1967;
        _2014 = (((cbLight._m0[_2171].y * 0.3183098733425140380859375) * _2189) * _2190) + _1969;
        _2016 = (((cbLight._m0[_2171].z * 0.3183098733425140380859375) * _2189) * _2190) + _1971;
    }
    uint _2019 = _1883 + 8u;
    float _2032 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _700) * 0.949999988079071044921875);
    float _2033 = _2032 * _2032;
    float _2034 = cbLight._m0[_1883].x + _776;
    float _2035 = cbLight._m0[_1883].y + _777;
    float _2036 = cbLight._m0[_1883].z + _778;
    float _2040 = inversesqrt(dot(vec3(_2034, _2035, _2036), vec3(_2034, _2035, _2036)));
    float _2041 = _2040 * _2034;
    float _2042 = _2040 * _2035;
    float _2043 = _2040 * _2036;
    float _2044 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_1883].xyz));
    float _4121 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2047 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _2048 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _2049 = dot(vec3(_697, _698, _699), vec3(_2041, _2042, _2043));
    float _4143 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2053 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_2041, _2042, _2043));
    float _4154 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2057 = _2033 * _2033;
    float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
    float _2072 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2073 = 1.0 - _2033;
    float _2084 = (0.5 / (((_2048 * ((_2047 * _2073) + _2033)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2073) + _2033) * _2047))) * _2047;
    float _4165 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2086 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
    uint _2097 = _1883 + 9u;
    float _2108 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _700) * 0.949999988079071044921875);
    float _2109 = _2108 * _2108;
    float _2110 = cbLight._m0[_1920].x + _776;
    float _2111 = cbLight._m0[_1920].y + _777;
    float _2112 = cbLight._m0[_1920].z + _778;
    float _2116 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
    float _2117 = _2116 * _2110;
    float _2118 = _2116 * _2111;
    float _2119 = _2116 * _2112;
    float _2120 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_1920].xyz));
    float _4176 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2124 = dot(vec3(_697, _698, _699), vec3(_2117, _2118, _2119));
    float _4187 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_2117, _2118, _2119));
    float _4198 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2109 * _2109;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2145 = (exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2146 = 1.0 - _2109;
    float _2156 = (0.5 / (((_2048 * ((_2123 * _2146) + _2109)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2146) + _2109) * _2123))) * _2123;
    float _4209 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2158 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    float _2168 = (((_2145 * cbLight._m0[_2097].x) * _2158) * _1906) + (((_2072 * cbLight._m0[_2019].x) * _2086) * _1916);
    float _2169 = (((_2145 * cbLight._m0[_2097].y) * _2158) * _1906) + (((_2072 * cbLight._m0[_2019].y) * _2086) * _1916);
    float _2170 = (((_2145 * cbLight._m0[_2097].z) * _2158) * _1906) + (((_2072 * cbLight._m0[_2019].z) * _2086) * _1916);
    float _2232;
    float _2234;
    float _2236;
    if (_1956)
    {
        _2232 = _2168;
        _2234 = _2169;
        _2236 = _2170;
    }
    else
    {
        uint _2238 = _1883 + 2u;
        uint _2242 = _1883 + 10u;
        float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _700) * 0.949999988079071044921875);
        float _2257 = _2256 * _2256;
        float _2258 = cbLight._m0[_2238].x + _776;
        float _2259 = cbLight._m0[_2238].y + _777;
        float _2260 = cbLight._m0[_2238].z + _778;
        float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
        float _2265 = _2264 * _2258;
        float _2266 = _2264 * _2259;
        float _2267 = _2264 * _2260;
        float _2268 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2238].xyz));
        float _4220 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2271 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2272 = dot(vec3(_697, _698, _699), vec3(_2265, _2266, _2267));
        float _4231 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2275 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2276 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2265, _2266, _2267));
        float _4242 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2280 = _2257 * _2257;
        float _2284 = ((_2275 * _2275) * (_2280 + (-1.0))) + 1.0;
        float _2293 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2294 = 1.0 - _2257;
        float _2304 = (0.5 / (((_2048 * ((_2271 * _2294) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2294) + _2257) * _2271))) * _2271;
        float _4253 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2306 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2280 / ((_2284 * _2284) * 3.141590118408203125));
        float _2307 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2232 = (((_2293 * cbLight._m0[_2242].x) * _2306) * _2307) + _2168;
        _2234 = (((_2293 * cbLight._m0[_2242].y) * _2306) * _2307) + _2169;
        _2236 = (((_2293 * cbLight._m0[_2242].z) * _2306) * _2307) + _2170;
    }
    float _2342;
    float _2344;
    float _2346;
    if (_1974)
    {
        _2342 = _2232;
        _2344 = _2234;
        _2346 = _2236;
    }
    else
    {
        uint _2353 = _1883 + 3u;
        uint _2357 = _1883 + 11u;
        float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _700) * 0.949999988079071044921875);
        float _2372 = _2371 * _2371;
        float _2373 = cbLight._m0[_2353].x + _776;
        float _2374 = cbLight._m0[_2353].y + _777;
        float _2375 = cbLight._m0[_2353].z + _778;
        float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
        float _2380 = _2379 * _2373;
        float _2381 = _2379 * _2374;
        float _2382 = _2379 * _2375;
        float _2383 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2353].xyz));
        float _4269 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2387 = dot(vec3(_697, _698, _699), vec3(_2380, _2381, _2382));
        float _4280 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _2391 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2380, _2381, _2382));
        float _4291 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2395 = _2372 * _2372;
        float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
        float _2408 = (exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2409 = 1.0 - _2372;
        float _2419 = (0.5 / (((_2048 * ((_2386 * _2409) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2048 * _2409) + _2372) * _2386))) * _2386;
        float _4302 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2421 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
        float _2422 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2342 = (((_2408 * cbLight._m0[_2357].x) * _2421) * _2422) + _2232;
        _2344 = (((_2408 * cbLight._m0[_2357].y) * _2421) * _2422) + _2234;
        _2346 = (((_2408 * cbLight._m0[_2357].z) * _2421) * _2422) + _2236;
    }
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    if (_1881.y == 0u)
    {
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2497;
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2497;
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2497;
        uvec4 _2512 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2513 = _2512.x;
        uint _2524 = uint((float(_2512.y) * floor(float(uint(cbSceneParam._m0[85u].y * _785) / _2513))) + floor(float(uint(cbSceneParam._m0[85u].x * _784) / _2513)));
        float _2534 = (log2(_2500 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2535 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        uint _2538 = uint(isnan(14.0) ? _2535 : (isnan(_2535) ? 14.0 : min(_2535, 14.0)));
        uvec4 _2543 = texelFetch(g_lightClusterGridBuffer, int(((_2538 << 2u) + (_2524 << 6u)) >> 2u));
        uint _2544 = _2543.x;
        uint _2545 = _2512.z;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        float _2655;
        if (((((1u << ((_2545 >> 4u) & 15u)) + 4294967295u) & _2544) == 0u) || ((_2545 & 240u) == 0u))
        {
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
            _2655 = 0.0;
        }
        else
        {
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2656;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            uint _2795 = 0u;
            uint _2804;
            bool _2805;
            for (;;)
            {
                _2804 = texelFetch(g_lightClassification, int((((_2538 << 5u) + (_2524 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                _2805 = _2804 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2805)
                {
                    frontier_phi_61_pred = _2789;
                    frontier_phi_61_pred_1 = _2794;
                    frontier_phi_61_pred_2 = _2793;
                    frontier_phi_61_pred_3 = _2792;
                    frontier_phi_61_pred_4 = _2791;
                    frontier_phi_61_pred_5 = _2790;
                }
                else
                {
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    uint _2919;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2804;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    for (;;)
                    {
                        uint _2923 = uint(findLSB(_2919)) + (_2795 << 5u);
                        uint _2920 = (_2919 + 4294967295u) & _2919;
                        uint _2925 = _2923 * 48u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2945 = (_2923 * 48u) + 4u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2964 = (_2923 * 48u) + 8u;
                        vec3 _2975 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x));
                        float _2979 = _2939.x - _2498;
                        float _2980 = _2939.y - _2499;
                        float _2981 = _2939.z - _2500;
                        float _2982 = dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981));
                        float _2985 = inversesqrt(_2982);
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2989 = dot(vec3(_803, _806, _809), vec3(_2986, _2987, _2988));
                        float _2994 = 1.0 - (_2982 * _2939.w);
                        float _4328 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                        float _2996 = sqrt(_2982) * _2958.w;
                        float _2999 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2989) + _3000;
                        float _3006 = _2996 * _2996;
                        float _3010 = ((isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))) * _2995) / ((_3006 * 0.699999988079071044921875) + 1.0);
                        float _3014 = (-0.0) - _2498;
                        float _3015 = (-0.0) - _2499;
                        float _3016 = (-0.0) - _2500;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3031 = exp2(log2(1.0 / ((_3006 * 3.5) + 5.0)) * 0.25);
                        float _3032 = 1.0 - _863;
                        float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                        float _3040 = _3039 * _3039;
                        float _3041 = _3040 * _3040;
                        float _3042 = _3021 + _2986;
                        float _3043 = _3022 + _2987;
                        float _3044 = _3023 + _2988;
                        float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                        float _3052 = dot(vec3(_803, _806, _809), vec3(_3021, _3022, _3023));
                        float _4344 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                        float _3056 = dot(vec3(_803, _806, _809), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                        float _4355 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                        float _3059 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                        float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                        float _3064 = _2999 * _3040;
                        float _3065 = _3064 * _3064;
                        float _3068 = ((1.0 - _3065) * _2989) + _3065;
                        float _4366 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3069 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3070 = 1.0 - _3040;
                        float _3080 = (0.5 / (((_3069 * ((_3055 * _3070) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3069 * _3070) + _3040) * _3055))) * _3069;
                        float _4377 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3091 = (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) / ((_3063 * _3063) * ((_3006 * 2.1991131305694580078125) + 3.141590118408203125))) * _2995;
                        _2848 = (_3010 * _2958.x) + _2916;
                        _2849 = (_3010 * _2958.y) + _2917;
                        _2850 = (_3010 * _2958.z) + _2918;
                        _2845 = (_3091 * _2975.x) + _2913;
                        _2846 = (_3091 * _2975.y) + _2914;
                        _2847 = (_3091 * _2975.z) + _2915;
                        if (_2920 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2920;
                        }
                    }
                    frontier_phi_61_pred = _2845;
                    frontier_phi_61_pred_1 = _2850;
                    frontier_phi_61_pred_2 = _2849;
                    frontier_phi_61_pred_3 = _2848;
                    frontier_phi_61_pred_4 = _2847;
                    frontier_phi_61_pred_5 = _2846;
                }
                _2646 = frontier_phi_61_pred;
                _2656 = frontier_phi_61_pred_1;
                _2654 = frontier_phi_61_pred_2;
                _2652 = frontier_phi_61_pred_3;
                _2650 = frontier_phi_61_pred_4;
                _2648 = frontier_phi_61_pred_5;
                uint _2796 = _2795 + 1u;
                if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2789 = _2646;
                    _2790 = _2648;
                    _2791 = _2650;
                    _2792 = _2652;
                    _2793 = _2654;
                    _2794 = _2656;
                    _2795 = _2796;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
            _2655 = _2656;
        }
        uvec4 _2659 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2660 = _2659.z;
        uint _2662 = (_2660 >> 8u) & 15u;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((4294967295u << _2662) & _2544) == 0u)
        {
            _2757 = _2645;
            _2759 = _2647;
            _2761 = _2649;
            _2763 = _2651;
            _2765 = _2653;
            _2767 = _2655;
        }
        else
        {
            float _2782 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
            float _2783 = _2782 * _2498;
            float _2784 = _2782 * _2499;
            float _2785 = _2782 * _2500;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2662 < ((_2660 >> 12u) & 15u))
            {
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2896 = _2645;
                float _2897 = _2647;
                float _2898 = _2649;
                float _2899 = _2651;
                float _2900 = _2653;
                float _2901 = _2655;
                uint _2902 = _2662;
                uint _2911;
                bool _2912;
                for (;;)
                {
                    _2911 = texelFetch(g_lightClassification, int((((_2538 << 5u) + (_2524 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                    _2912 = _2911 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2912)
                    {
                        frontier_phi_67_pred = _2899;
                        frontier_phi_67_pred_1 = _2900;
                        frontier_phi_67_pred_2 = _2901;
                        frontier_phi_67_pred_3 = _2898;
                        frontier_phi_67_pred_4 = _2897;
                        frontier_phi_67_pred_5 = _2896;
                    }
                    else
                    {
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        float _3112 = _2899;
                        float _3113 = _2900;
                        float _3114 = _2901;
                        uint _3115 = _2911;
                        uint _3116;
                        vec4 _3141;
                        float _3142;
                        vec4 _3157;
                        vec3 _3169;
                        vec4 _3184;
                        vec4 _3200;
                        float _3246;
                        bool _3247;
                        for (;;)
                        {
                            uint _3126 = ((_2902 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3115));
                            _3116 = (_3115 + 4294967295u) & _3115;
                            uint _3128 = _3126 * 40u;
                            _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            _3142 = _3141.w;
                            uint _3144 = (_3126 * 40u) + 4u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3159 = (_3126 * 40u) + 8u;
                            _3169 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x));
                            uint _3171 = (_3126 * 40u) + 16u;
                            _3184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3171 + 3u)).x));
                            uint _3187 = (_3126 * 40u) + 20u;
                            _3200 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3187 + 3u)).x));
                            uint _3202 = (_3126 * 40u) + 24u;
                            vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3221 = (_3126 * 40u) + 28u;
                            vec4 _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            _3246 = fma(_2500, _3234.z, fma(_2499, _3234.y, _3234.x * _2498)) + _3234.w;
                            _3247 = !((fma(_2500, _3215.z, fma(_2499, _3215.y, _3215.x * _2498)) + _3215.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3247)
                            {
                                float _3274 = _3141.x - _2498;
                                float _3275 = _3141.y - _2499;
                                float _3276 = _3141.z - _2500;
                                float _3277 = dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276));
                                float _3280 = inversesqrt(_3277);
                                float _3281 = _3280 * _3274;
                                float _3282 = _3280 * _3275;
                                float _3283 = _3280 * _3276;
                                float _3287 = 1.0 - (_3277 / (_3142 * _3142));
                                float _4388 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3292 = sqrt(_3277) * _3157.w;
                                float _3294 = 1.39999997615814208984375 / (_3292 + 1.39999997615814208984375);
                                float _3295 = _3294 * _3294;
                                float _3298 = ((1.0 - _3295) * dot(vec3(_3281, _3282, _3283), vec3(_803, _806, _809))) + _3295;
                                float _3301 = _3292 * _3292;
                                float _3305 = (fma(_2500, _3184.z, fma(_2499, _3184.y, _3184.x * _2498)) + _3184.w) / _3246;
                                float _3306 = (fma(_2500, _3200.z, fma(_2499, _3200.y, _3200.x * _2498)) + _3200.w) / _3246;
                                float _3310 = 1.0 - dot(vec2(_3305, _3306), vec2(_3305, _3306));
                                float _4404 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
                                float _3312 = _3311 * (((isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0))) * _3288) / ((_3301 * 0.699999988079071044921875) + 1.0));
                                float _3324 = exp2(log2(1.0 / ((_3301 * 3.5) + 5.0)) * 0.25);
                                float _3325 = 1.0 - _863;
                                float _3332 = sqrt(1.0 - ((1.0 - (_3325 * _3325)) * (1.0 - (_3324 * _3324))));
                                float _3333 = _3332 * _3332;
                                float _3334 = _3333 * _3333;
                                float _3335 = _3281 - _2783;
                                float _3336 = _3282 - _2784;
                                float _3337 = _3283 - _2785;
                                float _3341 = inversesqrt(dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337)));
                                float _3345 = dot(vec3(_803, _806, _809), vec3((-0.0) - _2783, (-0.0) - _2784, (-0.0) - _2785));
                                float _4415 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
                                float _3349 = dot(vec3(_803, _806, _809), vec3(_3341 * _3335, _3341 * _3336, _3341 * _3337));
                                float _4426 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3352 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3356 = ((_3352 * _3352) * (_3334 + (-1.0))) + 1.0;
                                float _3357 = _3294 * _3333;
                                float _3358 = _3357 * _3357;
                                float _3364 = ((1.0 - _3358) * dot(vec3(_803, _806, _809), vec3(_3281, _3282, _3283))) + _3358;
                                float _4437 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3366 = 1.0 - _3333;
                                float _3376 = (0.5 / (((_3365 * ((_3348 * _3366) + _3333)) + 9.9999999392252902907785028219223e-09) + (((_3365 * _3366) + _3333) * _3348))) * _3365;
                                float _4448 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3386 = (_3311 * _3288) * (((_3334 * 3.1415927410125732421875) * (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0)))) / ((_3356 * _3356) * ((_3301 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3386 * _3169.x;
                                frontier_phi_73_pred_1 = _3386 * _3169.y;
                                frontier_phi_73_pred_2 = _3312 * _3157.z;
                                frontier_phi_73_pred_3 = _3312 * _3157.y;
                                frontier_phi_73_pred_4 = _3312 * _3157.x;
                                frontier_phi_73_pred_5 = _3386 * _3169.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3390 = frontier_phi_73_pred;
                            _3391 = frontier_phi_73_pred_1;
                            _3395 = frontier_phi_73_pred_2;
                            _3394 = frontier_phi_73_pred_3;
                            _3393 = frontier_phi_73_pred_4;
                            _3392 = frontier_phi_73_pred_5;
                            _3099 = _3393 + _3112;
                            _3100 = _3394 + _3113;
                            _3101 = _3395 + _3114;
                            _3096 = _3390 + _3109;
                            _3097 = _3391 + _3110;
                            _3098 = _3392 + _3111;
                            if (_3116 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3101;
                                _3115 = _3116;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3099;
                        frontier_phi_67_pred_1 = _3100;
                        frontier_phi_67_pred_2 = _3101;
                        frontier_phi_67_pred_3 = _3098;
                        frontier_phi_67_pred_4 = _3097;
                        frontier_phi_67_pred_5 = _3096;
                    }
                    _2764 = frontier_phi_67_pred;
                    _2766 = frontier_phi_67_pred_1;
                    _2768 = frontier_phi_67_pred_2;
                    _2762 = frontier_phi_67_pred_3;
                    _2760 = frontier_phi_67_pred_4;
                    _2758 = frontier_phi_67_pred_5;
                    uint _2903 = _2902 + 1u;
                    if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2896 = _2758;
                        _2897 = _2760;
                        _2898 = _2762;
                        _2899 = _2764;
                        _2900 = _2766;
                        _2901 = _2768;
                        _2902 = _2903;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2766;
                frontier_phi_55_56_ladder_1 = _2768;
                frontier_phi_55_56_ladder_2 = _2764;
                frontier_phi_55_56_ladder_3 = _2762;
                frontier_phi_55_56_ladder_4 = _2760;
                frontier_phi_55_56_ladder_5 = _2758;
            }
            else
            {
                frontier_phi_55_56_ladder = _2653;
                frontier_phi_55_56_ladder_1 = _2655;
                frontier_phi_55_56_ladder_2 = _2651;
                frontier_phi_55_56_ladder_3 = _2649;
                frontier_phi_55_56_ladder_4 = _2647;
                frontier_phi_55_56_ladder_5 = _2645;
            }
            _2757 = frontier_phi_55_56_ladder_5;
            _2759 = frontier_phi_55_56_ladder_4;
            _2761 = frontier_phi_55_56_ladder_3;
            _2763 = frontier_phi_55_56_ladder_2;
            _2765 = frontier_phi_55_56_ladder;
            _2767 = frontier_phi_55_56_ladder_1;
        }
        float _2772 = isnan(1.0) ? _847 : (isnan(_847) ? 1.0 : min(_847, 1.0));
        _2557 = (_2772 * _2763) + _2012;
        _2559 = (_2772 * _2765) + _2014;
        _2561 = (_2772 * _2767) + _2016;
        _2563 = ((_2757 * 0.039999999105930328369140625) * _2772) + _2342;
        _2565 = ((_2759 * 0.039999999105930328369140625) * _2772) + _2344;
        _2567 = ((_2761 * 0.039999999105930328369140625) * _2772) + _2346;
    }
    else
    {
        _2557 = _2012;
        _2559 = _2014;
        _2561 = _2016;
        _2563 = _2342;
        _2565 = _2344;
        _2567 = _2346;
    }
    float _4464 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4475 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4486 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    uint _2587 = _241 + 6u;
    float _2595 = _784 / cbSceneParam._m0[86u].x;
    float _2596 = _785 / cbSceneParam._m0[86u].y;
    vec4 _2610 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2595, _2596, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2612 = _2610.x;
    float _2613 = _2610.y;
    float _2614 = _2610.z;
    float _2615 = _2610.w;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _2670 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _2671 = _2670 / _718;
        float _2682 = _2671 * _769;
        float _2683 = _770 * _2671;
        float _2684 = (-0.0) - _2683;
        float _2685 = _2671 * _771;
        float _2687 = (cbSceneParam._m0[77u].w * _2684) / _2670;
        float _2688 = _2687 + cbSceneParam._m0[79u].w;
        float _2689 = cbSceneParam._m0[79u].w - _2683;
        float _2695 = sqrt(((_2682 * _2682) + (_2683 * _2683)) + (_2685 * _2685));
        float _2698 = (1.0 - (cbSceneParam._m0[77u].w / _2670)) * _2695;
        float _2703 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2705 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2858;
        if (abs((_2684 - _2687) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2858 = ((((_2688 > 0.0) ? exp2(_2703 * _2688) : (2.0 - exp2(_2705 * _2688))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2698;
        }
        else
        {
            float _2818 = 1.0 / cbSceneParam._m0[80u].x;
            float _2819 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : max(_2688, _2689));
            float _2820 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : min(_2688, _2689));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            _2858 = ((abs(_2695 / _2684) * cbSceneParam._m0[80u].y) * ((((_2829 - _2830) * 2.0) - ((exp2(_2703 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)))) - exp2(_2703 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))))) * _2818)) - ((exp2(_2705 * _2829) - exp2(_2705 * _2830)) * _2818))) + (_2698 * cbSceneParam._m0[80u].z);
        }
        vec4 _2860 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2595, _2596, 1.0), 0.0);
        float _2869 = exp2((_2858 * (-1.44269502162933349609375)) * (1.0 - _2860.w));
        float _2870 = log2(_2869);
        float _2886 = log2(_2615);
        _2707 = (exp2(_2886 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].x)) * _2860.x) / cbSceneParam._m0[78u].x)) + _2612;
        _2709 = (exp2(_2886 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].y)) * _2860.y) / cbSceneParam._m0[78u].y)) + _2613;
        _2711 = (exp2(_2886 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].z)) * _2860.z) / cbSceneParam._m0[78u].z)) + _2614;
        _2713 = _2869 * _2615;
    }
    else
    {
        _2707 = _2612;
        _2709 = _2613;
        _2711 = _2614;
        _2713 = _2615;
    }
    float _2725 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2726 = _2725 == 3.0;
    float _2727 = log2(_2713);
    float _2734 = exp2(_2727 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2557 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _847))) + ((_2563 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1652)) * cbPerFrame._m0[3u].x));
    float _2735 = exp2(_2727 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * (_2559 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _847))) + ((_2565 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1652)) * cbPerFrame._m0[3u].x));
    float _2736 = exp2(_2727 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2561 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _847))) + ((_2567 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1652)) * cbPerFrame._m0[3u].x));
    float _2745 = (_2725 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2745 * (_2726 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.y = _2745 * (_2726 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.z = _2745 * (_2726 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2711)));
    SV_Target.w = cbInstanceData._m0[_2587].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2587].w;
}


