#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1189;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _247 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _250 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3519 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3530 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3541 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _265 = _260 + 1u;
    uint _269 = _260 + 2u;
    float _278 = sqrt(((cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x));
    float _279 = _278 * TEXCOORD.z;
    float _280 = _278 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _279) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _280) + cbTextureTilingScale._m0[13u].w));
    vec4 _317 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _322 = _317.x * cbMtdParam._m0[11u].x;
    float _323 = _317.y * cbMtdParam._m0[11u].y;
    float _324 = _317.z * cbMtdParam._m0[11u].z;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _279) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _280) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _391 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _408 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_381 - _391) * cbMtdParam._m0[24u].x) + _391) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3552 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _416 = (_409 * ((_343.x * cbMtdParam._m0[12u].x) - _322)) + _322;
    float _417 = (_409 * ((_343.y * cbMtdParam._m0[12u].y) - _323)) + _323;
    float _418 = (_409 * ((_343.z * cbMtdParam._m0[12u].z) - _324)) + _324;
    float _422 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _293.x) * _416;
    float _425 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _293.y) * _417;
    float _428 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _293.z) * _418;
    float _435 = ((_416 - _422) * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) + _422;
    float _436 = ((_417 - _425) * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) + _425;
    float _437 = ((_418 - _428) * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) + _428;
    vec4 _455 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _279) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _280) + cbTextureTilingScale._m0[20u].w));
    vec4 _482 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _279) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _280) + cbTextureTilingScale._m0[4u].w));
    vec4 _499 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _501 = _499.x;
    float _502 = _499.y;
    float _503 = _499.z;
    float _512 = ((_482.z - _503) * _409) + _503;
    float _515 = ((((_482.x - _501) * _409) + _501) * 2.0) + (-1.0);
    float _516 = ((((_482.y - _502) * _409) + _502) * 2.0) + (-1.0);
    float _517 = dot(vec2(_515, _516), vec2(_515, _516));
    float _3563 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _522 = sqrt(1.0 - (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))));
    float _525 = _515 + ((((_455.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _526 = _516 + ((((_455.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _529 = fma(_522, _227, fma(_526, _234, _525 * _220));
    float _532 = fma(_522, _228, fma(_526, _235, _525 * _221));
    float _535 = fma(_522, _229, fma(_526, _236, _525 * _222));
    float _539 = inversesqrt(dot(vec3(_529, _532, _535), vec3(_529, _532, _535)));
    vec4 _555 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _583 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _279) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _280) + cbTextureTilingScale._m0[11u].w));
    float _585 = _583.x;
    float _586 = 1.0 - _585;
    float _592 = (cbMtdParam._m0[19u].x + dot(vec4(_539 * _529, _539 * _532, _539 * _535, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_585 - _586) * cbMtdParam._m0[24u].z) + _586) * cbMtdParam._m0[21u].z);
    float _3574 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _600 = (_593 * (cbMtdParam._m0[17u].x - _435)) + _435;
    float _601 = (_593 * (cbMtdParam._m0[17u].y - _436)) + _436;
    float _602 = (_593 * (cbMtdParam._m0[17u].z - _437)) + _437;
    float _607 = (((_455.z - _512) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _512;
    vec4 _620 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _279) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _280) + cbTextureTilingScale._m0[15u].w));
    float _627 = (_620.x * 2.0) + (-1.0);
    float _628 = (_620.y * 2.0) + (-1.0);
    float _629 = dot(vec2(_627, _628), vec2(_627, _628));
    float _3585 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _637 = ((_620.z - _607) * _593) + _607;
    float _647 = ((sqrt(1.0 - (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0)))) - _522) * _593) + _522;
    float _650 = (((_627 - _525) * _593) + _525) + (cbMtdParam._m0[21u].x * _525);
    float _651 = (((_628 - _526) * _593) + _526) + (cbMtdParam._m0[21u].x * _526);
    float _653 = cbMtdParam._m0[22u].x + _555.w;
    float _656 = fma(_647, _227, fma(_651, _234, _650 * _220));
    float _659 = fma(_647, _228, fma(_651, _235, _650 * _221));
    float _662 = fma(_647, _229, fma(_651, _236, _650 * _222));
    float _666 = inversesqrt(dot(vec3(_656, _659, _662), vec3(_656, _659, _662)));
    float _667 = _666 * _656;
    float _668 = _666 * _659;
    float _669 = _666 * _662;
    float _3596 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _670 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
    float _3607 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _3618 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3629 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3640 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _688 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _740 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _730);
    float _741 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _730);
    float _742 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _730);
    float _746 = inversesqrt(dot(vec3(_740, _741, _742), vec3(_740, _741, _742)));
    float _747 = _740 * _746;
    float _748 = _741 * _746;
    float _749 = _742 * _746;
    float _755 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _756 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _774 = fma(_669, cbSceneParam._m0[5u].z, fma(_668, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _667));
    float _777 = fma(_669, cbSceneParam._m0[6u].z, fma(_668, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _667));
    float _780 = fma(_669, cbSceneParam._m0[7u].z, fma(_668, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _667));
    uint _794 = (_260 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _800 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_794].x;
    float _801 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0)))) * cbInstanceData._m0[_794].y;
    float _802 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_794].z;
    float _3651 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    vec4 _814 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _755, cbSceneParam._m0[86u].y * _756));
    float _818 = ((isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * TEXCOORD_5.w) * _814.x;
    float _819 = dot(vec3(_667, _668, _669), vec3(_747, _748, _749));
    float _822 = _819 * 2.0;
    float _826 = (_822 * _667) - _747;
    float _827 = (_822 * _668) - _748;
    float _828 = (_822 * _669) - _749;
    float _832 = abs(dot(vec3(_747, _748, _749), vec3(_667, _668, _669)));
    float _3684 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _834 = sqrt(_670);
    float _847 = exp2((_834 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_834 * 3.0));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1188;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _913 = fma(_887, cbModelParam._m0[26u].z, fma(_883, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _879));
        float _917 = fma(_887, cbModelParam._m0[27u].z, fma(_883, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _879));
        float _921 = fma(_887, cbModelParam._m0[28u].z, fma(_883, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _879));
        float _946 = _879 + _667;
        float _947 = _883 + _668;
        float _948 = _887 + _669;
        float _958 = fma(_948, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _946)) - _913;
        float _959 = fma(_948, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _946)) - _917;
        float _960 = fma(_948, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _946)) - _921;
        float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
        float _977 = ((_964 * _958) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_913 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_964 * _959) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_917 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_964 * _960) / cbModelParam._m0[34u].z) + ((((((_921 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        float _1016 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_982.x + (-0.5));
        float _1018 = _1016 * (_982.y + (-0.5));
        float _1019 = _1016 * (_982.z + (-0.5));
        float _1026 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_989.x + (-0.5));
        float _1028 = _1026 * (_989.y + (-0.5));
        float _1029 = _1026 * (_989.z + (-0.5));
        float _1036 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_996.x + (-0.5));
        float _1038 = _1036 * (_996.y + (-0.5));
        float _1039 = _1036 * (_996.z + (-0.5));
        float _1046 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1003.x + (-0.5));
        float _1048 = _1046 * (_1003.y + (-0.5));
        float _1049 = _1046 * (_1003.z + (-0.5));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = _1017 * 0.5;
        float _1054 = _1027 * 0.5;
        float _1055 = _1037 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1070 = (dot(vec3(_667, _668, _669), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1080 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3732 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1082 + 1.0))) + _1087) * _1050;
        float _1097 = _1018 * 0.5;
        float _1098 = _1028 * 0.5;
        float _1099 = _1038 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_667, _668, _669), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _3765 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1124 + 1.0))) + _1129) * _1051;
        float _1139 = _1019 * 0.5;
        float _1140 = _1029 * 0.5;
        float _1141 = _1039 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_667, _668, _669), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _3798 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1166 + 1.0))) + _1171) * _1052;
        _1188 = _1019;
        _1190 = _1018;
        _1191 = _1017;
        _1192 = _1029;
        _1193 = _1028;
        _1194 = _1027;
        _1195 = _1039;
        _1196 = _1038;
        _1197 = _1037;
        _1198 = _1052;
        _1199 = _1051;
        _1200 = _1050;
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1202 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
    }
    else
    {
        _1188 = _1189;
        _1190 = _1189;
        _1191 = _1189;
        _1192 = _1189;
        _1193 = _1189;
        _1194 = _1189;
        _1195 = _1189;
        _1196 = _1189;
        _1197 = _1189;
        _1198 = _1189;
        _1199 = _1189;
        _1200 = _1189;
        _1201 = 0.0;
        _1202 = 0.0;
        _1203 = 0.0;
    }
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1228 = fma(_887, cbModelParam._m0[30u].z, fma(_883, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _879));
        float _1232 = fma(_887, cbModelParam._m0[31u].z, fma(_883, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _879));
        float _1236 = fma(_887, cbModelParam._m0[32u].z, fma(_883, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _879));
        float _1259 = _879 + _667;
        float _1260 = _883 + _668;
        float _1261 = _887 + _669;
        float _1271 = fma(_1261, cbModelParam._m0[30u].z, fma(_1260, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1259)) - _1228;
        float _1272 = fma(_1261, cbModelParam._m0[31u].z, fma(_1260, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1259)) - _1232;
        float _1273 = fma(_1261, cbModelParam._m0[32u].z, fma(_1260, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1259)) - _1236;
        float _1277 = inversesqrt(dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273)));
        float _1290 = ((_1277 * _1271) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1228 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1277 * _1272) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1232 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1277 * _1273) / cbModelParam._m0[35u].z) + ((((((_1236 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        float _1327 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1294.x + (-0.5));
        float _1329 = _1327 * (_1294.y + (-0.5));
        float _1330 = _1327 * (_1294.z + (-0.5));
        float _1337 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1301.x + (-0.5));
        float _1339 = _1337 * (_1301.y + (-0.5));
        float _1340 = _1337 * (_1301.z + (-0.5));
        float _1347 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1308.x + (-0.5));
        float _1349 = _1347 * (_1308.y + (-0.5));
        float _1350 = _1347 * (_1308.z + (-0.5));
        float _1357 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1315.x + (-0.5));
        float _1359 = _1357 * (_1315.y + (-0.5));
        float _1360 = _1357 * (_1315.z + (-0.5));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = _1328 * 0.5;
        float _1365 = _1338 * 0.5;
        float _1366 = _1348 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_667, _668, _669), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _3861 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1391 + 1.0))) + _1396) * _1361;
        float _1406 = _1329 * 0.5;
        float _1407 = _1339 * 0.5;
        float _1408 = _1349 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_667, _668, _669), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _3894 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1433 + 1.0))) + _1438) * _1362;
        float _1448 = _1330 * 0.5;
        float _1449 = _1340 * 0.5;
        float _1450 = _1350 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_667, _668, _669), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _3927 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1475 + 1.0))) + _1480) * _1363;
        _1497 = _1330;
        _1498 = _1329;
        _1499 = _1328;
        _1500 = _1340;
        _1501 = _1339;
        _1502 = _1338;
        _1503 = _1350;
        _1504 = _1349;
        _1505 = _1348;
        _1506 = _1363;
        _1507 = _1362;
        _1508 = _1361;
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
    }
    else
    {
        _1497 = _1189;
        _1498 = _1189;
        _1499 = _1189;
        _1500 = _1189;
        _1501 = _1189;
        _1502 = _1189;
        _1503 = _1189;
        _1504 = _1189;
        _1505 = _1189;
        _1506 = _1189;
        _1507 = _1189;
        _1508 = _1189;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1201)) + _1201;
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1202)) + _1202;
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1203)) + _1203;
    float _1544 = fma(_1523, cbSceneParam._m0[89u].z, fma(_1522, cbSceneParam._m0[89u].y, _1521 * cbSceneParam._m0[89u].x));
    float _1547 = fma(_1523, cbSceneParam._m0[90u].z, fma(_1522, cbSceneParam._m0[90u].y, _1521 * cbSceneParam._m0[90u].x));
    float _1550 = fma(_1523, cbSceneParam._m0[91u].z, fma(_1522, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1521));
    float _1565 = _826 * 0.5;
    float _1566 = _827 * 0.5;
    float _1567 = _828 * 0.5;
    float _1568 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1571 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1574 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1608;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1581 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1188, _1192, _1195, _1198));
        float _1585 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1190, _1193, _1196, _1199));
        float _1589 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1191, _1194, _1197, _1200));
        float _1596 = dot(vec4(cbModelParam._m0[39u]), vec4(_1565, _1566, _1567, 1.0));
        _1608 = dot(vec3(isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1608 = 1.0;
    }
    float _1619;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1610 = dot(vec4(cbModelParam._m0[40u]), vec4(_1565, _1566, _1567, 1.0));
        _1619 = dot(vec3(isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1610) ? 0.0 : (isnan(0.0) ? _1610 : max(0.0, _1610))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1619 = 1.0;
    }
    float _1623 = (_1619 * cbModelParam._m0[1u].x) + (_1608 * (1.0 - cbModelParam._m0[1u].x));
    float _1633 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _670);
    float _1634 = isnan(_1633) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1633 : min(cbModelParam._m0[25u].z, _1633));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1682 = fma(_887, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879)) + cbModelParam._m0[13u].w;
        float _1686 = fma(_887, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879)) + cbModelParam._m0[14u].w;
        float _1690 = fma(_887, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879)) + cbModelParam._m0[15u].w;
        float _1693 = fma(_828, cbModelParam._m0[13u].z, fma(_827, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _826));
        float _1696 = fma(_828, cbModelParam._m0[14u].z, fma(_827, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _826));
        float _1699 = fma(_828, cbModelParam._m0[15u].z, fma(_827, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _826));
        float _1727;
        if (_1693 > 0.0)
        {
            _1727 = abs((1.0 - _1682) / _1693);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1682 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1727 = frontier_phi_14_12_ladder;
        }
        float _1949;
        if (_1696 > 0.0)
        {
            _1949 = abs((1.0 - _1686) / _1696);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1686 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1949 = frontier_phi_23_19_ladder;
        }
        float _2195;
        if (_1699 > 0.0)
        {
            _2195 = abs((1.0 - _1690) / _1699);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1690 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2195 = frontier_phi_35_30_ladder;
        }
        float _2197 = isnan(_1949) ? _1727 : (isnan(_1727) ? _1949 : min(_1727, _1949));
        float _2198 = isnan(_2195) ? _2197 : (isnan(_2197) ? _2195 : min(_2197, _2195));
        float _2202 = (_2198 * _1693) + _1682;
        float _2203 = (_2198 * _1696) + _1686;
        float _2204 = (_2198 * _1699) + _1690;
        float _2205 = _2198 * 9.9999997473787516355514526367188e-05;
        float _2207 = (-1.0) - _2205;
        float _2209 = _2205 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2204 > _2209) || ((_2204 < _2207) || ((_2203 > _2209) || ((_2203 < _2207) || ((_2202 < _2207) || (_2202 > _2209))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2328 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2204, cbModelParam._m0[9u].z, fma(_2203, cbModelParam._m0[9u].y, _2202 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2204, cbModelParam._m0[10u].z, fma(_2203, cbModelParam._m0[10u].y, _2202 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2204, cbModelParam._m0[11u].z, fma(_2203, cbModelParam._m0[11u].y, _2202 * cbModelParam._m0[11u].x))), _1634);
            frontier_phi_13_35_ladder = _2328.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2328.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2328.x * cbModelParam._m0[1u].y;
        }
        _1715 = frontier_phi_13_35_ladder_2;
        _1717 = frontier_phi_13_35_ladder_1;
        _1719 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_826, _827, _828), _1634);
        _1715 = _1703.x * cbModelParam._m0[1u].y;
        _1717 = _1703.y * cbModelParam._m0[1u].y;
        _1719 = _1703.z * cbModelParam._m0[1u].y;
    }
    float _1723 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _670);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1723 : min(cbModelParam._m0[25u].w, _1723));
    float _1814;
    float _1816;
    float _1818;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1778 = fma(_887, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879)) + cbModelParam._m0[21u].w;
        float _1782 = fma(_887, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879)) + cbModelParam._m0[22u].w;
        float _1786 = fma(_887, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879)) + cbModelParam._m0[23u].w;
        float _1789 = fma(_828, cbModelParam._m0[21u].z, fma(_827, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _826));
        float _1792 = fma(_828, cbModelParam._m0[22u].z, fma(_827, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _826));
        float _1795 = fma(_828, cbModelParam._m0[23u].z, fma(_827, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _826));
        float _1954;
        if (_1789 > 0.0)
        {
            _1954 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1954 = frontier_phi_25_21_ladder;
        }
        float _2222;
        if (_1792 > 0.0)
        {
            _2222 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2222 = frontier_phi_37_32_ladder;
        }
        float _2427;
        if (_1795 > 0.0)
        {
            _2427 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2427 = frontier_phi_46_43_ladder;
        }
        float _2429 = isnan(_2222) ? _1954 : (isnan(_1954) ? _2222 : min(_1954, _2222));
        float _2430 = isnan(_2427) ? _2429 : (isnan(_2429) ? _2427 : min(_2429, _2427));
        float _2434 = (_2430 * _1789) + _1778;
        float _2435 = (_2430 * _1792) + _1782;
        float _2436 = (_2430 * _1795) + _1786;
        float _2437 = _2430 * 9.9999997473787516355514526367188e-05;
        float _2438 = (-1.0) - _2437;
        float _2440 = _2437 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2436 > _2440) || ((_2436 < _2438) || ((_2435 > _2440) || ((_2435 < _2438) || ((_2434 < _2438) || (_2434 > _2440))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2635 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2436, cbModelParam._m0[17u].z, fma(_2435, cbModelParam._m0[17u].y, _2434 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2436, cbModelParam._m0[18u].z, fma(_2435, cbModelParam._m0[18u].y, _2434 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2436, cbModelParam._m0[19u].z, fma(_2435, cbModelParam._m0[19u].y, _2434 * cbModelParam._m0[19u].x))), _1724);
            frontier_phi_22_46_ladder = _2635.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2635.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2635.x * cbModelParam._m0[1u].z;
        }
        _1814 = frontier_phi_22_46_ladder_2;
        _1816 = frontier_phi_22_46_ladder_1;
        _1818 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1798 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_826, _827, _828), _1724);
        _1814 = _1798.x * cbModelParam._m0[1u].z;
        _1816 = _1798.y * cbModelParam._m0[1u].z;
        _1818 = _1798.z * cbModelParam._m0[1u].z;
    }
    float _1830 = ((((1.0 - _847) * ((_834 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_847 * _834)) * _818;
    float _1831 = _1830 * ((cbModelParam._m0[1u].w * (_1814 - _1715)) + _1715);
    float _1832 = _1830 * ((cbModelParam._m0[1u].w * (_1816 - _1717)) + _1717);
    float _1833 = _1830 * ((cbModelParam._m0[1u].w * (_1818 - _1719)) + _1719);
    float _1836 = fma(_1833, cbSceneParam._m0[89u].z, fma(_1832, cbSceneParam._m0[89u].y, _1831 * cbSceneParam._m0[89u].x));
    float _1839 = fma(_1833, cbSceneParam._m0[90u].z, fma(_1832, cbSceneParam._m0[90u].y, _1831 * cbSceneParam._m0[90u].x));
    float _1842 = fma(_1833, cbSceneParam._m0[91u].z, fma(_1832, cbSceneParam._m0[91u].y, _1831 * cbSceneParam._m0[91u].x));
    vec4 _1850 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_755, _756));
    float _1852 = _1850.w;
    float _1864 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1852);
    float _1865 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1852);
    float _1866 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1852);
    uvec4 _1870 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _1872 = _1870.x * 14u;
    uint _1873 = _1872 + 13u;
    float _1880 = _818 + (-1.0);
    float _1885 = (cbLight._m0[_1873].x * _1880) + 1.0;
    float _1886 = (cbLight._m0[_1873].y * _1880) + 1.0;
    float _1887 = (cbLight._m0[_1873].z * _1880) + 1.0;
    float _1888 = (cbLight._m0[_1873].w * _1880) + 1.0;
    uint _1889 = _1872 + 5u;
    float _1895 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
    uint _1899 = _1872 + 4u;
    float _1908 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
    uint _1912 = _1872 | 1u;
    float _1923 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_667, _668, _669));
    float _1926 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_667, _668, _669));
    float _4063 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _4074 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1931 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.3183098733425140380859375;
    float _1933 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.3183098733425140380859375;
    float _1940 = ((cbLight._m0[_1889].x * _1895) * _1933) + (((cbLight._m0[_1899].x * _1864) * _1908) * _1931);
    float _1941 = ((_1895 * cbLight._m0[_1889].y) * _1933) + (((cbLight._m0[_1899].y * _1865) * _1908) * _1931);
    float _1942 = ((_1895 * cbLight._m0[_1889].z) * _1933) + (((cbLight._m0[_1899].z * _1866) * _1908) * _1931);
    uvec4 _1946 = floatBitsToUint(cbLight._m0[_1872 + 12u]);
    bool _1948 = _1946.x == 0u;
    float _1959;
    float _1961;
    float _1963;
    if (_1948)
    {
        _1959 = _1940;
        _1961 = _1941;
        _1963 = _1942;
    }
    else
    {
        uint _1967 = _1872 + 6u;
        float _1983 = (dot(vec3(cbLight._m0[_1872 + 2u].xyz), vec3(_667, _668, _669)) * 0.5) + 0.5;
        float _1984 = _1983 * _1983;
        float _4085 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1985 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1986 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _1959 = (((cbLight._m0[_1967].x * 0.3183098733425140380859375) * _1985) * _1986) + _1940;
        _1961 = (((cbLight._m0[_1967].y * 0.3183098733425140380859375) * _1985) * _1986) + _1941;
        _1963 = (((cbLight._m0[_1967].z * 0.3183098733425140380859375) * _1985) * _1986) + _1942;
    }
    bool _1966 = _1946.y == 0u;
    float _2004;
    float _2006;
    float _2008;
    if (_1966)
    {
        _2004 = _1959;
        _2006 = _1961;
        _2008 = _1963;
    }
    else
    {
        uint _2166 = _1872 + 7u;
        float _2182 = (dot(vec3(cbLight._m0[_1872 + 3u].xyz), vec3(_667, _668, _669)) * 0.5) + 0.5;
        float _2183 = _2182 * _2182;
        float _4101 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2184 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2185 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2004 = (((cbLight._m0[_2166].x * 0.3183098733425140380859375) * _2184) * _2185) + _1959;
        _2006 = (((cbLight._m0[_2166].y * 0.3183098733425140380859375) * _2184) * _2185) + _1961;
        _2008 = (((cbLight._m0[_2166].z * 0.3183098733425140380859375) * _2184) * _2185) + _1963;
    }
    uint _2011 = _1872 + 8u;
    float _2024 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1872].w)) * _670) * 0.949999988079071044921875);
    float _2025 = _2024 * _2024;
    float _2026 = cbLight._m0[_1872].x + _747;
    float _2027 = cbLight._m0[_1872].y + _748;
    float _2028 = cbLight._m0[_1872].z + _749;
    float _2032 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
    float _2033 = _2032 * _2026;
    float _2034 = _2032 * _2027;
    float _2035 = _2032 * _2028;
    float _2036 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_1872].xyz));
    float _4117 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _2040 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2041 = dot(vec3(_667, _668, _669), vec3(_2033, _2034, _2035));
    float _4139 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2045 = dot(vec3(cbLight._m0[_1872].xyz), vec3(_2033, _2034, _2035));
    float _4150 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2049 = _2025 * _2025;
    float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
    float _2064 = (exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2065 = 1.0 - _2025;
    float _2076 = (0.5 / (((_2040 * ((_2039 * _2065) + _2025)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2065) + _2025) * _2039))) * _2039;
    float _4161 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2078 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
    uint _2092 = _1872 + 9u;
    float _2103 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1912].w)) * _670) * 0.949999988079071044921875);
    float _2104 = _2103 * _2103;
    float _2105 = cbLight._m0[_1912].x + _747;
    float _2106 = cbLight._m0[_1912].y + _748;
    float _2107 = cbLight._m0[_1912].z + _749;
    float _2111 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
    float _2112 = _2111 * _2105;
    float _2113 = _2111 * _2106;
    float _2114 = _2111 * _2107;
    float _2115 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_1912].xyz));
    float _4172 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2119 = dot(vec3(_667, _668, _669), vec3(_2112, _2113, _2114));
    float _4183 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2123 = dot(vec3(cbLight._m0[_1912].xyz), vec3(_2112, _2113, _2114));
    float _4194 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2127 = _2104 * _2104;
    float _2131 = ((_2122 * _2122) * (_2127 + (-1.0))) + 1.0;
    float _2140 = (exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2141 = 1.0 - _2104;
    float _2151 = (0.5 / (((_2040 * ((_2118 * _2141) + _2104)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2141) + _2104) * _2118))) * _2118;
    float _4205 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2153 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2127 / ((_2131 * _2131) * 3.141590118408203125));
    float _2163 = (((_2140 * cbLight._m0[_2092].x) * _2153) * _1895) + ((((cbLight._m0[_2011].x * _1864) * _2064) * _2078) * _1908);
    float _2164 = (((_2140 * cbLight._m0[_2092].y) * _2153) * _1895) + ((((cbLight._m0[_2011].y * _1865) * _2064) * _2078) * _1908);
    float _2165 = (((_2140 * cbLight._m0[_2092].z) * _2153) * _1895) + ((((cbLight._m0[_2011].z * _1866) * _2064) * _2078) * _1908);
    float _2227;
    float _2229;
    float _2231;
    if (_1948)
    {
        _2227 = _2163;
        _2229 = _2164;
        _2231 = _2165;
    }
    else
    {
        uint _2233 = _1872 + 2u;
        uint _2237 = _1872 + 10u;
        float _2251 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _670) * 0.949999988079071044921875);
        float _2252 = _2251 * _2251;
        float _2253 = cbLight._m0[_2233].x + _747;
        float _2254 = cbLight._m0[_2233].y + _748;
        float _2255 = cbLight._m0[_2233].z + _749;
        float _2259 = inversesqrt(dot(vec3(_2253, _2254, _2255), vec3(_2253, _2254, _2255)));
        float _2260 = _2259 * _2253;
        float _2261 = _2259 * _2254;
        float _2262 = _2259 * _2255;
        float _2263 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_2233].xyz));
        float _4216 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2266 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2267 = dot(vec3(_667, _668, _669), vec3(_2260, _2261, _2262));
        float _4227 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2271 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2260, _2261, _2262));
        float _4238 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2275 = _2252 * _2252;
        float _2279 = ((_2270 * _2270) * (_2275 + (-1.0))) + 1.0;
        float _2288 = (exp2(log2(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2289 = 1.0 - _2252;
        float _2299 = (0.5 / (((_2040 * ((_2266 * _2289) + _2252)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2289) + _2252) * _2266))) * _2266;
        float _4249 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2301 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2275 / ((_2279 * _2279) * 3.141590118408203125));
        float _2302 = isnan(1.0) ? _1887 : (isnan(_1887) ? 1.0 : min(_1887, 1.0));
        _2227 = (((_2288 * cbLight._m0[_2237].x) * _2301) * _2302) + _2163;
        _2229 = (((_2288 * cbLight._m0[_2237].y) * _2301) * _2302) + _2164;
        _2231 = (((_2288 * cbLight._m0[_2237].z) * _2301) * _2302) + _2165;
    }
    float _2337;
    float _2339;
    float _2341;
    if (_1966)
    {
        _2337 = _2227;
        _2339 = _2229;
        _2341 = _2231;
    }
    else
    {
        uint _2348 = _1872 + 3u;
        uint _2352 = _1872 + 11u;
        float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2348].w)) * _670) * 0.949999988079071044921875);
        float _2367 = _2366 * _2366;
        float _2368 = cbLight._m0[_2348].x + _747;
        float _2369 = cbLight._m0[_2348].y + _748;
        float _2370 = cbLight._m0[_2348].z + _749;
        float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
        float _2375 = _2374 * _2368;
        float _2376 = _2374 * _2369;
        float _2377 = _2374 * _2370;
        float _2378 = dot(vec3(_667, _668, _669), vec3(cbLight._m0[_2348].xyz));
        float _4265 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2381 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2382 = dot(vec3(_667, _668, _669), vec3(_2375, _2376, _2377));
        float _4276 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2386 = dot(vec3(cbLight._m0[_2348].xyz), vec3(_2375, _2376, _2377));
        float _4287 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2390 = _2367 * _2367;
        float _2394 = ((_2385 * _2385) * (_2390 + (-1.0))) + 1.0;
        float _2403 = (exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2404 = 1.0 - _2367;
        float _2414 = (0.5 / (((_2040 * ((_2381 * _2404) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2040 * _2404) + _2367) * _2381))) * _2381;
        float _4298 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2416 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2390 / ((_2394 * _2394) * 3.141590118408203125));
        float _2417 = isnan(1.0) ? _1888 : (isnan(_1888) ? 1.0 : min(_1888, 1.0));
        _2337 = (((_2403 * cbLight._m0[_2352].x) * _2416) * _2417) + _2227;
        _2339 = (((_2403 * cbLight._m0[_2352].y) * _2416) * _2417) + _2229;
        _2341 = (((_2403 * cbLight._m0[_2352].z) * _2416) * _2417) + _2231;
    }
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    if (_1870.y == 0u)
    {
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2492;
        float _2494 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2492;
        float _2495 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2492;
        uvec4 _2507 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2508 = _2507.x;
        uint _2519 = uint((float(_2507.y) * floor(float(uint(cbSceneParam._m0[85u].y * _756) / _2508))) + floor(float(uint(cbSceneParam._m0[85u].x * _755) / _2508)));
        float _2529 = (log2(_2495 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2530 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        uint _2533 = uint(isnan(14.0) ? _2530 : (isnan(_2530) ? 14.0 : min(_2530, 14.0)));
        uvec4 _2538 = texelFetch(g_lightClusterGridBuffer, int(((_2533 << 2u) + (_2519 << 6u)) >> 2u));
        uint _2539 = _2538.x;
        uint _2540 = _2507.z;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        if (((((1u << ((_2540 >> 4u) & 15u)) + 4294967295u) & _2539) == 0u) || ((_2540 & 240u) == 0u))
        {
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
        }
        else
        {
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2785 = 0.0;
            float _2786 = 0.0;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            uint _2791 = 0u;
            uint _2800;
            bool _2801;
            for (;;)
            {
                _2800 = texelFetch(g_lightClassification, int((((_2533 << 5u) + (_2519 << 9u)) + (_2791 << 2u)) >> 2u)).x;
                _2801 = _2800 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2801)
                {
                    frontier_phi_61_pred = _2785;
                    frontier_phi_61_pred_1 = _2790;
                    frontier_phi_61_pred_2 = _2789;
                    frontier_phi_61_pred_3 = _2788;
                    frontier_phi_61_pred_4 = _2787;
                    frontier_phi_61_pred_5 = _2786;
                }
                else
                {
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    uint _2915;
                    _2909 = _2785;
                    _2910 = _2786;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2800;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    for (;;)
                    {
                        uint _2919 = uint(findLSB(_2915)) + (_2791 << 5u);
                        uint _2916 = (_2915 + 4294967295u) & _2915;
                        uint _2921 = _2919 * 48u;
                        vec4 _2935 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2921)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2921 + 3u)).x));
                        uint _2941 = (_2919 * 48u) + 4u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2941)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2941 + 3u)).x));
                        uint _2960 = (_2919 * 48u) + 8u;
                        vec3 _2971 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x));
                        float _2975 = _2935.x - _2493;
                        float _2976 = _2935.y - _2494;
                        float _2977 = _2935.z - _2495;
                        float _2978 = dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977));
                        float _2981 = inversesqrt(_2978);
                        float _2982 = _2981 * _2975;
                        float _2983 = _2981 * _2976;
                        float _2984 = _2981 * _2977;
                        float _2985 = dot(vec3(_774, _777, _780), vec3(_2982, _2983, _2984));
                        float _2990 = 1.0 - (_2978 * _2935.w);
                        float _4324 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2991 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _2992 = sqrt(_2978) * _2954.w;
                        float _2995 = 1.39999997615814208984375 / (_2992 + 1.39999997615814208984375);
                        float _2996 = _2995 * _2995;
                        float _2999 = ((1.0 - _2996) * _2985) + _2996;
                        float _3002 = _2992 * _2992;
                        float _3006 = ((isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0))) * _2991) / ((_3002 * 0.699999988079071044921875) + 1.0);
                        float _3010 = (-0.0) - _2493;
                        float _3011 = (-0.0) - _2494;
                        float _3012 = (-0.0) - _2495;
                        float _3016 = inversesqrt(dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012)));
                        float _3017 = _3016 * _3010;
                        float _3018 = _3016 * _3011;
                        float _3019 = _3016 * _3012;
                        float _3027 = exp2(log2(1.0 / ((_3002 * 3.5) + 5.0)) * 0.25);
                        float _3028 = 1.0 - _834;
                        float _3035 = sqrt(1.0 - ((1.0 - (_3028 * _3028)) * (1.0 - (_3027 * _3027))));
                        float _3036 = _3035 * _3035;
                        float _3037 = _3036 * _3036;
                        float _3038 = _3017 + _2982;
                        float _3039 = _3018 + _2983;
                        float _3040 = _3019 + _2984;
                        float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
                        float _3048 = dot(vec3(_774, _777, _780), vec3(_3017, _3018, _3019));
                        float _4340 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3051 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3052 = dot(vec3(_774, _777, _780), vec3(_3044 * _3038, _3044 * _3039, _3044 * _3040));
                        float _4351 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3055 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _3059 = ((_3055 * _3055) * (_3037 + (-1.0))) + 1.0;
                        float _3060 = _2995 * _3036;
                        float _3061 = _3060 * _3060;
                        float _3064 = ((1.0 - _3061) * _2985) + _3061;
                        float _4362 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3065 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _3066 = 1.0 - _3036;
                        float _3076 = (0.5 / (((_3065 * ((_3051 * _3066) + _3036)) + 9.9999999392252902907785028219223e-09) + (((_3065 * _3066) + _3036) * _3051))) * _3065;
                        float _4373 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3087 = (((_3037 * 3.1415927410125732421875) * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) / ((_3059 * _3059) * ((_3002 * 2.1991131305694580078125) + 3.141590118408203125))) * _2991;
                        _2844 = (_3006 * _2954.x) + _2912;
                        _2845 = (_3006 * _2954.y) + _2913;
                        _2846 = (_3006 * _2954.z) + _2914;
                        _2841 = (_3087 * _2971.x) + _2909;
                        _2842 = (_3087 * _2971.y) + _2910;
                        _2843 = (_3087 * _2971.z) + _2911;
                        if (_2916 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2909 = _2841;
                            _2910 = _2842;
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2916;
                        }
                    }
                    frontier_phi_61_pred = _2841;
                    frontier_phi_61_pred_1 = _2846;
                    frontier_phi_61_pred_2 = _2845;
                    frontier_phi_61_pred_3 = _2844;
                    frontier_phi_61_pred_4 = _2843;
                    frontier_phi_61_pred_5 = _2842;
                }
                _2641 = frontier_phi_61_pred;
                _2651 = frontier_phi_61_pred_1;
                _2649 = frontier_phi_61_pred_2;
                _2647 = frontier_phi_61_pred_3;
                _2645 = frontier_phi_61_pred_4;
                _2643 = frontier_phi_61_pred_5;
                uint _2792 = _2791 + 1u;
                if (_2792 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2785 = _2641;
                    _2786 = _2643;
                    _2787 = _2645;
                    _2788 = _2647;
                    _2789 = _2649;
                    _2790 = _2651;
                    _2791 = _2792;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
        }
        uvec4 _2654 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2655 = _2654.z;
        uint _2657 = (_2655 >> 8u) & 15u;
        float _2753;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        if (((4294967295u << _2657) & _2539) == 0u)
        {
            _2753 = _2640;
            _2755 = _2642;
            _2757 = _2644;
            _2759 = _2646;
            _2761 = _2648;
            _2763 = _2650;
        }
        else
        {
            float _2778 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
            float _2779 = _2778 * _2493;
            float _2780 = _2778 * _2494;
            float _2781 = _2778 * _2495;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2657 < ((_2655 >> 12u) & 15u))
            {
                float _2754;
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2892 = _2640;
                float _2893 = _2642;
                float _2894 = _2644;
                float _2895 = _2646;
                float _2896 = _2648;
                float _2897 = _2650;
                uint _2898 = _2657;
                uint _2907;
                bool _2908;
                for (;;)
                {
                    _2907 = texelFetch(g_lightClassification, int((((_2533 << 5u) + (_2519 << 9u)) + (_2898 << 2u)) >> 2u)).x;
                    _2908 = _2907 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2908)
                    {
                        frontier_phi_67_pred = _2895;
                        frontier_phi_67_pred_1 = _2896;
                        frontier_phi_67_pred_2 = _2897;
                        frontier_phi_67_pred_3 = _2894;
                        frontier_phi_67_pred_4 = _2893;
                        frontier_phi_67_pred_5 = _2892;
                    }
                    else
                    {
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3105 = _2892;
                        float _3106 = _2893;
                        float _3107 = _2894;
                        float _3108 = _2895;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        uint _3111 = _2907;
                        uint _3112;
                        vec4 _3137;
                        float _3138;
                        vec4 _3153;
                        vec3 _3165;
                        vec4 _3180;
                        vec4 _3195;
                        float _3241;
                        bool _3242;
                        for (;;)
                        {
                            uint _3122 = ((_2898 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3111));
                            _3112 = (_3111 + 4294967295u) & _3111;
                            uint _3124 = _3122 * 40u;
                            _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3138 = _3137.w;
                            uint _3140 = (_3122 * 40u) + 4u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3122 * 40u) + 8u;
                            _3165 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x));
                            uint _3167 = (_3122 * 40u) + 16u;
                            _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            uint _3182 = (_3122 * 40u) + 20u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3197 = (_3122 * 40u) + 24u;
                            vec4 _3210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3197 + 3u)).x));
                            uint _3216 = (_3122 * 40u) + 28u;
                            vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3241 = fma(_2495, _3229.z, fma(_2494, _3229.y, _3229.x * _2493)) + _3229.w;
                            _3242 = !((fma(_2495, _3210.z, fma(_2494, _3210.y, _3210.x * _2493)) + _3210.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3242)
                            {
                                float _3269 = _3137.x - _2493;
                                float _3270 = _3137.y - _2494;
                                float _3271 = _3137.z - _2495;
                                float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                                float _3275 = inversesqrt(_3272);
                                float _3276 = _3275 * _3269;
                                float _3277 = _3275 * _3270;
                                float _3278 = _3275 * _3271;
                                float _3282 = 1.0 - (_3272 / (_3138 * _3138));
                                float _4384 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3287 = sqrt(_3272) * _3153.w;
                                float _3289 = 1.39999997615814208984375 / (_3287 + 1.39999997615814208984375);
                                float _3290 = _3289 * _3289;
                                float _3293 = ((1.0 - _3290) * dot(vec3(_3276, _3277, _3278), vec3(_774, _777, _780))) + _3290;
                                float _3296 = _3287 * _3287;
                                float _3300 = (fma(_2495, _3180.z, fma(_2494, _3180.y, _3180.x * _2493)) + _3180.w) / _3241;
                                float _3301 = (fma(_2495, _3195.z, fma(_2494, _3195.y, _3195.x * _2493)) + _3195.w) / _3241;
                                float _3305 = 1.0 - dot(vec2(_3300, _3301), vec2(_3300, _3301));
                                float _4400 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3306 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3307 = _3306 * (((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3283) / ((_3296 * 0.699999988079071044921875) + 1.0));
                                float _3319 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                                float _3320 = 1.0 - _834;
                                float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                                float _3328 = _3327 * _3327;
                                float _3329 = _3328 * _3328;
                                float _3330 = _3276 - _2779;
                                float _3331 = _3277 - _2780;
                                float _3332 = _3278 - _2781;
                                float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                                float _3340 = dot(vec3(_774, _777, _780), vec3((-0.0) - _2779, (-0.0) - _2780, (-0.0) - _2781));
                                float _4411 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3344 = dot(vec3(_774, _777, _780), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                                float _4422 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                                float _3352 = _3289 * _3328;
                                float _3353 = _3352 * _3352;
                                float _3359 = ((1.0 - _3353) * dot(vec3(_774, _777, _780), vec3(_3276, _3277, _3278))) + _3353;
                                float _4433 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                                float _3360 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3361 = 1.0 - _3328;
                                float _3371 = (0.5 / (((_3360 * ((_3343 * _3361) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3360 * _3361) + _3328) * _3343))) * _3360;
                                float _4444 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3381 = (_3306 * _3283) * (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) / ((_3351 * _3351) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3381 * _3165.x;
                                frontier_phi_73_pred_1 = _3381 * _3165.y;
                                frontier_phi_73_pred_2 = _3307 * _3153.z;
                                frontier_phi_73_pred_3 = _3307 * _3153.y;
                                frontier_phi_73_pred_4 = _3307 * _3153.x;
                                frontier_phi_73_pred_5 = _3381 * _3165.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3385 = frontier_phi_73_pred;
                            _3386 = frontier_phi_73_pred_1;
                            _3390 = frontier_phi_73_pred_2;
                            _3389 = frontier_phi_73_pred_3;
                            _3388 = frontier_phi_73_pred_4;
                            _3387 = frontier_phi_73_pred_5;
                            _3095 = _3388 + _3108;
                            _3096 = _3389 + _3109;
                            _3097 = _3390 + _3110;
                            _3092 = _3385 + _3105;
                            _3093 = _3386 + _3106;
                            _3094 = _3387 + _3107;
                            if (_3112 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3112;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3095;
                        frontier_phi_67_pred_1 = _3096;
                        frontier_phi_67_pred_2 = _3097;
                        frontier_phi_67_pred_3 = _3094;
                        frontier_phi_67_pred_4 = _3093;
                        frontier_phi_67_pred_5 = _3092;
                    }
                    _2760 = frontier_phi_67_pred;
                    _2762 = frontier_phi_67_pred_1;
                    _2764 = frontier_phi_67_pred_2;
                    _2758 = frontier_phi_67_pred_3;
                    _2756 = frontier_phi_67_pred_4;
                    _2754 = frontier_phi_67_pred_5;
                    uint _2899 = _2898 + 1u;
                    if (_2899 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2892 = _2754;
                        _2893 = _2756;
                        _2894 = _2758;
                        _2895 = _2760;
                        _2896 = _2762;
                        _2897 = _2764;
                        _2898 = _2899;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2762;
                frontier_phi_55_56_ladder_1 = _2764;
                frontier_phi_55_56_ladder_2 = _2760;
                frontier_phi_55_56_ladder_3 = _2758;
                frontier_phi_55_56_ladder_4 = _2756;
                frontier_phi_55_56_ladder_5 = _2754;
            }
            else
            {
                frontier_phi_55_56_ladder = _2648;
                frontier_phi_55_56_ladder_1 = _2650;
                frontier_phi_55_56_ladder_2 = _2646;
                frontier_phi_55_56_ladder_3 = _2644;
                frontier_phi_55_56_ladder_4 = _2642;
                frontier_phi_55_56_ladder_5 = _2640;
            }
            _2753 = frontier_phi_55_56_ladder_5;
            _2755 = frontier_phi_55_56_ladder_4;
            _2757 = frontier_phi_55_56_ladder_3;
            _2759 = frontier_phi_55_56_ladder_2;
            _2761 = frontier_phi_55_56_ladder;
            _2763 = frontier_phi_55_56_ladder_1;
        }
        float _2768 = isnan(1.0) ? _818 : (isnan(_818) ? 1.0 : min(_818, 1.0));
        _2552 = (_2768 * _2759) + _2004;
        _2554 = (_2768 * _2761) + _2006;
        _2556 = (_2768 * _2763) + _2008;
        _2558 = ((_2753 * 0.039999999105930328369140625) * _2768) + _2337;
        _2560 = ((_2755 * 0.039999999105930328369140625) * _2768) + _2339;
        _2562 = ((_2757 * 0.039999999105930328369140625) * _2768) + _2341;
    }
    else
    {
        _2552 = _2004;
        _2554 = _2006;
        _2556 = _2008;
        _2558 = _2337;
        _2560 = _2339;
        _2562 = _2341;
    }
    float _4460 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _4471 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _4482 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    uint _2582 = _260 + 6u;
    float _2590 = _755 / cbSceneParam._m0[86u].x;
    float _2591 = _756 / cbSceneParam._m0[86u].y;
    vec4 _2605 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, (log2((isnan(cbSceneParam._m0[77u].w) ? _688 : (isnan(_688) ? cbSceneParam._m0[77u].w : min(_688, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2607 = _2605.x;
    float _2608 = _2605.y;
    float _2609 = _2605.z;
    float _2610 = _2605.w;
    float _2703;
    float _2705;
    float _2707;
    float _2709;
    if (_688 > cbSceneParam._m0[78u].w)
    {
        float _2665 = isnan(_688) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _688 : min(cbSceneParam._m0[80u].w, _688));
        float _2666 = _2665 / _688;
        float _2677 = _2666 * _740;
        float _2678 = _741 * _2666;
        float _2679 = (-0.0) - _2678;
        float _2681 = _2666 * _742;
        float _2683 = (cbSceneParam._m0[77u].w * _2679) / _2665;
        float _2684 = _2683 + cbSceneParam._m0[79u].w;
        float _2685 = cbSceneParam._m0[79u].w - _2678;
        float _2691 = sqrt(((_2677 * _2677) + (_2678 * _2678)) + (_2681 * _2681));
        float _2694 = (1.0 - (cbSceneParam._m0[77u].w / _2665)) * _2691;
        float _2699 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2701 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2854;
        if (abs((_2679 - _2683) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2854 = ((((_2684 > 0.0) ? exp2(_2699 * _2684) : (2.0 - exp2(_2701 * _2684))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2694;
        }
        else
        {
            float _2814 = 1.0 / cbSceneParam._m0[80u].x;
            float _2815 = isnan(_2685) ? _2684 : (isnan(_2684) ? _2685 : max(_2684, _2685));
            float _2816 = isnan(_2685) ? _2684 : (isnan(_2684) ? _2685 : min(_2684, _2685));
            float _2825 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : min(_2815, 0.0));
            float _2826 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : min(_2816, 0.0));
            _2854 = ((abs(_2691 / _2679) * cbSceneParam._m0[80u].y) * ((((_2825 - _2826) * 2.0) - ((exp2(_2699 * (isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0)))) - exp2(_2699 * (isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))))) * _2814)) - ((exp2(_2701 * _2825) - exp2(_2701 * _2826)) * _2814))) + (_2694 * cbSceneParam._m0[80u].z);
        }
        vec4 _2856 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2590, _2591, 1.0), 0.0);
        float _2865 = exp2((_2854 * (-1.44269502162933349609375)) * (1.0 - _2856.w));
        float _2866 = log2(_2865);
        float _2882 = log2(_2610);
        _2703 = (exp2(_2882 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].x)) * _2856.x) / cbSceneParam._m0[78u].x)) + _2607;
        _2705 = (exp2(_2882 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].y)) * _2856.y) / cbSceneParam._m0[78u].y)) + _2608;
        _2707 = (exp2(_2882 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2866 * cbSceneParam._m0[78u].z)) * _2856.z) / cbSceneParam._m0[78u].z)) + _2609;
        _2709 = _2865 * _2610;
    }
    else
    {
        _2703 = _2607;
        _2705 = _2608;
        _2707 = _2609;
        _2709 = _2610;
    }
    float _2721 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2722 = _2721 == 3.0;
    float _2723 = log2(_2709);
    float _2730 = exp2(_2723 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2552 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _818))) + ((_2558 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1623)) * cbPerFrame._m0[3u].x));
    float _2731 = exp2(_2723 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2554 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _818))) + ((_2560 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1623)) * cbPerFrame._m0[3u].x));
    float _2732 = exp2(_2723 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2556 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _818))) + ((_2562 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1623)) * cbPerFrame._m0[3u].x));
    float _2741 = (_2721 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2741 * (_2722 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2703)));
    SV_Target.y = _2741 * (_2722 ? _2731 : (_2731 + (cbSceneParam._m0[72u].w * _2705)));
    SV_Target.z = _2741 * (_2722 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.w = cbInstanceData._m0[_2582].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2582].w;
}


