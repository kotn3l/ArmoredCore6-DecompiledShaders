#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1171;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _354 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _354) * cbMtdParam._m0[24u].x) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3501 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _379 = (_372 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _380 = (_372 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _381 = (_372 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _256) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _257) + cbTextureTilingScale._m0[20u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    float _456 = ((_426.z - _447) * _372) + _447;
    float _459 = ((((_426.x - _445) * _372) + _445) * 2.0) + (-1.0);
    float _460 = ((((_426.y - _446) * _372) + _446) * 2.0) + (-1.0);
    float _461 = dot(vec2(_459, _460), vec2(_459, _460));
    float _3512 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _466 = sqrt(1.0 - (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _498 = (_459 + ((((_399.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_486.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _499 = (_460 + ((((_399.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_486.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _502 = fma(_466, _224, fma(_499, _231, _498 * _217));
    float _505 = fma(_466, _225, fma(_499, _232, _498 * _218));
    float _508 = fma(_466, _226, fma(_499, _233, _498 * _219));
    float _512 = inversesqrt(dot(vec3(_502, _505, _508), vec3(_502, _505, _508)));
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _543 = _541.x;
    float _544 = 1.0 - _543;
    float _548 = ((_543 - _544) * cbMtdParam._m0[24u].z) + _544;
    float _550 = (cbMtdParam._m0[19u].x + dot(vec4(_512 * _502, _512 * _505, _512 * _508, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_548 * cbMtdParam._m0[21u].z);
    float _3523 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _566 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_548 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3534 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    float _571 = ((_551 * (cbMtdParam._m0[17u].x - _379)) * _567) + _379;
    float _572 = ((_551 * (cbMtdParam._m0[17u].y - _380)) * _567) + _380;
    float _573 = ((_551 * (cbMtdParam._m0[17u].z - _381)) * _567) + _381;
    float _578 = (((_399.z - _456) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _456;
    float _582 = ((_486.z - _578) * cbMtdParam._m0[19u].w) + _578;
    vec4 _595 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _602 = (_595.x * 2.0) + (-1.0);
    float _603 = (_595.y * 2.0) + (-1.0);
    float _604 = dot(vec2(_602, _603), vec2(_602, _603));
    float _3545 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _613 = (((_595.z - _582) * _551) * _567) + _582;
    float _628 = (((cbMtdParam._m0[21u].x * _498) + ((_602 - _498) * _551)) * _567) + _498;
    float _629 = (((cbMtdParam._m0[21u].x * _499) + ((_603 - _499) * _551)) * _567) + _499;
    float _630 = (((sqrt(1.0 - (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) - _466) * _551) * _567) + _466;
    float _635 = cbMtdParam._m0[22u].x + _486.w;
    float _638 = fma(_630, _224, fma(_629, _231, _628 * _217));
    float _641 = fma(_630, _225, fma(_629, _232, _628 * _218));
    float _644 = fma(_630, _226, fma(_629, _233, _628 * _219));
    float _648 = inversesqrt(dot(vec3(_638, _641, _644), vec3(_638, _641, _644)));
    float _649 = _648 * _638;
    float _650 = _648 * _641;
    float _651 = _648 * _644;
    float _3556 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _652 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _3578 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3589 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _3600 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _670 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _722 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _712);
    float _723 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _712);
    float _724 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _712);
    float _728 = inversesqrt(dot(vec3(_722, _723, _724), vec3(_722, _723, _724)));
    float _729 = _722 * _728;
    float _730 = _723 * _728;
    float _731 = _724 * _728;
    float _737 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _738 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _756 = fma(_651, cbSceneParam._m0[5u].z, fma(_650, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _649));
    float _759 = fma(_651, cbSceneParam._m0[6u].z, fma(_650, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _649));
    float _762 = fma(_651, cbSceneParam._m0[7u].z, fma(_650, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _649));
    uint _776 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _782 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * cbInstanceData._m0[_776].x;
    float _783 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * cbInstanceData._m0[_776].y;
    float _784 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_776].z;
    float _3611 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _3633 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    vec4 _796 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _737, cbSceneParam._m0[86u].y * _738));
    float _800 = ((isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * TEXCOORD_5.w) * _796.x;
    float _801 = dot(vec3(_649, _650, _651), vec3(_729, _730, _731));
    float _804 = _801 * 2.0;
    float _808 = (_804 * _649) - _729;
    float _809 = (_804 * _650) - _730;
    float _810 = (_804 * _651) - _731;
    float _814 = abs(dot(vec3(_729, _730, _731), vec3(_649, _650, _651)));
    float _3644 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _816 = sqrt(_652);
    float _829 = exp2((_816 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_816 * 3.0));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1170;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _895 = fma(_869, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861));
        float _899 = fma(_869, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861));
        float _903 = fma(_869, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861));
        float _928 = _861 + _649;
        float _929 = _865 + _650;
        float _930 = _869 + _651;
        float _940 = fma(_930, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928)) - _895;
        float _941 = fma(_930, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928)) - _899;
        float _942 = fma(_930, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928)) - _903;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_895 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_899 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[34u].z) + ((((((_903 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _998 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_964.x + (-0.5));
        float _1000 = _998 * (_964.y + (-0.5));
        float _1001 = _998 * (_964.z + (-0.5));
        float _1008 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_971.x + (-0.5));
        float _1010 = _1008 * (_971.y + (-0.5));
        float _1011 = _1008 * (_971.z + (-0.5));
        float _1018 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_978.x + (-0.5));
        float _1020 = _1018 * (_978.y + (-0.5));
        float _1021 = _1018 * (_978.z + (-0.5));
        float _1028 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_985.x + (-0.5));
        float _1030 = _1028 * (_985.y + (-0.5));
        float _1031 = _1028 * (_985.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1052 = (dot(vec3(_649, _650, _651), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1062 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3692 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1064 + 1.0))) + _1069) * _1032;
        float _1079 = _1000 * 0.5;
        float _1080 = _1010 * 0.5;
        float _1081 = _1020 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_649, _650, _651), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3725 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1106 + 1.0))) + _1111) * _1033;
        float _1121 = _1001 * 0.5;
        float _1122 = _1011 * 0.5;
        float _1123 = _1021 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_649, _650, _651), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3758 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1148 + 1.0))) + _1153) * _1034;
        _1170 = _1001;
        _1172 = _1000;
        _1173 = _999;
        _1174 = _1011;
        _1175 = _1010;
        _1176 = _1009;
        _1177 = _1021;
        _1178 = _1020;
        _1179 = _1019;
        _1180 = _1034;
        _1181 = _1033;
        _1182 = _1032;
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _1171;
        _1172 = _1171;
        _1173 = _1171;
        _1174 = _1171;
        _1175 = _1171;
        _1176 = _1171;
        _1177 = _1171;
        _1178 = _1171;
        _1179 = _1171;
        _1180 = _1171;
        _1181 = _1171;
        _1182 = _1171;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1210 = fma(_869, cbModelParam._m0[30u].z, fma(_865, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861));
        float _1214 = fma(_869, cbModelParam._m0[31u].z, fma(_865, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861));
        float _1218 = fma(_869, cbModelParam._m0[32u].z, fma(_865, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861));
        float _1241 = _861 + _649;
        float _1242 = _865 + _650;
        float _1243 = _869 + _651;
        float _1253 = fma(_1243, cbModelParam._m0[30u].z, fma(_1242, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1241)) - _1210;
        float _1254 = fma(_1243, cbModelParam._m0[31u].z, fma(_1242, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1241)) - _1214;
        float _1255 = fma(_1243, cbModelParam._m0[32u].z, fma(_1242, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1241)) - _1218;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1210 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1214 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[35u].z) + ((((((_1218 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1309 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1276.x + (-0.5));
        float _1311 = _1309 * (_1276.y + (-0.5));
        float _1312 = _1309 * (_1276.z + (-0.5));
        float _1319 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1283.x + (-0.5));
        float _1321 = _1319 * (_1283.y + (-0.5));
        float _1322 = _1319 * (_1283.z + (-0.5));
        float _1329 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1290.x + (-0.5));
        float _1331 = _1329 * (_1290.y + (-0.5));
        float _1332 = _1329 * (_1290.z + (-0.5));
        float _1339 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1297.x + (-0.5));
        float _1341 = _1339 * (_1297.y + (-0.5));
        float _1342 = _1339 * (_1297.z + (-0.5));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = _1310 * 0.5;
        float _1347 = _1320 * 0.5;
        float _1348 = _1330 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_649, _650, _651), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3799 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3810 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3821 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * (_1373 + 1.0))) + _1378) * _1343;
        float _1388 = _1311 * 0.5;
        float _1389 = _1321 * 0.5;
        float _1390 = _1331 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_649, _650, _651), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3854 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1415 + 1.0))) + _1420) * _1344;
        float _1430 = _1312 * 0.5;
        float _1431 = _1322 * 0.5;
        float _1432 = _1332 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_649, _650, _651), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _3887 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1457 + 1.0))) + _1462) * _1345;
        _1479 = _1312;
        _1480 = _1311;
        _1481 = _1310;
        _1482 = _1322;
        _1483 = _1321;
        _1484 = _1320;
        _1485 = _1332;
        _1486 = _1331;
        _1487 = _1330;
        _1488 = _1345;
        _1489 = _1344;
        _1490 = _1343;
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1171;
        _1480 = _1171;
        _1481 = _1171;
        _1482 = _1171;
        _1483 = _1171;
        _1484 = _1171;
        _1485 = _1171;
        _1486 = _1171;
        _1487 = _1171;
        _1488 = _1171;
        _1489 = _1171;
        _1490 = _1171;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1183)) + _1183;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1184)) + _1184;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1185)) + _1185;
    float _1526 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1503));
    float _1547 = _808 * 0.5;
    float _1548 = _809 * 0.5;
    float _1549 = _810 * 0.5;
    float _1550 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1553 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1556 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1590;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1563 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1170, _1174, _1177, _1180));
        float _1567 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1571 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1578 = dot(vec4(cbModelParam._m0[39u]), vec4(_1547, _1548, _1549, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1601;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1592 = dot(vec4(cbModelParam._m0[40u]), vec4(_1547, _1548, _1549, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1592) ? 0.0 : (isnan(0.0) ? _1592 : max(0.0, _1592))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1605 = (_1601 * cbModelParam._m0[1u].x) + (_1590 * (1.0 - cbModelParam._m0[1u].x));
    float _1615 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _652);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1615 : min(cbModelParam._m0[25u].z, _1615));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1664 = fma(_869, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861)) + cbModelParam._m0[13u].w;
        float _1668 = fma(_869, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861)) + cbModelParam._m0[14u].w;
        float _1672 = fma(_869, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861)) + cbModelParam._m0[15u].w;
        float _1675 = fma(_810, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _808));
        float _1678 = fma(_810, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _808));
        float _1681 = fma(_810, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _808));
        float _1709;
        if (_1675 > 0.0)
        {
            _1709 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1709 = frontier_phi_14_12_ladder;
        }
        float _1931;
        if (_1678 > 0.0)
        {
            _1931 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1931 = frontier_phi_23_19_ladder;
        }
        float _2177;
        if (_1681 > 0.0)
        {
            _2177 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2177 = frontier_phi_35_30_ladder;
        }
        float _2179 = isnan(_1931) ? _1709 : (isnan(_1709) ? _1931 : min(_1709, _1931));
        float _2180 = isnan(_2177) ? _2179 : (isnan(_2179) ? _2177 : min(_2179, _2177));
        float _2184 = (_2180 * _1675) + _1664;
        float _2185 = (_2180 * _1678) + _1668;
        float _2186 = (_2180 * _1681) + _1672;
        float _2187 = _2180 * 9.9999997473787516355514526367188e-05;
        float _2189 = (-1.0) - _2187;
        float _2191 = _2187 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2186 > _2191) || ((_2186 < _2189) || ((_2185 > _2191) || ((_2185 < _2189) || ((_2184 < _2189) || (_2184 > _2191))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2310 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2186, cbModelParam._m0[9u].z, fma(_2185, cbModelParam._m0[9u].y, _2184 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2186, cbModelParam._m0[10u].z, fma(_2185, cbModelParam._m0[10u].y, _2184 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2186, cbModelParam._m0[11u].z, fma(_2185, cbModelParam._m0[11u].y, _2184 * cbModelParam._m0[11u].x))), _1616);
            frontier_phi_13_35_ladder = _2310.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2310.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2310.x * cbModelParam._m0[1u].y;
        }
        _1697 = frontier_phi_13_35_ladder_2;
        _1699 = frontier_phi_13_35_ladder_1;
        _1701 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_808, _809, _810), _1616);
        _1697 = _1685.x * cbModelParam._m0[1u].y;
        _1699 = _1685.y * cbModelParam._m0[1u].y;
        _1701 = _1685.z * cbModelParam._m0[1u].y;
    }
    float _1705 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _652);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1705 : min(cbModelParam._m0[25u].w, _1705));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1760 = fma(_869, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861)) + cbModelParam._m0[21u].w;
        float _1764 = fma(_869, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861)) + cbModelParam._m0[22u].w;
        float _1768 = fma(_869, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861)) + cbModelParam._m0[23u].w;
        float _1771 = fma(_810, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _808));
        float _1774 = fma(_810, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _808));
        float _1777 = fma(_810, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _808));
        float _1936;
        if (_1771 > 0.0)
        {
            _1936 = abs((1.0 - _1760) / _1771);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1760 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1936 = frontier_phi_25_21_ladder;
        }
        float _2204;
        if (_1774 > 0.0)
        {
            _2204 = abs((1.0 - _1764) / _1774);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1764 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2204 = frontier_phi_37_32_ladder;
        }
        float _2409;
        if (_1777 > 0.0)
        {
            _2409 = abs((1.0 - _1768) / _1777);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1768 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2409 = frontier_phi_46_43_ladder;
        }
        float _2411 = isnan(_2204) ? _1936 : (isnan(_1936) ? _2204 : min(_1936, _2204));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1771) + _1760;
        float _2417 = (_2412 * _1774) + _1764;
        float _2418 = (_2412 * _1777) + _1768;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2419;
        float _2422 = _2419 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2418 > _2422) || ((_2418 < _2420) || ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 < _2420) || (_2416 > _2422))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2418, cbModelParam._m0[17u].z, fma(_2417, cbModelParam._m0[17u].y, _2416 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2418, cbModelParam._m0[18u].z, fma(_2417, cbModelParam._m0[18u].y, _2416 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2418, cbModelParam._m0[19u].z, fma(_2417, cbModelParam._m0[19u].y, _2416 * cbModelParam._m0[19u].x))), _1706);
            frontier_phi_22_46_ladder = _2617.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2617.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2617.x * cbModelParam._m0[1u].z;
        }
        _1796 = frontier_phi_22_46_ladder_2;
        _1798 = frontier_phi_22_46_ladder_1;
        _1800 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_808, _809, _810), _1706);
        _1796 = _1780.x * cbModelParam._m0[1u].z;
        _1798 = _1780.y * cbModelParam._m0[1u].z;
        _1800 = _1780.z * cbModelParam._m0[1u].z;
    }
    float _1812 = ((((1.0 - _829) * ((_816 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_829 * _816)) * _800;
    float _1813 = _1812 * ((cbModelParam._m0[1u].w * (_1796 - _1697)) + _1697);
    float _1814 = _1812 * ((cbModelParam._m0[1u].w * (_1798 - _1699)) + _1699);
    float _1815 = _1812 * ((cbModelParam._m0[1u].w * (_1800 - _1701)) + _1701);
    float _1818 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1814, cbSceneParam._m0[89u].y, _1813 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1814, cbSceneParam._m0[90u].y, _1813 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1814, cbSceneParam._m0[91u].y, _1813 * cbSceneParam._m0[91u].x));
    vec4 _1832 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_737, _738));
    float _1834 = _1832.w;
    float _1846 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1834);
    float _1847 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1834);
    float _1848 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1834);
    uvec4 _1852 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1854 = _1852.x * 14u;
    uint _1855 = _1854 + 13u;
    float _1862 = _800 + (-1.0);
    float _1867 = (cbLight._m0[_1855].x * _1862) + 1.0;
    float _1868 = (cbLight._m0[_1855].y * _1862) + 1.0;
    float _1869 = (cbLight._m0[_1855].z * _1862) + 1.0;
    float _1870 = (cbLight._m0[_1855].w * _1862) + 1.0;
    uint _1871 = _1854 + 5u;
    float _1877 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
    uint _1881 = _1854 + 4u;
    float _1890 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
    uint _1894 = _1854 | 1u;
    float _1905 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_649, _650, _651));
    float _1908 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_649, _650, _651));
    float _4023 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _4034 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1913 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 0.3183098733425140380859375;
    float _1915 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * 0.3183098733425140380859375;
    float _1922 = ((cbLight._m0[_1871].x * _1877) * _1915) + (((cbLight._m0[_1881].x * _1846) * _1890) * _1913);
    float _1923 = ((_1877 * cbLight._m0[_1871].y) * _1915) + (((cbLight._m0[_1881].y * _1847) * _1890) * _1913);
    float _1924 = ((_1877 * cbLight._m0[_1871].z) * _1915) + (((cbLight._m0[_1881].z * _1848) * _1890) * _1913);
    uvec4 _1928 = floatBitsToUint(cbLight._m0[_1854 + 12u]);
    bool _1930 = _1928.x == 0u;
    float _1941;
    float _1943;
    float _1945;
    if (_1930)
    {
        _1941 = _1922;
        _1943 = _1923;
        _1945 = _1924;
    }
    else
    {
        uint _1949 = _1854 + 6u;
        float _1965 = (dot(vec3(cbLight._m0[_1854 + 2u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _1966 = _1965 * _1965;
        float _4045 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1967 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1968 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _1941 = (((cbLight._m0[_1949].x * 0.3183098733425140380859375) * _1967) * _1968) + _1922;
        _1943 = (((cbLight._m0[_1949].y * 0.3183098733425140380859375) * _1967) * _1968) + _1923;
        _1945 = (((cbLight._m0[_1949].z * 0.3183098733425140380859375) * _1967) * _1968) + _1924;
    }
    bool _1948 = _1928.y == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1948)
    {
        _1986 = _1941;
        _1988 = _1943;
        _1990 = _1945;
    }
    else
    {
        uint _2148 = _1854 + 7u;
        float _2164 = (dot(vec3(cbLight._m0[_1854 + 3u].xyz), vec3(_649, _650, _651)) * 0.5) + 0.5;
        float _2165 = _2164 * _2164;
        float _4061 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2166 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2167 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _1986 = (((cbLight._m0[_2148].x * 0.3183098733425140380859375) * _2166) * _2167) + _1941;
        _1988 = (((cbLight._m0[_2148].y * 0.3183098733425140380859375) * _2166) * _2167) + _1943;
        _1990 = (((cbLight._m0[_2148].z * 0.3183098733425140380859375) * _2166) * _2167) + _1945;
    }
    uint _1993 = _1854 + 8u;
    float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _652) * 0.949999988079071044921875);
    float _2007 = _2006 * _2006;
    float _2008 = cbLight._m0[_1854].x + _729;
    float _2009 = cbLight._m0[_1854].y + _730;
    float _2010 = cbLight._m0[_1854].z + _731;
    float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
    float _2015 = _2014 * _2008;
    float _2016 = _2014 * _2009;
    float _2017 = _2014 * _2010;
    float _2018 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_1854].xyz));
    float _4077 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _4088 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _2022 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _2023 = dot(vec3(_649, _650, _651), vec3(_2015, _2016, _2017));
    float _4099 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
    float _2026 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _2027 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_2015, _2016, _2017));
    float _4110 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2031 = _2007 * _2007;
    float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
    float _2046 = (exp2(log2(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2047 = 1.0 - _2007;
    float _2058 = (0.5 / (((_2022 * ((_2021 * _2047) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2047) + _2007) * _2021))) * _2021;
    float _4121 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
    uint _2074 = _1854 + 9u;
    float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _652) * 0.949999988079071044921875);
    float _2086 = _2085 * _2085;
    float _2087 = cbLight._m0[_1894].x + _729;
    float _2088 = cbLight._m0[_1894].y + _730;
    float _2089 = cbLight._m0[_1894].z + _731;
    float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
    float _2094 = _2093 * _2087;
    float _2095 = _2093 * _2088;
    float _2096 = _2093 * _2089;
    float _2097 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_1894].xyz));
    float _4132 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _2101 = dot(vec3(_649, _650, _651), vec3(_2094, _2095, _2096));
    float _4143 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_2094, _2095, _2096));
    float _4154 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2086 * _2086;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2122 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2123 = 1.0 - _2086;
    float _2133 = (0.5 / (((_2022 * ((_2100 * _2123) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2123) + _2086) * _2100))) * _2100;
    float _4165 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2135 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    float _2145 = (((_2122 * cbLight._m0[_2074].x) * _2135) * _1877) + ((((cbLight._m0[_1993].x * _1846) * _2046) * _2060) * _1890);
    float _2146 = (((_2122 * cbLight._m0[_2074].y) * _2135) * _1877) + ((((cbLight._m0[_1993].y * _1847) * _2046) * _2060) * _1890);
    float _2147 = (((_2122 * cbLight._m0[_2074].z) * _2135) * _1877) + ((((cbLight._m0[_1993].z * _1848) * _2046) * _2060) * _1890);
    float _2209;
    float _2211;
    float _2213;
    if (_1930)
    {
        _2209 = _2145;
        _2211 = _2146;
        _2213 = _2147;
    }
    else
    {
        uint _2215 = _1854 + 2u;
        uint _2219 = _1854 + 10u;
        float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _652) * 0.949999988079071044921875);
        float _2234 = _2233 * _2233;
        float _2235 = cbLight._m0[_2215].x + _729;
        float _2236 = cbLight._m0[_2215].y + _730;
        float _2237 = cbLight._m0[_2215].z + _731;
        float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
        float _2242 = _2241 * _2235;
        float _2243 = _2241 * _2236;
        float _2244 = _2241 * _2237;
        float _2245 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2215].xyz));
        float _4176 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2248 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _2249 = dot(vec3(_649, _650, _651), vec3(_2242, _2243, _2244));
        float _4187 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2252 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2253 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2242, _2243, _2244));
        float _4198 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2257 = _2234 * _2234;
        float _2261 = ((_2252 * _2252) * (_2257 + (-1.0))) + 1.0;
        float _2270 = (exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2271 = 1.0 - _2234;
        float _2281 = (0.5 / (((_2022 * ((_2248 * _2271) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2271) + _2234) * _2248))) * _2248;
        float _4209 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2283 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2257 / ((_2261 * _2261) * 3.141590118408203125));
        float _2284 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _2209 = (((_2270 * cbLight._m0[_2219].x) * _2283) * _2284) + _2145;
        _2211 = (((_2270 * cbLight._m0[_2219].y) * _2283) * _2284) + _2146;
        _2213 = (((_2270 * cbLight._m0[_2219].z) * _2283) * _2284) + _2147;
    }
    float _2319;
    float _2321;
    float _2323;
    if (_1948)
    {
        _2319 = _2209;
        _2321 = _2211;
        _2323 = _2213;
    }
    else
    {
        uint _2330 = _1854 + 3u;
        uint _2334 = _1854 + 11u;
        float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _652) * 0.949999988079071044921875);
        float _2349 = _2348 * _2348;
        float _2350 = cbLight._m0[_2330].x + _729;
        float _2351 = cbLight._m0[_2330].y + _730;
        float _2352 = cbLight._m0[_2330].z + _731;
        float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
        float _2357 = _2356 * _2350;
        float _2358 = _2356 * _2351;
        float _2359 = _2356 * _2352;
        float _2360 = dot(vec3(_649, _650, _651), vec3(cbLight._m0[_2330].xyz));
        float _4225 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2364 = dot(vec3(_649, _650, _651), vec3(_2357, _2358, _2359));
        float _4236 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2368 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2357, _2358, _2359));
        float _4247 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2372 = _2349 * _2349;
        float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
        float _2385 = (exp2(log2(1.0 - (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2386 = 1.0 - _2349;
        float _2396 = (0.5 / (((_2022 * ((_2363 * _2386) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2022 * _2386) + _2349) * _2363))) * _2363;
        float _4258 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2398 = (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
        float _2399 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2319 = (((_2385 * cbLight._m0[_2334].x) * _2398) * _2399) + _2209;
        _2321 = (((_2385 * cbLight._m0[_2334].y) * _2398) * _2399) + _2211;
        _2323 = (((_2385 * cbLight._m0[_2334].z) * _2398) * _2399) + _2213;
    }
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    float _2542;
    float _2544;
    if (_1852.y == 0u)
    {
        float _2474 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2474;
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2474;
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2474;
        uvec4 _2489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2490 = _2489.x;
        uint _2501 = uint((float(_2489.y) * floor(float(uint(cbSceneParam._m0[85u].y * _738) / _2490))) + floor(float(uint(cbSceneParam._m0[85u].x * _737) / _2490)));
        float _2511 = (log2(_2477 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2512 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        uint _2515 = uint(isnan(14.0) ? _2512 : (isnan(_2512) ? 14.0 : min(_2512, 14.0)));
        uvec4 _2520 = texelFetch(g_lightClusterGridBuffer, int(((_2515 << 2u) + (_2501 << 6u)) >> 2u));
        uint _2521 = _2520.x;
        uint _2522 = _2489.z;
        float _2622;
        float _2624;
        float _2626;
        float _2628;
        float _2630;
        float _2632;
        if (((((1u << ((_2522 >> 4u) & 15u)) + 4294967295u) & _2521) == 0u) || ((_2522 & 240u) == 0u))
        {
            _2622 = 0.0;
            _2624 = 0.0;
            _2626 = 0.0;
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
        }
        else
        {
            float _2623;
            float _2625;
            float _2627;
            float _2629;
            float _2631;
            float _2633;
            float _2767 = 0.0;
            float _2768 = 0.0;
            float _2769 = 0.0;
            float _2770 = 0.0;
            float _2771 = 0.0;
            float _2772 = 0.0;
            uint _2773 = 0u;
            uint _2782;
            bool _2783;
            for (;;)
            {
                _2782 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2773 << 2u)) >> 2u)).x;
                _2783 = _2782 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2783)
                {
                    frontier_phi_61_pred = _2767;
                    frontier_phi_61_pred_1 = _2772;
                    frontier_phi_61_pred_2 = _2771;
                    frontier_phi_61_pred_3 = _2770;
                    frontier_phi_61_pred_4 = _2769;
                    frontier_phi_61_pred_5 = _2768;
                }
                else
                {
                    float _2891;
                    float _2892;
                    float _2893;
                    float _2894;
                    float _2895;
                    float _2896;
                    uint _2897;
                    _2891 = _2767;
                    _2892 = _2768;
                    _2893 = _2769;
                    _2894 = _2770;
                    _2895 = _2771;
                    _2896 = _2772;
                    _2897 = _2782;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    float _2828;
                    for (;;)
                    {
                        uint _2901 = uint(findLSB(_2897)) + (_2773 << 5u);
                        uint _2898 = (_2897 + 4294967295u) & _2897;
                        uint _2903 = _2901 * 48u;
                        vec4 _2917 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2903)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2903 + 3u)).x));
                        uint _2923 = (_2901 * 48u) + 4u;
                        vec4 _2936 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2942 = (_2901 * 48u) + 8u;
                        vec3 _2953 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x));
                        float _2957 = _2917.x - _2475;
                        float _2958 = _2917.y - _2476;
                        float _2959 = _2917.z - _2477;
                        float _2960 = dot(vec3(_2957, _2958, _2959), vec3(_2957, _2958, _2959));
                        float _2963 = inversesqrt(_2960);
                        float _2964 = _2963 * _2957;
                        float _2965 = _2963 * _2958;
                        float _2966 = _2963 * _2959;
                        float _2967 = dot(vec3(_756, _759, _762), vec3(_2964, _2965, _2966));
                        float _2972 = 1.0 - (_2960 * _2917.w);
                        float _4284 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2973 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _2974 = sqrt(_2960) * _2936.w;
                        float _2977 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                        float _2978 = _2977 * _2977;
                        float _2981 = ((1.0 - _2978) * _2967) + _2978;
                        float _2984 = _2974 * _2974;
                        float _2988 = ((isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0))) * _2973) / ((_2984 * 0.699999988079071044921875) + 1.0);
                        float _2992 = (-0.0) - _2475;
                        float _2993 = (-0.0) - _2476;
                        float _2994 = (-0.0) - _2477;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _2999 = _2998 * _2992;
                        float _3000 = _2998 * _2993;
                        float _3001 = _2998 * _2994;
                        float _3009 = exp2(log2(1.0 / ((_2984 * 3.5) + 5.0)) * 0.25);
                        float _3010 = 1.0 - _816;
                        float _3017 = sqrt(1.0 - ((1.0 - (_3010 * _3010)) * (1.0 - (_3009 * _3009))));
                        float _3018 = _3017 * _3017;
                        float _3019 = _3018 * _3018;
                        float _3020 = _2999 + _2964;
                        float _3021 = _3000 + _2965;
                        float _3022 = _3001 + _2966;
                        float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
                        float _3030 = dot(vec3(_756, _759, _762), vec3(_2999, _3000, _3001));
                        float _4300 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3033 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                        float _3034 = dot(vec3(_756, _759, _762), vec3(_3026 * _3020, _3026 * _3021, _3026 * _3022));
                        float _4311 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                        float _3037 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                        float _3041 = ((_3037 * _3037) * (_3019 + (-1.0))) + 1.0;
                        float _3042 = _2977 * _3018;
                        float _3043 = _3042 * _3042;
                        float _3046 = ((1.0 - _3043) * _2967) + _3043;
                        float _4322 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                        float _3047 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                        float _3048 = 1.0 - _3018;
                        float _3058 = (0.5 / (((_3047 * ((_3033 * _3048) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_3047 * _3048) + _3018) * _3033))) * _3047;
                        float _4333 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                        float _3069 = (((_3019 * 3.1415927410125732421875) * (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) / ((_3041 * _3041) * ((_2984 * 2.1991131305694580078125) + 3.141590118408203125))) * _2973;
                        _2826 = (_2988 * _2936.x) + _2894;
                        _2827 = (_2988 * _2936.y) + _2895;
                        _2828 = (_2988 * _2936.z) + _2896;
                        _2823 = (_3069 * _2953.x) + _2891;
                        _2824 = (_3069 * _2953.y) + _2892;
                        _2825 = (_3069 * _2953.z) + _2893;
                        if (_2898 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2891 = _2823;
                            _2892 = _2824;
                            _2893 = _2825;
                            _2894 = _2826;
                            _2895 = _2827;
                            _2896 = _2828;
                            _2897 = _2898;
                        }
                    }
                    frontier_phi_61_pred = _2823;
                    frontier_phi_61_pred_1 = _2828;
                    frontier_phi_61_pred_2 = _2827;
                    frontier_phi_61_pred_3 = _2826;
                    frontier_phi_61_pred_4 = _2825;
                    frontier_phi_61_pred_5 = _2824;
                }
                _2623 = frontier_phi_61_pred;
                _2633 = frontier_phi_61_pred_1;
                _2631 = frontier_phi_61_pred_2;
                _2629 = frontier_phi_61_pred_3;
                _2627 = frontier_phi_61_pred_4;
                _2625 = frontier_phi_61_pred_5;
                uint _2774 = _2773 + 1u;
                if (_2774 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2767 = _2623;
                    _2768 = _2625;
                    _2769 = _2627;
                    _2770 = _2629;
                    _2771 = _2631;
                    _2772 = _2633;
                    _2773 = _2774;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2622 = _2623;
            _2624 = _2625;
            _2626 = _2627;
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
        }
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.z;
        uint _2639 = (_2637 >> 8u) & 15u;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        if (((4294967295u << _2639) & _2521) == 0u)
        {
            _2735 = _2622;
            _2737 = _2624;
            _2739 = _2626;
            _2741 = _2628;
            _2743 = _2630;
            _2745 = _2632;
        }
        else
        {
            float _2760 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
            float _2761 = _2760 * _2475;
            float _2762 = _2760 * _2476;
            float _2763 = _2760 * _2477;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2639 < ((_2637 >> 12u) & 15u))
            {
                float _2736;
                float _2738;
                float _2740;
                float _2742;
                float _2744;
                float _2746;
                float _2874 = _2622;
                float _2875 = _2624;
                float _2876 = _2626;
                float _2877 = _2628;
                float _2878 = _2630;
                float _2879 = _2632;
                uint _2880 = _2639;
                uint _2889;
                bool _2890;
                for (;;)
                {
                    _2889 = texelFetch(g_lightClassification, int((((_2515 << 5u) + (_2501 << 9u)) + (_2880 << 2u)) >> 2u)).x;
                    _2890 = _2889 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2890)
                    {
                        frontier_phi_67_pred = _2877;
                        frontier_phi_67_pred_1 = _2878;
                        frontier_phi_67_pred_2 = _2879;
                        frontier_phi_67_pred_3 = _2876;
                        frontier_phi_67_pred_4 = _2875;
                        frontier_phi_67_pred_5 = _2874;
                    }
                    else
                    {
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _3078;
                        float _3079;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3087 = _2874;
                        float _3088 = _2875;
                        float _3089 = _2876;
                        float _3090 = _2877;
                        float _3091 = _2878;
                        float _3092 = _2879;
                        uint _3093 = _2889;
                        uint _3094;
                        vec4 _3119;
                        float _3120;
                        vec4 _3135;
                        vec3 _3147;
                        vec4 _3162;
                        vec4 _3177;
                        float _3223;
                        bool _3224;
                        for (;;)
                        {
                            uint _3104 = ((_2880 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3093));
                            _3094 = (_3093 + 4294967295u) & _3093;
                            uint _3106 = _3104 * 40u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            _3120 = _3119.w;
                            uint _3122 = (_3104 * 40u) + 4u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3137 = (_3104 * 40u) + 8u;
                            _3147 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x));
                            uint _3149 = (_3104 * 40u) + 16u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3164 = (_3104 * 40u) + 20u;
                            _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            uint _3179 = (_3104 * 40u) + 24u;
                            vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3198 = (_3104 * 40u) + 28u;
                            vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            _3223 = fma(_2477, _3211.z, fma(_2476, _3211.y, _3211.x * _2475)) + _3211.w;
                            _3224 = !((fma(_2477, _3192.z, fma(_2476, _3192.y, _3192.x * _2475)) + _3192.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3224)
                            {
                                float _3251 = _3119.x - _2475;
                                float _3252 = _3119.y - _2476;
                                float _3253 = _3119.z - _2477;
                                float _3254 = dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253));
                                float _3257 = inversesqrt(_3254);
                                float _3258 = _3257 * _3251;
                                float _3259 = _3257 * _3252;
                                float _3260 = _3257 * _3253;
                                float _3264 = 1.0 - (_3254 / (_3120 * _3120));
                                float _4344 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3269 = sqrt(_3254) * _3135.w;
                                float _3271 = 1.39999997615814208984375 / (_3269 + 1.39999997615814208984375);
                                float _3272 = _3271 * _3271;
                                float _3275 = ((1.0 - _3272) * dot(vec3(_3258, _3259, _3260), vec3(_756, _759, _762))) + _3272;
                                float _3278 = _3269 * _3269;
                                float _3282 = (fma(_2477, _3162.z, fma(_2476, _3162.y, _3162.x * _2475)) + _3162.w) / _3223;
                                float _3283 = (fma(_2477, _3177.z, fma(_2476, _3177.y, _3177.x * _2475)) + _3177.w) / _3223;
                                float _3287 = 1.0 - dot(vec2(_3282, _3283), vec2(_3282, _3283));
                                float _4360 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3288 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
                                float _3289 = _3288 * (((isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0))) * _3265) / ((_3278 * 0.699999988079071044921875) + 1.0));
                                float _3301 = exp2(log2(1.0 / ((_3278 * 3.5) + 5.0)) * 0.25);
                                float _3302 = 1.0 - _816;
                                float _3309 = sqrt(1.0 - ((1.0 - (_3302 * _3302)) * (1.0 - (_3301 * _3301))));
                                float _3310 = _3309 * _3309;
                                float _3311 = _3310 * _3310;
                                float _3312 = _3258 - _2761;
                                float _3313 = _3259 - _2762;
                                float _3314 = _3260 - _2763;
                                float _3318 = inversesqrt(dot(vec3(_3312, _3313, _3314), vec3(_3312, _3313, _3314)));
                                float _3322 = dot(vec3(_756, _759, _762), vec3((-0.0) - _2761, (-0.0) - _2762, (-0.0) - _2763));
                                float _4371 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3325 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                                float _3326 = dot(vec3(_756, _759, _762), vec3(_3318 * _3312, _3318 * _3313, _3318 * _3314));
                                float _4382 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3329 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
                                float _3333 = ((_3329 * _3329) * (_3311 + (-1.0))) + 1.0;
                                float _3334 = _3271 * _3310;
                                float _3335 = _3334 * _3334;
                                float _3341 = ((1.0 - _3335) * dot(vec3(_756, _759, _762), vec3(_3258, _3259, _3260))) + _3335;
                                float _4393 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
                                float _3343 = 1.0 - _3310;
                                float _3353 = (0.5 / (((_3342 * ((_3325 * _3343) + _3310)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3310) * _3325))) * _3342;
                                float _4404 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                                float _3363 = (_3288 * _3265) * (((_3311 * 3.1415927410125732421875) * (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0)))) / ((_3333 * _3333) * ((_3278 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3363 * _3147.x;
                                frontier_phi_73_pred_1 = _3363 * _3147.y;
                                frontier_phi_73_pred_2 = _3289 * _3135.z;
                                frontier_phi_73_pred_3 = _3289 * _3135.y;
                                frontier_phi_73_pred_4 = _3289 * _3135.x;
                                frontier_phi_73_pred_5 = _3363 * _3147.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3367 = frontier_phi_73_pred;
                            _3368 = frontier_phi_73_pred_1;
                            _3372 = frontier_phi_73_pred_2;
                            _3371 = frontier_phi_73_pred_3;
                            _3370 = frontier_phi_73_pred_4;
                            _3369 = frontier_phi_73_pred_5;
                            _3077 = _3370 + _3090;
                            _3078 = _3371 + _3091;
                            _3079 = _3372 + _3092;
                            _3074 = _3367 + _3087;
                            _3075 = _3368 + _3088;
                            _3076 = _3369 + _3089;
                            if (_3094 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3087 = _3074;
                                _3088 = _3075;
                                _3089 = _3076;
                                _3090 = _3077;
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3094;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3077;
                        frontier_phi_67_pred_1 = _3078;
                        frontier_phi_67_pred_2 = _3079;
                        frontier_phi_67_pred_3 = _3076;
                        frontier_phi_67_pred_4 = _3075;
                        frontier_phi_67_pred_5 = _3074;
                    }
                    _2742 = frontier_phi_67_pred;
                    _2744 = frontier_phi_67_pred_1;
                    _2746 = frontier_phi_67_pred_2;
                    _2740 = frontier_phi_67_pred_3;
                    _2738 = frontier_phi_67_pred_4;
                    _2736 = frontier_phi_67_pred_5;
                    uint _2881 = _2880 + 1u;
                    if (_2881 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2874 = _2736;
                        _2875 = _2738;
                        _2876 = _2740;
                        _2877 = _2742;
                        _2878 = _2744;
                        _2879 = _2746;
                        _2880 = _2881;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2744;
                frontier_phi_55_56_ladder_1 = _2746;
                frontier_phi_55_56_ladder_2 = _2742;
                frontier_phi_55_56_ladder_3 = _2740;
                frontier_phi_55_56_ladder_4 = _2738;
                frontier_phi_55_56_ladder_5 = _2736;
            }
            else
            {
                frontier_phi_55_56_ladder = _2630;
                frontier_phi_55_56_ladder_1 = _2632;
                frontier_phi_55_56_ladder_2 = _2628;
                frontier_phi_55_56_ladder_3 = _2626;
                frontier_phi_55_56_ladder_4 = _2624;
                frontier_phi_55_56_ladder_5 = _2622;
            }
            _2735 = frontier_phi_55_56_ladder_5;
            _2737 = frontier_phi_55_56_ladder_4;
            _2739 = frontier_phi_55_56_ladder_3;
            _2741 = frontier_phi_55_56_ladder_2;
            _2743 = frontier_phi_55_56_ladder;
            _2745 = frontier_phi_55_56_ladder_1;
        }
        float _2750 = isnan(1.0) ? _800 : (isnan(_800) ? 1.0 : min(_800, 1.0));
        _2534 = (_2750 * _2741) + _1986;
        _2536 = (_2750 * _2743) + _1988;
        _2538 = (_2750 * _2745) + _1990;
        _2540 = ((_2735 * 0.039999999105930328369140625) * _2750) + _2319;
        _2542 = ((_2737 * 0.039999999105930328369140625) * _2750) + _2321;
        _2544 = ((_2739 * 0.039999999105930328369140625) * _2750) + _2323;
    }
    else
    {
        _2534 = _1986;
        _2536 = _1988;
        _2538 = _1990;
        _2540 = _2319;
        _2542 = _2321;
        _2544 = _2323;
    }
    float _4420 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4431 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4442 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    uint _2564 = _236 + 6u;
    float _2572 = _737 / cbSceneParam._m0[86u].x;
    float _2573 = _738 / cbSceneParam._m0[86u].y;
    vec4 _2587 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2572, _2573, (log2((isnan(cbSceneParam._m0[77u].w) ? _670 : (isnan(_670) ? cbSceneParam._m0[77u].w : min(_670, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2589 = _2587.x;
    float _2590 = _2587.y;
    float _2591 = _2587.z;
    float _2592 = _2587.w;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_670 > cbSceneParam._m0[78u].w)
    {
        float _2647 = isnan(_670) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _670 : min(cbSceneParam._m0[80u].w, _670));
        float _2648 = _2647 / _670;
        float _2659 = _2648 * _722;
        float _2660 = _723 * _2648;
        float _2661 = (-0.0) - _2660;
        float _2663 = _2648 * _724;
        float _2665 = (cbSceneParam._m0[77u].w * _2661) / _2647;
        float _2666 = _2665 + cbSceneParam._m0[79u].w;
        float _2667 = cbSceneParam._m0[79u].w - _2660;
        float _2673 = sqrt(((_2659 * _2659) + (_2660 * _2660)) + (_2663 * _2663));
        float _2676 = (1.0 - (cbSceneParam._m0[77u].w / _2647)) * _2673;
        float _2681 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2683 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2836;
        if (abs((_2661 - _2665) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2836 = ((((_2666 > 0.0) ? exp2(_2681 * _2666) : (2.0 - exp2(_2683 * _2666))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2676;
        }
        else
        {
            float _2796 = 1.0 / cbSceneParam._m0[80u].x;
            float _2797 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : max(_2666, _2667));
            float _2798 = isnan(_2667) ? _2666 : (isnan(_2666) ? _2667 : min(_2666, _2667));
            float _2807 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : min(_2797, 0.0));
            float _2808 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : min(_2798, 0.0));
            _2836 = ((abs(_2673 / _2661) * cbSceneParam._m0[80u].y) * ((((_2807 - _2808) * 2.0) - ((exp2(_2681 * (isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0)))) - exp2(_2681 * (isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0))))) * _2796)) - ((exp2(_2683 * _2807) - exp2(_2683 * _2808)) * _2796))) + (_2676 * cbSceneParam._m0[80u].z);
        }
        vec4 _2838 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2572, _2573, 1.0), 0.0);
        float _2847 = exp2((_2836 * (-1.44269502162933349609375)) * (1.0 - _2838.w));
        float _2848 = log2(_2847);
        float _2864 = log2(_2592);
        _2685 = (exp2(_2864 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].x)) * _2838.x) / cbSceneParam._m0[78u].x)) + _2589;
        _2687 = (exp2(_2864 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].y)) * _2838.y) / cbSceneParam._m0[78u].y)) + _2590;
        _2689 = (exp2(_2864 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2848 * cbSceneParam._m0[78u].z)) * _2838.z) / cbSceneParam._m0[78u].z)) + _2591;
        _2691 = _2847 * _2592;
    }
    else
    {
        _2685 = _2589;
        _2687 = _2590;
        _2689 = _2591;
        _2691 = _2592;
    }
    float _2703 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2704 = _2703 == 3.0;
    float _2705 = log2(_2691);
    float _2712 = exp2(_2705 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2534 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _800))) + ((_2540 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1605)) * cbPerFrame._m0[3u].x));
    float _2713 = exp2(_2705 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2536 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _800))) + ((_2542 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1605)) * cbPerFrame._m0[3u].x));
    float _2714 = exp2(_2705 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2538 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _800))) + ((_2544 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1605)) * cbPerFrame._m0[3u].x));
    float _2723 = (_2703 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2723 * (_2704 ? _2712 : (_2712 + (cbSceneParam._m0[72u].w * _2685)));
    SV_Target.y = _2723 * (_2704 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2687)));
    SV_Target.z = _2723 * (_2704 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2689)));
    SV_Target.w = cbInstanceData._m0[_2564].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2564].w;
}


