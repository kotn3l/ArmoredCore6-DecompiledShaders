#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1023;
float _3411;
float _3412;
float _3413;
float _3414;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    uint _224 = uint(roundEven(NORMAL.w)) * 13u;
    uint _230 = _224 + 1u;
    uint _234 = _224 + 2u;
    float _243 = sqrt(((cbInstanceData._m0[_230].x * cbInstanceData._m0[_230].x) + (cbInstanceData._m0[_224].x * cbInstanceData._m0[_224].x)) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x));
    float _244 = _243 * TEXCOORD.z;
    float _245 = _243 * TEXCOORD.w;
    vec4 _264 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _270 = _264.x * cbMtdParam._m0[9u].x;
    float _271 = _264.y * cbMtdParam._m0[9u].y;
    float _272 = _264.z * cbMtdParam._m0[9u].z;
    vec4 _290 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _294 = _290.z;
    float _299 = (_290.x * 2.0) + (-1.0);
    float _301 = (_290.y * 2.0) + (-1.0);
    float _302 = dot(vec2(_299, _301), vec2(_299, _301));
    float _3423 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _308 = sqrt(1.0 - (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))));
    float _311 = fma(_308, _212, fma(_301, _219, _299 * _205));
    float _314 = fma(_308, _213, fma(_301, _220, _299 * _206));
    float _317 = fma(_308, _214, fma(_301, _221, _299 * _207));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    vec4 _357 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _244) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _245) + cbTextureTilingScale._m0[11u].w));
    float _359 = _357.x;
    float _360 = 1.0 - _359;
    float _367 = ((_359 - _360) * cbMtdParam._m0[24u].z) + _360;
    float _369 = (cbMtdParam._m0[19u].x + dot(vec4(_321 * _311, _321 * _314, _321 * _317, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_367 * cbMtdParam._m0[21u].z);
    float _3434 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _385 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_367 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3445 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _390 = ((_370 * (cbMtdParam._m0[17u].x - _270)) * _386) + _270;
    float _391 = ((_370 * (cbMtdParam._m0[17u].y - _271)) * _386) + _271;
    float _392 = ((_370 * (cbMtdParam._m0[17u].z - _272)) * _386) + _272;
    vec4 _405 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _244) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _245) + cbTextureTilingScale._m0[15u].w));
    float _412 = (_405.x * 2.0) + (-1.0);
    float _413 = (_405.y * 2.0) + (-1.0);
    float _414 = dot(vec2(_412, _413), vec2(_412, _413));
    float _3456 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _423 = (((_405.z - _294) * _370) * _386) + _294;
    float _438 = (((cbMtdParam._m0[21u].x * _299) + ((_412 - _299) * _370)) * _386) + _299;
    float _439 = (((cbMtdParam._m0[21u].x * _301) + ((_413 - _301) * _370)) * _386) + _301;
    float _440 = (((sqrt(1.0 - (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) - _308) * _370) * _386) + _308;
    float _445 = cbMtdParam._m0[22u].x + _290.w;
    float _448 = fma(_440, _212, fma(_439, _219, _438 * _205));
    float _451 = fma(_440, _213, fma(_439, _220, _438 * _206));
    float _454 = fma(_440, _214, fma(_439, _221, _438 * _207));
    float _458 = inversesqrt(dot(vec3(_448, _451, _454), vec3(_448, _451, _454)));
    float _459 = _458 * _448;
    float _460 = _458 * _451;
    float _461 = _458 * _454;
    float _3467 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _462 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    float _3478 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3489 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _3500 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _3511 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _480 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _521 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _531 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _521);
    float _532 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _521);
    float _533 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _521);
    float _537 = inversesqrt(dot(vec3(_531, _532, _533), vec3(_531, _532, _533)));
    float _538 = _531 * _537;
    float _539 = _532 * _537;
    float _540 = _533 * _537;
    vec4 _545 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _547 = _545.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _704 = sqrt(((_531 * _531) + (_532 * _532)) + (_533 * _533));
        float _710 = (cbMatDynParam._m0[5u].x * _704) + cbMatDynParam._m0[5u].y;
        float _3522 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _715 = (cbMatDynParam._m0[5u].z * _704) + cbMatDynParam._m0[5u].w;
        float _3533 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) - _711)) + _711) < ((_547 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _559 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _560 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _580 = fma(_461, cbSceneParam._m0[5u].z, fma(_460, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _459));
    float _583 = fma(_461, cbSceneParam._m0[6u].z, fma(_460, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _459));
    float _586 = fma(_461, cbSceneParam._m0[7u].z, fma(_460, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _459));
    uint _599 = _224 + 9u;
    uint _600 = _599 + uint(cbMatDynParam._m0[0u].w);
    float _606 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0)))) * cbInstanceData._m0[_600].x;
    float _607 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * cbInstanceData._m0[_600].y;
    float _608 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * cbInstanceData._m0[_600].z;
    float _3544 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _610 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _611 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    vec4 _620 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _559, cbSceneParam._m0[86u].y * _560));
    float _624 = ((isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * TEXCOORD_5.w) * _620.x;
    float _625 = dot(vec3(_459, _460, _461), vec3(_538, _539, _540));
    float _628 = _625 * 2.0;
    float _632 = (_628 * _459) - _538;
    float _633 = (_628 * _460) - _539;
    float _634 = (_628 * _461) - _540;
    float _638 = abs(dot(vec3(_538, _539, _540), vec3(_459, _460, _461)));
    float _3577 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _640 = sqrt(_462);
    float _653 = exp2((_640 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_640 * 3.0));
    float _685 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1022;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _747 = fma(_693, cbModelParam._m0[26u].z, fma(_689, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _685));
        float _751 = fma(_693, cbModelParam._m0[27u].z, fma(_689, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _685));
        float _755 = fma(_693, cbModelParam._m0[28u].z, fma(_689, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _685));
        float _780 = _685 + _459;
        float _781 = _689 + _460;
        float _782 = _693 + _461;
        float _792 = fma(_782, cbModelParam._m0[26u].z, fma(_781, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _780)) - _747;
        float _793 = fma(_782, cbModelParam._m0[27u].z, fma(_781, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _780)) - _751;
        float _794 = fma(_782, cbModelParam._m0[28u].z, fma(_781, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _780)) - _755;
        float _798 = inversesqrt(dot(vec3(_792, _793, _794), vec3(_792, _793, _794)));
        float _811 = ((_798 * _792) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_747 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _812 = ((_798 * _793) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_751 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _813 = ((_798 * _794) / cbModelParam._m0[34u].z) + ((((((_755 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_811, _812, _813), 0.0);
        float _850 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_816.x + (-0.5));
        float _852 = _850 * (_816.y + (-0.5));
        float _853 = _850 * (_816.z + (-0.5));
        float _860 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_823.x + (-0.5));
        float _862 = _860 * (_823.y + (-0.5));
        float _863 = _860 * (_823.z + (-0.5));
        float _870 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_830.x + (-0.5));
        float _872 = _870 * (_830.y + (-0.5));
        float _873 = _870 * (_830.z + (-0.5));
        float _880 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_837.x + (-0.5));
        float _882 = _880 * (_837.y + (-0.5));
        float _883 = _880 * (_837.z + (-0.5));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = _851 * 0.5;
        float _888 = _861 * 0.5;
        float _889 = _871 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _904 = (dot(vec3(_459, _460, _461), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _914 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3625 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_916 + 1.0))) + _921) * _884;
        float _931 = _852 * 0.5;
        float _932 = _862 * 0.5;
        float _933 = _872 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_459, _460, _461), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3658 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_958 + 1.0))) + _963) * _885;
        float _973 = _853 * 0.5;
        float _974 = _863 * 0.5;
        float _975 = _873 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_459, _460, _461), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3691 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1000 + 1.0))) + _1005) * _886;
        _1022 = _853;
        _1024 = _852;
        _1025 = _851;
        _1026 = _863;
        _1027 = _862;
        _1028 = _861;
        _1029 = _873;
        _1030 = _872;
        _1031 = _871;
        _1032 = _886;
        _1033 = _885;
        _1034 = _884;
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
    }
    else
    {
        _1022 = _1023;
        _1024 = _1023;
        _1025 = _1023;
        _1026 = _1023;
        _1027 = _1023;
        _1028 = _1023;
        _1029 = _1023;
        _1030 = _1023;
        _1031 = _1023;
        _1032 = _1023;
        _1033 = _1023;
        _1034 = _1023;
        _1035 = 0.0;
        _1036 = 0.0;
        _1037 = 0.0;
    }
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1065 = fma(_693, cbModelParam._m0[30u].z, fma(_689, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _685));
        float _1069 = fma(_693, cbModelParam._m0[31u].z, fma(_689, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _685));
        float _1073 = fma(_693, cbModelParam._m0[32u].z, fma(_689, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _685));
        float _1096 = _685 + _459;
        float _1097 = _689 + _460;
        float _1098 = _693 + _461;
        float _1108 = fma(_1098, cbModelParam._m0[30u].z, fma(_1097, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1096)) - _1065;
        float _1109 = fma(_1098, cbModelParam._m0[31u].z, fma(_1097, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1096)) - _1069;
        float _1110 = fma(_1098, cbModelParam._m0[32u].z, fma(_1097, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1096)) - _1073;
        float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
        float _1127 = ((_1114 * _1108) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1065 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1114 * _1109) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1069 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1114 * _1110) / cbModelParam._m0[35u].z) + ((((((_1073 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        float _1164 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1131.x + (-0.5));
        float _1166 = _1164 * (_1131.y + (-0.5));
        float _1167 = _1164 * (_1131.z + (-0.5));
        float _1174 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1138.x + (-0.5));
        float _1176 = _1174 * (_1138.y + (-0.5));
        float _1177 = _1174 * (_1138.z + (-0.5));
        float _1184 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1145.x + (-0.5));
        float _1186 = _1184 * (_1145.y + (-0.5));
        float _1187 = _1184 * (_1145.z + (-0.5));
        float _1194 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1152.x + (-0.5));
        float _1196 = _1194 * (_1152.y + (-0.5));
        float _1197 = _1194 * (_1152.z + (-0.5));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = _1165 * 0.5;
        float _1202 = _1175 * 0.5;
        float _1203 = _1185 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_459, _460, _461), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3754 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1228 + 1.0))) + _1233) * _1198;
        float _1243 = _1166 * 0.5;
        float _1244 = _1176 * 0.5;
        float _1245 = _1186 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_459, _460, _461), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3787 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1270 + 1.0))) + _1275) * _1199;
        float _1285 = _1167 * 0.5;
        float _1286 = _1177 * 0.5;
        float _1287 = _1187 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_459, _460, _461), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3820 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1312 + 1.0))) + _1317) * _1200;
        _1334 = _1167;
        _1335 = _1166;
        _1336 = _1165;
        _1337 = _1177;
        _1338 = _1176;
        _1339 = _1175;
        _1340 = _1187;
        _1341 = _1186;
        _1342 = _1185;
        _1343 = _1200;
        _1344 = _1199;
        _1345 = _1198;
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
    }
    else
    {
        _1334 = _1023;
        _1335 = _1023;
        _1336 = _1023;
        _1337 = _1023;
        _1338 = _1023;
        _1339 = _1023;
        _1340 = _1023;
        _1341 = _1023;
        _1342 = _1023;
        _1343 = _1023;
        _1344 = _1023;
        _1345 = _1023;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1035)) + _1035;
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1036)) + _1036;
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1037)) + _1037;
    float _1381 = fma(_1360, cbSceneParam._m0[89u].z, fma(_1359, cbSceneParam._m0[89u].y, _1358 * cbSceneParam._m0[89u].x));
    float _1384 = fma(_1360, cbSceneParam._m0[90u].z, fma(_1359, cbSceneParam._m0[90u].y, _1358 * cbSceneParam._m0[90u].x));
    float _1387 = fma(_1360, cbSceneParam._m0[91u].z, fma(_1359, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1358));
    float _1402 = _632 * 0.5;
    float _1403 = _633 * 0.5;
    float _1404 = _634 * 0.5;
    float _1405 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1408 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1411 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1445;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1418 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1022, _1026, _1029, _1032));
        float _1422 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1426 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1433 = dot(vec4(cbModelParam._m0[39u]), vec4(_1402, _1403, _1404, 1.0));
        _1445 = dot(vec3(isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1433) ? 0.0 : (isnan(0.0) ? _1433 : max(0.0, _1433))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1445 = 1.0;
    }
    float _1456;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1447 = dot(vec4(cbModelParam._m0[40u]), vec4(_1402, _1403, _1404, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1447) ? 0.0 : (isnan(0.0) ? _1447 : max(0.0, _1447))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1460 = (_1456 * cbModelParam._m0[1u].x) + (_1445 * (1.0 - cbModelParam._m0[1u].x));
    float _1470 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _462);
    float _1471 = isnan(_1470) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1470 : min(cbModelParam._m0[25u].z, _1470));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1519 = fma(_693, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _685)) + cbModelParam._m0[13u].w;
        float _1523 = fma(_693, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _685)) + cbModelParam._m0[14u].w;
        float _1527 = fma(_693, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _685)) + cbModelParam._m0[15u].w;
        float _1530 = fma(_634, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _632));
        float _1533 = fma(_634, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _632));
        float _1536 = fma(_634, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _632));
        float _1564;
        if (_1530 > 0.0)
        {
            _1564 = abs((1.0 - _1519) / _1530);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1519 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1564 = frontier_phi_17_15_ladder;
        }
        float _1788;
        if (_1533 > 0.0)
        {
            _1788 = abs((1.0 - _1523) / _1533);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1523 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1788 = frontier_phi_26_22_ladder;
        }
        float _2034;
        if (_1536 > 0.0)
        {
            _2034 = abs((1.0 - _1527) / _1536);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1527 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2034 = frontier_phi_38_33_ladder;
        }
        float _2036 = isnan(_1788) ? _1564 : (isnan(_1564) ? _1788 : min(_1564, _1788));
        float _2037 = isnan(_2034) ? _2036 : (isnan(_2036) ? _2034 : min(_2036, _2034));
        float _2041 = (_2037 * _1530) + _1519;
        float _2042 = (_2037 * _1533) + _1523;
        float _2043 = (_2037 * _1536) + _1527;
        float _2044 = _2037 * 9.9999997473787516355514526367188e-05;
        float _2046 = (-1.0) - _2044;
        float _2048 = _2044 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2043 > _2048) || ((_2043 < _2046) || ((_2042 > _2048) || ((_2042 < _2046) || ((_2041 < _2046) || (_2041 > _2048))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2167 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2043, cbModelParam._m0[9u].z, fma(_2042, cbModelParam._m0[9u].y, _2041 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2043, cbModelParam._m0[10u].z, fma(_2042, cbModelParam._m0[10u].y, _2041 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2043, cbModelParam._m0[11u].z, fma(_2042, cbModelParam._m0[11u].y, _2041 * cbModelParam._m0[11u].x))), _1471);
            frontier_phi_16_38_ladder = _2167.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2167.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2167.x * cbModelParam._m0[1u].y;
        }
        _1552 = frontier_phi_16_38_ladder_2;
        _1554 = frontier_phi_16_38_ladder_1;
        _1556 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1540 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_632, _633, _634), _1471);
        _1552 = _1540.x * cbModelParam._m0[1u].y;
        _1554 = _1540.y * cbModelParam._m0[1u].y;
        _1556 = _1540.z * cbModelParam._m0[1u].y;
    }
    float _1560 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _462);
    float _1561 = isnan(_1560) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1560 : min(cbModelParam._m0[25u].w, _1560));
    float _1651;
    float _1653;
    float _1655;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1615 = fma(_693, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _685)) + cbModelParam._m0[21u].w;
        float _1619 = fma(_693, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _685)) + cbModelParam._m0[22u].w;
        float _1623 = fma(_693, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _685)) + cbModelParam._m0[23u].w;
        float _1626 = fma(_634, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _632));
        float _1629 = fma(_634, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _632));
        float _1632 = fma(_634, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _632));
        float _1793;
        if (_1626 > 0.0)
        {
            _1793 = abs((1.0 - _1615) / _1626);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1615 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1793 = frontier_phi_28_24_ladder;
        }
        float _2061;
        if (_1629 > 0.0)
        {
            _2061 = abs((1.0 - _1619) / _1629);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1619 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2061 = frontier_phi_40_35_ladder;
        }
        float _2266;
        if (_1632 > 0.0)
        {
            _2266 = abs((1.0 - _1623) / _1632);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1623 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2266 = frontier_phi_49_46_ladder;
        }
        float _2268 = isnan(_2061) ? _1793 : (isnan(_1793) ? _2061 : min(_1793, _2061));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1626) + _1615;
        float _2274 = (_2269 * _1629) + _1619;
        float _2275 = (_2269 * _1632) + _1623;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2277 = (-1.0) - _2276;
        float _2279 = _2276 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2275 > _2279) || ((_2275 < _2277) || ((_2274 > _2279) || ((_2274 < _2277) || ((_2273 < _2277) || (_2273 > _2279))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2275, cbModelParam._m0[17u].z, fma(_2274, cbModelParam._m0[17u].y, _2273 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2275, cbModelParam._m0[18u].z, fma(_2274, cbModelParam._m0[18u].y, _2273 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2275, cbModelParam._m0[19u].z, fma(_2274, cbModelParam._m0[19u].y, _2273 * cbModelParam._m0[19u].x))), _1561);
            frontier_phi_25_49_ladder = _2474.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2474.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2474.x * cbModelParam._m0[1u].z;
        }
        _1651 = frontier_phi_25_49_ladder_2;
        _1653 = frontier_phi_25_49_ladder_1;
        _1655 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_632, _633, _634), _1561);
        _1651 = _1635.x * cbModelParam._m0[1u].z;
        _1653 = _1635.y * cbModelParam._m0[1u].z;
        _1655 = _1635.z * cbModelParam._m0[1u].z;
    }
    float _1667 = ((((1.0 - _653) * ((_640 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_653 * _640)) * _624;
    float _1668 = _1667 * ((cbModelParam._m0[1u].w * (_1651 - _1552)) + _1552);
    float _1669 = _1667 * ((cbModelParam._m0[1u].w * (_1653 - _1554)) + _1554);
    float _1670 = _1667 * ((cbModelParam._m0[1u].w * (_1655 - _1556)) + _1556);
    float _1673 = fma(_1670, cbSceneParam._m0[89u].z, fma(_1669, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1670, cbSceneParam._m0[90u].z, fma(_1669, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1670, cbSceneParam._m0[91u].z, fma(_1669, cbSceneParam._m0[91u].y, _1668 * cbSceneParam._m0[91u].x));
    vec4 _1687 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_559, _560));
    float _1689 = _1687.w;
    float _1701 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1689);
    float _1702 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1689);
    float _1703 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1689);
    uvec4 _1707 = floatBitsToUint(cbInstanceData._m0[_224 + 5u]);
    uint _1709 = _1707.x * 14u;
    uint _1710 = _1709 + 13u;
    float _1717 = _624 + (-1.0);
    float _1722 = (cbLight._m0[_1710].x * _1717) + 1.0;
    float _1723 = (cbLight._m0[_1710].y * _1717) + 1.0;
    float _1724 = (cbLight._m0[_1710].z * _1717) + 1.0;
    float _1725 = (cbLight._m0[_1710].w * _1717) + 1.0;
    uint _1726 = _1709 + 5u;
    float _1732 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1736 = _1709 + 4u;
    float _1746 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
    uint _1750 = _1709 | 1u;
    float _1761 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_459, _460, _461));
    float _1764 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_459, _460, _461));
    float _3956 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _3967 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1769 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.3183098733425140380859375;
    float _1771 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.3183098733425140380859375;
    float _1778 = ((cbLight._m0[_1726].x * _1732) * _1771) + (((cbLight._m0[_1736].x * _1701) * _1746) * _1769);
    float _1779 = ((_1732 * cbLight._m0[_1726].y) * _1771) + (((cbLight._m0[_1736].y * _1702) * _1746) * _1769);
    float _1780 = ((_1732 * cbLight._m0[_1726].z) * _1771) + (((cbLight._m0[_1736].z * _1703) * _1746) * _1769);
    uvec4 _1785 = floatBitsToUint(cbLight._m0[_1709 + 12u]);
    bool _1787 = _1785.x == 0u;
    float _1798;
    float _1800;
    float _1802;
    if (_1787)
    {
        _1798 = _1778;
        _1800 = _1779;
        _1802 = _1780;
    }
    else
    {
        uint _1806 = _1709 + 6u;
        float _1822 = (dot(vec3(cbLight._m0[_1709 + 2u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _1823 = _1822 * _1822;
        float _3978 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1825 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _1798 = (((cbLight._m0[_1806].x * 0.3183098733425140380859375) * _1824) * _1825) + _1778;
        _1800 = (((cbLight._m0[_1806].y * 0.3183098733425140380859375) * _1824) * _1825) + _1779;
        _1802 = (((cbLight._m0[_1806].z * 0.3183098733425140380859375) * _1824) * _1825) + _1780;
    }
    bool _1805 = _1785.y == 0u;
    float _1843;
    float _1845;
    float _1847;
    if (_1805)
    {
        _1843 = _1798;
        _1845 = _1800;
        _1847 = _1802;
    }
    else
    {
        uint _2005 = _1709 + 7u;
        float _2021 = (dot(vec3(cbLight._m0[_1709 + 3u].xyz), vec3(_459, _460, _461)) * 0.5) + 0.5;
        float _2022 = _2021 * _2021;
        float _3994 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2023 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2024 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _1843 = (((cbLight._m0[_2005].x * 0.3183098733425140380859375) * _2023) * _2024) + _1798;
        _1845 = (((cbLight._m0[_2005].y * 0.3183098733425140380859375) * _2023) * _2024) + _1800;
        _1847 = (((cbLight._m0[_2005].z * 0.3183098733425140380859375) * _2023) * _2024) + _1802;
    }
    uint _1850 = _1709 + 8u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1709].w)) * _462) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1709].x + _538;
    float _1866 = cbLight._m0[_1709].y + _539;
    float _1867 = cbLight._m0[_1709].z + _540;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1709].xyz));
    float _4010 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _1879 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1880 = dot(vec3(_459, _460, _461), vec3(_1872, _1873, _1874));
    float _4032 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1884 = dot(vec3(cbLight._m0[_1709].xyz), vec3(_1872, _1873, _1874));
    float _4043 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1888 = _1864 * _1864;
    float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
    float _1903 = (exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1904 = 1.0 - _1864;
    float _1915 = (0.5 / (((_1879 * ((_1878 * _1904) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _1904) + _1864) * _1878))) * _1878;
    float _4054 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
    uint _1931 = _1709 + 9u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1750].w)) * _462) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1750].x + _538;
    float _1945 = cbLight._m0[_1750].y + _539;
    float _1946 = cbLight._m0[_1750].z + _540;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_1750].xyz));
    float _4065 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _1958 = dot(vec3(_459, _460, _461), vec3(_1951, _1952, _1953));
    float _4076 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1961 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _1962 = dot(vec3(cbLight._m0[_1750].xyz), vec3(_1951, _1952, _1953));
    float _4087 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _1966 = _1943 * _1943;
    float _1970 = ((_1961 * _1961) * (_1966 + (-1.0))) + 1.0;
    float _1979 = (exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1980 = 1.0 - _1943;
    float _1990 = (0.5 / (((_1879 * ((_1957 * _1980) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _1980) + _1943) * _1957))) * _1957;
    float _4098 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1992 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1966 / ((_1970 * _1970) * 3.141590118408203125));
    float _2002 = (((_1979 * cbLight._m0[_1931].x) * _1992) * _1732) + ((((cbLight._m0[_1850].x * _1701) * _1903) * _1917) * _1746);
    float _2003 = (((_1979 * cbLight._m0[_1931].y) * _1992) * _1732) + ((((cbLight._m0[_1850].y * _1702) * _1903) * _1917) * _1746);
    float _2004 = (((_1979 * cbLight._m0[_1931].z) * _1992) * _1732) + ((((cbLight._m0[_1850].z * _1703) * _1903) * _1917) * _1746);
    float _2066;
    float _2068;
    float _2070;
    if (_1787)
    {
        _2066 = _2002;
        _2068 = _2003;
        _2070 = _2004;
    }
    else
    {
        uint _2072 = _1709 + 2u;
        uint _2076 = _1709 + 10u;
        float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _462) * 0.949999988079071044921875);
        float _2091 = _2090 * _2090;
        float _2092 = cbLight._m0[_2072].x + _538;
        float _2093 = cbLight._m0[_2072].y + _539;
        float _2094 = cbLight._m0[_2072].z + _540;
        float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
        float _2099 = _2098 * _2092;
        float _2100 = _2098 * _2093;
        float _2101 = _2098 * _2094;
        float _2102 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2072].xyz));
        float _4109 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
        float _2105 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2106 = dot(vec3(_459, _460, _461), vec3(_2099, _2100, _2101));
        float _4120 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2110 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2099, _2100, _2101));
        float _4131 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2114 = _2091 * _2091;
        float _2118 = ((_2109 * _2109) * (_2114 + (-1.0))) + 1.0;
        float _2127 = (exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2128 = 1.0 - _2091;
        float _2138 = (0.5 / (((_1879 * ((_2105 * _2128) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _2128) + _2091) * _2105))) * _2105;
        float _4142 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2140 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2114 / ((_2118 * _2118) * 3.141590118408203125));
        float _2141 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _2066 = (((_2127 * cbLight._m0[_2076].x) * _2140) * _2141) + _2002;
        _2068 = (((_2127 * cbLight._m0[_2076].y) * _2140) * _2141) + _2003;
        _2070 = (((_2127 * cbLight._m0[_2076].z) * _2140) * _2141) + _2004;
    }
    float _2176;
    float _2178;
    float _2180;
    if (_1805)
    {
        _2176 = _2066;
        _2178 = _2068;
        _2180 = _2070;
    }
    else
    {
        uint _2187 = _1709 + 3u;
        uint _2191 = _1709 + 11u;
        float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _462) * 0.949999988079071044921875);
        float _2206 = _2205 * _2205;
        float _2207 = cbLight._m0[_2187].x + _538;
        float _2208 = cbLight._m0[_2187].y + _539;
        float _2209 = cbLight._m0[_2187].z + _540;
        float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
        float _2214 = _2213 * _2207;
        float _2215 = _2213 * _2208;
        float _2216 = _2213 * _2209;
        float _2217 = dot(vec3(_459, _460, _461), vec3(cbLight._m0[_2187].xyz));
        float _4158 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2221 = dot(vec3(_459, _460, _461), vec3(_2214, _2215, _2216));
        float _4169 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2224 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2225 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2214, _2215, _2216));
        float _4180 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        float _2229 = _2206 * _2206;
        float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
        float _2242 = (exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2243 = 1.0 - _2206;
        float _2253 = (0.5 / (((_1879 * ((_2220 * _2243) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_1879 * _2243) + _2206) * _2220))) * _2220;
        float _4191 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2255 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
        float _2256 = isnan(1.0) ? _1725 : (isnan(_1725) ? 1.0 : min(_1725, 1.0));
        _2176 = (((_2242 * cbLight._m0[_2191].x) * _2255) * _2256) + _2066;
        _2178 = (((_2242 * cbLight._m0[_2191].y) * _2255) * _2256) + _2068;
        _2180 = (((_2242 * cbLight._m0[_2191].z) * _2255) * _2256) + _2070;
    }
    float _2391;
    float _2393;
    float _2395;
    float _2397;
    float _2399;
    float _2401;
    if (_1707.y == 0u)
    {
        float _2331 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2332 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2331;
        float _2333 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2331;
        float _2334 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2331;
        uvec4 _2346 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2347 = _2346.x;
        uint _2358 = uint((float(_2346.y) * floor(float(uint(cbSceneParam._m0[85u].y * _560) / _2347))) + floor(float(uint(cbSceneParam._m0[85u].x * _559) / _2347)));
        float _2368 = (log2(_2334 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2369 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        uint _2372 = uint(isnan(14.0) ? _2369 : (isnan(_2369) ? 14.0 : min(_2369, 14.0)));
        uvec4 _2377 = texelFetch(g_lightClusterGridBuffer, int(((_2372 << 2u) + (_2358 << 6u)) >> 2u));
        uint _2378 = _2377.x;
        uint _2379 = _2346.z;
        float _2479;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        if (((((1u << ((_2379 >> 4u) & 15u)) + 4294967295u) & _2378) == 0u) || ((_2379 & 240u) == 0u))
        {
            _2479 = 0.0;
            _2481 = 0.0;
            _2483 = 0.0;
            _2485 = 0.0;
            _2487 = 0.0;
            _2489 = 0.0;
        }
        else
        {
            float _2480;
            float _2482;
            float _2484;
            float _2486;
            float _2488;
            float _2490;
            float _2632 = 0.0;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            uint _2638 = 0u;
            uint _2647;
            bool _2648;
            for (;;)
            {
                _2647 = texelFetch(g_lightClassification, int((((_2372 << 5u) + (_2358 << 9u)) + (_2638 << 2u)) >> 2u)).x;
                _2648 = _2647 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2648)
                {
                    frontier_phi_66_pred = _2632;
                    frontier_phi_66_pred_1 = _2637;
                    frontier_phi_66_pred_2 = _2636;
                    frontier_phi_66_pred_3 = _2635;
                    frontier_phi_66_pred_4 = _2634;
                    frontier_phi_66_pred_5 = _2633;
                }
                else
                {
                    float _2777;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    uint _2783;
                    _2777 = _2632;
                    _2778 = _2633;
                    _2779 = _2634;
                    _2780 = _2635;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2647;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    for (;;)
                    {
                        uint _2787 = uint(findLSB(_2783)) + (_2638 << 5u);
                        uint _2784 = (_2783 + 4294967295u) & _2783;
                        uint _2789 = _2787 * 48u;
                        vec4 _2803 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2789)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2789 + 3u)).x));
                        uint _2809 = (_2787 * 48u) + 4u;
                        vec4 _2822 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 3u)).x));
                        uint _2828 = (_2787 * 48u) + 8u;
                        vec3 _2839 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2828)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2828 + 2u)).x));
                        float _2843 = _2803.x - _2332;
                        float _2844 = _2803.y - _2333;
                        float _2845 = _2803.z - _2334;
                        float _2846 = dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845));
                        float _2849 = inversesqrt(_2846);
                        float _2850 = _2849 * _2843;
                        float _2851 = _2849 * _2844;
                        float _2852 = _2849 * _2845;
                        float _2853 = dot(vec3(_580, _583, _586), vec3(_2850, _2851, _2852));
                        float _2858 = 1.0 - (_2846 * _2803.w);
                        float _4217 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2859 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2860 = sqrt(_2846) * _2822.w;
                        float _2863 = 1.39999997615814208984375 / (_2860 + 1.39999997615814208984375);
                        float _2864 = _2863 * _2863;
                        float _2867 = ((1.0 - _2864) * _2853) + _2864;
                        float _2870 = _2860 * _2860;
                        float _2874 = ((isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))) * _2859) / ((_2870 * 0.699999988079071044921875) + 1.0);
                        float _2878 = (-0.0) - _2332;
                        float _2879 = (-0.0) - _2333;
                        float _2880 = (-0.0) - _2334;
                        float _2884 = inversesqrt(dot(vec3(_2878, _2879, _2880), vec3(_2878, _2879, _2880)));
                        float _2885 = _2884 * _2878;
                        float _2886 = _2884 * _2879;
                        float _2887 = _2884 * _2880;
                        float _2895 = exp2(log2(1.0 / ((_2870 * 3.5) + 5.0)) * 0.25);
                        float _2896 = 1.0 - _640;
                        float _2903 = sqrt(1.0 - ((1.0 - (_2896 * _2896)) * (1.0 - (_2895 * _2895))));
                        float _2904 = _2903 * _2903;
                        float _2905 = _2904 * _2904;
                        float _2906 = _2885 + _2850;
                        float _2907 = _2886 + _2851;
                        float _2908 = _2887 + _2852;
                        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
                        float _2916 = dot(vec3(_580, _583, _586), vec3(_2885, _2886, _2887));
                        float _4233 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2919 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2920 = dot(vec3(_580, _583, _586), vec3(_2912 * _2906, _2912 * _2907, _2912 * _2908));
                        float _4244 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2923 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2927 = ((_2923 * _2923) * (_2905 + (-1.0))) + 1.0;
                        float _2928 = _2863 * _2904;
                        float _2929 = _2928 * _2928;
                        float _2932 = ((1.0 - _2929) * _2853) + _2929;
                        float _4255 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2934 = 1.0 - _2904;
                        float _2944 = (0.5 / (((_2933 * ((_2919 * _2934) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2933 * _2934) + _2904) * _2919))) * _2933;
                        float _4266 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2955 = (((_2905 * 3.1415927410125732421875) * (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) / ((_2927 * _2927) * ((_2870 * 2.1991131305694580078125) + 3.141590118408203125))) * _2859;
                        _2707 = (_2874 * _2822.x) + _2780;
                        _2708 = (_2874 * _2822.y) + _2781;
                        _2709 = (_2874 * _2822.z) + _2782;
                        _2704 = (_2955 * _2839.x) + _2777;
                        _2705 = (_2955 * _2839.y) + _2778;
                        _2706 = (_2955 * _2839.z) + _2779;
                        if (_2784 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2777 = _2704;
                            _2778 = _2705;
                            _2779 = _2706;
                            _2780 = _2707;
                            _2781 = _2708;
                            _2782 = _2709;
                            _2783 = _2784;
                        }
                    }
                    frontier_phi_66_pred = _2704;
                    frontier_phi_66_pred_1 = _2709;
                    frontier_phi_66_pred_2 = _2708;
                    frontier_phi_66_pred_3 = _2707;
                    frontier_phi_66_pred_4 = _2706;
                    frontier_phi_66_pred_5 = _2705;
                }
                _2480 = frontier_phi_66_pred;
                _2490 = frontier_phi_66_pred_1;
                _2488 = frontier_phi_66_pred_2;
                _2486 = frontier_phi_66_pred_3;
                _2484 = frontier_phi_66_pred_4;
                _2482 = frontier_phi_66_pred_5;
                uint _2639 = _2638 + 1u;
                if (_2639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2632 = _2480;
                    _2633 = _2482;
                    _2634 = _2484;
                    _2635 = _2486;
                    _2636 = _2488;
                    _2637 = _2490;
                    _2638 = _2639;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2479 = _2480;
            _2481 = _2482;
            _2483 = _2484;
            _2485 = _2486;
            _2487 = _2488;
            _2489 = _2490;
        }
        uvec4 _2493 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2494 = _2493.z;
        uint _2496 = (_2494 >> 8u) & 15u;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        if (((4294967295u << _2496) & _2378) == 0u)
        {
            _2600 = _2479;
            _2602 = _2481;
            _2604 = _2483;
            _2606 = _2485;
            _2608 = _2487;
            _2610 = _2489;
        }
        else
        {
            float _2625 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
            float _2626 = _2625 * _2332;
            float _2627 = _2625 * _2333;
            float _2628 = _2625 * _2334;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2496 < ((_2494 >> 12u) & 15u))
            {
                float _2601;
                float _2603;
                float _2605;
                float _2607;
                float _2609;
                float _2611;
                float _2760 = _2479;
                float _2761 = _2481;
                float _2762 = _2483;
                float _2763 = _2485;
                float _2764 = _2487;
                float _2765 = _2489;
                uint _2766 = _2496;
                uint _2775;
                bool _2776;
                for (;;)
                {
                    _2775 = texelFetch(g_lightClassification, int((((_2372 << 5u) + (_2358 << 9u)) + (_2766 << 2u)) >> 2u)).x;
                    _2776 = _2775 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2776)
                    {
                        frontier_phi_77_pred = _2765;
                        frontier_phi_77_pred_1 = _2764;
                        frontier_phi_77_pred_2 = _2763;
                        frontier_phi_77_pred_3 = _2762;
                        frontier_phi_77_pred_4 = _2761;
                        frontier_phi_77_pred_5 = _2760;
                    }
                    else
                    {
                        float _2969;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _2982 = _2760;
                        float _2983 = _2761;
                        float _2984 = _2762;
                        float _2985 = _2763;
                        float _2986 = _2764;
                        float _2987 = _2765;
                        uint _2988 = _2775;
                        uint _2989;
                        vec4 _3014;
                        float _3015;
                        vec4 _3030;
                        vec3 _3042;
                        vec4 _3058;
                        vec4 _3074;
                        float _3120;
                        bool _3121;
                        for (;;)
                        {
                            uint _2999 = ((_2766 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2988));
                            _2989 = (_2988 + 4294967295u) & _2988;
                            uint _3001 = _2999 * 40u;
                            _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            _3015 = _3014.w;
                            uint _3017 = (_2999 * 40u) + 4u;
                            _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            uint _3032 = (_2999 * 40u) + 8u;
                            _3042 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3032 + 2u)).x));
                            uint _3045 = (_2999 * 40u) + 16u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            uint _3061 = (_2999 * 40u) + 20u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3076 = (_2999 * 40u) + 24u;
                            vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3095 = (_2999 * 40u) + 28u;
                            vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            _3120 = fma(_2334, _3108.z, fma(_2333, _3108.y, _3108.x * _2332)) + _3108.w;
                            _3121 = !((fma(_2334, _3089.z, fma(_2333, _3089.y, _3089.x * _2332)) + _3089.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3121)
                            {
                                float _3148 = _3014.x - _2332;
                                float _3149 = _3014.y - _2333;
                                float _3150 = _3014.z - _2334;
                                float _3151 = dot(vec3(_3148, _3149, _3150), vec3(_3148, _3149, _3150));
                                float _3154 = inversesqrt(_3151);
                                float _3155 = _3154 * _3148;
                                float _3156 = _3154 * _3149;
                                float _3157 = _3154 * _3150;
                                float _3161 = 1.0 - (_3151 / (_3015 * _3015));
                                float _4277 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3162 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3166 = sqrt(_3151) * _3030.w;
                                float _3168 = 1.39999997615814208984375 / (_3166 + 1.39999997615814208984375);
                                float _3169 = _3168 * _3168;
                                float _3172 = ((1.0 - _3169) * dot(vec3(_3155, _3156, _3157), vec3(_580, _583, _586))) + _3169;
                                float _3175 = _3166 * _3166;
                                float _3179 = (fma(_2334, _3058.z, fma(_2333, _3058.y, _3058.x * _2332)) + _3058.w) / _3120;
                                float _3180 = (fma(_2334, _3074.z, fma(_2333, _3074.y, _3074.x * _2332)) + _3074.w) / _3120;
                                float _3184 = 1.0 - dot(vec2(_3179, _3180), vec2(_3179, _3180));
                                float _4293 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                                float _3185 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3186 = _3185 * (((isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))) * _3162) / ((_3175 * 0.699999988079071044921875) + 1.0));
                                float _3198 = exp2(log2(1.0 / ((_3175 * 3.5) + 5.0)) * 0.25);
                                float _3199 = 1.0 - _640;
                                float _3206 = sqrt(1.0 - ((1.0 - (_3199 * _3199)) * (1.0 - (_3198 * _3198))));
                                float _3207 = _3206 * _3206;
                                float _3208 = _3207 * _3207;
                                float _3209 = _3155 - _2626;
                                float _3210 = _3156 - _2627;
                                float _3211 = _3157 - _2628;
                                float _3215 = inversesqrt(dot(vec3(_3209, _3210, _3211), vec3(_3209, _3210, _3211)));
                                float _3219 = dot(vec3(_580, _583, _586), vec3((-0.0) - _2626, (-0.0) - _2627, (-0.0) - _2628));
                                float _4304 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3222 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3223 = dot(vec3(_580, _583, _586), vec3(_3215 * _3209, _3215 * _3210, _3215 * _3211));
                                float _4315 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3226 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3230 = ((_3226 * _3226) * (_3208 + (-1.0))) + 1.0;
                                float _3231 = _3168 * _3207;
                                float _3232 = _3231 * _3231;
                                float _3238 = ((1.0 - _3232) * dot(vec3(_580, _583, _586), vec3(_3155, _3156, _3157))) + _3232;
                                float _4326 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3240 = 1.0 - _3207;
                                float _3250 = (0.5 / (((_3239 * ((_3222 * _3240) + _3207)) + 9.9999999392252902907785028219223e-09) + (((_3239 * _3240) + _3207) * _3222))) * _3239;
                                float _4337 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3260 = (_3185 * _3162) * (((_3208 * 3.1415927410125732421875) * (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) / ((_3230 * _3230) * ((_3175 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3186 * _3030.y;
                                frontier_phi_83_pred_1 = _3186 * _3030.x;
                                frontier_phi_83_pred_2 = _3260 * _3042.z;
                                frontier_phi_83_pred_3 = _3260 * _3042.y;
                                frontier_phi_83_pred_4 = _3260 * _3042.x;
                                frontier_phi_83_pred_5 = _3186 * _3030.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3268 = frontier_phi_83_pred;
                            _3267 = frontier_phi_83_pred_1;
                            _3266 = frontier_phi_83_pred_2;
                            _3265 = frontier_phi_83_pred_3;
                            _3264 = frontier_phi_83_pred_4;
                            _3269 = frontier_phi_83_pred_5;
                            _2972 = _3267 + _2985;
                            _2973 = _3268 + _2986;
                            _2974 = _3269 + _2987;
                            _2969 = _3264 + _2982;
                            _2970 = _3265 + _2983;
                            _2971 = _3266 + _2984;
                            if (_2989 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2982 = _2969;
                                _2983 = _2970;
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2989;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2974;
                        frontier_phi_77_pred_1 = _2973;
                        frontier_phi_77_pred_2 = _2972;
                        frontier_phi_77_pred_3 = _2971;
                        frontier_phi_77_pred_4 = _2970;
                        frontier_phi_77_pred_5 = _2969;
                    }
                    _2611 = frontier_phi_77_pred;
                    _2609 = frontier_phi_77_pred_1;
                    _2607 = frontier_phi_77_pred_2;
                    _2605 = frontier_phi_77_pred_3;
                    _2603 = frontier_phi_77_pred_4;
                    _2601 = frontier_phi_77_pred_5;
                    uint _2767 = _2766 + 1u;
                    if (_2767 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2760 = _2601;
                        _2761 = _2603;
                        _2762 = _2605;
                        _2763 = _2607;
                        _2764 = _2609;
                        _2765 = _2611;
                        _2766 = _2767;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2605;
                frontier_phi_58_59_ladder_1 = _2611;
                frontier_phi_58_59_ladder_2 = _2609;
                frontier_phi_58_59_ladder_3 = _2607;
                frontier_phi_58_59_ladder_4 = _2603;
                frontier_phi_58_59_ladder_5 = _2601;
            }
            else
            {
                frontier_phi_58_59_ladder = _2483;
                frontier_phi_58_59_ladder_1 = _2489;
                frontier_phi_58_59_ladder_2 = _2487;
                frontier_phi_58_59_ladder_3 = _2485;
                frontier_phi_58_59_ladder_4 = _2481;
                frontier_phi_58_59_ladder_5 = _2479;
            }
            _2600 = frontier_phi_58_59_ladder_5;
            _2602 = frontier_phi_58_59_ladder_4;
            _2604 = frontier_phi_58_59_ladder;
            _2606 = frontier_phi_58_59_ladder_3;
            _2608 = frontier_phi_58_59_ladder_2;
            _2610 = frontier_phi_58_59_ladder_1;
        }
        float _2615 = isnan(1.0) ? _624 : (isnan(_624) ? 1.0 : min(_624, 1.0));
        _2391 = (_2615 * _2606) + _1843;
        _2393 = (_2615 * _2608) + _1845;
        _2395 = (_2615 * _2610) + _1847;
        _2397 = ((_2600 * 0.039999999105930328369140625) * _2615) + _2176;
        _2399 = ((_2602 * 0.039999999105930328369140625) * _2615) + _2178;
        _2401 = ((_2604 * 0.039999999105930328369140625) * _2615) + _2180;
    }
    else
    {
        _2391 = _1843;
        _2393 = _1845;
        _2395 = _1847;
        _2397 = _2176;
        _2399 = _2178;
        _2401 = _2180;
    }
    float _4353 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4364 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4375 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _2418 = ((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2391 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _624))) + ((_2397 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _1460)) * cbPerFrame._m0[3u].x);
    float _2419 = ((isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2393 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _624))) + ((_2399 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1460)) * cbPerFrame._m0[3u].x);
    float _2420 = ((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2395 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _624))) + ((_2401 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1460)) * cbPerFrame._m0[3u].x);
    uint _2421 = _224 + 6u;
    float _2429 = _559 / cbSceneParam._m0[86u].x;
    float _2430 = _560 / cbSceneParam._m0[86u].y;
    vec4 _2444 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2429, _2430, (log2((isnan(cbSceneParam._m0[77u].w) ? _480 : (isnan(_480) ? cbSceneParam._m0[77u].w : min(_480, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2446 = _2444.x;
    float _2447 = _2444.y;
    float _2448 = _2444.z;
    float _2449 = _2444.w;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    if (_480 > cbSceneParam._m0[78u].w)
    {
        float _2504 = isnan(_480) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _480 : min(cbSceneParam._m0[80u].w, _480));
        float _2505 = _2504 / _480;
        float _2516 = _2505 * _531;
        float _2517 = _532 * _2505;
        float _2518 = (-0.0) - _2517;
        float _2520 = _2505 * _533;
        float _2522 = (cbSceneParam._m0[77u].w * _2518) / _2504;
        float _2523 = _2522 + cbSceneParam._m0[79u].w;
        float _2524 = cbSceneParam._m0[79u].w - _2517;
        float _2530 = sqrt(((_2516 * _2516) + (_2517 * _2517)) + (_2520 * _2520));
        float _2533 = (1.0 - (cbSceneParam._m0[77u].w / _2504)) * _2530;
        float _2538 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2540 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2717;
        if (abs((_2518 - _2522) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2717 = ((((_2523 > 0.0) ? exp2(_2538 * _2523) : (2.0 - exp2(_2540 * _2523))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2533;
        }
        else
        {
            float _2661 = 1.0 / cbSceneParam._m0[80u].x;
            float _2662 = isnan(_2524) ? _2523 : (isnan(_2523) ? _2524 : max(_2523, _2524));
            float _2663 = isnan(_2524) ? _2523 : (isnan(_2523) ? _2524 : min(_2523, _2524));
            float _2672 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : min(_2662, 0.0));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            _2717 = ((abs(_2530 / _2518) * cbSceneParam._m0[80u].y) * ((((_2672 - _2673) * 2.0) - ((exp2(_2538 * (isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0)))) - exp2(_2538 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0))))) * _2661)) - ((exp2(_2540 * _2672) - exp2(_2540 * _2673)) * _2661))) + (_2533 * cbSceneParam._m0[80u].z);
        }
        vec4 _2719 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2429, _2430, 1.0), 0.0);
        float _2728 = exp2((_2717 * (-1.44269502162933349609375)) * (1.0 - _2719.w));
        float _2729 = log2(_2728);
        float _2745 = log2(_2449);
        _2542 = (exp2(_2745 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].x)) * _2719.x) / cbSceneParam._m0[78u].x)) + _2446;
        _2544 = (exp2(_2745 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].y)) * _2719.y) / cbSceneParam._m0[78u].y)) + _2447;
        _2546 = (exp2(_2745 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2729 * cbSceneParam._m0[78u].z)) * _2719.z) / cbSceneParam._m0[78u].z)) + _2448;
        _2548 = _2728 * _2449;
    }
    else
    {
        _2542 = _2446;
        _2544 = _2447;
        _2546 = _2448;
        _2548 = _2449;
    }
    bool _2755;
    vec4 _2558;
    vec4 _2580;
    float _2582;
    float _2586;
    float _2587;
    float _2588;
    float _2589;
    bool _2599;
    for (;;)
    {
        _2558 = cbMatDynParam._m0[0u];
        float _2560 = roundEven(_2558.y);
        bool _2561 = _2560 == 3.0;
        float _2562 = log2(_2548);
        float _2569 = exp2(_2562 * cbSceneParam._m0[78u].x) * _2418;
        float _2570 = exp2(_2562 * cbSceneParam._m0[78u].y) * _2419;
        float _2571 = exp2(_2562 * cbSceneParam._m0[78u].z) * _2420;
        float _2578 = _547 + (-0.5);
        _2580 = cbMtdParam._m0[1u];
        _2582 = _2580.y * _2578;
        float _2585 = (_2560 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2586 = _2585 * (_2561 ? _2569 : (_2569 + (cbSceneParam._m0[72u].w * _2542)));
        _2587 = _2585 * (_2561 ? _2570 : (_2570 + (cbSceneParam._m0[72u].w * _2544)));
        _2588 = _2585 * (_2561 ? _2571 : (_2571 + (cbSceneParam._m0[72u].w * _2546)));
        _2589 = _2578 * 0.999000012874603271484375;
        _2599 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2599)
        {
            if ((cbInstanceData._m0[_224 + 7u].x + _2589) < 0.5)
            {
                _2755 = true;
                break;
            }
        }
        uint _2696 = _599 + uint(_2558.w);
        if ((cbInstanceData._m0[_2696].w < 1.0) && ((cbInstanceData._m0[_2696].w + _2589) < 0.5))
        {
            _2755 = true;
            break;
        }
        if ((_2582 + 1.0) < _2580.x)
        {
            _2755 = true;
            break;
        }
        _2755 = false;
        break;
    }
    float _2960;
    if (_2755)
    {
        discard_state = true;
        _2960 = 0.0;
    }
    else
    {
        _2960 = cbInstanceData._m0[_2421].w;
    }
    SV_Target.x = _2586;
    SV_Target.y = _2587;
    SV_Target.z = _2588;
    SV_Target.w = _2960;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2421].w;
    discard_exit();
}


