#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1318;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3906 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3917 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _3928 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    uint _275 = uint(roundEven(NORMAL.w)) * 13u;
    uint _280 = _275 + 1u;
    uint _284 = _275 + 2u;
    float _293 = sqrt(((cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x) + (cbInstanceData._m0[_275].x * cbInstanceData._m0[_275].x)) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x));
    float _294 = _293 * TEXCOORD.z;
    float _295 = _293 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _294) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _295) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _294) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _295) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _406 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_396 - _406) * cbMtdParam._m0[24u].x) + _406) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3939 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _431 = (_424 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _432 = (_424 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _433 = (_424 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    float _437 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _308.x) * _431;
    float _440 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _308.y) * _432;
    float _443 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _308.z) * _433;
    float _450 = ((_431 - _437) * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) + _437;
    float _451 = ((_432 - _440) * (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) + _440;
    float _452 = ((_433 - _443) * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) + _443;
    vec4 _470 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _294) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _295) + cbTextureTilingScale._m0[20u].w));
    vec4 _497 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _294) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _295) + cbTextureTilingScale._m0[4u].w));
    vec4 _514 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _516 = _514.x;
    float _517 = _514.y;
    float _518 = _514.z;
    float _527 = ((_497.z - _518) * _424) + _518;
    float _530 = ((((_497.x - _516) * _424) + _516) * 2.0) + (-1.0);
    float _531 = ((((_497.y - _517) * _424) + _517) * 2.0) + (-1.0);
    float _532 = dot(vec2(_530, _531), vec2(_530, _531));
    float _3950 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _537 = sqrt(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))));
    float _540 = _530 + ((((_470.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _541 = _531 + ((((_470.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _544 = fma(_537, _244, fma(_541, _251, _540 * _237));
    float _547 = fma(_537, _245, fma(_541, _252, _540 * _238));
    float _550 = fma(_537, _246, fma(_541, _253, _540 * _239));
    float _554 = inversesqrt(dot(vec3(_544, _547, _550), vec3(_544, _547, _550)));
    vec4 _570 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _598 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _294) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _295) + cbTextureTilingScale._m0[11u].w));
    float _600 = _598.x;
    float _601 = 1.0 - _600;
    float _607 = (cbMtdParam._m0[19u].x + dot(vec4(_554 * _544, _554 * _547, _554 * _550, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_600 - _601) * cbMtdParam._m0[24u].z) + _601) * cbMtdParam._m0[21u].z);
    float _3961 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _608 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _610 = (-0.0) - cbMtdParam._m0[24u].y;
    float _612 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _612 : (isnan(_612) ? 1.0 : min(_612, 1.0));
    float _620 = _608 - ((_608 * TEXCOORD_8.x) * _613);
    float _621 = _608 - ((_608 * TEXCOORD_8.y) * _613);
    float _622 = _608 - ((_608 * TEXCOORD_8.z) * _613);
    float _629 = (_620 * (cbMtdParam._m0[17u].x - _450)) + _450;
    float _630 = (_621 * (cbMtdParam._m0[17u].y - _451)) + _451;
    float _631 = (_622 * (cbMtdParam._m0[17u].z - _452)) + _452;
    vec4 _643 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _294) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _295) + cbTextureTilingScale._m0[19u].w));
    float _645 = _643.x;
    float _646 = 1.0 - _645;
    float _672 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_645 - _646) * cbMtdParam._m0[24u].w) + _646) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3982 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _673 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _681 = ((((cbMtdParam._m0[10u].x - _629) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _673) + _629;
    float _682 = ((((cbMtdParam._m0[10u].y - _630) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _673) + _630;
    float _683 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _631)) * _673) + _631;
    float _688 = (((_470.z - _527) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _527;
    vec4 _702 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _294) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _295) + cbTextureTilingScale._m0[15u].w));
    float _709 = (_702.x * 2.0) + (-1.0);
    float _710 = (_702.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _3993 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _719 = ((_702.z - _688) * _620) + _688;
    float _722 = ((cbMtdParam._m0[23u].y - _719) * _673) + _719;
    vec4 _741 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _294) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _295) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _747 = (_741.x * 2.0) + (-1.0);
    float _748 = (_741.y * 2.0) + (-1.0);
    float _749 = dot(vec2(_747, _748), vec2(_747, _748));
    float _4004 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _764 = ((sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) - _537) * _622) + _537;
    float _767 = (((_709 - _540) * _620) + _540) + (cbMtdParam._m0[21u].x * _540);
    float _768 = (((_710 - _541) * _621) + _541) + (cbMtdParam._m0[21u].x * _541);
    float _779 = (((_747 - _767) + (_767 * cbMtdParam._m0[22u].z)) * _673) + _767;
    float _780 = (((_748 - _768) + (_768 * cbMtdParam._m0[22u].z)) * _673) + _768;
    float _781 = (_673 * (sqrt(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) - _764)) + _764;
    float _783 = cbMtdParam._m0[22u].x + _570.w;
    float _786 = fma(_781, _244, fma(_780, _251, _779 * _237));
    float _789 = fma(_781, _245, fma(_780, _252, _779 * _238));
    float _792 = fma(_781, _246, fma(_780, _253, _779 * _239));
    float _796 = inversesqrt(dot(vec3(_786, _789, _792), vec3(_786, _789, _792)));
    float _797 = _796 * _786;
    float _798 = _796 * _789;
    float _799 = _796 * _792;
    float _4015 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _800 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4037 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _4048 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4059 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _869 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _859);
    float _870 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _859);
    float _871 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _859);
    float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
    float _876 = _869 * _875;
    float _877 = _870 * _875;
    float _878 = _871 * _875;
    float _884 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _885 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _903 = fma(_799, cbSceneParam._m0[5u].z, fma(_798, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _797));
    float _906 = fma(_799, cbSceneParam._m0[6u].z, fma(_798, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _797));
    float _909 = fma(_799, cbSceneParam._m0[7u].z, fma(_798, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _797));
    uint _923 = (_275 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _929 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_923].x;
    float _930 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_923].y;
    float _931 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_923].z;
    float _4070 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _4081 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    vec4 _943 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _884, cbSceneParam._m0[86u].y * _885));
    float _947 = ((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * TEXCOORD_5.w) * _943.x;
    float _948 = dot(vec3(_797, _798, _799), vec3(_876, _877, _878));
    float _951 = _948 * 2.0;
    float _955 = (_951 * _797) - _876;
    float _956 = (_951 * _798) - _877;
    float _957 = (_951 * _799) - _878;
    float _961 = abs(dot(vec3(_876, _877, _878), vec3(_797, _798, _799)));
    float _4103 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _963 = sqrt(_800);
    float _976 = exp2((_963 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_963 * 3.0));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1317;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1042 = fma(_1016, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008));
        float _1046 = fma(_1016, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008));
        float _1050 = fma(_1016, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008));
        float _1075 = _1008 + _797;
        float _1076 = _1012 + _798;
        float _1077 = _1016 + _799;
        float _1087 = fma(_1077, cbModelParam._m0[26u].z, fma(_1076, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1075)) - _1042;
        float _1088 = fma(_1077, cbModelParam._m0[27u].z, fma(_1076, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1075)) - _1046;
        float _1089 = fma(_1077, cbModelParam._m0[28u].z, fma(_1076, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1075)) - _1050;
        float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
        float _1106 = ((_1093 * _1087) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1042 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1093 * _1088) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1046 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1093 * _1089) / cbModelParam._m0[34u].z) + ((((((_1050 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1106, _1107, _1108), 0.0);
        float _1145 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1111.x + (-0.5));
        float _1147 = _1145 * (_1111.y + (-0.5));
        float _1148 = _1145 * (_1111.z + (-0.5));
        float _1155 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1118.x + (-0.5));
        float _1157 = _1155 * (_1118.y + (-0.5));
        float _1158 = _1155 * (_1118.z + (-0.5));
        float _1165 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1125.x + (-0.5));
        float _1167 = _1165 * (_1125.y + (-0.5));
        float _1168 = _1165 * (_1125.z + (-0.5));
        float _1175 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1132.x + (-0.5));
        float _1177 = _1175 * (_1132.y + (-0.5));
        float _1178 = _1175 * (_1132.z + (-0.5));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = _1146 * 0.5;
        float _1183 = _1156 * 0.5;
        float _1184 = _1166 * 0.5;
        float _1185 = dot(vec3(_1182, _1183, _1184), vec3(_1182, _1183, _1184));
        float _1190 = (_1185 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1185);
        float _1199 = (dot(vec3(_797, _798, _799), vec3(_1190 * _1182, _1190 * _1183, _1190 * _1184)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1209 = sqrt(((_1183 * _1183) + (_1182 * _1182)) + (_1184 * _1184)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4151 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1211 + 1.0))) + _1216) * _1179;
        float _1226 = _1147 * 0.5;
        float _1227 = _1157 * 0.5;
        float _1228 = _1167 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_797, _798, _799), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _4184 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1253 + 1.0))) + _1258) * _1180;
        float _1268 = _1148 * 0.5;
        float _1269 = _1158 * 0.5;
        float _1270 = _1168 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_797, _798, _799), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _4217 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1295 + 1.0))) + _1300) * _1181;
        _1317 = _1148;
        _1319 = _1147;
        _1320 = _1146;
        _1321 = _1158;
        _1322 = _1157;
        _1323 = _1156;
        _1324 = _1168;
        _1325 = _1167;
        _1326 = _1166;
        _1327 = _1181;
        _1328 = _1180;
        _1329 = _1179;
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
    }
    else
    {
        _1317 = _1318;
        _1319 = _1318;
        _1320 = _1318;
        _1321 = _1318;
        _1322 = _1318;
        _1323 = _1318;
        _1324 = _1318;
        _1325 = _1318;
        _1326 = _1318;
        _1327 = _1318;
        _1328 = _1318;
        _1329 = _1318;
        _1330 = 0.0;
        _1331 = 0.0;
        _1332 = 0.0;
    }
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1357 = fma(_1016, cbModelParam._m0[30u].z, fma(_1012, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008));
        float _1361 = fma(_1016, cbModelParam._m0[31u].z, fma(_1012, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008));
        float _1365 = fma(_1016, cbModelParam._m0[32u].z, fma(_1012, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008));
        float _1388 = _1008 + _797;
        float _1389 = _1012 + _798;
        float _1390 = _1016 + _799;
        float _1400 = fma(_1390, cbModelParam._m0[30u].z, fma(_1389, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1388)) - _1357;
        float _1401 = fma(_1390, cbModelParam._m0[31u].z, fma(_1389, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1388)) - _1361;
        float _1402 = fma(_1390, cbModelParam._m0[32u].z, fma(_1389, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1388)) - _1365;
        float _1406 = inversesqrt(dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402)));
        float _1419 = ((_1406 * _1400) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1357 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1406 * _1401) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1361 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1406 * _1402) / cbModelParam._m0[35u].z) + ((((((_1365 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1419, _1420, _1421), 0.0);
        float _1456 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1423.x + (-0.5));
        float _1458 = _1456 * (_1423.y + (-0.5));
        float _1459 = _1456 * (_1423.z + (-0.5));
        float _1466 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1430.x + (-0.5));
        float _1468 = _1466 * (_1430.y + (-0.5));
        float _1469 = _1466 * (_1430.z + (-0.5));
        float _1476 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1437.x + (-0.5));
        float _1478 = _1476 * (_1437.y + (-0.5));
        float _1479 = _1476 * (_1437.z + (-0.5));
        float _1486 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1444.x + (-0.5));
        float _1488 = _1486 * (_1444.y + (-0.5));
        float _1489 = _1486 * (_1444.z + (-0.5));
        float _1490 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = _1457 * 0.5;
        float _1494 = _1467 * 0.5;
        float _1495 = _1477 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_797, _798, _799), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1490 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4280 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1520 + 1.0))) + _1525) * _1490;
        float _1535 = _1458 * 0.5;
        float _1536 = _1468 * 0.5;
        float _1537 = _1478 * 0.5;
        float _1538 = dot(vec3(_1535, _1536, _1537), vec3(_1535, _1536, _1537));
        float _1543 = (_1538 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1538);
        float _1551 = (dot(vec3(_797, _798, _799), vec3(_1543 * _1535, _1543 * _1536, _1543 * _1537)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1560 = sqrt(((_1536 * _1536) + (_1535 * _1535)) + (_1537 * _1537)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1562 = _1561 * 2.0;
        float _1566 = (1.0 - _1561) / (_1561 + 1.0);
        float _4313 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1576 = ((((1.0 - _1567) * (_1562 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1562 + 1.0))) + _1567) * _1491;
        float _1577 = _1459 * 0.5;
        float _1578 = _1469 * 0.5;
        float _1579 = _1479 * 0.5;
        float _1580 = dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579));
        float _1585 = (_1580 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1580);
        float _1593 = (dot(vec3(_797, _798, _799), vec3(_1585 * _1577, _1585 * _1578, _1585 * _1579)) + 1.0) * 0.5;
        float _4324 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1602 = sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4335 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1604 = _1603 * 2.0;
        float _1608 = (1.0 - _1603) / (_1603 + 1.0);
        float _4346 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1618 = ((((1.0 - _1609) * (_1604 + 2.0)) * exp2(log2(isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_1604 + 1.0))) + _1609) * _1492;
        _1626 = _1459;
        _1627 = _1458;
        _1628 = _1457;
        _1629 = _1469;
        _1630 = _1468;
        _1631 = _1467;
        _1632 = _1479;
        _1633 = _1478;
        _1634 = _1477;
        _1635 = _1492;
        _1636 = _1491;
        _1637 = _1490;
        _1638 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
    }
    else
    {
        _1626 = _1318;
        _1627 = _1318;
        _1628 = _1318;
        _1629 = _1318;
        _1630 = _1318;
        _1631 = _1318;
        _1632 = _1318;
        _1633 = _1318;
        _1634 = _1318;
        _1635 = _1318;
        _1636 = _1318;
        _1637 = _1318;
        _1638 = 0.0;
        _1639 = 0.0;
        _1640 = 0.0;
    }
    float _1650 = (cbModelParam._m0[1u].x * (_1638 - _1330)) + _1330;
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1331)) + _1331;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1332)) + _1332;
    float _1673 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1676 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1679 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1650));
    float _1694 = _955 * 0.5;
    float _1695 = _956 * 0.5;
    float _1696 = _957 * 0.5;
    float _1697 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1700 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1703 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1626, _1629, _1632, _1635));
    float _1737;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1710 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1317, _1321, _1324, _1327));
        float _1714 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1718 = dot(vec4(_1694, _1695, _1696, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1725 = dot(vec4(cbModelParam._m0[39u]), vec4(_1694, _1695, _1696, 1.0));
        _1737 = dot(vec3(isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1737 = 1.0;
    }
    float _1748;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1739 = dot(vec4(cbModelParam._m0[40u]), vec4(_1694, _1695, _1696, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1739) ? 0.0 : (isnan(0.0) ? _1739 : max(0.0, _1739))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1752 = (_1748 * cbModelParam._m0[1u].x) + (_1737 * (1.0 - cbModelParam._m0[1u].x));
    float _1762 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _800);
    float _1763 = isnan(_1762) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1762 : min(cbModelParam._m0[25u].z, _1762));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1811 = fma(_1016, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008)) + cbModelParam._m0[13u].w;
        float _1815 = fma(_1016, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008)) + cbModelParam._m0[14u].w;
        float _1819 = fma(_1016, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008)) + cbModelParam._m0[15u].w;
        float _1822 = fma(_957, cbModelParam._m0[13u].z, fma(_956, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _955));
        float _1825 = fma(_957, cbModelParam._m0[14u].z, fma(_956, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _955));
        float _1828 = fma(_957, cbModelParam._m0[15u].z, fma(_956, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _955));
        float _1856;
        if (_1822 > 0.0)
        {
            _1856 = abs((1.0 - _1811) / _1822);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1811 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1856 = frontier_phi_14_12_ladder;
        }
        float _2026;
        if (_1825 > 0.0)
        {
            _2026 = abs((1.0 - _1815) / _1825);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1815 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2026 = frontier_phi_23_19_ladder;
        }
        float _2321;
        if (_1828 > 0.0)
        {
            _2321 = abs((1.0 - _1819) / _1828);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1819 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2321 = frontier_phi_35_30_ladder;
        }
        float _2323 = isnan(_2026) ? _1856 : (isnan(_1856) ? _2026 : min(_1856, _2026));
        float _2324 = isnan(_2321) ? _2323 : (isnan(_2323) ? _2321 : min(_2323, _2321));
        float _2328 = (_2324 * _1822) + _1811;
        float _2329 = (_2324 * _1825) + _1815;
        float _2330 = (_2324 * _1828) + _1819;
        float _2331 = _2324 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2331;
        float _2335 = _2331 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 > _2335) || ((_2329 < _2333) || ((_2328 < _2333) || (_2328 > _2335))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2475 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2330, cbModelParam._m0[9u].z, fma(_2329, cbModelParam._m0[9u].y, _2328 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2330, cbModelParam._m0[10u].z, fma(_2329, cbModelParam._m0[10u].y, _2328 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2330, cbModelParam._m0[11u].z, fma(_2329, cbModelParam._m0[11u].y, _2328 * cbModelParam._m0[11u].x))), _1763);
            frontier_phi_13_35_ladder = _2475.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2475.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2475.x * cbModelParam._m0[1u].y;
        }
        _1844 = frontier_phi_13_35_ladder_2;
        _1846 = frontier_phi_13_35_ladder_1;
        _1848 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1832 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_955, _956, _957), _1763);
        _1844 = _1832.x * cbModelParam._m0[1u].y;
        _1846 = _1832.y * cbModelParam._m0[1u].y;
        _1848 = _1832.z * cbModelParam._m0[1u].y;
    }
    float _1852 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _800);
    float _1853 = isnan(_1852) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1852 : min(cbModelParam._m0[25u].w, _1852));
    float _1943;
    float _1945;
    float _1947;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1907 = fma(_1016, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008)) + cbModelParam._m0[21u].w;
        float _1911 = fma(_1016, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008)) + cbModelParam._m0[22u].w;
        float _1915 = fma(_1016, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008)) + cbModelParam._m0[23u].w;
        float _1918 = fma(_957, cbModelParam._m0[21u].z, fma(_956, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _955));
        float _1921 = fma(_957, cbModelParam._m0[22u].z, fma(_956, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _955));
        float _1924 = fma(_957, cbModelParam._m0[23u].z, fma(_956, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _955));
        float _2031;
        if (_1918 > 0.0)
        {
            _2031 = abs((1.0 - _1907) / _1918);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1907 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2031 = frontier_phi_25_21_ladder;
        }
        float _2348;
        if (_1921 > 0.0)
        {
            _2348 = abs((1.0 - _1911) / _1921);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1911 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2348 = frontier_phi_37_32_ladder;
        }
        float _2675;
        if (_1924 > 0.0)
        {
            _2675 = abs((1.0 - _1915) / _1924);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1915 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2675 = frontier_phi_47_44_ladder;
        }
        float _2677 = isnan(_2348) ? _2031 : (isnan(_2031) ? _2348 : min(_2031, _2348));
        float _2678 = isnan(_2675) ? _2677 : (isnan(_2677) ? _2675 : min(_2677, _2675));
        float _2682 = (_2678 * _1918) + _1907;
        float _2683 = (_2678 * _1921) + _1911;
        float _2684 = (_2678 * _1924) + _1915;
        float _2685 = _2678 * 9.9999997473787516355514526367188e-05;
        float _2686 = (-1.0) - _2685;
        float _2688 = _2685 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2684 > _2688) || ((_2684 < _2686) || ((_2683 > _2688) || ((_2683 < _2686) || ((_2682 < _2686) || (_2682 > _2688))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2802 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2684, cbModelParam._m0[17u].z, fma(_2683, cbModelParam._m0[17u].y, _2682 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2684, cbModelParam._m0[18u].z, fma(_2683, cbModelParam._m0[18u].y, _2682 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2684, cbModelParam._m0[19u].z, fma(_2683, cbModelParam._m0[19u].y, _2682 * cbModelParam._m0[19u].x))), _1853);
            frontier_phi_22_47_ladder = _2802.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2802.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2802.x * cbModelParam._m0[1u].z;
        }
        _1943 = frontier_phi_22_47_ladder_2;
        _1945 = frontier_phi_22_47_ladder_1;
        _1947 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_955, _956, _957), _1853);
        _1943 = _1927.x * cbModelParam._m0[1u].z;
        _1945 = _1927.y * cbModelParam._m0[1u].z;
        _1947 = _1927.z * cbModelParam._m0[1u].z;
    }
    float _1959 = ((((1.0 - _976) * ((_963 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_976 * _963)) * _947;
    float _1960 = _1959 * ((cbModelParam._m0[1u].w * (_1943 - _1844)) + _1844);
    float _1961 = _1959 * ((cbModelParam._m0[1u].w * (_1945 - _1846)) + _1846);
    float _1962 = _1959 * ((cbModelParam._m0[1u].w * (_1947 - _1848)) + _1848);
    float _1965 = fma(_1962, cbSceneParam._m0[89u].z, fma(_1961, cbSceneParam._m0[89u].y, _1960 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1962, cbSceneParam._m0[90u].z, fma(_1961, cbSceneParam._m0[90u].y, _1960 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1962, cbSceneParam._m0[91u].z, fma(_1961, cbSceneParam._m0[91u].y, _1960 * cbSceneParam._m0[91u].x));
    float _2005 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2009 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2013 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2018 = _2005 / _2017;
    float _2019 = _2009 / _2017;
    float _2020 = _2013 / _2017;
    float _2167;
    float _2168;
    float _2169;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2047 = ((uint(_2020 > cbSceneParam._m0[59u].y) + uint(_2020 > cbSceneParam._m0[59u].x)) + uint(_2020 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2048 = _2047 + 43u;
        uint _2056 = _2047 + 44u;
        uint _2064 = _2047 + 45u;
        uint _2072 = _2047 + 46u;
        float _2083 = fma(_2017, cbSceneParam._m0[_2048].w, fma(_2013, cbSceneParam._m0[_2048].z, fma(_2009, cbSceneParam._m0[_2048].y, _2005 * cbSceneParam._m0[_2048].x)));
        float _2087 = fma(_2017, cbSceneParam._m0[_2056].w, fma(_2013, cbSceneParam._m0[_2056].z, fma(_2009, cbSceneParam._m0[_2056].y, _2005 * cbSceneParam._m0[_2056].x)));
        float _2095 = fma(_2017, cbSceneParam._m0[_2072].w, fma(_2013, cbSceneParam._m0[_2072].z, fma(_2009, cbSceneParam._m0[_2072].y, _2005 * cbSceneParam._m0[_2072].x)));
        float _2100 = cbSceneParam._m0[33u].z * _2095;
        float _2102 = cbSceneParam._m0[33u].w * _2095;
        float _2105 = fma(_2017, cbSceneParam._m0[_2064].w, fma(_2013, cbSceneParam._m0[_2064].z, fma(_2009, cbSceneParam._m0[_2064].y, _2005 * cbSceneParam._m0[_2064].x))) / _2095;
        float _2153 = (cbSceneParam._m0[33u].x - sqrt(((_2019 * _2019) + (_2018 * _2018)) + (_2020 * _2020))) * cbSceneParam._m0[33u].y;
        float _4472 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2160 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2100 + _2083) / _2095, (_2102 + _2087) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2102 + _2083) / _2095, (_2087 - _2100) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 - _2100) / _2095, (_2087 - _2102) / _2095), _2105), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 - _2102) / _2095, (_2100 + _2087) / _2095), _2105), 0.0)).x), vec4(0.25)));
        _2167 = 1.0 - (_2160 * cbSceneParam._m0[34u].x);
        _2168 = 1.0 - (_2160 * cbSceneParam._m0[34u].y);
        _2169 = 1.0 - (_2160 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2167 = 1.0;
        _2168 = 1.0;
        _2169 = 1.0;
    }
    float _2233;
    float _2235;
    float _2237;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2221 = fma(_2017, cbSceneParam._m0[63u].w, fma(_2013, cbSceneParam._m0[63u].z, fma(_2009, cbSceneParam._m0[63u].y, _2005 * cbSceneParam._m0[63u].x)));
        float _2222 = fma(_2017, cbSceneParam._m0[60u].w, fma(_2013, cbSceneParam._m0[60u].z, fma(_2009, cbSceneParam._m0[60u].y, _2005 * cbSceneParam._m0[60u].x))) / _2221;
        float _2223 = fma(_2017, cbSceneParam._m0[61u].w, fma(_2013, cbSceneParam._m0[61u].z, fma(_2009, cbSceneParam._m0[61u].y, _2005 * cbSceneParam._m0[61u].x))) / _2221;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2222 >= cbSceneParam._m0[64u].x) && (_2223 >= cbSceneParam._m0[64u].y)) && (_2222 <= cbSceneParam._m0[64u].z)) && (_2223 <= cbSceneParam._m0[64u].w))
        {
            float _2361 = fma(_2017, cbSceneParam._m0[62u].w, fma(_2013, cbSceneParam._m0[62u].z, fma(_2009, cbSceneParam._m0[62u].y, _2005 * cbSceneParam._m0[62u].x))) / _2221;
            float _2365 = isnan(cbSceneParam._m0[41u].w) ? _2361 : (isnan(_2361) ? cbSceneParam._m0[41u].w : max(_2361, cbSceneParam._m0[41u].w));
            float _2408 = (cbSceneParam._m0[33u].x - sqrt(((_2019 * _2019) + (_2018 * _2018)) + (_2020 * _2020))) * cbSceneParam._m0[33u].y;
            float _4488 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
            float _2415 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2222, cbSceneParam._m0[33u].w + _2223), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2222, _2223 - cbSceneParam._m0[33u].z), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2222 - cbSceneParam._m0[33u].z, _2223 - cbSceneParam._m0[33u].w), _2365), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2222 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2223), _2365), 0.0)).x), vec4(0.25)));
            float _2419 = 1.0 - (_2415 * cbSceneParam._m0[34u].x);
            float _2420 = 1.0 - (_2415 * cbSceneParam._m0[34u].y);
            float _2421 = 1.0 - (_2415 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2421) ? _2169 : (isnan(_2169) ? _2421 : min(_2169, _2421));
            frontier_phi_34_33_ladder_1 = isnan(_2420) ? _2168 : (isnan(_2168) ? _2420 : min(_2168, _2420));
            frontier_phi_34_33_ladder_2 = isnan(_2419) ? _2167 : (isnan(_2167) ? _2419 : min(_2167, _2419));
        }
        else
        {
            frontier_phi_34_33_ladder = _2169;
            frontier_phi_34_33_ladder_1 = _2168;
            frontier_phi_34_33_ladder_2 = _2167;
        }
        _2233 = frontier_phi_34_33_ladder_2;
        _2235 = frontier_phi_34_33_ladder_1;
        _2237 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2233 = _2167;
        _2235 = _2168;
        _2237 = _2169;
    }
    uvec4 _2242 = floatBitsToUint(cbInstanceData._m0[_275 + 5u]);
    uint _2244 = _2242.x * 14u;
    uint _2245 = _2244 + 13u;
    float _2252 = _947 + (-1.0);
    float _2257 = (cbLight._m0[_2245].x * _2252) + 1.0;
    float _2258 = (cbLight._m0[_2245].y * _2252) + 1.0;
    float _2259 = (cbLight._m0[_2245].z * _2252) + 1.0;
    float _2260 = (cbLight._m0[_2245].w * _2252) + 1.0;
    uint _2261 = _2244 + 5u;
    float _2267 = isnan(1.0) ? _2258 : (isnan(_2258) ? 1.0 : min(_2258, 1.0));
    uint _2271 = _2244 + 4u;
    float _2280 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2284 = _2244 | 1u;
    float _2295 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_797, _798, _799));
    float _2298 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_797, _798, _799));
    float _4524 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _4535 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2303 = (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * 0.3183098733425140380859375;
    float _2305 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * 0.3183098733425140380859375;
    float _2312 = ((cbLight._m0[_2261].x * _2267) * _2305) + (((cbLight._m0[_2271].x * _2233) * _2280) * _2303);
    float _2313 = ((_2267 * cbLight._m0[_2261].y) * _2305) + (((cbLight._m0[_2271].y * _2235) * _2280) * _2303);
    float _2314 = ((_2267 * cbLight._m0[_2261].z) * _2305) + (((cbLight._m0[_2271].z * _2237) * _2280) * _2303);
    uvec4 _2318 = floatBitsToUint(cbLight._m0[_2244 + 12u]);
    bool _2320 = _2318.x == 0u;
    float _2422;
    float _2424;
    float _2426;
    if (_2320)
    {
        _2422 = _2312;
        _2424 = _2313;
        _2426 = _2314;
    }
    else
    {
        uint _2430 = _2244 + 6u;
        float _2446 = (dot(vec3(cbLight._m0[_2244 + 2u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2447 = _2446 * _2446;
        float _4546 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2448 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2449 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2422 = (((cbLight._m0[_2430].x * 0.3183098733425140380859375) * _2448) * _2449) + _2312;
        _2424 = (((cbLight._m0[_2430].y * 0.3183098733425140380859375) * _2448) * _2449) + _2313;
        _2426 = (((cbLight._m0[_2430].z * 0.3183098733425140380859375) * _2448) * _2449) + _2314;
    }
    bool _2429 = _2318.y == 0u;
    float _2484;
    float _2486;
    float _2488;
    if (_2429)
    {
        _2484 = _2422;
        _2486 = _2424;
        _2488 = _2426;
    }
    else
    {
        uint _2646 = _2244 + 7u;
        float _2662 = (dot(vec3(cbLight._m0[_2244 + 3u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2663 = _2662 * _2662;
        float _4562 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2664 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2665 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2484 = (((cbLight._m0[_2646].x * 0.3183098733425140380859375) * _2664) * _2665) + _2422;
        _2486 = (((cbLight._m0[_2646].y * 0.3183098733425140380859375) * _2664) * _2665) + _2424;
        _2488 = (((cbLight._m0[_2646].z * 0.3183098733425140380859375) * _2664) * _2665) + _2426;
    }
    uint _2491 = _2244 + 8u;
    float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2244].w)) * _800) * 0.949999988079071044921875);
    float _2505 = _2504 * _2504;
    float _2506 = cbLight._m0[_2244].x + _876;
    float _2507 = cbLight._m0[_2244].y + _877;
    float _2508 = cbLight._m0[_2244].z + _878;
    float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
    float _2513 = _2512 * _2506;
    float _2514 = _2512 * _2507;
    float _2515 = _2512 * _2508;
    float _2516 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2244].xyz));
    float _4578 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
    float _4589 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _2520 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
    float _2521 = dot(vec3(_797, _798, _799), vec3(_2513, _2514, _2515));
    float _4600 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _2525 = dot(vec3(cbLight._m0[_2244].xyz), vec3(_2513, _2514, _2515));
    float _4611 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2529 = _2505 * _2505;
    float _2533 = ((_2524 * _2524) * (_2529 + (-1.0))) + 1.0;
    float _2544 = (exp2(log2(1.0 - (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2545 = 1.0 - _2505;
    float _2556 = (0.5 / (((_2520 * ((_2519 * _2545) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2545) + _2505) * _2519))) * _2519;
    float _4622 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2558 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2529 / ((_2533 * _2533) * 3.141590118408203125));
    uint _2572 = _2244 + 9u;
    float _2583 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2284].w)) * _800) * 0.949999988079071044921875);
    float _2584 = _2583 * _2583;
    float _2585 = cbLight._m0[_2284].x + _876;
    float _2586 = cbLight._m0[_2284].y + _877;
    float _2587 = cbLight._m0[_2284].z + _878;
    float _2591 = inversesqrt(dot(vec3(_2585, _2586, _2587), vec3(_2585, _2586, _2587)));
    float _2592 = _2591 * _2585;
    float _2593 = _2591 * _2586;
    float _2594 = _2591 * _2587;
    float _2595 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2284].xyz));
    float _4633 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2598 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2599 = dot(vec3(_797, _798, _799), vec3(_2592, _2593, _2594));
    float _4644 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2602 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2603 = dot(vec3(cbLight._m0[_2284].xyz), vec3(_2592, _2593, _2594));
    float _4655 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2607 = _2584 * _2584;
    float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
    float _2620 = (exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2621 = 1.0 - _2584;
    float _2631 = (0.5 / (((_2520 * ((_2598 * _2621) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2621) + _2584) * _2598))) * _2598;
    float _4666 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2633 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
    float _2643 = (((_2620 * cbLight._m0[_2572].x) * _2633) * _2267) + ((((cbLight._m0[_2491].x * _2233) * _2544) * _2558) * _2280);
    float _2644 = (((_2620 * cbLight._m0[_2572].y) * _2633) * _2267) + ((((cbLight._m0[_2491].y * _2235) * _2544) * _2558) * _2280);
    float _2645 = (((_2620 * cbLight._m0[_2572].z) * _2633) * _2267) + ((((cbLight._m0[_2491].z * _2237) * _2544) * _2558) * _2280);
    float _2701;
    float _2703;
    float _2705;
    if (_2320)
    {
        _2701 = _2643;
        _2703 = _2644;
        _2705 = _2645;
    }
    else
    {
        uint _2707 = _2244 + 2u;
        uint _2711 = _2244 + 10u;
        float _2725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2707].w)) * _800) * 0.949999988079071044921875);
        float _2726 = _2725 * _2725;
        float _2727 = cbLight._m0[_2707].x + _876;
        float _2728 = cbLight._m0[_2707].y + _877;
        float _2729 = cbLight._m0[_2707].z + _878;
        float _2733 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
        float _2734 = _2733 * _2727;
        float _2735 = _2733 * _2728;
        float _2736 = _2733 * _2729;
        float _2737 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2707].xyz));
        float _4677 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2740 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2741 = dot(vec3(_797, _798, _799), vec3(_2734, _2735, _2736));
        float _4688 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2744 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2745 = dot(vec3(cbLight._m0[_2707].xyz), vec3(_2734, _2735, _2736));
        float _4699 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2749 = _2726 * _2726;
        float _2753 = ((_2744 * _2744) * (_2749 + (-1.0))) + 1.0;
        float _2762 = (exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2763 = 1.0 - _2726;
        float _2773 = (0.5 / (((_2520 * ((_2740 * _2763) + _2726)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2763) + _2726) * _2740))) * _2740;
        float _4710 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2775 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2749 / ((_2753 * _2753) * 3.141590118408203125));
        float _2776 = isnan(1.0) ? _2259 : (isnan(_2259) ? 1.0 : min(_2259, 1.0));
        _2701 = (((_2762 * cbLight._m0[_2711].x) * _2775) * _2776) + _2643;
        _2703 = (((_2762 * cbLight._m0[_2711].y) * _2775) * _2776) + _2644;
        _2705 = (((_2762 * cbLight._m0[_2711].z) * _2775) * _2776) + _2645;
    }
    float _2807;
    float _2809;
    float _2811;
    if (_2429)
    {
        _2807 = _2701;
        _2809 = _2703;
        _2811 = _2705;
    }
    else
    {
        uint _2818 = _2244 + 3u;
        uint _2822 = _2244 + 11u;
        float _2836 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2818].w)) * _800) * 0.949999988079071044921875);
        float _2837 = _2836 * _2836;
        float _2838 = cbLight._m0[_2818].x + _876;
        float _2839 = cbLight._m0[_2818].y + _877;
        float _2840 = cbLight._m0[_2818].z + _878;
        float _2844 = inversesqrt(dot(vec3(_2838, _2839, _2840), vec3(_2838, _2839, _2840)));
        float _2845 = _2844 * _2838;
        float _2846 = _2844 * _2839;
        float _2847 = _2844 * _2840;
        float _2848 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2818].xyz));
        float _4726 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2851 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2852 = dot(vec3(_797, _798, _799), vec3(_2845, _2846, _2847));
        float _4737 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2855 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2856 = dot(vec3(cbLight._m0[_2818].xyz), vec3(_2845, _2846, _2847));
        float _4748 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2860 = _2837 * _2837;
        float _2864 = ((_2855 * _2855) * (_2860 + (-1.0))) + 1.0;
        float _2873 = (exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2874 = 1.0 - _2837;
        float _2884 = (0.5 / (((_2520 * ((_2851 * _2874) + _2837)) + 9.9999999392252902907785028219223e-09) + (((_2520 * _2874) + _2837) * _2851))) * _2851;
        float _4759 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2886 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2860 / ((_2864 * _2864) * 3.141590118408203125));
        float _2887 = isnan(1.0) ? _2260 : (isnan(_2260) ? 1.0 : min(_2260, 1.0));
        _2807 = (((_2873 * cbLight._m0[_2822].x) * _2886) * _2887) + _2701;
        _2809 = (((_2873 * cbLight._m0[_2822].y) * _2886) * _2887) + _2703;
        _2811 = (((_2873 * cbLight._m0[_2822].z) * _2886) * _2887) + _2705;
    }
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    if (_2242.y == 0u)
    {
        uvec4 _2908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2909 = _2908.x;
        uint _2920 = uint((float(_2908.y) * floor(float(uint(cbSceneParam._m0[85u].y * _885) / _2909))) + floor(float(uint(cbSceneParam._m0[85u].x * _884) / _2909)));
        float _2930 = (log2(_2020 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2931 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        uint _2934 = uint(isnan(14.0) ? _2931 : (isnan(_2931) ? 14.0 : min(_2931, 14.0)));
        uvec4 _2939 = texelFetch(g_lightClusterGridBuffer, int(((_2934 << 2u) + (_2920 << 6u)) >> 2u));
        uint _2940 = _2939.x;
        uint _2941 = _2908.z;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((((1u << ((_2941 >> 4u) & 15u)) + 4294967295u) & _2940) == 0u) || ((_2941 & 240u) == 0u))
        {
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
        }
        else
        {
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            uint _3170 = 0u;
            uint _3179;
            bool _3180;
            for (;;)
            {
                _3179 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3170 << 2u)) >> 2u)).x;
                _3180 = _3179 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3180)
                {
                    frontier_phi_66_pred = _3169;
                    frontier_phi_66_pred_1 = _3168;
                    frontier_phi_66_pred_2 = _3167;
                    frontier_phi_66_pred_3 = _3166;
                    frontier_phi_66_pred_4 = _3165;
                    frontier_phi_66_pred_5 = _3164;
                }
                else
                {
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    uint _3294;
                    _3288 = _3164;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3179;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    for (;;)
                    {
                        uint _3298 = uint(findLSB(_3294)) + (_3170 << 5u);
                        uint _3295 = (_3294 + 4294967295u) & _3294;
                        uint _3300 = _3298 * 48u;
                        vec4 _3314 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 3u)).x));
                        uint _3320 = (_3298 * 48u) + 4u;
                        vec4 _3333 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3339 = (_3298 * 48u) + 8u;
                        vec3 _3350 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3339)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3339 + 2u)).x));
                        float _3354 = _3314.x - _2018;
                        float _3355 = _3314.y - _2019;
                        float _3356 = _3314.z - _2020;
                        float _3357 = dot(vec3(_3354, _3355, _3356), vec3(_3354, _3355, _3356));
                        float _3360 = inversesqrt(_3357);
                        float _3361 = _3360 * _3354;
                        float _3362 = _3360 * _3355;
                        float _3363 = _3360 * _3356;
                        float _3364 = dot(vec3(_903, _906, _909), vec3(_3361, _3362, _3363));
                        float _3369 = 1.0 - (_3357 * _3314.w);
                        float _4785 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                        float _3370 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                        float _3371 = sqrt(_3357) * _3333.w;
                        float _3374 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                        float _3375 = _3374 * _3374;
                        float _3378 = ((1.0 - _3375) * _3364) + _3375;
                        float _3381 = _3371 * _3371;
                        float _3385 = ((isnan(0.0) ? _3378 : (isnan(_3378) ? 0.0 : max(_3378, 0.0))) * _3370) / ((_3381 * 0.699999988079071044921875) + 1.0);
                        float _3389 = (-0.0) - _2018;
                        float _3390 = (-0.0) - _2019;
                        float _3391 = (-0.0) - _2020;
                        float _3395 = inversesqrt(dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391)));
                        float _3396 = _3395 * _3389;
                        float _3397 = _3395 * _3390;
                        float _3398 = _3395 * _3391;
                        float _3405 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                        float _3406 = 1.0 - _963;
                        float _3413 = sqrt(1.0 - ((1.0 - (_3406 * _3406)) * (1.0 - (_3405 * _3405))));
                        float _3414 = _3413 * _3413;
                        float _3415 = _3414 * _3414;
                        float _3416 = _3396 + _3361;
                        float _3417 = _3397 + _3362;
                        float _3418 = _3398 + _3363;
                        float _3422 = inversesqrt(dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418)));
                        float _3426 = dot(vec3(_903, _906, _909), vec3(_3396, _3397, _3398));
                        float _4801 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3429 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                        float _3430 = dot(vec3(_903, _906, _909), vec3(_3422 * _3416, _3422 * _3417, _3422 * _3418));
                        float _4812 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3433 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                        float _3437 = ((_3433 * _3433) * (_3415 + (-1.0))) + 1.0;
                        float _3438 = _3374 * _3414;
                        float _3439 = _3438 * _3438;
                        float _3442 = ((1.0 - _3439) * _3364) + _3439;
                        float _4823 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                        float _3443 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3444 = 1.0 - _3414;
                        float _3454 = (0.5 / (((_3443 * ((_3429 * _3444) + _3414)) + 9.9999999392252902907785028219223e-09) + (((_3443 * _3444) + _3414) * _3429))) * _3443;
                        float _4834 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                        float _3465 = (((_3415 * 3.1415927410125732421875) * (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0)))) / ((_3437 * _3437) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125))) * _3370;
                        _3223 = (_3385 * _3333.x) + _3291;
                        _3224 = (_3385 * _3333.y) + _3292;
                        _3225 = (_3385 * _3333.z) + _3293;
                        _3220 = (_3465 * _3350.x) + _3288;
                        _3221 = (_3465 * _3350.y) + _3289;
                        _3222 = (_3465 * _3350.z) + _3290;
                        if (_3295 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3288 = _3220;
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3295;
                        }
                    }
                    frontier_phi_66_pred = _3225;
                    frontier_phi_66_pred_1 = _3224;
                    frontier_phi_66_pred_2 = _3223;
                    frontier_phi_66_pred_3 = _3222;
                    frontier_phi_66_pred_4 = _3221;
                    frontier_phi_66_pred_5 = _3220;
                }
                _3031 = frontier_phi_66_pred;
                _3029 = frontier_phi_66_pred_1;
                _3027 = frontier_phi_66_pred_2;
                _3025 = frontier_phi_66_pred_3;
                _3023 = frontier_phi_66_pred_4;
                _3021 = frontier_phi_66_pred_5;
                uint _3171 = _3170 + 1u;
                if (_3171 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3164 = _3021;
                    _3165 = _3023;
                    _3166 = _3025;
                    _3167 = _3027;
                    _3168 = _3029;
                    _3169 = _3031;
                    _3170 = _3171;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
        }
        uvec4 _3034 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3035 = _3034.z;
        uint _3037 = (_3035 >> 8u) & 15u;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        if (((4294967295u << _3037) & _2940) == 0u)
        {
            _3132 = _3020;
            _3134 = _3022;
            _3136 = _3024;
            _3138 = _3026;
            _3140 = _3028;
            _3142 = _3030;
        }
        else
        {
            float _3157 = inversesqrt(dot(vec3(_2018, _2019, _2020), vec3(_2018, _2019, _2020)));
            float _3158 = _3157 * _2018;
            float _3159 = _3157 * _2019;
            float _3160 = _3157 * _2020;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3037 < ((_3035 >> 12u) & 15u))
            {
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3143;
                float _3271 = _3020;
                float _3272 = _3022;
                float _3273 = _3024;
                float _3274 = _3026;
                float _3275 = _3028;
                float _3276 = _3030;
                uint _3277 = _3037;
                uint _3286;
                bool _3287;
                for (;;)
                {
                    _3286 = texelFetch(g_lightClassification, int((((_2934 << 5u) + (_2920 << 9u)) + (_3277 << 2u)) >> 2u)).x;
                    _3287 = _3286 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3287)
                    {
                        frontier_phi_72_pred = _3276;
                        frontier_phi_72_pred_1 = _3275;
                        frontier_phi_72_pred_2 = _3274;
                        frontier_phi_72_pred_3 = _3273;
                        frontier_phi_72_pred_4 = _3272;
                        frontier_phi_72_pred_5 = _3271;
                    }
                    else
                    {
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3483 = _3271;
                        float _3484 = _3272;
                        float _3485 = _3273;
                        float _3486 = _3274;
                        float _3487 = _3275;
                        float _3488 = _3276;
                        uint _3489 = _3286;
                        uint _3490;
                        vec4 _3515;
                        float _3516;
                        vec4 _3531;
                        vec3 _3543;
                        vec4 _3558;
                        vec4 _3573;
                        float _3619;
                        bool _3620;
                        for (;;)
                        {
                            uint _3500 = ((_3277 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3489));
                            _3490 = (_3489 + 4294967295u) & _3489;
                            uint _3502 = _3500 * 40u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3516 = _3515.w;
                            uint _3518 = (_3500 * 40u) + 4u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3500 * 40u) + 8u;
                            _3543 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x));
                            uint _3545 = (_3500 * 40u) + 16u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3560 = (_3500 * 40u) + 20u;
                            _3573 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3560)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3560 + 3u)).x));
                            uint _3575 = (_3500 * 40u) + 24u;
                            vec4 _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3594 = (_3500 * 40u) + 28u;
                            vec4 _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            _3619 = fma(_2020, _3607.z, fma(_2019, _3607.y, _3607.x * _2018)) + _3607.w;
                            _3620 = !((fma(_2020, _3588.z, fma(_2019, _3588.y, _3588.x * _2018)) + _3588.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3620)
                            {
                                float _3647 = _3515.x - _2018;
                                float _3648 = _3515.y - _2019;
                                float _3649 = _3515.z - _2020;
                                float _3650 = dot(vec3(_3647, _3648, _3649), vec3(_3647, _3648, _3649));
                                float _3653 = inversesqrt(_3650);
                                float _3654 = _3653 * _3647;
                                float _3655 = _3653 * _3648;
                                float _3656 = _3653 * _3649;
                                float _3660 = 1.0 - (_3650 / (_3516 * _3516));
                                float _4845 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3665 = sqrt(_3650) * _3531.w;
                                float _3667 = 1.39999997615814208984375 / (_3665 + 1.39999997615814208984375);
                                float _3668 = _3667 * _3667;
                                float _3671 = ((1.0 - _3668) * dot(vec3(_3654, _3655, _3656), vec3(_903, _906, _909))) + _3668;
                                float _3674 = _3665 * _3665;
                                float _3678 = (fma(_2020, _3558.z, fma(_2019, _3558.y, _3558.x * _2018)) + _3558.w) / _3619;
                                float _3679 = (fma(_2020, _3573.z, fma(_2019, _3573.y, _3573.x * _2018)) + _3573.w) / _3619;
                                float _3683 = 1.0 - dot(vec2(_3678, _3679), vec2(_3678, _3679));
                                float _4861 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3684 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                                float _3685 = _3684 * (((isnan(0.0) ? _3671 : (isnan(_3671) ? 0.0 : max(_3671, 0.0))) * _3661) / ((_3674 * 0.699999988079071044921875) + 1.0));
                                float _3697 = exp2(log2(1.0 / ((_3674 * 3.5) + 5.0)) * 0.25);
                                float _3698 = 1.0 - _963;
                                float _3705 = sqrt(1.0 - ((1.0 - (_3698 * _3698)) * (1.0 - (_3697 * _3697))));
                                float _3706 = _3705 * _3705;
                                float _3707 = _3706 * _3706;
                                float _3708 = _3654 - _3158;
                                float _3709 = _3655 - _3159;
                                float _3710 = _3656 - _3160;
                                float _3714 = inversesqrt(dot(vec3(_3708, _3709, _3710), vec3(_3708, _3709, _3710)));
                                float _3718 = dot(vec3(_903, _906, _909), vec3((-0.0) - _3158, (-0.0) - _3159, (-0.0) - _3160));
                                float _4872 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3721 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                                float _3722 = dot(vec3(_903, _906, _909), vec3(_3714 * _3708, _3714 * _3709, _3714 * _3710));
                                float _4883 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3729 = ((_3725 * _3725) * (_3707 + (-1.0))) + 1.0;
                                float _3730 = _3667 * _3706;
                                float _3731 = _3730 * _3730;
                                float _3737 = ((1.0 - _3731) * dot(vec3(_903, _906, _909), vec3(_3654, _3655, _3656))) + _3731;
                                float _4894 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3738 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3739 = 1.0 - _3706;
                                float _3749 = (0.5 / (((_3738 * ((_3721 * _3739) + _3706)) + 9.9999999392252902907785028219223e-09) + (((_3738 * _3739) + _3706) * _3721))) * _3738;
                                float _4905 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3759 = (_3684 * _3661) * (((_3707 * 3.1415927410125732421875) * (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0)))) / ((_3729 * _3729) * ((_3674 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3685 * _3531.y;
                                frontier_phi_78_pred_1 = _3685 * _3531.x;
                                frontier_phi_78_pred_2 = _3759 * _3543.z;
                                frontier_phi_78_pred_3 = _3759 * _3543.y;
                                frontier_phi_78_pred_4 = _3759 * _3543.x;
                                frontier_phi_78_pred_5 = _3685 * _3531.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3767 = frontier_phi_78_pred;
                            _3766 = frontier_phi_78_pred_1;
                            _3765 = frontier_phi_78_pred_2;
                            _3764 = frontier_phi_78_pred_3;
                            _3763 = frontier_phi_78_pred_4;
                            _3768 = frontier_phi_78_pred_5;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            if (_3490 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3490;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3475;
                        frontier_phi_72_pred_1 = _3474;
                        frontier_phi_72_pred_2 = _3473;
                        frontier_phi_72_pred_3 = _3472;
                        frontier_phi_72_pred_4 = _3471;
                        frontier_phi_72_pred_5 = _3470;
                    }
                    _3143 = frontier_phi_72_pred;
                    _3141 = frontier_phi_72_pred_1;
                    _3139 = frontier_phi_72_pred_2;
                    _3137 = frontier_phi_72_pred_3;
                    _3135 = frontier_phi_72_pred_4;
                    _3133 = frontier_phi_72_pred_5;
                    uint _3278 = _3277 + 1u;
                    if (_3278 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3271 = _3133;
                        _3272 = _3135;
                        _3273 = _3137;
                        _3274 = _3139;
                        _3275 = _3141;
                        _3276 = _3143;
                        _3277 = _3278;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3143;
                frontier_phi_60_61_ladder_1 = _3141;
                frontier_phi_60_61_ladder_2 = _3137;
                frontier_phi_60_61_ladder_3 = _3135;
                frontier_phi_60_61_ladder_4 = _3133;
                frontier_phi_60_61_ladder_5 = _3139;
            }
            else
            {
                frontier_phi_60_61_ladder = _3030;
                frontier_phi_60_61_ladder_1 = _3028;
                frontier_phi_60_61_ladder_2 = _3024;
                frontier_phi_60_61_ladder_3 = _3022;
                frontier_phi_60_61_ladder_4 = _3020;
                frontier_phi_60_61_ladder_5 = _3026;
            }
            _3132 = frontier_phi_60_61_ladder_4;
            _3134 = frontier_phi_60_61_ladder_3;
            _3136 = frontier_phi_60_61_ladder_2;
            _3138 = frontier_phi_60_61_ladder_5;
            _3140 = frontier_phi_60_61_ladder_1;
            _3142 = frontier_phi_60_61_ladder;
        }
        float _3147 = isnan(1.0) ? _947 : (isnan(_947) ? 1.0 : min(_947, 1.0));
        _2953 = (_3147 * _3138) + _2484;
        _2955 = (_3147 * _3140) + _2486;
        _2957 = (_3147 * _3142) + _2488;
        _2959 = ((_3132 * 0.039999999105930328369140625) * _3147) + _2807;
        _2961 = ((_3134 * 0.039999999105930328369140625) * _3147) + _2809;
        _2963 = ((_3136 * 0.039999999105930328369140625) * _3147) + _2811;
    }
    else
    {
        _2953 = _2484;
        _2955 = _2486;
        _2957 = _2488;
        _2959 = _2807;
        _2961 = _2809;
        _2963 = _2811;
    }
    float _4921 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4932 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4943 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    uint _2983 = _275 + 6u;
    float _2991 = _884 / cbSceneParam._m0[86u].x;
    float _2992 = _885 / cbSceneParam._m0[86u].y;
    vec4 _3006 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3008 = _3006.x;
    float _3009 = _3006.y;
    float _3010 = _3006.z;
    float _3011 = _3006.w;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _3045 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _3046 = _3045 / _818;
        float _3057 = _3046 * _869;
        float _3058 = _870 * _3046;
        float _3059 = (-0.0) - _3058;
        float _3060 = _3046 * _871;
        float _3062 = (cbSceneParam._m0[77u].w * _3059) / _3045;
        float _3063 = _3062 + cbSceneParam._m0[79u].w;
        float _3064 = cbSceneParam._m0[79u].w - _3058;
        float _3070 = sqrt(((_3057 * _3057) + (_3058 * _3058)) + (_3060 * _3060));
        float _3073 = (1.0 - (cbSceneParam._m0[77u].w / _3045)) * _3070;
        float _3078 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3080 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3233;
        if (abs((_3059 - _3062) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3233 = ((((_3063 > 0.0) ? exp2(_3078 * _3063) : (2.0 - exp2(_3080 * _3063))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3073;
        }
        else
        {
            float _3193 = 1.0 / cbSceneParam._m0[80u].x;
            float _3194 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : max(_3063, _3064));
            float _3195 = isnan(_3064) ? _3063 : (isnan(_3063) ? _3064 : min(_3063, _3064));
            float _3204 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : min(_3194, 0.0));
            float _3205 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : min(_3195, 0.0));
            _3233 = ((abs(_3070 / _3059) * cbSceneParam._m0[80u].y) * ((((_3204 - _3205) * 2.0) - ((exp2(_3078 * (isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0)))) - exp2(_3078 * (isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))))) * _3193)) - ((exp2(_3080 * _3204) - exp2(_3080 * _3205)) * _3193))) + (_3073 * cbSceneParam._m0[80u].z);
        }
        vec4 _3235 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2991, _2992, 1.0), 0.0);
        float _3244 = exp2((_3233 * (-1.44269502162933349609375)) * (1.0 - _3235.w));
        float _3245 = log2(_3244);
        float _3261 = log2(_3011);
        _3082 = (exp2(_3261 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].x)) * _3235.x) / cbSceneParam._m0[78u].x)) + _3008;
        _3084 = (exp2(_3261 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].y)) * _3235.y) / cbSceneParam._m0[78u].y)) + _3009;
        _3086 = (exp2(_3261 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].z)) * _3235.z) / cbSceneParam._m0[78u].z)) + _3010;
        _3088 = _3244 * _3011;
    }
    else
    {
        _3082 = _3008;
        _3084 = _3009;
        _3086 = _3010;
        _3088 = _3011;
    }
    float _3100 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3101 = _3100 == 3.0;
    float _3102 = log2(_3088);
    float _3109 = exp2(_3102 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2953 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _947))) + ((_2959 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1752)) * cbPerFrame._m0[3u].x));
    float _3110 = exp2(_3102 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2955 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _947))) + ((_2961 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1752)) * cbPerFrame._m0[3u].x));
    float _3111 = exp2(_3102 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2957 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _947))) + ((_2963 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1752)) * cbPerFrame._m0[3u].x));
    float _3120 = (_3100 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3120 * (_3101 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3082)));
    SV_Target.y = _3120 * (_3101 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3084)));
    SV_Target.z = _3120 * (_3101 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3086)));
    SV_Target.w = cbInstanceData._m0[_2983].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2983].w;
}


