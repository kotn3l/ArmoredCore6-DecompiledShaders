#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1359;
float _3999;
float _4000;
float _4001;
float _4002;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4011 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4022 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4033 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _408 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_398 - _408) * cbMtdParam._m0[24u].x) + _408) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4044 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _433 = (_426 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _434 = (_426 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _435 = (_426 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    vec4 _452 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _295) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _296) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[24u].x) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4055 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _506 = (_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433;
    float _507 = (_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434;
    float _508 = (_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435;
    float _512 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _506;
    float _515 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _507;
    float _518 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _508;
    float _525 = ((_506 - _512) * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) + _512;
    float _526 = ((_507 - _515) * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) + _515;
    float _527 = ((_508 - _518) * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) + _518;
    vec4 _546 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _295) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _296) + cbTextureTilingScale._m0[14u].w));
    vec4 _565 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _588 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _605 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _607 = _605.x;
    float _608 = _605.y;
    float _609 = _605.z;
    float _616 = ((_588.x - _607) * _426) + _607;
    float _617 = ((_588.y - _608) * _426) + _608;
    float _618 = ((_588.z - _609) * _426) + _609;
    vec4 _630 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _295) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _296) + cbTextureTilingScale._m0[2u].w));
    float _643 = ((_630.z - _618) * _499) + _618;
    float _646 = ((((_630.x - _616) * _499) + _616) * 2.0) + (-1.0);
    float _647 = ((((_630.y - _617) * _499) + _617) * 2.0) + (-1.0);
    float _648 = dot(vec2(_646, _647), vec2(_646, _647));
    float _4066 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _653 = sqrt(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))));
    vec4 _667 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _692 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _694 = _692.x;
    float _695 = 1.0 - _694;
    float _708 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_694 - _695) * cbMtdParam._m0[24u].z) + _695) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4077 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _709 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _716 = (_709 * ((_546.x * cbMtdParam._m0[18u].x) - _525)) + _525;
    float _717 = (_709 * ((_546.y * cbMtdParam._m0[18u].y) - _526)) + _526;
    float _718 = (_709 * ((_546.z * cbMtdParam._m0[18u].z) - _527)) + _527;
    float _723 = (((_565.z - _643) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _643;
    float _727 = ((_667.z - _723) * cbMtdParam._m0[19u].w) + _723;
    vec4 _740 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _747 = (_740.x * 2.0) + (-1.0);
    float _748 = (_740.y * 2.0) + (-1.0);
    float _749 = dot(vec2(_747, _748), vec2(_747, _748));
    float _4088 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _757 = (_709 * (_740.z - _727)) + _727;
    float _766 = (_646 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_565.x * 2.0) + (-1.0)))) + (((_667.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _767 = (_647 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_565.y * 2.0) + (-1.0)))) + (((_667.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _779 = (((_747 - _766) + (cbMtdParam._m0[21u].x * _766)) * _709) + _766;
    float _780 = (((_748 - _767) + (cbMtdParam._m0[21u].x * _767)) * _709) + _767;
    float _781 = (_709 * (sqrt(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) - _653)) + _653;
    float _783 = cbMtdParam._m0[22u].x + _667.w;
    float _786 = fma(_781, _242 * NORMAL.x, fma(_780, _249 * TANGENT.x, (_235 * _227) * _779));
    float _789 = fma(_781, _242 * NORMAL.y, fma(_780, _249 * TANGENT.y, (_235 * _228) * _779));
    float _792 = fma(_781, _242 * NORMAL.z, fma(_780, _249 * TANGENT.z, (_235 * _229) * _779));
    float _796 = inversesqrt(dot(vec3(_786, _789, _792), vec3(_786, _789, _792)));
    float _797 = _796 * _786;
    float _798 = _796 * _789;
    float _799 = _796 * _792;
    float _4099 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _800 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _4110 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _4121 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _4132 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _4143 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _870 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _860);
    float _871 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _860);
    float _872 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _860);
    float _876 = inversesqrt(dot(vec3(_870, _871, _872), vec3(_870, _871, _872)));
    float _877 = _870 * _876;
    float _878 = _871 * _876;
    float _879 = _872 * _876;
    vec4 _884 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _886 = _884.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1040 = sqrt(((_870 * _870) + (_871 * _871)) + (_872 * _872));
        float _1046 = (cbMatDynParam._m0[5u].x * _1040) + cbMatDynParam._m0[5u].y;
        float _4154 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1051 = (cbMatDynParam._m0[5u].z * _1040) + cbMatDynParam._m0[5u].w;
        float _4165 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) - _1047)) + _1047) < ((_886 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _897 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _898 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _916 = fma(_799, cbSceneParam._m0[5u].z, fma(_798, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _797));
    float _919 = fma(_799, cbSceneParam._m0[6u].z, fma(_798, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _797));
    float _922 = fma(_799, cbSceneParam._m0[7u].z, fma(_798, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _797));
    uint _935 = _276 + 9u;
    uint _936 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _942 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * cbInstanceData._m0[_936].x;
    float _943 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * cbInstanceData._m0[_936].y;
    float _944 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * cbInstanceData._m0[_936].z;
    float _4176 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _4187 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _4198 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    vec4 _956 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _897, cbSceneParam._m0[86u].y * _898));
    float _960 = ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * TEXCOORD_5.w) * _956.x;
    float _961 = dot(vec3(_797, _798, _799), vec3(_877, _878, _879));
    float _964 = _961 * 2.0;
    float _968 = (_964 * _797) - _877;
    float _969 = (_964 * _798) - _878;
    float _970 = (_964 * _799) - _879;
    float _974 = abs(dot(vec3(_877, _878, _879), vec3(_797, _798, _799)));
    float _4209 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _976 = sqrt(_800);
    float _989 = exp2((_976 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_976 * 3.0));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1358;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1083 = fma(_1029, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1021));
        float _1087 = fma(_1029, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1021));
        float _1091 = fma(_1029, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1021));
        float _1116 = _1021 + _797;
        float _1117 = _1025 + _798;
        float _1118 = _1029 + _799;
        float _1128 = fma(_1118, cbModelParam._m0[26u].z, fma(_1117, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116)) - _1083;
        float _1129 = fma(_1118, cbModelParam._m0[27u].z, fma(_1117, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116)) - _1087;
        float _1130 = fma(_1118, cbModelParam._m0[28u].z, fma(_1117, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116)) - _1091;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1083 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1087 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[34u].z) + ((((((_1091 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1186 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1152.x + (-0.5));
        float _1188 = _1186 * (_1152.y + (-0.5));
        float _1189 = _1186 * (_1152.z + (-0.5));
        float _1196 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1159.x + (-0.5));
        float _1198 = _1196 * (_1159.y + (-0.5));
        float _1199 = _1196 * (_1159.z + (-0.5));
        float _1206 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1166.x + (-0.5));
        float _1208 = _1206 * (_1166.y + (-0.5));
        float _1209 = _1206 * (_1166.z + (-0.5));
        float _1216 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1173.x + (-0.5));
        float _1218 = _1216 * (_1173.y + (-0.5));
        float _1219 = _1216 * (_1173.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1240 = (dot(vec3(_797, _798, _799), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1250 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _4257 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1252 + 1.0))) + _1257) * _1220;
        float _1267 = _1188 * 0.5;
        float _1268 = _1198 * 0.5;
        float _1269 = _1208 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_797, _798, _799), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4290 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1294 + 1.0))) + _1299) * _1221;
        float _1309 = _1189 * 0.5;
        float _1310 = _1199 * 0.5;
        float _1311 = _1209 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_797, _798, _799), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4323 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1336 + 1.0))) + _1341) * _1222;
        _1358 = _1189;
        _1360 = _1188;
        _1361 = _1187;
        _1362 = _1199;
        _1363 = _1198;
        _1364 = _1197;
        _1365 = _1209;
        _1366 = _1208;
        _1367 = _1207;
        _1368 = _1222;
        _1369 = _1221;
        _1370 = _1220;
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1359;
        _1360 = _1359;
        _1361 = _1359;
        _1362 = _1359;
        _1363 = _1359;
        _1364 = _1359;
        _1365 = _1359;
        _1366 = _1359;
        _1367 = _1359;
        _1368 = _1359;
        _1369 = _1359;
        _1370 = _1359;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1400 = fma(_1029, cbModelParam._m0[30u].z, fma(_1025, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1021));
        float _1404 = fma(_1029, cbModelParam._m0[31u].z, fma(_1025, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1021));
        float _1408 = fma(_1029, cbModelParam._m0[32u].z, fma(_1025, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1021));
        float _1431 = _1021 + _797;
        float _1432 = _1025 + _798;
        float _1433 = _1029 + _799;
        float _1443 = fma(_1433, cbModelParam._m0[30u].z, fma(_1432, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1431)) - _1400;
        float _1444 = fma(_1433, cbModelParam._m0[31u].z, fma(_1432, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1431)) - _1404;
        float _1445 = fma(_1433, cbModelParam._m0[32u].z, fma(_1432, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1431)) - _1408;
        float _1449 = inversesqrt(dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445)));
        float _1462 = ((_1449 * _1443) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1400 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1463 = ((_1449 * _1444) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1404 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1449 * _1445) / cbModelParam._m0[35u].z) + ((((((_1408 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1462, _1463, _1464), 0.0);
        float _1499 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1466.x + (-0.5));
        float _1501 = _1499 * (_1466.y + (-0.5));
        float _1502 = _1499 * (_1466.z + (-0.5));
        float _1509 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1473.x + (-0.5));
        float _1511 = _1509 * (_1473.y + (-0.5));
        float _1512 = _1509 * (_1473.z + (-0.5));
        float _1519 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1480.x + (-0.5));
        float _1521 = _1519 * (_1480.y + (-0.5));
        float _1522 = _1519 * (_1480.z + (-0.5));
        float _1529 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1487.x + (-0.5));
        float _1531 = _1529 * (_1487.y + (-0.5));
        float _1532 = _1529 * (_1487.z + (-0.5));
        float _1533 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = _1500 * 0.5;
        float _1537 = _1510 * 0.5;
        float _1538 = _1520 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_797, _798, _799), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _4364 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1533 + 9.9999997473787516355514526367188e-06);
        float _4375 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _4386 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_1563 + 1.0))) + _1568) * _1533;
        float _1578 = _1501 * 0.5;
        float _1579 = _1511 * 0.5;
        float _1580 = _1521 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_797, _798, _799), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4419 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1605 + 1.0))) + _1610) * _1534;
        float _1620 = _1502 * 0.5;
        float _1621 = _1512 * 0.5;
        float _1622 = _1522 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_797, _798, _799), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4452 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1647 + 1.0))) + _1652) * _1535;
        _1669 = _1502;
        _1670 = _1501;
        _1671 = _1500;
        _1672 = _1512;
        _1673 = _1511;
        _1674 = _1510;
        _1675 = _1522;
        _1676 = _1521;
        _1677 = _1520;
        _1678 = _1535;
        _1679 = _1534;
        _1680 = _1533;
        _1681 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
    }
    else
    {
        _1669 = _1359;
        _1670 = _1359;
        _1671 = _1359;
        _1672 = _1359;
        _1673 = _1359;
        _1674 = _1359;
        _1675 = _1359;
        _1676 = _1359;
        _1677 = _1359;
        _1678 = _1359;
        _1679 = _1359;
        _1680 = _1359;
        _1681 = 0.0;
        _1682 = 0.0;
        _1683 = 0.0;
    }
    float _1693 = (cbModelParam._m0[1u].x * (_1681 - _1371)) + _1371;
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1372)) + _1372;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1373)) + _1373;
    float _1716 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1719 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1722 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1693));
    float _1737 = _968 * 0.5;
    float _1738 = _969 * 0.5;
    float _1739 = _970 * 0.5;
    float _1740 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1743 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1746 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1669, _1672, _1675, _1678));
    float _1780;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1753 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1358, _1362, _1365, _1368));
        float _1757 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1761 = dot(vec4(_1737, _1738, _1739, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1768 = dot(vec4(cbModelParam._m0[39u]), vec4(_1737, _1738, _1739, 1.0));
        _1780 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1768) ? 0.0 : (isnan(0.0) ? _1768 : max(0.0, _1768))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1780 = 1.0;
    }
    float _1791;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1782 = dot(vec4(cbModelParam._m0[40u]), vec4(_1737, _1738, _1739, 1.0));
        _1791 = dot(vec3(isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1791 = 1.0;
    }
    float _1795 = (_1791 * cbModelParam._m0[1u].x) + (_1780 * (1.0 - cbModelParam._m0[1u].x));
    float _1805 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _800);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1805 : min(cbModelParam._m0[25u].z, _1805));
    float _1886;
    float _1888;
    float _1890;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1853 = fma(_1029, cbModelParam._m0[13u].z, fma(_1025, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1021)) + cbModelParam._m0[13u].w;
        float _1857 = fma(_1029, cbModelParam._m0[14u].z, fma(_1025, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1021)) + cbModelParam._m0[14u].w;
        float _1861 = fma(_1029, cbModelParam._m0[15u].z, fma(_1025, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1021)) + cbModelParam._m0[15u].w;
        float _1864 = fma(_970, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968));
        float _1867 = fma(_970, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968));
        float _1870 = fma(_970, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968));
        float _1898;
        if (_1864 > 0.0)
        {
            _1898 = abs((1.0 - _1853) / _1864);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1853 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1898 = frontier_phi_17_15_ladder;
        }
        float _2067;
        if (_1867 > 0.0)
        {
            _2067 = abs((1.0 - _1857) / _1867);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1857 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2067 = frontier_phi_26_22_ladder;
        }
        float _2362;
        if (_1870 > 0.0)
        {
            _2362 = abs((1.0 - _1861) / _1870);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1861 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2362 = frontier_phi_38_33_ladder;
        }
        float _2364 = isnan(_2067) ? _1898 : (isnan(_1898) ? _2067 : min(_1898, _2067));
        float _2365 = isnan(_2362) ? _2364 : (isnan(_2364) ? _2362 : min(_2364, _2362));
        float _2369 = (_2365 * _1864) + _1853;
        float _2370 = (_2365 * _1867) + _1857;
        float _2371 = (_2365 * _1870) + _1861;
        float _2372 = _2365 * 9.9999997473787516355514526367188e-05;
        float _2374 = (-1.0) - _2372;
        float _2376 = _2372 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2371 > _2376) || ((_2371 < _2374) || ((_2370 > _2376) || ((_2370 < _2374) || ((_2369 < _2374) || (_2369 > _2376))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2516 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2371, cbModelParam._m0[9u].z, fma(_2370, cbModelParam._m0[9u].y, _2369 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2371, cbModelParam._m0[10u].z, fma(_2370, cbModelParam._m0[10u].y, _2369 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2371, cbModelParam._m0[11u].z, fma(_2370, cbModelParam._m0[11u].y, _2369 * cbModelParam._m0[11u].x))), _1806);
            frontier_phi_16_38_ladder = _2516.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2516.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2516.x * cbModelParam._m0[1u].y;
        }
        _1886 = frontier_phi_16_38_ladder_2;
        _1888 = frontier_phi_16_38_ladder_1;
        _1890 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_968, _969, _970), _1806);
        _1886 = _1874.x * cbModelParam._m0[1u].y;
        _1888 = _1874.y * cbModelParam._m0[1u].y;
        _1890 = _1874.z * cbModelParam._m0[1u].y;
    }
    float _1894 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _800);
    float _1895 = isnan(_1894) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1894 : min(cbModelParam._m0[25u].w, _1894));
    float _1984;
    float _1986;
    float _1988;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1948 = fma(_1029, cbModelParam._m0[21u].z, fma(_1025, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1021)) + cbModelParam._m0[21u].w;
        float _1952 = fma(_1029, cbModelParam._m0[22u].z, fma(_1025, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1021)) + cbModelParam._m0[22u].w;
        float _1956 = fma(_1029, cbModelParam._m0[23u].z, fma(_1025, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1021)) + cbModelParam._m0[23u].w;
        float _1959 = fma(_970, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968));
        float _1962 = fma(_970, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968));
        float _1965 = fma(_970, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968));
        float _2072;
        if (_1959 > 0.0)
        {
            _2072 = abs((1.0 - _1948) / _1959);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1948 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2072 = frontier_phi_28_24_ladder;
        }
        float _2389;
        if (_1962 > 0.0)
        {
            _2389 = abs((1.0 - _1952) / _1962);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1952 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2389 = frontier_phi_40_35_ladder;
        }
        float _2716;
        if (_1965 > 0.0)
        {
            _2716 = abs((1.0 - _1956) / _1965);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1956 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2716 = frontier_phi_50_47_ladder;
        }
        float _2718 = isnan(_2389) ? _2072 : (isnan(_2072) ? _2389 : min(_2072, _2389));
        float _2719 = isnan(_2716) ? _2718 : (isnan(_2718) ? _2716 : min(_2718, _2716));
        float _2723 = (_2719 * _1959) + _1948;
        float _2724 = (_2719 * _1962) + _1952;
        float _2725 = (_2719 * _1965) + _1956;
        float _2726 = _2719 * 9.9999997473787516355514526367188e-05;
        float _2727 = (-1.0) - _2726;
        float _2729 = _2726 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2725 > _2729) || ((_2725 < _2727) || ((_2724 > _2729) || ((_2724 < _2727) || ((_2723 < _2727) || (_2723 > _2729))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2725, cbModelParam._m0[17u].z, fma(_2724, cbModelParam._m0[17u].y, _2723 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2725, cbModelParam._m0[18u].z, fma(_2724, cbModelParam._m0[18u].y, _2723 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2725, cbModelParam._m0[19u].z, fma(_2724, cbModelParam._m0[19u].y, _2723 * cbModelParam._m0[19u].x))), _1895);
            frontier_phi_25_50_ladder = _2843.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2843.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2843.x * cbModelParam._m0[1u].z;
        }
        _1984 = frontier_phi_25_50_ladder_2;
        _1986 = frontier_phi_25_50_ladder_1;
        _1988 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_968, _969, _970), _1895);
        _1984 = _1968.x * cbModelParam._m0[1u].z;
        _1986 = _1968.y * cbModelParam._m0[1u].z;
        _1988 = _1968.z * cbModelParam._m0[1u].z;
    }
    float _2000 = ((((1.0 - _989) * ((_976 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_989 * _976)) * _960;
    float _2001 = _2000 * ((cbModelParam._m0[1u].w * (_1984 - _1886)) + _1886);
    float _2002 = _2000 * ((cbModelParam._m0[1u].w * (_1986 - _1888)) + _1888);
    float _2003 = _2000 * ((cbModelParam._m0[1u].w * (_1988 - _1890)) + _1890);
    float _2006 = fma(_2003, cbSceneParam._m0[89u].z, fma(_2002, cbSceneParam._m0[89u].y, _2001 * cbSceneParam._m0[89u].x));
    float _2009 = fma(_2003, cbSceneParam._m0[90u].z, fma(_2002, cbSceneParam._m0[90u].y, _2001 * cbSceneParam._m0[90u].x));
    float _2012 = fma(_2003, cbSceneParam._m0[91u].z, fma(_2002, cbSceneParam._m0[91u].y, _2001 * cbSceneParam._m0[91u].x));
    float _2046 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2050 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2054 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2058 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2059 = _2046 / _2058;
    float _2060 = _2050 / _2058;
    float _2061 = _2054 / _2058;
    float _2208;
    float _2209;
    float _2210;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2088 = ((uint(_2061 > cbSceneParam._m0[59u].y) + uint(_2061 > cbSceneParam._m0[59u].x)) + uint(_2061 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2089 = _2088 + 43u;
        uint _2097 = _2088 + 44u;
        uint _2105 = _2088 + 45u;
        uint _2113 = _2088 + 46u;
        float _2124 = fma(_2058, cbSceneParam._m0[_2089].w, fma(_2054, cbSceneParam._m0[_2089].z, fma(_2050, cbSceneParam._m0[_2089].y, _2046 * cbSceneParam._m0[_2089].x)));
        float _2128 = fma(_2058, cbSceneParam._m0[_2097].w, fma(_2054, cbSceneParam._m0[_2097].z, fma(_2050, cbSceneParam._m0[_2097].y, _2046 * cbSceneParam._m0[_2097].x)));
        float _2136 = fma(_2058, cbSceneParam._m0[_2113].w, fma(_2054, cbSceneParam._m0[_2113].z, fma(_2050, cbSceneParam._m0[_2113].y, _2046 * cbSceneParam._m0[_2113].x)));
        float _2141 = cbSceneParam._m0[33u].z * _2136;
        float _2143 = cbSceneParam._m0[33u].w * _2136;
        float _2146 = fma(_2058, cbSceneParam._m0[_2105].w, fma(_2054, cbSceneParam._m0[_2105].z, fma(_2050, cbSceneParam._m0[_2105].y, _2046 * cbSceneParam._m0[_2105].x))) / _2136;
        float _2194 = (cbSceneParam._m0[33u].x - sqrt(((_2060 * _2060) + (_2059 * _2059)) + (_2061 * _2061))) * cbSceneParam._m0[33u].y;
        float _4578 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2201 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 + _2124) / _2136, (_2143 + _2128) / _2136), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2143 + _2124) / _2136, (_2128 - _2141) / _2136), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 - _2141) / _2136, (_2128 - _2143) / _2136), _2146), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2124 - _2143) / _2136, (_2141 + _2128) / _2136), _2146), 0.0)).x), vec4(0.25)));
        _2208 = 1.0 - (_2201 * cbSceneParam._m0[34u].x);
        _2209 = 1.0 - (_2201 * cbSceneParam._m0[34u].y);
        _2210 = 1.0 - (_2201 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2208 = 1.0;
        _2209 = 1.0;
        _2210 = 1.0;
    }
    float _2274;
    float _2276;
    float _2278;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2262 = fma(_2058, cbSceneParam._m0[63u].w, fma(_2054, cbSceneParam._m0[63u].z, fma(_2050, cbSceneParam._m0[63u].y, _2046 * cbSceneParam._m0[63u].x)));
        float _2263 = fma(_2058, cbSceneParam._m0[60u].w, fma(_2054, cbSceneParam._m0[60u].z, fma(_2050, cbSceneParam._m0[60u].y, _2046 * cbSceneParam._m0[60u].x))) / _2262;
        float _2264 = fma(_2058, cbSceneParam._m0[61u].w, fma(_2054, cbSceneParam._m0[61u].z, fma(_2050, cbSceneParam._m0[61u].y, _2046 * cbSceneParam._m0[61u].x))) / _2262;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2263 >= cbSceneParam._m0[64u].x) && (_2264 >= cbSceneParam._m0[64u].y)) && (_2263 <= cbSceneParam._m0[64u].z)) && (_2264 <= cbSceneParam._m0[64u].w))
        {
            float _2402 = fma(_2058, cbSceneParam._m0[62u].w, fma(_2054, cbSceneParam._m0[62u].z, fma(_2050, cbSceneParam._m0[62u].y, _2046 * cbSceneParam._m0[62u].x))) / _2262;
            float _2406 = isnan(cbSceneParam._m0[41u].w) ? _2402 : (isnan(_2402) ? cbSceneParam._m0[41u].w : max(_2402, cbSceneParam._m0[41u].w));
            float _2449 = (cbSceneParam._m0[33u].x - sqrt(((_2060 * _2060) + (_2059 * _2059)) + (_2061 * _2061))) * cbSceneParam._m0[33u].y;
            float _4594 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
            float _2456 = (isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2263, cbSceneParam._m0[33u].w + _2264), _2406), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2263, _2264 - cbSceneParam._m0[33u].z), _2406), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2263 - cbSceneParam._m0[33u].z, _2264 - cbSceneParam._m0[33u].w), _2406), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2263 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2264), _2406), 0.0)).x), vec4(0.25)));
            float _2460 = 1.0 - (_2456 * cbSceneParam._m0[34u].x);
            float _2461 = 1.0 - (_2456 * cbSceneParam._m0[34u].y);
            float _2462 = 1.0 - (_2456 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2462) ? _2210 : (isnan(_2210) ? _2462 : min(_2210, _2462));
            frontier_phi_37_36_ladder_1 = isnan(_2461) ? _2209 : (isnan(_2209) ? _2461 : min(_2209, _2461));
            frontier_phi_37_36_ladder_2 = isnan(_2460) ? _2208 : (isnan(_2208) ? _2460 : min(_2208, _2460));
        }
        else
        {
            frontier_phi_37_36_ladder = _2210;
            frontier_phi_37_36_ladder_1 = _2209;
            frontier_phi_37_36_ladder_2 = _2208;
        }
        _2274 = frontier_phi_37_36_ladder_2;
        _2276 = frontier_phi_37_36_ladder_1;
        _2278 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2274 = _2208;
        _2276 = _2209;
        _2278 = _2210;
    }
    uvec4 _2283 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2285 = _2283.x * 14u;
    uint _2286 = _2285 + 13u;
    float _2293 = _960 + (-1.0);
    float _2298 = (cbLight._m0[_2286].x * _2293) + 1.0;
    float _2299 = (cbLight._m0[_2286].y * _2293) + 1.0;
    float _2300 = (cbLight._m0[_2286].z * _2293) + 1.0;
    float _2301 = (cbLight._m0[_2286].w * _2293) + 1.0;
    uint _2302 = _2285 + 5u;
    float _2308 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
    uint _2312 = _2285 + 4u;
    float _2321 = isnan(1.0) ? _2298 : (isnan(_2298) ? 1.0 : min(_2298, 1.0));
    uint _2325 = _2285 | 1u;
    float _2336 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_797, _798, _799));
    float _2339 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_797, _798, _799));
    float _4630 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _4641 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2344 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * 0.3183098733425140380859375;
    float _2346 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * 0.3183098733425140380859375;
    float _2353 = ((cbLight._m0[_2302].x * _2308) * _2346) + (((cbLight._m0[_2312].x * _2274) * _2321) * _2344);
    float _2354 = ((_2308 * cbLight._m0[_2302].y) * _2346) + (((cbLight._m0[_2312].y * _2276) * _2321) * _2344);
    float _2355 = ((_2308 * cbLight._m0[_2302].z) * _2346) + (((cbLight._m0[_2312].z * _2278) * _2321) * _2344);
    uvec4 _2359 = floatBitsToUint(cbLight._m0[_2285 + 12u]);
    bool _2361 = _2359.x == 0u;
    float _2463;
    float _2465;
    float _2467;
    if (_2361)
    {
        _2463 = _2353;
        _2465 = _2354;
        _2467 = _2355;
    }
    else
    {
        uint _2471 = _2285 + 6u;
        float _2487 = (dot(vec3(cbLight._m0[_2285 + 2u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2488 = _2487 * _2487;
        float _4652 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2489 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2490 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2463 = (((cbLight._m0[_2471].x * 0.3183098733425140380859375) * _2489) * _2490) + _2353;
        _2465 = (((cbLight._m0[_2471].y * 0.3183098733425140380859375) * _2489) * _2490) + _2354;
        _2467 = (((cbLight._m0[_2471].z * 0.3183098733425140380859375) * _2489) * _2490) + _2355;
    }
    bool _2470 = _2359.y == 0u;
    float _2525;
    float _2527;
    float _2529;
    if (_2470)
    {
        _2525 = _2463;
        _2527 = _2465;
        _2529 = _2467;
    }
    else
    {
        uint _2687 = _2285 + 7u;
        float _2703 = (dot(vec3(cbLight._m0[_2285 + 3u].xyz), vec3(_797, _798, _799)) * 0.5) + 0.5;
        float _2704 = _2703 * _2703;
        float _4668 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2705 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2706 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2525 = (((cbLight._m0[_2687].x * 0.3183098733425140380859375) * _2705) * _2706) + _2463;
        _2527 = (((cbLight._m0[_2687].y * 0.3183098733425140380859375) * _2705) * _2706) + _2465;
        _2529 = (((cbLight._m0[_2687].z * 0.3183098733425140380859375) * _2705) * _2706) + _2467;
    }
    uint _2532 = _2285 + 8u;
    float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2285].w)) * _800) * 0.949999988079071044921875);
    float _2546 = _2545 * _2545;
    float _2547 = cbLight._m0[_2285].x + _877;
    float _2548 = cbLight._m0[_2285].y + _878;
    float _2549 = cbLight._m0[_2285].z + _879;
    float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
    float _2554 = _2553 * _2547;
    float _2555 = _2553 * _2548;
    float _2556 = _2553 * _2549;
    float _2557 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2285].xyz));
    float _4684 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
    float _2560 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    float _4695 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _2561 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
    float _2562 = dot(vec3(_797, _798, _799), vec3(_2554, _2555, _2556));
    float _4706 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
    float _2566 = dot(vec3(cbLight._m0[_2285].xyz), vec3(_2554, _2555, _2556));
    float _4717 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2570 = _2546 * _2546;
    float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
    float _2585 = (exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2586 = 1.0 - _2546;
    float _2597 = (0.5 / (((_2561 * ((_2560 * _2586) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2561 * _2586) + _2546) * _2560))) * _2560;
    float _4728 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2599 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
    uint _2613 = _2285 + 9u;
    float _2624 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _800) * 0.949999988079071044921875);
    float _2625 = _2624 * _2624;
    float _2626 = cbLight._m0[_2325].x + _877;
    float _2627 = cbLight._m0[_2325].y + _878;
    float _2628 = cbLight._m0[_2325].z + _879;
    float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
    float _2633 = _2632 * _2626;
    float _2634 = _2632 * _2627;
    float _2635 = _2632 * _2628;
    float _2636 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2325].xyz));
    float _4739 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2640 = dot(vec3(_797, _798, _799), vec3(_2633, _2634, _2635));
    float _4750 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2643 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2644 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2633, _2634, _2635));
    float _4761 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2648 = _2625 * _2625;
    float _2652 = ((_2643 * _2643) * (_2648 + (-1.0))) + 1.0;
    float _2661 = (exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2662 = 1.0 - _2625;
    float _2672 = (0.5 / (((_2561 * ((_2639 * _2662) + _2625)) + 9.9999999392252902907785028219223e-09) + (((_2561 * _2662) + _2625) * _2639))) * _2639;
    float _4772 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2674 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2648 / ((_2652 * _2652) * 3.141590118408203125));
    float _2684 = (((_2661 * cbLight._m0[_2613].x) * _2674) * _2308) + ((((cbLight._m0[_2532].x * _2274) * _2585) * _2599) * _2321);
    float _2685 = (((_2661 * cbLight._m0[_2613].y) * _2674) * _2308) + ((((cbLight._m0[_2532].y * _2276) * _2585) * _2599) * _2321);
    float _2686 = (((_2661 * cbLight._m0[_2613].z) * _2674) * _2308) + ((((cbLight._m0[_2532].z * _2278) * _2585) * _2599) * _2321);
    float _2742;
    float _2744;
    float _2746;
    if (_2361)
    {
        _2742 = _2684;
        _2744 = _2685;
        _2746 = _2686;
    }
    else
    {
        uint _2748 = _2285 + 2u;
        uint _2752 = _2285 + 10u;
        float _2766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2748].w)) * _800) * 0.949999988079071044921875);
        float _2767 = _2766 * _2766;
        float _2768 = cbLight._m0[_2748].x + _877;
        float _2769 = cbLight._m0[_2748].y + _878;
        float _2770 = cbLight._m0[_2748].z + _879;
        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
        float _2775 = _2774 * _2768;
        float _2776 = _2774 * _2769;
        float _2777 = _2774 * _2770;
        float _2778 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2748].xyz));
        float _4783 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
        float _2782 = dot(vec3(_797, _798, _799), vec3(_2775, _2776, _2777));
        float _4794 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _2786 = dot(vec3(cbLight._m0[_2748].xyz), vec3(_2775, _2776, _2777));
        float _4805 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2790 = _2767 * _2767;
        float _2794 = ((_2785 * _2785) * (_2790 + (-1.0))) + 1.0;
        float _2803 = (exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2804 = 1.0 - _2767;
        float _2814 = (0.5 / (((_2561 * ((_2781 * _2804) + _2767)) + 9.9999999392252902907785028219223e-09) + (((_2561 * _2804) + _2767) * _2781))) * _2781;
        float _4816 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2816 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2790 / ((_2794 * _2794) * 3.141590118408203125));
        float _2817 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
        _2742 = (((_2803 * cbLight._m0[_2752].x) * _2816) * _2817) + _2684;
        _2744 = (((_2803 * cbLight._m0[_2752].y) * _2816) * _2817) + _2685;
        _2746 = (((_2803 * cbLight._m0[_2752].z) * _2816) * _2817) + _2686;
    }
    float _2848;
    float _2850;
    float _2852;
    if (_2470)
    {
        _2848 = _2742;
        _2850 = _2744;
        _2852 = _2746;
    }
    else
    {
        uint _2859 = _2285 + 3u;
        uint _2863 = _2285 + 11u;
        float _2877 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2859].w)) * _800) * 0.949999988079071044921875);
        float _2878 = _2877 * _2877;
        float _2879 = cbLight._m0[_2859].x + _877;
        float _2880 = cbLight._m0[_2859].y + _878;
        float _2881 = cbLight._m0[_2859].z + _879;
        float _2885 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
        float _2886 = _2885 * _2879;
        float _2887 = _2885 * _2880;
        float _2888 = _2885 * _2881;
        float _2889 = dot(vec3(_797, _798, _799), vec3(cbLight._m0[_2859].xyz));
        float _4832 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2892 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2893 = dot(vec3(_797, _798, _799), vec3(_2886, _2887, _2888));
        float _4843 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2896 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2897 = dot(vec3(cbLight._m0[_2859].xyz), vec3(_2886, _2887, _2888));
        float _4854 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2901 = _2878 * _2878;
        float _2905 = ((_2896 * _2896) * (_2901 + (-1.0))) + 1.0;
        float _2914 = (exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2915 = 1.0 - _2878;
        float _2925 = (0.5 / (((_2561 * ((_2892 * _2915) + _2878)) + 9.9999999392252902907785028219223e-09) + (((_2561 * _2915) + _2878) * _2892))) * _2892;
        float _4865 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2927 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2901 / ((_2905 * _2905) * 3.141590118408203125));
        float _2928 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2848 = (((_2914 * cbLight._m0[_2863].x) * _2927) * _2928) + _2742;
        _2850 = (((_2914 * cbLight._m0[_2863].y) * _2927) * _2928) + _2744;
        _2852 = (((_2914 * cbLight._m0[_2863].z) * _2927) * _2928) + _2746;
    }
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    if (_2283.y == 0u)
    {
        uvec4 _2949 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2950 = _2949.x;
        uint _2961 = uint((float(_2949.y) * floor(float(uint(cbSceneParam._m0[85u].y * _898) / _2950))) + floor(float(uint(cbSceneParam._m0[85u].x * _897) / _2950)));
        float _2971 = (log2(_2061 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2972 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        uint _2975 = uint(isnan(14.0) ? _2972 : (isnan(_2972) ? 14.0 : min(_2972, 14.0)));
        uvec4 _2980 = texelFetch(g_lightClusterGridBuffer, int(((_2975 << 2u) + (_2961 << 6u)) >> 2u));
        uint _2981 = _2980.x;
        uint _2982 = _2949.z;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        if (((((1u << ((_2982 >> 4u) & 15u)) + 4294967295u) & _2981) == 0u) || ((_2982 & 240u) == 0u))
        {
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
        }
        else
        {
            float _3062;
            float _3064;
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            float _3218 = 0.0;
            float _3219 = 0.0;
            uint _3220 = 0u;
            uint _3229;
            bool _3230;
            for (;;)
            {
                _3229 = texelFetch(g_lightClassification, int((((_2975 << 5u) + (_2961 << 9u)) + (_3220 << 2u)) >> 2u)).x;
                _3230 = _3229 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3230)
                {
                    frontier_phi_71_pred = _3219;
                    frontier_phi_71_pred_1 = _3218;
                    frontier_phi_71_pred_2 = _3217;
                    frontier_phi_71_pred_3 = _3216;
                    frontier_phi_71_pred_4 = _3215;
                    frontier_phi_71_pred_5 = _3214;
                }
                else
                {
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    uint _3365;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3217;
                    _3363 = _3218;
                    _3364 = _3219;
                    _3365 = _3229;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    for (;;)
                    {
                        uint _3369 = uint(findLSB(_3365)) + (_3220 << 5u);
                        uint _3366 = (_3365 + 4294967295u) & _3365;
                        uint _3371 = _3369 * 48u;
                        vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 3u)).x));
                        uint _3391 = (_3369 * 48u) + 4u;
                        vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3391)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 3u)).x));
                        uint _3410 = (_3369 * 48u) + 8u;
                        vec3 _3421 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3410)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 2u)).x));
                        float _3425 = _3385.x - _2059;
                        float _3426 = _3385.y - _2060;
                        float _3427 = _3385.z - _2061;
                        float _3428 = dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427));
                        float _3431 = inversesqrt(_3428);
                        float _3432 = _3431 * _3425;
                        float _3433 = _3431 * _3426;
                        float _3434 = _3431 * _3427;
                        float _3435 = dot(vec3(_916, _919, _922), vec3(_3432, _3433, _3434));
                        float _3440 = 1.0 - (_3428 * _3385.w);
                        float _4891 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3441 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                        float _3442 = sqrt(_3428) * _3404.w;
                        float _3445 = 1.39999997615814208984375 / (_3442 + 1.39999997615814208984375);
                        float _3446 = _3445 * _3445;
                        float _3449 = ((1.0 - _3446) * _3435) + _3446;
                        float _3452 = _3442 * _3442;
                        float _3456 = ((isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0))) * _3441) / ((_3452 * 0.699999988079071044921875) + 1.0);
                        float _3460 = (-0.0) - _2059;
                        float _3461 = (-0.0) - _2060;
                        float _3462 = (-0.0) - _2061;
                        float _3466 = inversesqrt(dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462)));
                        float _3467 = _3466 * _3460;
                        float _3468 = _3466 * _3461;
                        float _3469 = _3466 * _3462;
                        float _3476 = exp2(log2(1.0 / ((_3452 * 3.5) + 5.0)) * 0.25);
                        float _3477 = 1.0 - _976;
                        float _3484 = sqrt(1.0 - ((1.0 - (_3477 * _3477)) * (1.0 - (_3476 * _3476))));
                        float _3485 = _3484 * _3484;
                        float _3486 = _3485 * _3485;
                        float _3487 = _3467 + _3432;
                        float _3488 = _3468 + _3433;
                        float _3489 = _3469 + _3434;
                        float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                        float _3497 = dot(vec3(_916, _919, _922), vec3(_3467, _3468, _3469));
                        float _4907 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3500 = isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0));
                        float _3501 = dot(vec3(_916, _919, _922), vec3(_3493 * _3487, _3493 * _3488, _3493 * _3489));
                        float _4918 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3504 = isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0));
                        float _3508 = ((_3504 * _3504) * (_3486 + (-1.0))) + 1.0;
                        float _3509 = _3445 * _3485;
                        float _3510 = _3509 * _3509;
                        float _3513 = ((1.0 - _3510) * _3435) + _3510;
                        float _4929 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3514 = isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0));
                        float _3515 = 1.0 - _3485;
                        float _3525 = (0.5 / (((_3514 * ((_3500 * _3515) + _3485)) + 9.9999999392252902907785028219223e-09) + (((_3514 * _3515) + _3485) * _3500))) * _3514;
                        float _4940 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3536 = (((_3486 * 3.1415927410125732421875) * (isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0)))) / ((_3508 * _3508) * ((_3452 * 2.1991131305694580078125) + 3.141590118408203125))) * _3441;
                        _3289 = (_3456 * _3404.x) + _3362;
                        _3290 = (_3456 * _3404.y) + _3363;
                        _3291 = (_3456 * _3404.z) + _3364;
                        _3286 = (_3536 * _3421.x) + _3359;
                        _3287 = (_3536 * _3421.y) + _3360;
                        _3288 = (_3536 * _3421.z) + _3361;
                        if (_3366 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3289;
                            _3363 = _3290;
                            _3364 = _3291;
                            _3365 = _3366;
                        }
                    }
                    frontier_phi_71_pred = _3291;
                    frontier_phi_71_pred_1 = _3290;
                    frontier_phi_71_pred_2 = _3289;
                    frontier_phi_71_pred_3 = _3288;
                    frontier_phi_71_pred_4 = _3287;
                    frontier_phi_71_pred_5 = _3286;
                }
                _3072 = frontier_phi_71_pred;
                _3070 = frontier_phi_71_pred_1;
                _3068 = frontier_phi_71_pred_2;
                _3066 = frontier_phi_71_pred_3;
                _3064 = frontier_phi_71_pred_4;
                _3062 = frontier_phi_71_pred_5;
                uint _3221 = _3220 + 1u;
                if (_3221 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3214 = _3062;
                    _3215 = _3064;
                    _3216 = _3066;
                    _3217 = _3068;
                    _3218 = _3070;
                    _3219 = _3072;
                    _3220 = _3221;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
        }
        uvec4 _3075 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3076 = _3075.z;
        uint _3078 = (_3076 >> 8u) & 15u;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        if (((4294967295u << _3078) & _2981) == 0u)
        {
            _3182 = _3061;
            _3184 = _3063;
            _3186 = _3065;
            _3188 = _3067;
            _3190 = _3069;
            _3192 = _3071;
        }
        else
        {
            float _3207 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
            float _3208 = _3207 * _2059;
            float _3209 = _3207 * _2060;
            float _3210 = _3207 * _2061;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3078 < ((_3076 >> 12u) & 15u))
            {
                float _3183;
                float _3185;
                float _3187;
                float _3189;
                float _3191;
                float _3193;
                float _3342 = _3061;
                float _3343 = _3063;
                float _3344 = _3065;
                float _3345 = _3067;
                float _3346 = _3069;
                float _3347 = _3071;
                uint _3348 = _3078;
                uint _3357;
                bool _3358;
                for (;;)
                {
                    _3357 = texelFetch(g_lightClassification, int((((_2975 << 5u) + (_2961 << 9u)) + (_3348 << 2u)) >> 2u)).x;
                    _3358 = _3357 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3358)
                    {
                        frontier_phi_82_pred = _3347;
                        frontier_phi_82_pred_1 = _3346;
                        frontier_phi_82_pred_2 = _3345;
                        frontier_phi_82_pred_3 = _3344;
                        frontier_phi_82_pred_4 = _3343;
                        frontier_phi_82_pred_5 = _3342;
                    }
                    else
                    {
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3847;
                        float _3848;
                        float _3563 = _3342;
                        float _3564 = _3343;
                        float _3565 = _3344;
                        float _3566 = _3345;
                        float _3567 = _3346;
                        float _3568 = _3347;
                        uint _3569 = _3357;
                        uint _3570;
                        vec4 _3595;
                        float _3596;
                        vec4 _3611;
                        vec3 _3623;
                        vec4 _3638;
                        vec4 _3653;
                        float _3699;
                        bool _3700;
                        for (;;)
                        {
                            uint _3580 = ((_3348 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3569));
                            _3570 = (_3569 + 4294967295u) & _3569;
                            uint _3582 = _3580 * 40u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            _3596 = _3595.w;
                            uint _3598 = (_3580 * 40u) + 4u;
                            _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            uint _3613 = (_3580 * 40u) + 8u;
                            _3623 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x));
                            uint _3625 = (_3580 * 40u) + 16u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3640 = (_3580 * 40u) + 20u;
                            _3653 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3640)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3640 + 3u)).x));
                            uint _3655 = (_3580 * 40u) + 24u;
                            vec4 _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3674 = (_3580 * 40u) + 28u;
                            vec4 _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            _3699 = fma(_2061, _3687.z, fma(_2060, _3687.y, _3687.x * _2059)) + _3687.w;
                            _3700 = !((fma(_2061, _3668.z, fma(_2060, _3668.y, _3668.x * _2059)) + _3668.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3700)
                            {
                                float _3727 = _3595.x - _2059;
                                float _3728 = _3595.y - _2060;
                                float _3729 = _3595.z - _2061;
                                float _3730 = dot(vec3(_3727, _3728, _3729), vec3(_3727, _3728, _3729));
                                float _3733 = inversesqrt(_3730);
                                float _3734 = _3733 * _3727;
                                float _3735 = _3733 * _3728;
                                float _3736 = _3733 * _3729;
                                float _3740 = 1.0 - (_3730 / (_3596 * _3596));
                                float _4951 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                                float _3745 = sqrt(_3730) * _3611.w;
                                float _3747 = 1.39999997615814208984375 / (_3745 + 1.39999997615814208984375);
                                float _3748 = _3747 * _3747;
                                float _3751 = ((1.0 - _3748) * dot(vec3(_3734, _3735, _3736), vec3(_916, _919, _922))) + _3748;
                                float _3754 = _3745 * _3745;
                                float _3758 = (fma(_2061, _3638.z, fma(_2060, _3638.y, _3638.x * _2059)) + _3638.w) / _3699;
                                float _3759 = (fma(_2061, _3653.z, fma(_2060, _3653.y, _3653.x * _2059)) + _3653.w) / _3699;
                                float _3763 = 1.0 - dot(vec2(_3758, _3759), vec2(_3758, _3759));
                                float _4967 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3764 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                                float _3765 = _3764 * (((isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0))) * _3741) / ((_3754 * 0.699999988079071044921875) + 1.0));
                                float _3777 = exp2(log2(1.0 / ((_3754 * 3.5) + 5.0)) * 0.25);
                                float _3778 = 1.0 - _976;
                                float _3785 = sqrt(1.0 - ((1.0 - (_3778 * _3778)) * (1.0 - (_3777 * _3777))));
                                float _3786 = _3785 * _3785;
                                float _3787 = _3786 * _3786;
                                float _3788 = _3734 - _3208;
                                float _3789 = _3735 - _3209;
                                float _3790 = _3736 - _3210;
                                float _3794 = inversesqrt(dot(vec3(_3788, _3789, _3790), vec3(_3788, _3789, _3790)));
                                float _3798 = dot(vec3(_916, _919, _922), vec3((-0.0) - _3208, (-0.0) - _3209, (-0.0) - _3210));
                                float _4978 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3801 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                                float _3802 = dot(vec3(_916, _919, _922), vec3(_3794 * _3788, _3794 * _3789, _3794 * _3790));
                                float _4989 = isnan(0.0) ? _3802 : (isnan(_3802) ? 0.0 : max(_3802, 0.0));
                                float _3805 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                                float _3809 = ((_3805 * _3805) * (_3787 + (-1.0))) + 1.0;
                                float _3810 = _3747 * _3786;
                                float _3811 = _3810 * _3810;
                                float _3817 = ((1.0 - _3811) * dot(vec3(_916, _919, _922), vec3(_3734, _3735, _3736))) + _3811;
                                float _5000 = isnan(0.0) ? _3817 : (isnan(_3817) ? 0.0 : max(_3817, 0.0));
                                float _3818 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3819 = 1.0 - _3786;
                                float _3829 = (0.5 / (((_3818 * ((_3801 * _3819) + _3786)) + 9.9999999392252902907785028219223e-09) + (((_3818 * _3819) + _3786) * _3801))) * _3818;
                                float _5011 = isnan(0.0) ? _3829 : (isnan(_3829) ? 0.0 : max(_3829, 0.0));
                                float _3839 = (_3764 * _3741) * (((_3787 * 3.1415927410125732421875) * (isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0)))) / ((_3809 * _3809) * ((_3754 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3765 * _3611.z;
                                frontier_phi_88_pred_1 = _3765 * _3611.y;
                                frontier_phi_88_pred_2 = _3765 * _3611.x;
                                frontier_phi_88_pred_3 = _3839 * _3623.z;
                                frontier_phi_88_pred_4 = _3839 * _3623.y;
                                frontier_phi_88_pred_5 = _3839 * _3623.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3848 = frontier_phi_88_pred;
                            _3847 = frontier_phi_88_pred_1;
                            _3846 = frontier_phi_88_pred_2;
                            _3845 = frontier_phi_88_pred_3;
                            _3844 = frontier_phi_88_pred_4;
                            _3843 = frontier_phi_88_pred_5;
                            _3553 = _3846 + _3566;
                            _3554 = _3847 + _3567;
                            _3555 = _3848 + _3568;
                            _3550 = _3843 + _3563;
                            _3551 = _3844 + _3564;
                            _3552 = _3845 + _3565;
                            if (_3570 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3554;
                                _3568 = _3555;
                                _3569 = _3570;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3555;
                        frontier_phi_82_pred_1 = _3554;
                        frontier_phi_82_pred_2 = _3553;
                        frontier_phi_82_pred_3 = _3552;
                        frontier_phi_82_pred_4 = _3551;
                        frontier_phi_82_pred_5 = _3550;
                    }
                    _3193 = frontier_phi_82_pred;
                    _3191 = frontier_phi_82_pred_1;
                    _3189 = frontier_phi_82_pred_2;
                    _3187 = frontier_phi_82_pred_3;
                    _3185 = frontier_phi_82_pred_4;
                    _3183 = frontier_phi_82_pred_5;
                    uint _3349 = _3348 + 1u;
                    if (_3349 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3342 = _3183;
                        _3343 = _3185;
                        _3344 = _3187;
                        _3345 = _3189;
                        _3346 = _3191;
                        _3347 = _3193;
                        _3348 = _3349;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3189;
                frontier_phi_63_64_ladder_1 = _3193;
                frontier_phi_63_64_ladder_2 = _3191;
                frontier_phi_63_64_ladder_3 = _3187;
                frontier_phi_63_64_ladder_4 = _3185;
                frontier_phi_63_64_ladder_5 = _3183;
            }
            else
            {
                frontier_phi_63_64_ladder = _3067;
                frontier_phi_63_64_ladder_1 = _3071;
                frontier_phi_63_64_ladder_2 = _3069;
                frontier_phi_63_64_ladder_3 = _3065;
                frontier_phi_63_64_ladder_4 = _3063;
                frontier_phi_63_64_ladder_5 = _3061;
            }
            _3182 = frontier_phi_63_64_ladder_5;
            _3184 = frontier_phi_63_64_ladder_4;
            _3186 = frontier_phi_63_64_ladder_3;
            _3188 = frontier_phi_63_64_ladder;
            _3190 = frontier_phi_63_64_ladder_2;
            _3192 = frontier_phi_63_64_ladder_1;
        }
        float _3197 = isnan(1.0) ? _960 : (isnan(_960) ? 1.0 : min(_960, 1.0));
        _2994 = (_3197 * _3188) + _2525;
        _2996 = (_3197 * _3190) + _2527;
        _2998 = (_3197 * _3192) + _2529;
        _3000 = ((_3182 * 0.039999999105930328369140625) * _3197) + _2848;
        _3002 = ((_3184 * 0.039999999105930328369140625) * _3197) + _2850;
        _3004 = ((_3186 * 0.039999999105930328369140625) * _3197) + _2852;
    }
    else
    {
        _2994 = _2525;
        _2996 = _2527;
        _2998 = _2529;
        _3000 = _2848;
        _3002 = _2850;
        _3004 = _2852;
    }
    float _5027 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _5038 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _5049 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _3021 = ((isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0))) * (_2994 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _960))) + ((_3000 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1795)) * cbPerFrame._m0[3u].x);
    float _3022 = ((isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0))) * (_2996 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _960))) + ((_3002 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1795)) * cbPerFrame._m0[3u].x);
    float _3023 = ((isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0))) * (_2998 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _960))) + ((_3004 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1795)) * cbPerFrame._m0[3u].x);
    uint _3024 = _276 + 6u;
    float _3032 = _897 / cbSceneParam._m0[86u].x;
    float _3033 = _898 / cbSceneParam._m0[86u].y;
    vec4 _3047 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3032, _3033, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3049 = _3047.x;
    float _3050 = _3047.y;
    float _3051 = _3047.z;
    float _3052 = _3047.w;
    float _3124;
    float _3126;
    float _3128;
    float _3130;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _3086 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _3087 = _3086 / _818;
        float _3098 = _3087 * _870;
        float _3099 = _871 * _3087;
        float _3100 = (-0.0) - _3099;
        float _3102 = _3087 * _872;
        float _3104 = (cbSceneParam._m0[77u].w * _3100) / _3086;
        float _3105 = _3104 + cbSceneParam._m0[79u].w;
        float _3106 = cbSceneParam._m0[79u].w - _3099;
        float _3112 = sqrt(((_3098 * _3098) + (_3099 * _3099)) + (_3102 * _3102));
        float _3115 = (1.0 - (cbSceneParam._m0[77u].w / _3086)) * _3112;
        float _3120 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3122 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3299;
        if (abs((_3100 - _3104) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3299 = ((((_3105 > 0.0) ? exp2(_3120 * _3105) : (2.0 - exp2(_3122 * _3105))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3115;
        }
        else
        {
            float _3243 = 1.0 / cbSceneParam._m0[80u].x;
            float _3244 = isnan(_3106) ? _3105 : (isnan(_3105) ? _3106 : max(_3105, _3106));
            float _3245 = isnan(_3106) ? _3105 : (isnan(_3105) ? _3106 : min(_3105, _3106));
            float _3254 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : min(_3244, 0.0));
            float _3255 = isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : min(_3245, 0.0));
            _3299 = ((abs(_3112 / _3100) * cbSceneParam._m0[80u].y) * ((((_3254 - _3255) * 2.0) - ((exp2(_3120 * (isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0)))) - exp2(_3120 * (isnan(0.0) ? _3245 : (isnan(_3245) ? 0.0 : max(_3245, 0.0))))) * _3243)) - ((exp2(_3122 * _3254) - exp2(_3122 * _3255)) * _3243))) + (_3115 * cbSceneParam._m0[80u].z);
        }
        vec4 _3301 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3032, _3033, 1.0), 0.0);
        float _3310 = exp2((_3299 * (-1.44269502162933349609375)) * (1.0 - _3301.w));
        float _3311 = log2(_3310);
        float _3327 = log2(_3052);
        _3124 = (exp2(_3327 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3311 * cbSceneParam._m0[78u].x)) * _3301.x) / cbSceneParam._m0[78u].x)) + _3049;
        _3126 = (exp2(_3327 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3311 * cbSceneParam._m0[78u].y)) * _3301.y) / cbSceneParam._m0[78u].y)) + _3050;
        _3128 = (exp2(_3327 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3311 * cbSceneParam._m0[78u].z)) * _3301.z) / cbSceneParam._m0[78u].z)) + _3051;
        _3130 = _3310 * _3052;
    }
    else
    {
        _3124 = _3049;
        _3126 = _3050;
        _3128 = _3051;
        _3130 = _3052;
    }
    bool _3337;
    vec4 _3140;
    vec4 _3162;
    float _3164;
    float _3168;
    float _3169;
    float _3170;
    float _3171;
    bool _3181;
    for (;;)
    {
        _3140 = cbMatDynParam._m0[0u];
        float _3142 = roundEven(_3140.y);
        bool _3143 = _3142 == 3.0;
        float _3144 = log2(_3130);
        float _3151 = exp2(_3144 * cbSceneParam._m0[78u].x) * _3021;
        float _3152 = exp2(_3144 * cbSceneParam._m0[78u].y) * _3022;
        float _3153 = exp2(_3144 * cbSceneParam._m0[78u].z) * _3023;
        float _3160 = _886 + (-0.5);
        _3162 = cbMtdParam._m0[1u];
        _3164 = _3162.y * _3160;
        float _3167 = (_3142 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3168 = _3167 * (_3143 ? _3151 : (_3151 + (cbSceneParam._m0[72u].w * _3124)));
        _3169 = _3167 * (_3143 ? _3152 : (_3152 + (cbSceneParam._m0[72u].w * _3126)));
        _3170 = _3167 * (_3143 ? _3153 : (_3153 + (cbSceneParam._m0[72u].w * _3128)));
        _3171 = _3160 * 0.999000012874603271484375;
        _3181 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3181)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _3171) < 0.5)
            {
                _3337 = true;
                break;
            }
        }
        uint _3278 = _935 + uint(_3140.w);
        if ((cbInstanceData._m0[_3278].w < 1.0) && ((cbInstanceData._m0[_3278].w + _3171) < 0.5))
        {
            _3337 = true;
            break;
        }
        if ((_3164 + 1.0) < _3162.x)
        {
            _3337 = true;
            break;
        }
        _3337 = false;
        break;
    }
    float _3541;
    if (_3337)
    {
        discard_state = true;
        _3541 = 0.0;
    }
    else
    {
        _3541 = cbInstanceData._m0[_3024].w;
    }
    SV_Target.x = _3168;
    SV_Target.y = _3169;
    SV_Target.z = _3170;
    SV_Target.w = _3541;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3024].w;
    discard_exit();
}


