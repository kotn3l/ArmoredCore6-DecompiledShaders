#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1199;
float _3842;
float _3843;
float _3844;
float _3845;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _221 = _220 * _212;
    float _222 = _220 * _213;
    float _223 = _220 * _214;
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = _227 * NORMAL.x;
    float _229 = _227 * NORMAL.y;
    float _230 = _227 * NORMAL.z;
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = _234 * TANGENT.x;
    float _236 = _234 * TANGENT.y;
    float _237 = _234 * TANGENT.z;
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _346 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _348 = _346.x;
    float _358 = dot(vec4(_348, _346.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _375 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_348 - _358) * cbMtdParam._m0[24u].x) + _358) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3854 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _376 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _383 = (_376 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _384 = (_376 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _385 = (_376 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _430 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _449 = _447.x;
    float _450 = _447.y;
    float _451 = _447.z;
    float _460 = ((_430.z - _451) * _376) + _451;
    float _463 = ((((_430.x - _449) * _376) + _449) * 2.0) + (-1.0);
    float _464 = ((((_430.y - _450) * _376) + _450) * 2.0) + (-1.0);
    float _465 = dot(vec2(_463, _464), vec2(_463, _464));
    float _3865 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _470 = sqrt(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))));
    vec4 _490 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _502 = (_463 + ((((_403.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_490.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _503 = (_464 + ((((_403.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_490.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _506 = fma(_470, _228, fma(_503, _235, _502 * _221));
    float _509 = fma(_470, _229, fma(_503, _236, _502 * _222));
    float _512 = fma(_470, _230, fma(_503, _237, _502 * _223));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    vec4 _545 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _547 = _545.x;
    float _548 = 1.0 - _547;
    float _554 = (cbMtdParam._m0[19u].x + dot(vec4(_516 * _506, _516 * _509, _516 * _512, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_547 - _548) * cbMtdParam._m0[24u].z) + _548) * cbMtdParam._m0[21u].z);
    float _3876 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _562 = (_555 * (cbMtdParam._m0[17u].x - _383)) + _383;
    float _563 = (_555 * (cbMtdParam._m0[17u].y - _384)) + _384;
    float _564 = (_555 * (cbMtdParam._m0[17u].z - _385)) + _385;
    float _569 = (((_403.z - _460) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _460;
    float _573 = ((_490.z - _569) * cbMtdParam._m0[19u].w) + _569;
    vec4 _586 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _593 = (_586.x * 2.0) + (-1.0);
    float _594 = (_586.y * 2.0) + (-1.0);
    float _595 = dot(vec2(_593, _594), vec2(_593, _594));
    float _3887 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _603 = ((_586.z - _573) * _555) + _573;
    float _613 = ((sqrt(1.0 - (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) - _470) * _555) + _470;
    float _616 = (((_593 - _502) * _555) + _502) + (cbMtdParam._m0[21u].x * _502);
    float _617 = (((_594 - _503) * _555) + _503) + (cbMtdParam._m0[21u].x * _503);
    float _622 = cbMtdParam._m0[22u].x + _490.w;
    float _625 = fma(_613, _228, fma(_617, _235, _616 * _221));
    float _628 = fma(_613, _229, fma(_617, _236, _616 * _222));
    float _631 = fma(_613, _230, fma(_617, _237, _616 * _223));
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    float _636 = _635 * _625;
    float _637 = _635 * _628;
    float _638 = _635 * _631;
    float _3898 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _639 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3920 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3931 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3942 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _657 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _709 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _699);
    float _710 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _699);
    float _711 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _699);
    float _715 = inversesqrt(dot(vec3(_709, _710, _711), vec3(_709, _710, _711)));
    float _716 = _709 * _715;
    float _717 = _710 * _715;
    float _718 = _711 * _715;
    vec4 _723 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _725 = _723.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _879 = sqrt(((_709 * _709) + (_710 * _710)) + (_711 * _711));
        float _885 = (cbMatDynParam._m0[5u].x * _879) + cbMatDynParam._m0[5u].y;
        float _3953 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _890 = (cbMatDynParam._m0[5u].z * _879) + cbMatDynParam._m0[5u].w;
        float _3964 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) - _886)) + _886) < ((_725 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _736 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _737 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _755 = fma(_638, cbSceneParam._m0[5u].z, fma(_637, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _636));
    float _758 = fma(_638, cbSceneParam._m0[6u].z, fma(_637, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _636));
    float _761 = fma(_638, cbSceneParam._m0[7u].z, fma(_637, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _636));
    uint _774 = _240 + 9u;
    uint _775 = _774 + uint(cbMatDynParam._m0[0u].w);
    float _781 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * cbInstanceData._m0[_775].x;
    float _782 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) * cbInstanceData._m0[_775].y;
    float _783 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * cbInstanceData._m0[_775].z;
    float _3975 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _3997 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    vec4 _795 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _736, cbSceneParam._m0[86u].y * _737));
    float _799 = ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * TEXCOORD_5.w) * _795.x;
    float _800 = dot(vec3(_636, _637, _638), vec3(_716, _717, _718));
    float _803 = _800 * 2.0;
    float _807 = (_803 * _636) - _716;
    float _808 = (_803 * _637) - _717;
    float _809 = (_803 * _638) - _718;
    float _813 = abs(dot(vec3(_716, _717, _718), vec3(_636, _637, _638)));
    float _4008 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _815 = sqrt(_639);
    float _828 = exp2((_815 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_815 * 3.0));
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1198;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _923 = fma(_868, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860));
        float _927 = fma(_868, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860));
        float _931 = fma(_868, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860));
        float _956 = _860 + _636;
        float _957 = _864 + _637;
        float _958 = _868 + _638;
        float _968 = fma(_958, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _956)) - _923;
        float _969 = fma(_958, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _956)) - _927;
        float _970 = fma(_958, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _956)) - _931;
        float _974 = inversesqrt(dot(vec3(_968, _969, _970), vec3(_968, _969, _970)));
        float _987 = ((_974 * _968) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_923 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _988 = ((_974 * _969) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_927 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_974 * _970) / cbModelParam._m0[34u].z) + ((((((_931 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_987, _988, _989), 0.0);
        float _1026 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_992.x + (-0.5));
        float _1028 = _1026 * (_992.y + (-0.5));
        float _1029 = _1026 * (_992.z + (-0.5));
        float _1036 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_999.x + (-0.5));
        float _1038 = _1036 * (_999.y + (-0.5));
        float _1039 = _1036 * (_999.z + (-0.5));
        float _1046 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1006.x + (-0.5));
        float _1048 = _1046 * (_1006.y + (-0.5));
        float _1049 = _1046 * (_1006.z + (-0.5));
        float _1056 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1013.x + (-0.5));
        float _1058 = _1056 * (_1013.y + (-0.5));
        float _1059 = _1056 * (_1013.z + (-0.5));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1063 = _1027 * 0.5;
        float _1064 = _1037 * 0.5;
        float _1065 = _1047 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1080 = (dot(vec3(_636, _637, _638), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1090 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _4056 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1092 + 1.0))) + _1097) * _1060;
        float _1107 = _1028 * 0.5;
        float _1108 = _1038 * 0.5;
        float _1109 = _1048 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_636, _637, _638), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _4089 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1134 + 1.0))) + _1139) * _1061;
        float _1149 = _1029 * 0.5;
        float _1150 = _1039 * 0.5;
        float _1151 = _1049 * 0.5;
        float _1152 = dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151));
        float _1157 = (_1152 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1152);
        float _1165 = (dot(vec3(_636, _637, _638), vec3(_1157 * _1149, _1157 * _1150, _1157 * _1151)) + 1.0) * 0.5;
        float _4100 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1174 = sqrt(((_1150 * _1150) + (_1149 * _1149)) + (_1151 * _1151)) / (_1062 + 9.9999997473787516355514526367188e-06);
        float _4111 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _4122 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * (_1176 + 1.0))) + _1181) * _1062;
        _1198 = _1029;
        _1200 = _1028;
        _1201 = _1027;
        _1202 = _1039;
        _1203 = _1038;
        _1204 = _1037;
        _1205 = _1049;
        _1206 = _1048;
        _1207 = _1047;
        _1208 = _1062;
        _1209 = _1061;
        _1210 = _1060;
        _1211 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1212 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
        _1213 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
    }
    else
    {
        _1198 = _1199;
        _1200 = _1199;
        _1201 = _1199;
        _1202 = _1199;
        _1203 = _1199;
        _1204 = _1199;
        _1205 = _1199;
        _1206 = _1199;
        _1207 = _1199;
        _1208 = _1199;
        _1209 = _1199;
        _1210 = _1199;
        _1211 = 0.0;
        _1212 = 0.0;
        _1213 = 0.0;
    }
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1241 = fma(_868, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _860));
        float _1245 = fma(_868, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _860));
        float _1249 = fma(_868, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _860));
        float _1272 = _860 + _636;
        float _1273 = _864 + _637;
        float _1274 = _868 + _638;
        float _1284 = fma(_1274, cbModelParam._m0[30u].z, fma(_1273, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1272)) - _1241;
        float _1285 = fma(_1274, cbModelParam._m0[31u].z, fma(_1273, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1272)) - _1245;
        float _1286 = fma(_1274, cbModelParam._m0[32u].z, fma(_1273, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1272)) - _1249;
        float _1290 = inversesqrt(dot(vec3(_1284, _1285, _1286), vec3(_1284, _1285, _1286)));
        float _1303 = ((_1290 * _1284) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1241 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1304 = ((_1290 * _1285) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1245 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1305 = ((_1290 * _1286) / cbModelParam._m0[35u].z) + ((((((_1249 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1303, _1304, _1305), 0.0);
        float _1340 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1307.x + (-0.5));
        float _1342 = _1340 * (_1307.y + (-0.5));
        float _1343 = _1340 * (_1307.z + (-0.5));
        float _1350 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1314.x + (-0.5));
        float _1352 = _1350 * (_1314.y + (-0.5));
        float _1353 = _1350 * (_1314.z + (-0.5));
        float _1360 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1321.x + (-0.5));
        float _1362 = _1360 * (_1321.y + (-0.5));
        float _1363 = _1360 * (_1321.z + (-0.5));
        float _1370 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1328.x + (-0.5));
        float _1372 = _1370 * (_1328.y + (-0.5));
        float _1373 = _1370 * (_1328.z + (-0.5));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1377 = _1341 * 0.5;
        float _1378 = _1351 * 0.5;
        float _1379 = _1361 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_636, _637, _638), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4185 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1404 + 1.0))) + _1409) * _1374;
        float _1419 = _1342 * 0.5;
        float _1420 = _1352 * 0.5;
        float _1421 = _1362 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_636, _637, _638), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4218 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1446 + 1.0))) + _1451) * _1375;
        float _1461 = _1343 * 0.5;
        float _1462 = _1353 * 0.5;
        float _1463 = _1363 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_636, _637, _638), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1376 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4251 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1488 + 1.0))) + _1493) * _1376;
        _1510 = _1343;
        _1511 = _1342;
        _1512 = _1341;
        _1513 = _1353;
        _1514 = _1352;
        _1515 = _1351;
        _1516 = _1363;
        _1517 = _1362;
        _1518 = _1361;
        _1519 = _1376;
        _1520 = _1375;
        _1521 = _1374;
        _1522 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1523 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1524 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
    }
    else
    {
        _1510 = _1199;
        _1511 = _1199;
        _1512 = _1199;
        _1513 = _1199;
        _1514 = _1199;
        _1515 = _1199;
        _1516 = _1199;
        _1517 = _1199;
        _1518 = _1199;
        _1519 = _1199;
        _1520 = _1199;
        _1521 = _1199;
        _1522 = 0.0;
        _1523 = 0.0;
        _1524 = 0.0;
    }
    float _1534 = (cbModelParam._m0[1u].x * (_1522 - _1211)) + _1211;
    float _1535 = (cbModelParam._m0[1u].x * (_1523 - _1212)) + _1212;
    float _1536 = (cbModelParam._m0[1u].x * (_1524 - _1213)) + _1213;
    float _1557 = fma(_1536, cbSceneParam._m0[89u].z, fma(_1535, cbSceneParam._m0[89u].y, _1534 * cbSceneParam._m0[89u].x));
    float _1560 = fma(_1536, cbSceneParam._m0[90u].z, fma(_1535, cbSceneParam._m0[90u].y, _1534 * cbSceneParam._m0[90u].x));
    float _1563 = fma(_1536, cbSceneParam._m0[91u].z, fma(_1535, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1534));
    float _1578 = _807 * 0.5;
    float _1579 = _808 * 0.5;
    float _1580 = _809 * 0.5;
    float _1581 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1512, _1515, _1518, _1521));
    float _1584 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1511, _1514, _1517, _1520));
    float _1587 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1510, _1513, _1516, _1519));
    float _1621;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1594 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1198, _1202, _1205, _1208));
        float _1598 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1200, _1203, _1206, _1209));
        float _1602 = dot(vec4(_1578, _1579, _1580, 1.0), vec4(_1201, _1204, _1207, _1210));
        float _1609 = dot(vec4(cbModelParam._m0[39u]), vec4(_1578, _1579, _1580, 1.0));
        _1621 = dot(vec3(isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1621 = 1.0;
    }
    float _1632;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1623 = dot(vec4(cbModelParam._m0[40u]), vec4(_1578, _1579, _1580, 1.0));
        _1632 = dot(vec3(isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1623) ? 0.0 : (isnan(0.0) ? _1623 : max(0.0, _1623))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1632 = 1.0;
    }
    float _1636 = (_1632 * cbModelParam._m0[1u].x) + (_1621 * (1.0 - cbModelParam._m0[1u].x));
    float _1646 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _639);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1646 : min(cbModelParam._m0[25u].z, _1646));
    float _1728;
    float _1730;
    float _1732;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1695 = fma(_868, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860)) + cbModelParam._m0[13u].w;
        float _1699 = fma(_868, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860)) + cbModelParam._m0[14u].w;
        float _1703 = fma(_868, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860)) + cbModelParam._m0[15u].w;
        float _1706 = fma(_809, cbModelParam._m0[13u].z, fma(_808, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807));
        float _1709 = fma(_809, cbModelParam._m0[14u].z, fma(_808, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807));
        float _1712 = fma(_809, cbModelParam._m0[15u].z, fma(_808, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807));
        float _1740;
        if (_1706 > 0.0)
        {
            _1740 = abs((1.0 - _1695) / _1706);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1695 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1740 = frontier_phi_17_15_ladder;
        }
        float _1910;
        if (_1709 > 0.0)
        {
            _1910 = abs((1.0 - _1699) / _1709);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1699 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1910 = frontier_phi_26_22_ladder;
        }
        float _2205;
        if (_1712 > 0.0)
        {
            _2205 = abs((1.0 - _1703) / _1712);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1703 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2205 = frontier_phi_38_33_ladder;
        }
        float _2207 = isnan(_1910) ? _1740 : (isnan(_1740) ? _1910 : min(_1740, _1910));
        float _2208 = isnan(_2205) ? _2207 : (isnan(_2207) ? _2205 : min(_2207, _2205));
        float _2212 = (_2208 * _1706) + _1695;
        float _2213 = (_2208 * _1709) + _1699;
        float _2214 = (_2208 * _1712) + _1703;
        float _2215 = _2208 * 9.9999997473787516355514526367188e-05;
        float _2217 = (-1.0) - _2215;
        float _2219 = _2215 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2214 > _2219) || ((_2214 < _2217) || ((_2213 > _2219) || ((_2213 < _2217) || ((_2212 < _2217) || (_2212 > _2219))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2359 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2214, cbModelParam._m0[9u].z, fma(_2213, cbModelParam._m0[9u].y, _2212 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2214, cbModelParam._m0[10u].z, fma(_2213, cbModelParam._m0[10u].y, _2212 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2214, cbModelParam._m0[11u].z, fma(_2213, cbModelParam._m0[11u].y, _2212 * cbModelParam._m0[11u].x))), _1647);
            frontier_phi_16_38_ladder = _2359.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2359.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2359.x * cbModelParam._m0[1u].y;
        }
        _1728 = frontier_phi_16_38_ladder_2;
        _1730 = frontier_phi_16_38_ladder_1;
        _1732 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1716 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_807, _808, _809), _1647);
        _1728 = _1716.x * cbModelParam._m0[1u].y;
        _1730 = _1716.y * cbModelParam._m0[1u].y;
        _1732 = _1716.z * cbModelParam._m0[1u].y;
    }
    float _1736 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _639);
    float _1737 = isnan(_1736) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1736 : min(cbModelParam._m0[25u].w, _1736));
    float _1827;
    float _1829;
    float _1831;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1791 = fma(_868, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860)) + cbModelParam._m0[21u].w;
        float _1795 = fma(_868, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860)) + cbModelParam._m0[22u].w;
        float _1799 = fma(_868, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860)) + cbModelParam._m0[23u].w;
        float _1802 = fma(_809, cbModelParam._m0[21u].z, fma(_808, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807));
        float _1805 = fma(_809, cbModelParam._m0[22u].z, fma(_808, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807));
        float _1808 = fma(_809, cbModelParam._m0[23u].z, fma(_808, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807));
        float _1915;
        if (_1802 > 0.0)
        {
            _1915 = abs((1.0 - _1791) / _1802);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1791 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1915 = frontier_phi_28_24_ladder;
        }
        float _2232;
        if (_1805 > 0.0)
        {
            _2232 = abs((1.0 - _1795) / _1805);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1795 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2232 = frontier_phi_40_35_ladder;
        }
        float _2559;
        if (_1808 > 0.0)
        {
            _2559 = abs((1.0 - _1799) / _1808);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1799 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2559 = frontier_phi_50_47_ladder;
        }
        float _2561 = isnan(_2232) ? _1915 : (isnan(_1915) ? _2232 : min(_1915, _2232));
        float _2562 = isnan(_2559) ? _2561 : (isnan(_2561) ? _2559 : min(_2561, _2559));
        float _2566 = (_2562 * _1802) + _1791;
        float _2567 = (_2562 * _1805) + _1795;
        float _2568 = (_2562 * _1808) + _1799;
        float _2569 = _2562 * 9.9999997473787516355514526367188e-05;
        float _2570 = (-1.0) - _2569;
        float _2572 = _2569 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2568 > _2572) || ((_2568 < _2570) || ((_2567 > _2572) || ((_2567 < _2570) || ((_2566 < _2570) || (_2566 > _2572))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2686 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2568, cbModelParam._m0[17u].z, fma(_2567, cbModelParam._m0[17u].y, _2566 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2568, cbModelParam._m0[18u].z, fma(_2567, cbModelParam._m0[18u].y, _2566 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2568, cbModelParam._m0[19u].z, fma(_2567, cbModelParam._m0[19u].y, _2566 * cbModelParam._m0[19u].x))), _1737);
            frontier_phi_25_50_ladder = _2686.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2686.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2686.x * cbModelParam._m0[1u].z;
        }
        _1827 = frontier_phi_25_50_ladder_2;
        _1829 = frontier_phi_25_50_ladder_1;
        _1831 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_807, _808, _809), _1737);
        _1827 = _1811.x * cbModelParam._m0[1u].z;
        _1829 = _1811.y * cbModelParam._m0[1u].z;
        _1831 = _1811.z * cbModelParam._m0[1u].z;
    }
    float _1843 = ((((1.0 - _828) * ((_815 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_828 * _815)) * _799;
    float _1844 = _1843 * ((cbModelParam._m0[1u].w * (_1827 - _1728)) + _1728);
    float _1845 = _1843 * ((cbModelParam._m0[1u].w * (_1829 - _1730)) + _1730);
    float _1846 = _1843 * ((cbModelParam._m0[1u].w * (_1831 - _1732)) + _1732);
    float _1849 = fma(_1846, cbSceneParam._m0[89u].z, fma(_1845, cbSceneParam._m0[89u].y, _1844 * cbSceneParam._m0[89u].x));
    float _1852 = fma(_1846, cbSceneParam._m0[90u].z, fma(_1845, cbSceneParam._m0[90u].y, _1844 * cbSceneParam._m0[90u].x));
    float _1855 = fma(_1846, cbSceneParam._m0[91u].z, fma(_1845, cbSceneParam._m0[91u].y, _1844 * cbSceneParam._m0[91u].x));
    float _1889 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1893 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1897 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1901 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1902 = _1889 / _1901;
    float _1903 = _1893 / _1901;
    float _1904 = _1897 / _1901;
    float _2051;
    float _2052;
    float _2053;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1931 = ((uint(_1904 > cbSceneParam._m0[59u].y) + uint(_1904 > cbSceneParam._m0[59u].x)) + uint(_1904 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1932 = _1931 + 43u;
        uint _1940 = _1931 + 44u;
        uint _1948 = _1931 + 45u;
        uint _1956 = _1931 + 46u;
        float _1967 = fma(_1901, cbSceneParam._m0[_1932].w, fma(_1897, cbSceneParam._m0[_1932].z, fma(_1893, cbSceneParam._m0[_1932].y, _1889 * cbSceneParam._m0[_1932].x)));
        float _1971 = fma(_1901, cbSceneParam._m0[_1940].w, fma(_1897, cbSceneParam._m0[_1940].z, fma(_1893, cbSceneParam._m0[_1940].y, _1889 * cbSceneParam._m0[_1940].x)));
        float _1979 = fma(_1901, cbSceneParam._m0[_1956].w, fma(_1897, cbSceneParam._m0[_1956].z, fma(_1893, cbSceneParam._m0[_1956].y, _1889 * cbSceneParam._m0[_1956].x)));
        float _1984 = cbSceneParam._m0[33u].z * _1979;
        float _1986 = cbSceneParam._m0[33u].w * _1979;
        float _1989 = fma(_1901, cbSceneParam._m0[_1948].w, fma(_1897, cbSceneParam._m0[_1948].z, fma(_1893, cbSceneParam._m0[_1948].y, _1889 * cbSceneParam._m0[_1948].x))) / _1979;
        float _2037 = (cbSceneParam._m0[33u].x - sqrt(((_1903 * _1903) + (_1902 * _1902)) + (_1904 * _1904))) * cbSceneParam._m0[33u].y;
        float _4377 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2044 = (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1984 + _1967) / _1979, (_1986 + _1971) / _1979), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1986 + _1967) / _1979, (_1971 - _1984) / _1979), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1967 - _1984) / _1979, (_1971 - _1986) / _1979), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1967 - _1986) / _1979, (_1984 + _1971) / _1979), _1989), 0.0)).x), vec4(0.25)));
        _2051 = 1.0 - (_2044 * cbSceneParam._m0[34u].x);
        _2052 = 1.0 - (_2044 * cbSceneParam._m0[34u].y);
        _2053 = 1.0 - (_2044 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2051 = 1.0;
        _2052 = 1.0;
        _2053 = 1.0;
    }
    float _2117;
    float _2119;
    float _2121;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2105 = fma(_1901, cbSceneParam._m0[63u].w, fma(_1897, cbSceneParam._m0[63u].z, fma(_1893, cbSceneParam._m0[63u].y, _1889 * cbSceneParam._m0[63u].x)));
        float _2106 = fma(_1901, cbSceneParam._m0[60u].w, fma(_1897, cbSceneParam._m0[60u].z, fma(_1893, cbSceneParam._m0[60u].y, _1889 * cbSceneParam._m0[60u].x))) / _2105;
        float _2107 = fma(_1901, cbSceneParam._m0[61u].w, fma(_1897, cbSceneParam._m0[61u].z, fma(_1893, cbSceneParam._m0[61u].y, _1889 * cbSceneParam._m0[61u].x))) / _2105;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2106 >= cbSceneParam._m0[64u].x) && (_2107 >= cbSceneParam._m0[64u].y)) && (_2106 <= cbSceneParam._m0[64u].z)) && (_2107 <= cbSceneParam._m0[64u].w))
        {
            float _2245 = fma(_1901, cbSceneParam._m0[62u].w, fma(_1897, cbSceneParam._m0[62u].z, fma(_1893, cbSceneParam._m0[62u].y, _1889 * cbSceneParam._m0[62u].x))) / _2105;
            float _2249 = isnan(cbSceneParam._m0[41u].w) ? _2245 : (isnan(_2245) ? cbSceneParam._m0[41u].w : max(_2245, cbSceneParam._m0[41u].w));
            float _2292 = (cbSceneParam._m0[33u].x - sqrt(((_1903 * _1903) + (_1902 * _1902)) + (_1904 * _1904))) * cbSceneParam._m0[33u].y;
            float _4393 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
            float _2299 = (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2106, cbSceneParam._m0[33u].w + _2107), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2106, _2107 - cbSceneParam._m0[33u].z), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2106 - cbSceneParam._m0[33u].z, _2107 - cbSceneParam._m0[33u].w), _2249), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2106 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2107), _2249), 0.0)).x), vec4(0.25)));
            float _2303 = 1.0 - (_2299 * cbSceneParam._m0[34u].x);
            float _2304 = 1.0 - (_2299 * cbSceneParam._m0[34u].y);
            float _2305 = 1.0 - (_2299 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2305) ? _2053 : (isnan(_2053) ? _2305 : min(_2053, _2305));
            frontier_phi_37_36_ladder_1 = isnan(_2304) ? _2052 : (isnan(_2052) ? _2304 : min(_2052, _2304));
            frontier_phi_37_36_ladder_2 = isnan(_2303) ? _2051 : (isnan(_2051) ? _2303 : min(_2051, _2303));
        }
        else
        {
            frontier_phi_37_36_ladder = _2053;
            frontier_phi_37_36_ladder_1 = _2052;
            frontier_phi_37_36_ladder_2 = _2051;
        }
        _2117 = frontier_phi_37_36_ladder_2;
        _2119 = frontier_phi_37_36_ladder_1;
        _2121 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2117 = _2051;
        _2119 = _2052;
        _2121 = _2053;
    }
    uvec4 _2126 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _2128 = _2126.x * 14u;
    uint _2129 = _2128 + 13u;
    float _2136 = _799 + (-1.0);
    float _2141 = (cbLight._m0[_2129].x * _2136) + 1.0;
    float _2142 = (cbLight._m0[_2129].y * _2136) + 1.0;
    float _2143 = (cbLight._m0[_2129].z * _2136) + 1.0;
    float _2144 = (cbLight._m0[_2129].w * _2136) + 1.0;
    uint _2145 = _2128 + 5u;
    float _2151 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
    uint _2155 = _2128 + 4u;
    float _2164 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2168 = _2128 | 1u;
    float _2179 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_636, _637, _638));
    float _2182 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_636, _637, _638));
    float _4429 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _4440 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2187 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * 0.3183098733425140380859375;
    float _2189 = (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * 0.3183098733425140380859375;
    float _2196 = ((cbLight._m0[_2145].x * _2151) * _2189) + (((cbLight._m0[_2155].x * _2117) * _2164) * _2187);
    float _2197 = ((_2151 * cbLight._m0[_2145].y) * _2189) + (((cbLight._m0[_2155].y * _2119) * _2164) * _2187);
    float _2198 = ((_2151 * cbLight._m0[_2145].z) * _2189) + (((cbLight._m0[_2155].z * _2121) * _2164) * _2187);
    uvec4 _2202 = floatBitsToUint(cbLight._m0[_2128 + 12u]);
    bool _2204 = _2202.x == 0u;
    float _2306;
    float _2308;
    float _2310;
    if (_2204)
    {
        _2306 = _2196;
        _2308 = _2197;
        _2310 = _2198;
    }
    else
    {
        uint _2314 = _2128 + 6u;
        float _2330 = (dot(vec3(cbLight._m0[_2128 + 2u].xyz), vec3(_636, _637, _638)) * 0.5) + 0.5;
        float _2331 = _2330 * _2330;
        float _4451 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2332 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _2333 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2306 = (((cbLight._m0[_2314].x * 0.3183098733425140380859375) * _2332) * _2333) + _2196;
        _2308 = (((cbLight._m0[_2314].y * 0.3183098733425140380859375) * _2332) * _2333) + _2197;
        _2310 = (((cbLight._m0[_2314].z * 0.3183098733425140380859375) * _2332) * _2333) + _2198;
    }
    bool _2313 = _2202.y == 0u;
    float _2368;
    float _2370;
    float _2372;
    if (_2313)
    {
        _2368 = _2306;
        _2370 = _2308;
        _2372 = _2310;
    }
    else
    {
        uint _2530 = _2128 + 7u;
        float _2546 = (dot(vec3(cbLight._m0[_2128 + 3u].xyz), vec3(_636, _637, _638)) * 0.5) + 0.5;
        float _2547 = _2546 * _2546;
        float _4467 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2548 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2549 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2368 = (((cbLight._m0[_2530].x * 0.3183098733425140380859375) * _2548) * _2549) + _2306;
        _2370 = (((cbLight._m0[_2530].y * 0.3183098733425140380859375) * _2548) * _2549) + _2308;
        _2372 = (((cbLight._m0[_2530].z * 0.3183098733425140380859375) * _2548) * _2549) + _2310;
    }
    uint _2375 = _2128 + 8u;
    float _2388 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _639) * 0.949999988079071044921875);
    float _2389 = _2388 * _2388;
    float _2390 = cbLight._m0[_2128].x + _716;
    float _2391 = cbLight._m0[_2128].y + _717;
    float _2392 = cbLight._m0[_2128].z + _718;
    float _2396 = inversesqrt(dot(vec3(_2390, _2391, _2392), vec3(_2390, _2391, _2392)));
    float _2397 = _2396 * _2390;
    float _2398 = _2396 * _2391;
    float _2399 = _2396 * _2392;
    float _2400 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2128].xyz));
    float _4483 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2403 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _4494 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _2404 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2405 = dot(vec3(_636, _637, _638), vec3(_2397, _2398, _2399));
    float _4505 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _2408 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
    float _2409 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2397, _2398, _2399));
    float _4516 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2413 = _2389 * _2389;
    float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
    float _2428 = (exp2(log2(1.0 - (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2429 = 1.0 - _2389;
    float _2440 = (0.5 / (((_2404 * ((_2403 * _2429) + _2389)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2429) + _2389) * _2403))) * _2403;
    float _4527 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2442 = (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
    uint _2456 = _2128 + 9u;
    float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _639) * 0.949999988079071044921875);
    float _2468 = _2467 * _2467;
    float _2469 = cbLight._m0[_2168].x + _716;
    float _2470 = cbLight._m0[_2168].y + _717;
    float _2471 = cbLight._m0[_2168].z + _718;
    float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
    float _2476 = _2475 * _2469;
    float _2477 = _2475 * _2470;
    float _2478 = _2475 * _2471;
    float _2479 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2168].xyz));
    float _4538 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2482 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2483 = dot(vec3(_636, _637, _638), vec3(_2476, _2477, _2478));
    float _4549 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2487 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2476, _2477, _2478));
    float _4560 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2491 = _2468 * _2468;
    float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
    float _2504 = (exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2505 = 1.0 - _2468;
    float _2515 = (0.5 / (((_2404 * ((_2482 * _2505) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2505) + _2468) * _2482))) * _2482;
    float _4571 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2517 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
    float _2527 = (((_2504 * cbLight._m0[_2456].x) * _2517) * _2151) + ((((cbLight._m0[_2375].x * _2117) * _2428) * _2442) * _2164);
    float _2528 = (((_2504 * cbLight._m0[_2456].y) * _2517) * _2151) + ((((cbLight._m0[_2375].y * _2119) * _2428) * _2442) * _2164);
    float _2529 = (((_2504 * cbLight._m0[_2456].z) * _2517) * _2151) + ((((cbLight._m0[_2375].z * _2121) * _2428) * _2442) * _2164);
    float _2585;
    float _2587;
    float _2589;
    if (_2204)
    {
        _2585 = _2527;
        _2587 = _2528;
        _2589 = _2529;
    }
    else
    {
        uint _2591 = _2128 + 2u;
        uint _2595 = _2128 + 10u;
        float _2609 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2591].w)) * _639) * 0.949999988079071044921875);
        float _2610 = _2609 * _2609;
        float _2611 = cbLight._m0[_2591].x + _716;
        float _2612 = cbLight._m0[_2591].y + _717;
        float _2613 = cbLight._m0[_2591].z + _718;
        float _2617 = inversesqrt(dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613)));
        float _2618 = _2617 * _2611;
        float _2619 = _2617 * _2612;
        float _2620 = _2617 * _2613;
        float _2621 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2591].xyz));
        float _4582 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _2625 = dot(vec3(_636, _637, _638), vec3(_2618, _2619, _2620));
        float _4593 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2629 = dot(vec3(cbLight._m0[_2591].xyz), vec3(_2618, _2619, _2620));
        float _4604 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2633 = _2610 * _2610;
        float _2637 = ((_2628 * _2628) * (_2633 + (-1.0))) + 1.0;
        float _2646 = (exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2647 = 1.0 - _2610;
        float _2657 = (0.5 / (((_2404 * ((_2624 * _2647) + _2610)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2647) + _2610) * _2624))) * _2624;
        float _4615 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2659 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2633 / ((_2637 * _2637) * 3.141590118408203125));
        float _2660 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2585 = (((_2646 * cbLight._m0[_2595].x) * _2659) * _2660) + _2527;
        _2587 = (((_2646 * cbLight._m0[_2595].y) * _2659) * _2660) + _2528;
        _2589 = (((_2646 * cbLight._m0[_2595].z) * _2659) * _2660) + _2529;
    }
    float _2691;
    float _2693;
    float _2695;
    if (_2313)
    {
        _2691 = _2585;
        _2693 = _2587;
        _2695 = _2589;
    }
    else
    {
        uint _2702 = _2128 + 3u;
        uint _2706 = _2128 + 11u;
        float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2702].w)) * _639) * 0.949999988079071044921875);
        float _2721 = _2720 * _2720;
        float _2722 = cbLight._m0[_2702].x + _716;
        float _2723 = cbLight._m0[_2702].y + _717;
        float _2724 = cbLight._m0[_2702].z + _718;
        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
        float _2729 = _2728 * _2722;
        float _2730 = _2728 * _2723;
        float _2731 = _2728 * _2724;
        float _2732 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_2702].xyz));
        float _4631 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
        float _2735 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2736 = dot(vec3(_636, _637, _638), vec3(_2729, _2730, _2731));
        float _4642 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _2740 = dot(vec3(cbLight._m0[_2702].xyz), vec3(_2729, _2730, _2731));
        float _4653 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2744 = _2721 * _2721;
        float _2748 = ((_2739 * _2739) * (_2744 + (-1.0))) + 1.0;
        float _2757 = (exp2(log2(1.0 - (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2758 = 1.0 - _2721;
        float _2768 = (0.5 / (((_2404 * ((_2735 * _2758) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2404 * _2758) + _2721) * _2735))) * _2735;
        float _4664 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2770 = (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2744 / ((_2748 * _2748) * 3.141590118408203125));
        float _2771 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2691 = (((_2757 * cbLight._m0[_2706].x) * _2770) * _2771) + _2585;
        _2693 = (((_2757 * cbLight._m0[_2706].y) * _2770) * _2771) + _2587;
        _2695 = (((_2757 * cbLight._m0[_2706].z) * _2770) * _2771) + _2589;
    }
    float _2837;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    float _2847;
    if (_2126.y == 0u)
    {
        uvec4 _2792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2793 = _2792.x;
        uint _2804 = uint((float(_2792.y) * floor(float(uint(cbSceneParam._m0[85u].y * _737) / _2793))) + floor(float(uint(cbSceneParam._m0[85u].x * _736) / _2793)));
        float _2814 = (log2(_1904 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2815 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        uint _2818 = uint(isnan(14.0) ? _2815 : (isnan(_2815) ? 14.0 : min(_2815, 14.0)));
        uvec4 _2823 = texelFetch(g_lightClusterGridBuffer, int(((_2818 << 2u) + (_2804 << 6u)) >> 2u));
        uint _2824 = _2823.x;
        uint _2825 = _2792.z;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        if (((((1u << ((_2825 >> 4u) & 15u)) + 4294967295u) & _2824) == 0u) || ((_2825 & 240u) == 0u))
        {
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
            _2912 = 0.0;
            _2914 = 0.0;
        }
        else
        {
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _2913;
            float _2915;
            float _3057 = 0.0;
            float _3058 = 0.0;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            uint _3063 = 0u;
            uint _3072;
            bool _3073;
            for (;;)
            {
                _3072 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3063 << 2u)) >> 2u)).x;
                _3073 = _3072 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3073)
                {
                    frontier_phi_71_pred = _3062;
                    frontier_phi_71_pred_1 = _3061;
                    frontier_phi_71_pred_2 = _3060;
                    frontier_phi_71_pred_3 = _3059;
                    frontier_phi_71_pred_4 = _3058;
                    frontier_phi_71_pred_5 = _3057;
                }
                else
                {
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    uint _3208;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3059;
                    _3205 = _3060;
                    _3206 = _3061;
                    _3207 = _3062;
                    _3208 = _3072;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    for (;;)
                    {
                        uint _3212 = uint(findLSB(_3208)) + (_3063 << 5u);
                        uint _3209 = (_3208 + 4294967295u) & _3208;
                        uint _3214 = _3212 * 48u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3214)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3214 + 3u)).x));
                        uint _3234 = (_3212 * 48u) + 4u;
                        vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 3u)).x));
                        uint _3253 = (_3212 * 48u) + 8u;
                        vec3 _3264 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3253)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3253 + 2u)).x));
                        float _3268 = _3228.x - _1902;
                        float _3269 = _3228.y - _1903;
                        float _3270 = _3228.z - _1904;
                        float _3271 = dot(vec3(_3268, _3269, _3270), vec3(_3268, _3269, _3270));
                        float _3274 = inversesqrt(_3271);
                        float _3275 = _3274 * _3268;
                        float _3276 = _3274 * _3269;
                        float _3277 = _3274 * _3270;
                        float _3278 = dot(vec3(_755, _758, _761), vec3(_3275, _3276, _3277));
                        float _3283 = 1.0 - (_3271 * _3228.w);
                        float _4690 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3284 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
                        float _3285 = sqrt(_3271) * _3247.w;
                        float _3288 = 1.39999997615814208984375 / (_3285 + 1.39999997615814208984375);
                        float _3289 = _3288 * _3288;
                        float _3292 = ((1.0 - _3289) * _3278) + _3289;
                        float _3295 = _3285 * _3285;
                        float _3299 = ((isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0))) * _3284) / ((_3295 * 0.699999988079071044921875) + 1.0);
                        float _3303 = (-0.0) - _1902;
                        float _3304 = (-0.0) - _1903;
                        float _3305 = (-0.0) - _1904;
                        float _3309 = inversesqrt(dot(vec3(_3303, _3304, _3305), vec3(_3303, _3304, _3305)));
                        float _3310 = _3309 * _3303;
                        float _3311 = _3309 * _3304;
                        float _3312 = _3309 * _3305;
                        float _3319 = exp2(log2(1.0 / ((_3295 * 3.5) + 5.0)) * 0.25);
                        float _3320 = 1.0 - _815;
                        float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                        float _3328 = _3327 * _3327;
                        float _3329 = _3328 * _3328;
                        float _3330 = _3310 + _3275;
                        float _3331 = _3311 + _3276;
                        float _3332 = _3312 + _3277;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3340 = dot(vec3(_755, _758, _761), vec3(_3310, _3311, _3312));
                        float _4706 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3343 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                        float _3344 = dot(vec3(_755, _758, _761), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                        float _4717 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3347 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
                        float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                        float _3352 = _3288 * _3328;
                        float _3353 = _3352 * _3352;
                        float _3356 = ((1.0 - _3353) * _3278) + _3353;
                        float _4728 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3357 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3358 = 1.0 - _3328;
                        float _3368 = (0.5 / (((_3357 * ((_3343 * _3358) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3357 * _3358) + _3328) * _3343))) * _3357;
                        float _4739 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3379 = (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0)))) / ((_3351 * _3351) * ((_3295 * 2.1991131305694580078125) + 3.141590118408203125))) * _3284;
                        _3132 = (_3299 * _3247.x) + _3205;
                        _3133 = (_3299 * _3247.y) + _3206;
                        _3134 = (_3299 * _3247.z) + _3207;
                        _3129 = (_3379 * _3264.x) + _3202;
                        _3130 = (_3379 * _3264.y) + _3203;
                        _3131 = (_3379 * _3264.z) + _3204;
                        if (_3209 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3131;
                            _3205 = _3132;
                            _3206 = _3133;
                            _3207 = _3134;
                            _3208 = _3209;
                        }
                    }
                    frontier_phi_71_pred = _3134;
                    frontier_phi_71_pred_1 = _3133;
                    frontier_phi_71_pred_2 = _3132;
                    frontier_phi_71_pred_3 = _3131;
                    frontier_phi_71_pred_4 = _3130;
                    frontier_phi_71_pred_5 = _3129;
                }
                _2915 = frontier_phi_71_pred;
                _2913 = frontier_phi_71_pred_1;
                _2911 = frontier_phi_71_pred_2;
                _2909 = frontier_phi_71_pred_3;
                _2907 = frontier_phi_71_pred_4;
                _2905 = frontier_phi_71_pred_5;
                uint _3064 = _3063 + 1u;
                if (_3064 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3057 = _2905;
                    _3058 = _2907;
                    _3059 = _2909;
                    _3060 = _2911;
                    _3061 = _2913;
                    _3062 = _2915;
                    _3063 = _3064;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
            _2912 = _2913;
            _2914 = _2915;
        }
        uvec4 _2918 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2919 = _2918.z;
        uint _2921 = (_2919 >> 8u) & 15u;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        if (((4294967295u << _2921) & _2824) == 0u)
        {
            _3025 = _2904;
            _3027 = _2906;
            _3029 = _2908;
            _3031 = _2910;
            _3033 = _2912;
            _3035 = _2914;
        }
        else
        {
            float _3050 = inversesqrt(dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904)));
            float _3051 = _3050 * _1902;
            float _3052 = _3050 * _1903;
            float _3053 = _3050 * _1904;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2921 < ((_2919 >> 12u) & 15u))
            {
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3185 = _2904;
                float _3186 = _2906;
                float _3187 = _2908;
                float _3188 = _2910;
                float _3189 = _2912;
                float _3190 = _2914;
                uint _3191 = _2921;
                uint _3200;
                bool _3201;
                for (;;)
                {
                    _3200 = texelFetch(g_lightClassification, int((((_2818 << 5u) + (_2804 << 9u)) + (_3191 << 2u)) >> 2u)).x;
                    _3201 = _3200 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3201)
                    {
                        frontier_phi_82_pred = _3190;
                        frontier_phi_82_pred_1 = _3189;
                        frontier_phi_82_pred_2 = _3188;
                        frontier_phi_82_pred_3 = _3187;
                        frontier_phi_82_pred_4 = _3186;
                        frontier_phi_82_pred_5 = _3185;
                    }
                    else
                    {
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3406 = _3185;
                        float _3407 = _3186;
                        float _3408 = _3187;
                        float _3409 = _3188;
                        float _3410 = _3189;
                        float _3411 = _3190;
                        uint _3412 = _3200;
                        uint _3413;
                        vec4 _3438;
                        float _3439;
                        vec4 _3454;
                        vec3 _3466;
                        vec4 _3481;
                        vec4 _3496;
                        float _3542;
                        bool _3543;
                        for (;;)
                        {
                            uint _3423 = ((_3191 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3412));
                            _3413 = (_3412 + 4294967295u) & _3412;
                            uint _3425 = _3423 * 40u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            _3439 = _3438.w;
                            uint _3441 = (_3423 * 40u) + 4u;
                            _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3456 = (_3423 * 40u) + 8u;
                            _3466 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x));
                            uint _3468 = (_3423 * 40u) + 16u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3423 * 40u) + 20u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3423 * 40u) + 24u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            uint _3517 = (_3423 * 40u) + 28u;
                            vec4 _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            _3542 = fma(_1904, _3530.z, fma(_1903, _3530.y, _3530.x * _1902)) + _3530.w;
                            _3543 = !((fma(_1904, _3511.z, fma(_1903, _3511.y, _3511.x * _1902)) + _3511.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3543)
                            {
                                float _3570 = _3438.x - _1902;
                                float _3571 = _3438.y - _1903;
                                float _3572 = _3438.z - _1904;
                                float _3573 = dot(vec3(_3570, _3571, _3572), vec3(_3570, _3571, _3572));
                                float _3576 = inversesqrt(_3573);
                                float _3577 = _3576 * _3570;
                                float _3578 = _3576 * _3571;
                                float _3579 = _3576 * _3572;
                                float _3583 = 1.0 - (_3573 / (_3439 * _3439));
                                float _4750 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                                float _3588 = sqrt(_3573) * _3454.w;
                                float _3590 = 1.39999997615814208984375 / (_3588 + 1.39999997615814208984375);
                                float _3591 = _3590 * _3590;
                                float _3594 = ((1.0 - _3591) * dot(vec3(_3577, _3578, _3579), vec3(_755, _758, _761))) + _3591;
                                float _3597 = _3588 * _3588;
                                float _3601 = (fma(_1904, _3481.z, fma(_1903, _3481.y, _3481.x * _1902)) + _3481.w) / _3542;
                                float _3602 = (fma(_1904, _3496.z, fma(_1903, _3496.y, _3496.x * _1902)) + _3496.w) / _3542;
                                float _3606 = 1.0 - dot(vec2(_3601, _3602), vec2(_3601, _3602));
                                float _4766 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3607 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                                float _3608 = _3607 * (((isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0))) * _3584) / ((_3597 * 0.699999988079071044921875) + 1.0));
                                float _3620 = exp2(log2(1.0 / ((_3597 * 3.5) + 5.0)) * 0.25);
                                float _3621 = 1.0 - _815;
                                float _3628 = sqrt(1.0 - ((1.0 - (_3621 * _3621)) * (1.0 - (_3620 * _3620))));
                                float _3629 = _3628 * _3628;
                                float _3630 = _3629 * _3629;
                                float _3631 = _3577 - _3051;
                                float _3632 = _3578 - _3052;
                                float _3633 = _3579 - _3053;
                                float _3637 = inversesqrt(dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633)));
                                float _3641 = dot(vec3(_755, _758, _761), vec3((-0.0) - _3051, (-0.0) - _3052, (-0.0) - _3053));
                                float _4777 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3644 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                                float _3645 = dot(vec3(_755, _758, _761), vec3(_3637 * _3631, _3637 * _3632, _3637 * _3633));
                                float _4788 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3648 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3652 = ((_3648 * _3648) * (_3630 + (-1.0))) + 1.0;
                                float _3653 = _3590 * _3629;
                                float _3654 = _3653 * _3653;
                                float _3660 = ((1.0 - _3654) * dot(vec3(_755, _758, _761), vec3(_3577, _3578, _3579))) + _3654;
                                float _4799 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                                float _3662 = 1.0 - _3629;
                                float _3672 = (0.5 / (((_3661 * ((_3644 * _3662) + _3629)) + 9.9999999392252902907785028219223e-09) + (((_3661 * _3662) + _3629) * _3644))) * _3661;
                                float _4810 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3682 = (_3607 * _3584) * (((_3630 * 3.1415927410125732421875) * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) / ((_3652 * _3652) * ((_3597 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3608 * _3454.z;
                                frontier_phi_88_pred_1 = _3608 * _3454.y;
                                frontier_phi_88_pred_2 = _3608 * _3454.x;
                                frontier_phi_88_pred_3 = _3682 * _3466.z;
                                frontier_phi_88_pred_4 = _3682 * _3466.y;
                                frontier_phi_88_pred_5 = _3682 * _3466.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3691 = frontier_phi_88_pred;
                            _3690 = frontier_phi_88_pred_1;
                            _3689 = frontier_phi_88_pred_2;
                            _3688 = frontier_phi_88_pred_3;
                            _3687 = frontier_phi_88_pred_4;
                            _3686 = frontier_phi_88_pred_5;
                            _3396 = _3689 + _3409;
                            _3397 = _3690 + _3410;
                            _3398 = _3691 + _3411;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            if (_3413 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3396;
                                _3410 = _3397;
                                _3411 = _3398;
                                _3412 = _3413;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3398;
                        frontier_phi_82_pred_1 = _3397;
                        frontier_phi_82_pred_2 = _3396;
                        frontier_phi_82_pred_3 = _3395;
                        frontier_phi_82_pred_4 = _3394;
                        frontier_phi_82_pred_5 = _3393;
                    }
                    _3036 = frontier_phi_82_pred;
                    _3034 = frontier_phi_82_pred_1;
                    _3032 = frontier_phi_82_pred_2;
                    _3030 = frontier_phi_82_pred_3;
                    _3028 = frontier_phi_82_pred_4;
                    _3026 = frontier_phi_82_pred_5;
                    uint _3192 = _3191 + 1u;
                    if (_3192 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3185 = _3026;
                        _3186 = _3028;
                        _3187 = _3030;
                        _3188 = _3032;
                        _3189 = _3034;
                        _3190 = _3036;
                        _3191 = _3192;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3032;
                frontier_phi_63_64_ladder_1 = _3036;
                frontier_phi_63_64_ladder_2 = _3034;
                frontier_phi_63_64_ladder_3 = _3030;
                frontier_phi_63_64_ladder_4 = _3028;
                frontier_phi_63_64_ladder_5 = _3026;
            }
            else
            {
                frontier_phi_63_64_ladder = _2910;
                frontier_phi_63_64_ladder_1 = _2914;
                frontier_phi_63_64_ladder_2 = _2912;
                frontier_phi_63_64_ladder_3 = _2908;
                frontier_phi_63_64_ladder_4 = _2906;
                frontier_phi_63_64_ladder_5 = _2904;
            }
            _3025 = frontier_phi_63_64_ladder_5;
            _3027 = frontier_phi_63_64_ladder_4;
            _3029 = frontier_phi_63_64_ladder_3;
            _3031 = frontier_phi_63_64_ladder;
            _3033 = frontier_phi_63_64_ladder_2;
            _3035 = frontier_phi_63_64_ladder_1;
        }
        float _3040 = isnan(1.0) ? _799 : (isnan(_799) ? 1.0 : min(_799, 1.0));
        _2837 = (_3040 * _3031) + _2368;
        _2839 = (_3040 * _3033) + _2370;
        _2841 = (_3040 * _3035) + _2372;
        _2843 = ((_3025 * 0.039999999105930328369140625) * _3040) + _2691;
        _2845 = ((_3027 * 0.039999999105930328369140625) * _3040) + _2693;
        _2847 = ((_3029 * 0.039999999105930328369140625) * _3040) + _2695;
    }
    else
    {
        _2837 = _2368;
        _2839 = _2370;
        _2841 = _2372;
        _2843 = _2691;
        _2845 = _2693;
        _2847 = _2695;
    }
    float _4826 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4837 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _4848 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _2864 = ((isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2837 + ((isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0))) * _799))) + ((_2843 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1636)) * cbPerFrame._m0[3u].x);
    float _2865 = ((isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0))) * (_2839 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _799))) + ((_2845 + ((isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0))) * _1636)) * cbPerFrame._m0[3u].x);
    float _2866 = ((isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0))) * (_2841 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _799))) + ((_2847 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1636)) * cbPerFrame._m0[3u].x);
    uint _2867 = _240 + 6u;
    float _2875 = _736 / cbSceneParam._m0[86u].x;
    float _2876 = _737 / cbSceneParam._m0[86u].y;
    vec4 _2890 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, (log2((isnan(cbSceneParam._m0[77u].w) ? _657 : (isnan(_657) ? cbSceneParam._m0[77u].w : min(_657, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2892 = _2890.x;
    float _2893 = _2890.y;
    float _2894 = _2890.z;
    float _2895 = _2890.w;
    float _2967;
    float _2969;
    float _2971;
    float _2973;
    if (_657 > cbSceneParam._m0[78u].w)
    {
        float _2929 = isnan(_657) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _657 : min(cbSceneParam._m0[80u].w, _657));
        float _2930 = _2929 / _657;
        float _2941 = _2930 * _709;
        float _2942 = _710 * _2930;
        float _2943 = (-0.0) - _2942;
        float _2945 = _2930 * _711;
        float _2947 = (cbSceneParam._m0[77u].w * _2943) / _2929;
        float _2948 = _2947 + cbSceneParam._m0[79u].w;
        float _2949 = cbSceneParam._m0[79u].w - _2942;
        float _2955 = sqrt(((_2941 * _2941) + (_2942 * _2942)) + (_2945 * _2945));
        float _2958 = (1.0 - (cbSceneParam._m0[77u].w / _2929)) * _2955;
        float _2963 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2965 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3142;
        if (abs((_2943 - _2947) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3142 = ((((_2948 > 0.0) ? exp2(_2963 * _2948) : (2.0 - exp2(_2965 * _2948))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2958;
        }
        else
        {
            float _3086 = 1.0 / cbSceneParam._m0[80u].x;
            float _3087 = isnan(_2949) ? _2948 : (isnan(_2948) ? _2949 : max(_2948, _2949));
            float _3088 = isnan(_2949) ? _2948 : (isnan(_2948) ? _2949 : min(_2948, _2949));
            float _3097 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : min(_3087, 0.0));
            float _3098 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : min(_3088, 0.0));
            _3142 = ((abs(_2955 / _2943) * cbSceneParam._m0[80u].y) * ((((_3097 - _3098) * 2.0) - ((exp2(_2963 * (isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0)))) - exp2(_2963 * (isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0))))) * _3086)) - ((exp2(_2965 * _3097) - exp2(_2965 * _3098)) * _3086))) + (_2958 * cbSceneParam._m0[80u].z);
        }
        vec4 _3144 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2875, _2876, 1.0), 0.0);
        float _3153 = exp2((_3142 * (-1.44269502162933349609375)) * (1.0 - _3144.w));
        float _3154 = log2(_3153);
        float _3170 = log2(_2895);
        _2967 = (exp2(_3170 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].x)) * _3144.x) / cbSceneParam._m0[78u].x)) + _2892;
        _2969 = (exp2(_3170 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].y)) * _3144.y) / cbSceneParam._m0[78u].y)) + _2893;
        _2971 = (exp2(_3170 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3154 * cbSceneParam._m0[78u].z)) * _3144.z) / cbSceneParam._m0[78u].z)) + _2894;
        _2973 = _3153 * _2895;
    }
    else
    {
        _2967 = _2892;
        _2969 = _2893;
        _2971 = _2894;
        _2973 = _2895;
    }
    bool _3180;
    vec4 _2983;
    vec4 _3005;
    float _3007;
    float _3011;
    float _3012;
    float _3013;
    float _3014;
    bool _3024;
    for (;;)
    {
        _2983 = cbMatDynParam._m0[0u];
        float _2985 = roundEven(_2983.y);
        bool _2986 = _2985 == 3.0;
        float _2987 = log2(_2973);
        float _2994 = exp2(_2987 * cbSceneParam._m0[78u].x) * _2864;
        float _2995 = exp2(_2987 * cbSceneParam._m0[78u].y) * _2865;
        float _2996 = exp2(_2987 * cbSceneParam._m0[78u].z) * _2866;
        float _3003 = _725 + (-0.5);
        _3005 = cbMtdParam._m0[1u];
        _3007 = _3005.y * _3003;
        float _3010 = (_2985 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3011 = _3010 * (_2986 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2967)));
        _3012 = _3010 * (_2986 ? _2995 : (_2995 + (cbSceneParam._m0[72u].w * _2969)));
        _3013 = _3010 * (_2986 ? _2996 : (_2996 + (cbSceneParam._m0[72u].w * _2971)));
        _3014 = _3003 * 0.999000012874603271484375;
        _3024 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3024)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _3014) < 0.5)
            {
                _3180 = true;
                break;
            }
        }
        uint _3121 = _774 + uint(_2983.w);
        if ((cbInstanceData._m0[_3121].w < 1.0) && ((cbInstanceData._m0[_3121].w + _3014) < 0.5))
        {
            _3180 = true;
            break;
        }
        if ((_3007 + 1.0) < _3005.x)
        {
            _3180 = true;
            break;
        }
        _3180 = false;
        break;
    }
    float _3384;
    if (_3180)
    {
        discard_state = true;
        _3384 = 0.0;
    }
    else
    {
        _3384 = cbInstanceData._m0[_2867].w;
    }
    SV_Target.x = _3011;
    SV_Target.y = _3012;
    SV_Target.z = _3013;
    SV_Target.w = _3384;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2867].w;
    discard_exit();
}


