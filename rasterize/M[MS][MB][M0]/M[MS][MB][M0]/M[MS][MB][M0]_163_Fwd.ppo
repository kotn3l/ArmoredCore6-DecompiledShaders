#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1322;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _232 = _231 * _223;
    float _233 = _231 * _224;
    float _234 = _231 * _225;
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = _245 * TANGENT.x;
    float _247 = _245 * TANGENT.y;
    float _248 = _245 * TANGENT.z;
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _358 = _356.x;
    float _368 = dot(vec4(_358, _356.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _385 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_358 - _368) * cbMtdParam._m0[24u].x) + _368) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3625 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _393 = (_386 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _394 = (_386 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _395 = (_386 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _414 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _434 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _270) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _271) + cbTextureTilingScale._m0[20u].w));
    vec4 _461 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _478 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _480 = _478.x;
    float _481 = _478.y;
    float _482 = _478.z;
    float _491 = ((_461.z - _482) * _386) + _482;
    float _494 = ((((_461.x - _480) * _386) + _480) * 2.0) + (-1.0);
    float _495 = ((((_461.y - _481) * _386) + _481) * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3636 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))));
    vec4 _521 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _533 = (_494 + ((((_434.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_521.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _534 = (_495 + ((((_434.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_521.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _537 = fma(_501, _239, fma(_534, _246, _533 * _232));
    float _540 = fma(_501, _240, fma(_534, _247, _533 * _233));
    float _543 = fma(_501, _241, fma(_534, _248, _533 * _234));
    float _547 = inversesqrt(dot(vec3(_537, _540, _543), vec3(_537, _540, _543)));
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _578 = _576.x;
    float _579 = 1.0 - _578;
    float _583 = ((_578 - _579) * cbMtdParam._m0[24u].z) + _579;
    float _585 = (cbMtdParam._m0[19u].x + dot(vec4(_547 * _537, _547 * _540, _547 * _543, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_583 * cbMtdParam._m0[21u].z);
    float _3647 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _588 = (-0.0) - cbMtdParam._m0[24u].y;
    float _590 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _590 : (isnan(_590) ? 1.0 : min(_590, 1.0));
    float _598 = _586 - ((_586 * TEXCOORD_8.x) * _591);
    float _599 = _586 - ((_586 * TEXCOORD_8.y) * _591);
    float _600 = _586 - ((_586 * TEXCOORD_8.z) * _591);
    float _607 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _611 = ((isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : min(_607, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _619 = (_611 - (((_583 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _611))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3678 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _624 = ((_598 * ((_414.x * cbMtdParam._m0[18u].x) - _393)) * _620) + _393;
    float _625 = ((_599 * ((_414.y * cbMtdParam._m0[18u].y) - _394)) * _620) + _394;
    float _626 = ((_600 * ((_414.z * cbMtdParam._m0[18u].z) - _395)) * _620) + _395;
    vec4 _638 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _640 = _638.x;
    float _641 = 1.0 - _640;
    float _668 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_640 - _641) * cbMtdParam._m0[24u].w) + _641) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3689 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _677 = ((((cbMtdParam._m0[10u].x - _624) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _669) + _624;
    float _678 = ((((cbMtdParam._m0[10u].y - _625) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _669) + _625;
    float _679 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _626)) * _669) + _626;
    float _684 = (((_434.z - _491) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _491;
    float _688 = ((_521.z - _684) * cbMtdParam._m0[19u].w) + _684;
    vec4 _702 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _709 = (_702.x * 2.0) + (-1.0);
    float _710 = (_702.y * 2.0) + (-1.0);
    float _711 = dot(vec2(_709, _710), vec2(_709, _710));
    float _3700 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _720 = (((_702.z - _688) * _598) * _620) + _688;
    float _723 = ((cbMtdParam._m0[23u].y - _720) * _669) + _720;
    vec4 _742 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _748 = (_742.x * 2.0) + (-1.0);
    float _749 = (_742.y * 2.0) + (-1.0);
    float _750 = dot(vec2(_748, _749), vec2(_748, _749));
    float _3711 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _770 = (((cbMtdParam._m0[21u].x * _533) + ((_709 - _533) * _598)) * _620) + _533;
    float _771 = (((cbMtdParam._m0[21u].x * _534) + ((_710 - _534) * _599)) * _620) + _534;
    float _772 = (((sqrt(1.0 - (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) - _501) * _600) * _620) + _501;
    float _783 = (((_748 - _770) + (_770 * cbMtdParam._m0[22u].z)) * _669) + _770;
    float _784 = (((_749 - _771) + (_771 * cbMtdParam._m0[22u].z)) * _669) + _771;
    float _785 = ((sqrt(1.0 - (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) - _772) * _669) + _772;
    float _787 = cbMtdParam._m0[22u].x + _521.w;
    float _790 = fma(_785, _239, fma(_784, _246, _783 * _232));
    float _793 = fma(_785, _240, fma(_784, _247, _783 * _233));
    float _796 = fma(_785, _241, fma(_784, _248, _783 * _234));
    float _800 = inversesqrt(dot(vec3(_790, _793, _796), vec3(_790, _793, _796)));
    float _801 = _800 * _790;
    float _802 = _800 * _793;
    float _803 = _800 * _796;
    float _3722 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _804 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _3744 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3755 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3766 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _822 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _873 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _863);
    float _874 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _863);
    float _875 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _863);
    float _879 = inversesqrt(dot(vec3(_873, _874, _875), vec3(_873, _874, _875)));
    float _880 = _873 * _879;
    float _881 = _874 * _879;
    float _882 = _875 * _879;
    float _888 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _889 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _907 = fma(_803, cbSceneParam._m0[5u].z, fma(_802, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _801));
    float _910 = fma(_803, cbSceneParam._m0[6u].z, fma(_802, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _801));
    float _913 = fma(_803, cbSceneParam._m0[7u].z, fma(_802, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _801));
    uint _927 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _933 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) * cbInstanceData._m0[_927].x;
    float _934 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * cbInstanceData._m0[_927].y;
    float _935 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * cbInstanceData._m0[_927].z;
    float _3777 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _3788 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    vec4 _947 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _888, cbSceneParam._m0[86u].y * _889));
    float _951 = ((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * TEXCOORD_5.w) * _947.x;
    float _952 = dot(vec3(_801, _802, _803), vec3(_880, _881, _882));
    float _955 = _952 * 2.0;
    float _959 = (_955 * _801) - _880;
    float _960 = (_955 * _802) - _881;
    float _961 = (_955 * _803) - _882;
    float _965 = abs(dot(vec3(_880, _881, _882), vec3(_801, _802, _803)));
    float _3810 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _967 = sqrt(_804);
    float _980 = exp2((_967 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_967 * 3.0));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1321;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1046 = fma(_1020, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012));
        float _1050 = fma(_1020, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012));
        float _1054 = fma(_1020, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012));
        float _1079 = _1012 + _801;
        float _1080 = _1016 + _802;
        float _1081 = _1020 + _803;
        float _1091 = fma(_1081, cbModelParam._m0[26u].z, fma(_1080, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1079)) - _1046;
        float _1092 = fma(_1081, cbModelParam._m0[27u].z, fma(_1080, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1079)) - _1050;
        float _1093 = fma(_1081, cbModelParam._m0[28u].z, fma(_1080, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1079)) - _1054;
        float _1097 = inversesqrt(dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093)));
        float _1110 = ((_1097 * _1091) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1046 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1097 * _1092) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1050 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1097 * _1093) / cbModelParam._m0[34u].z) + ((((((_1054 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1110, _1111, _1112), 0.0);
        float _1149 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1115.x + (-0.5));
        float _1151 = _1149 * (_1115.y + (-0.5));
        float _1152 = _1149 * (_1115.z + (-0.5));
        float _1159 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1122.x + (-0.5));
        float _1161 = _1159 * (_1122.y + (-0.5));
        float _1162 = _1159 * (_1122.z + (-0.5));
        float _1169 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1129.x + (-0.5));
        float _1171 = _1169 * (_1129.y + (-0.5));
        float _1172 = _1169 * (_1129.z + (-0.5));
        float _1179 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1136.x + (-0.5));
        float _1181 = _1179 * (_1136.y + (-0.5));
        float _1182 = _1179 * (_1136.z + (-0.5));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = _1150 * 0.5;
        float _1187 = _1160 * 0.5;
        float _1188 = _1170 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1203 = (dot(vec3(_801, _802, _803), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1213 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3858 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1215 + 1.0))) + _1220) * _1183;
        float _1230 = _1151 * 0.5;
        float _1231 = _1161 * 0.5;
        float _1232 = _1171 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_801, _802, _803), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3891 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1257 + 1.0))) + _1262) * _1184;
        float _1272 = _1152 * 0.5;
        float _1273 = _1162 * 0.5;
        float _1274 = _1172 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_801, _802, _803), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3924 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1299 + 1.0))) + _1304) * _1185;
        _1321 = _1152;
        _1323 = _1151;
        _1324 = _1150;
        _1325 = _1162;
        _1326 = _1161;
        _1327 = _1160;
        _1328 = _1172;
        _1329 = _1171;
        _1330 = _1170;
        _1331 = _1185;
        _1332 = _1184;
        _1333 = _1183;
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
    }
    else
    {
        _1321 = _1322;
        _1323 = _1322;
        _1324 = _1322;
        _1325 = _1322;
        _1326 = _1322;
        _1327 = _1322;
        _1328 = _1322;
        _1329 = _1322;
        _1330 = _1322;
        _1331 = _1322;
        _1332 = _1322;
        _1333 = _1322;
        _1334 = 0.0;
        _1335 = 0.0;
        _1336 = 0.0;
    }
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1361 = fma(_1020, cbModelParam._m0[30u].z, fma(_1016, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1012));
        float _1365 = fma(_1020, cbModelParam._m0[31u].z, fma(_1016, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1012));
        float _1369 = fma(_1020, cbModelParam._m0[32u].z, fma(_1016, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1012));
        float _1392 = _1012 + _801;
        float _1393 = _1016 + _802;
        float _1394 = _1020 + _803;
        float _1404 = fma(_1394, cbModelParam._m0[30u].z, fma(_1393, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1392)) - _1361;
        float _1405 = fma(_1394, cbModelParam._m0[31u].z, fma(_1393, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1392)) - _1365;
        float _1406 = fma(_1394, cbModelParam._m0[32u].z, fma(_1393, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1392)) - _1369;
        float _1410 = inversesqrt(dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406)));
        float _1423 = ((_1410 * _1404) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1361 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1410 * _1405) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1365 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1410 * _1406) / cbModelParam._m0[35u].z) + ((((((_1369 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        float _1460 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1427.x + (-0.5));
        float _1462 = _1460 * (_1427.y + (-0.5));
        float _1463 = _1460 * (_1427.z + (-0.5));
        float _1470 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1434.x + (-0.5));
        float _1472 = _1470 * (_1434.y + (-0.5));
        float _1473 = _1470 * (_1434.z + (-0.5));
        float _1480 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1441.x + (-0.5));
        float _1482 = _1480 * (_1441.y + (-0.5));
        float _1483 = _1480 * (_1441.z + (-0.5));
        float _1490 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1448.x + (-0.5));
        float _1492 = _1490 * (_1448.y + (-0.5));
        float _1493 = _1490 * (_1448.z + (-0.5));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = _1461 * 0.5;
        float _1498 = _1471 * 0.5;
        float _1499 = _1481 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_801, _802, _803), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _3987 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1524 + 1.0))) + _1529) * _1494;
        float _1539 = _1462 * 0.5;
        float _1540 = _1472 * 0.5;
        float _1541 = _1482 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_801, _802, _803), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4020 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1566 + 1.0))) + _1571) * _1495;
        float _1581 = _1463 * 0.5;
        float _1582 = _1473 * 0.5;
        float _1583 = _1483 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_801, _802, _803), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4053 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1608 + 1.0))) + _1613) * _1496;
        _1630 = _1463;
        _1631 = _1462;
        _1632 = _1461;
        _1633 = _1473;
        _1634 = _1472;
        _1635 = _1471;
        _1636 = _1483;
        _1637 = _1482;
        _1638 = _1481;
        _1639 = _1496;
        _1640 = _1495;
        _1641 = _1494;
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    }
    else
    {
        _1630 = _1322;
        _1631 = _1322;
        _1632 = _1322;
        _1633 = _1322;
        _1634 = _1322;
        _1635 = _1322;
        _1636 = _1322;
        _1637 = _1322;
        _1638 = _1322;
        _1639 = _1322;
        _1640 = _1322;
        _1641 = _1322;
        _1642 = 0.0;
        _1643 = 0.0;
        _1644 = 0.0;
    }
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1334)) + _1334;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1335)) + _1335;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1336)) + _1336;
    float _1677 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1654));
    float _1698 = _959 * 0.5;
    float _1699 = _960 * 0.5;
    float _1700 = _961 * 0.5;
    float _1701 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1704 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1707 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1741;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1714 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1321, _1325, _1328, _1331));
        float _1718 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1323, _1326, _1329, _1332));
        float _1722 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1324, _1327, _1330, _1333));
        float _1729 = dot(vec4(cbModelParam._m0[39u]), vec4(_1698, _1699, _1700, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1752;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1743 = dot(vec4(cbModelParam._m0[40u]), vec4(_1698, _1699, _1700, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1756 = (_1752 * cbModelParam._m0[1u].x) + (_1741 * (1.0 - cbModelParam._m0[1u].x));
    float _1766 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _804);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1766 : min(cbModelParam._m0[25u].z, _1766));
    float _1847;
    float _1849;
    float _1851;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1814 = fma(_1020, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012)) + cbModelParam._m0[13u].w;
        float _1818 = fma(_1020, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012)) + cbModelParam._m0[14u].w;
        float _1822 = fma(_1020, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012)) + cbModelParam._m0[15u].w;
        float _1825 = fma(_961, cbModelParam._m0[13u].z, fma(_960, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959));
        float _1828 = fma(_961, cbModelParam._m0[14u].z, fma(_960, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959));
        float _1831 = fma(_961, cbModelParam._m0[15u].z, fma(_960, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959));
        float _1859;
        if (_1825 > 0.0)
        {
            _1859 = abs((1.0 - _1814) / _1825);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1814 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1859 = frontier_phi_14_12_ladder;
        }
        float _2059;
        if (_1828 > 0.0)
        {
            _2059 = abs((1.0 - _1818) / _1828);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1818 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2059 = frontier_phi_23_19_ladder;
        }
        float _2302;
        if (_1831 > 0.0)
        {
            _2302 = abs((1.0 - _1822) / _1831);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1822 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2302 = frontier_phi_35_30_ladder;
        }
        float _2304 = isnan(_2059) ? _1859 : (isnan(_1859) ? _2059 : min(_1859, _2059));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1825) + _1814;
        float _2310 = (_2305 * _1828) + _1818;
        float _2311 = (_2305 * _1831) + _1822;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2314 = (-1.0) - _2312;
        float _2316 = _2312 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2311 > _2316) || ((_2311 < _2314) || ((_2310 > _2316) || ((_2310 < _2314) || ((_2309 < _2314) || (_2309 > _2316))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2435 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1767);
            frontier_phi_13_35_ladder = _2435.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2435.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2435.x * cbModelParam._m0[1u].y;
        }
        _1847 = frontier_phi_13_35_ladder_2;
        _1849 = frontier_phi_13_35_ladder_1;
        _1851 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_959, _960, _961), _1767);
        _1847 = _1835.x * cbModelParam._m0[1u].y;
        _1849 = _1835.y * cbModelParam._m0[1u].y;
        _1851 = _1835.z * cbModelParam._m0[1u].y;
    }
    float _1855 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _804);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1855 : min(cbModelParam._m0[25u].w, _1855));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1909 = fma(_1020, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012)) + cbModelParam._m0[21u].w;
        float _1913 = fma(_1020, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012)) + cbModelParam._m0[22u].w;
        float _1917 = fma(_1020, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012)) + cbModelParam._m0[23u].w;
        float _1920 = fma(_961, cbModelParam._m0[21u].z, fma(_960, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959));
        float _1923 = fma(_961, cbModelParam._m0[22u].z, fma(_960, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959));
        float _1926 = fma(_961, cbModelParam._m0[23u].z, fma(_960, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959));
        float _2064;
        if (_1920 > 0.0)
        {
            _2064 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2064 = frontier_phi_25_21_ladder;
        }
        float _2329;
        if (_1923 > 0.0)
        {
            _2329 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2329 = frontier_phi_37_32_ladder;
        }
        float _2534;
        if (_1926 > 0.0)
        {
            _2534 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2534 = frontier_phi_46_43_ladder;
        }
        float _2536 = isnan(_2329) ? _2064 : (isnan(_2064) ? _2329 : min(_2064, _2329));
        float _2537 = isnan(_2534) ? _2536 : (isnan(_2536) ? _2534 : min(_2536, _2534));
        float _2541 = (_2537 * _1920) + _1909;
        float _2542 = (_2537 * _1923) + _1913;
        float _2543 = (_2537 * _1926) + _1917;
        float _2544 = _2537 * 9.9999997473787516355514526367188e-05;
        float _2545 = (-1.0) - _2544;
        float _2547 = _2544 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2543 > _2547) || ((_2543 < _2545) || ((_2542 > _2547) || ((_2542 < _2545) || ((_2541 < _2545) || (_2541 > _2547))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2543, cbModelParam._m0[17u].z, fma(_2542, cbModelParam._m0[17u].y, _2541 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2543, cbModelParam._m0[18u].z, fma(_2542, cbModelParam._m0[18u].y, _2541 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2543, cbModelParam._m0[19u].z, fma(_2542, cbModelParam._m0[19u].y, _2541 * cbModelParam._m0[19u].x))), _1856);
            frontier_phi_22_46_ladder = _2742.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2742.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2742.x * cbModelParam._m0[1u].z;
        }
        _1945 = frontier_phi_22_46_ladder_2;
        _1947 = frontier_phi_22_46_ladder_1;
        _1949 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_959, _960, _961), _1856);
        _1945 = _1929.x * cbModelParam._m0[1u].z;
        _1947 = _1929.y * cbModelParam._m0[1u].z;
        _1949 = _1929.z * cbModelParam._m0[1u].z;
    }
    float _1961 = ((((1.0 - _980) * ((_967 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_980 * _967)) * _951;
    float _1962 = _1961 * ((cbModelParam._m0[1u].w * (_1945 - _1847)) + _1847);
    float _1963 = _1961 * ((cbModelParam._m0[1u].w * (_1947 - _1849)) + _1849);
    float _1964 = _1961 * ((cbModelParam._m0[1u].w * (_1949 - _1851)) + _1851);
    float _1967 = fma(_1964, cbSceneParam._m0[89u].z, fma(_1963, cbSceneParam._m0[89u].y, _1962 * cbSceneParam._m0[89u].x));
    float _1970 = fma(_1964, cbSceneParam._m0[90u].z, fma(_1963, cbSceneParam._m0[90u].y, _1962 * cbSceneParam._m0[90u].x));
    float _1973 = fma(_1964, cbSceneParam._m0[91u].z, fma(_1963, cbSceneParam._m0[91u].y, _1962 * cbSceneParam._m0[91u].x));
    uvec4 _1983 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1985 = _1983.x * 14u;
    uint _1986 = _1985 + 13u;
    float _1993 = _951 + (-1.0);
    float _1998 = (cbLight._m0[_1986].x * _1993) + 1.0;
    float _1999 = (cbLight._m0[_1986].y * _1993) + 1.0;
    float _2000 = (cbLight._m0[_1986].z * _1993) + 1.0;
    float _2001 = (cbLight._m0[_1986].w * _1993) + 1.0;
    uint _2002 = _1985 + 5u;
    float _2008 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
    uint _2012 = _1985 + 4u;
    float _2018 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
    uint _2022 = _1985 | 1u;
    float _2033 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_801, _802, _803));
    float _2036 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_801, _802, _803));
    float _4189 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _4200 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2041 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * 0.3183098733425140380859375;
    float _2043 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * 0.3183098733425140380859375;
    float _2050 = ((cbLight._m0[_2002].x * _2008) * _2043) + ((cbLight._m0[_2012].x * _2018) * _2041);
    float _2051 = ((_2008 * cbLight._m0[_2002].y) * _2043) + ((_2018 * cbLight._m0[_2012].y) * _2041);
    float _2052 = ((_2008 * cbLight._m0[_2002].z) * _2043) + ((_2018 * cbLight._m0[_2012].z) * _2041);
    uvec4 _2056 = floatBitsToUint(cbLight._m0[_1985 + 12u]);
    bool _2058 = _2056.x == 0u;
    float _2069;
    float _2071;
    float _2073;
    if (_2058)
    {
        _2069 = _2050;
        _2071 = _2051;
        _2073 = _2052;
    }
    else
    {
        uint _2077 = _1985 + 6u;
        float _2093 = (dot(vec3(cbLight._m0[_1985 + 2u].xyz), vec3(_801, _802, _803)) * 0.5) + 0.5;
        float _2094 = _2093 * _2093;
        float _4211 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        float _2095 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2096 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
        _2069 = (((cbLight._m0[_2077].x * 0.3183098733425140380859375) * _2095) * _2096) + _2050;
        _2071 = (((cbLight._m0[_2077].y * 0.3183098733425140380859375) * _2095) * _2096) + _2051;
        _2073 = (((cbLight._m0[_2077].z * 0.3183098733425140380859375) * _2095) * _2096) + _2052;
    }
    bool _2076 = _2056.y == 0u;
    float _2114;
    float _2116;
    float _2118;
    if (_2076)
    {
        _2114 = _2069;
        _2116 = _2071;
        _2118 = _2073;
    }
    else
    {
        uint _2273 = _1985 + 7u;
        float _2289 = (dot(vec3(cbLight._m0[_1985 + 3u].xyz), vec3(_801, _802, _803)) * 0.5) + 0.5;
        float _2290 = _2289 * _2289;
        float _4227 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2291 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2292 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2114 = (((cbLight._m0[_2273].x * 0.3183098733425140380859375) * _2291) * _2292) + _2069;
        _2116 = (((cbLight._m0[_2273].y * 0.3183098733425140380859375) * _2291) * _2292) + _2071;
        _2118 = (((cbLight._m0[_2273].z * 0.3183098733425140380859375) * _2291) * _2292) + _2073;
    }
    uint _2121 = _1985 + 8u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1985].w)) * _804) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_1985].x + _880;
    float _2137 = cbLight._m0[_1985].y + _881;
    float _2138 = cbLight._m0[_1985].z + _882;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_1985].xyz));
    float _4243 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
    float _4254 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _2150 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _2151 = dot(vec3(_801, _802, _803), vec3(_2143, _2144, _2145));
    float _4265 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1985].xyz), vec3(_2143, _2144, _2145));
    float _4276 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2135 * _2135;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2174 = (exp2(log2(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2175 = 1.0 - _2135;
    float _2186 = (0.5 / (((_2150 * ((_2149 * _2175) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2175) + _2135) * _2149))) * _2149;
    float _4287 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2188 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    uint _2199 = _1985 + 9u;
    float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _804) * 0.949999988079071044921875);
    float _2211 = _2210 * _2210;
    float _2212 = cbLight._m0[_2022].x + _880;
    float _2213 = cbLight._m0[_2022].y + _881;
    float _2214 = cbLight._m0[_2022].z + _882;
    float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
    float _2219 = _2218 * _2212;
    float _2220 = _2218 * _2213;
    float _2221 = _2218 * _2214;
    float _2222 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2022].xyz));
    float _4298 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2225 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _2226 = dot(vec3(_801, _802, _803), vec3(_2219, _2220, _2221));
    float _4309 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _2229 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2230 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2219, _2220, _2221));
    float _4320 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = _2211 * _2211;
    float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
    float _2247 = (exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2248 = 1.0 - _2211;
    float _2258 = (0.5 / (((_2150 * ((_2225 * _2248) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2248) + _2211) * _2225))) * _2225;
    float _4331 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
    float _2270 = (((_2247 * cbLight._m0[_2199].x) * _2260) * _2008) + (((_2174 * cbLight._m0[_2121].x) * _2188) * _2018);
    float _2271 = (((_2247 * cbLight._m0[_2199].y) * _2260) * _2008) + (((_2174 * cbLight._m0[_2121].y) * _2188) * _2018);
    float _2272 = (((_2247 * cbLight._m0[_2199].z) * _2260) * _2008) + (((_2174 * cbLight._m0[_2121].z) * _2188) * _2018);
    float _2334;
    float _2336;
    float _2338;
    if (_2058)
    {
        _2334 = _2270;
        _2336 = _2271;
        _2338 = _2272;
    }
    else
    {
        uint _2340 = _1985 + 2u;
        uint _2344 = _1985 + 10u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _804) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _880;
        float _2361 = cbLight._m0[_2340].y + _881;
        float _2362 = cbLight._m0[_2340].z + _882;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2340].xyz));
        float _4342 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _2374 = dot(vec3(_801, _802, _803), vec3(_2367, _2368, _2369));
        float _4353 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4364 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2395 = (exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2396 = 1.0 - _2359;
        float _2406 = (0.5 / (((_2150 * ((_2373 * _2396) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2396) + _2359) * _2373))) * _2373;
        float _4375 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2408 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2409 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
        _2334 = (((_2395 * cbLight._m0[_2344].x) * _2408) * _2409) + _2270;
        _2336 = (((_2395 * cbLight._m0[_2344].y) * _2408) * _2409) + _2271;
        _2338 = (((_2395 * cbLight._m0[_2344].z) * _2408) * _2409) + _2272;
    }
    float _2444;
    float _2446;
    float _2448;
    if (_2076)
    {
        _2444 = _2334;
        _2446 = _2336;
        _2448 = _2338;
    }
    else
    {
        uint _2455 = _1985 + 3u;
        uint _2459 = _1985 + 11u;
        float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2455].w)) * _804) * 0.949999988079071044921875);
        float _2474 = _2473 * _2473;
        float _2475 = cbLight._m0[_2455].x + _880;
        float _2476 = cbLight._m0[_2455].y + _881;
        float _2477 = cbLight._m0[_2455].z + _882;
        float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
        float _2482 = _2481 * _2475;
        float _2483 = _2481 * _2476;
        float _2484 = _2481 * _2477;
        float _2485 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_2455].xyz));
        float _4391 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _2489 = dot(vec3(_801, _802, _803), vec3(_2482, _2483, _2484));
        float _4402 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _2493 = dot(vec3(cbLight._m0[_2455].xyz), vec3(_2482, _2483, _2484));
        float _4413 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2497 = _2474 * _2474;
        float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
        float _2510 = (exp2(log2(1.0 - (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2511 = 1.0 - _2474;
        float _2521 = (0.5 / (((_2150 * ((_2488 * _2511) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2511) + _2474) * _2488))) * _2488;
        float _4424 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2523 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
        float _2524 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
        _2444 = (((_2510 * cbLight._m0[_2459].x) * _2523) * _2524) + _2334;
        _2446 = (((_2510 * cbLight._m0[_2459].y) * _2523) * _2524) + _2336;
        _2448 = (((_2510 * cbLight._m0[_2459].z) * _2523) * _2524) + _2338;
    }
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    float _2669;
    if (_1983.y == 0u)
    {
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2599;
        float _2601 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2599;
        float _2602 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2599;
        uvec4 _2614 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2615 = _2614.x;
        uint _2626 = uint((float(_2614.y) * floor(float(uint(cbSceneParam._m0[85u].y * _889) / _2615))) + floor(float(uint(cbSceneParam._m0[85u].x * _888) / _2615)));
        float _2636 = (log2(_2602 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2637 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        uint _2640 = uint(isnan(14.0) ? _2637 : (isnan(_2637) ? 14.0 : min(_2637, 14.0)));
        uvec4 _2645 = texelFetch(g_lightClusterGridBuffer, int(((_2640 << 2u) + (_2626 << 6u)) >> 2u));
        uint _2646 = _2645.x;
        uint _2647 = _2614.z;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        float _2755;
        float _2757;
        if (((((1u << ((_2647 >> 4u) & 15u)) + 4294967295u) & _2646) == 0u) || ((_2647 & 240u) == 0u))
        {
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
            _2755 = 0.0;
            _2757 = 0.0;
        }
        else
        {
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2756;
            float _2758;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            uint _2897 = 0u;
            uint _2906;
            bool _2907;
            for (;;)
            {
                _2906 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_2897 << 2u)) >> 2u)).x;
                _2907 = _2906 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2907)
                {
                    frontier_phi_61_pred = _2891;
                    frontier_phi_61_pred_1 = _2896;
                    frontier_phi_61_pred_2 = _2895;
                    frontier_phi_61_pred_3 = _2894;
                    frontier_phi_61_pred_4 = _2893;
                    frontier_phi_61_pred_5 = _2892;
                }
                else
                {
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    uint _3021;
                    _3015 = _2891;
                    _3016 = _2892;
                    _3017 = _2893;
                    _3018 = _2894;
                    _3019 = _2895;
                    _3020 = _2896;
                    _3021 = _2906;
                    float _2947;
                    float _2948;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    for (;;)
                    {
                        uint _3025 = uint(findLSB(_3021)) + (_2897 << 5u);
                        uint _3022 = (_3021 + 4294967295u) & _3021;
                        uint _3027 = _3025 * 48u;
                        vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3027)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3027 + 3u)).x));
                        uint _3047 = (_3025 * 48u) + 4u;
                        vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3047)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3047 + 3u)).x));
                        uint _3066 = (_3025 * 48u) + 8u;
                        vec3 _3077 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x));
                        float _3081 = _3041.x - _2600;
                        float _3082 = _3041.y - _2601;
                        float _3083 = _3041.z - _2602;
                        float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                        float _3087 = inversesqrt(_3084);
                        float _3088 = _3087 * _3081;
                        float _3089 = _3087 * _3082;
                        float _3090 = _3087 * _3083;
                        float _3091 = dot(vec3(_907, _910, _913), vec3(_3088, _3089, _3090));
                        float _3096 = 1.0 - (_3084 * _3041.w);
                        float _4450 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                        float _3097 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                        float _3098 = sqrt(_3084) * _3060.w;
                        float _3101 = 1.39999997615814208984375 / (_3098 + 1.39999997615814208984375);
                        float _3102 = _3101 * _3101;
                        float _3105 = ((1.0 - _3102) * _3091) + _3102;
                        float _3108 = _3098 * _3098;
                        float _3112 = ((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3097) / ((_3108 * 0.699999988079071044921875) + 1.0);
                        float _3116 = (-0.0) - _2600;
                        float _3117 = (-0.0) - _2601;
                        float _3118 = (-0.0) - _2602;
                        float _3122 = inversesqrt(dot(vec3(_3116, _3117, _3118), vec3(_3116, _3117, _3118)));
                        float _3123 = _3122 * _3116;
                        float _3124 = _3122 * _3117;
                        float _3125 = _3122 * _3118;
                        float _3133 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                        float _3134 = 1.0 - _967;
                        float _3141 = sqrt(1.0 - ((1.0 - (_3134 * _3134)) * (1.0 - (_3133 * _3133))));
                        float _3142 = _3141 * _3141;
                        float _3143 = _3142 * _3142;
                        float _3144 = _3123 + _3088;
                        float _3145 = _3124 + _3089;
                        float _3146 = _3125 + _3090;
                        float _3150 = inversesqrt(dot(vec3(_3144, _3145, _3146), vec3(_3144, _3145, _3146)));
                        float _3154 = dot(vec3(_907, _910, _913), vec3(_3123, _3124, _3125));
                        float _4466 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3157 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                        float _3158 = dot(vec3(_907, _910, _913), vec3(_3150 * _3144, _3150 * _3145, _3150 * _3146));
                        float _4477 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                        float _3161 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3165 = ((_3161 * _3161) * (_3143 + (-1.0))) + 1.0;
                        float _3166 = _3101 * _3142;
                        float _3167 = _3166 * _3166;
                        float _3170 = ((1.0 - _3167) * _3091) + _3167;
                        float _4488 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                        float _3171 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3172 = 1.0 - _3142;
                        float _3182 = (0.5 / (((_3171 * ((_3157 * _3172) + _3142)) + 9.9999999392252902907785028219223e-09) + (((_3171 * _3172) + _3142) * _3157))) * _3171;
                        float _4499 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3193 = (((_3143 * 3.1415927410125732421875) * (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) / ((_3165 * _3165) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125))) * _3097;
                        _2950 = (_3112 * _3060.x) + _3018;
                        _2951 = (_3112 * _3060.y) + _3019;
                        _2952 = (_3112 * _3060.z) + _3020;
                        _2947 = (_3193 * _3077.x) + _3015;
                        _2948 = (_3193 * _3077.y) + _3016;
                        _2949 = (_3193 * _3077.z) + _3017;
                        if (_3022 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3015 = _2947;
                            _3016 = _2948;
                            _3017 = _2949;
                            _3018 = _2950;
                            _3019 = _2951;
                            _3020 = _2952;
                            _3021 = _3022;
                        }
                    }
                    frontier_phi_61_pred = _2947;
                    frontier_phi_61_pred_1 = _2952;
                    frontier_phi_61_pred_2 = _2951;
                    frontier_phi_61_pred_3 = _2950;
                    frontier_phi_61_pred_4 = _2949;
                    frontier_phi_61_pred_5 = _2948;
                }
                _2748 = frontier_phi_61_pred;
                _2758 = frontier_phi_61_pred_1;
                _2756 = frontier_phi_61_pred_2;
                _2754 = frontier_phi_61_pred_3;
                _2752 = frontier_phi_61_pred_4;
                _2750 = frontier_phi_61_pred_5;
                uint _2898 = _2897 + 1u;
                if (_2898 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2891 = _2748;
                    _2892 = _2750;
                    _2893 = _2752;
                    _2894 = _2754;
                    _2895 = _2756;
                    _2896 = _2758;
                    _2897 = _2898;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
            _2755 = _2756;
            _2757 = _2758;
        }
        uvec4 _2761 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2762 = _2761.z;
        uint _2764 = (_2762 >> 8u) & 15u;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        if (((4294967295u << _2764) & _2646) == 0u)
        {
            _2859 = _2747;
            _2861 = _2749;
            _2863 = _2751;
            _2865 = _2753;
            _2867 = _2755;
            _2869 = _2757;
        }
        else
        {
            float _2884 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
            float _2885 = _2884 * _2600;
            float _2886 = _2884 * _2601;
            float _2887 = _2884 * _2602;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2764 < ((_2762 >> 12u) & 15u))
            {
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _2998 = _2747;
                float _2999 = _2749;
                float _3000 = _2751;
                float _3001 = _2753;
                float _3002 = _2755;
                float _3003 = _2757;
                uint _3004 = _2764;
                uint _3013;
                bool _3014;
                for (;;)
                {
                    _3013 = texelFetch(g_lightClassification, int((((_2640 << 5u) + (_2626 << 9u)) + (_3004 << 2u)) >> 2u)).x;
                    _3014 = _3013 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3014)
                    {
                        frontier_phi_67_pred = _3001;
                        frontier_phi_67_pred_1 = _3002;
                        frontier_phi_67_pred_2 = _3003;
                        frontier_phi_67_pred_3 = _3000;
                        frontier_phi_67_pred_4 = _2999;
                        frontier_phi_67_pred_5 = _2998;
                    }
                    else
                    {
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3211 = _2998;
                        float _3212 = _2999;
                        float _3213 = _3000;
                        float _3214 = _3001;
                        float _3215 = _3002;
                        float _3216 = _3003;
                        uint _3217 = _3013;
                        uint _3218;
                        vec4 _3243;
                        float _3244;
                        vec4 _3259;
                        vec3 _3271;
                        vec4 _3286;
                        vec4 _3301;
                        float _3347;
                        bool _3348;
                        for (;;)
                        {
                            uint _3228 = ((_3004 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3217));
                            _3218 = (_3217 + 4294967295u) & _3217;
                            uint _3230 = _3228 * 40u;
                            _3243 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3230)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3230 + 3u)).x));
                            _3244 = _3243.w;
                            uint _3246 = (_3228 * 40u) + 4u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3261 = (_3228 * 40u) + 8u;
                            _3271 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x));
                            uint _3273 = (_3228 * 40u) + 16u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3288 = (_3228 * 40u) + 20u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3303 = (_3228 * 40u) + 24u;
                            vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3322 = (_3228 * 40u) + 28u;
                            vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3347 = fma(_2602, _3335.z, fma(_2601, _3335.y, _3335.x * _2600)) + _3335.w;
                            _3348 = !((fma(_2602, _3316.z, fma(_2601, _3316.y, _3316.x * _2600)) + _3316.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3348)
                            {
                                float _3375 = _3243.x - _2600;
                                float _3376 = _3243.y - _2601;
                                float _3377 = _3243.z - _2602;
                                float _3378 = dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377));
                                float _3381 = inversesqrt(_3378);
                                float _3382 = _3381 * _3375;
                                float _3383 = _3381 * _3376;
                                float _3384 = _3381 * _3377;
                                float _3388 = 1.0 - (_3378 / (_3244 * _3244));
                                float _4510 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0));
                                float _3389 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                                float _3393 = sqrt(_3378) * _3259.w;
                                float _3395 = 1.39999997615814208984375 / (_3393 + 1.39999997615814208984375);
                                float _3396 = _3395 * _3395;
                                float _3399 = ((1.0 - _3396) * dot(vec3(_3382, _3383, _3384), vec3(_907, _910, _913))) + _3396;
                                float _3402 = _3393 * _3393;
                                float _3406 = (fma(_2602, _3286.z, fma(_2601, _3286.y, _3286.x * _2600)) + _3286.w) / _3347;
                                float _3407 = (fma(_2602, _3301.z, fma(_2601, _3301.y, _3301.x * _2600)) + _3301.w) / _3347;
                                float _3411 = 1.0 - dot(vec2(_3406, _3407), vec2(_3406, _3407));
                                float _4526 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                                float _3412 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                                float _3413 = _3412 * (((isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0))) * _3389) / ((_3402 * 0.699999988079071044921875) + 1.0));
                                float _3425 = exp2(log2(1.0 / ((_3402 * 3.5) + 5.0)) * 0.25);
                                float _3426 = 1.0 - _967;
                                float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                                float _3434 = _3433 * _3433;
                                float _3435 = _3434 * _3434;
                                float _3436 = _3382 - _2885;
                                float _3437 = _3383 - _2886;
                                float _3438 = _3384 - _2887;
                                float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                                float _3446 = dot(vec3(_907, _910, _913), vec3((-0.0) - _2885, (-0.0) - _2886, (-0.0) - _2887));
                                float _4537 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3449 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3450 = dot(vec3(_907, _910, _913), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                                float _4548 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                                float _3458 = _3395 * _3434;
                                float _3459 = _3458 * _3458;
                                float _3465 = ((1.0 - _3459) * dot(vec3(_907, _910, _913), vec3(_3382, _3383, _3384))) + _3459;
                                float _4559 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3466 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3467 = 1.0 - _3434;
                                float _3477 = (0.5 / (((_3466 * ((_3449 * _3467) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3434) * _3449))) * _3466;
                                float _4570 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3487 = (_3412 * _3389) * (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0)))) / ((_3457 * _3457) * ((_3402 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3487 * _3271.x;
                                frontier_phi_73_pred_1 = _3487 * _3271.y;
                                frontier_phi_73_pred_2 = _3413 * _3259.z;
                                frontier_phi_73_pred_3 = _3413 * _3259.y;
                                frontier_phi_73_pred_4 = _3413 * _3259.x;
                                frontier_phi_73_pred_5 = _3487 * _3271.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3491 = frontier_phi_73_pred;
                            _3492 = frontier_phi_73_pred_1;
                            _3496 = frontier_phi_73_pred_2;
                            _3495 = frontier_phi_73_pred_3;
                            _3494 = frontier_phi_73_pred_4;
                            _3493 = frontier_phi_73_pred_5;
                            _3201 = _3494 + _3214;
                            _3202 = _3495 + _3215;
                            _3203 = _3496 + _3216;
                            _3198 = _3491 + _3211;
                            _3199 = _3492 + _3212;
                            _3200 = _3493 + _3213;
                            if (_3218 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3218;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3201;
                        frontier_phi_67_pred_1 = _3202;
                        frontier_phi_67_pred_2 = _3203;
                        frontier_phi_67_pred_3 = _3200;
                        frontier_phi_67_pred_4 = _3199;
                        frontier_phi_67_pred_5 = _3198;
                    }
                    _2866 = frontier_phi_67_pred;
                    _2868 = frontier_phi_67_pred_1;
                    _2870 = frontier_phi_67_pred_2;
                    _2864 = frontier_phi_67_pred_3;
                    _2862 = frontier_phi_67_pred_4;
                    _2860 = frontier_phi_67_pred_5;
                    uint _3005 = _3004 + 1u;
                    if (_3005 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2998 = _2860;
                        _2999 = _2862;
                        _3000 = _2864;
                        _3001 = _2866;
                        _3002 = _2868;
                        _3003 = _2870;
                        _3004 = _3005;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2868;
                frontier_phi_55_56_ladder_1 = _2870;
                frontier_phi_55_56_ladder_2 = _2866;
                frontier_phi_55_56_ladder_3 = _2864;
                frontier_phi_55_56_ladder_4 = _2862;
                frontier_phi_55_56_ladder_5 = _2860;
            }
            else
            {
                frontier_phi_55_56_ladder = _2755;
                frontier_phi_55_56_ladder_1 = _2757;
                frontier_phi_55_56_ladder_2 = _2753;
                frontier_phi_55_56_ladder_3 = _2751;
                frontier_phi_55_56_ladder_4 = _2749;
                frontier_phi_55_56_ladder_5 = _2747;
            }
            _2859 = frontier_phi_55_56_ladder_5;
            _2861 = frontier_phi_55_56_ladder_4;
            _2863 = frontier_phi_55_56_ladder_3;
            _2865 = frontier_phi_55_56_ladder_2;
            _2867 = frontier_phi_55_56_ladder;
            _2869 = frontier_phi_55_56_ladder_1;
        }
        float _2874 = isnan(1.0) ? _951 : (isnan(_951) ? 1.0 : min(_951, 1.0));
        _2659 = (_2874 * _2865) + _2114;
        _2661 = (_2874 * _2867) + _2116;
        _2663 = (_2874 * _2869) + _2118;
        _2665 = ((_2859 * 0.039999999105930328369140625) * _2874) + _2444;
        _2667 = ((_2861 * 0.039999999105930328369140625) * _2874) + _2446;
        _2669 = ((_2863 * 0.039999999105930328369140625) * _2874) + _2448;
    }
    else
    {
        _2659 = _2114;
        _2661 = _2116;
        _2663 = _2118;
        _2665 = _2444;
        _2667 = _2446;
        _2669 = _2448;
    }
    float _4586 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4597 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4608 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    uint _2689 = _251 + 6u;
    float _2697 = _888 / cbSceneParam._m0[86u].x;
    float _2698 = _889 / cbSceneParam._m0[86u].y;
    vec4 _2712 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2697, _2698, (log2((isnan(cbSceneParam._m0[77u].w) ? _822 : (isnan(_822) ? cbSceneParam._m0[77u].w : min(_822, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2714 = _2712.x;
    float _2715 = _2712.y;
    float _2716 = _2712.z;
    float _2717 = _2712.w;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    if (_822 > cbSceneParam._m0[78u].w)
    {
        float _2772 = isnan(_822) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _822 : min(cbSceneParam._m0[80u].w, _822));
        float _2773 = _2772 / _822;
        float _2784 = _2773 * _873;
        float _2785 = _874 * _2773;
        float _2786 = (-0.0) - _2785;
        float _2787 = _2773 * _875;
        float _2789 = (cbSceneParam._m0[77u].w * _2786) / _2772;
        float _2790 = _2789 + cbSceneParam._m0[79u].w;
        float _2791 = cbSceneParam._m0[79u].w - _2785;
        float _2797 = sqrt(((_2784 * _2784) + (_2785 * _2785)) + (_2787 * _2787));
        float _2800 = (1.0 - (cbSceneParam._m0[77u].w / _2772)) * _2797;
        float _2805 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2807 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2960;
        if (abs((_2786 - _2789) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2960 = ((((_2790 > 0.0) ? exp2(_2805 * _2790) : (2.0 - exp2(_2807 * _2790))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2800;
        }
        else
        {
            float _2920 = 1.0 / cbSceneParam._m0[80u].x;
            float _2921 = isnan(_2791) ? _2790 : (isnan(_2790) ? _2791 : max(_2790, _2791));
            float _2922 = isnan(_2791) ? _2790 : (isnan(_2790) ? _2791 : min(_2790, _2791));
            float _2931 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : min(_2921, 0.0));
            float _2932 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : min(_2922, 0.0));
            _2960 = ((abs(_2797 / _2786) * cbSceneParam._m0[80u].y) * ((((_2931 - _2932) * 2.0) - ((exp2(_2805 * (isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0)))) - exp2(_2805 * (isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))))) * _2920)) - ((exp2(_2807 * _2931) - exp2(_2807 * _2932)) * _2920))) + (_2800 * cbSceneParam._m0[80u].z);
        }
        vec4 _2962 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2697, _2698, 1.0), 0.0);
        float _2971 = exp2((_2960 * (-1.44269502162933349609375)) * (1.0 - _2962.w));
        float _2972 = log2(_2971);
        float _2988 = log2(_2717);
        _2809 = (exp2(_2988 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].x)) * _2962.x) / cbSceneParam._m0[78u].x)) + _2714;
        _2811 = (exp2(_2988 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].y)) * _2962.y) / cbSceneParam._m0[78u].y)) + _2715;
        _2813 = (exp2(_2988 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2972 * cbSceneParam._m0[78u].z)) * _2962.z) / cbSceneParam._m0[78u].z)) + _2716;
        _2815 = _2971 * _2717;
    }
    else
    {
        _2809 = _2714;
        _2811 = _2715;
        _2813 = _2716;
        _2815 = _2717;
    }
    float _2827 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2828 = _2827 == 3.0;
    float _2829 = log2(_2815);
    float _2836 = exp2(_2829 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2659 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _951))) + ((_2665 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1756)) * cbPerFrame._m0[3u].x));
    float _2837 = exp2(_2829 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2661 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _951))) + ((_2667 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1756)) * cbPerFrame._m0[3u].x));
    float _2838 = exp2(_2829 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2663 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _951))) + ((_2669 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1756)) * cbPerFrame._m0[3u].x));
    float _2847 = (_2827 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2847 * (_2828 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2809)));
    SV_Target.y = _2847 * (_2828 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2811)));
    SV_Target.z = _2847 * (_2828 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2813)));
    SV_Target.w = cbInstanceData._m0[_2689].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2689].w;
}


