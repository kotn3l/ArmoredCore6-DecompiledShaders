#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1192;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _354 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _354) * cbMtdParam._m0[24u].x) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3496 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _379 = (_372 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _380 = (_372 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _381 = (_372 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _256) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _257) + cbTextureTilingScale._m0[20u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _464 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _466 = _464.x;
    float _467 = _464.y;
    float _468 = _464.z;
    float _477 = ((_447.z - _468) * _372) + _468;
    float _480 = ((((_447.x - _466) * _372) + _466) * 2.0) + (-1.0);
    float _481 = ((((_447.y - _467) * _372) + _467) * 2.0) + (-1.0);
    float _482 = dot(vec2(_480, _481), vec2(_480, _481));
    float _3507 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _487 = sqrt(1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))));
    vec4 _507 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _519 = (_480 + ((((_420.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_507.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _520 = (_481 + ((((_420.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_507.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _523 = fma(_487, _224, fma(_520, _231, _519 * _217));
    float _526 = fma(_487, _225, fma(_520, _232, _519 * _218));
    float _529 = fma(_487, _226, fma(_520, _233, _519 * _219));
    float _533 = inversesqrt(dot(vec3(_523, _526, _529), vec3(_523, _526, _529)));
    vec4 _562 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _564 = _562.x;
    float _565 = 1.0 - _564;
    float _569 = ((_564 - _565) * cbMtdParam._m0[24u].z) + _565;
    float _571 = (cbMtdParam._m0[19u].x + dot(vec4(_533 * _523, _533 * _526, _533 * _529, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_569 * cbMtdParam._m0[21u].z);
    float _3518 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _572 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _587 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_569 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3529 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _592 = ((_572 * ((_400.x * cbMtdParam._m0[18u].x) - _379)) * _588) + _379;
    float _593 = ((_572 * ((_400.y * cbMtdParam._m0[18u].y) - _380)) * _588) + _380;
    float _594 = ((_572 * ((_400.z * cbMtdParam._m0[18u].z) - _381)) * _588) + _381;
    float _599 = (((_420.z - _477) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _477;
    float _603 = ((_507.z - _599) * cbMtdParam._m0[19u].w) + _599;
    vec4 _616 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _623 = (_616.x * 2.0) + (-1.0);
    float _624 = (_616.y * 2.0) + (-1.0);
    float _625 = dot(vec2(_623, _624), vec2(_623, _624));
    float _3540 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _634 = (((_616.z - _603) * _572) * _588) + _603;
    float _649 = (((cbMtdParam._m0[21u].x * _519) + ((_623 - _519) * _572)) * _588) + _519;
    float _650 = (((cbMtdParam._m0[21u].x * _520) + ((_624 - _520) * _572)) * _588) + _520;
    float _651 = (((sqrt(1.0 - (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) - _487) * _572) * _588) + _487;
    float _656 = cbMtdParam._m0[22u].x + _507.w;
    float _659 = fma(_651, _224, fma(_650, _231, _649 * _217));
    float _662 = fma(_651, _225, fma(_650, _232, _649 * _218));
    float _665 = fma(_651, _226, fma(_650, _233, _649 * _219));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    float _670 = _669 * _659;
    float _671 = _669 * _662;
    float _672 = _669 * _665;
    float _3551 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _673 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    float _3562 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3573 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _3584 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3595 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _691 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _743 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _733);
    float _744 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _733);
    float _745 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _733);
    float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
    float _750 = _743 * _749;
    float _751 = _744 * _749;
    float _752 = _745 * _749;
    float _758 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _759 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _777 = fma(_672, cbSceneParam._m0[5u].z, fma(_671, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _670));
    float _780 = fma(_672, cbSceneParam._m0[6u].z, fma(_671, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _670));
    float _783 = fma(_672, cbSceneParam._m0[7u].z, fma(_671, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _670));
    uint _797 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _803 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_797].x;
    float _804 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_797].y;
    float _805 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_797].z;
    float _3606 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _806 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    vec4 _817 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _758, cbSceneParam._m0[86u].y * _759));
    float _821 = ((isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * TEXCOORD_5.w) * _817.x;
    float _822 = dot(vec3(_670, _671, _672), vec3(_750, _751, _752));
    float _825 = _822 * 2.0;
    float _829 = (_825 * _670) - _750;
    float _830 = (_825 * _671) - _751;
    float _831 = (_825 * _672) - _752;
    float _835 = abs(dot(vec3(_750, _751, _752), vec3(_670, _671, _672)));
    float _3639 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _837 = sqrt(_673);
    float _850 = exp2((_837 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_837 * 3.0));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1191;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _916 = fma(_890, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _882));
        float _920 = fma(_890, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _882));
        float _924 = fma(_890, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _882));
        float _949 = _882 + _670;
        float _950 = _886 + _671;
        float _951 = _890 + _672;
        float _961 = fma(_951, cbModelParam._m0[26u].z, fma(_950, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949)) - _916;
        float _962 = fma(_951, cbModelParam._m0[27u].z, fma(_950, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949)) - _920;
        float _963 = fma(_951, cbModelParam._m0[28u].z, fma(_950, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949)) - _924;
        float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
        float _980 = ((_967 * _961) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_916 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_967 * _962) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_920 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_967 * _963) / cbModelParam._m0[34u].z) + ((((((_924 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        float _1019 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_985.x + (-0.5));
        float _1021 = _1019 * (_985.y + (-0.5));
        float _1022 = _1019 * (_985.z + (-0.5));
        float _1029 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_992.x + (-0.5));
        float _1031 = _1029 * (_992.y + (-0.5));
        float _1032 = _1029 * (_992.z + (-0.5));
        float _1039 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_999.x + (-0.5));
        float _1041 = _1039 * (_999.y + (-0.5));
        float _1042 = _1039 * (_999.z + (-0.5));
        float _1049 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = _1049 * (_1006.x + (-0.5));
        float _1051 = _1049 * (_1006.y + (-0.5));
        float _1052 = _1049 * (_1006.z + (-0.5));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = _1020 * 0.5;
        float _1057 = _1030 * 0.5;
        float _1058 = _1040 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1073 = (dot(vec3(_670, _671, _672), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1083 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3687 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1085 + 1.0))) + _1090) * _1053;
        float _1100 = _1021 * 0.5;
        float _1101 = _1031 * 0.5;
        float _1102 = _1041 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_670, _671, _672), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1054 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3720 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1127 + 1.0))) + _1132) * _1054;
        float _1142 = _1022 * 0.5;
        float _1143 = _1032 * 0.5;
        float _1144 = _1042 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_670, _671, _672), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3753 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1169 + 1.0))) + _1174) * _1055;
        _1191 = _1022;
        _1193 = _1021;
        _1194 = _1020;
        _1195 = _1032;
        _1196 = _1031;
        _1197 = _1030;
        _1198 = _1042;
        _1199 = _1041;
        _1200 = _1040;
        _1201 = _1055;
        _1202 = _1054;
        _1203 = _1053;
        _1204 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1205 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1206 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
    }
    else
    {
        _1191 = _1192;
        _1193 = _1192;
        _1194 = _1192;
        _1195 = _1192;
        _1196 = _1192;
        _1197 = _1192;
        _1198 = _1192;
        _1199 = _1192;
        _1200 = _1192;
        _1201 = _1192;
        _1202 = _1192;
        _1203 = _1192;
        _1204 = 0.0;
        _1205 = 0.0;
        _1206 = 0.0;
    }
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1231 = fma(_890, cbModelParam._m0[30u].z, fma(_886, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _882));
        float _1235 = fma(_890, cbModelParam._m0[31u].z, fma(_886, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _882));
        float _1239 = fma(_890, cbModelParam._m0[32u].z, fma(_886, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _882));
        float _1262 = _882 + _670;
        float _1263 = _886 + _671;
        float _1264 = _890 + _672;
        float _1274 = fma(_1264, cbModelParam._m0[30u].z, fma(_1263, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1262)) - _1231;
        float _1275 = fma(_1264, cbModelParam._m0[31u].z, fma(_1263, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1262)) - _1235;
        float _1276 = fma(_1264, cbModelParam._m0[32u].z, fma(_1263, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1262)) - _1239;
        float _1280 = inversesqrt(dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276)));
        float _1293 = ((_1280 * _1274) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1231 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1280 * _1275) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1235 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1280 * _1276) / cbModelParam._m0[35u].z) + ((((((_1239 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        float _1330 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1297.x + (-0.5));
        float _1332 = _1330 * (_1297.y + (-0.5));
        float _1333 = _1330 * (_1297.z + (-0.5));
        float _1340 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1341 = _1340 * (_1304.x + (-0.5));
        float _1342 = _1340 * (_1304.y + (-0.5));
        float _1343 = _1340 * (_1304.z + (-0.5));
        float _1350 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1311.x + (-0.5));
        float _1352 = _1350 * (_1311.y + (-0.5));
        float _1353 = _1350 * (_1311.z + (-0.5));
        float _1360 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1318.x + (-0.5));
        float _1362 = _1360 * (_1318.y + (-0.5));
        float _1363 = _1360 * (_1318.z + (-0.5));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = _1331 * 0.5;
        float _1368 = _1341 * 0.5;
        float _1369 = _1351 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_670, _671, _672), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _3794 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _3805 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _3816 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1394 + 1.0))) + _1399) * _1364;
        float _1409 = _1332 * 0.5;
        float _1410 = _1342 * 0.5;
        float _1411 = _1352 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_670, _671, _672), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1365 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _3849 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1436 + 1.0))) + _1441) * _1365;
        float _1451 = _1333 * 0.5;
        float _1452 = _1343 * 0.5;
        float _1453 = _1353 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_670, _671, _672), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _3882 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1478 + 1.0))) + _1483) * _1366;
        _1500 = _1333;
        _1501 = _1332;
        _1502 = _1331;
        _1503 = _1343;
        _1504 = _1342;
        _1505 = _1341;
        _1506 = _1353;
        _1507 = _1352;
        _1508 = _1351;
        _1509 = _1366;
        _1510 = _1365;
        _1511 = _1364;
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1513 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1514 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
    }
    else
    {
        _1500 = _1192;
        _1501 = _1192;
        _1502 = _1192;
        _1503 = _1192;
        _1504 = _1192;
        _1505 = _1192;
        _1506 = _1192;
        _1507 = _1192;
        _1508 = _1192;
        _1509 = _1192;
        _1510 = _1192;
        _1511 = _1192;
        _1512 = 0.0;
        _1513 = 0.0;
        _1514 = 0.0;
    }
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1204)) + _1204;
    float _1525 = (cbModelParam._m0[1u].x * (_1513 - _1205)) + _1205;
    float _1526 = (cbModelParam._m0[1u].x * (_1514 - _1206)) + _1206;
    float _1547 = fma(_1526, cbSceneParam._m0[89u].z, fma(_1525, cbSceneParam._m0[89u].y, _1524 * cbSceneParam._m0[89u].x));
    float _1550 = fma(_1526, cbSceneParam._m0[90u].z, fma(_1525, cbSceneParam._m0[90u].y, _1524 * cbSceneParam._m0[90u].x));
    float _1553 = fma(_1526, cbSceneParam._m0[91u].z, fma(_1525, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1524));
    float _1568 = _829 * 0.5;
    float _1569 = _830 * 0.5;
    float _1570 = _831 * 0.5;
    float _1571 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1502, _1505, _1508, _1511));
    float _1574 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1501, _1504, _1507, _1510));
    float _1577 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1611;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1584 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1191, _1195, _1198, _1201));
        float _1588 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1193, _1196, _1199, _1202));
        float _1592 = dot(vec4(_1568, _1569, _1570, 1.0), vec4(_1194, _1197, _1200, _1203));
        float _1599 = dot(vec4(cbModelParam._m0[39u]), vec4(_1568, _1569, _1570, 1.0));
        _1611 = dot(vec3(isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)), isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1599) ? 0.0 : (isnan(0.0) ? _1599 : max(0.0, _1599))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1611 = 1.0;
    }
    float _1622;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1613 = dot(vec4(cbModelParam._m0[40u]), vec4(_1568, _1569, _1570, 1.0));
        _1622 = dot(vec3(isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1613) ? 0.0 : (isnan(0.0) ? _1613 : max(0.0, _1613))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1622 = 1.0;
    }
    float _1626 = (_1622 * cbModelParam._m0[1u].x) + (_1611 * (1.0 - cbModelParam._m0[1u].x));
    float _1636 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _673);
    float _1637 = isnan(_1636) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1636 : min(cbModelParam._m0[25u].z, _1636));
    float _1717;
    float _1719;
    float _1721;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1684 = fma(_890, cbModelParam._m0[13u].z, fma(_886, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _882)) + cbModelParam._m0[13u].w;
        float _1688 = fma(_890, cbModelParam._m0[14u].z, fma(_886, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _882)) + cbModelParam._m0[14u].w;
        float _1692 = fma(_890, cbModelParam._m0[15u].z, fma(_886, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _882)) + cbModelParam._m0[15u].w;
        float _1695 = fma(_831, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829));
        float _1698 = fma(_831, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829));
        float _1701 = fma(_831, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829));
        float _1729;
        if (_1695 > 0.0)
        {
            _1729 = abs((1.0 - _1684) / _1695);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1684 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1729 = frontier_phi_14_12_ladder;
        }
        float _1929;
        if (_1698 > 0.0)
        {
            _1929 = abs((1.0 - _1688) / _1698);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1688 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1929 = frontier_phi_23_19_ladder;
        }
        float _2172;
        if (_1701 > 0.0)
        {
            _2172 = abs((1.0 - _1692) / _1701);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1692 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2172 = frontier_phi_35_30_ladder;
        }
        float _2174 = isnan(_1929) ? _1729 : (isnan(_1729) ? _1929 : min(_1729, _1929));
        float _2175 = isnan(_2172) ? _2174 : (isnan(_2174) ? _2172 : min(_2174, _2172));
        float _2179 = (_2175 * _1695) + _1684;
        float _2180 = (_2175 * _1698) + _1688;
        float _2181 = (_2175 * _1701) + _1692;
        float _2182 = _2175 * 9.9999997473787516355514526367188e-05;
        float _2184 = (-1.0) - _2182;
        float _2186 = _2182 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2181 > _2186) || ((_2181 < _2184) || ((_2180 > _2186) || ((_2180 < _2184) || ((_2179 < _2184) || (_2179 > _2186))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2305 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2181, cbModelParam._m0[9u].z, fma(_2180, cbModelParam._m0[9u].y, _2179 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2181, cbModelParam._m0[10u].z, fma(_2180, cbModelParam._m0[10u].y, _2179 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2181, cbModelParam._m0[11u].z, fma(_2180, cbModelParam._m0[11u].y, _2179 * cbModelParam._m0[11u].x))), _1637);
            frontier_phi_13_35_ladder = _2305.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2305.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2305.x * cbModelParam._m0[1u].y;
        }
        _1717 = frontier_phi_13_35_ladder_2;
        _1719 = frontier_phi_13_35_ladder_1;
        _1721 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1705 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_829, _830, _831), _1637);
        _1717 = _1705.x * cbModelParam._m0[1u].y;
        _1719 = _1705.y * cbModelParam._m0[1u].y;
        _1721 = _1705.z * cbModelParam._m0[1u].y;
    }
    float _1725 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _673);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1725 : min(cbModelParam._m0[25u].w, _1725));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1779 = fma(_890, cbModelParam._m0[21u].z, fma(_886, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _882)) + cbModelParam._m0[21u].w;
        float _1783 = fma(_890, cbModelParam._m0[22u].z, fma(_886, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _882)) + cbModelParam._m0[22u].w;
        float _1787 = fma(_890, cbModelParam._m0[23u].z, fma(_886, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _882)) + cbModelParam._m0[23u].w;
        float _1790 = fma(_831, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829));
        float _1793 = fma(_831, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829));
        float _1796 = fma(_831, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829));
        float _1934;
        if (_1790 > 0.0)
        {
            _1934 = abs((1.0 - _1779) / _1790);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1779 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1934 = frontier_phi_25_21_ladder;
        }
        float _2199;
        if (_1793 > 0.0)
        {
            _2199 = abs((1.0 - _1783) / _1793);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1783 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2199 = frontier_phi_37_32_ladder;
        }
        float _2404;
        if (_1796 > 0.0)
        {
            _2404 = abs((1.0 - _1787) / _1796);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1787 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2404 = frontier_phi_46_43_ladder;
        }
        float _2406 = isnan(_2199) ? _1934 : (isnan(_1934) ? _2199 : min(_1934, _2199));
        float _2407 = isnan(_2404) ? _2406 : (isnan(_2406) ? _2404 : min(_2406, _2404));
        float _2411 = (_2407 * _1790) + _1779;
        float _2412 = (_2407 * _1793) + _1783;
        float _2413 = (_2407 * _1796) + _1787;
        float _2414 = _2407 * 9.9999997473787516355514526367188e-05;
        float _2415 = (-1.0) - _2414;
        float _2417 = _2414 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2413 > _2417) || ((_2413 < _2415) || ((_2412 > _2417) || ((_2412 < _2415) || ((_2411 < _2415) || (_2411 > _2417))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2413, cbModelParam._m0[17u].z, fma(_2412, cbModelParam._m0[17u].y, _2411 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2413, cbModelParam._m0[18u].z, fma(_2412, cbModelParam._m0[18u].y, _2411 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2413, cbModelParam._m0[19u].z, fma(_2412, cbModelParam._m0[19u].y, _2411 * cbModelParam._m0[19u].x))), _1726);
            frontier_phi_22_46_ladder = _2612.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2612.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2612.x * cbModelParam._m0[1u].z;
        }
        _1815 = frontier_phi_22_46_ladder_2;
        _1817 = frontier_phi_22_46_ladder_1;
        _1819 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_829, _830, _831), _1726);
        _1815 = _1799.x * cbModelParam._m0[1u].z;
        _1817 = _1799.y * cbModelParam._m0[1u].z;
        _1819 = _1799.z * cbModelParam._m0[1u].z;
    }
    float _1831 = ((((1.0 - _850) * ((_837 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_850 * _837)) * _821;
    float _1832 = _1831 * ((cbModelParam._m0[1u].w * (_1815 - _1717)) + _1717);
    float _1833 = _1831 * ((cbModelParam._m0[1u].w * (_1817 - _1719)) + _1719);
    float _1834 = _1831 * ((cbModelParam._m0[1u].w * (_1819 - _1721)) + _1721);
    float _1837 = fma(_1834, cbSceneParam._m0[89u].z, fma(_1833, cbSceneParam._m0[89u].y, _1832 * cbSceneParam._m0[89u].x));
    float _1840 = fma(_1834, cbSceneParam._m0[90u].z, fma(_1833, cbSceneParam._m0[90u].y, _1832 * cbSceneParam._m0[90u].x));
    float _1843 = fma(_1834, cbSceneParam._m0[91u].z, fma(_1833, cbSceneParam._m0[91u].y, _1832 * cbSceneParam._m0[91u].x));
    uvec4 _1853 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1855 = _1853.x * 14u;
    uint _1856 = _1855 + 13u;
    float _1863 = _821 + (-1.0);
    float _1868 = (cbLight._m0[_1856].x * _1863) + 1.0;
    float _1869 = (cbLight._m0[_1856].y * _1863) + 1.0;
    float _1870 = (cbLight._m0[_1856].z * _1863) + 1.0;
    float _1871 = (cbLight._m0[_1856].w * _1863) + 1.0;
    uint _1872 = _1855 + 5u;
    float _1878 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1882 = _1855 + 4u;
    float _1888 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
    uint _1892 = _1855 | 1u;
    float _1903 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_670, _671, _672));
    float _1906 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_670, _671, _672));
    float _4018 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _4029 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1911 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.3183098733425140380859375;
    float _1913 = (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * 0.3183098733425140380859375;
    float _1920 = ((cbLight._m0[_1872].x * _1878) * _1913) + ((cbLight._m0[_1882].x * _1888) * _1911);
    float _1921 = ((_1878 * cbLight._m0[_1872].y) * _1913) + ((_1888 * cbLight._m0[_1882].y) * _1911);
    float _1922 = ((_1878 * cbLight._m0[_1872].z) * _1913) + ((_1888 * cbLight._m0[_1882].z) * _1911);
    uvec4 _1926 = floatBitsToUint(cbLight._m0[_1855 + 12u]);
    bool _1928 = _1926.x == 0u;
    float _1939;
    float _1941;
    float _1943;
    if (_1928)
    {
        _1939 = _1920;
        _1941 = _1921;
        _1943 = _1922;
    }
    else
    {
        uint _1947 = _1855 + 6u;
        float _1963 = (dot(vec3(cbLight._m0[_1855 + 2u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _1964 = _1963 * _1963;
        float _4040 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1965 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1966 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _1939 = (((cbLight._m0[_1947].x * 0.3183098733425140380859375) * _1965) * _1966) + _1920;
        _1941 = (((cbLight._m0[_1947].y * 0.3183098733425140380859375) * _1965) * _1966) + _1921;
        _1943 = (((cbLight._m0[_1947].z * 0.3183098733425140380859375) * _1965) * _1966) + _1922;
    }
    bool _1946 = _1926.y == 0u;
    float _1984;
    float _1986;
    float _1988;
    if (_1946)
    {
        _1984 = _1939;
        _1986 = _1941;
        _1988 = _1943;
    }
    else
    {
        uint _2143 = _1855 + 7u;
        float _2159 = (dot(vec3(cbLight._m0[_1855 + 3u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2160 = _2159 * _2159;
        float _4056 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
        float _2161 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _2162 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _1984 = (((cbLight._m0[_2143].x * 0.3183098733425140380859375) * _2161) * _2162) + _1939;
        _1986 = (((cbLight._m0[_2143].y * 0.3183098733425140380859375) * _2161) * _2162) + _1941;
        _1988 = (((cbLight._m0[_2143].z * 0.3183098733425140380859375) * _2161) * _2162) + _1943;
    }
    uint _1991 = _1855 + 8u;
    float _2004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1855].w)) * _673) * 0.949999988079071044921875);
    float _2005 = _2004 * _2004;
    float _2006 = cbLight._m0[_1855].x + _750;
    float _2007 = cbLight._m0[_1855].y + _751;
    float _2008 = cbLight._m0[_1855].z + _752;
    float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
    float _2013 = _2012 * _2006;
    float _2014 = _2012 * _2007;
    float _2015 = _2012 * _2008;
    float _2016 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1855].xyz));
    float _4072 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _2020 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _2021 = dot(vec3(_670, _671, _672), vec3(_2013, _2014, _2015));
    float _4094 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _2024 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _2025 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_2013, _2014, _2015));
    float _4105 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2029 = _2005 * _2005;
    float _2033 = ((_2024 * _2024) * (_2029 + (-1.0))) + 1.0;
    float _2044 = (exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2045 = 1.0 - _2005;
    float _2056 = (0.5 / (((_2020 * ((_2019 * _2045) + _2005)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2045) + _2005) * _2019))) * _2019;
    float _4116 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2058 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2029 / ((_2033 * _2033) * 3.141590118408203125));
    uint _2069 = _1855 + 9u;
    float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _673) * 0.949999988079071044921875);
    float _2081 = _2080 * _2080;
    float _2082 = cbLight._m0[_1892].x + _750;
    float _2083 = cbLight._m0[_1892].y + _751;
    float _2084 = cbLight._m0[_1892].z + _752;
    float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
    float _2089 = _2088 * _2082;
    float _2090 = _2088 * _2083;
    float _2091 = _2088 * _2084;
    float _2092 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1892].xyz));
    float _4127 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2096 = dot(vec3(_670, _671, _672), vec3(_2089, _2090, _2091));
    float _4138 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2100 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2089, _2090, _2091));
    float _4149 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2104 = _2081 * _2081;
    float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
    float _2117 = (exp2(log2(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2118 = 1.0 - _2081;
    float _2128 = (0.5 / (((_2020 * ((_2095 * _2118) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2118) + _2081) * _2095))) * _2095;
    float _4160 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2130 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
    float _2140 = (((_2117 * cbLight._m0[_2069].x) * _2130) * _1878) + (((_2044 * cbLight._m0[_1991].x) * _2058) * _1888);
    float _2141 = (((_2117 * cbLight._m0[_2069].y) * _2130) * _1878) + (((_2044 * cbLight._m0[_1991].y) * _2058) * _1888);
    float _2142 = (((_2117 * cbLight._m0[_2069].z) * _2130) * _1878) + (((_2044 * cbLight._m0[_1991].z) * _2058) * _1888);
    float _2204;
    float _2206;
    float _2208;
    if (_1928)
    {
        _2204 = _2140;
        _2206 = _2141;
        _2208 = _2142;
    }
    else
    {
        uint _2210 = _1855 + 2u;
        uint _2214 = _1855 + 10u;
        float _2228 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _673) * 0.949999988079071044921875);
        float _2229 = _2228 * _2228;
        float _2230 = cbLight._m0[_2210].x + _750;
        float _2231 = cbLight._m0[_2210].y + _751;
        float _2232 = cbLight._m0[_2210].z + _752;
        float _2236 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
        float _2237 = _2236 * _2230;
        float _2238 = _2236 * _2231;
        float _2239 = _2236 * _2232;
        float _2240 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2210].xyz));
        float _4171 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2243 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2244 = dot(vec3(_670, _671, _672), vec3(_2237, _2238, _2239));
        float _4182 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2247 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _2248 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2237, _2238, _2239));
        float _4193 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        float _2252 = _2229 * _2229;
        float _2256 = ((_2247 * _2247) * (_2252 + (-1.0))) + 1.0;
        float _2265 = (exp2(log2(1.0 - (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2266 = 1.0 - _2229;
        float _2276 = (0.5 / (((_2020 * ((_2243 * _2266) + _2229)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2266) + _2229) * _2243))) * _2243;
        float _4204 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2278 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2252 / ((_2256 * _2256) * 3.141590118408203125));
        float _2279 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2204 = (((_2265 * cbLight._m0[_2214].x) * _2278) * _2279) + _2140;
        _2206 = (((_2265 * cbLight._m0[_2214].y) * _2278) * _2279) + _2141;
        _2208 = (((_2265 * cbLight._m0[_2214].z) * _2278) * _2279) + _2142;
    }
    float _2314;
    float _2316;
    float _2318;
    if (_1946)
    {
        _2314 = _2204;
        _2316 = _2206;
        _2318 = _2208;
    }
    else
    {
        uint _2325 = _1855 + 3u;
        uint _2329 = _1855 + 11u;
        float _2343 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2325].w)) * _673) * 0.949999988079071044921875);
        float _2344 = _2343 * _2343;
        float _2345 = cbLight._m0[_2325].x + _750;
        float _2346 = cbLight._m0[_2325].y + _751;
        float _2347 = cbLight._m0[_2325].z + _752;
        float _2351 = inversesqrt(dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347)));
        float _2352 = _2351 * _2345;
        float _2353 = _2351 * _2346;
        float _2354 = _2351 * _2347;
        float _2355 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2325].xyz));
        float _4220 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2359 = dot(vec3(_670, _671, _672), vec3(_2352, _2353, _2354));
        float _4231 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2362 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2363 = dot(vec3(cbLight._m0[_2325].xyz), vec3(_2352, _2353, _2354));
        float _4242 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2367 = _2344 * _2344;
        float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
        float _2380 = (exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2381 = 1.0 - _2344;
        float _2391 = (0.5 / (((_2020 * ((_2358 * _2381) + _2344)) + 9.9999999392252902907785028219223e-09) + (((_2020 * _2381) + _2344) * _2358))) * _2358;
        float _4253 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2393 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
        float _2394 = isnan(1.0) ? _1871 : (isnan(_1871) ? 1.0 : min(_1871, 1.0));
        _2314 = (((_2380 * cbLight._m0[_2329].x) * _2393) * _2394) + _2204;
        _2316 = (((_2380 * cbLight._m0[_2329].y) * _2393) * _2394) + _2206;
        _2318 = (((_2380 * cbLight._m0[_2329].z) * _2393) * _2394) + _2208;
    }
    float _2529;
    float _2531;
    float _2533;
    float _2535;
    float _2537;
    float _2539;
    if (_1853.y == 0u)
    {
        float _2469 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2470 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2469;
        float _2471 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2469;
        float _2472 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2469;
        uvec4 _2484 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2485 = _2484.x;
        uint _2496 = uint((float(_2484.y) * floor(float(uint(cbSceneParam._m0[85u].y * _759) / _2485))) + floor(float(uint(cbSceneParam._m0[85u].x * _758) / _2485)));
        float _2506 = (log2(_2472 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2507 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        uint _2510 = uint(isnan(14.0) ? _2507 : (isnan(_2507) ? 14.0 : min(_2507, 14.0)));
        uvec4 _2515 = texelFetch(g_lightClusterGridBuffer, int(((_2510 << 2u) + (_2496 << 6u)) >> 2u));
        uint _2516 = _2515.x;
        uint _2517 = _2484.z;
        float _2617;
        float _2619;
        float _2621;
        float _2623;
        float _2625;
        float _2627;
        if (((((1u << ((_2517 >> 4u) & 15u)) + 4294967295u) & _2516) == 0u) || ((_2517 & 240u) == 0u))
        {
            _2617 = 0.0;
            _2619 = 0.0;
            _2621 = 0.0;
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
        }
        else
        {
            float _2618;
            float _2620;
            float _2622;
            float _2624;
            float _2626;
            float _2628;
            float _2762 = 0.0;
            float _2763 = 0.0;
            float _2764 = 0.0;
            float _2765 = 0.0;
            float _2766 = 0.0;
            float _2767 = 0.0;
            uint _2768 = 0u;
            uint _2777;
            bool _2778;
            for (;;)
            {
                _2777 = texelFetch(g_lightClassification, int((((_2510 << 5u) + (_2496 << 9u)) + (_2768 << 2u)) >> 2u)).x;
                _2778 = _2777 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2778)
                {
                    frontier_phi_61_pred = _2762;
                    frontier_phi_61_pred_1 = _2767;
                    frontier_phi_61_pred_2 = _2766;
                    frontier_phi_61_pred_3 = _2765;
                    frontier_phi_61_pred_4 = _2764;
                    frontier_phi_61_pred_5 = _2763;
                }
                else
                {
                    float _2886;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    uint _2892;
                    _2886 = _2762;
                    _2887 = _2763;
                    _2888 = _2764;
                    _2889 = _2765;
                    _2890 = _2766;
                    _2891 = _2767;
                    _2892 = _2777;
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    for (;;)
                    {
                        uint _2896 = uint(findLSB(_2892)) + (_2768 << 5u);
                        uint _2893 = (_2892 + 4294967295u) & _2892;
                        uint _2898 = _2896 * 48u;
                        vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 3u)).x));
                        uint _2918 = (_2896 * 48u) + 4u;
                        vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2918)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2918 + 3u)).x));
                        uint _2937 = (_2896 * 48u) + 8u;
                        vec3 _2948 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x));
                        float _2952 = _2912.x - _2470;
                        float _2953 = _2912.y - _2471;
                        float _2954 = _2912.z - _2472;
                        float _2955 = dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954));
                        float _2958 = inversesqrt(_2955);
                        float _2959 = _2958 * _2952;
                        float _2960 = _2958 * _2953;
                        float _2961 = _2958 * _2954;
                        float _2962 = dot(vec3(_777, _780, _783), vec3(_2959, _2960, _2961));
                        float _2967 = 1.0 - (_2955 * _2912.w);
                        float _4279 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2968 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2969 = sqrt(_2955) * _2931.w;
                        float _2972 = 1.39999997615814208984375 / (_2969 + 1.39999997615814208984375);
                        float _2973 = _2972 * _2972;
                        float _2976 = ((1.0 - _2973) * _2962) + _2973;
                        float _2979 = _2969 * _2969;
                        float _2983 = ((isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0))) * _2968) / ((_2979 * 0.699999988079071044921875) + 1.0);
                        float _2987 = (-0.0) - _2470;
                        float _2988 = (-0.0) - _2471;
                        float _2989 = (-0.0) - _2472;
                        float _2993 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
                        float _2994 = _2993 * _2987;
                        float _2995 = _2993 * _2988;
                        float _2996 = _2993 * _2989;
                        float _3004 = exp2(log2(1.0 / ((_2979 * 3.5) + 5.0)) * 0.25);
                        float _3005 = 1.0 - _837;
                        float _3012 = sqrt(1.0 - ((1.0 - (_3005 * _3005)) * (1.0 - (_3004 * _3004))));
                        float _3013 = _3012 * _3012;
                        float _3014 = _3013 * _3013;
                        float _3015 = _2994 + _2959;
                        float _3016 = _2995 + _2960;
                        float _3017 = _2996 + _2961;
                        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                        float _3025 = dot(vec3(_777, _780, _783), vec3(_2994, _2995, _2996));
                        float _4295 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3028 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _3029 = dot(vec3(_777, _780, _783), vec3(_3021 * _3015, _3021 * _3016, _3021 * _3017));
                        float _4306 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3036 = ((_3032 * _3032) * (_3014 + (-1.0))) + 1.0;
                        float _3037 = _2972 * _3013;
                        float _3038 = _3037 * _3037;
                        float _3041 = ((1.0 - _3038) * _2962) + _3038;
                        float _4317 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3042 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
                        float _3043 = 1.0 - _3013;
                        float _3053 = (0.5 / (((_3042 * ((_3028 * _3043) + _3013)) + 9.9999999392252902907785028219223e-09) + (((_3042 * _3043) + _3013) * _3028))) * _3042;
                        float _4328 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3064 = (((_3014 * 3.1415927410125732421875) * (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) / ((_3036 * _3036) * ((_2979 * 2.1991131305694580078125) + 3.141590118408203125))) * _2968;
                        _2821 = (_2983 * _2931.x) + _2889;
                        _2822 = (_2983 * _2931.y) + _2890;
                        _2823 = (_2983 * _2931.z) + _2891;
                        _2818 = (_3064 * _2948.x) + _2886;
                        _2819 = (_3064 * _2948.y) + _2887;
                        _2820 = (_3064 * _2948.z) + _2888;
                        if (_2893 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2886 = _2818;
                            _2887 = _2819;
                            _2888 = _2820;
                            _2889 = _2821;
                            _2890 = _2822;
                            _2891 = _2823;
                            _2892 = _2893;
                        }
                    }
                    frontier_phi_61_pred = _2818;
                    frontier_phi_61_pred_1 = _2823;
                    frontier_phi_61_pred_2 = _2822;
                    frontier_phi_61_pred_3 = _2821;
                    frontier_phi_61_pred_4 = _2820;
                    frontier_phi_61_pred_5 = _2819;
                }
                _2618 = frontier_phi_61_pred;
                _2628 = frontier_phi_61_pred_1;
                _2626 = frontier_phi_61_pred_2;
                _2624 = frontier_phi_61_pred_3;
                _2622 = frontier_phi_61_pred_4;
                _2620 = frontier_phi_61_pred_5;
                uint _2769 = _2768 + 1u;
                if (_2769 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2762 = _2618;
                    _2763 = _2620;
                    _2764 = _2622;
                    _2765 = _2624;
                    _2766 = _2626;
                    _2767 = _2628;
                    _2768 = _2769;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2617 = _2618;
            _2619 = _2620;
            _2621 = _2622;
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
        }
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.z;
        uint _2634 = (_2632 >> 8u) & 15u;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        if (((4294967295u << _2634) & _2516) == 0u)
        {
            _2730 = _2617;
            _2732 = _2619;
            _2734 = _2621;
            _2736 = _2623;
            _2738 = _2625;
            _2740 = _2627;
        }
        else
        {
            float _2755 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
            float _2756 = _2755 * _2470;
            float _2757 = _2755 * _2471;
            float _2758 = _2755 * _2472;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2634 < ((_2632 >> 12u) & 15u))
            {
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2739;
                float _2741;
                float _2869 = _2617;
                float _2870 = _2619;
                float _2871 = _2621;
                float _2872 = _2623;
                float _2873 = _2625;
                float _2874 = _2627;
                uint _2875 = _2634;
                uint _2884;
                bool _2885;
                for (;;)
                {
                    _2884 = texelFetch(g_lightClassification, int((((_2510 << 5u) + (_2496 << 9u)) + (_2875 << 2u)) >> 2u)).x;
                    _2885 = _2884 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2885)
                    {
                        frontier_phi_67_pred = _2872;
                        frontier_phi_67_pred_1 = _2873;
                        frontier_phi_67_pred_2 = _2874;
                        frontier_phi_67_pred_3 = _2871;
                        frontier_phi_67_pred_4 = _2870;
                        frontier_phi_67_pred_5 = _2869;
                    }
                    else
                    {
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3082 = _2869;
                        float _3083 = _2870;
                        float _3084 = _2871;
                        float _3085 = _2872;
                        float _3086 = _2873;
                        float _3087 = _2874;
                        uint _3088 = _2884;
                        uint _3089;
                        vec4 _3114;
                        float _3115;
                        vec4 _3130;
                        vec3 _3142;
                        vec4 _3157;
                        vec4 _3172;
                        float _3218;
                        bool _3219;
                        for (;;)
                        {
                            uint _3099 = ((_2875 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3088));
                            _3089 = (_3088 + 4294967295u) & _3088;
                            uint _3101 = _3099 * 40u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            _3115 = _3114.w;
                            uint _3117 = (_3099 * 40u) + 4u;
                            _3130 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3117)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3117 + 3u)).x));
                            uint _3132 = (_3099 * 40u) + 8u;
                            _3142 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x));
                            uint _3144 = (_3099 * 40u) + 16u;
                            _3157 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3144)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3144 + 3u)).x));
                            uint _3159 = (_3099 * 40u) + 20u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3174 = (_3099 * 40u) + 24u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            uint _3193 = (_3099 * 40u) + 28u;
                            vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            _3218 = fma(_2472, _3206.z, fma(_2471, _3206.y, _3206.x * _2470)) + _3206.w;
                            _3219 = !((fma(_2472, _3187.z, fma(_2471, _3187.y, _3187.x * _2470)) + _3187.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3219)
                            {
                                float _3246 = _3114.x - _2470;
                                float _3247 = _3114.y - _2471;
                                float _3248 = _3114.z - _2472;
                                float _3249 = dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248));
                                float _3252 = inversesqrt(_3249);
                                float _3253 = _3252 * _3246;
                                float _3254 = _3252 * _3247;
                                float _3255 = _3252 * _3248;
                                float _3259 = 1.0 - (_3249 / (_3115 * _3115));
                                float _4339 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3260 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3264 = sqrt(_3249) * _3130.w;
                                float _3266 = 1.39999997615814208984375 / (_3264 + 1.39999997615814208984375);
                                float _3267 = _3266 * _3266;
                                float _3270 = ((1.0 - _3267) * dot(vec3(_3253, _3254, _3255), vec3(_777, _780, _783))) + _3267;
                                float _3273 = _3264 * _3264;
                                float _3277 = (fma(_2472, _3157.z, fma(_2471, _3157.y, _3157.x * _2470)) + _3157.w) / _3218;
                                float _3278 = (fma(_2472, _3172.z, fma(_2471, _3172.y, _3172.x * _2470)) + _3172.w) / _3218;
                                float _3282 = 1.0 - dot(vec2(_3277, _3278), vec2(_3277, _3278));
                                float _4355 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3284 = _3283 * (((isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0))) * _3260) / ((_3273 * 0.699999988079071044921875) + 1.0));
                                float _3296 = exp2(log2(1.0 / ((_3273 * 3.5) + 5.0)) * 0.25);
                                float _3297 = 1.0 - _837;
                                float _3304 = sqrt(1.0 - ((1.0 - (_3297 * _3297)) * (1.0 - (_3296 * _3296))));
                                float _3305 = _3304 * _3304;
                                float _3306 = _3305 * _3305;
                                float _3307 = _3253 - _2756;
                                float _3308 = _3254 - _2757;
                                float _3309 = _3255 - _2758;
                                float _3313 = inversesqrt(dot(vec3(_3307, _3308, _3309), vec3(_3307, _3308, _3309)));
                                float _3317 = dot(vec3(_777, _780, _783), vec3((-0.0) - _2756, (-0.0) - _2757, (-0.0) - _2758));
                                float _4366 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3320 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3321 = dot(vec3(_777, _780, _783), vec3(_3313 * _3307, _3313 * _3308, _3313 * _3309));
                                float _4377 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                                float _3324 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3328 = ((_3324 * _3324) * (_3306 + (-1.0))) + 1.0;
                                float _3329 = _3266 * _3305;
                                float _3330 = _3329 * _3329;
                                float _3336 = ((1.0 - _3330) * dot(vec3(_777, _780, _783), vec3(_3253, _3254, _3255))) + _3330;
                                float _4388 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3337 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3338 = 1.0 - _3305;
                                float _3348 = (0.5 / (((_3337 * ((_3320 * _3338) + _3305)) + 9.9999999392252902907785028219223e-09) + (((_3337 * _3338) + _3305) * _3320))) * _3337;
                                float _4399 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3358 = (_3283 * _3260) * (((_3306 * 3.1415927410125732421875) * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) / ((_3328 * _3328) * ((_3273 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3358 * _3142.x;
                                frontier_phi_73_pred_1 = _3358 * _3142.y;
                                frontier_phi_73_pred_2 = _3284 * _3130.z;
                                frontier_phi_73_pred_3 = _3284 * _3130.y;
                                frontier_phi_73_pred_4 = _3284 * _3130.x;
                                frontier_phi_73_pred_5 = _3358 * _3142.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3362 = frontier_phi_73_pred;
                            _3363 = frontier_phi_73_pred_1;
                            _3367 = frontier_phi_73_pred_2;
                            _3366 = frontier_phi_73_pred_3;
                            _3365 = frontier_phi_73_pred_4;
                            _3364 = frontier_phi_73_pred_5;
                            _3072 = _3365 + _3085;
                            _3073 = _3366 + _3086;
                            _3074 = _3367 + _3087;
                            _3069 = _3362 + _3082;
                            _3070 = _3363 + _3083;
                            _3071 = _3364 + _3084;
                            if (_3089 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3074;
                                _3088 = _3089;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3072;
                        frontier_phi_67_pred_1 = _3073;
                        frontier_phi_67_pred_2 = _3074;
                        frontier_phi_67_pred_3 = _3071;
                        frontier_phi_67_pred_4 = _3070;
                        frontier_phi_67_pred_5 = _3069;
                    }
                    _2737 = frontier_phi_67_pred;
                    _2739 = frontier_phi_67_pred_1;
                    _2741 = frontier_phi_67_pred_2;
                    _2735 = frontier_phi_67_pred_3;
                    _2733 = frontier_phi_67_pred_4;
                    _2731 = frontier_phi_67_pred_5;
                    uint _2876 = _2875 + 1u;
                    if (_2876 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2869 = _2731;
                        _2870 = _2733;
                        _2871 = _2735;
                        _2872 = _2737;
                        _2873 = _2739;
                        _2874 = _2741;
                        _2875 = _2876;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2739;
                frontier_phi_55_56_ladder_1 = _2741;
                frontier_phi_55_56_ladder_2 = _2737;
                frontier_phi_55_56_ladder_3 = _2735;
                frontier_phi_55_56_ladder_4 = _2733;
                frontier_phi_55_56_ladder_5 = _2731;
            }
            else
            {
                frontier_phi_55_56_ladder = _2625;
                frontier_phi_55_56_ladder_1 = _2627;
                frontier_phi_55_56_ladder_2 = _2623;
                frontier_phi_55_56_ladder_3 = _2621;
                frontier_phi_55_56_ladder_4 = _2619;
                frontier_phi_55_56_ladder_5 = _2617;
            }
            _2730 = frontier_phi_55_56_ladder_5;
            _2732 = frontier_phi_55_56_ladder_4;
            _2734 = frontier_phi_55_56_ladder_3;
            _2736 = frontier_phi_55_56_ladder_2;
            _2738 = frontier_phi_55_56_ladder;
            _2740 = frontier_phi_55_56_ladder_1;
        }
        float _2745 = isnan(1.0) ? _821 : (isnan(_821) ? 1.0 : min(_821, 1.0));
        _2529 = (_2745 * _2736) + _1984;
        _2531 = (_2745 * _2738) + _1986;
        _2533 = (_2745 * _2740) + _1988;
        _2535 = ((_2730 * 0.039999999105930328369140625) * _2745) + _2314;
        _2537 = ((_2732 * 0.039999999105930328369140625) * _2745) + _2316;
        _2539 = ((_2734 * 0.039999999105930328369140625) * _2745) + _2318;
    }
    else
    {
        _2529 = _1984;
        _2531 = _1986;
        _2533 = _1988;
        _2535 = _2314;
        _2537 = _2316;
        _2539 = _2318;
    }
    float _4415 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4426 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4437 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    uint _2559 = _236 + 6u;
    float _2567 = _758 / cbSceneParam._m0[86u].x;
    float _2568 = _759 / cbSceneParam._m0[86u].y;
    vec4 _2582 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2567, _2568, (log2((isnan(cbSceneParam._m0[77u].w) ? _691 : (isnan(_691) ? cbSceneParam._m0[77u].w : min(_691, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2584 = _2582.x;
    float _2585 = _2582.y;
    float _2586 = _2582.z;
    float _2587 = _2582.w;
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    if (_691 > cbSceneParam._m0[78u].w)
    {
        float _2642 = isnan(_691) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _691 : min(cbSceneParam._m0[80u].w, _691));
        float _2643 = _2642 / _691;
        float _2654 = _2643 * _743;
        float _2655 = _744 * _2643;
        float _2656 = (-0.0) - _2655;
        float _2658 = _2643 * _745;
        float _2660 = (cbSceneParam._m0[77u].w * _2656) / _2642;
        float _2661 = _2660 + cbSceneParam._m0[79u].w;
        float _2662 = cbSceneParam._m0[79u].w - _2655;
        float _2668 = sqrt(((_2654 * _2654) + (_2655 * _2655)) + (_2658 * _2658));
        float _2671 = (1.0 - (cbSceneParam._m0[77u].w / _2642)) * _2668;
        float _2676 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2678 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2831;
        if (abs((_2656 - _2660) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2831 = ((((_2661 > 0.0) ? exp2(_2676 * _2661) : (2.0 - exp2(_2678 * _2661))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2671;
        }
        else
        {
            float _2791 = 1.0 / cbSceneParam._m0[80u].x;
            float _2792 = isnan(_2662) ? _2661 : (isnan(_2661) ? _2662 : max(_2661, _2662));
            float _2793 = isnan(_2662) ? _2661 : (isnan(_2661) ? _2662 : min(_2661, _2662));
            float _2802 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : min(_2792, 0.0));
            float _2803 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : min(_2793, 0.0));
            _2831 = ((abs(_2668 / _2656) * cbSceneParam._m0[80u].y) * ((((_2802 - _2803) * 2.0) - ((exp2(_2676 * (isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0)))) - exp2(_2676 * (isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))))) * _2791)) - ((exp2(_2678 * _2802) - exp2(_2678 * _2803)) * _2791))) + (_2671 * cbSceneParam._m0[80u].z);
        }
        vec4 _2833 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2567, _2568, 1.0), 0.0);
        float _2842 = exp2((_2831 * (-1.44269502162933349609375)) * (1.0 - _2833.w));
        float _2843 = log2(_2842);
        float _2859 = log2(_2587);
        _2680 = (exp2(_2859 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].x)) * _2833.x) / cbSceneParam._m0[78u].x)) + _2584;
        _2682 = (exp2(_2859 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].y)) * _2833.y) / cbSceneParam._m0[78u].y)) + _2585;
        _2684 = (exp2(_2859 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2843 * cbSceneParam._m0[78u].z)) * _2833.z) / cbSceneParam._m0[78u].z)) + _2586;
        _2686 = _2842 * _2587;
    }
    else
    {
        _2680 = _2584;
        _2682 = _2585;
        _2684 = _2586;
        _2686 = _2587;
    }
    float _2698 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2699 = _2698 == 3.0;
    float _2700 = log2(_2686);
    float _2707 = exp2(_2700 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2529 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _821))) + ((_2535 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1626)) * cbPerFrame._m0[3u].x));
    float _2708 = exp2(_2700 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2531 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _821))) + ((_2537 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1626)) * cbPerFrame._m0[3u].x));
    float _2709 = exp2(_2700 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2533 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _821))) + ((_2539 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1626)) * cbPerFrame._m0[3u].x));
    float _2718 = (_2698 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2718 * (_2699 ? _2707 : (_2707 + (cbSceneParam._m0[72u].w * _2680)));
    SV_Target.y = _2718 * (_2699 ? _2708 : (_2708 + (cbSceneParam._m0[72u].w * _2682)));
    SV_Target.z = _2718 * (_2699 ? _2709 : (_2709 + (cbSceneParam._m0[72u].w * _2684)));
    SV_Target.w = cbInstanceData._m0[_2559].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2559].w;
}


