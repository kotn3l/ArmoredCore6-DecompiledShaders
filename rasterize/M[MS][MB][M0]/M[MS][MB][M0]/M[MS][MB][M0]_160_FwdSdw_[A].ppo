#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1352;
float _3992;
float _3993;
float _3994;
float _3995;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _364 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _366 = _364.x;
    float _376 = dot(vec4(_366, _364.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _393 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_366 - _376) * cbMtdParam._m0[24u].x) + _376) * cbMtdParam._m0[23u].x))) + 1.0;
    float _4004 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _401 = (_394 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _402 = (_394 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _403 = (_394 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _422 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _442 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _278) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _279) + cbTextureTilingScale._m0[20u].w));
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _488 = _486.x;
    float _489 = _486.y;
    float _490 = _486.z;
    float _499 = ((_469.z - _490) * _394) + _490;
    float _502 = ((((_469.x - _488) * _394) + _488) * 2.0) + (-1.0);
    float _503 = ((((_469.y - _489) * _394) + _489) * 2.0) + (-1.0);
    float _504 = dot(vec2(_502, _503), vec2(_502, _503));
    float _4015 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _509 = sqrt(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))));
    float _512 = _502 + ((((_442.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _513 = _503 + ((((_442.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _516 = fma(_509, _247, fma(_513, _254, _512 * _240));
    float _519 = fma(_509, _248, fma(_513, _255, _512 * _241));
    float _522 = fma(_509, _249, fma(_513, _256, _512 * _242));
    float _526 = inversesqrt(dot(vec3(_516, _519, _522), vec3(_516, _519, _522)));
    vec4 _542 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _570 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _572 = _570.x;
    float _573 = 1.0 - _572;
    float _577 = ((_572 - _573) * cbMtdParam._m0[24u].z) + _573;
    float _579 = (cbMtdParam._m0[19u].x + dot(vec4(_526 * _516, _526 * _519, _526 * _522, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_577 * cbMtdParam._m0[21u].z);
    float _4026 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _582 = (-0.0) - cbMtdParam._m0[24u].y;
    float _584 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _584 : (isnan(_584) ? 1.0 : min(_584, 1.0));
    float _592 = _580 - ((_580 * TEXCOORD_8.x) * _585);
    float _593 = _580 - ((_580 * TEXCOORD_8.y) * _585);
    float _594 = _580 - ((_580 * TEXCOORD_8.z) * _585);
    float _601 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _605 = ((isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : min(_601, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _613 = (_605 - (((_577 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _605))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4057 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _614 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _618 = ((_592 * ((_422.x * cbMtdParam._m0[18u].x) - _401)) * _614) + _401;
    float _619 = ((_593 * ((_422.y * cbMtdParam._m0[18u].y) - _402)) * _614) + _402;
    float _620 = ((_594 * ((_422.z * cbMtdParam._m0[18u].z) - _403)) * _614) + _403;
    vec4 _632 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _634 = _632.x;
    float _635 = 1.0 - _634;
    float _662 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_634 - _635) * cbMtdParam._m0[24u].w) + _635) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _4068 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _671 = ((((cbMtdParam._m0[10u].x - _618) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _663) + _618;
    float _672 = ((((cbMtdParam._m0[10u].y - _619) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _663) + _619;
    float _673 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _620)) * _663) + _620;
    float _678 = (((_442.z - _499) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _499;
    vec4 _692 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _699 = (_692.x * 2.0) + (-1.0);
    float _700 = (_692.y * 2.0) + (-1.0);
    float _701 = dot(vec2(_699, _700), vec2(_699, _700));
    float _4079 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _710 = (((_692.z - _678) * _592) * _614) + _678;
    float _713 = ((cbMtdParam._m0[23u].y - _710) * _663) + _710;
    vec4 _732 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _738 = (_732.x * 2.0) + (-1.0);
    float _739 = (_732.y * 2.0) + (-1.0);
    float _740 = dot(vec2(_738, _739), vec2(_738, _739));
    float _4090 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _760 = (((cbMtdParam._m0[21u].x * _512) + ((_699 - _512) * _592)) * _614) + _512;
    float _761 = (((cbMtdParam._m0[21u].x * _513) + ((_700 - _513) * _593)) * _614) + _513;
    float _762 = (((sqrt(1.0 - (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) - _509) * _594) * _614) + _509;
    float _773 = (((_738 - _760) + (_760 * cbMtdParam._m0[22u].z)) * _663) + _760;
    float _774 = (((_739 - _761) + (_761 * cbMtdParam._m0[22u].z)) * _663) + _761;
    float _775 = ((sqrt(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) - _762) * _663) + _762;
    float _777 = cbMtdParam._m0[22u].x + _542.w;
    float _780 = fma(_775, _247, fma(_774, _254, _773 * _240));
    float _783 = fma(_775, _248, fma(_774, _255, _773 * _241));
    float _786 = fma(_775, _249, fma(_774, _256, _773 * _242));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _4101 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _794 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4123 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4134 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _4145 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _812 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _863 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _853);
    float _864 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _853);
    float _865 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _853);
    float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
    float _870 = _863 * _869;
    float _871 = _864 * _869;
    float _872 = _865 * _869;
    vec4 _877 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _879 = _877.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1033 = sqrt(((_863 * _863) + (_864 * _864)) + (_865 * _865));
        float _1039 = (cbMatDynParam._m0[5u].x * _1033) + cbMatDynParam._m0[5u].y;
        float _4156 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1044 = (cbMatDynParam._m0[5u].z * _1033) + cbMatDynParam._m0[5u].w;
        float _4167 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) - _1040)) + _1040) < ((_879 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _890 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _891 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _909 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _912 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _915 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    uint _928 = _259 + 9u;
    uint _929 = _928 + uint(cbMatDynParam._m0[0u].w);
    float _935 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_929].x;
    float _936 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * cbInstanceData._m0[_929].y;
    float _937 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * cbInstanceData._m0[_929].z;
    float _4178 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _938 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _4200 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    vec4 _949 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _890, cbSceneParam._m0[86u].y * _891));
    float _953 = ((isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * TEXCOORD_5.w) * _949.x;
    float _954 = dot(vec3(_791, _792, _793), vec3(_870, _871, _872));
    float _957 = _954 * 2.0;
    float _961 = (_957 * _791) - _870;
    float _962 = (_957 * _792) - _871;
    float _963 = (_957 * _793) - _872;
    float _967 = abs(dot(vec3(_870, _871, _872), vec3(_791, _792, _793)));
    float _4211 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _969 = sqrt(_794);
    float _982 = exp2((_969 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_969 * 3.0));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1351;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1076 = fma(_1022, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014));
        float _1080 = fma(_1022, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014));
        float _1084 = fma(_1022, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014));
        float _1109 = _1014 + _791;
        float _1110 = _1018 + _792;
        float _1111 = _1022 + _793;
        float _1121 = fma(_1111, cbModelParam._m0[26u].z, fma(_1110, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1109)) - _1076;
        float _1122 = fma(_1111, cbModelParam._m0[27u].z, fma(_1110, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1109)) - _1080;
        float _1123 = fma(_1111, cbModelParam._m0[28u].z, fma(_1110, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1109)) - _1084;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1076 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1080 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[34u].z) + ((((((_1084 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1179 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1145.x + (-0.5));
        float _1181 = _1179 * (_1145.y + (-0.5));
        float _1182 = _1179 * (_1145.z + (-0.5));
        float _1189 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1152.x + (-0.5));
        float _1191 = _1189 * (_1152.y + (-0.5));
        float _1192 = _1189 * (_1152.z + (-0.5));
        float _1199 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1159.x + (-0.5));
        float _1201 = _1199 * (_1159.y + (-0.5));
        float _1202 = _1199 * (_1159.z + (-0.5));
        float _1209 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1166.x + (-0.5));
        float _1211 = _1209 * (_1166.y + (-0.5));
        float _1212 = _1209 * (_1166.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1233 = (dot(vec3(_791, _792, _793), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1243 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4259 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1245 + 1.0))) + _1250) * _1213;
        float _1260 = _1181 * 0.5;
        float _1261 = _1191 * 0.5;
        float _1262 = _1201 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_791, _792, _793), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _4292 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1287 + 1.0))) + _1292) * _1214;
        float _1302 = _1182 * 0.5;
        float _1303 = _1192 * 0.5;
        float _1304 = _1202 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_791, _792, _793), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _4325 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1329 + 1.0))) + _1334) * _1215;
        _1351 = _1182;
        _1353 = _1181;
        _1354 = _1180;
        _1355 = _1192;
        _1356 = _1191;
        _1357 = _1190;
        _1358 = _1202;
        _1359 = _1201;
        _1360 = _1200;
        _1361 = _1215;
        _1362 = _1214;
        _1363 = _1213;
        _1364 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
    }
    else
    {
        _1351 = _1352;
        _1353 = _1352;
        _1354 = _1352;
        _1355 = _1352;
        _1356 = _1352;
        _1357 = _1352;
        _1358 = _1352;
        _1359 = _1352;
        _1360 = _1352;
        _1361 = _1352;
        _1362 = _1352;
        _1363 = _1352;
        _1364 = 0.0;
        _1365 = 0.0;
        _1366 = 0.0;
    }
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1394 = fma(_1022, cbModelParam._m0[30u].z, fma(_1018, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1014));
        float _1398 = fma(_1022, cbModelParam._m0[31u].z, fma(_1018, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1014));
        float _1402 = fma(_1022, cbModelParam._m0[32u].z, fma(_1018, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1014));
        float _1425 = _1014 + _791;
        float _1426 = _1018 + _792;
        float _1427 = _1022 + _793;
        float _1437 = fma(_1427, cbModelParam._m0[30u].z, fma(_1426, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1425)) - _1394;
        float _1438 = fma(_1427, cbModelParam._m0[31u].z, fma(_1426, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1425)) - _1398;
        float _1439 = fma(_1427, cbModelParam._m0[32u].z, fma(_1426, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1425)) - _1402;
        float _1443 = inversesqrt(dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439)));
        float _1456 = ((_1443 * _1437) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1394 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1443 * _1438) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1398 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1443 * _1439) / cbModelParam._m0[35u].z) + ((((((_1402 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1456, _1457, _1458), 0.0);
        float _1493 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1460.x + (-0.5));
        float _1495 = _1493 * (_1460.y + (-0.5));
        float _1496 = _1493 * (_1460.z + (-0.5));
        float _1503 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1467.x + (-0.5));
        float _1505 = _1503 * (_1467.y + (-0.5));
        float _1506 = _1503 * (_1467.z + (-0.5));
        float _1513 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1474.x + (-0.5));
        float _1515 = _1513 * (_1474.y + (-0.5));
        float _1516 = _1513 * (_1474.z + (-0.5));
        float _1523 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1481.x + (-0.5));
        float _1525 = _1523 * (_1481.y + (-0.5));
        float _1526 = _1523 * (_1481.z + (-0.5));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = _1494 * 0.5;
        float _1531 = _1504 * 0.5;
        float _1532 = _1514 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_791, _792, _793), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4388 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1557 + 1.0))) + _1562) * _1527;
        float _1572 = _1495 * 0.5;
        float _1573 = _1505 * 0.5;
        float _1574 = _1515 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_791, _792, _793), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4421 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1599 + 1.0))) + _1604) * _1528;
        float _1614 = _1496 * 0.5;
        float _1615 = _1506 * 0.5;
        float _1616 = _1516 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_791, _792, _793), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4454 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1641 + 1.0))) + _1646) * _1529;
        _1663 = _1496;
        _1664 = _1495;
        _1665 = _1494;
        _1666 = _1506;
        _1667 = _1505;
        _1668 = _1504;
        _1669 = _1516;
        _1670 = _1515;
        _1671 = _1514;
        _1672 = _1529;
        _1673 = _1528;
        _1674 = _1527;
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
    }
    else
    {
        _1663 = _1352;
        _1664 = _1352;
        _1665 = _1352;
        _1666 = _1352;
        _1667 = _1352;
        _1668 = _1352;
        _1669 = _1352;
        _1670 = _1352;
        _1671 = _1352;
        _1672 = _1352;
        _1673 = _1352;
        _1674 = _1352;
        _1675 = 0.0;
        _1676 = 0.0;
        _1677 = 0.0;
    }
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1364)) + _1364;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1365)) + _1365;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1366)) + _1366;
    float _1710 = fma(_1689, cbSceneParam._m0[89u].z, fma(_1688, cbSceneParam._m0[89u].y, _1687 * cbSceneParam._m0[89u].x));
    float _1713 = fma(_1689, cbSceneParam._m0[90u].z, fma(_1688, cbSceneParam._m0[90u].y, _1687 * cbSceneParam._m0[90u].x));
    float _1716 = fma(_1689, cbSceneParam._m0[91u].z, fma(_1688, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1687));
    float _1731 = _961 * 0.5;
    float _1732 = _962 * 0.5;
    float _1733 = _963 * 0.5;
    float _1734 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1737 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1740 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1774;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1747 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1351, _1355, _1358, _1361));
        float _1751 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1353, _1356, _1359, _1362));
        float _1755 = dot(vec4(_1731, _1732, _1733, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1762 = dot(vec4(cbModelParam._m0[39u]), vec4(_1731, _1732, _1733, 1.0));
        _1774 = dot(vec3(isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1762) ? 0.0 : (isnan(0.0) ? _1762 : max(0.0, _1762))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1774 = 1.0;
    }
    float _1785;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1776 = dot(vec4(cbModelParam._m0[40u]), vec4(_1731, _1732, _1733, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1789 = (_1785 * cbModelParam._m0[1u].x) + (_1774 * (1.0 - cbModelParam._m0[1u].x));
    float _1799 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _794);
    float _1800 = isnan(_1799) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1799 : min(cbModelParam._m0[25u].z, _1799));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1847 = fma(_1022, cbModelParam._m0[13u].z, fma(_1018, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1014)) + cbModelParam._m0[13u].w;
        float _1851 = fma(_1022, cbModelParam._m0[14u].z, fma(_1018, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1014)) + cbModelParam._m0[14u].w;
        float _1855 = fma(_1022, cbModelParam._m0[15u].z, fma(_1018, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1014)) + cbModelParam._m0[15u].w;
        float _1858 = fma(_963, cbModelParam._m0[13u].z, fma(_962, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961));
        float _1861 = fma(_963, cbModelParam._m0[14u].z, fma(_962, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961));
        float _1864 = fma(_963, cbModelParam._m0[15u].z, fma(_962, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961));
        float _1892;
        if (_1858 > 0.0)
        {
            _1892 = abs((1.0 - _1847) / _1858);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1847 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1892 = frontier_phi_17_15_ladder;
        }
        float _2061;
        if (_1861 > 0.0)
        {
            _2061 = abs((1.0 - _1851) / _1861);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1851 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2061 = frontier_phi_26_22_ladder;
        }
        float _2356;
        if (_1864 > 0.0)
        {
            _2356 = abs((1.0 - _1855) / _1864);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1855 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2356 = frontier_phi_38_33_ladder;
        }
        float _2358 = isnan(_2061) ? _1892 : (isnan(_1892) ? _2061 : min(_1892, _2061));
        float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
        float _2363 = (_2359 * _1858) + _1847;
        float _2364 = (_2359 * _1861) + _1851;
        float _2365 = (_2359 * _1864) + _1855;
        float _2366 = _2359 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2366;
        float _2370 = _2366 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 > _2370) || ((_2364 < _2368) || ((_2363 < _2368) || (_2363 > _2370))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2510 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2365, cbModelParam._m0[9u].z, fma(_2364, cbModelParam._m0[9u].y, _2363 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2365, cbModelParam._m0[10u].z, fma(_2364, cbModelParam._m0[10u].y, _2363 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2365, cbModelParam._m0[11u].z, fma(_2364, cbModelParam._m0[11u].y, _2363 * cbModelParam._m0[11u].x))), _1800);
            frontier_phi_16_38_ladder = _2510.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2510.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2510.x * cbModelParam._m0[1u].y;
        }
        _1880 = frontier_phi_16_38_ladder_2;
        _1882 = frontier_phi_16_38_ladder_1;
        _1884 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1868 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_961, _962, _963), _1800);
        _1880 = _1868.x * cbModelParam._m0[1u].y;
        _1882 = _1868.y * cbModelParam._m0[1u].y;
        _1884 = _1868.z * cbModelParam._m0[1u].y;
    }
    float _1888 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _794);
    float _1889 = isnan(_1888) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1888 : min(cbModelParam._m0[25u].w, _1888));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1942 = fma(_1022, cbModelParam._m0[21u].z, fma(_1018, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1014)) + cbModelParam._m0[21u].w;
        float _1946 = fma(_1022, cbModelParam._m0[22u].z, fma(_1018, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1014)) + cbModelParam._m0[22u].w;
        float _1950 = fma(_1022, cbModelParam._m0[23u].z, fma(_1018, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1014)) + cbModelParam._m0[23u].w;
        float _1953 = fma(_963, cbModelParam._m0[21u].z, fma(_962, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961));
        float _1956 = fma(_963, cbModelParam._m0[22u].z, fma(_962, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961));
        float _1959 = fma(_963, cbModelParam._m0[23u].z, fma(_962, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961));
        float _2066;
        if (_1953 > 0.0)
        {
            _2066 = abs((1.0 - _1942) / _1953);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1942 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2066 = frontier_phi_28_24_ladder;
        }
        float _2383;
        if (_1956 > 0.0)
        {
            _2383 = abs((1.0 - _1946) / _1956);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1946 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2383 = frontier_phi_40_35_ladder;
        }
        float _2710;
        if (_1959 > 0.0)
        {
            _2710 = abs((1.0 - _1950) / _1959);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1950 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2710 = frontier_phi_50_47_ladder;
        }
        float _2712 = isnan(_2383) ? _2066 : (isnan(_2066) ? _2383 : min(_2066, _2383));
        float _2713 = isnan(_2710) ? _2712 : (isnan(_2712) ? _2710 : min(_2712, _2710));
        float _2717 = (_2713 * _1953) + _1942;
        float _2718 = (_2713 * _1956) + _1946;
        float _2719 = (_2713 * _1959) + _1950;
        float _2720 = _2713 * 9.9999997473787516355514526367188e-05;
        float _2721 = (-1.0) - _2720;
        float _2723 = _2720 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2719 > _2723) || ((_2719 < _2721) || ((_2718 > _2723) || ((_2718 < _2721) || ((_2717 < _2721) || (_2717 > _2723))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2719, cbModelParam._m0[17u].z, fma(_2718, cbModelParam._m0[17u].y, _2717 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2719, cbModelParam._m0[18u].z, fma(_2718, cbModelParam._m0[18u].y, _2717 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2719, cbModelParam._m0[19u].z, fma(_2718, cbModelParam._m0[19u].y, _2717 * cbModelParam._m0[19u].x))), _1889);
            frontier_phi_25_50_ladder = _2837.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2837.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2837.x * cbModelParam._m0[1u].z;
        }
        _1978 = frontier_phi_25_50_ladder_2;
        _1980 = frontier_phi_25_50_ladder_1;
        _1982 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_961, _962, _963), _1889);
        _1978 = _1962.x * cbModelParam._m0[1u].z;
        _1980 = _1962.y * cbModelParam._m0[1u].z;
        _1982 = _1962.z * cbModelParam._m0[1u].z;
    }
    float _1994 = ((((1.0 - _982) * ((_969 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_982 * _969)) * _953;
    float _1995 = _1994 * ((cbModelParam._m0[1u].w * (_1978 - _1880)) + _1880);
    float _1996 = _1994 * ((cbModelParam._m0[1u].w * (_1980 - _1882)) + _1882);
    float _1997 = _1994 * ((cbModelParam._m0[1u].w * (_1982 - _1884)) + _1884);
    float _2000 = fma(_1997, cbSceneParam._m0[89u].z, fma(_1996, cbSceneParam._m0[89u].y, _1995 * cbSceneParam._m0[89u].x));
    float _2003 = fma(_1997, cbSceneParam._m0[90u].z, fma(_1996, cbSceneParam._m0[90u].y, _1995 * cbSceneParam._m0[90u].x));
    float _2006 = fma(_1997, cbSceneParam._m0[91u].z, fma(_1996, cbSceneParam._m0[91u].y, _1995 * cbSceneParam._m0[91u].x));
    float _2040 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2044 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2048 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2052 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2053 = _2040 / _2052;
    float _2054 = _2044 / _2052;
    float _2055 = _2048 / _2052;
    float _2202;
    float _2203;
    float _2204;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2082 = ((uint(_2055 > cbSceneParam._m0[59u].y) + uint(_2055 > cbSceneParam._m0[59u].x)) + uint(_2055 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2083 = _2082 + 43u;
        uint _2091 = _2082 + 44u;
        uint _2099 = _2082 + 45u;
        uint _2107 = _2082 + 46u;
        float _2118 = fma(_2052, cbSceneParam._m0[_2083].w, fma(_2048, cbSceneParam._m0[_2083].z, fma(_2044, cbSceneParam._m0[_2083].y, _2040 * cbSceneParam._m0[_2083].x)));
        float _2122 = fma(_2052, cbSceneParam._m0[_2091].w, fma(_2048, cbSceneParam._m0[_2091].z, fma(_2044, cbSceneParam._m0[_2091].y, _2040 * cbSceneParam._m0[_2091].x)));
        float _2130 = fma(_2052, cbSceneParam._m0[_2107].w, fma(_2048, cbSceneParam._m0[_2107].z, fma(_2044, cbSceneParam._m0[_2107].y, _2040 * cbSceneParam._m0[_2107].x)));
        float _2135 = cbSceneParam._m0[33u].z * _2130;
        float _2137 = cbSceneParam._m0[33u].w * _2130;
        float _2140 = fma(_2052, cbSceneParam._m0[_2099].w, fma(_2048, cbSceneParam._m0[_2099].z, fma(_2044, cbSceneParam._m0[_2099].y, _2040 * cbSceneParam._m0[_2099].x))) / _2130;
        float _2188 = (cbSceneParam._m0[33u].x - sqrt(((_2054 * _2054) + (_2053 * _2053)) + (_2055 * _2055))) * cbSceneParam._m0[33u].y;
        float _4580 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
        float _2195 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2135 + _2118) / _2130, (_2137 + _2122) / _2130), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2137 + _2118) / _2130, (_2122 - _2135) / _2130), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 - _2135) / _2130, (_2122 - _2137) / _2130), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 - _2137) / _2130, (_2135 + _2122) / _2130), _2140), 0.0)).x), vec4(0.25)));
        _2202 = 1.0 - (_2195 * cbSceneParam._m0[34u].x);
        _2203 = 1.0 - (_2195 * cbSceneParam._m0[34u].y);
        _2204 = 1.0 - (_2195 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2202 = 1.0;
        _2203 = 1.0;
        _2204 = 1.0;
    }
    float _2268;
    float _2270;
    float _2272;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2256 = fma(_2052, cbSceneParam._m0[63u].w, fma(_2048, cbSceneParam._m0[63u].z, fma(_2044, cbSceneParam._m0[63u].y, _2040 * cbSceneParam._m0[63u].x)));
        float _2257 = fma(_2052, cbSceneParam._m0[60u].w, fma(_2048, cbSceneParam._m0[60u].z, fma(_2044, cbSceneParam._m0[60u].y, _2040 * cbSceneParam._m0[60u].x))) / _2256;
        float _2258 = fma(_2052, cbSceneParam._m0[61u].w, fma(_2048, cbSceneParam._m0[61u].z, fma(_2044, cbSceneParam._m0[61u].y, _2040 * cbSceneParam._m0[61u].x))) / _2256;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2257 >= cbSceneParam._m0[64u].x) && (_2258 >= cbSceneParam._m0[64u].y)) && (_2257 <= cbSceneParam._m0[64u].z)) && (_2258 <= cbSceneParam._m0[64u].w))
        {
            float _2396 = fma(_2052, cbSceneParam._m0[62u].w, fma(_2048, cbSceneParam._m0[62u].z, fma(_2044, cbSceneParam._m0[62u].y, _2040 * cbSceneParam._m0[62u].x))) / _2256;
            float _2400 = isnan(cbSceneParam._m0[41u].w) ? _2396 : (isnan(_2396) ? cbSceneParam._m0[41u].w : max(_2396, cbSceneParam._m0[41u].w));
            float _2443 = (cbSceneParam._m0[33u].x - sqrt(((_2054 * _2054) + (_2053 * _2053)) + (_2055 * _2055))) * cbSceneParam._m0[33u].y;
            float _4596 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
            float _2450 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2257, cbSceneParam._m0[33u].w + _2258), _2400), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2257, _2258 - cbSceneParam._m0[33u].z), _2400), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2257 - cbSceneParam._m0[33u].z, _2258 - cbSceneParam._m0[33u].w), _2400), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2257 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2258), _2400), 0.0)).x), vec4(0.25)));
            float _2454 = 1.0 - (_2450 * cbSceneParam._m0[34u].x);
            float _2455 = 1.0 - (_2450 * cbSceneParam._m0[34u].y);
            float _2456 = 1.0 - (_2450 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2456) ? _2204 : (isnan(_2204) ? _2456 : min(_2204, _2456));
            frontier_phi_37_36_ladder_1 = isnan(_2455) ? _2203 : (isnan(_2203) ? _2455 : min(_2203, _2455));
            frontier_phi_37_36_ladder_2 = isnan(_2454) ? _2202 : (isnan(_2202) ? _2454 : min(_2202, _2454));
        }
        else
        {
            frontier_phi_37_36_ladder = _2204;
            frontier_phi_37_36_ladder_1 = _2203;
            frontier_phi_37_36_ladder_2 = _2202;
        }
        _2268 = frontier_phi_37_36_ladder_2;
        _2270 = frontier_phi_37_36_ladder_1;
        _2272 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2268 = _2202;
        _2270 = _2203;
        _2272 = _2204;
    }
    uvec4 _2277 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2279 = _2277.x * 14u;
    uint _2280 = _2279 + 13u;
    float _2287 = _953 + (-1.0);
    float _2292 = (cbLight._m0[_2280].x * _2287) + 1.0;
    float _2293 = (cbLight._m0[_2280].y * _2287) + 1.0;
    float _2294 = (cbLight._m0[_2280].z * _2287) + 1.0;
    float _2295 = (cbLight._m0[_2280].w * _2287) + 1.0;
    uint _2296 = _2279 + 5u;
    float _2302 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    uint _2306 = _2279 + 4u;
    float _2315 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
    uint _2319 = _2279 | 1u;
    float _2330 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_791, _792, _793));
    float _2333 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_791, _792, _793));
    float _4632 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _4643 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2338 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * 0.3183098733425140380859375;
    float _2340 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * 0.3183098733425140380859375;
    float _2347 = ((cbLight._m0[_2296].x * _2302) * _2340) + (((cbLight._m0[_2306].x * _2268) * _2315) * _2338);
    float _2348 = ((_2302 * cbLight._m0[_2296].y) * _2340) + (((cbLight._m0[_2306].y * _2270) * _2315) * _2338);
    float _2349 = ((_2302 * cbLight._m0[_2296].z) * _2340) + (((cbLight._m0[_2306].z * _2272) * _2315) * _2338);
    uvec4 _2353 = floatBitsToUint(cbLight._m0[_2279 + 12u]);
    bool _2355 = _2353.x == 0u;
    float _2457;
    float _2459;
    float _2461;
    if (_2355)
    {
        _2457 = _2347;
        _2459 = _2348;
        _2461 = _2349;
    }
    else
    {
        uint _2465 = _2279 + 6u;
        float _2481 = (dot(vec3(cbLight._m0[_2279 + 2u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2482 = _2481 * _2481;
        float _4654 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
        float _2483 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2484 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2457 = (((cbLight._m0[_2465].x * 0.3183098733425140380859375) * _2483) * _2484) + _2347;
        _2459 = (((cbLight._m0[_2465].y * 0.3183098733425140380859375) * _2483) * _2484) + _2348;
        _2461 = (((cbLight._m0[_2465].z * 0.3183098733425140380859375) * _2483) * _2484) + _2349;
    }
    bool _2464 = _2353.y == 0u;
    float _2519;
    float _2521;
    float _2523;
    if (_2464)
    {
        _2519 = _2457;
        _2521 = _2459;
        _2523 = _2461;
    }
    else
    {
        uint _2681 = _2279 + 7u;
        float _2697 = (dot(vec3(cbLight._m0[_2279 + 3u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2698 = _2697 * _2697;
        float _4670 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2699 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2700 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2519 = (((cbLight._m0[_2681].x * 0.3183098733425140380859375) * _2699) * _2700) + _2457;
        _2521 = (((cbLight._m0[_2681].y * 0.3183098733425140380859375) * _2699) * _2700) + _2459;
        _2523 = (((cbLight._m0[_2681].z * 0.3183098733425140380859375) * _2699) * _2700) + _2461;
    }
    uint _2526 = _2279 + 8u;
    float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _794) * 0.949999988079071044921875);
    float _2540 = _2539 * _2539;
    float _2541 = cbLight._m0[_2279].x + _870;
    float _2542 = cbLight._m0[_2279].y + _871;
    float _2543 = cbLight._m0[_2279].z + _872;
    float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
    float _2548 = _2547 * _2541;
    float _2549 = _2547 * _2542;
    float _2550 = _2547 * _2543;
    float _2551 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2279].xyz));
    float _4686 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _4697 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _2555 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    float _2556 = dot(vec3(_791, _792, _793), vec3(_2548, _2549, _2550));
    float _4708 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
    float _2559 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _2560 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2548, _2549, _2550));
    float _4719 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
    float _2564 = _2540 * _2540;
    float _2568 = ((_2559 * _2559) * (_2564 + (-1.0))) + 1.0;
    float _2579 = (exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2580 = 1.0 - _2540;
    float _2591 = (0.5 / (((_2555 * ((_2554 * _2580) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2580) + _2540) * _2554))) * _2554;
    float _4730 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2593 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2564 / ((_2568 * _2568) * 3.141590118408203125));
    uint _2607 = _2279 + 9u;
    float _2618 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _794) * 0.949999988079071044921875);
    float _2619 = _2618 * _2618;
    float _2620 = cbLight._m0[_2319].x + _870;
    float _2621 = cbLight._m0[_2319].y + _871;
    float _2622 = cbLight._m0[_2319].z + _872;
    float _2626 = inversesqrt(dot(vec3(_2620, _2621, _2622), vec3(_2620, _2621, _2622)));
    float _2627 = _2626 * _2620;
    float _2628 = _2626 * _2621;
    float _2629 = _2626 * _2622;
    float _2630 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2319].xyz));
    float _4741 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2633 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2634 = dot(vec3(_791, _792, _793), vec3(_2627, _2628, _2629));
    float _4752 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2637 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
    float _2638 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2627, _2628, _2629));
    float _4763 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
    float _2642 = _2619 * _2619;
    float _2646 = ((_2637 * _2637) * (_2642 + (-1.0))) + 1.0;
    float _2655 = (exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2656 = 1.0 - _2619;
    float _2666 = (0.5 / (((_2555 * ((_2633 * _2656) + _2619)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2656) + _2619) * _2633))) * _2633;
    float _4774 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2668 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2642 / ((_2646 * _2646) * 3.141590118408203125));
    float _2678 = (((_2655 * cbLight._m0[_2607].x) * _2668) * _2302) + ((((cbLight._m0[_2526].x * _2268) * _2579) * _2593) * _2315);
    float _2679 = (((_2655 * cbLight._m0[_2607].y) * _2668) * _2302) + ((((cbLight._m0[_2526].y * _2270) * _2579) * _2593) * _2315);
    float _2680 = (((_2655 * cbLight._m0[_2607].z) * _2668) * _2302) + ((((cbLight._m0[_2526].z * _2272) * _2579) * _2593) * _2315);
    float _2736;
    float _2738;
    float _2740;
    if (_2355)
    {
        _2736 = _2678;
        _2738 = _2679;
        _2740 = _2680;
    }
    else
    {
        uint _2742 = _2279 + 2u;
        uint _2746 = _2279 + 10u;
        float _2760 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2742].w)) * _794) * 0.949999988079071044921875);
        float _2761 = _2760 * _2760;
        float _2762 = cbLight._m0[_2742].x + _870;
        float _2763 = cbLight._m0[_2742].y + _871;
        float _2764 = cbLight._m0[_2742].z + _872;
        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
        float _2769 = _2768 * _2762;
        float _2770 = _2768 * _2763;
        float _2771 = _2768 * _2764;
        float _2772 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2742].xyz));
        float _4785 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
        float _2775 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2776 = dot(vec3(_791, _792, _793), vec3(_2769, _2770, _2771));
        float _4796 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2779 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
        float _2780 = dot(vec3(cbLight._m0[_2742].xyz), vec3(_2769, _2770, _2771));
        float _4807 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2784 = _2761 * _2761;
        float _2788 = ((_2779 * _2779) * (_2784 + (-1.0))) + 1.0;
        float _2797 = (exp2(log2(1.0 - (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2798 = 1.0 - _2761;
        float _2808 = (0.5 / (((_2555 * ((_2775 * _2798) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2798) + _2761) * _2775))) * _2775;
        float _4818 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2810 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2784 / ((_2788 * _2788) * 3.141590118408203125));
        float _2811 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2736 = (((_2797 * cbLight._m0[_2746].x) * _2810) * _2811) + _2678;
        _2738 = (((_2797 * cbLight._m0[_2746].y) * _2810) * _2811) + _2679;
        _2740 = (((_2797 * cbLight._m0[_2746].z) * _2810) * _2811) + _2680;
    }
    float _2842;
    float _2844;
    float _2846;
    if (_2464)
    {
        _2842 = _2736;
        _2844 = _2738;
        _2846 = _2740;
    }
    else
    {
        uint _2853 = _2279 + 3u;
        uint _2857 = _2279 + 11u;
        float _2871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2853].w)) * _794) * 0.949999988079071044921875);
        float _2872 = _2871 * _2871;
        float _2873 = cbLight._m0[_2853].x + _870;
        float _2874 = cbLight._m0[_2853].y + _871;
        float _2875 = cbLight._m0[_2853].z + _872;
        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
        float _2880 = _2879 * _2873;
        float _2881 = _2879 * _2874;
        float _2882 = _2879 * _2875;
        float _2883 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2853].xyz));
        float _4834 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        float _2886 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2887 = dot(vec3(_791, _792, _793), vec3(_2880, _2881, _2882));
        float _4845 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
        float _2890 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2891 = dot(vec3(cbLight._m0[_2853].xyz), vec3(_2880, _2881, _2882));
        float _4856 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2895 = _2872 * _2872;
        float _2899 = ((_2890 * _2890) * (_2895 + (-1.0))) + 1.0;
        float _2908 = (exp2(log2(1.0 - (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2909 = 1.0 - _2872;
        float _2919 = (0.5 / (((_2555 * ((_2886 * _2909) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2555 * _2909) + _2872) * _2886))) * _2886;
        float _4867 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2921 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2895 / ((_2899 * _2899) * 3.141590118408203125));
        float _2922 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2842 = (((_2908 * cbLight._m0[_2857].x) * _2921) * _2922) + _2736;
        _2844 = (((_2908 * cbLight._m0[_2857].y) * _2921) * _2922) + _2738;
        _2846 = (((_2908 * cbLight._m0[_2857].z) * _2921) * _2922) + _2740;
    }
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    if (_2277.y == 0u)
    {
        uvec4 _2943 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2944 = _2943.x;
        uint _2955 = uint((float(_2943.y) * floor(float(uint(cbSceneParam._m0[85u].y * _891) / _2944))) + floor(float(uint(cbSceneParam._m0[85u].x * _890) / _2944)));
        float _2965 = (log2(_2055 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2966 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        uint _2969 = uint(isnan(14.0) ? _2966 : (isnan(_2966) ? 14.0 : min(_2966, 14.0)));
        uvec4 _2974 = texelFetch(g_lightClusterGridBuffer, int(((_2969 << 2u) + (_2955 << 6u)) >> 2u));
        uint _2975 = _2974.x;
        uint _2976 = _2943.z;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        if (((((1u << ((_2976 >> 4u) & 15u)) + 4294967295u) & _2975) == 0u) || ((_2976 & 240u) == 0u))
        {
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
        }
        else
        {
            float _3056;
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            uint _3213 = 0u;
            uint _3222;
            bool _3223;
            for (;;)
            {
                _3222 = texelFetch(g_lightClassification, int((((_2969 << 5u) + (_2955 << 9u)) + (_3213 << 2u)) >> 2u)).x;
                _3223 = _3222 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3223)
                {
                    frontier_phi_71_pred = _3212;
                    frontier_phi_71_pred_1 = _3211;
                    frontier_phi_71_pred_2 = _3210;
                    frontier_phi_71_pred_3 = _3209;
                    frontier_phi_71_pred_4 = _3208;
                    frontier_phi_71_pred_5 = _3207;
                }
                else
                {
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    uint _3358;
                    _3352 = _3207;
                    _3353 = _3208;
                    _3354 = _3209;
                    _3355 = _3210;
                    _3356 = _3211;
                    _3357 = _3212;
                    _3358 = _3222;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    for (;;)
                    {
                        uint _3362 = uint(findLSB(_3358)) + (_3213 << 5u);
                        uint _3359 = (_3358 + 4294967295u) & _3358;
                        uint _3364 = _3362 * 48u;
                        vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3364)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3364 + 3u)).x));
                        uint _3384 = (_3362 * 48u) + 4u;
                        vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3384)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3384 + 3u)).x));
                        uint _3403 = (_3362 * 48u) + 8u;
                        vec3 _3414 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3403)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3403 + 2u)).x));
                        float _3418 = _3378.x - _2053;
                        float _3419 = _3378.y - _2054;
                        float _3420 = _3378.z - _2055;
                        float _3421 = dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420));
                        float _3424 = inversesqrt(_3421);
                        float _3425 = _3424 * _3418;
                        float _3426 = _3424 * _3419;
                        float _3427 = _3424 * _3420;
                        float _3428 = dot(vec3(_909, _912, _915), vec3(_3425, _3426, _3427));
                        float _3433 = 1.0 - (_3421 * _3378.w);
                        float _4893 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3434 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3435 = sqrt(_3421) * _3397.w;
                        float _3438 = 1.39999997615814208984375 / (_3435 + 1.39999997615814208984375);
                        float _3439 = _3438 * _3438;
                        float _3442 = ((1.0 - _3439) * _3428) + _3439;
                        float _3445 = _3435 * _3435;
                        float _3449 = ((isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0))) * _3434) / ((_3445 * 0.699999988079071044921875) + 1.0);
                        float _3453 = (-0.0) - _2053;
                        float _3454 = (-0.0) - _2054;
                        float _3455 = (-0.0) - _2055;
                        float _3459 = inversesqrt(dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455)));
                        float _3460 = _3459 * _3453;
                        float _3461 = _3459 * _3454;
                        float _3462 = _3459 * _3455;
                        float _3469 = exp2(log2(1.0 / ((_3445 * 3.5) + 5.0)) * 0.25);
                        float _3470 = 1.0 - _969;
                        float _3477 = sqrt(1.0 - ((1.0 - (_3470 * _3470)) * (1.0 - (_3469 * _3469))));
                        float _3478 = _3477 * _3477;
                        float _3479 = _3478 * _3478;
                        float _3480 = _3460 + _3425;
                        float _3481 = _3461 + _3426;
                        float _3482 = _3462 + _3427;
                        float _3486 = inversesqrt(dot(vec3(_3480, _3481, _3482), vec3(_3480, _3481, _3482)));
                        float _3490 = dot(vec3(_909, _912, _915), vec3(_3460, _3461, _3462));
                        float _4909 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                        float _3493 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3494 = dot(vec3(_909, _912, _915), vec3(_3486 * _3480, _3486 * _3481, _3486 * _3482));
                        float _4920 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3497 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                        float _3501 = ((_3497 * _3497) * (_3479 + (-1.0))) + 1.0;
                        float _3502 = _3438 * _3478;
                        float _3503 = _3502 * _3502;
                        float _3506 = ((1.0 - _3503) * _3428) + _3503;
                        float _4931 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                        float _3507 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                        float _3508 = 1.0 - _3478;
                        float _3518 = (0.5 / (((_3507 * ((_3493 * _3508) + _3478)) + 9.9999999392252902907785028219223e-09) + (((_3507 * _3508) + _3478) * _3493))) * _3507;
                        float _4942 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3529 = (((_3479 * 3.1415927410125732421875) * (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) / ((_3501 * _3501) * ((_3445 * 2.1991131305694580078125) + 3.141590118408203125))) * _3434;
                        _3282 = (_3449 * _3397.x) + _3355;
                        _3283 = (_3449 * _3397.y) + _3356;
                        _3284 = (_3449 * _3397.z) + _3357;
                        _3279 = (_3529 * _3414.x) + _3352;
                        _3280 = (_3529 * _3414.y) + _3353;
                        _3281 = (_3529 * _3414.z) + _3354;
                        if (_3359 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3352 = _3279;
                            _3353 = _3280;
                            _3354 = _3281;
                            _3355 = _3282;
                            _3356 = _3283;
                            _3357 = _3284;
                            _3358 = _3359;
                        }
                    }
                    frontier_phi_71_pred = _3284;
                    frontier_phi_71_pred_1 = _3283;
                    frontier_phi_71_pred_2 = _3282;
                    frontier_phi_71_pred_3 = _3281;
                    frontier_phi_71_pred_4 = _3280;
                    frontier_phi_71_pred_5 = _3279;
                }
                _3066 = frontier_phi_71_pred;
                _3064 = frontier_phi_71_pred_1;
                _3062 = frontier_phi_71_pred_2;
                _3060 = frontier_phi_71_pred_3;
                _3058 = frontier_phi_71_pred_4;
                _3056 = frontier_phi_71_pred_5;
                uint _3214 = _3213 + 1u;
                if (_3214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3207 = _3056;
                    _3208 = _3058;
                    _3209 = _3060;
                    _3210 = _3062;
                    _3211 = _3064;
                    _3212 = _3066;
                    _3213 = _3214;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
        }
        uvec4 _3069 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3070 = _3069.z;
        uint _3072 = (_3070 >> 8u) & 15u;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        if (((4294967295u << _3072) & _2975) == 0u)
        {
            _3175 = _3055;
            _3177 = _3057;
            _3179 = _3059;
            _3181 = _3061;
            _3183 = _3063;
            _3185 = _3065;
        }
        else
        {
            float _3200 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
            float _3201 = _3200 * _2053;
            float _3202 = _3200 * _2054;
            float _3203 = _3200 * _2055;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3072 < ((_3070 >> 12u) & 15u))
            {
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3335 = _3055;
                float _3336 = _3057;
                float _3337 = _3059;
                float _3338 = _3061;
                float _3339 = _3063;
                float _3340 = _3065;
                uint _3341 = _3072;
                uint _3350;
                bool _3351;
                for (;;)
                {
                    _3350 = texelFetch(g_lightClassification, int((((_2969 << 5u) + (_2955 << 9u)) + (_3341 << 2u)) >> 2u)).x;
                    _3351 = _3350 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3351)
                    {
                        frontier_phi_82_pred = _3340;
                        frontier_phi_82_pred_1 = _3339;
                        frontier_phi_82_pred_2 = _3338;
                        frontier_phi_82_pred_3 = _3337;
                        frontier_phi_82_pred_4 = _3336;
                        frontier_phi_82_pred_5 = _3335;
                    }
                    else
                    {
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3841;
                        float _3556 = _3335;
                        float _3557 = _3336;
                        float _3558 = _3337;
                        float _3559 = _3338;
                        float _3560 = _3339;
                        float _3561 = _3340;
                        uint _3562 = _3350;
                        uint _3563;
                        vec4 _3588;
                        float _3589;
                        vec4 _3604;
                        vec3 _3616;
                        vec4 _3631;
                        vec4 _3646;
                        float _3692;
                        bool _3693;
                        for (;;)
                        {
                            uint _3573 = ((_3341 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3562));
                            _3563 = (_3562 + 4294967295u) & _3562;
                            uint _3575 = _3573 * 40u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            _3589 = _3588.w;
                            uint _3591 = (_3573 * 40u) + 4u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3606 = (_3573 * 40u) + 8u;
                            _3616 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x));
                            uint _3618 = (_3573 * 40u) + 16u;
                            _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            uint _3633 = (_3573 * 40u) + 20u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3648 = (_3573 * 40u) + 24u;
                            vec4 _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3667 = (_3573 * 40u) + 28u;
                            vec4 _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            _3692 = fma(_2055, _3680.z, fma(_2054, _3680.y, _3680.x * _2053)) + _3680.w;
                            _3693 = !((fma(_2055, _3661.z, fma(_2054, _3661.y, _3661.x * _2053)) + _3661.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3693)
                            {
                                float _3720 = _3588.x - _2053;
                                float _3721 = _3588.y - _2054;
                                float _3722 = _3588.z - _2055;
                                float _3723 = dot(vec3(_3720, _3721, _3722), vec3(_3720, _3721, _3722));
                                float _3726 = inversesqrt(_3723);
                                float _3727 = _3726 * _3720;
                                float _3728 = _3726 * _3721;
                                float _3729 = _3726 * _3722;
                                float _3733 = 1.0 - (_3723 / (_3589 * _3589));
                                float _4953 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3734 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3738 = sqrt(_3723) * _3604.w;
                                float _3740 = 1.39999997615814208984375 / (_3738 + 1.39999997615814208984375);
                                float _3741 = _3740 * _3740;
                                float _3744 = ((1.0 - _3741) * dot(vec3(_3727, _3728, _3729), vec3(_909, _912, _915))) + _3741;
                                float _3747 = _3738 * _3738;
                                float _3751 = (fma(_2055, _3631.z, fma(_2054, _3631.y, _3631.x * _2053)) + _3631.w) / _3692;
                                float _3752 = (fma(_2055, _3646.z, fma(_2054, _3646.y, _3646.x * _2053)) + _3646.w) / _3692;
                                float _3756 = 1.0 - dot(vec2(_3751, _3752), vec2(_3751, _3752));
                                float _4969 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3757 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3758 = _3757 * (((isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0))) * _3734) / ((_3747 * 0.699999988079071044921875) + 1.0));
                                float _3770 = exp2(log2(1.0 / ((_3747 * 3.5) + 5.0)) * 0.25);
                                float _3771 = 1.0 - _969;
                                float _3778 = sqrt(1.0 - ((1.0 - (_3771 * _3771)) * (1.0 - (_3770 * _3770))));
                                float _3779 = _3778 * _3778;
                                float _3780 = _3779 * _3779;
                                float _3781 = _3727 - _3201;
                                float _3782 = _3728 - _3202;
                                float _3783 = _3729 - _3203;
                                float _3787 = inversesqrt(dot(vec3(_3781, _3782, _3783), vec3(_3781, _3782, _3783)));
                                float _3791 = dot(vec3(_909, _912, _915), vec3((-0.0) - _3201, (-0.0) - _3202, (-0.0) - _3203));
                                float _4980 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3794 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3795 = dot(vec3(_909, _912, _915), vec3(_3787 * _3781, _3787 * _3782, _3787 * _3783));
                                float _4991 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                                float _3798 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3802 = ((_3798 * _3798) * (_3780 + (-1.0))) + 1.0;
                                float _3803 = _3740 * _3779;
                                float _3804 = _3803 * _3803;
                                float _3810 = ((1.0 - _3804) * dot(vec3(_909, _912, _915), vec3(_3727, _3728, _3729))) + _3804;
                                float _5002 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3811 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                                float _3812 = 1.0 - _3779;
                                float _3822 = (0.5 / (((_3811 * ((_3794 * _3812) + _3779)) + 9.9999999392252902907785028219223e-09) + (((_3811 * _3812) + _3779) * _3794))) * _3811;
                                float _5013 = isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0));
                                float _3832 = (_3757 * _3734) * (((_3780 * 3.1415927410125732421875) * (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) / ((_3802 * _3802) * ((_3747 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3758 * _3604.z;
                                frontier_phi_88_pred_1 = _3758 * _3604.y;
                                frontier_phi_88_pred_2 = _3758 * _3604.x;
                                frontier_phi_88_pred_3 = _3832 * _3616.z;
                                frontier_phi_88_pred_4 = _3832 * _3616.y;
                                frontier_phi_88_pred_5 = _3832 * _3616.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3841 = frontier_phi_88_pred;
                            _3840 = frontier_phi_88_pred_1;
                            _3839 = frontier_phi_88_pred_2;
                            _3838 = frontier_phi_88_pred_3;
                            _3837 = frontier_phi_88_pred_4;
                            _3836 = frontier_phi_88_pred_5;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            _3548 = _3841 + _3561;
                            _3543 = _3836 + _3556;
                            _3544 = _3837 + _3557;
                            _3545 = _3838 + _3558;
                            if (_3563 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3563;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3548;
                        frontier_phi_82_pred_1 = _3547;
                        frontier_phi_82_pred_2 = _3546;
                        frontier_phi_82_pred_3 = _3545;
                        frontier_phi_82_pred_4 = _3544;
                        frontier_phi_82_pred_5 = _3543;
                    }
                    _3186 = frontier_phi_82_pred;
                    _3184 = frontier_phi_82_pred_1;
                    _3182 = frontier_phi_82_pred_2;
                    _3180 = frontier_phi_82_pred_3;
                    _3178 = frontier_phi_82_pred_4;
                    _3176 = frontier_phi_82_pred_5;
                    uint _3342 = _3341 + 1u;
                    if (_3342 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3335 = _3176;
                        _3336 = _3178;
                        _3337 = _3180;
                        _3338 = _3182;
                        _3339 = _3184;
                        _3340 = _3186;
                        _3341 = _3342;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3182;
                frontier_phi_63_64_ladder_1 = _3186;
                frontier_phi_63_64_ladder_2 = _3184;
                frontier_phi_63_64_ladder_3 = _3180;
                frontier_phi_63_64_ladder_4 = _3178;
                frontier_phi_63_64_ladder_5 = _3176;
            }
            else
            {
                frontier_phi_63_64_ladder = _3061;
                frontier_phi_63_64_ladder_1 = _3065;
                frontier_phi_63_64_ladder_2 = _3063;
                frontier_phi_63_64_ladder_3 = _3059;
                frontier_phi_63_64_ladder_4 = _3057;
                frontier_phi_63_64_ladder_5 = _3055;
            }
            _3175 = frontier_phi_63_64_ladder_5;
            _3177 = frontier_phi_63_64_ladder_4;
            _3179 = frontier_phi_63_64_ladder_3;
            _3181 = frontier_phi_63_64_ladder;
            _3183 = frontier_phi_63_64_ladder_2;
            _3185 = frontier_phi_63_64_ladder_1;
        }
        float _3190 = isnan(1.0) ? _953 : (isnan(_953) ? 1.0 : min(_953, 1.0));
        _2988 = (_3190 * _3181) + _2519;
        _2990 = (_3190 * _3183) + _2521;
        _2992 = (_3190 * _3185) + _2523;
        _2994 = ((_3175 * 0.039999999105930328369140625) * _3190) + _2842;
        _2996 = ((_3177 * 0.039999999105930328369140625) * _3190) + _2844;
        _2998 = ((_3179 * 0.039999999105930328369140625) * _3190) + _2846;
    }
    else
    {
        _2988 = _2519;
        _2990 = _2521;
        _2992 = _2523;
        _2994 = _2842;
        _2996 = _2844;
        _2998 = _2846;
    }
    float _5029 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _5040 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _5051 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _3015 = ((isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_2988 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _953))) + ((_2994 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1789)) * cbPerFrame._m0[3u].x);
    float _3016 = ((isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0))) * (_2990 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _953))) + ((_2996 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1789)) * cbPerFrame._m0[3u].x);
    float _3017 = ((isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0))) * (_2992 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _953))) + ((_2998 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1789)) * cbPerFrame._m0[3u].x);
    uint _3018 = _259 + 6u;
    float _3026 = _890 / cbSceneParam._m0[86u].x;
    float _3027 = _891 / cbSceneParam._m0[86u].y;
    vec4 _3041 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, (log2((isnan(cbSceneParam._m0[77u].w) ? _812 : (isnan(_812) ? cbSceneParam._m0[77u].w : min(_812, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3043 = _3041.x;
    float _3044 = _3041.y;
    float _3045 = _3041.z;
    float _3046 = _3041.w;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    if (_812 > cbSceneParam._m0[78u].w)
    {
        float _3080 = isnan(_812) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _812 : min(cbSceneParam._m0[80u].w, _812));
        float _3081 = _3080 / _812;
        float _3092 = _3081 * _863;
        float _3093 = _864 * _3081;
        float _3094 = (-0.0) - _3093;
        float _3095 = _3081 * _865;
        float _3097 = (cbSceneParam._m0[77u].w * _3094) / _3080;
        float _3098 = _3097 + cbSceneParam._m0[79u].w;
        float _3099 = cbSceneParam._m0[79u].w - _3093;
        float _3105 = sqrt(((_3092 * _3092) + (_3093 * _3093)) + (_3095 * _3095));
        float _3108 = (1.0 - (cbSceneParam._m0[77u].w / _3080)) * _3105;
        float _3113 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3115 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3292;
        if (abs((_3094 - _3097) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3292 = ((((_3098 > 0.0) ? exp2(_3113 * _3098) : (2.0 - exp2(_3115 * _3098))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3108;
        }
        else
        {
            float _3236 = 1.0 / cbSceneParam._m0[80u].x;
            float _3237 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : max(_3098, _3099));
            float _3238 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : min(_3098, _3099));
            float _3247 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : min(_3237, 0.0));
            float _3248 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : min(_3238, 0.0));
            _3292 = ((abs(_3105 / _3094) * cbSceneParam._m0[80u].y) * ((((_3247 - _3248) * 2.0) - ((exp2(_3113 * (isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0)))) - exp2(_3113 * (isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0))))) * _3236)) - ((exp2(_3115 * _3247) - exp2(_3115 * _3248)) * _3236))) + (_3108 * cbSceneParam._m0[80u].z);
        }
        vec4 _3294 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3026, _3027, 1.0), 0.0);
        float _3303 = exp2((_3292 * (-1.44269502162933349609375)) * (1.0 - _3294.w));
        float _3304 = log2(_3303);
        float _3320 = log2(_3046);
        _3117 = (exp2(_3320 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3304 * cbSceneParam._m0[78u].x)) * _3294.x) / cbSceneParam._m0[78u].x)) + _3043;
        _3119 = (exp2(_3320 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3304 * cbSceneParam._m0[78u].y)) * _3294.y) / cbSceneParam._m0[78u].y)) + _3044;
        _3121 = (exp2(_3320 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3304 * cbSceneParam._m0[78u].z)) * _3294.z) / cbSceneParam._m0[78u].z)) + _3045;
        _3123 = _3303 * _3046;
    }
    else
    {
        _3117 = _3043;
        _3119 = _3044;
        _3121 = _3045;
        _3123 = _3046;
    }
    bool _3330;
    vec4 _3133;
    vec4 _3155;
    float _3157;
    float _3161;
    float _3162;
    float _3163;
    float _3164;
    bool _3174;
    for (;;)
    {
        _3133 = cbMatDynParam._m0[0u];
        float _3135 = roundEven(_3133.y);
        bool _3136 = _3135 == 3.0;
        float _3137 = log2(_3123);
        float _3144 = exp2(_3137 * cbSceneParam._m0[78u].x) * _3015;
        float _3145 = exp2(_3137 * cbSceneParam._m0[78u].y) * _3016;
        float _3146 = exp2(_3137 * cbSceneParam._m0[78u].z) * _3017;
        float _3153 = _879 + (-0.5);
        _3155 = cbMtdParam._m0[1u];
        _3157 = _3155.y * _3153;
        float _3160 = (_3135 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3161 = _3160 * (_3136 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3117)));
        _3162 = _3160 * (_3136 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3119)));
        _3163 = _3160 * (_3136 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3121)));
        _3164 = _3153 * 0.999000012874603271484375;
        _3174 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3174)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _3164) < 0.5)
            {
                _3330 = true;
                break;
            }
        }
        uint _3271 = _928 + uint(_3133.w);
        if ((cbInstanceData._m0[_3271].w < 1.0) && ((cbInstanceData._m0[_3271].w + _3164) < 0.5))
        {
            _3330 = true;
            break;
        }
        if ((_3157 + 1.0) < _3155.x)
        {
            _3330 = true;
            break;
        }
        _3330 = false;
        break;
    }
    float _3534;
    if (_3330)
    {
        discard_state = true;
        _3534 = 0.0;
    }
    else
    {
        _3534 = cbInstanceData._m0[_3018].w;
    }
    SV_Target.x = _3161;
    SV_Target.y = _3162;
    SV_Target.z = _3163;
    SV_Target.w = _3534;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3018].w;
    discard_exit();
}


