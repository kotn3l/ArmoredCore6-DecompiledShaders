#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1281;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    uint _245 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _245 + 1u;
    uint _254 = _245 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_245].x * cbInstanceData._m0[_245].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _362 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _362) * cbMtdParam._m0[24u].x) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3585 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _387 = (_380 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _388 = (_380 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _389 = (_380 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _445 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _447 = _445.x;
    float _448 = _445.y;
    float _449 = _445.z;
    float _458 = ((_428.z - _449) * _380) + _449;
    float _461 = ((((_428.x - _447) * _380) + _447) * 2.0) + (-1.0);
    float _463 = ((((_428.y - _448) * _380) + _448) * 2.0) + (-1.0);
    float _464 = dot(vec2(_461, _463), vec2(_461, _463));
    float _3596 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _469 = sqrt(1.0 - (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))));
    vec4 _485 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _497 = (((_485.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _461;
    float _498 = (((_485.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _463;
    float _501 = fma(_469, _233, fma(_498, _240, _497 * _226));
    float _504 = fma(_469, _234, fma(_498, _241, _497 * _227));
    float _507 = fma(_469, _235, fma(_498, _242, _497 * _228));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    vec4 _540 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _542 = _540.x;
    float _543 = 1.0 - _542;
    float _547 = ((_542 - _543) * cbMtdParam._m0[24u].z) + _543;
    float _549 = (cbMtdParam._m0[19u].x + dot(vec4(_511 * _501, _511 * _504, _511 * _507, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_547 * cbMtdParam._m0[21u].z);
    float _3607 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _550 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _552 = (-0.0) - cbMtdParam._m0[24u].y;
    float _554 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _555 = isnan(1.0) ? _554 : (isnan(_554) ? 1.0 : min(_554, 1.0));
    float _562 = _550 - ((_550 * TEXCOORD_8.x) * _555);
    float _563 = _550 - ((_550 * TEXCOORD_8.y) * _555);
    float _564 = _550 - ((_550 * TEXCOORD_8.z) * _555);
    float _571 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _575 = ((isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : min(_571, 0.0))) * TEXCOORD_8.x) + TEXCOORD_14.x;
    float _583 = (_575 - (((_547 + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _575))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3638 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _588 = ((_562 * ((_408.x * cbMtdParam._m0[18u].x) - _387)) * _584) + _387;
    float _589 = ((_563 * ((_408.y * cbMtdParam._m0[18u].y) - _388)) * _584) + _388;
    float _590 = ((_564 * ((_408.z * cbMtdParam._m0[18u].z) - _389)) * _584) + _389;
    vec4 _602 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _264) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _265) + cbTextureTilingScale._m0[19u].w));
    float _604 = _602.x;
    float _605 = 1.0 - _604;
    float _632 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_604 - _605) * cbMtdParam._m0[24u].w) + _605) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3649 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _641 = ((((cbMtdParam._m0[10u].x - _588) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _633) + _588;
    float _642 = ((((cbMtdParam._m0[10u].y - _589) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _633) + _589;
    float _643 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _590)) * _633) + _590;
    float _647 = (cbMtdParam._m0[19u].w * (_485.z - _458)) + _458;
    vec4 _661 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _668 = (_661.x * 2.0) + (-1.0);
    float _669 = (_661.y * 2.0) + (-1.0);
    float _670 = dot(vec2(_668, _669), vec2(_668, _669));
    float _3660 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _679 = (((_661.z - _647) * _562) * _584) + _647;
    float _682 = ((cbMtdParam._m0[23u].y - _679) * _633) + _679;
    vec4 _701 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _264) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _265) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _707 = (_701.x * 2.0) + (-1.0);
    float _708 = (_701.y * 2.0) + (-1.0);
    float _709 = dot(vec2(_707, _708), vec2(_707, _708));
    float _3671 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _729 = (((cbMtdParam._m0[21u].x * _497) + ((_668 - _497) * _562)) * _584) + _497;
    float _730 = (((cbMtdParam._m0[21u].x * _498) + ((_669 - _498) * _563)) * _584) + _498;
    float _731 = (((sqrt(1.0 - (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0)))) - _469) * _564) * _584) + _469;
    float _742 = (((_707 - _729) + (_729 * cbMtdParam._m0[22u].z)) * _633) + _729;
    float _743 = (((_708 - _730) + (_730 * cbMtdParam._m0[22u].z)) * _633) + _730;
    float _744 = ((sqrt(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0)))) - _731) * _633) + _731;
    float _746 = cbMtdParam._m0[22u].x + _485.w;
    float _749 = fma(_744, _233, fma(_743, _240, _742 * _226));
    float _752 = fma(_744, _234, fma(_743, _241, _742 * _227));
    float _755 = fma(_744, _235, fma(_743, _242, _742 * _228));
    float _759 = inversesqrt(dot(vec3(_749, _752, _755), vec3(_749, _752, _755)));
    float _760 = _759 * _749;
    float _761 = _759 * _752;
    float _762 = _759 * _755;
    float _3682 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _763 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _3693 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _3704 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3715 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _3726 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _781 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _832 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _822);
    float _833 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _822);
    float _834 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _822);
    float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
    float _839 = _832 * _838;
    float _840 = _833 * _838;
    float _841 = _834 * _838;
    float _847 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _848 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _866 = fma(_762, cbSceneParam._m0[5u].z, fma(_761, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _760));
    float _869 = fma(_762, cbSceneParam._m0[6u].z, fma(_761, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _760));
    float _872 = fma(_762, cbSceneParam._m0[7u].z, fma(_761, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _760));
    uint _886 = (_245 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _892 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * cbInstanceData._m0[_886].x;
    float _893 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_886].y;
    float _894 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_886].z;
    float _3737 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    vec4 _906 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _847, cbSceneParam._m0[86u].y * _848));
    float _910 = ((isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * TEXCOORD_5.w) * _906.x;
    float _911 = dot(vec3(_760, _761, _762), vec3(_839, _840, _841));
    float _914 = _911 * 2.0;
    float _918 = (_914 * _760) - _839;
    float _919 = (_914 * _761) - _840;
    float _920 = (_914 * _762) - _841;
    float _924 = abs(dot(vec3(_839, _840, _841), vec3(_760, _761, _762)));
    float _3770 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _926 = sqrt(_763);
    float _939 = exp2((_926 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_926 * 3.0));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1280;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1005 = fma(_979, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971));
        float _1009 = fma(_979, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971));
        float _1013 = fma(_979, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971));
        float _1038 = _971 + _760;
        float _1039 = _975 + _761;
        float _1040 = _979 + _762;
        float _1050 = fma(_1040, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038)) - _1005;
        float _1051 = fma(_1040, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038)) - _1009;
        float _1052 = fma(_1040, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038)) - _1013;
        float _1056 = inversesqrt(dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052)));
        float _1069 = ((_1056 * _1050) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1005 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1056 * _1051) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1009 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1056 * _1052) / cbModelParam._m0[34u].z) + ((((((_1013 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1069, _1070, _1071), 0.0);
        float _1108 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1074.x + (-0.5));
        float _1110 = _1108 * (_1074.y + (-0.5));
        float _1111 = _1108 * (_1074.z + (-0.5));
        float _1118 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1081.x + (-0.5));
        float _1120 = _1118 * (_1081.y + (-0.5));
        float _1121 = _1118 * (_1081.z + (-0.5));
        float _1128 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1088.x + (-0.5));
        float _1130 = _1128 * (_1088.y + (-0.5));
        float _1131 = _1128 * (_1088.z + (-0.5));
        float _1138 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1095.x + (-0.5));
        float _1140 = _1138 * (_1095.y + (-0.5));
        float _1141 = _1138 * (_1095.z + (-0.5));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = _1109 * 0.5;
        float _1146 = _1119 * 0.5;
        float _1147 = _1129 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1162 = (dot(vec3(_760, _761, _762), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1172 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1173 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1174 = _1173 * 2.0;
        float _1178 = (1.0 - _1173) / (_1173 + 1.0);
        float _3818 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1188 = ((((1.0 - _1179) * (_1174 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1174 + 1.0))) + _1179) * _1142;
        float _1189 = _1110 * 0.5;
        float _1190 = _1120 * 0.5;
        float _1191 = _1130 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(_760, _761, _762), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3851 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1216 + 1.0))) + _1221) * _1143;
        float _1231 = _1111 * 0.5;
        float _1232 = _1121 * 0.5;
        float _1233 = _1131 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_760, _761, _762), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3884 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1258 + 1.0))) + _1263) * _1144;
        _1280 = _1111;
        _1282 = _1110;
        _1283 = _1109;
        _1284 = _1121;
        _1285 = _1120;
        _1286 = _1119;
        _1287 = _1131;
        _1288 = _1130;
        _1289 = _1129;
        _1290 = _1144;
        _1291 = _1143;
        _1292 = _1142;
        _1293 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)));
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
    }
    else
    {
        _1280 = _1281;
        _1282 = _1281;
        _1283 = _1281;
        _1284 = _1281;
        _1285 = _1281;
        _1286 = _1281;
        _1287 = _1281;
        _1288 = _1281;
        _1289 = _1281;
        _1290 = _1281;
        _1291 = _1281;
        _1292 = _1281;
        _1293 = 0.0;
        _1294 = 0.0;
        _1295 = 0.0;
    }
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1320 = fma(_979, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _971));
        float _1324 = fma(_979, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _971));
        float _1328 = fma(_979, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _971));
        float _1351 = _971 + _760;
        float _1352 = _975 + _761;
        float _1353 = _979 + _762;
        float _1363 = fma(_1353, cbModelParam._m0[30u].z, fma(_1352, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1351)) - _1320;
        float _1364 = fma(_1353, cbModelParam._m0[31u].z, fma(_1352, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1351)) - _1324;
        float _1365 = fma(_1353, cbModelParam._m0[32u].z, fma(_1352, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1351)) - _1328;
        float _1369 = inversesqrt(dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365)));
        float _1382 = ((_1369 * _1363) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1320 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1369 * _1364) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1324 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1369 * _1365) / cbModelParam._m0[35u].z) + ((((((_1328 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        float _1419 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1386.x + (-0.5));
        float _1421 = _1419 * (_1386.y + (-0.5));
        float _1422 = _1419 * (_1386.z + (-0.5));
        float _1429 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1393.x + (-0.5));
        float _1431 = _1429 * (_1393.y + (-0.5));
        float _1432 = _1429 * (_1393.z + (-0.5));
        float _1439 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1400.x + (-0.5));
        float _1441 = _1439 * (_1400.y + (-0.5));
        float _1442 = _1439 * (_1400.z + (-0.5));
        float _1449 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1407.x + (-0.5));
        float _1451 = _1449 * (_1407.y + (-0.5));
        float _1452 = _1449 * (_1407.z + (-0.5));
        float _1453 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1454 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = _1420 * 0.5;
        float _1457 = _1430 * 0.5;
        float _1458 = _1440 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_760, _761, _762), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _3925 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1453 + 9.9999997473787516355514526367188e-06);
        float _3936 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _3947 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1483 + 1.0))) + _1488) * _1453;
        float _1498 = _1421 * 0.5;
        float _1499 = _1431 * 0.5;
        float _1500 = _1441 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_760, _761, _762), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _3958 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1454 + 9.9999997473787516355514526367188e-06);
        float _3969 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _3980 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1525 + 1.0))) + _1530) * _1454;
        float _1540 = _1422 * 0.5;
        float _1541 = _1432 * 0.5;
        float _1542 = _1442 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_760, _761, _762), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4013 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1567 + 1.0))) + _1572) * _1455;
        _1589 = _1422;
        _1590 = _1421;
        _1591 = _1420;
        _1592 = _1432;
        _1593 = _1431;
        _1594 = _1430;
        _1595 = _1442;
        _1596 = _1441;
        _1597 = _1440;
        _1598 = _1455;
        _1599 = _1454;
        _1600 = _1453;
        _1601 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1602 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
    }
    else
    {
        _1589 = _1281;
        _1590 = _1281;
        _1591 = _1281;
        _1592 = _1281;
        _1593 = _1281;
        _1594 = _1281;
        _1595 = _1281;
        _1596 = _1281;
        _1597 = _1281;
        _1598 = _1281;
        _1599 = _1281;
        _1600 = _1281;
        _1601 = 0.0;
        _1602 = 0.0;
        _1603 = 0.0;
    }
    float _1613 = (cbModelParam._m0[1u].x * (_1601 - _1293)) + _1293;
    float _1614 = (cbModelParam._m0[1u].x * (_1602 - _1294)) + _1294;
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1295)) + _1295;
    float _1636 = fma(_1615, cbSceneParam._m0[89u].z, fma(_1614, cbSceneParam._m0[89u].y, _1613 * cbSceneParam._m0[89u].x));
    float _1639 = fma(_1615, cbSceneParam._m0[90u].z, fma(_1614, cbSceneParam._m0[90u].y, _1613 * cbSceneParam._m0[90u].x));
    float _1642 = fma(_1615, cbSceneParam._m0[91u].z, fma(_1614, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1613));
    float _1657 = _918 * 0.5;
    float _1658 = _919 * 0.5;
    float _1659 = _920 * 0.5;
    float _1660 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1663 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1590, _1593, _1596, _1599));
    float _1666 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1589, _1592, _1595, _1598));
    float _1700;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1673 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1280, _1284, _1287, _1290));
        float _1677 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1282, _1285, _1288, _1291));
        float _1681 = dot(vec4(_1657, _1658, _1659, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1688 = dot(vec4(cbModelParam._m0[39u]), vec4(_1657, _1658, _1659, 1.0));
        _1700 = dot(vec3(isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1700 = 1.0;
    }
    float _1711;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1702 = dot(vec4(cbModelParam._m0[40u]), vec4(_1657, _1658, _1659, 1.0));
        _1711 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1711 = 1.0;
    }
    float _1715 = (_1711 * cbModelParam._m0[1u].x) + (_1700 * (1.0 - cbModelParam._m0[1u].x));
    float _1725 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _763);
    float _1726 = isnan(_1725) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1725 : min(cbModelParam._m0[25u].z, _1725));
    float _1806;
    float _1808;
    float _1810;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1773 = fma(_979, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971)) + cbModelParam._m0[13u].w;
        float _1777 = fma(_979, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971)) + cbModelParam._m0[14u].w;
        float _1781 = fma(_979, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971)) + cbModelParam._m0[15u].w;
        float _1784 = fma(_920, cbModelParam._m0[13u].z, fma(_919, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918));
        float _1787 = fma(_920, cbModelParam._m0[14u].z, fma(_919, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918));
        float _1790 = fma(_920, cbModelParam._m0[15u].z, fma(_919, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918));
        float _1818;
        if (_1784 > 0.0)
        {
            _1818 = abs((1.0 - _1773) / _1784);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1773 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1818 = frontier_phi_14_12_ladder;
        }
        float _2018;
        if (_1787 > 0.0)
        {
            _2018 = abs((1.0 - _1777) / _1787);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1777 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2018 = frontier_phi_23_19_ladder;
        }
        float _2261;
        if (_1790 > 0.0)
        {
            _2261 = abs((1.0 - _1781) / _1790);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1781 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2261 = frontier_phi_35_30_ladder;
        }
        float _2263 = isnan(_2018) ? _1818 : (isnan(_1818) ? _2018 : min(_1818, _2018));
        float _2264 = isnan(_2261) ? _2263 : (isnan(_2263) ? _2261 : min(_2263, _2261));
        float _2268 = (_2264 * _1784) + _1773;
        float _2269 = (_2264 * _1787) + _1777;
        float _2270 = (_2264 * _1790) + _1781;
        float _2271 = _2264 * 9.9999997473787516355514526367188e-05;
        float _2273 = (-1.0) - _2271;
        float _2275 = _2271 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2270 > _2275) || ((_2270 < _2273) || ((_2269 > _2275) || ((_2269 < _2273) || ((_2268 < _2273) || (_2268 > _2275))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2270, cbModelParam._m0[9u].z, fma(_2269, cbModelParam._m0[9u].y, _2268 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2270, cbModelParam._m0[10u].z, fma(_2269, cbModelParam._m0[10u].y, _2268 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2270, cbModelParam._m0[11u].z, fma(_2269, cbModelParam._m0[11u].y, _2268 * cbModelParam._m0[11u].x))), _1726);
            frontier_phi_13_35_ladder = _2394.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2394.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2394.x * cbModelParam._m0[1u].y;
        }
        _1806 = frontier_phi_13_35_ladder_2;
        _1808 = frontier_phi_13_35_ladder_1;
        _1810 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_918, _919, _920), _1726);
        _1806 = _1794.x * cbModelParam._m0[1u].y;
        _1808 = _1794.y * cbModelParam._m0[1u].y;
        _1810 = _1794.z * cbModelParam._m0[1u].y;
    }
    float _1814 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _763);
    float _1815 = isnan(_1814) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1814 : min(cbModelParam._m0[25u].w, _1814));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1868 = fma(_979, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971)) + cbModelParam._m0[21u].w;
        float _1872 = fma(_979, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971)) + cbModelParam._m0[22u].w;
        float _1876 = fma(_979, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971)) + cbModelParam._m0[23u].w;
        float _1879 = fma(_920, cbModelParam._m0[21u].z, fma(_919, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918));
        float _1882 = fma(_920, cbModelParam._m0[22u].z, fma(_919, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918));
        float _1885 = fma(_920, cbModelParam._m0[23u].z, fma(_919, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918));
        float _2023;
        if (_1879 > 0.0)
        {
            _2023 = abs((1.0 - _1868) / _1879);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1868 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2023 = frontier_phi_25_21_ladder;
        }
        float _2288;
        if (_1882 > 0.0)
        {
            _2288 = abs((1.0 - _1872) / _1882);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1872 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2288 = frontier_phi_37_32_ladder;
        }
        float _2493;
        if (_1885 > 0.0)
        {
            _2493 = abs((1.0 - _1876) / _1885);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1876 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2493 = frontier_phi_46_43_ladder;
        }
        float _2495 = isnan(_2288) ? _2023 : (isnan(_2023) ? _2288 : min(_2023, _2288));
        float _2496 = isnan(_2493) ? _2495 : (isnan(_2495) ? _2493 : min(_2495, _2493));
        float _2500 = (_2496 * _1879) + _1868;
        float _2501 = (_2496 * _1882) + _1872;
        float _2502 = (_2496 * _1885) + _1876;
        float _2503 = _2496 * 9.9999997473787516355514526367188e-05;
        float _2504 = (-1.0) - _2503;
        float _2506 = _2503 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2502 > _2506) || ((_2502 < _2504) || ((_2501 > _2506) || ((_2501 < _2504) || ((_2500 < _2504) || (_2500 > _2506))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2701 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2502, cbModelParam._m0[17u].z, fma(_2501, cbModelParam._m0[17u].y, _2500 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2502, cbModelParam._m0[18u].z, fma(_2501, cbModelParam._m0[18u].y, _2500 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2502, cbModelParam._m0[19u].z, fma(_2501, cbModelParam._m0[19u].y, _2500 * cbModelParam._m0[19u].x))), _1815);
            frontier_phi_22_46_ladder = _2701.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2701.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2701.x * cbModelParam._m0[1u].z;
        }
        _1904 = frontier_phi_22_46_ladder_2;
        _1906 = frontier_phi_22_46_ladder_1;
        _1908 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_918, _919, _920), _1815);
        _1904 = _1888.x * cbModelParam._m0[1u].z;
        _1906 = _1888.y * cbModelParam._m0[1u].z;
        _1908 = _1888.z * cbModelParam._m0[1u].z;
    }
    float _1920 = ((((1.0 - _939) * ((_926 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_939 * _926)) * _910;
    float _1921 = _1920 * ((cbModelParam._m0[1u].w * (_1904 - _1806)) + _1806);
    float _1922 = _1920 * ((cbModelParam._m0[1u].w * (_1906 - _1808)) + _1808);
    float _1923 = _1920 * ((cbModelParam._m0[1u].w * (_1908 - _1810)) + _1810);
    float _1926 = fma(_1923, cbSceneParam._m0[89u].z, fma(_1922, cbSceneParam._m0[89u].y, _1921 * cbSceneParam._m0[89u].x));
    float _1929 = fma(_1923, cbSceneParam._m0[90u].z, fma(_1922, cbSceneParam._m0[90u].y, _1921 * cbSceneParam._m0[90u].x));
    float _1932 = fma(_1923, cbSceneParam._m0[91u].z, fma(_1922, cbSceneParam._m0[91u].y, _1921 * cbSceneParam._m0[91u].x));
    uvec4 _1942 = floatBitsToUint(cbInstanceData._m0[_245 + 5u]);
    uint _1944 = _1942.x * 14u;
    uint _1945 = _1944 + 13u;
    float _1952 = _910 + (-1.0);
    float _1957 = (cbLight._m0[_1945].x * _1952) + 1.0;
    float _1958 = (cbLight._m0[_1945].y * _1952) + 1.0;
    float _1959 = (cbLight._m0[_1945].z * _1952) + 1.0;
    float _1960 = (cbLight._m0[_1945].w * _1952) + 1.0;
    uint _1961 = _1944 + 5u;
    float _1967 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
    uint _1971 = _1944 + 4u;
    float _1977 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
    uint _1981 = _1944 | 1u;
    float _1992 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_760, _761, _762));
    float _1995 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_760, _761, _762));
    float _4149 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _4160 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _2000 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.3183098733425140380859375;
    float _2002 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * 0.3183098733425140380859375;
    float _2009 = ((cbLight._m0[_1961].x * _1967) * _2002) + ((cbLight._m0[_1971].x * _1977) * _2000);
    float _2010 = ((_1967 * cbLight._m0[_1961].y) * _2002) + ((_1977 * cbLight._m0[_1971].y) * _2000);
    float _2011 = ((_1967 * cbLight._m0[_1961].z) * _2002) + ((_1977 * cbLight._m0[_1971].z) * _2000);
    uvec4 _2015 = floatBitsToUint(cbLight._m0[_1944 + 12u]);
    bool _2017 = _2015.x == 0u;
    float _2028;
    float _2030;
    float _2032;
    if (_2017)
    {
        _2028 = _2009;
        _2030 = _2010;
        _2032 = _2011;
    }
    else
    {
        uint _2036 = _1944 + 6u;
        float _2052 = (dot(vec3(cbLight._m0[_1944 + 2u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2053 = _2052 * _2052;
        float _4171 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2054 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2055 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2028 = (((cbLight._m0[_2036].x * 0.3183098733425140380859375) * _2054) * _2055) + _2009;
        _2030 = (((cbLight._m0[_2036].y * 0.3183098733425140380859375) * _2054) * _2055) + _2010;
        _2032 = (((cbLight._m0[_2036].z * 0.3183098733425140380859375) * _2054) * _2055) + _2011;
    }
    bool _2035 = _2015.y == 0u;
    float _2073;
    float _2075;
    float _2077;
    if (_2035)
    {
        _2073 = _2028;
        _2075 = _2030;
        _2077 = _2032;
    }
    else
    {
        uint _2232 = _1944 + 7u;
        float _2248 = (dot(vec3(cbLight._m0[_1944 + 3u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2249 = _2248 * _2248;
        float _4187 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _2251 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2073 = (((cbLight._m0[_2232].x * 0.3183098733425140380859375) * _2250) * _2251) + _2028;
        _2075 = (((cbLight._m0[_2232].y * 0.3183098733425140380859375) * _2250) * _2251) + _2030;
        _2077 = (((cbLight._m0[_2232].z * 0.3183098733425140380859375) * _2250) * _2251) + _2032;
    }
    uint _2080 = _1944 + 8u;
    float _2093 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1944].w)) * _763) * 0.949999988079071044921875);
    float _2094 = _2093 * _2093;
    float _2095 = cbLight._m0[_1944].x + _839;
    float _2096 = cbLight._m0[_1944].y + _840;
    float _2097 = cbLight._m0[_1944].z + _841;
    float _2101 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
    float _2102 = _2101 * _2095;
    float _2103 = _2101 * _2096;
    float _2104 = _2101 * _2097;
    float _2105 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_1944].xyz));
    float _4203 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2108 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _4214 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _2109 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _2110 = dot(vec3(_760, _761, _762), vec3(_2102, _2103, _2104));
    float _4225 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _2114 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_2102, _2103, _2104));
    float _4236 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2118 = _2094 * _2094;
    float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
    float _2133 = (exp2(log2(1.0 - (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2134 = 1.0 - _2094;
    float _2145 = (0.5 / (((_2109 * ((_2108 * _2134) + _2094)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2134) + _2094) * _2108))) * _2108;
    float _4247 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2147 = (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
    uint _2158 = _1944 + 9u;
    float _2169 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _763) * 0.949999988079071044921875);
    float _2170 = _2169 * _2169;
    float _2171 = cbLight._m0[_1981].x + _839;
    float _2172 = cbLight._m0[_1981].y + _840;
    float _2173 = cbLight._m0[_1981].z + _841;
    float _2177 = inversesqrt(dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173)));
    float _2178 = _2177 * _2171;
    float _2179 = _2177 * _2172;
    float _2180 = _2177 * _2173;
    float _2181 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_1981].xyz));
    float _4258 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2184 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _2185 = dot(vec3(_760, _761, _762), vec3(_2178, _2179, _2180));
    float _4269 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2189 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2178, _2179, _2180));
    float _4280 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2193 = _2170 * _2170;
    float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
    float _2206 = (exp2(log2(1.0 - (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2207 = 1.0 - _2170;
    float _2217 = (0.5 / (((_2109 * ((_2184 * _2207) + _2170)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2207) + _2170) * _2184))) * _2184;
    float _4291 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2219 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
    float _2229 = (((_2206 * cbLight._m0[_2158].x) * _2219) * _1967) + (((_2133 * cbLight._m0[_2080].x) * _2147) * _1977);
    float _2230 = (((_2206 * cbLight._m0[_2158].y) * _2219) * _1967) + (((_2133 * cbLight._m0[_2080].y) * _2147) * _1977);
    float _2231 = (((_2206 * cbLight._m0[_2158].z) * _2219) * _1967) + (((_2133 * cbLight._m0[_2080].z) * _2147) * _1977);
    float _2293;
    float _2295;
    float _2297;
    if (_2017)
    {
        _2293 = _2229;
        _2295 = _2230;
        _2297 = _2231;
    }
    else
    {
        uint _2299 = _1944 + 2u;
        uint _2303 = _1944 + 10u;
        float _2317 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _763) * 0.949999988079071044921875);
        float _2318 = _2317 * _2317;
        float _2319 = cbLight._m0[_2299].x + _839;
        float _2320 = cbLight._m0[_2299].y + _840;
        float _2321 = cbLight._m0[_2299].z + _841;
        float _2325 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
        float _2326 = _2325 * _2319;
        float _2327 = _2325 * _2320;
        float _2328 = _2325 * _2321;
        float _2329 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2299].xyz));
        float _4302 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2332 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2333 = dot(vec3(_760, _761, _762), vec3(_2326, _2327, _2328));
        float _4313 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
        float _2336 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2337 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2326, _2327, _2328));
        float _4324 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2341 = _2318 * _2318;
        float _2345 = ((_2336 * _2336) * (_2341 + (-1.0))) + 1.0;
        float _2354 = (exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2355 = 1.0 - _2318;
        float _2365 = (0.5 / (((_2109 * ((_2332 * _2355) + _2318)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2355) + _2318) * _2332))) * _2332;
        float _4335 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2367 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2341 / ((_2345 * _2345) * 3.141590118408203125));
        float _2368 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
        _2293 = (((_2354 * cbLight._m0[_2303].x) * _2367) * _2368) + _2229;
        _2295 = (((_2354 * cbLight._m0[_2303].y) * _2367) * _2368) + _2230;
        _2297 = (((_2354 * cbLight._m0[_2303].z) * _2367) * _2368) + _2231;
    }
    float _2403;
    float _2405;
    float _2407;
    if (_2035)
    {
        _2403 = _2293;
        _2405 = _2295;
        _2407 = _2297;
    }
    else
    {
        uint _2414 = _1944 + 3u;
        uint _2418 = _1944 + 11u;
        float _2432 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2414].w)) * _763) * 0.949999988079071044921875);
        float _2433 = _2432 * _2432;
        float _2434 = cbLight._m0[_2414].x + _839;
        float _2435 = cbLight._m0[_2414].y + _840;
        float _2436 = cbLight._m0[_2414].z + _841;
        float _2440 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
        float _2441 = _2440 * _2434;
        float _2442 = _2440 * _2435;
        float _2443 = _2440 * _2436;
        float _2444 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2414].xyz));
        float _4351 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2447 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2448 = dot(vec3(_760, _761, _762), vec3(_2441, _2442, _2443));
        float _4362 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2451 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2452 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_2441, _2442, _2443));
        float _4373 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2456 = _2433 * _2433;
        float _2460 = ((_2451 * _2451) * (_2456 + (-1.0))) + 1.0;
        float _2469 = (exp2(log2(1.0 - (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2470 = 1.0 - _2433;
        float _2480 = (0.5 / (((_2109 * ((_2447 * _2470) + _2433)) + 9.9999999392252902907785028219223e-09) + (((_2109 * _2470) + _2433) * _2447))) * _2447;
        float _4384 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2482 = (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))) * (_2456 / ((_2460 * _2460) * 3.141590118408203125));
        float _2483 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2403 = (((_2469 * cbLight._m0[_2418].x) * _2482) * _2483) + _2293;
        _2405 = (((_2469 * cbLight._m0[_2418].y) * _2482) * _2483) + _2295;
        _2407 = (((_2469 * cbLight._m0[_2418].z) * _2482) * _2483) + _2297;
    }
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    float _2628;
    if (_1942.y == 0u)
    {
        float _2558 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2559 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2558;
        float _2560 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2558;
        float _2561 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2558;
        uvec4 _2573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2574 = _2573.x;
        uint _2585 = uint((float(_2573.y) * floor(float(uint(cbSceneParam._m0[85u].y * _848) / _2574))) + floor(float(uint(cbSceneParam._m0[85u].x * _847) / _2574)));
        float _2595 = (log2(_2561 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2596 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        uint _2599 = uint(isnan(14.0) ? _2596 : (isnan(_2596) ? 14.0 : min(_2596, 14.0)));
        uvec4 _2604 = texelFetch(g_lightClusterGridBuffer, int(((_2599 << 2u) + (_2585 << 6u)) >> 2u));
        uint _2605 = _2604.x;
        uint _2606 = _2573.z;
        float _2706;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        if (((((1u << ((_2606 >> 4u) & 15u)) + 4294967295u) & _2605) == 0u) || ((_2606 & 240u) == 0u))
        {
            _2706 = 0.0;
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
        }
        else
        {
            float _2707;
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            uint _2856 = 0u;
            uint _2865;
            bool _2866;
            for (;;)
            {
                _2865 = texelFetch(g_lightClassification, int((((_2599 << 5u) + (_2585 << 9u)) + (_2856 << 2u)) >> 2u)).x;
                _2866 = _2865 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2866)
                {
                    frontier_phi_61_pred = _2850;
                    frontier_phi_61_pred_1 = _2855;
                    frontier_phi_61_pred_2 = _2854;
                    frontier_phi_61_pred_3 = _2853;
                    frontier_phi_61_pred_4 = _2852;
                    frontier_phi_61_pred_5 = _2851;
                }
                else
                {
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    float _2979;
                    uint _2980;
                    _2974 = _2850;
                    _2975 = _2851;
                    _2976 = _2852;
                    _2977 = _2853;
                    _2978 = _2854;
                    _2979 = _2855;
                    _2980 = _2865;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    for (;;)
                    {
                        uint _2984 = uint(findLSB(_2980)) + (_2856 << 5u);
                        uint _2981 = (_2980 + 4294967295u) & _2980;
                        uint _2986 = _2984 * 48u;
                        vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 3u)).x));
                        uint _3006 = (_2984 * 48u) + 4u;
                        vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 3u)).x));
                        uint _3025 = (_2984 * 48u) + 8u;
                        vec3 _3036 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3025)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3025 + 2u)).x));
                        float _3040 = _3000.x - _2559;
                        float _3041 = _3000.y - _2560;
                        float _3042 = _3000.z - _2561;
                        float _3043 = dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042));
                        float _3046 = inversesqrt(_3043);
                        float _3047 = _3046 * _3040;
                        float _3048 = _3046 * _3041;
                        float _3049 = _3046 * _3042;
                        float _3050 = dot(vec3(_866, _869, _872), vec3(_3047, _3048, _3049));
                        float _3055 = 1.0 - (_3043 * _3000.w);
                        float _4410 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3057 = sqrt(_3043) * _3019.w;
                        float _3060 = 1.39999997615814208984375 / (_3057 + 1.39999997615814208984375);
                        float _3061 = _3060 * _3060;
                        float _3064 = ((1.0 - _3061) * _3050) + _3061;
                        float _3067 = _3057 * _3057;
                        float _3071 = ((isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))) * _3056) / ((_3067 * 0.699999988079071044921875) + 1.0);
                        float _3075 = (-0.0) - _2559;
                        float _3076 = (-0.0) - _2560;
                        float _3077 = (-0.0) - _2561;
                        float _3081 = inversesqrt(dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077)));
                        float _3082 = _3081 * _3075;
                        float _3083 = _3081 * _3076;
                        float _3084 = _3081 * _3077;
                        float _3092 = exp2(log2(1.0 / ((_3067 * 3.5) + 5.0)) * 0.25);
                        float _3093 = 1.0 - _926;
                        float _3100 = sqrt(1.0 - ((1.0 - (_3093 * _3093)) * (1.0 - (_3092 * _3092))));
                        float _3101 = _3100 * _3100;
                        float _3102 = _3101 * _3101;
                        float _3103 = _3082 + _3047;
                        float _3104 = _3083 + _3048;
                        float _3105 = _3084 + _3049;
                        float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                        float _3113 = dot(vec3(_866, _869, _872), vec3(_3082, _3083, _3084));
                        float _4426 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3116 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                        float _3117 = dot(vec3(_866, _869, _872), vec3(_3109 * _3103, _3109 * _3104, _3109 * _3105));
                        float _4437 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3120 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                        float _3124 = ((_3120 * _3120) * (_3102 + (-1.0))) + 1.0;
                        float _3125 = _3060 * _3101;
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3050) + _3126;
                        float _4448 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3131 = 1.0 - _3101;
                        float _3141 = (0.5 / (((_3130 * ((_3116 * _3131) + _3101)) + 9.9999999392252902907785028219223e-09) + (((_3130 * _3131) + _3101) * _3116))) * _3130;
                        float _4459 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                        float _3152 = (((_3102 * 3.1415927410125732421875) * (isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0)))) / ((_3124 * _3124) * ((_3067 * 2.1991131305694580078125) + 3.141590118408203125))) * _3056;
                        _2909 = (_3071 * _3019.x) + _2977;
                        _2910 = (_3071 * _3019.y) + _2978;
                        _2911 = (_3071 * _3019.z) + _2979;
                        _2906 = (_3152 * _3036.x) + _2974;
                        _2907 = (_3152 * _3036.y) + _2975;
                        _2908 = (_3152 * _3036.z) + _2976;
                        if (_2981 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2974 = _2906;
                            _2975 = _2907;
                            _2976 = _2908;
                            _2977 = _2909;
                            _2978 = _2910;
                            _2979 = _2911;
                            _2980 = _2981;
                        }
                    }
                    frontier_phi_61_pred = _2906;
                    frontier_phi_61_pred_1 = _2911;
                    frontier_phi_61_pred_2 = _2910;
                    frontier_phi_61_pred_3 = _2909;
                    frontier_phi_61_pred_4 = _2908;
                    frontier_phi_61_pred_5 = _2907;
                }
                _2707 = frontier_phi_61_pred;
                _2717 = frontier_phi_61_pred_1;
                _2715 = frontier_phi_61_pred_2;
                _2713 = frontier_phi_61_pred_3;
                _2711 = frontier_phi_61_pred_4;
                _2709 = frontier_phi_61_pred_5;
                uint _2857 = _2856 + 1u;
                if (_2857 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2850 = _2707;
                    _2851 = _2709;
                    _2852 = _2711;
                    _2853 = _2713;
                    _2854 = _2715;
                    _2855 = _2717;
                    _2856 = _2857;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2706 = _2707;
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
        }
        uvec4 _2720 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2721 = _2720.z;
        uint _2723 = (_2721 >> 8u) & 15u;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        if (((4294967295u << _2723) & _2605) == 0u)
        {
            _2818 = _2706;
            _2820 = _2708;
            _2822 = _2710;
            _2824 = _2712;
            _2826 = _2714;
            _2828 = _2716;
        }
        else
        {
            float _2843 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
            float _2844 = _2843 * _2559;
            float _2845 = _2843 * _2560;
            float _2846 = _2843 * _2561;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2723 < ((_2721 >> 12u) & 15u))
            {
                float _2819;
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2957 = _2706;
                float _2958 = _2708;
                float _2959 = _2710;
                float _2960 = _2712;
                float _2961 = _2714;
                float _2962 = _2716;
                uint _2963 = _2723;
                uint _2972;
                bool _2973;
                for (;;)
                {
                    _2972 = texelFetch(g_lightClassification, int((((_2599 << 5u) + (_2585 << 9u)) + (_2963 << 2u)) >> 2u)).x;
                    _2973 = _2972 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2973)
                    {
                        frontier_phi_67_pred = _2960;
                        frontier_phi_67_pred_1 = _2961;
                        frontier_phi_67_pred_2 = _2962;
                        frontier_phi_67_pred_3 = _2959;
                        frontier_phi_67_pred_4 = _2958;
                        frontier_phi_67_pred_5 = _2957;
                    }
                    else
                    {
                        float _3157;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3170 = _2957;
                        float _3171 = _2958;
                        float _3172 = _2959;
                        float _3173 = _2960;
                        float _3174 = _2961;
                        float _3175 = _2962;
                        uint _3176 = _2972;
                        uint _3177;
                        vec4 _3202;
                        float _3203;
                        vec4 _3218;
                        vec3 _3230;
                        vec4 _3245;
                        vec4 _3261;
                        float _3307;
                        bool _3308;
                        for (;;)
                        {
                            uint _3187 = ((_2963 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3176));
                            _3177 = (_3176 + 4294967295u) & _3176;
                            uint _3189 = _3187 * 40u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            _3203 = _3202.w;
                            uint _3205 = (_3187 * 40u) + 4u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            uint _3220 = (_3187 * 40u) + 8u;
                            _3230 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x));
                            uint _3232 = (_3187 * 40u) + 16u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3248 = (_3187 * 40u) + 20u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3187 * 40u) + 24u;
                            vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3282 = (_3187 * 40u) + 28u;
                            vec4 _3295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3282 + 3u)).x));
                            _3307 = fma(_2561, _3295.z, fma(_2560, _3295.y, _3295.x * _2559)) + _3295.w;
                            _3308 = !((fma(_2561, _3276.z, fma(_2560, _3276.y, _3276.x * _2559)) + _3276.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3308)
                            {
                                float _3335 = _3202.x - _2559;
                                float _3336 = _3202.y - _2560;
                                float _3337 = _3202.z - _2561;
                                float _3338 = dot(vec3(_3335, _3336, _3337), vec3(_3335, _3336, _3337));
                                float _3341 = inversesqrt(_3338);
                                float _3342 = _3341 * _3335;
                                float _3343 = _3341 * _3336;
                                float _3344 = _3341 * _3337;
                                float _3348 = 1.0 - (_3338 / (_3203 * _3203));
                                float _4470 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3353 = sqrt(_3338) * _3218.w;
                                float _3355 = 1.39999997615814208984375 / (_3353 + 1.39999997615814208984375);
                                float _3356 = _3355 * _3355;
                                float _3359 = ((1.0 - _3356) * dot(vec3(_3342, _3343, _3344), vec3(_866, _869, _872))) + _3356;
                                float _3362 = _3353 * _3353;
                                float _3366 = (fma(_2561, _3245.z, fma(_2560, _3245.y, _3245.x * _2559)) + _3245.w) / _3307;
                                float _3367 = (fma(_2561, _3261.z, fma(_2560, _3261.y, _3261.x * _2559)) + _3261.w) / _3307;
                                float _3371 = 1.0 - dot(vec2(_3366, _3367), vec2(_3366, _3367));
                                float _4486 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3372 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                                float _3373 = _3372 * (((isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0))) * _3349) / ((_3362 * 0.699999988079071044921875) + 1.0));
                                float _3385 = exp2(log2(1.0 / ((_3362 * 3.5) + 5.0)) * 0.25);
                                float _3386 = 1.0 - _926;
                                float _3393 = sqrt(1.0 - ((1.0 - (_3386 * _3386)) * (1.0 - (_3385 * _3385))));
                                float _3394 = _3393 * _3393;
                                float _3395 = _3394 * _3394;
                                float _3396 = _3342 - _2844;
                                float _3397 = _3343 - _2845;
                                float _3398 = _3344 - _2846;
                                float _3402 = inversesqrt(dot(vec3(_3396, _3397, _3398), vec3(_3396, _3397, _3398)));
                                float _3406 = dot(vec3(_866, _869, _872), vec3((-0.0) - _2844, (-0.0) - _2845, (-0.0) - _2846));
                                float _4497 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3409 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                                float _3410 = dot(vec3(_866, _869, _872), vec3(_3402 * _3396, _3402 * _3397, _3402 * _3398));
                                float _4508 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3413 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3417 = ((_3413 * _3413) * (_3395 + (-1.0))) + 1.0;
                                float _3418 = _3355 * _3394;
                                float _3419 = _3418 * _3418;
                                float _3425 = ((1.0 - _3419) * dot(vec3(_866, _869, _872), vec3(_3342, _3343, _3344))) + _3419;
                                float _4519 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3426 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3427 = 1.0 - _3394;
                                float _3437 = (0.5 / (((_3426 * ((_3409 * _3427) + _3394)) + 9.9999999392252902907785028219223e-09) + (((_3426 * _3427) + _3394) * _3409))) * _3426;
                                float _4530 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3447 = (_3372 * _3349) * (((_3395 * 3.1415927410125732421875) * (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) / ((_3417 * _3417) * ((_3362 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3447 * _3230.x;
                                frontier_phi_73_pred_1 = _3447 * _3230.y;
                                frontier_phi_73_pred_2 = _3373 * _3218.z;
                                frontier_phi_73_pred_3 = _3373 * _3218.y;
                                frontier_phi_73_pred_4 = _3373 * _3218.x;
                                frontier_phi_73_pred_5 = _3447 * _3230.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3451 = frontier_phi_73_pred;
                            _3452 = frontier_phi_73_pred_1;
                            _3456 = frontier_phi_73_pred_2;
                            _3455 = frontier_phi_73_pred_3;
                            _3454 = frontier_phi_73_pred_4;
                            _3453 = frontier_phi_73_pred_5;
                            _3160 = _3454 + _3173;
                            _3161 = _3455 + _3174;
                            _3162 = _3456 + _3175;
                            _3157 = _3451 + _3170;
                            _3158 = _3452 + _3171;
                            _3159 = _3453 + _3172;
                            if (_3177 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3170 = _3157;
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3177;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3160;
                        frontier_phi_67_pred_1 = _3161;
                        frontier_phi_67_pred_2 = _3162;
                        frontier_phi_67_pred_3 = _3159;
                        frontier_phi_67_pred_4 = _3158;
                        frontier_phi_67_pred_5 = _3157;
                    }
                    _2825 = frontier_phi_67_pred;
                    _2827 = frontier_phi_67_pred_1;
                    _2829 = frontier_phi_67_pred_2;
                    _2823 = frontier_phi_67_pred_3;
                    _2821 = frontier_phi_67_pred_4;
                    _2819 = frontier_phi_67_pred_5;
                    uint _2964 = _2963 + 1u;
                    if (_2964 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2957 = _2819;
                        _2958 = _2821;
                        _2959 = _2823;
                        _2960 = _2825;
                        _2961 = _2827;
                        _2962 = _2829;
                        _2963 = _2964;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2827;
                frontier_phi_55_56_ladder_1 = _2829;
                frontier_phi_55_56_ladder_2 = _2825;
                frontier_phi_55_56_ladder_3 = _2823;
                frontier_phi_55_56_ladder_4 = _2821;
                frontier_phi_55_56_ladder_5 = _2819;
            }
            else
            {
                frontier_phi_55_56_ladder = _2714;
                frontier_phi_55_56_ladder_1 = _2716;
                frontier_phi_55_56_ladder_2 = _2712;
                frontier_phi_55_56_ladder_3 = _2710;
                frontier_phi_55_56_ladder_4 = _2708;
                frontier_phi_55_56_ladder_5 = _2706;
            }
            _2818 = frontier_phi_55_56_ladder_5;
            _2820 = frontier_phi_55_56_ladder_4;
            _2822 = frontier_phi_55_56_ladder_3;
            _2824 = frontier_phi_55_56_ladder_2;
            _2826 = frontier_phi_55_56_ladder;
            _2828 = frontier_phi_55_56_ladder_1;
        }
        float _2833 = isnan(1.0) ? _910 : (isnan(_910) ? 1.0 : min(_910, 1.0));
        _2618 = (_2833 * _2824) + _2073;
        _2620 = (_2833 * _2826) + _2075;
        _2622 = (_2833 * _2828) + _2077;
        _2624 = ((_2818 * 0.039999999105930328369140625) * _2833) + _2403;
        _2626 = ((_2820 * 0.039999999105930328369140625) * _2833) + _2405;
        _2628 = ((_2822 * 0.039999999105930328369140625) * _2833) + _2407;
    }
    else
    {
        _2618 = _2073;
        _2620 = _2075;
        _2622 = _2077;
        _2624 = _2403;
        _2626 = _2405;
        _2628 = _2407;
    }
    float _4546 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _4557 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4568 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    uint _2648 = _245 + 6u;
    float _2656 = _847 / cbSceneParam._m0[86u].x;
    float _2657 = _848 / cbSceneParam._m0[86u].y;
    vec4 _2671 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2656, _2657, (log2((isnan(cbSceneParam._m0[77u].w) ? _781 : (isnan(_781) ? cbSceneParam._m0[77u].w : min(_781, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2673 = _2671.x;
    float _2674 = _2671.y;
    float _2675 = _2671.z;
    float _2676 = _2671.w;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    if (_781 > cbSceneParam._m0[78u].w)
    {
        float _2731 = isnan(_781) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _781 : min(cbSceneParam._m0[80u].w, _781));
        float _2732 = _2731 / _781;
        float _2743 = _2732 * _832;
        float _2744 = _833 * _2732;
        float _2745 = (-0.0) - _2744;
        float _2746 = _2732 * _834;
        float _2748 = (cbSceneParam._m0[77u].w * _2745) / _2731;
        float _2749 = _2748 + cbSceneParam._m0[79u].w;
        float _2750 = cbSceneParam._m0[79u].w - _2744;
        float _2756 = sqrt(((_2743 * _2743) + (_2744 * _2744)) + (_2746 * _2746));
        float _2759 = (1.0 - (cbSceneParam._m0[77u].w / _2731)) * _2756;
        float _2764 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2766 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2919;
        if (abs((_2745 - _2748) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2919 = ((((_2749 > 0.0) ? exp2(_2764 * _2749) : (2.0 - exp2(_2766 * _2749))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2759;
        }
        else
        {
            float _2879 = 1.0 / cbSceneParam._m0[80u].x;
            float _2880 = isnan(_2750) ? _2749 : (isnan(_2749) ? _2750 : max(_2749, _2750));
            float _2881 = isnan(_2750) ? _2749 : (isnan(_2749) ? _2750 : min(_2749, _2750));
            float _2890 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : min(_2880, 0.0));
            float _2891 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : min(_2881, 0.0));
            _2919 = ((abs(_2756 / _2745) * cbSceneParam._m0[80u].y) * ((((_2890 - _2891) * 2.0) - ((exp2(_2764 * (isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0)))) - exp2(_2764 * (isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0))))) * _2879)) - ((exp2(_2766 * _2890) - exp2(_2766 * _2891)) * _2879))) + (_2759 * cbSceneParam._m0[80u].z);
        }
        vec4 _2921 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2656, _2657, 1.0), 0.0);
        float _2930 = exp2((_2919 * (-1.44269502162933349609375)) * (1.0 - _2921.w));
        float _2931 = log2(_2930);
        float _2947 = log2(_2676);
        _2768 = (exp2(_2947 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].x)) * _2921.x) / cbSceneParam._m0[78u].x)) + _2673;
        _2770 = (exp2(_2947 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].y)) * _2921.y) / cbSceneParam._m0[78u].y)) + _2674;
        _2772 = (exp2(_2947 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2931 * cbSceneParam._m0[78u].z)) * _2921.z) / cbSceneParam._m0[78u].z)) + _2675;
        _2774 = _2930 * _2676;
    }
    else
    {
        _2768 = _2673;
        _2770 = _2674;
        _2772 = _2675;
        _2774 = _2676;
    }
    float _2786 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2787 = _2786 == 3.0;
    float _2788 = log2(_2774);
    float _2795 = exp2(_2788 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2618 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _910))) + ((_2624 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1715)) * cbPerFrame._m0[3u].x));
    float _2796 = exp2(_2788 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2620 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _910))) + ((_2626 + ((isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0))) * _1715)) * cbPerFrame._m0[3u].x));
    float _2797 = exp2(_2788 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2622 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _910))) + ((_2628 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1715)) * cbPerFrame._m0[3u].x));
    float _2806 = (_2786 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2806 * (_2787 ? _2795 : (_2795 + (cbSceneParam._m0[72u].w * _2768)));
    SV_Target.y = _2806 * (_2787 ? _2796 : (_2796 + (cbSceneParam._m0[72u].w * _2770)));
    SV_Target.z = _2806 * (_2787 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2772)));
    SV_Target.w = cbInstanceData._m0[_2648].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2648].w;
}


