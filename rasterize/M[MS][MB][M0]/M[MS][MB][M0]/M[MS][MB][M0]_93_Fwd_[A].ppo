#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1294;
float _3654;
float _3655;
float _3656;
float _3657;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _358 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _360 = _358.x;
    float _370 = dot(vec4(_360, _358.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _387 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_360 - _370) * cbMtdParam._m0[24u].x) + _370) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3666 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _395 = (_388 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _396 = (_388 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _397 = (_388 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _272) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _273) + cbTextureTilingScale._m0[20u].w));
    vec4 _440 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _457 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _459 = _457.x;
    float _460 = _457.y;
    float _461 = _457.z;
    float _470 = ((_440.z - _461) * _388) + _461;
    float _473 = ((((_440.x - _459) * _388) + _459) * 2.0) + (-1.0);
    float _474 = ((((_440.y - _460) * _388) + _460) * 2.0) + (-1.0);
    float _475 = dot(vec2(_473, _474), vec2(_473, _474));
    float _3677 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _480 = sqrt(1.0 - (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))));
    vec4 _496 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _521 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _523 = _521.x;
    float _524 = 1.0 - _523;
    float _530 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _533 = ((isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : min(_530, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _542 = (_533 - ((((((_523 - _524) * cbMtdParam._m0[24u].z) + _524) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _533))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3698 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _550 = (_543 * (cbMtdParam._m0[17u].x - _395)) + _395;
    float _551 = (_543 * (cbMtdParam._m0[17u].y - _396)) + _396;
    float _552 = (_543 * (cbMtdParam._m0[17u].z - _397)) + _397;
    vec4 _564 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _566 = _564.x;
    float _567 = 1.0 - _566;
    float _594 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_566 - _567) * cbMtdParam._m0[24u].w) + _567) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3709 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _603 = ((((cbMtdParam._m0[10u].x - _550) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _595) + _550;
    float _604 = ((((cbMtdParam._m0[10u].y - _551) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _595) + _551;
    float _605 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _552)) * _595) + _552;
    float _610 = (((_415.z - _470) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _470;
    float _614 = ((_496.z - _610) * cbMtdParam._m0[19u].w) + _610;
    vec4 _628 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _635 = (_628.x * 2.0) + (-1.0);
    float _636 = (_628.y * 2.0) + (-1.0);
    float _637 = dot(vec2(_635, _636), vec2(_635, _636));
    float _3720 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _645 = (_543 * (_628.z - _614)) + _614;
    float _648 = ((cbMtdParam._m0[23u].y - _645) * _595) + _645;
    vec4 _667 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _673 = (_667.x * 2.0) + (-1.0);
    float _674 = (_667.y * 2.0) + (-1.0);
    float _675 = dot(vec2(_673, _674), vec2(_673, _674));
    float _3731 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _689 = (_473 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_415.x * 2.0) + (-1.0)))) + (((_496.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _690 = (_474 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_415.y * 2.0) + (-1.0)))) + (((_496.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _702 = (((_635 - _689) + (cbMtdParam._m0[21u].x * _689)) * _543) + _689;
    float _703 = (((_636 - _690) + (cbMtdParam._m0[21u].x * _690)) * _543) + _690;
    float _704 = (_543 * (sqrt(1.0 - (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) - _480)) + _480;
    float _715 = (((_673 - _702) + (_702 * cbMtdParam._m0[22u].z)) * _595) + _702;
    float _716 = (((_674 - _703) + (_703 * cbMtdParam._m0[22u].z)) * _595) + _703;
    float _717 = ((sqrt(1.0 - (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) - _704) * _595) + _704;
    float _719 = cbMtdParam._m0[22u].x + _496.w;
    float _722 = fma(_717, _240 * NORMAL.x, fma(_716, _247 * TANGENT.x, (_233 * _225) * _715));
    float _725 = fma(_717, _240 * NORMAL.y, fma(_716, _247 * TANGENT.y, (_233 * _226) * _715));
    float _728 = fma(_717, _240 * NORMAL.z, fma(_716, _247 * TANGENT.z, (_233 * _227) * _715));
    float _732 = inversesqrt(dot(vec3(_722, _725, _728), vec3(_722, _725, _728)));
    float _733 = _732 * _722;
    float _734 = _732 * _725;
    float _735 = _732 * _728;
    float _3742 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _736 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _3753 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _3764 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3775 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3786 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _754 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _805 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _795);
    float _806 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _795);
    float _807 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _795);
    float _811 = inversesqrt(dot(vec3(_805, _806, _807), vec3(_805, _806, _807)));
    float _812 = _805 * _811;
    float _813 = _806 * _811;
    float _814 = _807 * _811;
    vec4 _819 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _821 = _819.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _975 = sqrt(((_805 * _805) + (_806 * _806)) + (_807 * _807));
        float _981 = (cbMatDynParam._m0[5u].x * _975) + cbMatDynParam._m0[5u].y;
        float _3797 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _986 = (cbMatDynParam._m0[5u].z * _975) + cbMatDynParam._m0[5u].w;
        float _3808 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) - _982)) + _982) < ((_821 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _832 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _833 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _851 = fma(_735, cbSceneParam._m0[5u].z, fma(_734, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _733));
    float _854 = fma(_735, cbSceneParam._m0[6u].z, fma(_734, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _733));
    float _857 = fma(_735, cbSceneParam._m0[7u].z, fma(_734, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _733));
    uint _870 = _253 + 9u;
    uint _871 = _870 + uint(cbMatDynParam._m0[0u].w);
    float _877 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * cbInstanceData._m0[_871].x;
    float _878 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) * cbInstanceData._m0[_871].y;
    float _879 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * cbInstanceData._m0[_871].z;
    float _3819 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _3841 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    vec4 _891 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _832, cbSceneParam._m0[86u].y * _833));
    float _895 = ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * TEXCOORD_5.w) * _891.x;
    float _896 = dot(vec3(_733, _734, _735), vec3(_812, _813, _814));
    float _899 = _896 * 2.0;
    float _903 = (_899 * _733) - _812;
    float _904 = (_899 * _734) - _813;
    float _905 = (_899 * _735) - _814;
    float _909 = abs(dot(vec3(_812, _813, _814), vec3(_733, _734, _735)));
    float _3852 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _911 = sqrt(_736);
    float _924 = exp2((_911 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_911 * 3.0));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1293;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1018 = fma(_964, cbModelParam._m0[26u].z, fma(_960, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _956));
        float _1022 = fma(_964, cbModelParam._m0[27u].z, fma(_960, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _956));
        float _1026 = fma(_964, cbModelParam._m0[28u].z, fma(_960, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _956));
        float _1051 = _956 + _733;
        float _1052 = _960 + _734;
        float _1053 = _964 + _735;
        float _1063 = fma(_1053, cbModelParam._m0[26u].z, fma(_1052, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1051)) - _1018;
        float _1064 = fma(_1053, cbModelParam._m0[27u].z, fma(_1052, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1051)) - _1022;
        float _1065 = fma(_1053, cbModelParam._m0[28u].z, fma(_1052, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1051)) - _1026;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1018 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1022 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[34u].z) + ((((((_1026 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1121 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1087.x + (-0.5));
        float _1123 = _1121 * (_1087.y + (-0.5));
        float _1124 = _1121 * (_1087.z + (-0.5));
        float _1131 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1094.x + (-0.5));
        float _1133 = _1131 * (_1094.y + (-0.5));
        float _1134 = _1131 * (_1094.z + (-0.5));
        float _1141 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1101.x + (-0.5));
        float _1143 = _1141 * (_1101.y + (-0.5));
        float _1144 = _1141 * (_1101.z + (-0.5));
        float _1151 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1108.x + (-0.5));
        float _1153 = _1151 * (_1108.y + (-0.5));
        float _1154 = _1151 * (_1108.z + (-0.5));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = _1122 * 0.5;
        float _1159 = _1132 * 0.5;
        float _1160 = _1142 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1175 = (dot(vec3(_733, _734, _735), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1185 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3900 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1187 + 1.0))) + _1192) * _1155;
        float _1202 = _1123 * 0.5;
        float _1203 = _1133 * 0.5;
        float _1204 = _1143 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_733, _734, _735), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3933 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1229 + 1.0))) + _1234) * _1156;
        float _1244 = _1124 * 0.5;
        float _1245 = _1134 * 0.5;
        float _1246 = _1144 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_733, _734, _735), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3966 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1271 + 1.0))) + _1276) * _1157;
        _1293 = _1124;
        _1295 = _1123;
        _1296 = _1122;
        _1297 = _1134;
        _1298 = _1133;
        _1299 = _1132;
        _1300 = _1144;
        _1301 = _1143;
        _1302 = _1142;
        _1303 = _1157;
        _1304 = _1156;
        _1305 = _1155;
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
    }
    else
    {
        _1293 = _1294;
        _1295 = _1294;
        _1296 = _1294;
        _1297 = _1294;
        _1298 = _1294;
        _1299 = _1294;
        _1300 = _1294;
        _1301 = _1294;
        _1302 = _1294;
        _1303 = _1294;
        _1304 = _1294;
        _1305 = _1294;
        _1306 = 0.0;
        _1307 = 0.0;
        _1308 = 0.0;
    }
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1336 = fma(_964, cbModelParam._m0[30u].z, fma(_960, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _956));
        float _1340 = fma(_964, cbModelParam._m0[31u].z, fma(_960, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _956));
        float _1344 = fma(_964, cbModelParam._m0[32u].z, fma(_960, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _956));
        float _1367 = _956 + _733;
        float _1368 = _960 + _734;
        float _1369 = _964 + _735;
        float _1379 = fma(_1369, cbModelParam._m0[30u].z, fma(_1368, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1367)) - _1336;
        float _1380 = fma(_1369, cbModelParam._m0[31u].z, fma(_1368, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1367)) - _1340;
        float _1381 = fma(_1369, cbModelParam._m0[32u].z, fma(_1368, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1367)) - _1344;
        float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
        float _1398 = ((_1385 * _1379) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1336 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1385 * _1380) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1340 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1385 * _1381) / cbModelParam._m0[35u].z) + ((((((_1344 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        float _1435 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1402.x + (-0.5));
        float _1437 = _1435 * (_1402.y + (-0.5));
        float _1438 = _1435 * (_1402.z + (-0.5));
        float _1445 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1409.x + (-0.5));
        float _1447 = _1445 * (_1409.y + (-0.5));
        float _1448 = _1445 * (_1409.z + (-0.5));
        float _1455 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1416.x + (-0.5));
        float _1457 = _1455 * (_1416.y + (-0.5));
        float _1458 = _1455 * (_1416.z + (-0.5));
        float _1465 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1423.x + (-0.5));
        float _1467 = _1465 * (_1423.y + (-0.5));
        float _1468 = _1465 * (_1423.z + (-0.5));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = _1436 * 0.5;
        float _1473 = _1446 * 0.5;
        float _1474 = _1456 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_733, _734, _735), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4029 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1499 + 1.0))) + _1504) * _1469;
        float _1514 = _1437 * 0.5;
        float _1515 = _1447 * 0.5;
        float _1516 = _1457 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_733, _734, _735), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4062 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1541 + 1.0))) + _1546) * _1470;
        float _1556 = _1438 * 0.5;
        float _1557 = _1448 * 0.5;
        float _1558 = _1458 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_733, _734, _735), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4095 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1583 + 1.0))) + _1588) * _1471;
        _1605 = _1438;
        _1606 = _1437;
        _1607 = _1436;
        _1608 = _1448;
        _1609 = _1447;
        _1610 = _1446;
        _1611 = _1458;
        _1612 = _1457;
        _1613 = _1456;
        _1614 = _1471;
        _1615 = _1470;
        _1616 = _1469;
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
    }
    else
    {
        _1605 = _1294;
        _1606 = _1294;
        _1607 = _1294;
        _1608 = _1294;
        _1609 = _1294;
        _1610 = _1294;
        _1611 = _1294;
        _1612 = _1294;
        _1613 = _1294;
        _1614 = _1294;
        _1615 = _1294;
        _1616 = _1294;
        _1617 = 0.0;
        _1618 = 0.0;
        _1619 = 0.0;
    }
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1306)) + _1306;
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1307)) + _1307;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1308)) + _1308;
    float _1652 = fma(_1631, cbSceneParam._m0[89u].z, fma(_1630, cbSceneParam._m0[89u].y, _1629 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1631, cbSceneParam._m0[90u].z, fma(_1630, cbSceneParam._m0[90u].y, _1629 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1631, cbSceneParam._m0[91u].z, fma(_1630, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1629));
    float _1673 = _903 * 0.5;
    float _1674 = _904 * 0.5;
    float _1675 = _905 * 0.5;
    float _1676 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1679 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1682 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1716;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1689 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1293, _1297, _1300, _1303));
        float _1693 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1295, _1298, _1301, _1304));
        float _1697 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1296, _1299, _1302, _1305));
        float _1704 = dot(vec4(cbModelParam._m0[39u]), vec4(_1673, _1674, _1675, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1727;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1718 = dot(vec4(cbModelParam._m0[40u]), vec4(_1673, _1674, _1675, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1731 = (_1727 * cbModelParam._m0[1u].x) + (_1716 * (1.0 - cbModelParam._m0[1u].x));
    float _1741 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _736);
    float _1742 = isnan(_1741) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1741 : min(cbModelParam._m0[25u].z, _1741));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1790 = fma(_964, cbModelParam._m0[13u].z, fma(_960, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956)) + cbModelParam._m0[13u].w;
        float _1794 = fma(_964, cbModelParam._m0[14u].z, fma(_960, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956)) + cbModelParam._m0[14u].w;
        float _1798 = fma(_964, cbModelParam._m0[15u].z, fma(_960, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956)) + cbModelParam._m0[15u].w;
        float _1801 = fma(_905, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903));
        float _1804 = fma(_905, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903));
        float _1807 = fma(_905, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903));
        float _1835;
        if (_1801 > 0.0)
        {
            _1835 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1835 = frontier_phi_17_15_ladder;
        }
        float _2036;
        if (_1804 > 0.0)
        {
            _2036 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2036 = frontier_phi_26_22_ladder;
        }
        float _2279;
        if (_1807 > 0.0)
        {
            _2279 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2279 = frontier_phi_38_33_ladder;
        }
        float _2281 = isnan(_2036) ? _1835 : (isnan(_1835) ? _2036 : min(_1835, _2036));
        float _2282 = isnan(_2279) ? _2281 : (isnan(_2281) ? _2279 : min(_2281, _2279));
        float _2286 = (_2282 * _1801) + _1790;
        float _2287 = (_2282 * _1804) + _1794;
        float _2288 = (_2282 * _1807) + _1798;
        float _2289 = _2282 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2289;
        float _2293 = _2289 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 > _2293) || ((_2287 < _2291) || ((_2286 < _2291) || (_2286 > _2293))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2288, cbModelParam._m0[9u].z, fma(_2287, cbModelParam._m0[9u].y, _2286 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2288, cbModelParam._m0[10u].z, fma(_2287, cbModelParam._m0[10u].y, _2286 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2288, cbModelParam._m0[11u].z, fma(_2287, cbModelParam._m0[11u].y, _2286 * cbModelParam._m0[11u].x))), _1742);
            frontier_phi_16_38_ladder = _2412.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2412.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2412.x * cbModelParam._m0[1u].y;
        }
        _1823 = frontier_phi_16_38_ladder_2;
        _1825 = frontier_phi_16_38_ladder_1;
        _1827 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_903, _904, _905), _1742);
        _1823 = _1811.x * cbModelParam._m0[1u].y;
        _1825 = _1811.y * cbModelParam._m0[1u].y;
        _1827 = _1811.z * cbModelParam._m0[1u].y;
    }
    float _1831 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _736);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1831 : min(cbModelParam._m0[25u].w, _1831));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1886 = fma(_964, cbModelParam._m0[21u].z, fma(_960, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956)) + cbModelParam._m0[21u].w;
        float _1890 = fma(_964, cbModelParam._m0[22u].z, fma(_960, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956)) + cbModelParam._m0[22u].w;
        float _1894 = fma(_964, cbModelParam._m0[23u].z, fma(_960, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956)) + cbModelParam._m0[23u].w;
        float _1897 = fma(_905, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903));
        float _1900 = fma(_905, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903));
        float _1903 = fma(_905, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903));
        float _2041;
        if (_1897 > 0.0)
        {
            _2041 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2041 = frontier_phi_28_24_ladder;
        }
        float _2306;
        if (_1900 > 0.0)
        {
            _2306 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2306 = frontier_phi_40_35_ladder;
        }
        float _2511;
        if (_1903 > 0.0)
        {
            _2511 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2511 = frontier_phi_49_46_ladder;
        }
        float _2513 = isnan(_2306) ? _2041 : (isnan(_2041) ? _2306 : min(_2041, _2306));
        float _2514 = isnan(_2511) ? _2513 : (isnan(_2513) ? _2511 : min(_2513, _2511));
        float _2518 = (_2514 * _1897) + _1886;
        float _2519 = (_2514 * _1900) + _1890;
        float _2520 = (_2514 * _1903) + _1894;
        float _2521 = _2514 * 9.9999997473787516355514526367188e-05;
        float _2522 = (-1.0) - _2521;
        float _2524 = _2521 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2520 > _2524) || ((_2520 < _2522) || ((_2519 > _2524) || ((_2519 < _2522) || ((_2518 < _2522) || (_2518 > _2524))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2520, cbModelParam._m0[17u].z, fma(_2519, cbModelParam._m0[17u].y, _2518 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2520, cbModelParam._m0[18u].z, fma(_2519, cbModelParam._m0[18u].y, _2518 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2520, cbModelParam._m0[19u].z, fma(_2519, cbModelParam._m0[19u].y, _2518 * cbModelParam._m0[19u].x))), _1832);
            frontier_phi_25_49_ladder = _2719.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2719.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2719.x * cbModelParam._m0[1u].z;
        }
        _1922 = frontier_phi_25_49_ladder_2;
        _1924 = frontier_phi_25_49_ladder_1;
        _1926 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_903, _904, _905), _1832);
        _1922 = _1906.x * cbModelParam._m0[1u].z;
        _1924 = _1906.y * cbModelParam._m0[1u].z;
        _1926 = _1906.z * cbModelParam._m0[1u].z;
    }
    float _1938 = ((((1.0 - _924) * ((_911 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_924 * _911)) * _895;
    float _1939 = _1938 * ((cbModelParam._m0[1u].w * (_1922 - _1823)) + _1823);
    float _1940 = _1938 * ((cbModelParam._m0[1u].w * (_1924 - _1825)) + _1825);
    float _1941 = _1938 * ((cbModelParam._m0[1u].w * (_1926 - _1827)) + _1827);
    float _1944 = fma(_1941, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1939 * cbSceneParam._m0[89u].x));
    float _1947 = fma(_1941, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1939 * cbSceneParam._m0[90u].x));
    float _1950 = fma(_1941, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, _1939 * cbSceneParam._m0[91u].x));
    uvec4 _1960 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _1962 = _1960.x * 14u;
    uint _1963 = _1962 + 13u;
    float _1970 = _895 + (-1.0);
    float _1975 = (cbLight._m0[_1963].x * _1970) + 1.0;
    float _1976 = (cbLight._m0[_1963].y * _1970) + 1.0;
    float _1977 = (cbLight._m0[_1963].z * _1970) + 1.0;
    float _1978 = (cbLight._m0[_1963].w * _1970) + 1.0;
    uint _1979 = _1962 + 5u;
    float _1985 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _1989 = _1962 + 4u;
    float _1995 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _1999 = _1962 | 1u;
    float _2010 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_733, _734, _735));
    float _2013 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_733, _734, _735));
    float _4231 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _4242 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2018 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * 0.3183098733425140380859375;
    float _2020 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.3183098733425140380859375;
    float _2027 = ((cbLight._m0[_1979].x * _1985) * _2020) + ((cbLight._m0[_1989].x * _1995) * _2018);
    float _2028 = ((_1985 * cbLight._m0[_1979].y) * _2020) + ((_1995 * cbLight._m0[_1989].y) * _2018);
    float _2029 = ((_1985 * cbLight._m0[_1979].z) * _2020) + ((_1995 * cbLight._m0[_1989].z) * _2018);
    uvec4 _2033 = floatBitsToUint(cbLight._m0[_1962 + 12u]);
    bool _2035 = _2033.x == 0u;
    float _2046;
    float _2048;
    float _2050;
    if (_2035)
    {
        _2046 = _2027;
        _2048 = _2028;
        _2050 = _2029;
    }
    else
    {
        uint _2054 = _1962 + 6u;
        float _2070 = (dot(vec3(cbLight._m0[_1962 + 2u].xyz), vec3(_733, _734, _735)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _4253 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2073 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2046 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _2027;
        _2048 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _2028;
        _2050 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _2029;
    }
    bool _2053 = _2033.y == 0u;
    float _2091;
    float _2093;
    float _2095;
    if (_2053)
    {
        _2091 = _2046;
        _2093 = _2048;
        _2095 = _2050;
    }
    else
    {
        uint _2250 = _1962 + 7u;
        float _2266 = (dot(vec3(cbLight._m0[_1962 + 3u].xyz), vec3(_733, _734, _735)) * 0.5) + 0.5;
        float _2267 = _2266 * _2266;
        float _4269 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2268 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _2269 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2091 = (((cbLight._m0[_2250].x * 0.3183098733425140380859375) * _2268) * _2269) + _2046;
        _2093 = (((cbLight._m0[_2250].y * 0.3183098733425140380859375) * _2268) * _2269) + _2048;
        _2095 = (((cbLight._m0[_2250].z * 0.3183098733425140380859375) * _2268) * _2269) + _2050;
    }
    uint _2098 = _1962 + 8u;
    float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1962].w)) * _736) * 0.949999988079071044921875);
    float _2112 = _2111 * _2111;
    float _2113 = cbLight._m0[_1962].x + _812;
    float _2114 = cbLight._m0[_1962].y + _813;
    float _2115 = cbLight._m0[_1962].z + _814;
    float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
    float _2120 = _2119 * _2113;
    float _2121 = _2119 * _2114;
    float _2122 = _2119 * _2115;
    float _2123 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_1962].xyz));
    float _4285 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _4296 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _2127 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    float _2128 = dot(vec3(_733, _734, _735), vec3(_2120, _2121, _2122));
    float _4307 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
    float _2132 = dot(vec3(cbLight._m0[_1962].xyz), vec3(_2120, _2121, _2122));
    float _4318 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2136 = _2112 * _2112;
    float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
    float _2151 = (exp2(log2(1.0 - (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2152 = 1.0 - _2112;
    float _2163 = (0.5 / (((_2127 * ((_2126 * _2152) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2152) + _2112) * _2126))) * _2126;
    float _4329 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2165 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
    uint _2176 = _1962 + 9u;
    float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _736) * 0.949999988079071044921875);
    float _2188 = _2187 * _2187;
    float _2189 = cbLight._m0[_1999].x + _812;
    float _2190 = cbLight._m0[_1999].y + _813;
    float _2191 = cbLight._m0[_1999].z + _814;
    float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
    float _2196 = _2195 * _2189;
    float _2197 = _2195 * _2190;
    float _2198 = _2195 * _2191;
    float _2199 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_1999].xyz));
    float _4340 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _2203 = dot(vec3(_733, _734, _735), vec3(_2196, _2197, _2198));
    float _4351 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2196, _2197, _2198));
    float _4362 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2188 * _2188;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2224 = (exp2(log2(1.0 - (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2225 = 1.0 - _2188;
    float _2235 = (0.5 / (((_2127 * ((_2202 * _2225) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2225) + _2188) * _2202))) * _2202;
    float _4373 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2237 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    float _2247 = (((_2224 * cbLight._m0[_2176].x) * _2237) * _1985) + (((_2151 * cbLight._m0[_2098].x) * _2165) * _1995);
    float _2248 = (((_2224 * cbLight._m0[_2176].y) * _2237) * _1985) + (((_2151 * cbLight._m0[_2098].y) * _2165) * _1995);
    float _2249 = (((_2224 * cbLight._m0[_2176].z) * _2237) * _1985) + (((_2151 * cbLight._m0[_2098].z) * _2165) * _1995);
    float _2311;
    float _2313;
    float _2315;
    if (_2035)
    {
        _2311 = _2247;
        _2313 = _2248;
        _2315 = _2249;
    }
    else
    {
        uint _2317 = _1962 + 2u;
        uint _2321 = _1962 + 10u;
        float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _736) * 0.949999988079071044921875);
        float _2336 = _2335 * _2335;
        float _2337 = cbLight._m0[_2317].x + _812;
        float _2338 = cbLight._m0[_2317].y + _813;
        float _2339 = cbLight._m0[_2317].z + _814;
        float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
        float _2344 = _2343 * _2337;
        float _2345 = _2343 * _2338;
        float _2346 = _2343 * _2339;
        float _2347 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2317].xyz));
        float _4384 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2350 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2351 = dot(vec3(_733, _734, _735), vec3(_2344, _2345, _2346));
        float _4395 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _2355 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2344, _2345, _2346));
        float _4406 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2359 = _2336 * _2336;
        float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
        float _2372 = (exp2(log2(1.0 - (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2373 = 1.0 - _2336;
        float _2383 = (0.5 / (((_2127 * ((_2350 * _2373) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2373) + _2336) * _2350))) * _2350;
        float _4417 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2385 = (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
        float _2386 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2311 = (((_2372 * cbLight._m0[_2321].x) * _2385) * _2386) + _2247;
        _2313 = (((_2372 * cbLight._m0[_2321].y) * _2385) * _2386) + _2248;
        _2315 = (((_2372 * cbLight._m0[_2321].z) * _2385) * _2386) + _2249;
    }
    float _2421;
    float _2423;
    float _2425;
    if (_2053)
    {
        _2421 = _2311;
        _2423 = _2313;
        _2425 = _2315;
    }
    else
    {
        uint _2432 = _1962 + 3u;
        uint _2436 = _1962 + 11u;
        float _2450 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2432].w)) * _736) * 0.949999988079071044921875);
        float _2451 = _2450 * _2450;
        float _2452 = cbLight._m0[_2432].x + _812;
        float _2453 = cbLight._m0[_2432].y + _813;
        float _2454 = cbLight._m0[_2432].z + _814;
        float _2458 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
        float _2459 = _2458 * _2452;
        float _2460 = _2458 * _2453;
        float _2461 = _2458 * _2454;
        float _2462 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_2432].xyz));
        float _4433 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2465 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _2466 = dot(vec3(_733, _734, _735), vec3(_2459, _2460, _2461));
        float _4444 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2470 = dot(vec3(cbLight._m0[_2432].xyz), vec3(_2459, _2460, _2461));
        float _4455 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2474 = _2451 * _2451;
        float _2478 = ((_2469 * _2469) * (_2474 + (-1.0))) + 1.0;
        float _2487 = (exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2488 = 1.0 - _2451;
        float _2498 = (0.5 / (((_2127 * ((_2465 * _2488) + _2451)) + 9.9999999392252902907785028219223e-09) + (((_2127 * _2488) + _2451) * _2465))) * _2465;
        float _4466 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2500 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2474 / ((_2478 * _2478) * 3.141590118408203125));
        float _2501 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
        _2421 = (((_2487 * cbLight._m0[_2436].x) * _2500) * _2501) + _2311;
        _2423 = (((_2487 * cbLight._m0[_2436].y) * _2500) * _2501) + _2313;
        _2425 = (((_2487 * cbLight._m0[_2436].z) * _2500) * _2501) + _2315;
    }
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    if (_1960.y == 0u)
    {
        float _2576 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2577 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2576;
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2576;
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2576;
        uvec4 _2591 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2592 = _2591.x;
        uint _2603 = uint((float(_2591.y) * floor(float(uint(cbSceneParam._m0[85u].y * _833) / _2592))) + floor(float(uint(cbSceneParam._m0[85u].x * _832) / _2592)));
        float _2613 = (log2(_2579 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2614 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        uint _2617 = uint(isnan(14.0) ? _2614 : (isnan(_2614) ? 14.0 : min(_2614, 14.0)));
        uvec4 _2622 = texelFetch(g_lightClusterGridBuffer, int(((_2617 << 2u) + (_2603 << 6u)) >> 2u));
        uint _2623 = _2622.x;
        uint _2624 = _2591.z;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        if (((((1u << ((_2624 >> 4u) & 15u)) + 4294967295u) & _2623) == 0u) || ((_2624 & 240u) == 0u))
        {
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
        }
        else
        {
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            uint _2883 = 0u;
            uint _2892;
            bool _2893;
            for (;;)
            {
                _2892 = texelFetch(g_lightClassification, int((((_2617 << 5u) + (_2603 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                _2893 = _2892 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2893)
                {
                    frontier_phi_66_pred = _2877;
                    frontier_phi_66_pred_1 = _2882;
                    frontier_phi_66_pred_2 = _2881;
                    frontier_phi_66_pred_3 = _2880;
                    frontier_phi_66_pred_4 = _2879;
                    frontier_phi_66_pred_5 = _2878;
                }
                else
                {
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    uint _3028;
                    _3022 = _2877;
                    _3023 = _2878;
                    _3024 = _2879;
                    _3025 = _2880;
                    _3026 = _2881;
                    _3027 = _2882;
                    _3028 = _2892;
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    for (;;)
                    {
                        uint _3032 = uint(findLSB(_3028)) + (_2883 << 5u);
                        uint _3029 = (_3028 + 4294967295u) & _3028;
                        uint _3034 = _3032 * 48u;
                        vec4 _3048 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3034)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3034 + 3u)).x));
                        uint _3054 = (_3032 * 48u) + 4u;
                        vec4 _3067 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3054)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3054 + 3u)).x));
                        uint _3073 = (_3032 * 48u) + 8u;
                        vec3 _3084 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3073)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 2u)).x));
                        float _3088 = _3048.x - _2577;
                        float _3089 = _3048.y - _2578;
                        float _3090 = _3048.z - _2579;
                        float _3091 = dot(vec3(_3088, _3089, _3090), vec3(_3088, _3089, _3090));
                        float _3094 = inversesqrt(_3091);
                        float _3095 = _3094 * _3088;
                        float _3096 = _3094 * _3089;
                        float _3097 = _3094 * _3090;
                        float _3098 = dot(vec3(_851, _854, _857), vec3(_3095, _3096, _3097));
                        float _3103 = 1.0 - (_3091 * _3048.w);
                        float _4492 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3104 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3105 = sqrt(_3091) * _3067.w;
                        float _3108 = 1.39999997615814208984375 / (_3105 + 1.39999997615814208984375);
                        float _3109 = _3108 * _3108;
                        float _3112 = ((1.0 - _3109) * _3098) + _3109;
                        float _3115 = _3105 * _3105;
                        float _3119 = ((isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0))) * _3104) / ((_3115 * 0.699999988079071044921875) + 1.0);
                        float _3123 = (-0.0) - _2577;
                        float _3124 = (-0.0) - _2578;
                        float _3125 = (-0.0) - _2579;
                        float _3129 = inversesqrt(dot(vec3(_3123, _3124, _3125), vec3(_3123, _3124, _3125)));
                        float _3130 = _3129 * _3123;
                        float _3131 = _3129 * _3124;
                        float _3132 = _3129 * _3125;
                        float _3140 = exp2(log2(1.0 / ((_3115 * 3.5) + 5.0)) * 0.25);
                        float _3141 = 1.0 - _911;
                        float _3148 = sqrt(1.0 - ((1.0 - (_3141 * _3141)) * (1.0 - (_3140 * _3140))));
                        float _3149 = _3148 * _3148;
                        float _3150 = _3149 * _3149;
                        float _3151 = _3130 + _3095;
                        float _3152 = _3131 + _3096;
                        float _3153 = _3132 + _3097;
                        float _3157 = inversesqrt(dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153)));
                        float _3161 = dot(vec3(_851, _854, _857), vec3(_3130, _3131, _3132));
                        float _4508 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                        float _3164 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3165 = dot(vec3(_851, _854, _857), vec3(_3157 * _3151, _3157 * _3152, _3157 * _3153));
                        float _4519 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3168 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                        float _3172 = ((_3168 * _3168) * (_3150 + (-1.0))) + 1.0;
                        float _3173 = _3108 * _3149;
                        float _3174 = _3173 * _3173;
                        float _3177 = ((1.0 - _3174) * _3098) + _3174;
                        float _4530 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3178 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                        float _3179 = 1.0 - _3149;
                        float _3189 = (0.5 / (((_3178 * ((_3164 * _3179) + _3149)) + 9.9999999392252902907785028219223e-09) + (((_3178 * _3179) + _3149) * _3164))) * _3178;
                        float _4541 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3200 = (((_3150 * 3.1415927410125732421875) * (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0)))) / ((_3172 * _3172) * ((_3115 * 2.1991131305694580078125) + 3.141590118408203125))) * _3104;
                        _2952 = (_3119 * _3067.x) + _3025;
                        _2953 = (_3119 * _3067.y) + _3026;
                        _2954 = (_3119 * _3067.z) + _3027;
                        _2949 = (_3200 * _3084.x) + _3022;
                        _2950 = (_3200 * _3084.y) + _3023;
                        _2951 = (_3200 * _3084.z) + _3024;
                        if (_3029 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3022 = _2949;
                            _3023 = _2950;
                            _3024 = _2951;
                            _3025 = _2952;
                            _3026 = _2953;
                            _3027 = _2954;
                            _3028 = _3029;
                        }
                    }
                    frontier_phi_66_pred = _2949;
                    frontier_phi_66_pred_1 = _2954;
                    frontier_phi_66_pred_2 = _2953;
                    frontier_phi_66_pred_3 = _2952;
                    frontier_phi_66_pred_4 = _2951;
                    frontier_phi_66_pred_5 = _2950;
                }
                _2725 = frontier_phi_66_pred;
                _2735 = frontier_phi_66_pred_1;
                _2733 = frontier_phi_66_pred_2;
                _2731 = frontier_phi_66_pred_3;
                _2729 = frontier_phi_66_pred_4;
                _2727 = frontier_phi_66_pred_5;
                uint _2884 = _2883 + 1u;
                if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2877 = _2725;
                    _2878 = _2727;
                    _2879 = _2729;
                    _2880 = _2731;
                    _2881 = _2733;
                    _2882 = _2735;
                    _2883 = _2884;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
        }
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.z;
        uint _2741 = (_2739 >> 8u) & 15u;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        if (((4294967295u << _2741) & _2623) == 0u)
        {
            _2845 = _2724;
            _2847 = _2726;
            _2849 = _2728;
            _2851 = _2730;
            _2853 = _2732;
            _2855 = _2734;
        }
        else
        {
            float _2870 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
            float _2871 = _2870 * _2577;
            float _2872 = _2870 * _2578;
            float _2873 = _2870 * _2579;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2741 < ((_2739 >> 12u) & 15u))
            {
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _3005 = _2724;
                float _3006 = _2726;
                float _3007 = _2728;
                float _3008 = _2730;
                float _3009 = _2732;
                float _3010 = _2734;
                uint _3011 = _2741;
                uint _3020;
                bool _3021;
                for (;;)
                {
                    _3020 = texelFetch(g_lightClassification, int((((_2617 << 5u) + (_2603 << 9u)) + (_3011 << 2u)) >> 2u)).x;
                    _3021 = _3020 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3021)
                    {
                        frontier_phi_77_pred = _3010;
                        frontier_phi_77_pred_1 = _3009;
                        frontier_phi_77_pred_2 = _3008;
                        frontier_phi_77_pred_3 = _3007;
                        frontier_phi_77_pred_4 = _3006;
                        frontier_phi_77_pred_5 = _3005;
                    }
                    else
                    {
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3227 = _3005;
                        float _3228 = _3006;
                        float _3229 = _3007;
                        float _3230 = _3008;
                        float _3231 = _3009;
                        float _3232 = _3010;
                        uint _3233 = _3020;
                        uint _3234;
                        vec4 _3259;
                        float _3260;
                        vec4 _3275;
                        vec3 _3287;
                        vec4 _3302;
                        vec4 _3317;
                        float _3363;
                        bool _3364;
                        for (;;)
                        {
                            uint _3244 = ((_3011 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3233));
                            _3234 = (_3233 + 4294967295u) & _3233;
                            uint _3246 = _3244 * 40u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            _3260 = _3259.w;
                            uint _3262 = (_3244 * 40u) + 4u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3277 = (_3244 * 40u) + 8u;
                            _3287 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x));
                            uint _3289 = (_3244 * 40u) + 16u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3304 = (_3244 * 40u) + 20u;
                            _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3319 = (_3244 * 40u) + 24u;
                            vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3338 = (_3244 * 40u) + 28u;
                            vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            _3363 = fma(_2579, _3351.z, fma(_2578, _3351.y, _3351.x * _2577)) + _3351.w;
                            _3364 = !((fma(_2579, _3332.z, fma(_2578, _3332.y, _3332.x * _2577)) + _3332.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3364)
                            {
                                float _3391 = _3259.x - _2577;
                                float _3392 = _3259.y - _2578;
                                float _3393 = _3259.z - _2579;
                                float _3394 = dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393));
                                float _3397 = inversesqrt(_3394);
                                float _3398 = _3397 * _3391;
                                float _3399 = _3397 * _3392;
                                float _3400 = _3397 * _3393;
                                float _3404 = 1.0 - (_3394 / (_3260 * _3260));
                                float _4552 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3405 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3409 = sqrt(_3394) * _3275.w;
                                float _3411 = 1.39999997615814208984375 / (_3409 + 1.39999997615814208984375);
                                float _3412 = _3411 * _3411;
                                float _3415 = ((1.0 - _3412) * dot(vec3(_3398, _3399, _3400), vec3(_851, _854, _857))) + _3412;
                                float _3418 = _3409 * _3409;
                                float _3422 = (fma(_2579, _3302.z, fma(_2578, _3302.y, _3302.x * _2577)) + _3302.w) / _3363;
                                float _3423 = (fma(_2579, _3317.z, fma(_2578, _3317.y, _3317.x * _2577)) + _3317.w) / _3363;
                                float _3427 = 1.0 - dot(vec2(_3422, _3423), vec2(_3422, _3423));
                                float _4568 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3429 = _3428 * (((isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0))) * _3405) / ((_3418 * 0.699999988079071044921875) + 1.0));
                                float _3441 = exp2(log2(1.0 / ((_3418 * 3.5) + 5.0)) * 0.25);
                                float _3442 = 1.0 - _911;
                                float _3449 = sqrt(1.0 - ((1.0 - (_3442 * _3442)) * (1.0 - (_3441 * _3441))));
                                float _3450 = _3449 * _3449;
                                float _3451 = _3450 * _3450;
                                float _3452 = _3398 - _2871;
                                float _3453 = _3399 - _2872;
                                float _3454 = _3400 - _2873;
                                float _3458 = inversesqrt(dot(vec3(_3452, _3453, _3454), vec3(_3452, _3453, _3454)));
                                float _3462 = dot(vec3(_851, _854, _857), vec3((-0.0) - _2871, (-0.0) - _2872, (-0.0) - _2873));
                                float _4579 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                                float _3465 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3466 = dot(vec3(_851, _854, _857), vec3(_3458 * _3452, _3458 * _3453, _3458 * _3454));
                                float _4590 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3469 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                                float _3473 = ((_3469 * _3469) * (_3451 + (-1.0))) + 1.0;
                                float _3474 = _3411 * _3450;
                                float _3475 = _3474 * _3474;
                                float _3481 = ((1.0 - _3475) * dot(vec3(_851, _854, _857), vec3(_3398, _3399, _3400))) + _3475;
                                float _4601 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3482 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
                                float _3483 = 1.0 - _3450;
                                float _3493 = (0.5 / (((_3482 * ((_3465 * _3483) + _3450)) + 9.9999999392252902907785028219223e-09) + (((_3482 * _3483) + _3450) * _3465))) * _3482;
                                float _4612 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3503 = (_3428 * _3405) * (((_3451 * 3.1415927410125732421875) * (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) / ((_3473 * _3473) * ((_3418 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3429 * _3275.y;
                                frontier_phi_83_pred_1 = _3429 * _3275.x;
                                frontier_phi_83_pred_2 = _3503 * _3287.z;
                                frontier_phi_83_pred_3 = _3503 * _3287.y;
                                frontier_phi_83_pred_4 = _3503 * _3287.x;
                                frontier_phi_83_pred_5 = _3429 * _3275.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3511 = frontier_phi_83_pred;
                            _3510 = frontier_phi_83_pred_1;
                            _3509 = frontier_phi_83_pred_2;
                            _3508 = frontier_phi_83_pred_3;
                            _3507 = frontier_phi_83_pred_4;
                            _3512 = frontier_phi_83_pred_5;
                            _3217 = _3510 + _3230;
                            _3218 = _3511 + _3231;
                            _3219 = _3512 + _3232;
                            _3214 = _3507 + _3227;
                            _3215 = _3508 + _3228;
                            _3216 = _3509 + _3229;
                            if (_3234 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3234;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3219;
                        frontier_phi_77_pred_1 = _3218;
                        frontier_phi_77_pred_2 = _3217;
                        frontier_phi_77_pred_3 = _3216;
                        frontier_phi_77_pred_4 = _3215;
                        frontier_phi_77_pred_5 = _3214;
                    }
                    _2856 = frontier_phi_77_pred;
                    _2854 = frontier_phi_77_pred_1;
                    _2852 = frontier_phi_77_pred_2;
                    _2850 = frontier_phi_77_pred_3;
                    _2848 = frontier_phi_77_pred_4;
                    _2846 = frontier_phi_77_pred_5;
                    uint _3012 = _3011 + 1u;
                    if (_3012 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3005 = _2846;
                        _3006 = _2848;
                        _3007 = _2850;
                        _3008 = _2852;
                        _3009 = _2854;
                        _3010 = _2856;
                        _3011 = _3012;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2850;
                frontier_phi_58_59_ladder_1 = _2856;
                frontier_phi_58_59_ladder_2 = _2854;
                frontier_phi_58_59_ladder_3 = _2852;
                frontier_phi_58_59_ladder_4 = _2848;
                frontier_phi_58_59_ladder_5 = _2846;
            }
            else
            {
                frontier_phi_58_59_ladder = _2728;
                frontier_phi_58_59_ladder_1 = _2734;
                frontier_phi_58_59_ladder_2 = _2732;
                frontier_phi_58_59_ladder_3 = _2730;
                frontier_phi_58_59_ladder_4 = _2726;
                frontier_phi_58_59_ladder_5 = _2724;
            }
            _2845 = frontier_phi_58_59_ladder_5;
            _2847 = frontier_phi_58_59_ladder_4;
            _2849 = frontier_phi_58_59_ladder;
            _2851 = frontier_phi_58_59_ladder_3;
            _2853 = frontier_phi_58_59_ladder_2;
            _2855 = frontier_phi_58_59_ladder_1;
        }
        float _2860 = isnan(1.0) ? _895 : (isnan(_895) ? 1.0 : min(_895, 1.0));
        _2636 = (_2860 * _2851) + _2091;
        _2638 = (_2860 * _2853) + _2093;
        _2640 = (_2860 * _2855) + _2095;
        _2642 = ((_2845 * 0.039999999105930328369140625) * _2860) + _2421;
        _2644 = ((_2847 * 0.039999999105930328369140625) * _2860) + _2423;
        _2646 = ((_2849 * 0.039999999105930328369140625) * _2860) + _2425;
    }
    else
    {
        _2636 = _2091;
        _2638 = _2093;
        _2640 = _2095;
        _2642 = _2421;
        _2644 = _2423;
        _2646 = _2425;
    }
    float _4628 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4639 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4650 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2663 = ((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2636 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _895))) + ((_2642 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1731)) * cbPerFrame._m0[3u].x);
    float _2664 = ((isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * (_2638 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _895))) + ((_2644 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1731)) * cbPerFrame._m0[3u].x);
    float _2665 = ((isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2640 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _895))) + ((_2646 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1731)) * cbPerFrame._m0[3u].x);
    uint _2666 = _253 + 6u;
    float _2674 = _832 / cbSceneParam._m0[86u].x;
    float _2675 = _833 / cbSceneParam._m0[86u].y;
    vec4 _2689 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2674, _2675, (log2((isnan(cbSceneParam._m0[77u].w) ? _754 : (isnan(_754) ? cbSceneParam._m0[77u].w : min(_754, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2691 = _2689.x;
    float _2692 = _2689.y;
    float _2693 = _2689.z;
    float _2694 = _2689.w;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    if (_754 > cbSceneParam._m0[78u].w)
    {
        float _2749 = isnan(_754) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _754 : min(cbSceneParam._m0[80u].w, _754));
        float _2750 = _2749 / _754;
        float _2761 = _2750 * _805;
        float _2762 = _806 * _2750;
        float _2763 = (-0.0) - _2762;
        float _2765 = _2750 * _807;
        float _2767 = (cbSceneParam._m0[77u].w * _2763) / _2749;
        float _2768 = _2767 + cbSceneParam._m0[79u].w;
        float _2769 = cbSceneParam._m0[79u].w - _2762;
        float _2775 = sqrt(((_2761 * _2761) + (_2762 * _2762)) + (_2765 * _2765));
        float _2778 = (1.0 - (cbSceneParam._m0[77u].w / _2749)) * _2775;
        float _2783 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2785 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2962;
        if (abs((_2763 - _2767) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2962 = ((((_2768 > 0.0) ? exp2(_2783 * _2768) : (2.0 - exp2(_2785 * _2768))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2778;
        }
        else
        {
            float _2906 = 1.0 / cbSceneParam._m0[80u].x;
            float _2907 = isnan(_2769) ? _2768 : (isnan(_2768) ? _2769 : max(_2768, _2769));
            float _2908 = isnan(_2769) ? _2768 : (isnan(_2768) ? _2769 : min(_2768, _2769));
            float _2917 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : min(_2907, 0.0));
            float _2918 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : min(_2908, 0.0));
            _2962 = ((abs(_2775 / _2763) * cbSceneParam._m0[80u].y) * ((((_2917 - _2918) * 2.0) - ((exp2(_2783 * (isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0)))) - exp2(_2783 * (isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0))))) * _2906)) - ((exp2(_2785 * _2917) - exp2(_2785 * _2918)) * _2906))) + (_2778 * cbSceneParam._m0[80u].z);
        }
        vec4 _2964 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2674, _2675, 1.0), 0.0);
        float _2973 = exp2((_2962 * (-1.44269502162933349609375)) * (1.0 - _2964.w));
        float _2974 = log2(_2973);
        float _2990 = log2(_2694);
        _2787 = (exp2(_2990 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2974 * cbSceneParam._m0[78u].x)) * _2964.x) / cbSceneParam._m0[78u].x)) + _2691;
        _2789 = (exp2(_2990 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2974 * cbSceneParam._m0[78u].y)) * _2964.y) / cbSceneParam._m0[78u].y)) + _2692;
        _2791 = (exp2(_2990 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2974 * cbSceneParam._m0[78u].z)) * _2964.z) / cbSceneParam._m0[78u].z)) + _2693;
        _2793 = _2973 * _2694;
    }
    else
    {
        _2787 = _2691;
        _2789 = _2692;
        _2791 = _2693;
        _2793 = _2694;
    }
    bool _3000;
    vec4 _2803;
    vec4 _2825;
    float _2827;
    float _2831;
    float _2832;
    float _2833;
    float _2834;
    bool _2844;
    for (;;)
    {
        _2803 = cbMatDynParam._m0[0u];
        float _2805 = roundEven(_2803.y);
        bool _2806 = _2805 == 3.0;
        float _2807 = log2(_2793);
        float _2814 = exp2(_2807 * cbSceneParam._m0[78u].x) * _2663;
        float _2815 = exp2(_2807 * cbSceneParam._m0[78u].y) * _2664;
        float _2816 = exp2(_2807 * cbSceneParam._m0[78u].z) * _2665;
        float _2823 = _821 + (-0.5);
        _2825 = cbMtdParam._m0[1u];
        _2827 = _2825.y * _2823;
        float _2830 = (_2805 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2831 = _2830 * (_2806 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2787)));
        _2832 = _2830 * (_2806 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2789)));
        _2833 = _2830 * (_2806 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2791)));
        _2834 = _2823 * 0.999000012874603271484375;
        _2844 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2844)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _2834) < 0.5)
            {
                _3000 = true;
                break;
            }
        }
        uint _2941 = _870 + uint(_2803.w);
        if ((cbInstanceData._m0[_2941].w < 1.0) && ((cbInstanceData._m0[_2941].w + _2834) < 0.5))
        {
            _3000 = true;
            break;
        }
        if ((_2827 + 1.0) < _2825.x)
        {
            _3000 = true;
            break;
        }
        _3000 = false;
        break;
    }
    float _3205;
    if (_3000)
    {
        discard_state = true;
        _3205 = 0.0;
    }
    else
    {
        _3205 = cbInstanceData._m0[_2666].w;
    }
    SV_Target.x = _2831;
    SV_Target.y = _2832;
    SV_Target.z = _2833;
    SV_Target.w = _3205;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2666].w;
    discard_exit();
}


