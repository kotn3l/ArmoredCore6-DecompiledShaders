#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1174;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _354 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _354) * cbMtdParam._m0[24u].x) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3478 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _379 = (_372 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _380 = (_372 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _381 = (_372 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _400 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _256) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _257) + cbTextureTilingScale._m0[14u].w));
    vec4 _420 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _256) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _257) + cbTextureTilingScale._m0[20u].w));
    vec4 _447 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _464 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _466 = _464.x;
    float _467 = _464.y;
    float _468 = _464.z;
    float _477 = ((_447.z - _468) * _372) + _468;
    float _480 = ((((_447.x - _466) * _372) + _466) * 2.0) + (-1.0);
    float _481 = ((((_447.y - _467) * _372) + _467) * 2.0) + (-1.0);
    float _482 = dot(vec2(_480, _481), vec2(_480, _481));
    float _3489 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _487 = sqrt(1.0 - (isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))));
    float _490 = _480 + ((((_420.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x);
    float _491 = _481 + ((((_420.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x);
    float _494 = fma(_487, _224, fma(_491, _231, _490 * _217));
    float _497 = fma(_487, _225, fma(_491, _232, _490 * _218));
    float _500 = fma(_487, _226, fma(_491, _233, _490 * _219));
    float _504 = inversesqrt(dot(vec3(_494, _497, _500), vec3(_494, _497, _500)));
    vec4 _520 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _548 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _550 = _548.x;
    float _551 = 1.0 - _550;
    float _555 = ((_550 - _551) * cbMtdParam._m0[24u].z) + _551;
    float _557 = (cbMtdParam._m0[19u].x + dot(vec4(_504 * _494, _504 * _497, _504 * _500, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_555 * cbMtdParam._m0[21u].z);
    float _3500 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _573 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_555 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3511 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _578 = ((_558 * ((_400.x * cbMtdParam._m0[18u].x) - _379)) * _574) + _379;
    float _579 = ((_558 * ((_400.y * cbMtdParam._m0[18u].y) - _380)) * _574) + _380;
    float _580 = ((_558 * ((_400.z * cbMtdParam._m0[18u].z) - _381)) * _574) + _381;
    float _585 = (((_420.z - _477) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _477;
    vec4 _598 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _605 = (_598.x * 2.0) + (-1.0);
    float _606 = (_598.y * 2.0) + (-1.0);
    float _607 = dot(vec2(_605, _606), vec2(_605, _606));
    float _3522 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _616 = (((_598.z - _585) * _558) * _574) + _585;
    float _631 = (((cbMtdParam._m0[21u].x * _490) + ((_605 - _490) * _558)) * _574) + _490;
    float _632 = (((cbMtdParam._m0[21u].x * _491) + ((_606 - _491) * _558)) * _574) + _491;
    float _633 = (((sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) - _487) * _558) * _574) + _487;
    float _638 = cbMtdParam._m0[22u].x + _520.w;
    float _641 = fma(_633, _224, fma(_632, _231, _631 * _217));
    float _644 = fma(_633, _225, fma(_632, _232, _631 * _218));
    float _647 = fma(_633, _226, fma(_632, _233, _631 * _219));
    float _651 = inversesqrt(dot(vec3(_641, _644, _647), vec3(_641, _644, _647)));
    float _652 = _651 * _641;
    float _653 = _651 * _644;
    float _654 = _651 * _647;
    float _3533 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _655 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3555 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3566 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3577 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _673 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _725 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _715);
    float _726 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _715);
    float _727 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _715);
    float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
    float _732 = _725 * _731;
    float _733 = _726 * _731;
    float _734 = _727 * _731;
    float _740 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _741 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _759 = fma(_654, cbSceneParam._m0[5u].z, fma(_653, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _652));
    float _762 = fma(_654, cbSceneParam._m0[6u].z, fma(_653, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _652));
    float _765 = fma(_654, cbSceneParam._m0[7u].z, fma(_653, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _652));
    uint _779 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _785 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_779].x;
    float _786 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_779].y;
    float _787 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_779].z;
    float _3588 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _3599 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _3610 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _790 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    vec4 _799 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _740, cbSceneParam._m0[86u].y * _741));
    float _803 = ((isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * TEXCOORD_5.w) * _799.x;
    float _804 = dot(vec3(_652, _653, _654), vec3(_732, _733, _734));
    float _807 = _804 * 2.0;
    float _811 = (_807 * _652) - _732;
    float _812 = (_807 * _653) - _733;
    float _813 = (_807 * _654) - _734;
    float _817 = abs(dot(vec3(_732, _733, _734), vec3(_652, _653, _654)));
    float _3621 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _819 = sqrt(_655);
    float _832 = exp2((_819 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_819 * 3.0));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _872 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1173;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _898 = fma(_872, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _864));
        float _902 = fma(_872, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _864));
        float _906 = fma(_872, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _864));
        float _931 = _864 + _652;
        float _932 = _868 + _653;
        float _933 = _872 + _654;
        float _943 = fma(_933, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931)) - _898;
        float _944 = fma(_933, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931)) - _902;
        float _945 = fma(_933, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931)) - _906;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_898 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_902 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[34u].z) + ((((((_906 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _1001 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_967.x + (-0.5));
        float _1003 = _1001 * (_967.y + (-0.5));
        float _1004 = _1001 * (_967.z + (-0.5));
        float _1011 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_974.x + (-0.5));
        float _1013 = _1011 * (_974.y + (-0.5));
        float _1014 = _1011 * (_974.z + (-0.5));
        float _1021 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_981.x + (-0.5));
        float _1023 = _1021 * (_981.y + (-0.5));
        float _1024 = _1021 * (_981.z + (-0.5));
        float _1031 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_988.x + (-0.5));
        float _1033 = _1031 * (_988.y + (-0.5));
        float _1034 = _1031 * (_988.z + (-0.5));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = _1002 * 0.5;
        float _1039 = _1012 * 0.5;
        float _1040 = _1022 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1055 = (dot(vec3(_652, _653, _654), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1065 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3669 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1067 + 1.0))) + _1072) * _1035;
        float _1082 = _1003 * 0.5;
        float _1083 = _1013 * 0.5;
        float _1084 = _1023 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_652, _653, _654), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3702 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1109 + 1.0))) + _1114) * _1036;
        float _1124 = _1004 * 0.5;
        float _1125 = _1014 * 0.5;
        float _1126 = _1024 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_652, _653, _654), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3735 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1151 + 1.0))) + _1156) * _1037;
        _1173 = _1004;
        _1175 = _1003;
        _1176 = _1002;
        _1177 = _1014;
        _1178 = _1013;
        _1179 = _1012;
        _1180 = _1024;
        _1181 = _1023;
        _1182 = _1022;
        _1183 = _1037;
        _1184 = _1036;
        _1185 = _1035;
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
    }
    else
    {
        _1173 = _1174;
        _1175 = _1174;
        _1176 = _1174;
        _1177 = _1174;
        _1178 = _1174;
        _1179 = _1174;
        _1180 = _1174;
        _1181 = _1174;
        _1182 = _1174;
        _1183 = _1174;
        _1184 = _1174;
        _1185 = _1174;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1213 = fma(_872, cbModelParam._m0[30u].z, fma(_868, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _864));
        float _1217 = fma(_872, cbModelParam._m0[31u].z, fma(_868, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _864));
        float _1221 = fma(_872, cbModelParam._m0[32u].z, fma(_868, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _864));
        float _1244 = _864 + _652;
        float _1245 = _868 + _653;
        float _1246 = _872 + _654;
        float _1256 = fma(_1246, cbModelParam._m0[30u].z, fma(_1245, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1244)) - _1213;
        float _1257 = fma(_1246, cbModelParam._m0[31u].z, fma(_1245, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1244)) - _1217;
        float _1258 = fma(_1246, cbModelParam._m0[32u].z, fma(_1245, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1244)) - _1221;
        float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
        float _1275 = ((_1262 * _1256) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1213 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1262 * _1257) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1217 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1262 * _1258) / cbModelParam._m0[35u].z) + ((((((_1221 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        float _1312 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1279.x + (-0.5));
        float _1314 = _1312 * (_1279.y + (-0.5));
        float _1315 = _1312 * (_1279.z + (-0.5));
        float _1322 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1286.x + (-0.5));
        float _1324 = _1322 * (_1286.y + (-0.5));
        float _1325 = _1322 * (_1286.z + (-0.5));
        float _1332 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1293.x + (-0.5));
        float _1334 = _1332 * (_1293.y + (-0.5));
        float _1335 = _1332 * (_1293.z + (-0.5));
        float _1342 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1300.x + (-0.5));
        float _1344 = _1342 * (_1300.y + (-0.5));
        float _1345 = _1342 * (_1300.z + (-0.5));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = _1313 * 0.5;
        float _1350 = _1323 * 0.5;
        float _1351 = _1333 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_652, _653, _654), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3798 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1376 + 1.0))) + _1381) * _1346;
        float _1391 = _1314 * 0.5;
        float _1392 = _1324 * 0.5;
        float _1393 = _1334 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_652, _653, _654), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _3831 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1418 + 1.0))) + _1423) * _1347;
        float _1433 = _1315 * 0.5;
        float _1434 = _1325 * 0.5;
        float _1435 = _1335 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_652, _653, _654), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _3864 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1460 + 1.0))) + _1465) * _1348;
        _1482 = _1315;
        _1483 = _1314;
        _1484 = _1313;
        _1485 = _1325;
        _1486 = _1324;
        _1487 = _1323;
        _1488 = _1335;
        _1489 = _1334;
        _1490 = _1333;
        _1491 = _1348;
        _1492 = _1347;
        _1493 = _1346;
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1174;
        _1483 = _1174;
        _1484 = _1174;
        _1485 = _1174;
        _1486 = _1174;
        _1487 = _1174;
        _1488 = _1174;
        _1489 = _1174;
        _1490 = _1174;
        _1491 = _1174;
        _1492 = _1174;
        _1493 = _1174;
        _1494 = 0.0;
        _1495 = 0.0;
        _1496 = 0.0;
    }
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1186)) + _1186;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1187)) + _1187;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1188)) + _1188;
    float _1529 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1507, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1532 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1507, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1535 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1507, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1506));
    float _1550 = _811 * 0.5;
    float _1551 = _812 * 0.5;
    float _1552 = _813 * 0.5;
    float _1553 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1556 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1559 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1593;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1566 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1173, _1177, _1180, _1183));
        float _1570 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1574 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1581 = dot(vec4(cbModelParam._m0[39u]), vec4(_1550, _1551, _1552, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1604;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1595 = dot(vec4(cbModelParam._m0[40u]), vec4(_1550, _1551, _1552, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1608 = (_1604 * cbModelParam._m0[1u].x) + (_1593 * (1.0 - cbModelParam._m0[1u].x));
    float _1618 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _655);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1618 : min(cbModelParam._m0[25u].z, _1618));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1666 = fma(_872, cbModelParam._m0[13u].z, fma(_868, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864)) + cbModelParam._m0[13u].w;
        float _1670 = fma(_872, cbModelParam._m0[14u].z, fma(_868, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864)) + cbModelParam._m0[14u].w;
        float _1674 = fma(_872, cbModelParam._m0[15u].z, fma(_868, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864)) + cbModelParam._m0[15u].w;
        float _1677 = fma(_813, cbModelParam._m0[13u].z, fma(_812, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _811));
        float _1680 = fma(_813, cbModelParam._m0[14u].z, fma(_812, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _811));
        float _1683 = fma(_813, cbModelParam._m0[15u].z, fma(_812, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _811));
        float _1711;
        if (_1677 > 0.0)
        {
            _1711 = abs((1.0 - _1666) / _1677);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1666 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1711 = frontier_phi_14_12_ladder;
        }
        float _1911;
        if (_1680 > 0.0)
        {
            _1911 = abs((1.0 - _1670) / _1680);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1670 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1911 = frontier_phi_23_19_ladder;
        }
        float _2154;
        if (_1683 > 0.0)
        {
            _2154 = abs((1.0 - _1674) / _1683);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1674 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2154 = frontier_phi_35_30_ladder;
        }
        float _2156 = isnan(_1911) ? _1711 : (isnan(_1711) ? _1911 : min(_1711, _1911));
        float _2157 = isnan(_2154) ? _2156 : (isnan(_2156) ? _2154 : min(_2156, _2154));
        float _2161 = (_2157 * _1677) + _1666;
        float _2162 = (_2157 * _1680) + _1670;
        float _2163 = (_2157 * _1683) + _1674;
        float _2164 = _2157 * 9.9999997473787516355514526367188e-05;
        float _2166 = (-1.0) - _2164;
        float _2168 = _2164 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2163 > _2168) || ((_2163 < _2166) || ((_2162 > _2168) || ((_2162 < _2166) || ((_2161 < _2166) || (_2161 > _2168))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2287 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2163, cbModelParam._m0[9u].z, fma(_2162, cbModelParam._m0[9u].y, _2161 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2163, cbModelParam._m0[10u].z, fma(_2162, cbModelParam._m0[10u].y, _2161 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2163, cbModelParam._m0[11u].z, fma(_2162, cbModelParam._m0[11u].y, _2161 * cbModelParam._m0[11u].x))), _1619);
            frontier_phi_13_35_ladder = _2287.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2287.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2287.x * cbModelParam._m0[1u].y;
        }
        _1699 = frontier_phi_13_35_ladder_2;
        _1701 = frontier_phi_13_35_ladder_1;
        _1703 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_811, _812, _813), _1619);
        _1699 = _1687.x * cbModelParam._m0[1u].y;
        _1701 = _1687.y * cbModelParam._m0[1u].y;
        _1703 = _1687.z * cbModelParam._m0[1u].y;
    }
    float _1707 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _655);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1707 : min(cbModelParam._m0[25u].w, _1707));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1761 = fma(_872, cbModelParam._m0[21u].z, fma(_868, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864)) + cbModelParam._m0[21u].w;
        float _1765 = fma(_872, cbModelParam._m0[22u].z, fma(_868, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864)) + cbModelParam._m0[22u].w;
        float _1769 = fma(_872, cbModelParam._m0[23u].z, fma(_868, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864)) + cbModelParam._m0[23u].w;
        float _1772 = fma(_813, cbModelParam._m0[21u].z, fma(_812, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _811));
        float _1775 = fma(_813, cbModelParam._m0[22u].z, fma(_812, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _811));
        float _1778 = fma(_813, cbModelParam._m0[23u].z, fma(_812, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _811));
        float _1916;
        if (_1772 > 0.0)
        {
            _1916 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1916 = frontier_phi_25_21_ladder;
        }
        float _2181;
        if (_1775 > 0.0)
        {
            _2181 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2181 = frontier_phi_37_32_ladder;
        }
        float _2386;
        if (_1778 > 0.0)
        {
            _2386 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2386 = frontier_phi_46_43_ladder;
        }
        float _2388 = isnan(_2181) ? _1916 : (isnan(_1916) ? _2181 : min(_1916, _2181));
        float _2389 = isnan(_2386) ? _2388 : (isnan(_2388) ? _2386 : min(_2388, _2386));
        float _2393 = (_2389 * _1772) + _1761;
        float _2394 = (_2389 * _1775) + _1765;
        float _2395 = (_2389 * _1778) + _1769;
        float _2396 = _2389 * 9.9999997473787516355514526367188e-05;
        float _2397 = (-1.0) - _2396;
        float _2399 = _2396 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2395 > _2399) || ((_2395 < _2397) || ((_2394 > _2399) || ((_2394 < _2397) || ((_2393 < _2397) || (_2393 > _2399))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2594 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2395, cbModelParam._m0[17u].z, fma(_2394, cbModelParam._m0[17u].y, _2393 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2395, cbModelParam._m0[18u].z, fma(_2394, cbModelParam._m0[18u].y, _2393 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2395, cbModelParam._m0[19u].z, fma(_2394, cbModelParam._m0[19u].y, _2393 * cbModelParam._m0[19u].x))), _1708);
            frontier_phi_22_46_ladder = _2594.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2594.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2594.x * cbModelParam._m0[1u].z;
        }
        _1797 = frontier_phi_22_46_ladder_2;
        _1799 = frontier_phi_22_46_ladder_1;
        _1801 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_811, _812, _813), _1708);
        _1797 = _1781.x * cbModelParam._m0[1u].z;
        _1799 = _1781.y * cbModelParam._m0[1u].z;
        _1801 = _1781.z * cbModelParam._m0[1u].z;
    }
    float _1813 = ((((1.0 - _832) * ((_819 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_832 * _819)) * _803;
    float _1814 = _1813 * ((cbModelParam._m0[1u].w * (_1797 - _1699)) + _1699);
    float _1815 = _1813 * ((cbModelParam._m0[1u].w * (_1799 - _1701)) + _1701);
    float _1816 = _1813 * ((cbModelParam._m0[1u].w * (_1801 - _1703)) + _1703);
    float _1819 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, _1814 * cbSceneParam._m0[91u].x));
    uvec4 _1835 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1837 = _1835.x * 14u;
    uint _1838 = _1837 + 13u;
    float _1845 = _803 + (-1.0);
    float _1850 = (cbLight._m0[_1838].x * _1845) + 1.0;
    float _1851 = (cbLight._m0[_1838].y * _1845) + 1.0;
    float _1852 = (cbLight._m0[_1838].z * _1845) + 1.0;
    float _1853 = (cbLight._m0[_1838].w * _1845) + 1.0;
    uint _1854 = _1837 + 5u;
    float _1860 = isnan(1.0) ? _1851 : (isnan(_1851) ? 1.0 : min(_1851, 1.0));
    uint _1864 = _1837 + 4u;
    float _1870 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
    uint _1874 = _1837 | 1u;
    float _1885 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_652, _653, _654));
    float _1888 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_652, _653, _654));
    float _4000 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _4011 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1893 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 0.3183098733425140380859375;
    float _1895 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.3183098733425140380859375;
    float _1902 = ((cbLight._m0[_1854].x * _1860) * _1895) + ((cbLight._m0[_1864].x * _1870) * _1893);
    float _1903 = ((_1860 * cbLight._m0[_1854].y) * _1895) + ((_1870 * cbLight._m0[_1864].y) * _1893);
    float _1904 = ((_1860 * cbLight._m0[_1854].z) * _1895) + ((_1870 * cbLight._m0[_1864].z) * _1893);
    uvec4 _1908 = floatBitsToUint(cbLight._m0[_1837 + 12u]);
    bool _1910 = _1908.x == 0u;
    float _1921;
    float _1923;
    float _1925;
    if (_1910)
    {
        _1921 = _1902;
        _1923 = _1903;
        _1925 = _1904;
    }
    else
    {
        uint _1929 = _1837 + 6u;
        float _1945 = (dot(vec3(cbLight._m0[_1837 + 2u].xyz), vec3(_652, _653, _654)) * 0.5) + 0.5;
        float _1946 = _1945 * _1945;
        float _4022 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1947 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1948 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _1921 = (((cbLight._m0[_1929].x * 0.3183098733425140380859375) * _1947) * _1948) + _1902;
        _1923 = (((cbLight._m0[_1929].y * 0.3183098733425140380859375) * _1947) * _1948) + _1903;
        _1925 = (((cbLight._m0[_1929].z * 0.3183098733425140380859375) * _1947) * _1948) + _1904;
    }
    bool _1928 = _1908.y == 0u;
    float _1966;
    float _1968;
    float _1970;
    if (_1928)
    {
        _1966 = _1921;
        _1968 = _1923;
        _1970 = _1925;
    }
    else
    {
        uint _2125 = _1837 + 7u;
        float _2141 = (dot(vec3(cbLight._m0[_1837 + 3u].xyz), vec3(_652, _653, _654)) * 0.5) + 0.5;
        float _2142 = _2141 * _2141;
        float _4038 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2143 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2144 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _1966 = (((cbLight._m0[_2125].x * 0.3183098733425140380859375) * _2143) * _2144) + _1921;
        _1968 = (((cbLight._m0[_2125].y * 0.3183098733425140380859375) * _2143) * _2144) + _1923;
        _1970 = (((cbLight._m0[_2125].z * 0.3183098733425140380859375) * _2143) * _2144) + _1925;
    }
    uint _1973 = _1837 + 8u;
    float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1837].w)) * _655) * 0.949999988079071044921875);
    float _1987 = _1986 * _1986;
    float _1988 = cbLight._m0[_1837].x + _732;
    float _1989 = cbLight._m0[_1837].y + _733;
    float _1990 = cbLight._m0[_1837].z + _734;
    float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
    float _1995 = _1994 * _1988;
    float _1996 = _1994 * _1989;
    float _1997 = _1994 * _1990;
    float _1998 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_1837].xyz));
    float _4054 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _2002 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _2003 = dot(vec3(_652, _653, _654), vec3(_1995, _1996, _1997));
    float _4076 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2006 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _2007 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_1995, _1996, _1997));
    float _4087 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2011 = _1987 * _1987;
    float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
    float _2026 = (exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2027 = 1.0 - _1987;
    float _2038 = (0.5 / (((_2002 * ((_2001 * _2027) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2027) + _1987) * _2001))) * _2001;
    float _4098 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2040 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
    uint _2051 = _1837 + 9u;
    float _2062 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1874].w)) * _655) * 0.949999988079071044921875);
    float _2063 = _2062 * _2062;
    float _2064 = cbLight._m0[_1874].x + _732;
    float _2065 = cbLight._m0[_1874].y + _733;
    float _2066 = cbLight._m0[_1874].z + _734;
    float _2070 = inversesqrt(dot(vec3(_2064, _2065, _2066), vec3(_2064, _2065, _2066)));
    float _2071 = _2070 * _2064;
    float _2072 = _2070 * _2065;
    float _2073 = _2070 * _2066;
    float _2074 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_1874].xyz));
    float _4109 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _2078 = dot(vec3(_652, _653, _654), vec3(_2071, _2072, _2073));
    float _4120 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2082 = dot(vec3(cbLight._m0[_1874].xyz), vec3(_2071, _2072, _2073));
    float _4131 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2086 = _2063 * _2063;
    float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
    float _2099 = (exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2100 = 1.0 - _2063;
    float _2110 = (0.5 / (((_2002 * ((_2077 * _2100) + _2063)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2100) + _2063) * _2077))) * _2077;
    float _4142 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2112 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
    float _2122 = (((_2099 * cbLight._m0[_2051].x) * _2112) * _1860) + (((_2026 * cbLight._m0[_1973].x) * _2040) * _1870);
    float _2123 = (((_2099 * cbLight._m0[_2051].y) * _2112) * _1860) + (((_2026 * cbLight._m0[_1973].y) * _2040) * _1870);
    float _2124 = (((_2099 * cbLight._m0[_2051].z) * _2112) * _1860) + (((_2026 * cbLight._m0[_1973].z) * _2040) * _1870);
    float _2186;
    float _2188;
    float _2190;
    if (_1910)
    {
        _2186 = _2122;
        _2188 = _2123;
        _2190 = _2124;
    }
    else
    {
        uint _2192 = _1837 + 2u;
        uint _2196 = _1837 + 10u;
        float _2210 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _655) * 0.949999988079071044921875);
        float _2211 = _2210 * _2210;
        float _2212 = cbLight._m0[_2192].x + _732;
        float _2213 = cbLight._m0[_2192].y + _733;
        float _2214 = cbLight._m0[_2192].z + _734;
        float _2218 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
        float _2219 = _2218 * _2212;
        float _2220 = _2218 * _2213;
        float _2221 = _2218 * _2214;
        float _2222 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2192].xyz));
        float _4153 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2225 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2226 = dot(vec3(_652, _653, _654), vec3(_2219, _2220, _2221));
        float _4164 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2230 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2219, _2220, _2221));
        float _4175 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2234 = _2211 * _2211;
        float _2238 = ((_2229 * _2229) * (_2234 + (-1.0))) + 1.0;
        float _2247 = (exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2248 = 1.0 - _2211;
        float _2258 = (0.5 / (((_2002 * ((_2225 * _2248) + _2211)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2248) + _2211) * _2225))) * _2225;
        float _4186 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2260 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2234 / ((_2238 * _2238) * 3.141590118408203125));
        float _2261 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
        _2186 = (((_2247 * cbLight._m0[_2196].x) * _2260) * _2261) + _2122;
        _2188 = (((_2247 * cbLight._m0[_2196].y) * _2260) * _2261) + _2123;
        _2190 = (((_2247 * cbLight._m0[_2196].z) * _2260) * _2261) + _2124;
    }
    float _2296;
    float _2298;
    float _2300;
    if (_1928)
    {
        _2296 = _2186;
        _2298 = _2188;
        _2300 = _2190;
    }
    else
    {
        uint _2307 = _1837 + 3u;
        uint _2311 = _1837 + 11u;
        float _2325 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _655) * 0.949999988079071044921875);
        float _2326 = _2325 * _2325;
        float _2327 = cbLight._m0[_2307].x + _732;
        float _2328 = cbLight._m0[_2307].y + _733;
        float _2329 = cbLight._m0[_2307].z + _734;
        float _2333 = inversesqrt(dot(vec3(_2327, _2328, _2329), vec3(_2327, _2328, _2329)));
        float _2334 = _2333 * _2327;
        float _2335 = _2333 * _2328;
        float _2336 = _2333 * _2329;
        float _2337 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2307].xyz));
        float _4202 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2340 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2341 = dot(vec3(_652, _653, _654), vec3(_2334, _2335, _2336));
        float _4213 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2345 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2334, _2335, _2336));
        float _4224 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2349 = _2326 * _2326;
        float _2353 = ((_2344 * _2344) * (_2349 + (-1.0))) + 1.0;
        float _2362 = (exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2363 = 1.0 - _2326;
        float _2373 = (0.5 / (((_2002 * ((_2340 * _2363) + _2326)) + 9.9999999392252902907785028219223e-09) + (((_2002 * _2363) + _2326) * _2340))) * _2340;
        float _4235 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2375 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2349 / ((_2353 * _2353) * 3.141590118408203125));
        float _2376 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
        _2296 = (((_2362 * cbLight._m0[_2311].x) * _2375) * _2376) + _2186;
        _2298 = (((_2362 * cbLight._m0[_2311].y) * _2375) * _2376) + _2188;
        _2300 = (((_2362 * cbLight._m0[_2311].z) * _2375) * _2376) + _2190;
    }
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    if (_1835.y == 0u)
    {
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2451;
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2451;
        float _2454 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2451;
        uvec4 _2466 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2467 = _2466.x;
        uint _2478 = uint((float(_2466.y) * floor(float(uint(cbSceneParam._m0[85u].y * _741) / _2467))) + floor(float(uint(cbSceneParam._m0[85u].x * _740) / _2467)));
        float _2488 = (log2(_2454 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2489 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        uint _2492 = uint(isnan(14.0) ? _2489 : (isnan(_2489) ? 14.0 : min(_2489, 14.0)));
        uvec4 _2497 = texelFetch(g_lightClusterGridBuffer, int(((_2492 << 2u) + (_2478 << 6u)) >> 2u));
        uint _2498 = _2497.x;
        uint _2499 = _2466.z;
        float _2599;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        if (((((1u << ((_2499 >> 4u) & 15u)) + 4294967295u) & _2498) == 0u) || ((_2499 & 240u) == 0u))
        {
            _2599 = 0.0;
            _2601 = 0.0;
            _2603 = 0.0;
            _2605 = 0.0;
            _2607 = 0.0;
            _2609 = 0.0;
        }
        else
        {
            float _2600;
            float _2602;
            float _2604;
            float _2606;
            float _2608;
            float _2610;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            uint _2750 = 0u;
            uint _2759;
            bool _2760;
            for (;;)
            {
                _2759 = texelFetch(g_lightClassification, int((((_2492 << 5u) + (_2478 << 9u)) + (_2750 << 2u)) >> 2u)).x;
                _2760 = _2759 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2760)
                {
                    frontier_phi_61_pred = _2744;
                    frontier_phi_61_pred_1 = _2749;
                    frontier_phi_61_pred_2 = _2748;
                    frontier_phi_61_pred_3 = _2747;
                    frontier_phi_61_pred_4 = _2746;
                    frontier_phi_61_pred_5 = _2745;
                }
                else
                {
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    uint _2874;
                    _2868 = _2744;
                    _2869 = _2745;
                    _2870 = _2746;
                    _2871 = _2747;
                    _2872 = _2748;
                    _2873 = _2749;
                    _2874 = _2759;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    for (;;)
                    {
                        uint _2878 = uint(findLSB(_2874)) + (_2750 << 5u);
                        uint _2875 = (_2874 + 4294967295u) & _2874;
                        uint _2880 = _2878 * 48u;
                        vec4 _2894 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 3u)).x));
                        uint _2900 = (_2878 * 48u) + 4u;
                        vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2900)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2900 + 3u)).x));
                        uint _2919 = (_2878 * 48u) + 8u;
                        vec3 _2930 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x));
                        float _2934 = _2894.x - _2452;
                        float _2935 = _2894.y - _2453;
                        float _2936 = _2894.z - _2454;
                        float _2937 = dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936));
                        float _2940 = inversesqrt(_2937);
                        float _2941 = _2940 * _2934;
                        float _2942 = _2940 * _2935;
                        float _2943 = _2940 * _2936;
                        float _2944 = dot(vec3(_759, _762, _765), vec3(_2941, _2942, _2943));
                        float _2949 = 1.0 - (_2937 * _2894.w);
                        float _4261 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                        float _2950 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _2951 = sqrt(_2937) * _2913.w;
                        float _2954 = 1.39999997615814208984375 / (_2951 + 1.39999997615814208984375);
                        float _2955 = _2954 * _2954;
                        float _2958 = ((1.0 - _2955) * _2944) + _2955;
                        float _2961 = _2951 * _2951;
                        float _2965 = ((isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0))) * _2950) / ((_2961 * 0.699999988079071044921875) + 1.0);
                        float _2969 = (-0.0) - _2452;
                        float _2970 = (-0.0) - _2453;
                        float _2971 = (-0.0) - _2454;
                        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
                        float _2976 = _2975 * _2969;
                        float _2977 = _2975 * _2970;
                        float _2978 = _2975 * _2971;
                        float _2986 = exp2(log2(1.0 / ((_2961 * 3.5) + 5.0)) * 0.25);
                        float _2987 = 1.0 - _819;
                        float _2994 = sqrt(1.0 - ((1.0 - (_2987 * _2987)) * (1.0 - (_2986 * _2986))));
                        float _2995 = _2994 * _2994;
                        float _2996 = _2995 * _2995;
                        float _2997 = _2976 + _2941;
                        float _2998 = _2977 + _2942;
                        float _2999 = _2978 + _2943;
                        float _3003 = inversesqrt(dot(vec3(_2997, _2998, _2999), vec3(_2997, _2998, _2999)));
                        float _3007 = dot(vec3(_759, _762, _765), vec3(_2976, _2977, _2978));
                        float _4277 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3010 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _3011 = dot(vec3(_759, _762, _765), vec3(_3003 * _2997, _3003 * _2998, _3003 * _2999));
                        float _4288 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3014 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _3018 = ((_3014 * _3014) * (_2996 + (-1.0))) + 1.0;
                        float _3019 = _2954 * _2995;
                        float _3020 = _3019 * _3019;
                        float _3023 = ((1.0 - _3020) * _2944) + _3020;
                        float _4299 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                        float _3024 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _3025 = 1.0 - _2995;
                        float _3035 = (0.5 / (((_3024 * ((_3010 * _3025) + _2995)) + 9.9999999392252902907785028219223e-09) + (((_3024 * _3025) + _2995) * _3010))) * _3024;
                        float _4310 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3046 = (((_2996 * 3.1415927410125732421875) * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) / ((_3018 * _3018) * ((_2961 * 2.1991131305694580078125) + 3.141590118408203125))) * _2950;
                        _2803 = (_2965 * _2913.x) + _2871;
                        _2804 = (_2965 * _2913.y) + _2872;
                        _2805 = (_2965 * _2913.z) + _2873;
                        _2800 = (_3046 * _2930.x) + _2868;
                        _2801 = (_3046 * _2930.y) + _2869;
                        _2802 = (_3046 * _2930.z) + _2870;
                        if (_2875 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2804;
                            _2873 = _2805;
                            _2874 = _2875;
                        }
                    }
                    frontier_phi_61_pred = _2800;
                    frontier_phi_61_pred_1 = _2805;
                    frontier_phi_61_pred_2 = _2804;
                    frontier_phi_61_pred_3 = _2803;
                    frontier_phi_61_pred_4 = _2802;
                    frontier_phi_61_pred_5 = _2801;
                }
                _2600 = frontier_phi_61_pred;
                _2610 = frontier_phi_61_pred_1;
                _2608 = frontier_phi_61_pred_2;
                _2606 = frontier_phi_61_pred_3;
                _2604 = frontier_phi_61_pred_4;
                _2602 = frontier_phi_61_pred_5;
                uint _2751 = _2750 + 1u;
                if (_2751 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2744 = _2600;
                    _2745 = _2602;
                    _2746 = _2604;
                    _2747 = _2606;
                    _2748 = _2608;
                    _2749 = _2610;
                    _2750 = _2751;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2599 = _2600;
            _2601 = _2602;
            _2603 = _2604;
            _2605 = _2606;
            _2607 = _2608;
            _2609 = _2610;
        }
        uvec4 _2613 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2614 = _2613.z;
        uint _2616 = (_2614 >> 8u) & 15u;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        if (((4294967295u << _2616) & _2498) == 0u)
        {
            _2712 = _2599;
            _2714 = _2601;
            _2716 = _2603;
            _2718 = _2605;
            _2720 = _2607;
            _2722 = _2609;
        }
        else
        {
            float _2737 = inversesqrt(dot(vec3(_2452, _2453, _2454), vec3(_2452, _2453, _2454)));
            float _2738 = _2737 * _2452;
            float _2739 = _2737 * _2453;
            float _2740 = _2737 * _2454;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2616 < ((_2614 >> 12u) & 15u))
            {
                float _2713;
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2723;
                float _2851 = _2599;
                float _2852 = _2601;
                float _2853 = _2603;
                float _2854 = _2605;
                float _2855 = _2607;
                float _2856 = _2609;
                uint _2857 = _2616;
                uint _2866;
                bool _2867;
                for (;;)
                {
                    _2866 = texelFetch(g_lightClassification, int((((_2492 << 5u) + (_2478 << 9u)) + (_2857 << 2u)) >> 2u)).x;
                    _2867 = _2866 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2867)
                    {
                        frontier_phi_67_pred = _2854;
                        frontier_phi_67_pred_1 = _2855;
                        frontier_phi_67_pred_2 = _2856;
                        frontier_phi_67_pred_3 = _2853;
                        frontier_phi_67_pred_4 = _2852;
                        frontier_phi_67_pred_5 = _2851;
                    }
                    else
                    {
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3064 = _2851;
                        float _3065 = _2852;
                        float _3066 = _2853;
                        float _3067 = _2854;
                        float _3068 = _2855;
                        float _3069 = _2856;
                        uint _3070 = _2866;
                        uint _3071;
                        vec4 _3096;
                        float _3097;
                        vec4 _3112;
                        vec3 _3124;
                        vec4 _3139;
                        vec4 _3154;
                        float _3200;
                        bool _3201;
                        for (;;)
                        {
                            uint _3081 = ((_2857 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3070));
                            _3071 = (_3070 + 4294967295u) & _3070;
                            uint _3083 = _3081 * 40u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            _3097 = _3096.w;
                            uint _3099 = (_3081 * 40u) + 4u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3114 = (_3081 * 40u) + 8u;
                            _3124 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x));
                            uint _3126 = (_3081 * 40u) + 16u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3141 = (_3081 * 40u) + 20u;
                            _3154 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 3u)).x));
                            uint _3156 = (_3081 * 40u) + 24u;
                            vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3156)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3156 + 3u)).x));
                            uint _3175 = (_3081 * 40u) + 28u;
                            vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            _3200 = fma(_2454, _3188.z, fma(_2453, _3188.y, _3188.x * _2452)) + _3188.w;
                            _3201 = !((fma(_2454, _3169.z, fma(_2453, _3169.y, _3169.x * _2452)) + _3169.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3201)
                            {
                                float _3228 = _3096.x - _2452;
                                float _3229 = _3096.y - _2453;
                                float _3230 = _3096.z - _2454;
                                float _3231 = dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230));
                                float _3234 = inversesqrt(_3231);
                                float _3235 = _3234 * _3228;
                                float _3236 = _3234 * _3229;
                                float _3237 = _3234 * _3230;
                                float _3241 = 1.0 - (_3231 / (_3097 * _3097));
                                float _4321 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3242 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3246 = sqrt(_3231) * _3112.w;
                                float _3248 = 1.39999997615814208984375 / (_3246 + 1.39999997615814208984375);
                                float _3249 = _3248 * _3248;
                                float _3252 = ((1.0 - _3249) * dot(vec3(_3235, _3236, _3237), vec3(_759, _762, _765))) + _3249;
                                float _3255 = _3246 * _3246;
                                float _3259 = (fma(_2454, _3139.z, fma(_2453, _3139.y, _3139.x * _2452)) + _3139.w) / _3200;
                                float _3260 = (fma(_2454, _3154.z, fma(_2453, _3154.y, _3154.x * _2452)) + _3154.w) / _3200;
                                float _3264 = 1.0 - dot(vec2(_3259, _3260), vec2(_3259, _3260));
                                float _4337 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                                float _3265 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3266 = _3265 * (((isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))) * _3242) / ((_3255 * 0.699999988079071044921875) + 1.0));
                                float _3278 = exp2(log2(1.0 / ((_3255 * 3.5) + 5.0)) * 0.25);
                                float _3279 = 1.0 - _819;
                                float _3286 = sqrt(1.0 - ((1.0 - (_3279 * _3279)) * (1.0 - (_3278 * _3278))));
                                float _3287 = _3286 * _3286;
                                float _3288 = _3287 * _3287;
                                float _3289 = _3235 - _2738;
                                float _3290 = _3236 - _2739;
                                float _3291 = _3237 - _2740;
                                float _3295 = inversesqrt(dot(vec3(_3289, _3290, _3291), vec3(_3289, _3290, _3291)));
                                float _3299 = dot(vec3(_759, _762, _765), vec3((-0.0) - _2738, (-0.0) - _2739, (-0.0) - _2740));
                                float _4348 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
                                float _3302 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3303 = dot(vec3(_759, _762, _765), vec3(_3295 * _3289, _3295 * _3290, _3295 * _3291));
                                float _4359 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3306 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3310 = ((_3306 * _3306) * (_3288 + (-1.0))) + 1.0;
                                float _3311 = _3248 * _3287;
                                float _3312 = _3311 * _3311;
                                float _3318 = ((1.0 - _3312) * dot(vec3(_759, _762, _765), vec3(_3235, _3236, _3237))) + _3312;
                                float _4370 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3320 = 1.0 - _3287;
                                float _3330 = (0.5 / (((_3319 * ((_3302 * _3320) + _3287)) + 9.9999999392252902907785028219223e-09) + (((_3319 * _3320) + _3287) * _3302))) * _3319;
                                float _4381 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                                float _3340 = (_3265 * _3242) * (((_3288 * 3.1415927410125732421875) * (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) / ((_3310 * _3310) * ((_3255 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3340 * _3124.x;
                                frontier_phi_73_pred_1 = _3340 * _3124.y;
                                frontier_phi_73_pred_2 = _3266 * _3112.z;
                                frontier_phi_73_pred_3 = _3266 * _3112.y;
                                frontier_phi_73_pred_4 = _3266 * _3112.x;
                                frontier_phi_73_pred_5 = _3340 * _3124.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3344 = frontier_phi_73_pred;
                            _3345 = frontier_phi_73_pred_1;
                            _3349 = frontier_phi_73_pred_2;
                            _3348 = frontier_phi_73_pred_3;
                            _3347 = frontier_phi_73_pred_4;
                            _3346 = frontier_phi_73_pred_5;
                            _3054 = _3347 + _3067;
                            _3055 = _3348 + _3068;
                            _3056 = _3349 + _3069;
                            _3051 = _3344 + _3064;
                            _3052 = _3345 + _3065;
                            _3053 = _3346 + _3066;
                            if (_3071 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3071;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3054;
                        frontier_phi_67_pred_1 = _3055;
                        frontier_phi_67_pred_2 = _3056;
                        frontier_phi_67_pred_3 = _3053;
                        frontier_phi_67_pred_4 = _3052;
                        frontier_phi_67_pred_5 = _3051;
                    }
                    _2719 = frontier_phi_67_pred;
                    _2721 = frontier_phi_67_pred_1;
                    _2723 = frontier_phi_67_pred_2;
                    _2717 = frontier_phi_67_pred_3;
                    _2715 = frontier_phi_67_pred_4;
                    _2713 = frontier_phi_67_pred_5;
                    uint _2858 = _2857 + 1u;
                    if (_2858 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2851 = _2713;
                        _2852 = _2715;
                        _2853 = _2717;
                        _2854 = _2719;
                        _2855 = _2721;
                        _2856 = _2723;
                        _2857 = _2858;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2721;
                frontier_phi_55_56_ladder_1 = _2723;
                frontier_phi_55_56_ladder_2 = _2719;
                frontier_phi_55_56_ladder_3 = _2717;
                frontier_phi_55_56_ladder_4 = _2715;
                frontier_phi_55_56_ladder_5 = _2713;
            }
            else
            {
                frontier_phi_55_56_ladder = _2607;
                frontier_phi_55_56_ladder_1 = _2609;
                frontier_phi_55_56_ladder_2 = _2605;
                frontier_phi_55_56_ladder_3 = _2603;
                frontier_phi_55_56_ladder_4 = _2601;
                frontier_phi_55_56_ladder_5 = _2599;
            }
            _2712 = frontier_phi_55_56_ladder_5;
            _2714 = frontier_phi_55_56_ladder_4;
            _2716 = frontier_phi_55_56_ladder_3;
            _2718 = frontier_phi_55_56_ladder_2;
            _2720 = frontier_phi_55_56_ladder;
            _2722 = frontier_phi_55_56_ladder_1;
        }
        float _2727 = isnan(1.0) ? _803 : (isnan(_803) ? 1.0 : min(_803, 1.0));
        _2511 = (_2727 * _2718) + _1966;
        _2513 = (_2727 * _2720) + _1968;
        _2515 = (_2727 * _2722) + _1970;
        _2517 = ((_2712 * 0.039999999105930328369140625) * _2727) + _2296;
        _2519 = ((_2714 * 0.039999999105930328369140625) * _2727) + _2298;
        _2521 = ((_2716 * 0.039999999105930328369140625) * _2727) + _2300;
    }
    else
    {
        _2511 = _1966;
        _2513 = _1968;
        _2515 = _1970;
        _2517 = _2296;
        _2519 = _2298;
        _2521 = _2300;
    }
    float _4397 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4408 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4419 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    uint _2541 = _236 + 6u;
    float _2549 = _740 / cbSceneParam._m0[86u].x;
    float _2550 = _741 / cbSceneParam._m0[86u].y;
    vec4 _2564 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2549, _2550, (log2((isnan(cbSceneParam._m0[77u].w) ? _673 : (isnan(_673) ? cbSceneParam._m0[77u].w : min(_673, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2566 = _2564.x;
    float _2567 = _2564.y;
    float _2568 = _2564.z;
    float _2569 = _2564.w;
    float _2662;
    float _2664;
    float _2666;
    float _2668;
    if (_673 > cbSceneParam._m0[78u].w)
    {
        float _2624 = isnan(_673) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _673 : min(cbSceneParam._m0[80u].w, _673));
        float _2625 = _2624 / _673;
        float _2636 = _2625 * _725;
        float _2637 = _726 * _2625;
        float _2638 = (-0.0) - _2637;
        float _2640 = _2625 * _727;
        float _2642 = (cbSceneParam._m0[77u].w * _2638) / _2624;
        float _2643 = _2642 + cbSceneParam._m0[79u].w;
        float _2644 = cbSceneParam._m0[79u].w - _2637;
        float _2650 = sqrt(((_2636 * _2636) + (_2637 * _2637)) + (_2640 * _2640));
        float _2653 = (1.0 - (cbSceneParam._m0[77u].w / _2624)) * _2650;
        float _2658 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2660 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2813;
        if (abs((_2638 - _2642) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2813 = ((((_2643 > 0.0) ? exp2(_2658 * _2643) : (2.0 - exp2(_2660 * _2643))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2653;
        }
        else
        {
            float _2773 = 1.0 / cbSceneParam._m0[80u].x;
            float _2774 = isnan(_2644) ? _2643 : (isnan(_2643) ? _2644 : max(_2643, _2644));
            float _2775 = isnan(_2644) ? _2643 : (isnan(_2643) ? _2644 : min(_2643, _2644));
            float _2784 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : min(_2774, 0.0));
            float _2785 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : min(_2775, 0.0));
            _2813 = ((abs(_2650 / _2638) * cbSceneParam._m0[80u].y) * ((((_2784 - _2785) * 2.0) - ((exp2(_2658 * (isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0)))) - exp2(_2658 * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0))))) * _2773)) - ((exp2(_2660 * _2784) - exp2(_2660 * _2785)) * _2773))) + (_2653 * cbSceneParam._m0[80u].z);
        }
        vec4 _2815 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2549, _2550, 1.0), 0.0);
        float _2824 = exp2((_2813 * (-1.44269502162933349609375)) * (1.0 - _2815.w));
        float _2825 = log2(_2824);
        float _2841 = log2(_2569);
        _2662 = (exp2(_2841 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2825 * cbSceneParam._m0[78u].x)) * _2815.x) / cbSceneParam._m0[78u].x)) + _2566;
        _2664 = (exp2(_2841 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2825 * cbSceneParam._m0[78u].y)) * _2815.y) / cbSceneParam._m0[78u].y)) + _2567;
        _2666 = (exp2(_2841 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2825 * cbSceneParam._m0[78u].z)) * _2815.z) / cbSceneParam._m0[78u].z)) + _2568;
        _2668 = _2824 * _2569;
    }
    else
    {
        _2662 = _2566;
        _2664 = _2567;
        _2666 = _2568;
        _2668 = _2569;
    }
    float _2680 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2681 = _2680 == 3.0;
    float _2682 = log2(_2668);
    float _2689 = exp2(_2682 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2511 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _803))) + ((_2517 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1608)) * cbPerFrame._m0[3u].x));
    float _2690 = exp2(_2682 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2513 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _803))) + ((_2519 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1608)) * cbPerFrame._m0[3u].x));
    float _2691 = exp2(_2682 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2515 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _803))) + ((_2521 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1608)) * cbPerFrame._m0[3u].x));
    float _2700 = (_2680 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2700 * (_2681 ? _2689 : (_2689 + (cbSceneParam._m0[72u].w * _2662)));
    SV_Target.y = _2700 * (_2681 ? _2690 : (_2690 + (cbSceneParam._m0[72u].w * _2664)));
    SV_Target.z = _2700 * (_2681 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2666)));
    SV_Target.w = cbInstanceData._m0[_2541].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2541].w;
}


