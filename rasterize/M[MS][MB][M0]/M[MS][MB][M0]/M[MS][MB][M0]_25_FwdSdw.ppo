#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1091;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _216 = _215 * _207;
    float _217 = _215 * _208;
    float _218 = _215 * _209;
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _230 = _229 * TANGENT.x;
    float _231 = _229 * TANGENT.y;
    float _232 = _229 * TANGENT.z;
    uint _235 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _235 + 1u;
    uint _244 = _235 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_235].x * cbInstanceData._m0[_235].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _274 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _274.x * cbMtdParam._m0[9u].x;
    float _281 = _274.y * cbMtdParam._m0[9u].y;
    float _282 = _274.z * cbMtdParam._m0[9u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _304 = _300.z;
    float _309 = (_300.x * 2.0) + (-1.0);
    float _311 = (_300.y * 2.0) + (-1.0);
    float _312 = dot(vec2(_309, _311), vec2(_309, _311));
    float _3683 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _318 = sqrt(1.0 - (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))));
    float _321 = fma(_318, _223, fma(_311, _230, _309 * _216));
    float _324 = fma(_318, _224, fma(_311, _231, _309 * _217));
    float _327 = fma(_318, _225, fma(_311, _232, _309 * _218));
    float _331 = inversesqrt(dot(vec3(_321, _324, _327), vec3(_321, _324, _327)));
    vec4 _367 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _369 = _367.x;
    float _370 = 1.0 - _369;
    float _379 = (cbMtdParam._m0[19u].x + dot(vec4(_331 * _321, _331 * _324, _331 * _327, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_369 - _370) * cbMtdParam._m0[24u].z) + _370) * cbMtdParam._m0[21u].z);
    float _3694 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _382 = (-0.0) - cbMtdParam._m0[24u].y;
    float _384 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _385 = isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0));
    float _392 = _380 - ((_380 * TEXCOORD_8.x) * _385);
    float _393 = _380 - ((_380 * TEXCOORD_8.y) * _385);
    float _394 = _380 - ((_380 * TEXCOORD_8.z) * _385);
    float _401 = (_392 * (cbMtdParam._m0[17u].x - _280)) + _280;
    float _402 = (_393 * (cbMtdParam._m0[17u].y - _281)) + _281;
    float _403 = (_394 * (cbMtdParam._m0[17u].z - _282)) + _282;
    vec4 _415 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _254) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _255) + cbTextureTilingScale._m0[19u].w));
    float _417 = _415.x;
    float _418 = 1.0 - _417;
    float _448 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_417 - _418) * cbMtdParam._m0[24u].w) + _418) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3715 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _457 = ((((cbMtdParam._m0[10u].x - _401) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _449) + _401;
    float _458 = ((((cbMtdParam._m0[10u].y - _402) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _449) + _402;
    float _459 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _403)) * _449) + _403;
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _480 = (_473.x * 2.0) + (-1.0);
    float _481 = (_473.y * 2.0) + (-1.0);
    float _482 = dot(vec2(_480, _481), vec2(_480, _481));
    float _3726 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _490 = ((_473.z - _304) * _392) + _304;
    float _493 = ((cbMtdParam._m0[23u].y - _490) * _449) + _490;
    vec4 _512 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _254) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _255) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _518 = (_512.x * 2.0) + (-1.0);
    float _519 = (_512.y * 2.0) + (-1.0);
    float _520 = dot(vec2(_518, _519), vec2(_518, _519));
    float _3737 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _535 = ((sqrt(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) - _318) * _394) + _318;
    float _538 = (((_480 - _309) * _392) + _309) + (cbMtdParam._m0[21u].x * _309);
    float _539 = (((_481 - _311) * _393) + _311) + (cbMtdParam._m0[21u].x * _311);
    float _550 = (((_518 - _538) + (_538 * cbMtdParam._m0[22u].z)) * _449) + _538;
    float _551 = (((_519 - _539) + (_539 * cbMtdParam._m0[22u].z)) * _449) + _539;
    float _552 = (_449 * (sqrt(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) - _535)) + _535;
    float _554 = cbMtdParam._m0[22u].x + _300.w;
    float _557 = fma(_552, _223, fma(_551, _230, _550 * _216));
    float _560 = fma(_552, _224, fma(_551, _231, _550 * _217));
    float _563 = fma(_552, _225, fma(_551, _232, _550 * _218));
    float _567 = inversesqrt(dot(vec3(_557, _560, _563), vec3(_557, _560, _563)));
    float _568 = _567 * _557;
    float _569 = _567 * _560;
    float _570 = _567 * _563;
    float _3748 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _571 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _3759 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3770 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3781 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3792 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _589 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _639 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _629);
    float _640 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _629);
    float _641 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _629);
    float _645 = inversesqrt(dot(vec3(_639, _640, _641), vec3(_639, _640, _641)));
    float _646 = _639 * _645;
    float _647 = _640 * _645;
    float _648 = _641 * _645;
    float _654 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _655 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _676 = fma(_570, cbSceneParam._m0[5u].z, fma(_569, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _568));
    float _679 = fma(_570, cbSceneParam._m0[6u].z, fma(_569, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _568));
    float _682 = fma(_570, cbSceneParam._m0[7u].z, fma(_569, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _568));
    uint _696 = (_235 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _702 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_696].x;
    float _703 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * cbInstanceData._m0[_696].y;
    float _704 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * cbInstanceData._m0[_696].z;
    float _3803 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    vec4 _716 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _654, cbSceneParam._m0[86u].y * _655));
    float _720 = ((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * TEXCOORD_5.w) * _716.x;
    float _721 = dot(vec3(_568, _569, _570), vec3(_646, _647, _648));
    float _724 = _721 * 2.0;
    float _728 = (_724 * _568) - _646;
    float _729 = (_724 * _569) - _647;
    float _730 = (_724 * _570) - _648;
    float _734 = abs(dot(vec3(_646, _647, _648), vec3(_568, _569, _570)));
    float _3836 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _736 = sqrt(_571);
    float _749 = exp2((_736 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_736 * 3.0));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1090;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _815 = fma(_789, cbModelParam._m0[26u].z, fma(_785, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781));
        float _819 = fma(_789, cbModelParam._m0[27u].z, fma(_785, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781));
        float _823 = fma(_789, cbModelParam._m0[28u].z, fma(_785, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781));
        float _848 = _781 + _568;
        float _849 = _785 + _569;
        float _850 = _789 + _570;
        float _860 = fma(_850, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _848)) - _815;
        float _861 = fma(_850, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _848)) - _819;
        float _862 = fma(_850, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _848)) - _823;
        float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
        float _879 = ((_866 * _860) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_815 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_866 * _861) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_819 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_866 * _862) / cbModelParam._m0[34u].z) + ((((((_823 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        float _918 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_884.x + (-0.5));
        float _920 = _918 * (_884.y + (-0.5));
        float _921 = _918 * (_884.z + (-0.5));
        float _928 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_891.x + (-0.5));
        float _930 = _928 * (_891.y + (-0.5));
        float _931 = _928 * (_891.z + (-0.5));
        float _938 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_898.x + (-0.5));
        float _940 = _938 * (_898.y + (-0.5));
        float _941 = _938 * (_898.z + (-0.5));
        float _948 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_905.x + (-0.5));
        float _950 = _948 * (_905.y + (-0.5));
        float _951 = _948 * (_905.z + (-0.5));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = _919 * 0.5;
        float _956 = _929 * 0.5;
        float _957 = _939 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _972 = (dot(vec3(_568, _569, _570), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _982 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3884 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_984 + 1.0))) + _989) * _952;
        float _999 = _920 * 0.5;
        float _1000 = _930 * 0.5;
        float _1001 = _940 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_568, _569, _570), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3895 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3906 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3917 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * (_1026 + 1.0))) + _1031) * _953;
        float _1041 = _921 * 0.5;
        float _1042 = _931 * 0.5;
        float _1043 = _941 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_568, _569, _570), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3928 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3939 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3950 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1068 + 1.0))) + _1073) * _954;
        _1090 = _921;
        _1092 = _920;
        _1093 = _919;
        _1094 = _931;
        _1095 = _930;
        _1096 = _929;
        _1097 = _941;
        _1098 = _940;
        _1099 = _939;
        _1100 = _954;
        _1101 = _953;
        _1102 = _952;
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
    }
    else
    {
        _1090 = _1091;
        _1092 = _1091;
        _1093 = _1091;
        _1094 = _1091;
        _1095 = _1091;
        _1096 = _1091;
        _1097 = _1091;
        _1098 = _1091;
        _1099 = _1091;
        _1100 = _1091;
        _1101 = _1091;
        _1102 = _1091;
        _1103 = 0.0;
        _1104 = 0.0;
        _1105 = 0.0;
    }
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1130 = fma(_789, cbModelParam._m0[30u].z, fma(_785, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _781));
        float _1134 = fma(_789, cbModelParam._m0[31u].z, fma(_785, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _781));
        float _1138 = fma(_789, cbModelParam._m0[32u].z, fma(_785, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _781));
        float _1161 = _781 + _568;
        float _1162 = _785 + _569;
        float _1163 = _789 + _570;
        float _1173 = fma(_1163, cbModelParam._m0[30u].z, fma(_1162, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161)) - _1130;
        float _1174 = fma(_1163, cbModelParam._m0[31u].z, fma(_1162, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161)) - _1134;
        float _1175 = fma(_1163, cbModelParam._m0[32u].z, fma(_1162, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161)) - _1138;
        float _1179 = inversesqrt(dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175)));
        float _1192 = ((_1179 * _1173) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1130 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1179 * _1174) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1134 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1179 * _1175) / cbModelParam._m0[35u].z) + ((((((_1138 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        float _1229 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1196.x + (-0.5));
        float _1231 = _1229 * (_1196.y + (-0.5));
        float _1232 = _1229 * (_1196.z + (-0.5));
        float _1239 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1203.x + (-0.5));
        float _1241 = _1239 * (_1203.y + (-0.5));
        float _1242 = _1239 * (_1203.z + (-0.5));
        float _1249 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1210.x + (-0.5));
        float _1251 = _1249 * (_1210.y + (-0.5));
        float _1252 = _1249 * (_1210.z + (-0.5));
        float _1259 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1217.x + (-0.5));
        float _1261 = _1259 * (_1217.y + (-0.5));
        float _1262 = _1259 * (_1217.z + (-0.5));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = _1230 * 0.5;
        float _1267 = _1240 * 0.5;
        float _1268 = _1250 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_568, _569, _570), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _4013 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1293 + 1.0))) + _1298) * _1263;
        float _1308 = _1231 * 0.5;
        float _1309 = _1241 * 0.5;
        float _1310 = _1251 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_568, _569, _570), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _4046 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1335 + 1.0))) + _1340) * _1264;
        float _1350 = _1232 * 0.5;
        float _1351 = _1242 * 0.5;
        float _1352 = _1252 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_568, _569, _570), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _4079 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1377 + 1.0))) + _1382) * _1265;
        _1399 = _1232;
        _1400 = _1231;
        _1401 = _1230;
        _1402 = _1242;
        _1403 = _1241;
        _1404 = _1240;
        _1405 = _1252;
        _1406 = _1251;
        _1407 = _1250;
        _1408 = _1265;
        _1409 = _1264;
        _1410 = _1263;
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1091;
        _1400 = _1091;
        _1401 = _1091;
        _1402 = _1091;
        _1403 = _1091;
        _1404 = _1091;
        _1405 = _1091;
        _1406 = _1091;
        _1407 = _1091;
        _1408 = _1091;
        _1409 = _1091;
        _1410 = _1091;
        _1411 = 0.0;
        _1412 = 0.0;
        _1413 = 0.0;
    }
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1103)) + _1103;
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1104)) + _1104;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1105)) + _1105;
    float _1446 = fma(_1425, cbSceneParam._m0[89u].z, fma(_1424, cbSceneParam._m0[89u].y, _1423 * cbSceneParam._m0[89u].x));
    float _1449 = fma(_1425, cbSceneParam._m0[90u].z, fma(_1424, cbSceneParam._m0[90u].y, _1423 * cbSceneParam._m0[90u].x));
    float _1452 = fma(_1425, cbSceneParam._m0[91u].z, fma(_1424, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1423));
    float _1467 = _728 * 0.5;
    float _1468 = _729 * 0.5;
    float _1469 = _730 * 0.5;
    float _1470 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1473 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1476 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1510;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1483 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1090, _1094, _1097, _1100));
        float _1487 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1491 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1498 = dot(vec4(cbModelParam._m0[39u]), vec4(_1467, _1468, _1469, 1.0));
        _1510 = dot(vec3(isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1498) ? 0.0 : (isnan(0.0) ? _1498 : max(0.0, _1498))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1510 = 1.0;
    }
    float _1521;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1512 = dot(vec4(cbModelParam._m0[40u]), vec4(_1467, _1468, _1469, 1.0));
        _1521 = dot(vec3(isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1512) ? 0.0 : (isnan(0.0) ? _1512 : max(0.0, _1512))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1521 = 1.0;
    }
    float _1525 = (_1521 * cbModelParam._m0[1u].x) + (_1510 * (1.0 - cbModelParam._m0[1u].x));
    float _1535 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _571);
    float _1536 = isnan(_1535) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1535 : min(cbModelParam._m0[25u].z, _1535));
    float _1617;
    float _1619;
    float _1621;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1584 = fma(_789, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781)) + cbModelParam._m0[13u].w;
        float _1588 = fma(_789, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781)) + cbModelParam._m0[14u].w;
        float _1592 = fma(_789, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781)) + cbModelParam._m0[15u].w;
        float _1595 = fma(_730, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728));
        float _1598 = fma(_730, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728));
        float _1601 = fma(_730, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728));
        float _1629;
        if (_1595 > 0.0)
        {
            _1629 = abs((1.0 - _1584) / _1595);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1584 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1629 = frontier_phi_14_12_ladder;
        }
        float _1800;
        if (_1598 > 0.0)
        {
            _1800 = abs((1.0 - _1588) / _1598);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1588 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1800 = frontier_phi_23_19_ladder;
        }
        float _2096;
        if (_1601 > 0.0)
        {
            _2096 = abs((1.0 - _1592) / _1601);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1592 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2096 = frontier_phi_35_30_ladder;
        }
        float _2098 = isnan(_1800) ? _1629 : (isnan(_1629) ? _1800 : min(_1629, _1800));
        float _2099 = isnan(_2096) ? _2098 : (isnan(_2098) ? _2096 : min(_2098, _2096));
        float _2103 = (_2099 * _1595) + _1584;
        float _2104 = (_2099 * _1598) + _1588;
        float _2105 = (_2099 * _1601) + _1592;
        float _2106 = _2099 * 9.9999997473787516355514526367188e-05;
        float _2108 = (-1.0) - _2106;
        float _2110 = _2106 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2105 > _2110) || ((_2105 < _2108) || ((_2104 > _2110) || ((_2104 < _2108) || ((_2103 < _2108) || (_2103 > _2110))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2250 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2105, cbModelParam._m0[9u].z, fma(_2104, cbModelParam._m0[9u].y, _2103 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2105, cbModelParam._m0[10u].z, fma(_2104, cbModelParam._m0[10u].y, _2103 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2105, cbModelParam._m0[11u].z, fma(_2104, cbModelParam._m0[11u].y, _2103 * cbModelParam._m0[11u].x))), _1536);
            frontier_phi_13_35_ladder = _2250.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2250.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2250.x * cbModelParam._m0[1u].y;
        }
        _1617 = frontier_phi_13_35_ladder_2;
        _1619 = frontier_phi_13_35_ladder_1;
        _1621 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1605 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_728, _729, _730), _1536);
        _1617 = _1605.x * cbModelParam._m0[1u].y;
        _1619 = _1605.y * cbModelParam._m0[1u].y;
        _1621 = _1605.z * cbModelParam._m0[1u].y;
    }
    float _1625 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _571);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1625 : min(cbModelParam._m0[25u].w, _1625));
    float _1716;
    float _1718;
    float _1720;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1680 = fma(_789, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781)) + cbModelParam._m0[21u].w;
        float _1684 = fma(_789, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781)) + cbModelParam._m0[22u].w;
        float _1688 = fma(_789, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781)) + cbModelParam._m0[23u].w;
        float _1691 = fma(_730, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728));
        float _1694 = fma(_730, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728));
        float _1697 = fma(_730, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728));
        float _1805;
        if (_1691 > 0.0)
        {
            _1805 = abs((1.0 - _1680) / _1691);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1680 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1805 = frontier_phi_25_21_ladder;
        }
        float _2123;
        if (_1694 > 0.0)
        {
            _2123 = abs((1.0 - _1684) / _1694);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1684 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2123 = frontier_phi_37_32_ladder;
        }
        float _2450;
        if (_1697 > 0.0)
        {
            _2450 = abs((1.0 - _1688) / _1697);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1688 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2450 = frontier_phi_47_44_ladder;
        }
        float _2452 = isnan(_2123) ? _1805 : (isnan(_1805) ? _2123 : min(_1805, _2123));
        float _2453 = isnan(_2450) ? _2452 : (isnan(_2452) ? _2450 : min(_2452, _2450));
        float _2457 = (_2453 * _1691) + _1680;
        float _2458 = (_2453 * _1694) + _1684;
        float _2459 = (_2453 * _1697) + _1688;
        float _2460 = _2453 * 9.9999997473787516355514526367188e-05;
        float _2461 = (-1.0) - _2460;
        float _2463 = _2460 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2459 > _2463) || ((_2459 < _2461) || ((_2458 > _2463) || ((_2458 < _2461) || ((_2457 < _2461) || (_2457 > _2463))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2577 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2459, cbModelParam._m0[17u].z, fma(_2458, cbModelParam._m0[17u].y, _2457 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2459, cbModelParam._m0[18u].z, fma(_2458, cbModelParam._m0[18u].y, _2457 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2459, cbModelParam._m0[19u].z, fma(_2458, cbModelParam._m0[19u].y, _2457 * cbModelParam._m0[19u].x))), _1626);
            frontier_phi_22_47_ladder = _2577.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2577.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2577.x * cbModelParam._m0[1u].z;
        }
        _1716 = frontier_phi_22_47_ladder_2;
        _1718 = frontier_phi_22_47_ladder_1;
        _1720 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1700 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_728, _729, _730), _1626);
        _1716 = _1700.x * cbModelParam._m0[1u].z;
        _1718 = _1700.y * cbModelParam._m0[1u].z;
        _1720 = _1700.z * cbModelParam._m0[1u].z;
    }
    float _1732 = ((((1.0 - _749) * ((_736 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_749 * _736)) * _720;
    float _1733 = _1732 * ((cbModelParam._m0[1u].w * (_1716 - _1617)) + _1617);
    float _1734 = _1732 * ((cbModelParam._m0[1u].w * (_1718 - _1619)) + _1619);
    float _1735 = _1732 * ((cbModelParam._m0[1u].w * (_1720 - _1621)) + _1621);
    float _1738 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, _1733 * cbSceneParam._m0[91u].x));
    float _1779 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1783 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1787 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1791 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1792 = _1779 / _1791;
    float _1793 = _1783 / _1791;
    float _1794 = _1787 / _1791;
    float _1941;
    float _1942;
    float _1943;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1821 = ((uint(_1794 > cbSceneParam._m0[59u].y) + uint(_1794 > cbSceneParam._m0[59u].x)) + uint(_1794 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1822 = _1821 + 43u;
        uint _1830 = _1821 + 44u;
        uint _1838 = _1821 + 45u;
        uint _1846 = _1821 + 46u;
        float _1857 = fma(_1791, cbSceneParam._m0[_1822].w, fma(_1787, cbSceneParam._m0[_1822].z, fma(_1783, cbSceneParam._m0[_1822].y, _1779 * cbSceneParam._m0[_1822].x)));
        float _1861 = fma(_1791, cbSceneParam._m0[_1830].w, fma(_1787, cbSceneParam._m0[_1830].z, fma(_1783, cbSceneParam._m0[_1830].y, _1779 * cbSceneParam._m0[_1830].x)));
        float _1869 = fma(_1791, cbSceneParam._m0[_1846].w, fma(_1787, cbSceneParam._m0[_1846].z, fma(_1783, cbSceneParam._m0[_1846].y, _1779 * cbSceneParam._m0[_1846].x)));
        float _1874 = cbSceneParam._m0[33u].z * _1869;
        float _1876 = cbSceneParam._m0[33u].w * _1869;
        float _1879 = fma(_1791, cbSceneParam._m0[_1838].w, fma(_1787, cbSceneParam._m0[_1838].z, fma(_1783, cbSceneParam._m0[_1838].y, _1779 * cbSceneParam._m0[_1838].x))) / _1869;
        float _1927 = (cbSceneParam._m0[33u].x - sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794))) * cbSceneParam._m0[33u].y;
        float _4205 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1934 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 + _1857) / _1869, (_1876 + _1861) / _1869), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1876 + _1857) / _1869, (_1861 - _1874) / _1869), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1857 - _1874) / _1869, (_1861 - _1876) / _1869), _1879), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1857 - _1876) / _1869, (_1874 + _1861) / _1869), _1879), 0.0)).x), vec4(0.25)));
        _1941 = 1.0 - (_1934 * cbSceneParam._m0[34u].x);
        _1942 = 1.0 - (_1934 * cbSceneParam._m0[34u].y);
        _1943 = 1.0 - (_1934 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1941 = 1.0;
        _1942 = 1.0;
        _1943 = 1.0;
    }
    float _2007;
    float _2009;
    float _2011;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1995 = fma(_1791, cbSceneParam._m0[63u].w, fma(_1787, cbSceneParam._m0[63u].z, fma(_1783, cbSceneParam._m0[63u].y, _1779 * cbSceneParam._m0[63u].x)));
        float _1996 = fma(_1791, cbSceneParam._m0[60u].w, fma(_1787, cbSceneParam._m0[60u].z, fma(_1783, cbSceneParam._m0[60u].y, _1779 * cbSceneParam._m0[60u].x))) / _1995;
        float _1997 = fma(_1791, cbSceneParam._m0[61u].w, fma(_1787, cbSceneParam._m0[61u].z, fma(_1783, cbSceneParam._m0[61u].y, _1779 * cbSceneParam._m0[61u].x))) / _1995;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1996 >= cbSceneParam._m0[64u].x) && (_1997 >= cbSceneParam._m0[64u].y)) && (_1996 <= cbSceneParam._m0[64u].z)) && (_1997 <= cbSceneParam._m0[64u].w))
        {
            float _2136 = fma(_1791, cbSceneParam._m0[62u].w, fma(_1787, cbSceneParam._m0[62u].z, fma(_1783, cbSceneParam._m0[62u].y, _1779 * cbSceneParam._m0[62u].x))) / _1995;
            float _2140 = isnan(cbSceneParam._m0[41u].w) ? _2136 : (isnan(_2136) ? cbSceneParam._m0[41u].w : max(_2136, cbSceneParam._m0[41u].w));
            float _2183 = (cbSceneParam._m0[33u].x - sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794))) * cbSceneParam._m0[33u].y;
            float _4221 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
            float _2190 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1996, cbSceneParam._m0[33u].w + _1997), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1996, _1997 - cbSceneParam._m0[33u].z), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1996 - cbSceneParam._m0[33u].z, _1997 - cbSceneParam._m0[33u].w), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1996 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1997), _2140), 0.0)).x), vec4(0.25)));
            float _2194 = 1.0 - (_2190 * cbSceneParam._m0[34u].x);
            float _2195 = 1.0 - (_2190 * cbSceneParam._m0[34u].y);
            float _2196 = 1.0 - (_2190 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2196) ? _1943 : (isnan(_1943) ? _2196 : min(_1943, _2196));
            frontier_phi_34_33_ladder_1 = isnan(_2195) ? _1942 : (isnan(_1942) ? _2195 : min(_1942, _2195));
            frontier_phi_34_33_ladder_2 = isnan(_2194) ? _1941 : (isnan(_1941) ? _2194 : min(_1941, _2194));
        }
        else
        {
            frontier_phi_34_33_ladder = _1943;
            frontier_phi_34_33_ladder_1 = _1942;
            frontier_phi_34_33_ladder_2 = _1941;
        }
        _2007 = frontier_phi_34_33_ladder_2;
        _2009 = frontier_phi_34_33_ladder_1;
        _2011 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2007 = _1941;
        _2009 = _1942;
        _2011 = _1943;
    }
    uvec4 _2016 = floatBitsToUint(cbInstanceData._m0[_235 + 5u]);
    uint _2018 = _2016.x * 14u;
    uint _2019 = _2018 + 13u;
    float _2026 = _720 + (-1.0);
    float _2031 = (cbLight._m0[_2019].x * _2026) + 1.0;
    float _2032 = (cbLight._m0[_2019].y * _2026) + 1.0;
    float _2033 = (cbLight._m0[_2019].z * _2026) + 1.0;
    float _2034 = (cbLight._m0[_2019].w * _2026) + 1.0;
    uint _2035 = _2018 + 5u;
    float _2041 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2045 = _2018 + 4u;
    float _2055 = isnan(1.0) ? _2031 : (isnan(_2031) ? 1.0 : min(_2031, 1.0));
    uint _2059 = _2018 | 1u;
    float _2070 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_568, _569, _570));
    float _2073 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_568, _569, _570));
    float _4257 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _4268 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2078 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.3183098733425140380859375;
    float _2080 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.3183098733425140380859375;
    float _2087 = ((cbLight._m0[_2035].x * _2041) * _2080) + (((cbLight._m0[_2045].x * _2007) * _2055) * _2078);
    float _2088 = ((_2041 * cbLight._m0[_2035].y) * _2080) + (((cbLight._m0[_2045].y * _2009) * _2055) * _2078);
    float _2089 = ((_2041 * cbLight._m0[_2035].z) * _2080) + (((cbLight._m0[_2045].z * _2011) * _2055) * _2078);
    uvec4 _2093 = floatBitsToUint(cbLight._m0[_2018 + 12u]);
    bool _2095 = _2093.x == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2095)
    {
        _2197 = _2087;
        _2199 = _2088;
        _2201 = _2089;
    }
    else
    {
        uint _2205 = _2018 + 6u;
        float _2221 = (dot(vec3(cbLight._m0[_2018 + 2u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _2222 = _2221 * _2221;
        float _4279 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2223 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2224 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2197 = (((cbLight._m0[_2205].x * 0.3183098733425140380859375) * _2223) * _2224) + _2087;
        _2199 = (((cbLight._m0[_2205].y * 0.3183098733425140380859375) * _2223) * _2224) + _2088;
        _2201 = (((cbLight._m0[_2205].z * 0.3183098733425140380859375) * _2223) * _2224) + _2089;
    }
    bool _2204 = _2093.y == 0u;
    float _2259;
    float _2261;
    float _2263;
    if (_2204)
    {
        _2259 = _2197;
        _2261 = _2199;
        _2263 = _2201;
    }
    else
    {
        uint _2421 = _2018 + 7u;
        float _2437 = (dot(vec3(cbLight._m0[_2018 + 3u].xyz), vec3(_568, _569, _570)) * 0.5) + 0.5;
        float _2438 = _2437 * _2437;
        float _4295 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2439 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2440 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2259 = (((cbLight._m0[_2421].x * 0.3183098733425140380859375) * _2439) * _2440) + _2197;
        _2261 = (((cbLight._m0[_2421].y * 0.3183098733425140380859375) * _2439) * _2440) + _2199;
        _2263 = (((cbLight._m0[_2421].z * 0.3183098733425140380859375) * _2439) * _2440) + _2201;
    }
    uint _2266 = _2018 + 8u;
    float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2018].w)) * _571) * 0.949999988079071044921875);
    float _2280 = _2279 * _2279;
    float _2281 = cbLight._m0[_2018].x + _646;
    float _2282 = cbLight._m0[_2018].y + _647;
    float _2283 = cbLight._m0[_2018].z + _648;
    float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
    float _2288 = _2287 * _2281;
    float _2289 = _2287 * _2282;
    float _2290 = _2287 * _2283;
    float _2291 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2018].xyz));
    float _4311 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _4322 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _2295 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2296 = dot(vec3(_568, _569, _570), vec3(_2288, _2289, _2290));
    float _4333 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
    float _2300 = dot(vec3(cbLight._m0[_2018].xyz), vec3(_2288, _2289, _2290));
    float _4344 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2304 = _2280 * _2280;
    float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
    float _2319 = (exp2(log2(1.0 - (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2320 = 1.0 - _2280;
    float _2331 = (0.5 / (((_2295 * ((_2294 * _2320) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2320) + _2280) * _2294))) * _2294;
    float _4355 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2333 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
    uint _2347 = _2018 + 9u;
    float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _571) * 0.949999988079071044921875);
    float _2359 = _2358 * _2358;
    float _2360 = cbLight._m0[_2059].x + _646;
    float _2361 = cbLight._m0[_2059].y + _647;
    float _2362 = cbLight._m0[_2059].z + _648;
    float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
    float _2367 = _2366 * _2360;
    float _2368 = _2366 * _2361;
    float _2369 = _2366 * _2362;
    float _2370 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2059].xyz));
    float _4366 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2374 = dot(vec3(_568, _569, _570), vec3(_2367, _2368, _2369));
    float _4377 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2377 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2378 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2367, _2368, _2369));
    float _4388 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2382 = _2359 * _2359;
    float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
    float _2395 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2396 = 1.0 - _2359;
    float _2406 = (0.5 / (((_2295 * ((_2373 * _2396) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2396) + _2359) * _2373))) * _2373;
    float _4399 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2408 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
    float _2418 = (((_2395 * cbLight._m0[_2347].x) * _2408) * _2041) + ((((cbLight._m0[_2266].x * _2007) * _2319) * _2333) * _2055);
    float _2419 = (((_2395 * cbLight._m0[_2347].y) * _2408) * _2041) + ((((cbLight._m0[_2266].y * _2009) * _2319) * _2333) * _2055);
    float _2420 = (((_2395 * cbLight._m0[_2347].z) * _2408) * _2041) + ((((cbLight._m0[_2266].z * _2011) * _2319) * _2333) * _2055);
    float _2476;
    float _2478;
    float _2480;
    if (_2095)
    {
        _2476 = _2418;
        _2478 = _2419;
        _2480 = _2420;
    }
    else
    {
        uint _2482 = _2018 + 2u;
        uint _2486 = _2018 + 10u;
        float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _571) * 0.949999988079071044921875);
        float _2501 = _2500 * _2500;
        float _2502 = cbLight._m0[_2482].x + _646;
        float _2503 = cbLight._m0[_2482].y + _647;
        float _2504 = cbLight._m0[_2482].z + _648;
        float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
        float _2509 = _2508 * _2502;
        float _2510 = _2508 * _2503;
        float _2511 = _2508 * _2504;
        float _2512 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2482].xyz));
        float _4410 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2516 = dot(vec3(_568, _569, _570), vec3(_2509, _2510, _2511));
        float _4421 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2520 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2509, _2510, _2511));
        float _4432 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2524 = _2501 * _2501;
        float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
        float _2537 = (exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2538 = 1.0 - _2501;
        float _2548 = (0.5 / (((_2295 * ((_2515 * _2538) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2538) + _2501) * _2515))) * _2515;
        float _4443 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2550 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
        float _2551 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
        _2476 = (((_2537 * cbLight._m0[_2486].x) * _2550) * _2551) + _2418;
        _2478 = (((_2537 * cbLight._m0[_2486].y) * _2550) * _2551) + _2419;
        _2480 = (((_2537 * cbLight._m0[_2486].z) * _2550) * _2551) + _2420;
    }
    float _2582;
    float _2584;
    float _2586;
    if (_2204)
    {
        _2582 = _2476;
        _2584 = _2478;
        _2586 = _2480;
    }
    else
    {
        uint _2593 = _2018 + 3u;
        uint _2597 = _2018 + 11u;
        float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2593].w)) * _571) * 0.949999988079071044921875);
        float _2612 = _2611 * _2611;
        float _2613 = cbLight._m0[_2593].x + _646;
        float _2614 = cbLight._m0[_2593].y + _647;
        float _2615 = cbLight._m0[_2593].z + _648;
        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
        float _2620 = _2619 * _2613;
        float _2621 = _2619 * _2614;
        float _2622 = _2619 * _2615;
        float _2623 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2593].xyz));
        float _4459 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2627 = dot(vec3(_568, _569, _570), vec3(_2620, _2621, _2622));
        float _4470 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _2631 = dot(vec3(cbLight._m0[_2593].xyz), vec3(_2620, _2621, _2622));
        float _4481 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2635 = _2612 * _2612;
        float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
        float _2648 = (exp2(log2(1.0 - (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2649 = 1.0 - _2612;
        float _2659 = (0.5 / (((_2295 * ((_2626 * _2649) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2649) + _2612) * _2626))) * _2626;
        float _4492 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2661 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
        float _2662 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2582 = (((_2648 * cbLight._m0[_2597].x) * _2661) * _2662) + _2476;
        _2584 = (((_2648 * cbLight._m0[_2597].y) * _2661) * _2662) + _2478;
        _2586 = (((_2648 * cbLight._m0[_2597].z) * _2661) * _2662) + _2480;
    }
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    if (_2016.y == 0u)
    {
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.x;
        uint _2695 = uint((float(_2683.y) * floor(float(uint(cbSceneParam._m0[85u].y * _655) / _2684))) + floor(float(uint(cbSceneParam._m0[85u].x * _654) / _2684)));
        float _2705 = (log2(_1794 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2706 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        uint _2709 = uint(isnan(14.0) ? _2706 : (isnan(_2706) ? 14.0 : min(_2706, 14.0)));
        uvec4 _2714 = texelFetch(g_lightClusterGridBuffer, int(((_2709 << 2u) + (_2695 << 6u)) >> 2u));
        uint _2715 = _2714.x;
        uint _2716 = _2683.z;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        if (((((1u << ((_2716 >> 4u) & 15u)) + 4294967295u) & _2715) == 0u) || ((_2716 & 240u) == 0u))
        {
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
        }
        else
        {
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2939 = 0.0;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            uint _2945 = 0u;
            uint _2954;
            bool _2955;
            for (;;)
            {
                _2954 = texelFetch(g_lightClassification, int((((_2709 << 5u) + (_2695 << 9u)) + (_2945 << 2u)) >> 2u)).x;
                _2955 = _2954 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2955)
                {
                    frontier_phi_66_pred = _2944;
                    frontier_phi_66_pred_1 = _2943;
                    frontier_phi_66_pred_2 = _2942;
                    frontier_phi_66_pred_3 = _2941;
                    frontier_phi_66_pred_4 = _2940;
                    frontier_phi_66_pred_5 = _2939;
                }
                else
                {
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    uint _3069;
                    _3063 = _2939;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2954;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    for (;;)
                    {
                        uint _3073 = uint(findLSB(_3069)) + (_2945 << 5u);
                        uint _3070 = (_3069 + 4294967295u) & _3069;
                        uint _3075 = _3073 * 48u;
                        vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 3u)).x));
                        uint _3095 = (_3073 * 48u) + 4u;
                        vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3095)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 3u)).x));
                        uint _3114 = (_3073 * 48u) + 8u;
                        vec3 _3125 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3114)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3114 + 2u)).x));
                        float _3129 = _3089.x - _1792;
                        float _3130 = _3089.y - _1793;
                        float _3131 = _3089.z - _1794;
                        float _3132 = dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131));
                        float _3135 = inversesqrt(_3132);
                        float _3136 = _3135 * _3129;
                        float _3137 = _3135 * _3130;
                        float _3138 = _3135 * _3131;
                        float _3139 = dot(vec3(_676, _679, _682), vec3(_3136, _3137, _3138));
                        float _3144 = 1.0 - (_3132 * _3089.w);
                        float _4518 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3146 = sqrt(_3132) * _3108.w;
                        float _3149 = 1.39999997615814208984375 / (_3146 + 1.39999997615814208984375);
                        float _3150 = _3149 * _3149;
                        float _3153 = ((1.0 - _3150) * _3139) + _3150;
                        float _3156 = _3146 * _3146;
                        float _3160 = ((isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))) * _3145) / ((_3156 * 0.699999988079071044921875) + 1.0);
                        float _3164 = (-0.0) - _1792;
                        float _3165 = (-0.0) - _1793;
                        float _3166 = (-0.0) - _1794;
                        float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                        float _3171 = _3170 * _3164;
                        float _3172 = _3170 * _3165;
                        float _3173 = _3170 * _3166;
                        float _3180 = exp2(log2(1.0 / ((_3156 * 3.5) + 5.0)) * 0.25);
                        float _3181 = 1.0 - _736;
                        float _3188 = sqrt(1.0 - ((1.0 - (_3181 * _3181)) * (1.0 - (_3180 * _3180))));
                        float _3189 = _3188 * _3188;
                        float _3190 = _3189 * _3189;
                        float _3191 = _3171 + _3136;
                        float _3192 = _3172 + _3137;
                        float _3193 = _3173 + _3138;
                        float _3197 = inversesqrt(dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193)));
                        float _3201 = dot(vec3(_676, _679, _682), vec3(_3171, _3172, _3173));
                        float _4534 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3205 = dot(vec3(_676, _679, _682), vec3(_3197 * _3191, _3197 * _3192, _3197 * _3193));
                        float _4545 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3212 = ((_3208 * _3208) * (_3190 + (-1.0))) + 1.0;
                        float _3213 = _3149 * _3189;
                        float _3214 = _3213 * _3213;
                        float _3217 = ((1.0 - _3214) * _3139) + _3214;
                        float _4556 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                        float _3219 = 1.0 - _3189;
                        float _3229 = (0.5 / (((_3218 * ((_3204 * _3219) + _3189)) + 9.9999999392252902907785028219223e-09) + (((_3218 * _3219) + _3189) * _3204))) * _3218;
                        float _4567 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3240 = (((_3190 * 3.1415927410125732421875) * (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) / ((_3212 * _3212) * ((_3156 * 2.1991131305694580078125) + 3.141590118408203125))) * _3145;
                        _2998 = (_3160 * _3108.x) + _3066;
                        _2999 = (_3160 * _3108.y) + _3067;
                        _3000 = (_3160 * _3108.z) + _3068;
                        _2995 = (_3240 * _3125.x) + _3063;
                        _2996 = (_3240 * _3125.y) + _3064;
                        _2997 = (_3240 * _3125.z) + _3065;
                        if (_3070 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3063 = _2995;
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3070;
                        }
                    }
                    frontier_phi_66_pred = _3000;
                    frontier_phi_66_pred_1 = _2999;
                    frontier_phi_66_pred_2 = _2998;
                    frontier_phi_66_pred_3 = _2997;
                    frontier_phi_66_pred_4 = _2996;
                    frontier_phi_66_pred_5 = _2995;
                }
                _2806 = frontier_phi_66_pred;
                _2804 = frontier_phi_66_pred_1;
                _2802 = frontier_phi_66_pred_2;
                _2800 = frontier_phi_66_pred_3;
                _2798 = frontier_phi_66_pred_4;
                _2796 = frontier_phi_66_pred_5;
                uint _2946 = _2945 + 1u;
                if (_2946 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2939 = _2796;
                    _2940 = _2798;
                    _2941 = _2800;
                    _2942 = _2802;
                    _2943 = _2804;
                    _2944 = _2806;
                    _2945 = _2946;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
        }
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.z;
        uint _2812 = (_2810 >> 8u) & 15u;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        if (((4294967295u << _2812) & _2715) == 0u)
        {
            _2907 = _2795;
            _2909 = _2797;
            _2911 = _2799;
            _2913 = _2801;
            _2915 = _2803;
            _2917 = _2805;
        }
        else
        {
            float _2932 = inversesqrt(dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794)));
            float _2933 = _2932 * _1792;
            float _2934 = _2932 * _1793;
            float _2935 = _2932 * _1794;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2812 < ((_2810 >> 12u) & 15u))
            {
                float _2908;
                float _2910;
                float _2912;
                float _2914;
                float _2916;
                float _2918;
                float _3046 = _2795;
                float _3047 = _2797;
                float _3048 = _2799;
                float _3049 = _2801;
                float _3050 = _2803;
                float _3051 = _2805;
                uint _3052 = _2812;
                uint _3061;
                bool _3062;
                for (;;)
                {
                    _3061 = texelFetch(g_lightClassification, int((((_2709 << 5u) + (_2695 << 9u)) + (_3052 << 2u)) >> 2u)).x;
                    _3062 = _3061 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3062)
                    {
                        frontier_phi_72_pred = _3051;
                        frontier_phi_72_pred_1 = _3050;
                        frontier_phi_72_pred_2 = _3049;
                        frontier_phi_72_pred_3 = _3048;
                        frontier_phi_72_pred_4 = _3047;
                        frontier_phi_72_pred_5 = _3046;
                    }
                    else
                    {
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3258 = _3046;
                        float _3259 = _3047;
                        float _3260 = _3048;
                        float _3261 = _3049;
                        float _3262 = _3050;
                        float _3263 = _3051;
                        uint _3264 = _3061;
                        uint _3265;
                        vec4 _3290;
                        float _3291;
                        vec4 _3306;
                        vec3 _3318;
                        vec4 _3334;
                        vec4 _3350;
                        float _3396;
                        bool _3397;
                        for (;;)
                        {
                            uint _3275 = ((_3052 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3264));
                            _3265 = (_3264 + 4294967295u) & _3264;
                            uint _3277 = _3275 * 40u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            _3291 = _3290.w;
                            uint _3293 = (_3275 * 40u) + 4u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3308 = (_3275 * 40u) + 8u;
                            _3318 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x));
                            uint _3321 = (_3275 * 40u) + 16u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3337 = (_3275 * 40u) + 20u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3352 = (_3275 * 40u) + 24u;
                            vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3371 = (_3275 * 40u) + 28u;
                            vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            _3396 = fma(_1794, _3384.z, fma(_1793, _3384.y, _3384.x * _1792)) + _3384.w;
                            _3397 = !((fma(_1794, _3365.z, fma(_1793, _3365.y, _3365.x * _1792)) + _3365.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3397)
                            {
                                float _3424 = _3290.x - _1792;
                                float _3425 = _3290.y - _1793;
                                float _3426 = _3290.z - _1794;
                                float _3427 = dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426));
                                float _3430 = inversesqrt(_3427);
                                float _3431 = _3430 * _3424;
                                float _3432 = _3430 * _3425;
                                float _3433 = _3430 * _3426;
                                float _3437 = 1.0 - (_3427 / (_3291 * _3291));
                                float _4578 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3438 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3442 = sqrt(_3427) * _3306.w;
                                float _3444 = 1.39999997615814208984375 / (_3442 + 1.39999997615814208984375);
                                float _3445 = _3444 * _3444;
                                float _3448 = ((1.0 - _3445) * dot(vec3(_3431, _3432, _3433), vec3(_676, _679, _682))) + _3445;
                                float _3451 = _3442 * _3442;
                                float _3455 = (fma(_1794, _3334.z, fma(_1793, _3334.y, _3334.x * _1792)) + _3334.w) / _3396;
                                float _3456 = (fma(_1794, _3350.z, fma(_1793, _3350.y, _3350.x * _1792)) + _3350.w) / _3396;
                                float _3460 = 1.0 - dot(vec2(_3455, _3456), vec2(_3455, _3456));
                                float _4594 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                                float _3461 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3462 = _3461 * (((isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0))) * _3438) / ((_3451 * 0.699999988079071044921875) + 1.0));
                                float _3474 = exp2(log2(1.0 / ((_3451 * 3.5) + 5.0)) * 0.25);
                                float _3475 = 1.0 - _736;
                                float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                                float _3483 = _3482 * _3482;
                                float _3484 = _3483 * _3483;
                                float _3485 = _3431 - _2933;
                                float _3486 = _3432 - _2934;
                                float _3487 = _3433 - _2935;
                                float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                                float _3495 = dot(vec3(_676, _679, _682), vec3((-0.0) - _2933, (-0.0) - _2934, (-0.0) - _2935));
                                float _4605 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3498 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3499 = dot(vec3(_676, _679, _682), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                                float _4616 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3502 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                                float _3507 = _3444 * _3483;
                                float _3508 = _3507 * _3507;
                                float _3514 = ((1.0 - _3508) * dot(vec3(_676, _679, _682), vec3(_3431, _3432, _3433))) + _3508;
                                float _4627 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3515 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                                float _3516 = 1.0 - _3483;
                                float _3526 = (0.5 / (((_3515 * ((_3498 * _3516) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3515 * _3516) + _3483) * _3498))) * _3515;
                                float _4638 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3536 = (_3461 * _3438) * (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) / ((_3506 * _3506) * ((_3451 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3462 * _3306.y;
                                frontier_phi_78_pred_1 = _3462 * _3306.x;
                                frontier_phi_78_pred_2 = _3536 * _3318.z;
                                frontier_phi_78_pred_3 = _3536 * _3318.y;
                                frontier_phi_78_pred_4 = _3536 * _3318.x;
                                frontier_phi_78_pred_5 = _3462 * _3306.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3544 = frontier_phi_78_pred;
                            _3543 = frontier_phi_78_pred_1;
                            _3542 = frontier_phi_78_pred_2;
                            _3541 = frontier_phi_78_pred_3;
                            _3540 = frontier_phi_78_pred_4;
                            _3545 = frontier_phi_78_pred_5;
                            _3248 = _3543 + _3261;
                            _3249 = _3544 + _3262;
                            _3250 = _3545 + _3263;
                            _3245 = _3540 + _3258;
                            _3246 = _3541 + _3259;
                            _3247 = _3542 + _3260;
                            if (_3265 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3265;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3250;
                        frontier_phi_72_pred_1 = _3249;
                        frontier_phi_72_pred_2 = _3248;
                        frontier_phi_72_pred_3 = _3247;
                        frontier_phi_72_pred_4 = _3246;
                        frontier_phi_72_pred_5 = _3245;
                    }
                    _2918 = frontier_phi_72_pred;
                    _2916 = frontier_phi_72_pred_1;
                    _2914 = frontier_phi_72_pred_2;
                    _2912 = frontier_phi_72_pred_3;
                    _2910 = frontier_phi_72_pred_4;
                    _2908 = frontier_phi_72_pred_5;
                    uint _3053 = _3052 + 1u;
                    if (_3053 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3046 = _2908;
                        _3047 = _2910;
                        _3048 = _2912;
                        _3049 = _2914;
                        _3050 = _2916;
                        _3051 = _2918;
                        _3052 = _3053;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2918;
                frontier_phi_60_61_ladder_1 = _2916;
                frontier_phi_60_61_ladder_2 = _2912;
                frontier_phi_60_61_ladder_3 = _2910;
                frontier_phi_60_61_ladder_4 = _2908;
                frontier_phi_60_61_ladder_5 = _2914;
            }
            else
            {
                frontier_phi_60_61_ladder = _2805;
                frontier_phi_60_61_ladder_1 = _2803;
                frontier_phi_60_61_ladder_2 = _2799;
                frontier_phi_60_61_ladder_3 = _2797;
                frontier_phi_60_61_ladder_4 = _2795;
                frontier_phi_60_61_ladder_5 = _2801;
            }
            _2907 = frontier_phi_60_61_ladder_4;
            _2909 = frontier_phi_60_61_ladder_3;
            _2911 = frontier_phi_60_61_ladder_2;
            _2913 = frontier_phi_60_61_ladder_5;
            _2915 = frontier_phi_60_61_ladder_1;
            _2917 = frontier_phi_60_61_ladder;
        }
        float _2922 = isnan(1.0) ? _720 : (isnan(_720) ? 1.0 : min(_720, 1.0));
        _2728 = (_2922 * _2913) + _2259;
        _2730 = (_2922 * _2915) + _2261;
        _2732 = (_2922 * _2917) + _2263;
        _2734 = ((_2907 * 0.039999999105930328369140625) * _2922) + _2582;
        _2736 = ((_2909 * 0.039999999105930328369140625) * _2922) + _2584;
        _2738 = ((_2911 * 0.039999999105930328369140625) * _2922) + _2586;
    }
    else
    {
        _2728 = _2259;
        _2730 = _2261;
        _2732 = _2263;
        _2734 = _2582;
        _2736 = _2584;
        _2738 = _2586;
    }
    float _4654 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4665 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4676 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    uint _2758 = _235 + 6u;
    float _2766 = _654 / cbSceneParam._m0[86u].x;
    float _2767 = _655 / cbSceneParam._m0[86u].y;
    vec4 _2781 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2766, _2767, (log2((isnan(cbSceneParam._m0[77u].w) ? _589 : (isnan(_589) ? cbSceneParam._m0[77u].w : min(_589, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2783 = _2781.x;
    float _2784 = _2781.y;
    float _2785 = _2781.z;
    float _2786 = _2781.w;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    if (_589 > cbSceneParam._m0[78u].w)
    {
        float _2820 = isnan(_589) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _589 : min(cbSceneParam._m0[80u].w, _589));
        float _2821 = _2820 / _589;
        float _2832 = _2821 * _639;
        float _2833 = _640 * _2821;
        float _2834 = (-0.0) - _2833;
        float _2835 = _2821 * _641;
        float _2837 = (cbSceneParam._m0[77u].w * _2834) / _2820;
        float _2838 = _2837 + cbSceneParam._m0[79u].w;
        float _2839 = cbSceneParam._m0[79u].w - _2833;
        float _2845 = sqrt(((_2832 * _2832) + (_2833 * _2833)) + (_2835 * _2835));
        float _2848 = (1.0 - (cbSceneParam._m0[77u].w / _2820)) * _2845;
        float _2853 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2855 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3008;
        if (abs((_2834 - _2837) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3008 = ((((_2838 > 0.0) ? exp2(_2853 * _2838) : (2.0 - exp2(_2855 * _2838))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2848;
        }
        else
        {
            float _2968 = 1.0 / cbSceneParam._m0[80u].x;
            float _2969 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : max(_2838, _2839));
            float _2970 = isnan(_2839) ? _2838 : (isnan(_2838) ? _2839 : min(_2838, _2839));
            float _2979 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : min(_2969, 0.0));
            float _2980 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : min(_2970, 0.0));
            _3008 = ((abs(_2845 / _2834) * cbSceneParam._m0[80u].y) * ((((_2979 - _2980) * 2.0) - ((exp2(_2853 * (isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0)))) - exp2(_2853 * (isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0))))) * _2968)) - ((exp2(_2855 * _2979) - exp2(_2855 * _2980)) * _2968))) + (_2848 * cbSceneParam._m0[80u].z);
        }
        vec4 _3010 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2766, _2767, 1.0), 0.0);
        float _3019 = exp2((_3008 * (-1.44269502162933349609375)) * (1.0 - _3010.w));
        float _3020 = log2(_3019);
        float _3036 = log2(_2786);
        _2857 = (exp2(_3036 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].x)) * _3010.x) / cbSceneParam._m0[78u].x)) + _2783;
        _2859 = (exp2(_3036 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].y)) * _3010.y) / cbSceneParam._m0[78u].y)) + _2784;
        _2861 = (exp2(_3036 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3020 * cbSceneParam._m0[78u].z)) * _3010.z) / cbSceneParam._m0[78u].z)) + _2785;
        _2863 = _3019 * _2786;
    }
    else
    {
        _2857 = _2783;
        _2859 = _2784;
        _2861 = _2785;
        _2863 = _2786;
    }
    float _2875 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2876 = _2875 == 3.0;
    float _2877 = log2(_2863);
    float _2884 = exp2(_2877 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2728 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _720))) + ((_2734 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _1525)) * cbPerFrame._m0[3u].x));
    float _2885 = exp2(_2877 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2730 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _720))) + ((_2736 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1525)) * cbPerFrame._m0[3u].x));
    float _2886 = exp2(_2877 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2732 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _720))) + ((_2738 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1525)) * cbPerFrame._m0[3u].x));
    float _2895 = (_2875 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2895 * (_2876 ? _2884 : (_2884 + (cbSceneParam._m0[72u].w * _2857)));
    SV_Target.y = _2895 * (_2876 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2859)));
    SV_Target.z = _2895 * (_2876 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2861)));
    SV_Target.w = cbInstanceData._m0[_2758].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2758].w;
}


