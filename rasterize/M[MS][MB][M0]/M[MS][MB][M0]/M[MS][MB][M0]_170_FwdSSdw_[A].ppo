#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1183;
float _3568;
float _3569;
float _3570;
float _3571;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _240 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _240 + 1u;
    uint _250 = _240 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _287 = _281.x * cbMtdParam._m0[11u].x;
    float _288 = _281.y * cbMtdParam._m0[11u].y;
    float _289 = _281.z * cbMtdParam._m0[11u].z;
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _260) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    vec4 _347 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _349 = _347.x;
    float _359 = dot(vec4(_349, _347.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _376 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_349 - _359) * cbMtdParam._m0[24u].x) + _359) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3580 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _377 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
    float _384 = (_377 * ((_308.x * cbMtdParam._m0[12u].x) - _287)) + _287;
    float _385 = (_377 * ((_308.y * cbMtdParam._m0[12u].y) - _288)) + _288;
    float _386 = (_377 * ((_308.z * cbMtdParam._m0[12u].z) - _289)) + _289;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _260) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _261) + cbTextureTilingScale._m0[3u].w));
    vec4 _423 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _435 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _449 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_425 - _435) * cbMtdParam._m0[24u].x) + _435) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3591 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _457 = (_450 * ((_403.x * cbMtdParam._m0[13u].x) - _384)) + _384;
    float _458 = (_450 * ((_403.y * cbMtdParam._m0[13u].y) - _385)) + _385;
    float _459 = (_450 * ((_403.z * cbMtdParam._m0[13u].z) - _386)) + _386;
    vec4 _471 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _494 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _260) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _261) + cbTextureTilingScale._m0[4u].w));
    vec4 _511 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _513 = _511.x;
    float _514 = _511.y;
    float _515 = _511.z;
    float _522 = ((_494.x - _513) * _377) + _513;
    float _523 = ((_494.y - _514) * _377) + _514;
    float _524 = ((_494.z - _515) * _377) + _515;
    vec4 _536 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _260) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _549 = ((_536.z - _524) * _450) + _524;
    float _552 = ((((_536.x - _522) * _450) + _522) * 2.0) + (-1.0);
    float _553 = ((((_536.y - _523) * _450) + _523) * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _3602 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))));
    vec4 _579 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _591 = (_552 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_471.x * 2.0) + (-1.0)))) + (((_579.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _592 = (_553 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_471.y * 2.0) + (-1.0)))) + (((_579.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _597 = (((_471.z - _549) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _549;
    float _601 = ((_579.z - _597) * cbMtdParam._m0[19u].w) + _597;
    float _606 = cbMtdParam._m0[22u].x + _579.w;
    float _609 = fma(_559, _227 * NORMAL.x, fma(_592, _234 * TANGENT.x, (_220 * _212) * _591));
    float _612 = fma(_559, _227 * NORMAL.y, fma(_592, _234 * TANGENT.y, (_220 * _213) * _591));
    float _615 = fma(_559, _227 * NORMAL.z, fma(_592, _234 * TANGENT.z, (_220 * _214) * _591));
    float _619 = inversesqrt(dot(vec3(_609, _612, _615), vec3(_609, _612, _615)));
    float _620 = _619 * _609;
    float _621 = _619 * _612;
    float _622 = _619 * _615;
    float _3613 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _623 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _3624 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3635 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3646 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3657 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _641 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _693 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _683);
    float _694 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _683);
    float _695 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _683);
    float _699 = inversesqrt(dot(vec3(_693, _694, _695), vec3(_693, _694, _695)));
    float _700 = _693 * _699;
    float _701 = _694 * _699;
    float _702 = _695 * _699;
    vec4 _707 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _709 = _707.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _863 = sqrt(((_693 * _693) + (_694 * _694)) + (_695 * _695));
        float _869 = (cbMatDynParam._m0[5u].x * _863) + cbMatDynParam._m0[5u].y;
        float _3668 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _874 = (cbMatDynParam._m0[5u].z * _863) + cbMatDynParam._m0[5u].w;
        float _3679 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) - _870)) + _870) < ((_709 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _720 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _721 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _739 = fma(_622, cbSceneParam._m0[5u].z, fma(_621, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _620));
    float _742 = fma(_622, cbSceneParam._m0[6u].z, fma(_621, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _620));
    float _745 = fma(_622, cbSceneParam._m0[7u].z, fma(_621, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _620));
    uint _758 = _240 + 9u;
    uint _759 = _758 + uint(cbMatDynParam._m0[0u].w);
    float _765 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0)))) * cbInstanceData._m0[_759].x;
    float _766 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0)))) * cbInstanceData._m0[_759].y;
    float _767 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0)))) * cbInstanceData._m0[_759].z;
    float _3690 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
    float _3701 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    vec4 _779 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _720, cbSceneParam._m0[86u].y * _721));
    float _783 = ((isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * TEXCOORD_5.w) * _779.x;
    float _784 = dot(vec3(_620, _621, _622), vec3(_700, _701, _702));
    float _787 = _784 * 2.0;
    float _791 = (_787 * _620) - _700;
    float _792 = (_787 * _621) - _701;
    float _793 = (_787 * _622) - _702;
    float _797 = abs(dot(vec3(_700, _701, _702), vec3(_620, _621, _622)));
    float _3723 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _799 = sqrt(_623);
    float _812 = exp2((_799 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_799 * 3.0));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1182;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _907 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _911 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _915 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _940 = _844 + _620;
        float _941 = _848 + _621;
        float _942 = _852 + _622;
        float _952 = fma(_942, cbModelParam._m0[26u].z, fma(_941, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _940)) - _907;
        float _953 = fma(_942, cbModelParam._m0[27u].z, fma(_941, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _940)) - _911;
        float _954 = fma(_942, cbModelParam._m0[28u].z, fma(_941, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _940)) - _915;
        float _958 = inversesqrt(dot(vec3(_952, _953, _954), vec3(_952, _953, _954)));
        float _971 = ((_958 * _952) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_907 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_958 * _953) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_911 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _973 = ((_958 * _954) / cbModelParam._m0[34u].z) + ((((((_915 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_971, _972, _973), 0.0);
        float _1010 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_976.x + (-0.5));
        float _1012 = _1010 * (_976.y + (-0.5));
        float _1013 = _1010 * (_976.z + (-0.5));
        float _1020 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_983.x + (-0.5));
        float _1022 = _1020 * (_983.y + (-0.5));
        float _1023 = _1020 * (_983.z + (-0.5));
        float _1030 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_990.x + (-0.5));
        float _1032 = _1030 * (_990.y + (-0.5));
        float _1033 = _1030 * (_990.z + (-0.5));
        float _1040 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_997.x + (-0.5));
        float _1042 = _1040 * (_997.y + (-0.5));
        float _1043 = _1040 * (_997.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1064 = (dot(vec3(_620, _621, _622), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1074 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3771 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1076 + 1.0))) + _1081) * _1044;
        float _1091 = _1012 * 0.5;
        float _1092 = _1022 * 0.5;
        float _1093 = _1032 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(_620, _621, _622), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3804 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1118 + 1.0))) + _1123) * _1045;
        float _1133 = _1013 * 0.5;
        float _1134 = _1023 * 0.5;
        float _1135 = _1033 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_620, _621, _622), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3815 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _3826 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3837 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * (_1160 + 1.0))) + _1165) * _1046;
        _1182 = _1013;
        _1184 = _1012;
        _1185 = _1011;
        _1186 = _1023;
        _1187 = _1022;
        _1188 = _1021;
        _1189 = _1033;
        _1190 = _1032;
        _1191 = _1031;
        _1192 = _1046;
        _1193 = _1045;
        _1194 = _1044;
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1197 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
    }
    else
    {
        _1182 = _1183;
        _1184 = _1183;
        _1185 = _1183;
        _1186 = _1183;
        _1187 = _1183;
        _1188 = _1183;
        _1189 = _1183;
        _1190 = _1183;
        _1191 = _1183;
        _1192 = _1183;
        _1193 = _1183;
        _1194 = _1183;
        _1195 = 0.0;
        _1196 = 0.0;
        _1197 = 0.0;
    }
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1224 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1228 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1232 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1255 = _844 + _620;
        float _1256 = _848 + _621;
        float _1257 = _852 + _622;
        float _1267 = fma(_1257, cbModelParam._m0[30u].z, fma(_1256, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1255)) - _1224;
        float _1268 = fma(_1257, cbModelParam._m0[31u].z, fma(_1256, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1255)) - _1228;
        float _1269 = fma(_1257, cbModelParam._m0[32u].z, fma(_1256, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1255)) - _1232;
        float _1273 = inversesqrt(dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269)));
        float _1286 = ((_1273 * _1267) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1224 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1273 * _1268) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1228 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1273 * _1269) / cbModelParam._m0[35u].z) + ((((((_1232 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1286, _1287, _1288), 0.0);
        float _1323 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1290.x + (-0.5));
        float _1325 = _1323 * (_1290.y + (-0.5));
        float _1326 = _1323 * (_1290.z + (-0.5));
        float _1333 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1297.x + (-0.5));
        float _1335 = _1333 * (_1297.y + (-0.5));
        float _1336 = _1333 * (_1297.z + (-0.5));
        float _1343 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1304.x + (-0.5));
        float _1345 = _1343 * (_1304.y + (-0.5));
        float _1346 = _1343 * (_1304.z + (-0.5));
        float _1353 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1311.x + (-0.5));
        float _1355 = _1353 * (_1311.y + (-0.5));
        float _1356 = _1353 * (_1311.z + (-0.5));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = _1324 * 0.5;
        float _1361 = _1334 * 0.5;
        float _1362 = _1344 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_620, _621, _622), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _3900 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1387 + 1.0))) + _1392) * _1357;
        float _1402 = _1325 * 0.5;
        float _1403 = _1335 * 0.5;
        float _1404 = _1345 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_620, _621, _622), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _3933 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1429 + 1.0))) + _1434) * _1358;
        float _1444 = _1326 * 0.5;
        float _1445 = _1336 * 0.5;
        float _1446 = _1346 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_620, _621, _622), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _3944 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3955 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _3966 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1471 + 1.0))) + _1476) * _1359;
        _1493 = _1326;
        _1494 = _1325;
        _1495 = _1324;
        _1496 = _1336;
        _1497 = _1335;
        _1498 = _1334;
        _1499 = _1346;
        _1500 = _1345;
        _1501 = _1344;
        _1502 = _1359;
        _1503 = _1358;
        _1504 = _1357;
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
    }
    else
    {
        _1493 = _1183;
        _1494 = _1183;
        _1495 = _1183;
        _1496 = _1183;
        _1497 = _1183;
        _1498 = _1183;
        _1499 = _1183;
        _1500 = _1183;
        _1501 = _1183;
        _1502 = _1183;
        _1503 = _1183;
        _1504 = _1183;
        _1505 = 0.0;
        _1506 = 0.0;
        _1507 = 0.0;
    }
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1195)) + _1195;
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1196)) + _1196;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1197)) + _1197;
    float _1540 = fma(_1519, cbSceneParam._m0[89u].z, fma(_1518, cbSceneParam._m0[89u].y, _1517 * cbSceneParam._m0[89u].x));
    float _1543 = fma(_1519, cbSceneParam._m0[90u].z, fma(_1518, cbSceneParam._m0[90u].y, _1517 * cbSceneParam._m0[90u].x));
    float _1546 = fma(_1519, cbSceneParam._m0[91u].z, fma(_1518, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1517));
    float _1561 = _791 * 0.5;
    float _1562 = _792 * 0.5;
    float _1563 = _793 * 0.5;
    float _1564 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1567 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1570 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1604;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1577 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1182, _1186, _1189, _1192));
        float _1581 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1585 = dot(vec4(_1561, _1562, _1563, 1.0), vec4(_1185, _1188, _1191, _1194));
        float _1592 = dot(vec4(cbModelParam._m0[39u]), vec4(_1561, _1562, _1563, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1592) ? 0.0 : (isnan(0.0) ? _1592 : max(0.0, _1592))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1615;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1606 = dot(vec4(cbModelParam._m0[40u]), vec4(_1561, _1562, _1563, 1.0));
        _1615 = dot(vec3(isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1606) ? 0.0 : (isnan(0.0) ? _1606 : max(0.0, _1606))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1615 = 1.0;
    }
    float _1619 = (_1615 * cbModelParam._m0[1u].x) + (_1604 * (1.0 - cbModelParam._m0[1u].x));
    float _1629 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _623);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1629 : min(cbModelParam._m0[25u].z, _1629));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1679 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1683 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1687 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1690 = fma(_793, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791));
        float _1693 = fma(_793, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791));
        float _1696 = fma(_793, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791));
        float _1724;
        if (_1690 > 0.0)
        {
            _1724 = abs((1.0 - _1679) / _1690);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1679 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1724 = frontier_phi_17_15_ladder;
        }
        float _1947;
        if (_1693 > 0.0)
        {
            _1947 = abs((1.0 - _1683) / _1693);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1683 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1947 = frontier_phi_26_22_ladder;
        }
        float _2193;
        if (_1696 > 0.0)
        {
            _2193 = abs((1.0 - _1687) / _1696);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1687 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2193 = frontier_phi_38_33_ladder;
        }
        float _2195 = isnan(_1947) ? _1724 : (isnan(_1724) ? _1947 : min(_1724, _1947));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1690) + _1679;
        float _2201 = (_2196 * _1693) + _1683;
        float _2202 = (_2196 * _1696) + _1687;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2205 = (-1.0) - _2203;
        float _2207 = _2203 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2202 > _2207) || ((_2202 < _2205) || ((_2201 > _2207) || ((_2201 < _2205) || ((_2200 < _2205) || (_2200 > _2207))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2326 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2202, cbModelParam._m0[9u].z, fma(_2201, cbModelParam._m0[9u].y, _2200 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2202, cbModelParam._m0[10u].z, fma(_2201, cbModelParam._m0[10u].y, _2200 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2202, cbModelParam._m0[11u].z, fma(_2201, cbModelParam._m0[11u].y, _2200 * cbModelParam._m0[11u].x))), _1630);
            frontier_phi_16_38_ladder = _2326.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2326.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2326.x * cbModelParam._m0[1u].y;
        }
        _1712 = frontier_phi_16_38_ladder_2;
        _1714 = frontier_phi_16_38_ladder_1;
        _1716 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1700 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_791, _792, _793), _1630);
        _1712 = _1700.x * cbModelParam._m0[1u].y;
        _1714 = _1700.y * cbModelParam._m0[1u].y;
        _1716 = _1700.z * cbModelParam._m0[1u].y;
    }
    float _1720 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _623);
    float _1721 = isnan(_1720) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1720 : min(cbModelParam._m0[25u].w, _1720));
    float _1812;
    float _1814;
    float _1816;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1776 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1780 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1784 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1787 = fma(_793, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791));
        float _1790 = fma(_793, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791));
        float _1793 = fma(_793, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791));
        float _1952;
        if (_1787 > 0.0)
        {
            _1952 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1952 = frontier_phi_28_24_ladder;
        }
        float _2220;
        if (_1790 > 0.0)
        {
            _2220 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2220 = frontier_phi_40_35_ladder;
        }
        float _2425;
        if (_1793 > 0.0)
        {
            _2425 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2425 = frontier_phi_49_46_ladder;
        }
        float _2427 = isnan(_2220) ? _1952 : (isnan(_1952) ? _2220 : min(_1952, _2220));
        float _2428 = isnan(_2425) ? _2427 : (isnan(_2427) ? _2425 : min(_2427, _2425));
        float _2432 = (_2428 * _1787) + _1776;
        float _2433 = (_2428 * _1790) + _1780;
        float _2434 = (_2428 * _1793) + _1784;
        float _2435 = _2428 * 9.9999997473787516355514526367188e-05;
        float _2436 = (-1.0) - _2435;
        float _2438 = _2435 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2434 > _2438) || ((_2434 < _2436) || ((_2433 > _2438) || ((_2433 < _2436) || ((_2432 < _2436) || (_2432 > _2438))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2633 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2434, cbModelParam._m0[17u].z, fma(_2433, cbModelParam._m0[17u].y, _2432 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2434, cbModelParam._m0[18u].z, fma(_2433, cbModelParam._m0[18u].y, _2432 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2434, cbModelParam._m0[19u].z, fma(_2433, cbModelParam._m0[19u].y, _2432 * cbModelParam._m0[19u].x))), _1721);
            frontier_phi_25_49_ladder = _2633.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2633.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2633.x * cbModelParam._m0[1u].z;
        }
        _1812 = frontier_phi_25_49_ladder_2;
        _1814 = frontier_phi_25_49_ladder_1;
        _1816 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_791, _792, _793), _1721);
        _1812 = _1796.x * cbModelParam._m0[1u].z;
        _1814 = _1796.y * cbModelParam._m0[1u].z;
        _1816 = _1796.z * cbModelParam._m0[1u].z;
    }
    float _1828 = ((((1.0 - _812) * ((_799 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_812 * _799)) * _783;
    float _1829 = _1828 * ((cbModelParam._m0[1u].w * (_1812 - _1712)) + _1712);
    float _1830 = _1828 * ((cbModelParam._m0[1u].w * (_1814 - _1714)) + _1714);
    float _1831 = _1828 * ((cbModelParam._m0[1u].w * (_1816 - _1716)) + _1716);
    float _1834 = fma(_1831, cbSceneParam._m0[89u].z, fma(_1830, cbSceneParam._m0[89u].y, _1829 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1831, cbSceneParam._m0[90u].z, fma(_1830, cbSceneParam._m0[90u].y, _1829 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1831, cbSceneParam._m0[91u].z, fma(_1830, cbSceneParam._m0[91u].y, _1829 * cbSceneParam._m0[91u].x));
    vec4 _1848 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_720, _721));
    float _1850 = _1848.w;
    float _1862 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1850);
    float _1863 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1850);
    float _1864 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1850);
    uvec4 _1868 = floatBitsToUint(cbInstanceData._m0[_240 + 5u]);
    uint _1870 = _1868.x * 14u;
    uint _1871 = _1870 + 13u;
    float _1878 = _783 + (-1.0);
    float _1883 = (cbLight._m0[_1871].x * _1878) + 1.0;
    float _1884 = (cbLight._m0[_1871].y * _1878) + 1.0;
    float _1885 = (cbLight._m0[_1871].z * _1878) + 1.0;
    float _1886 = (cbLight._m0[_1871].w * _1878) + 1.0;
    uint _1887 = _1870 + 5u;
    float _1893 = isnan(1.0) ? _1884 : (isnan(_1884) ? 1.0 : min(_1884, 1.0));
    uint _1897 = _1870 + 4u;
    float _1906 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
    uint _1910 = _1870 | 1u;
    float _1921 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_620, _621, _622));
    float _1924 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_620, _621, _622));
    float _4102 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _4113 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1929 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * 0.3183098733425140380859375;
    float _1931 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * 0.3183098733425140380859375;
    float _1938 = ((cbLight._m0[_1887].x * _1893) * _1931) + (((cbLight._m0[_1897].x * _1862) * _1906) * _1929);
    float _1939 = ((_1893 * cbLight._m0[_1887].y) * _1931) + (((cbLight._m0[_1897].y * _1863) * _1906) * _1929);
    float _1940 = ((_1893 * cbLight._m0[_1887].z) * _1931) + (((cbLight._m0[_1897].z * _1864) * _1906) * _1929);
    uvec4 _1944 = floatBitsToUint(cbLight._m0[_1870 + 12u]);
    bool _1946 = _1944.x == 0u;
    float _1957;
    float _1959;
    float _1961;
    if (_1946)
    {
        _1957 = _1938;
        _1959 = _1939;
        _1961 = _1940;
    }
    else
    {
        uint _1965 = _1870 + 6u;
        float _1981 = (dot(vec3(cbLight._m0[_1870 + 2u].xyz), vec3(_620, _621, _622)) * 0.5) + 0.5;
        float _1982 = _1981 * _1981;
        float _4124 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1983 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1984 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _1957 = (((cbLight._m0[_1965].x * 0.3183098733425140380859375) * _1983) * _1984) + _1938;
        _1959 = (((cbLight._m0[_1965].y * 0.3183098733425140380859375) * _1983) * _1984) + _1939;
        _1961 = (((cbLight._m0[_1965].z * 0.3183098733425140380859375) * _1983) * _1984) + _1940;
    }
    bool _1964 = _1944.y == 0u;
    float _2002;
    float _2004;
    float _2006;
    if (_1964)
    {
        _2002 = _1957;
        _2004 = _1959;
        _2006 = _1961;
    }
    else
    {
        uint _2164 = _1870 + 7u;
        float _2180 = (dot(vec3(cbLight._m0[_1870 + 3u].xyz), vec3(_620, _621, _622)) * 0.5) + 0.5;
        float _2181 = _2180 * _2180;
        float _4140 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
        float _2182 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2183 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2002 = (((cbLight._m0[_2164].x * 0.3183098733425140380859375) * _2182) * _2183) + _1957;
        _2004 = (((cbLight._m0[_2164].y * 0.3183098733425140380859375) * _2182) * _2183) + _1959;
        _2006 = (((cbLight._m0[_2164].z * 0.3183098733425140380859375) * _2182) * _2183) + _1961;
    }
    uint _2009 = _1870 + 8u;
    float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1870].w)) * _623) * 0.949999988079071044921875);
    float _2023 = _2022 * _2022;
    float _2024 = cbLight._m0[_1870].x + _700;
    float _2025 = cbLight._m0[_1870].y + _701;
    float _2026 = cbLight._m0[_1870].z + _702;
    float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
    float _2031 = _2030 * _2024;
    float _2032 = _2030 * _2025;
    float _2033 = _2030 * _2026;
    float _2034 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_1870].xyz));
    float _4156 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _4167 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _2038 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2039 = dot(vec3(_620, _621, _622), vec3(_2031, _2032, _2033));
    float _4178 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2042 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2043 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_2031, _2032, _2033));
    float _4189 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2047 = _2023 * _2023;
    float _2051 = ((_2042 * _2042) * (_2047 + (-1.0))) + 1.0;
    float _2062 = (exp2(log2(1.0 - (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2063 = 1.0 - _2023;
    float _2074 = (0.5 / (((_2038 * ((_2037 * _2063) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2063) + _2023) * _2037))) * _2037;
    float _4200 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2076 = (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_2047 / ((_2051 * _2051) * 3.141590118408203125));
    uint _2090 = _1870 + 9u;
    float _2101 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1910].w)) * _623) * 0.949999988079071044921875);
    float _2102 = _2101 * _2101;
    float _2103 = cbLight._m0[_1910].x + _700;
    float _2104 = cbLight._m0[_1910].y + _701;
    float _2105 = cbLight._m0[_1910].z + _702;
    float _2109 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
    float _2110 = _2109 * _2103;
    float _2111 = _2109 * _2104;
    float _2112 = _2109 * _2105;
    float _2113 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_1910].xyz));
    float _4211 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _2117 = dot(vec3(_620, _621, _622), vec3(_2110, _2111, _2112));
    float _4222 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _2121 = dot(vec3(cbLight._m0[_1910].xyz), vec3(_2110, _2111, _2112));
    float _4233 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2125 = _2102 * _2102;
    float _2129 = ((_2120 * _2120) * (_2125 + (-1.0))) + 1.0;
    float _2138 = (exp2(log2(1.0 - (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2139 = 1.0 - _2102;
    float _2149 = (0.5 / (((_2038 * ((_2116 * _2139) + _2102)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2139) + _2102) * _2116))) * _2116;
    float _4244 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2125 / ((_2129 * _2129) * 3.141590118408203125));
    float _2161 = (((_2138 * cbLight._m0[_2090].x) * _2151) * _1893) + ((((cbLight._m0[_2009].x * _1862) * _2062) * _2076) * _1906);
    float _2162 = (((_2138 * cbLight._m0[_2090].y) * _2151) * _1893) + ((((cbLight._m0[_2009].y * _1863) * _2062) * _2076) * _1906);
    float _2163 = (((_2138 * cbLight._m0[_2090].z) * _2151) * _1893) + ((((cbLight._m0[_2009].z * _1864) * _2062) * _2076) * _1906);
    float _2225;
    float _2227;
    float _2229;
    if (_1946)
    {
        _2225 = _2161;
        _2227 = _2162;
        _2229 = _2163;
    }
    else
    {
        uint _2231 = _1870 + 2u;
        uint _2235 = _1870 + 10u;
        float _2249 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2231].w)) * _623) * 0.949999988079071044921875);
        float _2250 = _2249 * _2249;
        float _2251 = cbLight._m0[_2231].x + _700;
        float _2252 = cbLight._m0[_2231].y + _701;
        float _2253 = cbLight._m0[_2231].z + _702;
        float _2257 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
        float _2258 = _2257 * _2251;
        float _2259 = _2257 * _2252;
        float _2260 = _2257 * _2253;
        float _2261 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2231].xyz));
        float _4255 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2265 = dot(vec3(_620, _621, _622), vec3(_2258, _2259, _2260));
        float _4266 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2268 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2269 = dot(vec3(cbLight._m0[_2231].xyz), vec3(_2258, _2259, _2260));
        float _4277 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2273 = _2250 * _2250;
        float _2277 = ((_2268 * _2268) * (_2273 + (-1.0))) + 1.0;
        float _2286 = (exp2(log2(1.0 - (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2287 = 1.0 - _2250;
        float _2297 = (0.5 / (((_2038 * ((_2264 * _2287) + _2250)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2287) + _2250) * _2264))) * _2264;
        float _4288 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2299 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2273 / ((_2277 * _2277) * 3.141590118408203125));
        float _2300 = isnan(1.0) ? _1885 : (isnan(_1885) ? 1.0 : min(_1885, 1.0));
        _2225 = (((_2286 * cbLight._m0[_2235].x) * _2299) * _2300) + _2161;
        _2227 = (((_2286 * cbLight._m0[_2235].y) * _2299) * _2300) + _2162;
        _2229 = (((_2286 * cbLight._m0[_2235].z) * _2299) * _2300) + _2163;
    }
    float _2335;
    float _2337;
    float _2339;
    if (_1964)
    {
        _2335 = _2225;
        _2337 = _2227;
        _2339 = _2229;
    }
    else
    {
        uint _2346 = _1870 + 3u;
        uint _2350 = _1870 + 11u;
        float _2364 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2346].w)) * _623) * 0.949999988079071044921875);
        float _2365 = _2364 * _2364;
        float _2366 = cbLight._m0[_2346].x + _700;
        float _2367 = cbLight._m0[_2346].y + _701;
        float _2368 = cbLight._m0[_2346].z + _702;
        float _2372 = inversesqrt(dot(vec3(_2366, _2367, _2368), vec3(_2366, _2367, _2368)));
        float _2373 = _2372 * _2366;
        float _2374 = _2372 * _2367;
        float _2375 = _2372 * _2368;
        float _2376 = dot(vec3(_620, _621, _622), vec3(cbLight._m0[_2346].xyz));
        float _4304 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2379 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2380 = dot(vec3(_620, _621, _622), vec3(_2373, _2374, _2375));
        float _4315 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2383 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2384 = dot(vec3(cbLight._m0[_2346].xyz), vec3(_2373, _2374, _2375));
        float _4326 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2388 = _2365 * _2365;
        float _2392 = ((_2383 * _2383) * (_2388 + (-1.0))) + 1.0;
        float _2401 = (exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2402 = 1.0 - _2365;
        float _2412 = (0.5 / (((_2038 * ((_2379 * _2402) + _2365)) + 9.9999999392252902907785028219223e-09) + (((_2038 * _2402) + _2365) * _2379))) * _2379;
        float _4337 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2414 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2388 / ((_2392 * _2392) * 3.141590118408203125));
        float _2415 = isnan(1.0) ? _1886 : (isnan(_1886) ? 1.0 : min(_1886, 1.0));
        _2335 = (((_2401 * cbLight._m0[_2350].x) * _2414) * _2415) + _2225;
        _2337 = (((_2401 * cbLight._m0[_2350].y) * _2414) * _2415) + _2227;
        _2339 = (((_2401 * cbLight._m0[_2350].z) * _2414) * _2415) + _2229;
    }
    float _2550;
    float _2552;
    float _2554;
    float _2556;
    float _2558;
    float _2560;
    if (_1868.y == 0u)
    {
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2491 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2490;
        float _2492 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2490;
        float _2493 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2490;
        uvec4 _2505 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2506 = _2505.x;
        uint _2517 = uint((float(_2505.y) * floor(float(uint(cbSceneParam._m0[85u].y * _721) / _2506))) + floor(float(uint(cbSceneParam._m0[85u].x * _720) / _2506)));
        float _2527 = (log2(_2493 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2528 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        uint _2531 = uint(isnan(14.0) ? _2528 : (isnan(_2528) ? 14.0 : min(_2528, 14.0)));
        uvec4 _2536 = texelFetch(g_lightClusterGridBuffer, int(((_2531 << 2u) + (_2517 << 6u)) >> 2u));
        uint _2537 = _2536.x;
        uint _2538 = _2505.z;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        if (((((1u << ((_2538 >> 4u) & 15u)) + 4294967295u) & _2537) == 0u) || ((_2538 & 240u) == 0u))
        {
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
        }
        else
        {
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2649;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            float _2795 = 0.0;
            float _2796 = 0.0;
            uint _2797 = 0u;
            uint _2806;
            bool _2807;
            for (;;)
            {
                _2806 = texelFetch(g_lightClassification, int((((_2531 << 5u) + (_2517 << 9u)) + (_2797 << 2u)) >> 2u)).x;
                _2807 = _2806 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2807)
                {
                    frontier_phi_66_pred = _2791;
                    frontier_phi_66_pred_1 = _2796;
                    frontier_phi_66_pred_2 = _2795;
                    frontier_phi_66_pred_3 = _2794;
                    frontier_phi_66_pred_4 = _2793;
                    frontier_phi_66_pred_5 = _2792;
                }
                else
                {
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    uint _2942;
                    _2936 = _2791;
                    _2937 = _2792;
                    _2938 = _2793;
                    _2939 = _2794;
                    _2940 = _2795;
                    _2941 = _2796;
                    _2942 = _2806;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    for (;;)
                    {
                        uint _2946 = uint(findLSB(_2942)) + (_2797 << 5u);
                        uint _2943 = (_2942 + 4294967295u) & _2942;
                        uint _2948 = _2946 * 48u;
                        vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2948)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2948 + 3u)).x));
                        uint _2968 = (_2946 * 48u) + 4u;
                        vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2968)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2968 + 3u)).x));
                        uint _2987 = (_2946 * 48u) + 8u;
                        vec3 _2998 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x));
                        float _3002 = _2962.x - _2491;
                        float _3003 = _2962.y - _2492;
                        float _3004 = _2962.z - _2493;
                        float _3005 = dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004));
                        float _3008 = inversesqrt(_3005);
                        float _3009 = _3008 * _3002;
                        float _3010 = _3008 * _3003;
                        float _3011 = _3008 * _3004;
                        float _3012 = dot(vec3(_739, _742, _745), vec3(_3009, _3010, _3011));
                        float _3017 = 1.0 - (_3005 * _2962.w);
                        float _4363 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                        float _3018 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3019 = sqrt(_3005) * _2981.w;
                        float _3022 = 1.39999997615814208984375 / (_3019 + 1.39999997615814208984375);
                        float _3023 = _3022 * _3022;
                        float _3026 = ((1.0 - _3023) * _3012) + _3023;
                        float _3029 = _3019 * _3019;
                        float _3033 = ((isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0))) * _3018) / ((_3029 * 0.699999988079071044921875) + 1.0);
                        float _3037 = (-0.0) - _2491;
                        float _3038 = (-0.0) - _2492;
                        float _3039 = (-0.0) - _2493;
                        float _3043 = inversesqrt(dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039)));
                        float _3044 = _3043 * _3037;
                        float _3045 = _3043 * _3038;
                        float _3046 = _3043 * _3039;
                        float _3054 = exp2(log2(1.0 / ((_3029 * 3.5) + 5.0)) * 0.25);
                        float _3055 = 1.0 - _799;
                        float _3062 = sqrt(1.0 - ((1.0 - (_3055 * _3055)) * (1.0 - (_3054 * _3054))));
                        float _3063 = _3062 * _3062;
                        float _3064 = _3063 * _3063;
                        float _3065 = _3044 + _3009;
                        float _3066 = _3045 + _3010;
                        float _3067 = _3046 + _3011;
                        float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
                        float _3075 = dot(vec3(_739, _742, _745), vec3(_3044, _3045, _3046));
                        float _4379 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3078 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3079 = dot(vec3(_739, _742, _745), vec3(_3071 * _3065, _3071 * _3066, _3071 * _3067));
                        float _4390 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3082 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                        float _3086 = ((_3082 * _3082) * (_3064 + (-1.0))) + 1.0;
                        float _3087 = _3022 * _3063;
                        float _3088 = _3087 * _3087;
                        float _3091 = ((1.0 - _3088) * _3012) + _3088;
                        float _4401 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                        float _3092 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3093 = 1.0 - _3063;
                        float _3103 = (0.5 / (((_3092 * ((_3078 * _3093) + _3063)) + 9.9999999392252902907785028219223e-09) + (((_3092 * _3093) + _3063) * _3078))) * _3092;
                        float _4412 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                        float _3114 = (((_3064 * 3.1415927410125732421875) * (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) / ((_3086 * _3086) * ((_3029 * 2.1991131305694580078125) + 3.141590118408203125))) * _3018;
                        _2866 = (_3033 * _2981.x) + _2939;
                        _2867 = (_3033 * _2981.y) + _2940;
                        _2868 = (_3033 * _2981.z) + _2941;
                        _2863 = (_3114 * _2998.x) + _2936;
                        _2864 = (_3114 * _2998.y) + _2937;
                        _2865 = (_3114 * _2998.z) + _2938;
                        if (_2943 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2936 = _2863;
                            _2937 = _2864;
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2867;
                            _2941 = _2868;
                            _2942 = _2943;
                        }
                    }
                    frontier_phi_66_pred = _2863;
                    frontier_phi_66_pred_1 = _2868;
                    frontier_phi_66_pred_2 = _2867;
                    frontier_phi_66_pred_3 = _2866;
                    frontier_phi_66_pred_4 = _2865;
                    frontier_phi_66_pred_5 = _2864;
                }
                _2639 = frontier_phi_66_pred;
                _2649 = frontier_phi_66_pred_1;
                _2647 = frontier_phi_66_pred_2;
                _2645 = frontier_phi_66_pred_3;
                _2643 = frontier_phi_66_pred_4;
                _2641 = frontier_phi_66_pred_5;
                uint _2798 = _2797 + 1u;
                if (_2798 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2791 = _2639;
                    _2792 = _2641;
                    _2793 = _2643;
                    _2794 = _2645;
                    _2795 = _2647;
                    _2796 = _2649;
                    _2797 = _2798;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
        }
        uvec4 _2652 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2653 = _2652.z;
        uint _2655 = (_2653 >> 8u) & 15u;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        if (((4294967295u << _2655) & _2537) == 0u)
        {
            _2759 = _2638;
            _2761 = _2640;
            _2763 = _2642;
            _2765 = _2644;
            _2767 = _2646;
            _2769 = _2648;
        }
        else
        {
            float _2784 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
            float _2785 = _2784 * _2491;
            float _2786 = _2784 * _2492;
            float _2787 = _2784 * _2493;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2655 < ((_2653 >> 12u) & 15u))
            {
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2770;
                float _2919 = _2638;
                float _2920 = _2640;
                float _2921 = _2642;
                float _2922 = _2644;
                float _2923 = _2646;
                float _2924 = _2648;
                uint _2925 = _2655;
                uint _2934;
                bool _2935;
                for (;;)
                {
                    _2934 = texelFetch(g_lightClassification, int((((_2531 << 5u) + (_2517 << 9u)) + (_2925 << 2u)) >> 2u)).x;
                    _2935 = _2934 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2935)
                    {
                        frontier_phi_77_pred = _2924;
                        frontier_phi_77_pred_1 = _2923;
                        frontier_phi_77_pred_2 = _2922;
                        frontier_phi_77_pred_3 = _2921;
                        frontier_phi_77_pred_4 = _2920;
                        frontier_phi_77_pred_5 = _2919;
                    }
                    else
                    {
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3141 = _2919;
                        float _3142 = _2920;
                        float _3143 = _2921;
                        float _3144 = _2922;
                        float _3145 = _2923;
                        float _3146 = _2924;
                        uint _3147 = _2934;
                        uint _3148;
                        vec4 _3173;
                        float _3174;
                        vec4 _3189;
                        vec3 _3201;
                        vec4 _3216;
                        vec4 _3231;
                        float _3277;
                        bool _3278;
                        for (;;)
                        {
                            uint _3158 = ((_2925 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3147));
                            _3148 = (_3147 + 4294967295u) & _3147;
                            uint _3160 = _3158 * 40u;
                            _3173 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3160)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3160 + 3u)).x));
                            _3174 = _3173.w;
                            uint _3176 = (_3158 * 40u) + 4u;
                            _3189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 3u)).x));
                            uint _3191 = (_3158 * 40u) + 8u;
                            _3201 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3191)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3191 + 2u)).x));
                            uint _3203 = (_3158 * 40u) + 16u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3218 = (_3158 * 40u) + 20u;
                            _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3233 = (_3158 * 40u) + 24u;
                            vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            uint _3252 = (_3158 * 40u) + 28u;
                            vec4 _3265 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3252)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3252 + 3u)).x));
                            _3277 = fma(_2493, _3265.z, fma(_2492, _3265.y, _3265.x * _2491)) + _3265.w;
                            _3278 = !((fma(_2493, _3246.z, fma(_2492, _3246.y, _3246.x * _2491)) + _3246.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3278)
                            {
                                float _3305 = _3173.x - _2491;
                                float _3306 = _3173.y - _2492;
                                float _3307 = _3173.z - _2493;
                                float _3308 = dot(vec3(_3305, _3306, _3307), vec3(_3305, _3306, _3307));
                                float _3311 = inversesqrt(_3308);
                                float _3312 = _3311 * _3305;
                                float _3313 = _3311 * _3306;
                                float _3314 = _3311 * _3307;
                                float _3318 = 1.0 - (_3308 / (_3174 * _3174));
                                float _4423 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3319 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3323 = sqrt(_3308) * _3189.w;
                                float _3325 = 1.39999997615814208984375 / (_3323 + 1.39999997615814208984375);
                                float _3326 = _3325 * _3325;
                                float _3329 = ((1.0 - _3326) * dot(vec3(_3312, _3313, _3314), vec3(_739, _742, _745))) + _3326;
                                float _3332 = _3323 * _3323;
                                float _3336 = (fma(_2493, _3216.z, fma(_2492, _3216.y, _3216.x * _2491)) + _3216.w) / _3277;
                                float _3337 = (fma(_2493, _3231.z, fma(_2492, _3231.y, _3231.x * _2491)) + _3231.w) / _3277;
                                float _3341 = 1.0 - dot(vec2(_3336, _3337), vec2(_3336, _3337));
                                float _4439 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3342 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3343 = _3342 * (((isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0))) * _3319) / ((_3332 * 0.699999988079071044921875) + 1.0));
                                float _3355 = exp2(log2(1.0 / ((_3332 * 3.5) + 5.0)) * 0.25);
                                float _3356 = 1.0 - _799;
                                float _3363 = sqrt(1.0 - ((1.0 - (_3356 * _3356)) * (1.0 - (_3355 * _3355))));
                                float _3364 = _3363 * _3363;
                                float _3365 = _3364 * _3364;
                                float _3366 = _3312 - _2785;
                                float _3367 = _3313 - _2786;
                                float _3368 = _3314 - _2787;
                                float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                                float _3376 = dot(vec3(_739, _742, _745), vec3((-0.0) - _2785, (-0.0) - _2786, (-0.0) - _2787));
                                float _4450 = isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0));
                                float _3379 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3380 = dot(vec3(_739, _742, _745), vec3(_3372 * _3366, _3372 * _3367, _3372 * _3368));
                                float _4461 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3383 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3387 = ((_3383 * _3383) * (_3365 + (-1.0))) + 1.0;
                                float _3388 = _3325 * _3364;
                                float _3389 = _3388 * _3388;
                                float _3395 = ((1.0 - _3389) * dot(vec3(_739, _742, _745), vec3(_3312, _3313, _3314))) + _3389;
                                float _4472 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3397 = 1.0 - _3364;
                                float _3407 = (0.5 / (((_3396 * ((_3379 * _3397) + _3364)) + 9.9999999392252902907785028219223e-09) + (((_3396 * _3397) + _3364) * _3379))) * _3396;
                                float _4483 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3417 = (_3342 * _3319) * (((_3365 * 3.1415927410125732421875) * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) / ((_3387 * _3387) * ((_3332 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3343 * _3189.y;
                                frontier_phi_83_pred_1 = _3343 * _3189.x;
                                frontier_phi_83_pred_2 = _3417 * _3201.z;
                                frontier_phi_83_pred_3 = _3417 * _3201.y;
                                frontier_phi_83_pred_4 = _3417 * _3201.x;
                                frontier_phi_83_pred_5 = _3343 * _3189.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3425 = frontier_phi_83_pred;
                            _3424 = frontier_phi_83_pred_1;
                            _3423 = frontier_phi_83_pred_2;
                            _3422 = frontier_phi_83_pred_3;
                            _3421 = frontier_phi_83_pred_4;
                            _3426 = frontier_phi_83_pred_5;
                            _3131 = _3424 + _3144;
                            _3132 = _3425 + _3145;
                            _3133 = _3426 + _3146;
                            _3128 = _3421 + _3141;
                            _3129 = _3422 + _3142;
                            _3130 = _3423 + _3143;
                            if (_3148 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3141 = _3128;
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3148;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3133;
                        frontier_phi_77_pred_1 = _3132;
                        frontier_phi_77_pred_2 = _3131;
                        frontier_phi_77_pred_3 = _3130;
                        frontier_phi_77_pred_4 = _3129;
                        frontier_phi_77_pred_5 = _3128;
                    }
                    _2770 = frontier_phi_77_pred;
                    _2768 = frontier_phi_77_pred_1;
                    _2766 = frontier_phi_77_pred_2;
                    _2764 = frontier_phi_77_pred_3;
                    _2762 = frontier_phi_77_pred_4;
                    _2760 = frontier_phi_77_pred_5;
                    uint _2926 = _2925 + 1u;
                    if (_2926 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2919 = _2760;
                        _2920 = _2762;
                        _2921 = _2764;
                        _2922 = _2766;
                        _2923 = _2768;
                        _2924 = _2770;
                        _2925 = _2926;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2764;
                frontier_phi_58_59_ladder_1 = _2770;
                frontier_phi_58_59_ladder_2 = _2768;
                frontier_phi_58_59_ladder_3 = _2766;
                frontier_phi_58_59_ladder_4 = _2762;
                frontier_phi_58_59_ladder_5 = _2760;
            }
            else
            {
                frontier_phi_58_59_ladder = _2642;
                frontier_phi_58_59_ladder_1 = _2648;
                frontier_phi_58_59_ladder_2 = _2646;
                frontier_phi_58_59_ladder_3 = _2644;
                frontier_phi_58_59_ladder_4 = _2640;
                frontier_phi_58_59_ladder_5 = _2638;
            }
            _2759 = frontier_phi_58_59_ladder_5;
            _2761 = frontier_phi_58_59_ladder_4;
            _2763 = frontier_phi_58_59_ladder;
            _2765 = frontier_phi_58_59_ladder_3;
            _2767 = frontier_phi_58_59_ladder_2;
            _2769 = frontier_phi_58_59_ladder_1;
        }
        float _2774 = isnan(1.0) ? _783 : (isnan(_783) ? 1.0 : min(_783, 1.0));
        _2550 = (_2774 * _2765) + _2002;
        _2552 = (_2774 * _2767) + _2004;
        _2554 = (_2774 * _2769) + _2006;
        _2556 = ((_2759 * 0.039999999105930328369140625) * _2774) + _2335;
        _2558 = ((_2761 * 0.039999999105930328369140625) * _2774) + _2337;
        _2560 = ((_2763 * 0.039999999105930328369140625) * _2774) + _2339;
    }
    else
    {
        _2550 = _2002;
        _2552 = _2004;
        _2554 = _2006;
        _2556 = _2335;
        _2558 = _2337;
        _2560 = _2339;
    }
    float _4499 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4510 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4521 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2577 = ((isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2550 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _783))) + ((_2556 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1619)) * cbPerFrame._m0[3u].x);
    float _2578 = ((isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2552 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _783))) + ((_2558 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1619)) * cbPerFrame._m0[3u].x);
    float _2579 = ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2554 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _783))) + ((_2560 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1619)) * cbPerFrame._m0[3u].x);
    uint _2580 = _240 + 6u;
    float _2588 = _720 / cbSceneParam._m0[86u].x;
    float _2589 = _721 / cbSceneParam._m0[86u].y;
    vec4 _2603 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2588, _2589, (log2((isnan(cbSceneParam._m0[77u].w) ? _641 : (isnan(_641) ? cbSceneParam._m0[77u].w : min(_641, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2605 = _2603.x;
    float _2606 = _2603.y;
    float _2607 = _2603.z;
    float _2608 = _2603.w;
    float _2701;
    float _2703;
    float _2705;
    float _2707;
    if (_641 > cbSceneParam._m0[78u].w)
    {
        float _2663 = isnan(_641) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _641 : min(cbSceneParam._m0[80u].w, _641));
        float _2664 = _2663 / _641;
        float _2675 = _2664 * _693;
        float _2676 = _694 * _2664;
        float _2677 = (-0.0) - _2676;
        float _2679 = _2664 * _695;
        float _2681 = (cbSceneParam._m0[77u].w * _2677) / _2663;
        float _2682 = _2681 + cbSceneParam._m0[79u].w;
        float _2683 = cbSceneParam._m0[79u].w - _2676;
        float _2689 = sqrt(((_2675 * _2675) + (_2676 * _2676)) + (_2679 * _2679));
        float _2692 = (1.0 - (cbSceneParam._m0[77u].w / _2663)) * _2689;
        float _2697 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2699 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2876;
        if (abs((_2677 - _2681) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2876 = ((((_2682 > 0.0) ? exp2(_2697 * _2682) : (2.0 - exp2(_2699 * _2682))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2692;
        }
        else
        {
            float _2820 = 1.0 / cbSceneParam._m0[80u].x;
            float _2821 = isnan(_2683) ? _2682 : (isnan(_2682) ? _2683 : max(_2682, _2683));
            float _2822 = isnan(_2683) ? _2682 : (isnan(_2682) ? _2683 : min(_2682, _2683));
            float _2831 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : min(_2821, 0.0));
            float _2832 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : min(_2822, 0.0));
            _2876 = ((abs(_2689 / _2677) * cbSceneParam._m0[80u].y) * ((((_2831 - _2832) * 2.0) - ((exp2(_2697 * (isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0)))) - exp2(_2697 * (isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0))))) * _2820)) - ((exp2(_2699 * _2831) - exp2(_2699 * _2832)) * _2820))) + (_2692 * cbSceneParam._m0[80u].z);
        }
        vec4 _2878 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2588, _2589, 1.0), 0.0);
        float _2887 = exp2((_2876 * (-1.44269502162933349609375)) * (1.0 - _2878.w));
        float _2888 = log2(_2887);
        float _2904 = log2(_2608);
        _2701 = (exp2(_2904 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].x)) * _2878.x) / cbSceneParam._m0[78u].x)) + _2605;
        _2703 = (exp2(_2904 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].y)) * _2878.y) / cbSceneParam._m0[78u].y)) + _2606;
        _2705 = (exp2(_2904 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].z)) * _2878.z) / cbSceneParam._m0[78u].z)) + _2607;
        _2707 = _2887 * _2608;
    }
    else
    {
        _2701 = _2605;
        _2703 = _2606;
        _2705 = _2607;
        _2707 = _2608;
    }
    bool _2914;
    vec4 _2717;
    vec4 _2739;
    float _2741;
    float _2745;
    float _2746;
    float _2747;
    float _2748;
    bool _2758;
    for (;;)
    {
        _2717 = cbMatDynParam._m0[0u];
        float _2719 = roundEven(_2717.y);
        bool _2720 = _2719 == 3.0;
        float _2721 = log2(_2707);
        float _2728 = exp2(_2721 * cbSceneParam._m0[78u].x) * _2577;
        float _2729 = exp2(_2721 * cbSceneParam._m0[78u].y) * _2578;
        float _2730 = exp2(_2721 * cbSceneParam._m0[78u].z) * _2579;
        float _2737 = _709 + (-0.5);
        _2739 = cbMtdParam._m0[1u];
        _2741 = _2739.y * _2737;
        float _2744 = (_2719 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2745 = _2744 * (_2720 ? _2728 : (_2728 + (cbSceneParam._m0[72u].w * _2701)));
        _2746 = _2744 * (_2720 ? _2729 : (_2729 + (cbSceneParam._m0[72u].w * _2703)));
        _2747 = _2744 * (_2720 ? _2730 : (_2730 + (cbSceneParam._m0[72u].w * _2705)));
        _2748 = _2737 * 0.999000012874603271484375;
        _2758 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2758)
        {
            if ((cbInstanceData._m0[_240 + 7u].x + _2748) < 0.5)
            {
                _2914 = true;
                break;
            }
        }
        uint _2855 = _758 + uint(_2717.w);
        if ((cbInstanceData._m0[_2855].w < 1.0) && ((cbInstanceData._m0[_2855].w + _2748) < 0.5))
        {
            _2914 = true;
            break;
        }
        if ((_2741 + 1.0) < _2739.x)
        {
            _2914 = true;
            break;
        }
        _2914 = false;
        break;
    }
    float _3119;
    if (_2914)
    {
        discard_state = true;
        _3119 = 0.0;
    }
    else
    {
        _3119 = cbInstanceData._m0[_2580].w;
    }
    SV_Target.x = _2745;
    SV_Target.y = _2746;
    SV_Target.z = _2747;
    SV_Target.w = _3119;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2580].w;
    discard_exit();
}


