#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1287;
float _3669;
float _3670;
float _3671;
float _3672;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _230 = _229 * _221;
    float _231 = _229 * _222;
    float _232 = _229 * _223;
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = _236 * NORMAL.x;
    float _238 = _236 * NORMAL.y;
    float _239 = _236 * NORMAL.z;
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = _243 * TANGENT.x;
    float _245 = _243 * TANGENT.y;
    float _246 = _243 * TANGENT.z;
    uint _249 = uint(roundEven(NORMAL.w)) * 13u;
    uint _254 = _249 + 1u;
    uint _258 = _249 + 2u;
    float _267 = sqrt(((cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x) + (cbInstanceData._m0[_249].x * cbInstanceData._m0[_249].x)) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x));
    float _268 = _267 * TEXCOORD.z;
    float _269 = _267 * TEXCOORD.w;
    vec4 _289 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _295 = _289.x * cbMtdParam._m0[11u].x;
    float _296 = _289.y * cbMtdParam._m0[11u].y;
    float _297 = _289.z * cbMtdParam._m0[11u].z;
    vec4 _316 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _268) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _356 = _354.x;
    float _366 = dot(vec4(_356, _354.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _383 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_356 - _366) * cbMtdParam._m0[24u].x) + _366) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3681 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _391 = (_384 * ((_316.x * cbMtdParam._m0[12u].x) - _295)) + _295;
    float _392 = (_384 * ((_316.y * cbMtdParam._m0[12u].y) - _296)) + _296;
    float _393 = (_384 * ((_316.z * cbMtdParam._m0[12u].z) - _297)) + _297;
    vec4 _412 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _268) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _269) + cbTextureTilingScale._m0[14u].w));
    vec4 _432 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _268) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _269) + cbTextureTilingScale._m0[4u].w));
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _451 = _449.x;
    float _452 = _449.y;
    float _453 = _449.z;
    float _462 = ((_432.z - _453) * _384) + _453;
    float _465 = ((((_432.x - _451) * _384) + _451) * 2.0) + (-1.0);
    float _467 = ((((_432.y - _452) * _384) + _452) * 2.0) + (-1.0);
    float _468 = dot(vec2(_465, _467), vec2(_465, _467));
    float _3692 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _473 = sqrt(1.0 - (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))));
    float _476 = fma(_473, _237, fma(_467, _244, _465 * _230));
    float _479 = fma(_473, _238, fma(_467, _245, _465 * _231));
    float _482 = fma(_473, _239, fma(_467, _246, _465 * _232));
    float _486 = inversesqrt(dot(vec3(_476, _479, _482), vec3(_476, _479, _482)));
    vec4 _502 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _530 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _268) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _532 = _530.x;
    float _533 = 1.0 - _532;
    float _539 = (cbMtdParam._m0[19u].x + dot(vec4(_486 * _476, _486 * _479, _486 * _482, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_532 - _533) * cbMtdParam._m0[24u].z) + _533) * cbMtdParam._m0[21u].z);
    float _3703 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _542 = (-0.0) - cbMtdParam._m0[24u].y;
    float _544 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _544 : (isnan(_544) ? 1.0 : min(_544, 1.0));
    float _552 = _540 - ((_540 * TEXCOORD_8.x) * _545);
    float _553 = _540 - ((_540 * TEXCOORD_8.y) * _545);
    float _554 = _540 - ((_540 * TEXCOORD_8.z) * _545);
    float _561 = (_552 * ((_412.x * cbMtdParam._m0[18u].x) - _391)) + _391;
    float _562 = (_553 * ((_412.y * cbMtdParam._m0[18u].y) - _392)) + _392;
    float _563 = (_554 * ((_412.z * cbMtdParam._m0[18u].z) - _393)) + _393;
    vec4 _575 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _268) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _269) + cbTextureTilingScale._m0[19u].w));
    float _577 = _575.x;
    float _578 = 1.0 - _577;
    float _606 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_577 - _578) * cbMtdParam._m0[24u].w) + _578) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3724 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _615 = ((((cbMtdParam._m0[10u].x - _561) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _607) + _561;
    float _616 = ((((cbMtdParam._m0[10u].y - _562) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _607) + _562;
    float _617 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _563)) * _607) + _563;
    vec4 _631 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _268) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _269) + cbTextureTilingScale._m0[15u].w));
    float _638 = (_631.x * 2.0) + (-1.0);
    float _639 = (_631.y * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3735 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _648 = ((_631.z - _462) * _552) + _462;
    float _651 = ((cbMtdParam._m0[23u].y - _648) * _607) + _648;
    vec4 _670 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _268) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _269) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _676 = (_670.x * 2.0) + (-1.0);
    float _677 = (_670.y * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _3746 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _693 = ((sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) - _473) * _554) + _473;
    float _696 = (((_638 - _465) * _552) + _465) + (cbMtdParam._m0[21u].x * _465);
    float _697 = (((_639 - _467) * _553) + _467) + (cbMtdParam._m0[21u].x * _467);
    float _708 = (((_676 - _696) + (_696 * cbMtdParam._m0[22u].z)) * _607) + _696;
    float _709 = (((_677 - _697) + (_697 * cbMtdParam._m0[22u].z)) * _607) + _697;
    float _710 = (_607 * (sqrt(1.0 - (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0)))) - _693)) + _693;
    float _712 = cbMtdParam._m0[22u].x + _502.w;
    float _715 = fma(_710, _237, fma(_709, _244, _708 * _230));
    float _718 = fma(_710, _238, fma(_709, _245, _708 * _231));
    float _721 = fma(_710, _239, fma(_709, _246, _708 * _232));
    float _725 = inversesqrt(dot(vec3(_715, _718, _721), vec3(_715, _718, _721)));
    float _726 = _725 * _715;
    float _727 = _725 * _718;
    float _728 = _725 * _721;
    float _3757 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _729 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _3768 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _3779 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3790 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3801 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _747 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _788 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _798 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _788);
    float _799 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _788);
    float _800 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _788);
    float _804 = inversesqrt(dot(vec3(_798, _799, _800), vec3(_798, _799, _800)));
    float _805 = _798 * _804;
    float _806 = _799 * _804;
    float _807 = _800 * _804;
    vec4 _812 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _814 = _812.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _968 = sqrt(((_798 * _798) + (_799 * _799)) + (_800 * _800));
        float _974 = (cbMatDynParam._m0[5u].x * _968) + cbMatDynParam._m0[5u].y;
        float _3812 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _979 = (cbMatDynParam._m0[5u].z * _968) + cbMatDynParam._m0[5u].w;
        float _3823 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) - _975)) + _975) < ((_814 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _825 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _826 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _844 = fma(_728, cbSceneParam._m0[5u].z, fma(_727, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _726));
    float _847 = fma(_728, cbSceneParam._m0[6u].z, fma(_727, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _726));
    float _850 = fma(_728, cbSceneParam._m0[7u].z, fma(_727, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _726));
    uint _863 = _249 + 9u;
    uint _864 = _863 + uint(cbMatDynParam._m0[0u].w);
    float _870 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0)))) * cbInstanceData._m0[_864].x;
    float _871 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_864].y;
    float _872 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_864].z;
    float _3834 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _3856 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    vec4 _884 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _825, cbSceneParam._m0[86u].y * _826));
    float _888 = ((isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * TEXCOORD_5.w) * _884.x;
    float _889 = dot(vec3(_726, _727, _728), vec3(_805, _806, _807));
    float _892 = _889 * 2.0;
    float _896 = (_892 * _726) - _805;
    float _897 = (_892 * _727) - _806;
    float _898 = (_892 * _728) - _807;
    float _902 = abs(dot(vec3(_805, _806, _807), vec3(_726, _727, _728)));
    float _3867 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _904 = sqrt(_729);
    float _917 = exp2((_904 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_904 * 3.0));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1286;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1011 = fma(_957, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949));
        float _1015 = fma(_957, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949));
        float _1019 = fma(_957, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949));
        float _1044 = _949 + _726;
        float _1045 = _953 + _727;
        float _1046 = _957 + _728;
        float _1056 = fma(_1046, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1044)) - _1011;
        float _1057 = fma(_1046, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1044)) - _1015;
        float _1058 = fma(_1046, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1044)) - _1019;
        float _1062 = inversesqrt(dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058)));
        float _1075 = ((_1062 * _1056) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1011 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1062 * _1057) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1015 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1062 * _1058) / cbModelParam._m0[34u].z) + ((((((_1019 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        float _1114 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1080.x + (-0.5));
        float _1116 = _1114 * (_1080.y + (-0.5));
        float _1117 = _1114 * (_1080.z + (-0.5));
        float _1124 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1087.x + (-0.5));
        float _1126 = _1124 * (_1087.y + (-0.5));
        float _1127 = _1124 * (_1087.z + (-0.5));
        float _1134 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1094.x + (-0.5));
        float _1136 = _1134 * (_1094.y + (-0.5));
        float _1137 = _1134 * (_1094.z + (-0.5));
        float _1144 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1101.x + (-0.5));
        float _1146 = _1144 * (_1101.y + (-0.5));
        float _1147 = _1144 * (_1101.z + (-0.5));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = _1115 * 0.5;
        float _1152 = _1125 * 0.5;
        float _1153 = _1135 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1168 = (dot(vec3(_726, _727, _728), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1178 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3915 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1180 + 1.0))) + _1185) * _1148;
        float _1195 = _1116 * 0.5;
        float _1196 = _1126 * 0.5;
        float _1197 = _1136 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_726, _727, _728), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3948 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1222 + 1.0))) + _1227) * _1149;
        float _1237 = _1117 * 0.5;
        float _1238 = _1127 * 0.5;
        float _1239 = _1137 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_726, _727, _728), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3981 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1264 + 1.0))) + _1269) * _1150;
        _1286 = _1117;
        _1288 = _1116;
        _1289 = _1115;
        _1290 = _1127;
        _1291 = _1126;
        _1292 = _1125;
        _1293 = _1137;
        _1294 = _1136;
        _1295 = _1135;
        _1296 = _1150;
        _1297 = _1149;
        _1298 = _1148;
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
    }
    else
    {
        _1286 = _1287;
        _1288 = _1287;
        _1289 = _1287;
        _1290 = _1287;
        _1291 = _1287;
        _1292 = _1287;
        _1293 = _1287;
        _1294 = _1287;
        _1295 = _1287;
        _1296 = _1287;
        _1297 = _1287;
        _1298 = _1287;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1329 = fma(_957, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949));
        float _1333 = fma(_957, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949));
        float _1337 = fma(_957, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949));
        float _1360 = _949 + _726;
        float _1361 = _953 + _727;
        float _1362 = _957 + _728;
        float _1372 = fma(_1362, cbModelParam._m0[30u].z, fma(_1361, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1360)) - _1329;
        float _1373 = fma(_1362, cbModelParam._m0[31u].z, fma(_1361, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1360)) - _1333;
        float _1374 = fma(_1362, cbModelParam._m0[32u].z, fma(_1361, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1360)) - _1337;
        float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
        float _1391 = ((_1378 * _1372) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1329 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1378 * _1373) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1333 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1378 * _1374) / cbModelParam._m0[35u].z) + ((((((_1337 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        float _1428 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1395.x + (-0.5));
        float _1430 = _1428 * (_1395.y + (-0.5));
        float _1431 = _1428 * (_1395.z + (-0.5));
        float _1438 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1402.x + (-0.5));
        float _1440 = _1438 * (_1402.y + (-0.5));
        float _1441 = _1438 * (_1402.z + (-0.5));
        float _1448 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1409.x + (-0.5));
        float _1450 = _1448 * (_1409.y + (-0.5));
        float _1451 = _1448 * (_1409.z + (-0.5));
        float _1458 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1416.x + (-0.5));
        float _1460 = _1458 * (_1416.y + (-0.5));
        float _1461 = _1458 * (_1416.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_726, _727, _728), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _4022 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4033 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4044 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_1492 + 1.0))) + _1497) * _1462;
        float _1507 = _1430 * 0.5;
        float _1508 = _1440 * 0.5;
        float _1509 = _1450 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_726, _727, _728), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4055 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4066 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4077 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * (_1534 + 1.0))) + _1539) * _1463;
        float _1549 = _1431 * 0.5;
        float _1550 = _1441 * 0.5;
        float _1551 = _1451 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_726, _727, _728), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4110 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1576 + 1.0))) + _1581) * _1464;
        _1598 = _1431;
        _1599 = _1430;
        _1600 = _1429;
        _1601 = _1441;
        _1602 = _1440;
        _1603 = _1439;
        _1604 = _1451;
        _1605 = _1450;
        _1606 = _1449;
        _1607 = _1464;
        _1608 = _1463;
        _1609 = _1462;
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1287;
        _1599 = _1287;
        _1600 = _1287;
        _1601 = _1287;
        _1602 = _1287;
        _1603 = _1287;
        _1604 = _1287;
        _1605 = _1287;
        _1606 = _1287;
        _1607 = _1287;
        _1608 = _1287;
        _1609 = _1287;
        _1610 = 0.0;
        _1611 = 0.0;
        _1612 = 0.0;
    }
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1299)) + _1299;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1300)) + _1300;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1301)) + _1301;
    float _1645 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1622));
    float _1666 = _896 * 0.5;
    float _1667 = _897 * 0.5;
    float _1668 = _898 * 0.5;
    float _1669 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1672 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1675 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1709;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1682 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1286, _1290, _1293, _1296));
        float _1686 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1690 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1289, _1292, _1295, _1298));
        float _1697 = dot(vec4(cbModelParam._m0[39u]), vec4(_1666, _1667, _1668, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1720;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1711 = dot(vec4(cbModelParam._m0[40u]), vec4(_1666, _1667, _1668, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1724 = (_1720 * cbModelParam._m0[1u].x) + (_1709 * (1.0 - cbModelParam._m0[1u].x));
    float _1734 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _729);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1734 : min(cbModelParam._m0[25u].z, _1734));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1782 = fma(_957, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949)) + cbModelParam._m0[13u].w;
        float _1786 = fma(_957, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949)) + cbModelParam._m0[14u].w;
        float _1790 = fma(_957, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949)) + cbModelParam._m0[15u].w;
        float _1793 = fma(_898, cbModelParam._m0[13u].z, fma(_897, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896));
        float _1796 = fma(_898, cbModelParam._m0[14u].z, fma(_897, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896));
        float _1799 = fma(_898, cbModelParam._m0[15u].z, fma(_897, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896));
        float _1827;
        if (_1793 > 0.0)
        {
            _1827 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1827 = frontier_phi_17_15_ladder;
        }
        float _2048;
        if (_1796 > 0.0)
        {
            _2048 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2048 = frontier_phi_26_22_ladder;
        }
        float _2294;
        if (_1799 > 0.0)
        {
            _2294 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2294 = frontier_phi_38_33_ladder;
        }
        float _2296 = isnan(_2048) ? _1827 : (isnan(_1827) ? _2048 : min(_1827, _2048));
        float _2297 = isnan(_2294) ? _2296 : (isnan(_2296) ? _2294 : min(_2296, _2294));
        float _2301 = (_2297 * _1793) + _1782;
        float _2302 = (_2297 * _1796) + _1786;
        float _2303 = (_2297 * _1799) + _1790;
        float _2304 = _2297 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2304;
        float _2308 = _2304 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 > _2308) || ((_2302 < _2306) || ((_2301 < _2306) || (_2301 > _2308))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2303, cbModelParam._m0[9u].z, fma(_2302, cbModelParam._m0[9u].y, _2301 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2303, cbModelParam._m0[10u].z, fma(_2302, cbModelParam._m0[10u].y, _2301 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2303, cbModelParam._m0[11u].z, fma(_2302, cbModelParam._m0[11u].y, _2301 * cbModelParam._m0[11u].x))), _1735);
            frontier_phi_16_38_ladder = _2427.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2427.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2427.x * cbModelParam._m0[1u].y;
        }
        _1815 = frontier_phi_16_38_ladder_2;
        _1817 = frontier_phi_16_38_ladder_1;
        _1819 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_896, _897, _898), _1735);
        _1815 = _1803.x * cbModelParam._m0[1u].y;
        _1817 = _1803.y * cbModelParam._m0[1u].y;
        _1819 = _1803.z * cbModelParam._m0[1u].y;
    }
    float _1823 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _729);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1823 : min(cbModelParam._m0[25u].w, _1823));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_957, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_957, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_957, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_898, cbModelParam._m0[21u].z, fma(_897, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896));
        float _1891 = fma(_898, cbModelParam._m0[22u].z, fma(_897, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896));
        float _1894 = fma(_898, cbModelParam._m0[23u].z, fma(_897, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896));
        float _2053;
        if (_1888 > 0.0)
        {
            _2053 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2053 = frontier_phi_28_24_ladder;
        }
        float _2321;
        if (_1891 > 0.0)
        {
            _2321 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2321 = frontier_phi_40_35_ladder;
        }
        float _2526;
        if (_1894 > 0.0)
        {
            _2526 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2526 = frontier_phi_49_46_ladder;
        }
        float _2528 = isnan(_2321) ? _2053 : (isnan(_2053) ? _2321 : min(_2053, _2321));
        float _2529 = isnan(_2526) ? _2528 : (isnan(_2528) ? _2526 : min(_2528, _2526));
        float _2533 = (_2529 * _1888) + _1877;
        float _2534 = (_2529 * _1891) + _1881;
        float _2535 = (_2529 * _1894) + _1885;
        float _2536 = _2529 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2536;
        float _2539 = _2536 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2535 > _2539) || ((_2535 < _2537) || ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 < _2537) || (_2533 > _2539))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2535, cbModelParam._m0[17u].z, fma(_2534, cbModelParam._m0[17u].y, _2533 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2535, cbModelParam._m0[18u].z, fma(_2534, cbModelParam._m0[18u].y, _2533 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2535, cbModelParam._m0[19u].z, fma(_2534, cbModelParam._m0[19u].y, _2533 * cbModelParam._m0[19u].x))), _1824);
            frontier_phi_25_49_ladder = _2734.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2734.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2734.x * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_25_49_ladder_2;
        _1915 = frontier_phi_25_49_ladder_1;
        _1917 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_896, _897, _898), _1824);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1929 = ((((1.0 - _917) * ((_904 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_917 * _904)) * _888;
    float _1930 = _1929 * ((cbModelParam._m0[1u].w * (_1913 - _1815)) + _1815);
    float _1931 = _1929 * ((cbModelParam._m0[1u].w * (_1915 - _1817)) + _1817);
    float _1932 = _1929 * ((cbModelParam._m0[1u].w * (_1917 - _1819)) + _1819);
    float _1935 = fma(_1932, cbSceneParam._m0[89u].z, fma(_1931, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1932, cbSceneParam._m0[90u].z, fma(_1931, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1932, cbSceneParam._m0[91u].z, fma(_1931, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    vec4 _1949 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_825, _826));
    float _1951 = _1949.w;
    float _1963 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1951);
    float _1964 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1951);
    float _1965 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1951);
    uvec4 _1969 = floatBitsToUint(cbInstanceData._m0[_249 + 5u]);
    uint _1971 = _1969.x * 14u;
    uint _1972 = _1971 + 13u;
    float _1979 = _888 + (-1.0);
    float _1984 = (cbLight._m0[_1972].x * _1979) + 1.0;
    float _1985 = (cbLight._m0[_1972].y * _1979) + 1.0;
    float _1986 = (cbLight._m0[_1972].z * _1979) + 1.0;
    float _1987 = (cbLight._m0[_1972].w * _1979) + 1.0;
    uint _1988 = _1971 + 5u;
    float _1994 = isnan(1.0) ? _1985 : (isnan(_1985) ? 1.0 : min(_1985, 1.0));
    uint _1998 = _1971 + 4u;
    float _2007 = isnan(1.0) ? _1984 : (isnan(_1984) ? 1.0 : min(_1984, 1.0));
    uint _2011 = _1971 | 1u;
    float _2022 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_726, _727, _728));
    float _2025 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_726, _727, _728));
    float _4246 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _4257 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2030 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * 0.3183098733425140380859375;
    float _2032 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * 0.3183098733425140380859375;
    float _2039 = ((cbLight._m0[_1988].x * _1994) * _2032) + (((cbLight._m0[_1998].x * _1963) * _2007) * _2030);
    float _2040 = ((_1994 * cbLight._m0[_1988].y) * _2032) + (((cbLight._m0[_1998].y * _1964) * _2007) * _2030);
    float _2041 = ((_1994 * cbLight._m0[_1988].z) * _2032) + (((cbLight._m0[_1998].z * _1965) * _2007) * _2030);
    uvec4 _2045 = floatBitsToUint(cbLight._m0[_1971 + 12u]);
    bool _2047 = _2045.x == 0u;
    float _2058;
    float _2060;
    float _2062;
    if (_2047)
    {
        _2058 = _2039;
        _2060 = _2040;
        _2062 = _2041;
    }
    else
    {
        uint _2066 = _1971 + 6u;
        float _2082 = (dot(vec3(cbLight._m0[_1971 + 2u].xyz), vec3(_726, _727, _728)) * 0.5) + 0.5;
        float _2083 = _2082 * _2082;
        float _4268 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2084 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2085 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2058 = (((cbLight._m0[_2066].x * 0.3183098733425140380859375) * _2084) * _2085) + _2039;
        _2060 = (((cbLight._m0[_2066].y * 0.3183098733425140380859375) * _2084) * _2085) + _2040;
        _2062 = (((cbLight._m0[_2066].z * 0.3183098733425140380859375) * _2084) * _2085) + _2041;
    }
    bool _2065 = _2045.y == 0u;
    float _2103;
    float _2105;
    float _2107;
    if (_2065)
    {
        _2103 = _2058;
        _2105 = _2060;
        _2107 = _2062;
    }
    else
    {
        uint _2265 = _1971 + 7u;
        float _2281 = (dot(vec3(cbLight._m0[_1971 + 3u].xyz), vec3(_726, _727, _728)) * 0.5) + 0.5;
        float _2282 = _2281 * _2281;
        float _4284 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2283 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2284 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2103 = (((cbLight._m0[_2265].x * 0.3183098733425140380859375) * _2283) * _2284) + _2058;
        _2105 = (((cbLight._m0[_2265].y * 0.3183098733425140380859375) * _2283) * _2284) + _2060;
        _2107 = (((cbLight._m0[_2265].z * 0.3183098733425140380859375) * _2283) * _2284) + _2062;
    }
    uint _2110 = _1971 + 8u;
    float _2123 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1971].w)) * _729) * 0.949999988079071044921875);
    float _2124 = _2123 * _2123;
    float _2125 = cbLight._m0[_1971].x + _805;
    float _2126 = cbLight._m0[_1971].y + _806;
    float _2127 = cbLight._m0[_1971].z + _807;
    float _2131 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
    float _2132 = _2131 * _2125;
    float _2133 = _2131 * _2126;
    float _2134 = _2131 * _2127;
    float _2135 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_1971].xyz));
    float _4300 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
    float _4311 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2139 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2140 = dot(vec3(_726, _727, _728), vec3(_2132, _2133, _2134));
    float _4322 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_1971].xyz), vec3(_2132, _2133, _2134));
    float _4333 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2148 = _2124 * _2124;
    float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
    float _2163 = (exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2164 = 1.0 - _2124;
    float _2175 = (0.5 / (((_2139 * ((_2138 * _2164) + _2124)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2164) + _2124) * _2138))) * _2138;
    float _4344 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2177 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
    uint _2191 = _1971 + 9u;
    float _2202 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _729) * 0.949999988079071044921875);
    float _2203 = _2202 * _2202;
    float _2204 = cbLight._m0[_2011].x + _805;
    float _2205 = cbLight._m0[_2011].y + _806;
    float _2206 = cbLight._m0[_2011].z + _807;
    float _2210 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
    float _2211 = _2210 * _2204;
    float _2212 = _2210 * _2205;
    float _2213 = _2210 * _2206;
    float _2214 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2011].xyz));
    float _4355 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2217 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2218 = dot(vec3(_726, _727, _728), vec3(_2211, _2212, _2213));
    float _4366 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2222 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2211, _2212, _2213));
    float _4377 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2226 = _2203 * _2203;
    float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
    float _2239 = (exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2240 = 1.0 - _2203;
    float _2250 = (0.5 / (((_2139 * ((_2217 * _2240) + _2203)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2240) + _2203) * _2217))) * _2217;
    float _4388 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2252 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
    float _2262 = (((_2239 * cbLight._m0[_2191].x) * _2252) * _1994) + ((((cbLight._m0[_2110].x * _1963) * _2163) * _2177) * _2007);
    float _2263 = (((_2239 * cbLight._m0[_2191].y) * _2252) * _1994) + ((((cbLight._m0[_2110].y * _1964) * _2163) * _2177) * _2007);
    float _2264 = (((_2239 * cbLight._m0[_2191].z) * _2252) * _1994) + ((((cbLight._m0[_2110].z * _1965) * _2163) * _2177) * _2007);
    float _2326;
    float _2328;
    float _2330;
    if (_2047)
    {
        _2326 = _2262;
        _2328 = _2263;
        _2330 = _2264;
    }
    else
    {
        uint _2332 = _1971 + 2u;
        uint _2336 = _1971 + 10u;
        float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _729) * 0.949999988079071044921875);
        float _2351 = _2350 * _2350;
        float _2352 = cbLight._m0[_2332].x + _805;
        float _2353 = cbLight._m0[_2332].y + _806;
        float _2354 = cbLight._m0[_2332].z + _807;
        float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
        float _2359 = _2358 * _2352;
        float _2360 = _2358 * _2353;
        float _2361 = _2358 * _2354;
        float _2362 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2332].xyz));
        float _4399 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2365 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2366 = dot(vec3(_726, _727, _728), vec3(_2359, _2360, _2361));
        float _4410 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2369 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2370 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2359, _2360, _2361));
        float _4421 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2374 = _2351 * _2351;
        float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
        float _2387 = (exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2388 = 1.0 - _2351;
        float _2398 = (0.5 / (((_2139 * ((_2365 * _2388) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2388) + _2351) * _2365))) * _2365;
        float _4432 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2400 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
        float _2401 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
        _2326 = (((_2387 * cbLight._m0[_2336].x) * _2400) * _2401) + _2262;
        _2328 = (((_2387 * cbLight._m0[_2336].y) * _2400) * _2401) + _2263;
        _2330 = (((_2387 * cbLight._m0[_2336].z) * _2400) * _2401) + _2264;
    }
    float _2436;
    float _2438;
    float _2440;
    if (_2065)
    {
        _2436 = _2326;
        _2438 = _2328;
        _2440 = _2330;
    }
    else
    {
        uint _2447 = _1971 + 3u;
        uint _2451 = _1971 + 11u;
        float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _729) * 0.949999988079071044921875);
        float _2466 = _2465 * _2465;
        float _2467 = cbLight._m0[_2447].x + _805;
        float _2468 = cbLight._m0[_2447].y + _806;
        float _2469 = cbLight._m0[_2447].z + _807;
        float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
        float _2474 = _2473 * _2467;
        float _2475 = _2473 * _2468;
        float _2476 = _2473 * _2469;
        float _2477 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2447].xyz));
        float _4448 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2480 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _2481 = dot(vec3(_726, _727, _728), vec3(_2474, _2475, _2476));
        float _4459 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2484 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _2485 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2474, _2475, _2476));
        float _4470 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2489 = _2466 * _2466;
        float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
        float _2502 = (exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2503 = 1.0 - _2466;
        float _2513 = (0.5 / (((_2139 * ((_2480 * _2503) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2139 * _2503) + _2466) * _2480))) * _2480;
        float _4481 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2515 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
        float _2516 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
        _2436 = (((_2502 * cbLight._m0[_2451].x) * _2515) * _2516) + _2326;
        _2438 = (((_2502 * cbLight._m0[_2451].y) * _2515) * _2516) + _2328;
        _2440 = (((_2502 * cbLight._m0[_2451].z) * _2515) * _2516) + _2330;
    }
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    if (_1969.y == 0u)
    {
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2591;
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2591;
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2591;
        uvec4 _2606 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2607 = _2606.x;
        uint _2618 = uint((float(_2606.y) * floor(float(uint(cbSceneParam._m0[85u].y * _826) / _2607))) + floor(float(uint(cbSceneParam._m0[85u].x * _825) / _2607)));
        float _2628 = (log2(_2594 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2629 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
        uint _2632 = uint(isnan(14.0) ? _2629 : (isnan(_2629) ? 14.0 : min(_2629, 14.0)));
        uvec4 _2637 = texelFetch(g_lightClusterGridBuffer, int(((_2632 << 2u) + (_2618 << 6u)) >> 2u));
        uint _2638 = _2637.x;
        uint _2639 = _2606.z;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        if (((((1u << ((_2639 >> 4u) & 15u)) + 4294967295u) & _2638) == 0u) || ((_2639 & 240u) == 0u))
        {
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
        }
        else
        {
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            uint _2897 = 0u;
            uint _2906;
            bool _2907;
            for (;;)
            {
                _2906 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_2897 << 2u)) >> 2u)).x;
                _2907 = _2906 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2907)
                {
                    frontier_phi_66_pred = _2891;
                    frontier_phi_66_pred_1 = _2896;
                    frontier_phi_66_pred_2 = _2895;
                    frontier_phi_66_pred_3 = _2894;
                    frontier_phi_66_pred_4 = _2893;
                    frontier_phi_66_pred_5 = _2892;
                }
                else
                {
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    uint _3042;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2893;
                    _3039 = _2894;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2906;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    for (;;)
                    {
                        uint _3046 = uint(findLSB(_3042)) + (_2897 << 5u);
                        uint _3043 = (_3042 + 4294967295u) & _3042;
                        uint _3048 = _3046 * 48u;
                        vec4 _3062 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 3u)).x));
                        uint _3068 = (_3046 * 48u) + 4u;
                        vec4 _3081 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3068)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3068 + 3u)).x));
                        uint _3087 = (_3046 * 48u) + 8u;
                        vec3 _3098 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x));
                        float _3102 = _3062.x - _2592;
                        float _3103 = _3062.y - _2593;
                        float _3104 = _3062.z - _2594;
                        float _3105 = dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104));
                        float _3108 = inversesqrt(_3105);
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3112 = dot(vec3(_844, _847, _850), vec3(_3109, _3110, _3111));
                        float _3117 = 1.0 - (_3105 * _3062.w);
                        float _4507 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                        float _3118 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3119 = sqrt(_3105) * _3081.w;
                        float _3122 = 1.39999997615814208984375 / (_3119 + 1.39999997615814208984375);
                        float _3123 = _3122 * _3122;
                        float _3126 = ((1.0 - _3123) * _3112) + _3123;
                        float _3129 = _3119 * _3119;
                        float _3133 = ((isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0))) * _3118) / ((_3129 * 0.699999988079071044921875) + 1.0);
                        float _3137 = (-0.0) - _2592;
                        float _3138 = (-0.0) - _2593;
                        float _3139 = (-0.0) - _2594;
                        float _3143 = inversesqrt(dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139)));
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3154 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                        float _3155 = 1.0 - _904;
                        float _3162 = sqrt(1.0 - ((1.0 - (_3155 * _3155)) * (1.0 - (_3154 * _3154))));
                        float _3163 = _3162 * _3162;
                        float _3164 = _3163 * _3163;
                        float _3165 = _3144 + _3109;
                        float _3166 = _3145 + _3110;
                        float _3167 = _3146 + _3111;
                        float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
                        float _3175 = dot(vec3(_844, _847, _850), vec3(_3144, _3145, _3146));
                        float _4523 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3178 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3179 = dot(vec3(_844, _847, _850), vec3(_3171 * _3165, _3171 * _3166, _3171 * _3167));
                        float _4534 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3182 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                        float _3186 = ((_3182 * _3182) * (_3164 + (-1.0))) + 1.0;
                        float _3187 = _3122 * _3163;
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3112) + _3188;
                        float _4545 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3192 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                        float _3193 = 1.0 - _3163;
                        float _3203 = (0.5 / (((_3192 * ((_3178 * _3193) + _3163)) + 9.9999999392252902907785028219223e-09) + (((_3192 * _3193) + _3163) * _3178))) * _3192;
                        float _4556 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3214 = (((_3164 * 3.1415927410125732421875) * (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0)))) / ((_3186 * _3186) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125))) * _3118;
                        _2966 = (_3133 * _3081.x) + _3039;
                        _2967 = (_3133 * _3081.y) + _3040;
                        _2968 = (_3133 * _3081.z) + _3041;
                        _2963 = (_3214 * _3098.x) + _3036;
                        _2964 = (_3214 * _3098.y) + _3037;
                        _2965 = (_3214 * _3098.z) + _3038;
                        if (_3043 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _2965;
                            _3039 = _2966;
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _3043;
                        }
                    }
                    frontier_phi_66_pred = _2963;
                    frontier_phi_66_pred_1 = _2968;
                    frontier_phi_66_pred_2 = _2967;
                    frontier_phi_66_pred_3 = _2966;
                    frontier_phi_66_pred_4 = _2965;
                    frontier_phi_66_pred_5 = _2964;
                }
                _2740 = frontier_phi_66_pred;
                _2750 = frontier_phi_66_pred_1;
                _2748 = frontier_phi_66_pred_2;
                _2746 = frontier_phi_66_pred_3;
                _2744 = frontier_phi_66_pred_4;
                _2742 = frontier_phi_66_pred_5;
                uint _2898 = _2897 + 1u;
                if (_2898 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2891 = _2740;
                    _2892 = _2742;
                    _2893 = _2744;
                    _2894 = _2746;
                    _2895 = _2748;
                    _2896 = _2750;
                    _2897 = _2898;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
        }
        uvec4 _2753 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2754 = _2753.z;
        uint _2756 = (_2754 >> 8u) & 15u;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        if (((4294967295u << _2756) & _2638) == 0u)
        {
            _2859 = _2739;
            _2861 = _2741;
            _2863 = _2743;
            _2865 = _2745;
            _2867 = _2747;
            _2869 = _2749;
        }
        else
        {
            float _2884 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
            float _2885 = _2884 * _2592;
            float _2886 = _2884 * _2593;
            float _2887 = _2884 * _2594;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2756 < ((_2754 >> 12u) & 15u))
            {
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _3019 = _2739;
                float _3020 = _2741;
                float _3021 = _2743;
                float _3022 = _2745;
                float _3023 = _2747;
                float _3024 = _2749;
                uint _3025 = _2756;
                uint _3034;
                bool _3035;
                for (;;)
                {
                    _3034 = texelFetch(g_lightClassification, int((((_2632 << 5u) + (_2618 << 9u)) + (_3025 << 2u)) >> 2u)).x;
                    _3035 = _3034 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3035)
                    {
                        frontier_phi_77_pred = _3024;
                        frontier_phi_77_pred_1 = _3023;
                        frontier_phi_77_pred_2 = _3022;
                        frontier_phi_77_pred_3 = _3021;
                        frontier_phi_77_pred_4 = _3020;
                        frontier_phi_77_pred_5 = _3019;
                    }
                    else
                    {
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3241 = _3019;
                        float _3242 = _3020;
                        float _3243 = _3021;
                        float _3244 = _3022;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        uint _3247 = _3034;
                        uint _3248;
                        vec4 _3273;
                        float _3274;
                        vec4 _3289;
                        vec3 _3301;
                        vec4 _3316;
                        vec4 _3332;
                        float _3378;
                        bool _3379;
                        for (;;)
                        {
                            uint _3258 = ((_3025 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3247));
                            _3248 = (_3247 + 4294967295u) & _3247;
                            uint _3260 = _3258 * 40u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            _3274 = _3273.w;
                            uint _3276 = (_3258 * 40u) + 4u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3258 * 40u) + 8u;
                            _3301 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x));
                            uint _3303 = (_3258 * 40u) + 16u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3319 = (_3258 * 40u) + 20u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            uint _3334 = (_3258 * 40u) + 24u;
                            vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3353 = (_3258 * 40u) + 28u;
                            vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            _3378 = fma(_2594, _3366.z, fma(_2593, _3366.y, _3366.x * _2592)) + _3366.w;
                            _3379 = !((fma(_2594, _3347.z, fma(_2593, _3347.y, _3347.x * _2592)) + _3347.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3379)
                            {
                                float _3406 = _3273.x - _2592;
                                float _3407 = _3273.y - _2593;
                                float _3408 = _3273.z - _2594;
                                float _3409 = dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408));
                                float _3412 = inversesqrt(_3409);
                                float _3413 = _3412 * _3406;
                                float _3414 = _3412 * _3407;
                                float _3415 = _3412 * _3408;
                                float _3419 = 1.0 - (_3409 / (_3274 * _3274));
                                float _4567 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3420 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3424 = sqrt(_3409) * _3289.w;
                                float _3426 = 1.39999997615814208984375 / (_3424 + 1.39999997615814208984375);
                                float _3427 = _3426 * _3426;
                                float _3430 = ((1.0 - _3427) * dot(vec3(_3413, _3414, _3415), vec3(_844, _847, _850))) + _3427;
                                float _3433 = _3424 * _3424;
                                float _3437 = (fma(_2594, _3316.z, fma(_2593, _3316.y, _3316.x * _2592)) + _3316.w) / _3378;
                                float _3438 = (fma(_2594, _3332.z, fma(_2593, _3332.y, _3332.x * _2592)) + _3332.w) / _3378;
                                float _3442 = 1.0 - dot(vec2(_3437, _3438), vec2(_3437, _3438));
                                float _4583 = isnan(0.0) ? _3442 : (isnan(_3442) ? 0.0 : max(_3442, 0.0));
                                float _3443 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3444 = _3443 * (((isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0))) * _3420) / ((_3433 * 0.699999988079071044921875) + 1.0));
                                float _3456 = exp2(log2(1.0 / ((_3433 * 3.5) + 5.0)) * 0.25);
                                float _3457 = 1.0 - _904;
                                float _3464 = sqrt(1.0 - ((1.0 - (_3457 * _3457)) * (1.0 - (_3456 * _3456))));
                                float _3465 = _3464 * _3464;
                                float _3466 = _3465 * _3465;
                                float _3467 = _3413 - _2885;
                                float _3468 = _3414 - _2886;
                                float _3469 = _3415 - _2887;
                                float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                                float _3477 = dot(vec3(_844, _847, _850), vec3((-0.0) - _2885, (-0.0) - _2886, (-0.0) - _2887));
                                float _4594 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                                float _3480 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3481 = dot(vec3(_844, _847, _850), vec3(_3473 * _3467, _3473 * _3468, _3473 * _3469));
                                float _4605 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3484 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                                float _3488 = ((_3484 * _3484) * (_3466 + (-1.0))) + 1.0;
                                float _3489 = _3426 * _3465;
                                float _3490 = _3489 * _3489;
                                float _3496 = ((1.0 - _3490) * dot(vec3(_844, _847, _850), vec3(_3413, _3414, _3415))) + _3490;
                                float _4616 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3497 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                                float _3498 = 1.0 - _3465;
                                float _3508 = (0.5 / (((_3497 * ((_3480 * _3498) + _3465)) + 9.9999999392252902907785028219223e-09) + (((_3497 * _3498) + _3465) * _3480))) * _3497;
                                float _4627 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3518 = (_3443 * _3420) * (((_3466 * 3.1415927410125732421875) * (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0)))) / ((_3488 * _3488) * ((_3433 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3444 * _3289.y;
                                frontier_phi_83_pred_1 = _3444 * _3289.x;
                                frontier_phi_83_pred_2 = _3518 * _3301.z;
                                frontier_phi_83_pred_3 = _3518 * _3301.y;
                                frontier_phi_83_pred_4 = _3518 * _3301.x;
                                frontier_phi_83_pred_5 = _3444 * _3289.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3526 = frontier_phi_83_pred;
                            _3525 = frontier_phi_83_pred_1;
                            _3524 = frontier_phi_83_pred_2;
                            _3523 = frontier_phi_83_pred_3;
                            _3522 = frontier_phi_83_pred_4;
                            _3527 = frontier_phi_83_pred_5;
                            _3231 = _3525 + _3244;
                            _3232 = _3526 + _3245;
                            _3233 = _3527 + _3246;
                            _3228 = _3522 + _3241;
                            _3229 = _3523 + _3242;
                            _3230 = _3524 + _3243;
                            if (_3248 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3248;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3233;
                        frontier_phi_77_pred_1 = _3232;
                        frontier_phi_77_pred_2 = _3231;
                        frontier_phi_77_pred_3 = _3230;
                        frontier_phi_77_pred_4 = _3229;
                        frontier_phi_77_pred_5 = _3228;
                    }
                    _2870 = frontier_phi_77_pred;
                    _2868 = frontier_phi_77_pred_1;
                    _2866 = frontier_phi_77_pred_2;
                    _2864 = frontier_phi_77_pred_3;
                    _2862 = frontier_phi_77_pred_4;
                    _2860 = frontier_phi_77_pred_5;
                    uint _3026 = _3025 + 1u;
                    if (_3026 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3019 = _2860;
                        _3020 = _2862;
                        _3021 = _2864;
                        _3022 = _2866;
                        _3023 = _2868;
                        _3024 = _2870;
                        _3025 = _3026;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2864;
                frontier_phi_58_59_ladder_1 = _2870;
                frontier_phi_58_59_ladder_2 = _2868;
                frontier_phi_58_59_ladder_3 = _2866;
                frontier_phi_58_59_ladder_4 = _2862;
                frontier_phi_58_59_ladder_5 = _2860;
            }
            else
            {
                frontier_phi_58_59_ladder = _2743;
                frontier_phi_58_59_ladder_1 = _2749;
                frontier_phi_58_59_ladder_2 = _2747;
                frontier_phi_58_59_ladder_3 = _2745;
                frontier_phi_58_59_ladder_4 = _2741;
                frontier_phi_58_59_ladder_5 = _2739;
            }
            _2859 = frontier_phi_58_59_ladder_5;
            _2861 = frontier_phi_58_59_ladder_4;
            _2863 = frontier_phi_58_59_ladder;
            _2865 = frontier_phi_58_59_ladder_3;
            _2867 = frontier_phi_58_59_ladder_2;
            _2869 = frontier_phi_58_59_ladder_1;
        }
        float _2874 = isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0));
        _2651 = (_2874 * _2865) + _2103;
        _2653 = (_2874 * _2867) + _2105;
        _2655 = (_2874 * _2869) + _2107;
        _2657 = ((_2859 * 0.039999999105930328369140625) * _2874) + _2436;
        _2659 = ((_2861 * 0.039999999105930328369140625) * _2874) + _2438;
        _2661 = ((_2863 * 0.039999999105930328369140625) * _2874) + _2440;
    }
    else
    {
        _2651 = _2103;
        _2653 = _2105;
        _2655 = _2107;
        _2657 = _2436;
        _2659 = _2438;
        _2661 = _2440;
    }
    float _4643 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4654 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4665 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2678 = ((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2651 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _888))) + ((_2657 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1724)) * cbPerFrame._m0[3u].x);
    float _2679 = ((isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2653 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _888))) + ((_2659 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1724)) * cbPerFrame._m0[3u].x);
    float _2680 = ((isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2655 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _888))) + ((_2661 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1724)) * cbPerFrame._m0[3u].x);
    uint _2681 = _249 + 6u;
    float _2689 = _825 / cbSceneParam._m0[86u].x;
    float _2690 = _826 / cbSceneParam._m0[86u].y;
    vec4 _2704 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, (log2((isnan(cbSceneParam._m0[77u].w) ? _747 : (isnan(_747) ? cbSceneParam._m0[77u].w : min(_747, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2706 = _2704.x;
    float _2707 = _2704.y;
    float _2708 = _2704.z;
    float _2709 = _2704.w;
    float _2801;
    float _2803;
    float _2805;
    float _2807;
    if (_747 > cbSceneParam._m0[78u].w)
    {
        float _2764 = isnan(_747) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _747 : min(cbSceneParam._m0[80u].w, _747));
        float _2765 = _2764 / _747;
        float _2776 = _2765 * _798;
        float _2777 = _799 * _2765;
        float _2778 = (-0.0) - _2777;
        float _2779 = _2765 * _800;
        float _2781 = (cbSceneParam._m0[77u].w * _2778) / _2764;
        float _2782 = _2781 + cbSceneParam._m0[79u].w;
        float _2783 = cbSceneParam._m0[79u].w - _2777;
        float _2789 = sqrt(((_2776 * _2776) + (_2777 * _2777)) + (_2779 * _2779));
        float _2792 = (1.0 - (cbSceneParam._m0[77u].w / _2764)) * _2789;
        float _2797 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2799 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2976;
        if (abs((_2778 - _2781) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2976 = ((((_2782 > 0.0) ? exp2(_2797 * _2782) : (2.0 - exp2(_2799 * _2782))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2792;
        }
        else
        {
            float _2920 = 1.0 / cbSceneParam._m0[80u].x;
            float _2921 = isnan(_2783) ? _2782 : (isnan(_2782) ? _2783 : max(_2782, _2783));
            float _2922 = isnan(_2783) ? _2782 : (isnan(_2782) ? _2783 : min(_2782, _2783));
            float _2931 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : min(_2921, 0.0));
            float _2932 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : min(_2922, 0.0));
            _2976 = ((abs(_2789 / _2778) * cbSceneParam._m0[80u].y) * ((((_2931 - _2932) * 2.0) - ((exp2(_2797 * (isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0)))) - exp2(_2797 * (isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))))) * _2920)) - ((exp2(_2799 * _2931) - exp2(_2799 * _2932)) * _2920))) + (_2792 * cbSceneParam._m0[80u].z);
        }
        vec4 _2978 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2689, _2690, 1.0), 0.0);
        float _2987 = exp2((_2976 * (-1.44269502162933349609375)) * (1.0 - _2978.w));
        float _2988 = log2(_2987);
        float _3004 = log2(_2709);
        _2801 = (exp2(_3004 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].x)) * _2978.x) / cbSceneParam._m0[78u].x)) + _2706;
        _2803 = (exp2(_3004 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].y)) * _2978.y) / cbSceneParam._m0[78u].y)) + _2707;
        _2805 = (exp2(_3004 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2988 * cbSceneParam._m0[78u].z)) * _2978.z) / cbSceneParam._m0[78u].z)) + _2708;
        _2807 = _2987 * _2709;
    }
    else
    {
        _2801 = _2706;
        _2803 = _2707;
        _2805 = _2708;
        _2807 = _2709;
    }
    bool _3014;
    vec4 _2817;
    vec4 _2839;
    float _2841;
    float _2845;
    float _2846;
    float _2847;
    float _2848;
    bool _2858;
    for (;;)
    {
        _2817 = cbMatDynParam._m0[0u];
        float _2819 = roundEven(_2817.y);
        bool _2820 = _2819 == 3.0;
        float _2821 = log2(_2807);
        float _2828 = exp2(_2821 * cbSceneParam._m0[78u].x) * _2678;
        float _2829 = exp2(_2821 * cbSceneParam._m0[78u].y) * _2679;
        float _2830 = exp2(_2821 * cbSceneParam._m0[78u].z) * _2680;
        float _2837 = _814 + (-0.5);
        _2839 = cbMtdParam._m0[1u];
        _2841 = _2839.y * _2837;
        float _2844 = (_2819 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2845 = _2844 * (_2820 ? _2828 : (_2828 + (cbSceneParam._m0[72u].w * _2801)));
        _2846 = _2844 * (_2820 ? _2829 : (_2829 + (cbSceneParam._m0[72u].w * _2803)));
        _2847 = _2844 * (_2820 ? _2830 : (_2830 + (cbSceneParam._m0[72u].w * _2805)));
        _2848 = _2837 * 0.999000012874603271484375;
        _2858 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2858)
        {
            if ((cbInstanceData._m0[_249 + 7u].x + _2848) < 0.5)
            {
                _3014 = true;
                break;
            }
        }
        uint _2955 = _863 + uint(_2817.w);
        if ((cbInstanceData._m0[_2955].w < 1.0) && ((cbInstanceData._m0[_2955].w + _2848) < 0.5))
        {
            _3014 = true;
            break;
        }
        if ((_2841 + 1.0) < _2839.x)
        {
            _3014 = true;
            break;
        }
        _3014 = false;
        break;
    }
    float _3219;
    if (_3014)
    {
        discard_state = true;
        _3219 = 0.0;
    }
    else
    {
        _3219 = cbInstanceData._m0[_2681].w;
    }
    SV_Target.x = _2845;
    SV_Target.y = _2846;
    SV_Target.z = _2847;
    SV_Target.w = _3219;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2681].w;
    discard_exit();
}


