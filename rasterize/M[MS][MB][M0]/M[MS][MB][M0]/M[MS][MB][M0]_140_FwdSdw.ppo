#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1136;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _213 = _212 * _204;
    float _214 = _212 * _205;
    float _215 = _212 * _206;
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = _219 * NORMAL.x;
    float _221 = _219 * NORMAL.y;
    float _222 = _219 * NORMAL.z;
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227 = _226 * TANGENT.x;
    float _228 = _226 * TANGENT.y;
    float _229 = _226 * TANGENT.z;
    uint _232 = uint(roundEven(NORMAL.w)) * 13u;
    uint _238 = _232 + 1u;
    uint _242 = _232 + 2u;
    float _251 = sqrt(((cbInstanceData._m0[_238].x * cbInstanceData._m0[_238].x) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x)) + (cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x));
    float _252 = _251 * TEXCOORD.z;
    float _253 = _251 * TEXCOORD.w;
    vec4 _273 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _279 = _273.x * cbMtdParam._m0[11u].x;
    float _280 = _273.y * cbMtdParam._m0[11u].y;
    float _281 = _273.z * cbMtdParam._m0[11u].z;
    vec4 _300 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _252) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _253) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _340 = _338.x;
    float _350 = dot(vec4(_340, _338.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _367 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_340 - _350) * cbMtdParam._m0[24u].x) + _350) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3724 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
    float _375 = (_368 * ((_300.x * cbMtdParam._m0[12u].x) - _279)) + _279;
    float _376 = (_368 * ((_300.y * cbMtdParam._m0[12u].y) - _280)) + _280;
    float _377 = (_368 * ((_300.z * cbMtdParam._m0[12u].z) - _281)) + _281;
    vec4 _396 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _252) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _253) + cbTextureTilingScale._m0[14u].w));
    vec4 _416 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _252) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _253) + cbTextureTilingScale._m0[4u].w));
    vec4 _433 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _435 = _433.x;
    float _436 = _433.y;
    float _437 = _433.z;
    float _446 = ((_416.z - _437) * _368) + _437;
    float _449 = ((((_416.x - _435) * _368) + _435) * 2.0) + (-1.0);
    float _451 = ((((_416.y - _436) * _368) + _436) * 2.0) + (-1.0);
    float _452 = dot(vec2(_449, _451), vec2(_449, _451));
    float _3735 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _457 = sqrt(1.0 - (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))));
    vec4 _473 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _485 = (((_473.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _449;
    float _486 = (((_473.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _451;
    float _489 = fma(_457, _220, fma(_486, _227, _485 * _213));
    float _492 = fma(_457, _221, fma(_486, _228, _485 * _214));
    float _495 = fma(_457, _222, fma(_486, _229, _485 * _215));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    vec4 _528 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _252) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _253) + cbTextureTilingScale._m0[11u].w));
    float _530 = _528.x;
    float _531 = 1.0 - _530;
    float _537 = (cbMtdParam._m0[19u].x + dot(vec4(_499 * _489, _499 * _492, _499 * _495, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_530 - _531) * cbMtdParam._m0[24u].z) + _531) * cbMtdParam._m0[21u].z);
    float _3746 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _545 = (_538 * ((_396.x * cbMtdParam._m0[18u].x) - _375)) + _375;
    float _546 = (_538 * ((_396.y * cbMtdParam._m0[18u].y) - _376)) + _376;
    float _547 = (_538 * ((_396.z * cbMtdParam._m0[18u].z) - _377)) + _377;
    float _551 = (cbMtdParam._m0[19u].w * (_473.z - _446)) + _446;
    vec4 _564 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _252) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _253) + cbTextureTilingScale._m0[15u].w));
    float _571 = (_564.x * 2.0) + (-1.0);
    float _572 = (_564.y * 2.0) + (-1.0);
    float _573 = dot(vec2(_571, _572), vec2(_571, _572));
    float _3757 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _581 = ((_564.z - _551) * _538) + _551;
    float _591 = ((sqrt(1.0 - (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0)))) - _457) * _538) + _457;
    float _594 = (((_571 - _485) * _538) + _485) + (cbMtdParam._m0[21u].x * _485);
    float _595 = (((_572 - _486) * _538) + _486) + (cbMtdParam._m0[21u].x * _486);
    float _600 = cbMtdParam._m0[22u].x + _473.w;
    float _603 = fma(_591, _220, fma(_595, _227, _594 * _213));
    float _606 = fma(_591, _221, fma(_595, _228, _594 * _214));
    float _609 = fma(_591, _222, fma(_595, _229, _594 * _215));
    float _613 = inversesqrt(dot(vec3(_603, _606, _609), vec3(_603, _606, _609)));
    float _614 = _613 * _603;
    float _615 = _613 * _606;
    float _616 = _613 * _609;
    float _3768 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _617 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3790 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3801 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3812 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _635 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _687 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _677);
    float _688 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _677);
    float _689 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _677);
    float _693 = inversesqrt(dot(vec3(_687, _688, _689), vec3(_687, _688, _689)));
    float _694 = _687 * _693;
    float _695 = _688 * _693;
    float _696 = _689 * _693;
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_616, cbSceneParam._m0[5u].z, fma(_615, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _614));
    float _724 = fma(_616, cbSceneParam._m0[6u].z, fma(_615, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _614));
    float _727 = fma(_616, cbSceneParam._m0[7u].z, fma(_615, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _614));
    uint _741 = (_232 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * cbInstanceData._m0[_741].z;
    float _3823 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    vec4 _761 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _702, cbSceneParam._m0[86u].y * _703));
    float _765 = ((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * TEXCOORD_5.w) * _761.x;
    float _766 = dot(vec3(_614, _615, _616), vec3(_694, _695, _696));
    float _769 = _766 * 2.0;
    float _773 = (_769 * _614) - _694;
    float _774 = (_769 * _615) - _695;
    float _775 = (_769 * _616) - _696;
    float _779 = abs(dot(vec3(_694, _695, _696), vec3(_614, _615, _616)));
    float _3856 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _781 = sqrt(_617);
    float _794 = exp2((_781 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_781 * 3.0));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1135;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _860 = fma(_834, cbModelParam._m0[26u].z, fma(_830, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826));
        float _864 = fma(_834, cbModelParam._m0[27u].z, fma(_830, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826));
        float _868 = fma(_834, cbModelParam._m0[28u].z, fma(_830, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826));
        float _893 = _826 + _614;
        float _894 = _830 + _615;
        float _895 = _834 + _616;
        float _905 = fma(_895, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _893)) - _860;
        float _906 = fma(_895, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _893)) - _864;
        float _907 = fma(_895, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _893)) - _868;
        float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
        float _924 = ((_911 * _905) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_860 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_911 * _906) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_864 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_911 * _907) / cbModelParam._m0[34u].z) + ((((((_868 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        float _963 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_929.x + (-0.5));
        float _965 = _963 * (_929.y + (-0.5));
        float _966 = _963 * (_929.z + (-0.5));
        float _973 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_936.x + (-0.5));
        float _975 = _973 * (_936.y + (-0.5));
        float _976 = _973 * (_936.z + (-0.5));
        float _983 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_943.x + (-0.5));
        float _985 = _983 * (_943.y + (-0.5));
        float _986 = _983 * (_943.z + (-0.5));
        float _993 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_950.x + (-0.5));
        float _995 = _993 * (_950.y + (-0.5));
        float _996 = _993 * (_950.z + (-0.5));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = _964 * 0.5;
        float _1001 = _974 * 0.5;
        float _1002 = _984 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1017 = (dot(vec3(_614, _615, _616), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1027 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3904 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1029 + 1.0))) + _1034) * _997;
        float _1044 = _965 * 0.5;
        float _1045 = _975 * 0.5;
        float _1046 = _985 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_614, _615, _616), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3937 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1071 + 1.0))) + _1076) * _998;
        float _1086 = _966 * 0.5;
        float _1087 = _976 * 0.5;
        float _1088 = _986 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(_614, _615, _616), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3970 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1113 + 1.0))) + _1118) * _999;
        _1135 = _966;
        _1137 = _965;
        _1138 = _964;
        _1139 = _976;
        _1140 = _975;
        _1141 = _974;
        _1142 = _986;
        _1143 = _985;
        _1144 = _984;
        _1145 = _999;
        _1146 = _998;
        _1147 = _997;
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
    }
    else
    {
        _1135 = _1136;
        _1137 = _1136;
        _1138 = _1136;
        _1139 = _1136;
        _1140 = _1136;
        _1141 = _1136;
        _1142 = _1136;
        _1143 = _1136;
        _1144 = _1136;
        _1145 = _1136;
        _1146 = _1136;
        _1147 = _1136;
        _1148 = 0.0;
        _1149 = 0.0;
        _1150 = 0.0;
    }
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1175 = fma(_834, cbModelParam._m0[30u].z, fma(_830, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _826));
        float _1179 = fma(_834, cbModelParam._m0[31u].z, fma(_830, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _826));
        float _1183 = fma(_834, cbModelParam._m0[32u].z, fma(_830, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _826));
        float _1206 = _826 + _614;
        float _1207 = _830 + _615;
        float _1208 = _834 + _616;
        float _1218 = fma(_1208, cbModelParam._m0[30u].z, fma(_1207, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1206)) - _1175;
        float _1219 = fma(_1208, cbModelParam._m0[31u].z, fma(_1207, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1206)) - _1179;
        float _1220 = fma(_1208, cbModelParam._m0[32u].z, fma(_1207, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1206)) - _1183;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1175 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1179 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[35u].z) + ((((((_1183 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1274 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1241.x + (-0.5));
        float _1276 = _1274 * (_1241.y + (-0.5));
        float _1277 = _1274 * (_1241.z + (-0.5));
        float _1284 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1248.x + (-0.5));
        float _1286 = _1284 * (_1248.y + (-0.5));
        float _1287 = _1284 * (_1248.z + (-0.5));
        float _1294 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1255.x + (-0.5));
        float _1296 = _1294 * (_1255.y + (-0.5));
        float _1297 = _1294 * (_1255.z + (-0.5));
        float _1304 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1262.x + (-0.5));
        float _1306 = _1304 * (_1262.y + (-0.5));
        float _1307 = _1304 * (_1262.z + (-0.5));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = _1275 * 0.5;
        float _1312 = _1285 * 0.5;
        float _1313 = _1295 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_614, _615, _616), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4011 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _4022 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4033 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * (_1338 + 1.0))) + _1343) * _1308;
        float _1353 = _1276 * 0.5;
        float _1354 = _1286 * 0.5;
        float _1355 = _1296 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_614, _615, _616), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4044 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4055 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4066 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_1380 + 1.0))) + _1385) * _1309;
        float _1395 = _1277 * 0.5;
        float _1396 = _1287 * 0.5;
        float _1397 = _1297 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_614, _615, _616), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4099 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1422 + 1.0))) + _1427) * _1310;
        _1444 = _1277;
        _1445 = _1276;
        _1446 = _1275;
        _1447 = _1287;
        _1448 = _1286;
        _1449 = _1285;
        _1450 = _1297;
        _1451 = _1296;
        _1452 = _1295;
        _1453 = _1310;
        _1454 = _1309;
        _1455 = _1308;
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
    }
    else
    {
        _1444 = _1136;
        _1445 = _1136;
        _1446 = _1136;
        _1447 = _1136;
        _1448 = _1136;
        _1449 = _1136;
        _1450 = _1136;
        _1451 = _1136;
        _1452 = _1136;
        _1453 = _1136;
        _1454 = _1136;
        _1455 = _1136;
        _1456 = 0.0;
        _1457 = 0.0;
        _1458 = 0.0;
    }
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1148)) + _1148;
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1149)) + _1149;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1150)) + _1150;
    float _1491 = fma(_1470, cbSceneParam._m0[89u].z, fma(_1469, cbSceneParam._m0[89u].y, _1468 * cbSceneParam._m0[89u].x));
    float _1494 = fma(_1470, cbSceneParam._m0[90u].z, fma(_1469, cbSceneParam._m0[90u].y, _1468 * cbSceneParam._m0[90u].x));
    float _1497 = fma(_1470, cbSceneParam._m0[91u].z, fma(_1469, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1468));
    float _1512 = _773 * 0.5;
    float _1513 = _774 * 0.5;
    float _1514 = _775 * 0.5;
    float _1515 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1518 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1521 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1555;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1528 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1135, _1139, _1142, _1145));
        float _1532 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1536 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1543 = dot(vec4(cbModelParam._m0[39u]), vec4(_1512, _1513, _1514, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1566;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1557 = dot(vec4(cbModelParam._m0[40u]), vec4(_1512, _1513, _1514, 1.0));
        _1566 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1566 = 1.0;
    }
    float _1570 = (_1566 * cbModelParam._m0[1u].x) + (_1555 * (1.0 - cbModelParam._m0[1u].x));
    float _1580 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _617);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1580 : min(cbModelParam._m0[25u].z, _1580));
    float _1661;
    float _1663;
    float _1665;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1628 = fma(_834, cbModelParam._m0[13u].z, fma(_830, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _826)) + cbModelParam._m0[13u].w;
        float _1632 = fma(_834, cbModelParam._m0[14u].z, fma(_830, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _826)) + cbModelParam._m0[14u].w;
        float _1636 = fma(_834, cbModelParam._m0[15u].z, fma(_830, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _826)) + cbModelParam._m0[15u].w;
        float _1639 = fma(_775, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _773));
        float _1642 = fma(_775, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _773));
        float _1645 = fma(_775, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _773));
        float _1673;
        if (_1639 > 0.0)
        {
            _1673 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1673 = frontier_phi_14_12_ladder;
        }
        float _1842;
        if (_1642 > 0.0)
        {
            _1842 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1842 = frontier_phi_23_19_ladder;
        }
        float _2137;
        if (_1645 > 0.0)
        {
            _2137 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2137 = frontier_phi_35_30_ladder;
        }
        float _2139 = isnan(_1842) ? _1673 : (isnan(_1673) ? _1842 : min(_1673, _1842));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1639) + _1628;
        float _2145 = (_2140 * _1642) + _1632;
        float _2146 = (_2140 * _1645) + _1636;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2149 = (-1.0) - _2147;
        float _2151 = _2147 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2146 > _2151) || ((_2146 < _2149) || ((_2145 > _2151) || ((_2145 < _2149) || ((_2144 < _2149) || (_2144 > _2151))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2291 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2146, cbModelParam._m0[9u].z, fma(_2145, cbModelParam._m0[9u].y, _2144 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2146, cbModelParam._m0[10u].z, fma(_2145, cbModelParam._m0[10u].y, _2144 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2146, cbModelParam._m0[11u].z, fma(_2145, cbModelParam._m0[11u].y, _2144 * cbModelParam._m0[11u].x))), _1581);
            frontier_phi_13_35_ladder = _2291.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2291.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2291.x * cbModelParam._m0[1u].y;
        }
        _1661 = frontier_phi_13_35_ladder_2;
        _1663 = frontier_phi_13_35_ladder_1;
        _1665 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1649 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_773, _774, _775), _1581);
        _1661 = _1649.x * cbModelParam._m0[1u].y;
        _1663 = _1649.y * cbModelParam._m0[1u].y;
        _1665 = _1649.z * cbModelParam._m0[1u].y;
    }
    float _1669 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _617);
    float _1670 = isnan(_1669) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1669 : min(cbModelParam._m0[25u].w, _1669));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1723 = fma(_834, cbModelParam._m0[21u].z, fma(_830, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _826)) + cbModelParam._m0[21u].w;
        float _1727 = fma(_834, cbModelParam._m0[22u].z, fma(_830, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _826)) + cbModelParam._m0[22u].w;
        float _1731 = fma(_834, cbModelParam._m0[23u].z, fma(_830, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _826)) + cbModelParam._m0[23u].w;
        float _1734 = fma(_775, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _773));
        float _1737 = fma(_775, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _773));
        float _1740 = fma(_775, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _773));
        float _1847;
        if (_1734 > 0.0)
        {
            _1847 = abs((1.0 - _1723) / _1734);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1723 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1847 = frontier_phi_25_21_ladder;
        }
        float _2164;
        if (_1737 > 0.0)
        {
            _2164 = abs((1.0 - _1727) / _1737);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1727 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2164 = frontier_phi_37_32_ladder;
        }
        float _2491;
        if (_1740 > 0.0)
        {
            _2491 = abs((1.0 - _1731) / _1740);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1731 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2491 = frontier_phi_47_44_ladder;
        }
        float _2493 = isnan(_2164) ? _1847 : (isnan(_1847) ? _2164 : min(_1847, _2164));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1734) + _1723;
        float _2499 = (_2494 * _1737) + _1727;
        float _2500 = (_2494 * _1740) + _1731;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2502 = (-1.0) - _2501;
        float _2504 = _2501 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2500 > _2504) || ((_2500 < _2502) || ((_2499 > _2504) || ((_2499 < _2502) || ((_2498 < _2502) || (_2498 > _2504))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2500, cbModelParam._m0[17u].z, fma(_2499, cbModelParam._m0[17u].y, _2498 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2500, cbModelParam._m0[18u].z, fma(_2499, cbModelParam._m0[18u].y, _2498 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2500, cbModelParam._m0[19u].z, fma(_2499, cbModelParam._m0[19u].y, _2498 * cbModelParam._m0[19u].x))), _1670);
            frontier_phi_22_47_ladder = _2618.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2618.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2618.x * cbModelParam._m0[1u].z;
        }
        _1759 = frontier_phi_22_47_ladder_2;
        _1761 = frontier_phi_22_47_ladder_1;
        _1763 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1743 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_773, _774, _775), _1670);
        _1759 = _1743.x * cbModelParam._m0[1u].z;
        _1761 = _1743.y * cbModelParam._m0[1u].z;
        _1763 = _1743.z * cbModelParam._m0[1u].z;
    }
    float _1775 = ((((1.0 - _794) * ((_781 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_794 * _781)) * _765;
    float _1776 = _1775 * ((cbModelParam._m0[1u].w * (_1759 - _1661)) + _1661);
    float _1777 = _1775 * ((cbModelParam._m0[1u].w * (_1761 - _1663)) + _1663);
    float _1778 = _1775 * ((cbModelParam._m0[1u].w * (_1763 - _1665)) + _1665);
    float _1781 = fma(_1778, cbSceneParam._m0[89u].z, fma(_1777, cbSceneParam._m0[89u].y, _1776 * cbSceneParam._m0[89u].x));
    float _1784 = fma(_1778, cbSceneParam._m0[90u].z, fma(_1777, cbSceneParam._m0[90u].y, _1776 * cbSceneParam._m0[90u].x));
    float _1787 = fma(_1778, cbSceneParam._m0[91u].z, fma(_1777, cbSceneParam._m0[91u].y, _1776 * cbSceneParam._m0[91u].x));
    float _1821 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1825 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1829 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1833 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1834 = _1821 / _1833;
    float _1835 = _1825 / _1833;
    float _1836 = _1829 / _1833;
    float _1983;
    float _1984;
    float _1985;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1863 = ((uint(_1836 > cbSceneParam._m0[59u].y) + uint(_1836 > cbSceneParam._m0[59u].x)) + uint(_1836 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1864 = _1863 + 43u;
        uint _1872 = _1863 + 44u;
        uint _1880 = _1863 + 45u;
        uint _1888 = _1863 + 46u;
        float _1899 = fma(_1833, cbSceneParam._m0[_1864].w, fma(_1829, cbSceneParam._m0[_1864].z, fma(_1825, cbSceneParam._m0[_1864].y, _1821 * cbSceneParam._m0[_1864].x)));
        float _1903 = fma(_1833, cbSceneParam._m0[_1872].w, fma(_1829, cbSceneParam._m0[_1872].z, fma(_1825, cbSceneParam._m0[_1872].y, _1821 * cbSceneParam._m0[_1872].x)));
        float _1911 = fma(_1833, cbSceneParam._m0[_1888].w, fma(_1829, cbSceneParam._m0[_1888].z, fma(_1825, cbSceneParam._m0[_1888].y, _1821 * cbSceneParam._m0[_1888].x)));
        float _1916 = cbSceneParam._m0[33u].z * _1911;
        float _1918 = cbSceneParam._m0[33u].w * _1911;
        float _1921 = fma(_1833, cbSceneParam._m0[_1880].w, fma(_1829, cbSceneParam._m0[_1880].z, fma(_1825, cbSceneParam._m0[_1880].y, _1821 * cbSceneParam._m0[_1880].x))) / _1911;
        float _1969 = (cbSceneParam._m0[33u].x - sqrt(((_1835 * _1835) + (_1834 * _1834)) + (_1836 * _1836))) * cbSceneParam._m0[33u].y;
        float _4225 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1976 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1916 + _1899) / _1911, (_1918 + _1903) / _1911), _1921), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1918 + _1899) / _1911, (_1903 - _1916) / _1911), _1921), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1899 - _1916) / _1911, (_1903 - _1918) / _1911), _1921), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1899 - _1918) / _1911, (_1916 + _1903) / _1911), _1921), 0.0)).x), vec4(0.25)));
        _1983 = 1.0 - (_1976 * cbSceneParam._m0[34u].x);
        _1984 = 1.0 - (_1976 * cbSceneParam._m0[34u].y);
        _1985 = 1.0 - (_1976 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1983 = 1.0;
        _1984 = 1.0;
        _1985 = 1.0;
    }
    float _2049;
    float _2051;
    float _2053;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2037 = fma(_1833, cbSceneParam._m0[63u].w, fma(_1829, cbSceneParam._m0[63u].z, fma(_1825, cbSceneParam._m0[63u].y, _1821 * cbSceneParam._m0[63u].x)));
        float _2038 = fma(_1833, cbSceneParam._m0[60u].w, fma(_1829, cbSceneParam._m0[60u].z, fma(_1825, cbSceneParam._m0[60u].y, _1821 * cbSceneParam._m0[60u].x))) / _2037;
        float _2039 = fma(_1833, cbSceneParam._m0[61u].w, fma(_1829, cbSceneParam._m0[61u].z, fma(_1825, cbSceneParam._m0[61u].y, _1821 * cbSceneParam._m0[61u].x))) / _2037;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2038 >= cbSceneParam._m0[64u].x) && (_2039 >= cbSceneParam._m0[64u].y)) && (_2038 <= cbSceneParam._m0[64u].z)) && (_2039 <= cbSceneParam._m0[64u].w))
        {
            float _2177 = fma(_1833, cbSceneParam._m0[62u].w, fma(_1829, cbSceneParam._m0[62u].z, fma(_1825, cbSceneParam._m0[62u].y, _1821 * cbSceneParam._m0[62u].x))) / _2037;
            float _2181 = isnan(cbSceneParam._m0[41u].w) ? _2177 : (isnan(_2177) ? cbSceneParam._m0[41u].w : max(_2177, cbSceneParam._m0[41u].w));
            float _2224 = (cbSceneParam._m0[33u].x - sqrt(((_1835 * _1835) + (_1834 * _1834)) + (_1836 * _1836))) * cbSceneParam._m0[33u].y;
            float _4241 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
            float _2231 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2038, cbSceneParam._m0[33u].w + _2039), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2038, _2039 - cbSceneParam._m0[33u].z), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2038 - cbSceneParam._m0[33u].z, _2039 - cbSceneParam._m0[33u].w), _2181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2038 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2039), _2181), 0.0)).x), vec4(0.25)));
            float _2235 = 1.0 - (_2231 * cbSceneParam._m0[34u].x);
            float _2236 = 1.0 - (_2231 * cbSceneParam._m0[34u].y);
            float _2237 = 1.0 - (_2231 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2237) ? _1985 : (isnan(_1985) ? _2237 : min(_1985, _2237));
            frontier_phi_34_33_ladder_1 = isnan(_2236) ? _1984 : (isnan(_1984) ? _2236 : min(_1984, _2236));
            frontier_phi_34_33_ladder_2 = isnan(_2235) ? _1983 : (isnan(_1983) ? _2235 : min(_1983, _2235));
        }
        else
        {
            frontier_phi_34_33_ladder = _1985;
            frontier_phi_34_33_ladder_1 = _1984;
            frontier_phi_34_33_ladder_2 = _1983;
        }
        _2049 = frontier_phi_34_33_ladder_2;
        _2051 = frontier_phi_34_33_ladder_1;
        _2053 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2049 = _1983;
        _2051 = _1984;
        _2053 = _1985;
    }
    uvec4 _2058 = floatBitsToUint(cbInstanceData._m0[_232 + 5u]);
    uint _2060 = _2058.x * 14u;
    uint _2061 = _2060 + 13u;
    float _2068 = _765 + (-1.0);
    float _2073 = (cbLight._m0[_2061].x * _2068) + 1.0;
    float _2074 = (cbLight._m0[_2061].y * _2068) + 1.0;
    float _2075 = (cbLight._m0[_2061].z * _2068) + 1.0;
    float _2076 = (cbLight._m0[_2061].w * _2068) + 1.0;
    uint _2077 = _2060 + 5u;
    float _2083 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
    uint _2087 = _2060 + 4u;
    float _2096 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
    uint _2100 = _2060 | 1u;
    float _2111 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_614, _615, _616));
    float _2114 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_614, _615, _616));
    float _4277 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _4288 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2119 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * 0.3183098733425140380859375;
    float _2121 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * 0.3183098733425140380859375;
    float _2128 = ((cbLight._m0[_2077].x * _2083) * _2121) + (((cbLight._m0[_2087].x * _2049) * _2096) * _2119);
    float _2129 = ((_2083 * cbLight._m0[_2077].y) * _2121) + (((cbLight._m0[_2087].y * _2051) * _2096) * _2119);
    float _2130 = ((_2083 * cbLight._m0[_2077].z) * _2121) + (((cbLight._m0[_2087].z * _2053) * _2096) * _2119);
    uvec4 _2134 = floatBitsToUint(cbLight._m0[_2060 + 12u]);
    bool _2136 = _2134.x == 0u;
    float _2238;
    float _2240;
    float _2242;
    if (_2136)
    {
        _2238 = _2128;
        _2240 = _2129;
        _2242 = _2130;
    }
    else
    {
        uint _2246 = _2060 + 6u;
        float _2262 = (dot(vec3(cbLight._m0[_2060 + 2u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _2263 = _2262 * _2262;
        float _4299 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2264 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2265 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2238 = (((cbLight._m0[_2246].x * 0.3183098733425140380859375) * _2264) * _2265) + _2128;
        _2240 = (((cbLight._m0[_2246].y * 0.3183098733425140380859375) * _2264) * _2265) + _2129;
        _2242 = (((cbLight._m0[_2246].z * 0.3183098733425140380859375) * _2264) * _2265) + _2130;
    }
    bool _2245 = _2134.y == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2245)
    {
        _2300 = _2238;
        _2302 = _2240;
        _2304 = _2242;
    }
    else
    {
        uint _2462 = _2060 + 7u;
        float _2478 = (dot(vec3(cbLight._m0[_2060 + 3u].xyz), vec3(_614, _615, _616)) * 0.5) + 0.5;
        float _2479 = _2478 * _2478;
        float _4315 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2480 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _2481 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2300 = (((cbLight._m0[_2462].x * 0.3183098733425140380859375) * _2480) * _2481) + _2238;
        _2302 = (((cbLight._m0[_2462].y * 0.3183098733425140380859375) * _2480) * _2481) + _2240;
        _2304 = (((cbLight._m0[_2462].z * 0.3183098733425140380859375) * _2480) * _2481) + _2242;
    }
    uint _2307 = _2060 + 8u;
    float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2060].w)) * _617) * 0.949999988079071044921875);
    float _2321 = _2320 * _2320;
    float _2322 = cbLight._m0[_2060].x + _694;
    float _2323 = cbLight._m0[_2060].y + _695;
    float _2324 = cbLight._m0[_2060].z + _696;
    float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
    float _2329 = _2328 * _2322;
    float _2330 = _2328 * _2323;
    float _2331 = _2328 * _2324;
    float _2332 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2060].xyz));
    float _4331 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _4342 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _2336 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2337 = dot(vec3(_614, _615, _616), vec3(_2329, _2330, _2331));
    float _4353 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2341 = dot(vec3(cbLight._m0[_2060].xyz), vec3(_2329, _2330, _2331));
    float _4364 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2345 = _2321 * _2321;
    float _2349 = ((_2340 * _2340) * (_2345 + (-1.0))) + 1.0;
    float _2360 = (exp2(log2(1.0 - (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2361 = 1.0 - _2321;
    float _2372 = (0.5 / (((_2336 * ((_2335 * _2361) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2361) + _2321) * _2335))) * _2335;
    float _4375 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2374 = (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2345 / ((_2349 * _2349) * 3.141590118408203125));
    uint _2388 = _2060 + 9u;
    float _2399 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2100].w)) * _617) * 0.949999988079071044921875);
    float _2400 = _2399 * _2399;
    float _2401 = cbLight._m0[_2100].x + _694;
    float _2402 = cbLight._m0[_2100].y + _695;
    float _2403 = cbLight._m0[_2100].z + _696;
    float _2407 = inversesqrt(dot(vec3(_2401, _2402, _2403), vec3(_2401, _2402, _2403)));
    float _2408 = _2407 * _2401;
    float _2409 = _2407 * _2402;
    float _2410 = _2407 * _2403;
    float _2411 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2100].xyz));
    float _4386 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2415 = dot(vec3(_614, _615, _616), vec3(_2408, _2409, _2410));
    float _4397 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2418 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2419 = dot(vec3(cbLight._m0[_2100].xyz), vec3(_2408, _2409, _2410));
    float _4408 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2423 = _2400 * _2400;
    float _2427 = ((_2418 * _2418) * (_2423 + (-1.0))) + 1.0;
    float _2436 = (exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2437 = 1.0 - _2400;
    float _2447 = (0.5 / (((_2336 * ((_2414 * _2437) + _2400)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2437) + _2400) * _2414))) * _2414;
    float _4419 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2423 / ((_2427 * _2427) * 3.141590118408203125));
    float _2459 = (((_2436 * cbLight._m0[_2388].x) * _2449) * _2083) + ((((cbLight._m0[_2307].x * _2049) * _2360) * _2374) * _2096);
    float _2460 = (((_2436 * cbLight._m0[_2388].y) * _2449) * _2083) + ((((cbLight._m0[_2307].y * _2051) * _2360) * _2374) * _2096);
    float _2461 = (((_2436 * cbLight._m0[_2388].z) * _2449) * _2083) + ((((cbLight._m0[_2307].z * _2053) * _2360) * _2374) * _2096);
    float _2517;
    float _2519;
    float _2521;
    if (_2136)
    {
        _2517 = _2459;
        _2519 = _2460;
        _2521 = _2461;
    }
    else
    {
        uint _2523 = _2060 + 2u;
        uint _2527 = _2060 + 10u;
        float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2523].w)) * _617) * 0.949999988079071044921875);
        float _2542 = _2541 * _2541;
        float _2543 = cbLight._m0[_2523].x + _694;
        float _2544 = cbLight._m0[_2523].y + _695;
        float _2545 = cbLight._m0[_2523].z + _696;
        float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
        float _2550 = _2549 * _2543;
        float _2551 = _2549 * _2544;
        float _2552 = _2549 * _2545;
        float _2553 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2523].xyz));
        float _4430 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2557 = dot(vec3(_614, _615, _616), vec3(_2550, _2551, _2552));
        float _4441 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2561 = dot(vec3(cbLight._m0[_2523].xyz), vec3(_2550, _2551, _2552));
        float _4452 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2565 = _2542 * _2542;
        float _2569 = ((_2560 * _2560) * (_2565 + (-1.0))) + 1.0;
        float _2578 = (exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2579 = 1.0 - _2542;
        float _2589 = (0.5 / (((_2336 * ((_2556 * _2579) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2579) + _2542) * _2556))) * _2556;
        float _4463 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2591 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2565 / ((_2569 * _2569) * 3.141590118408203125));
        float _2592 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
        _2517 = (((_2578 * cbLight._m0[_2527].x) * _2591) * _2592) + _2459;
        _2519 = (((_2578 * cbLight._m0[_2527].y) * _2591) * _2592) + _2460;
        _2521 = (((_2578 * cbLight._m0[_2527].z) * _2591) * _2592) + _2461;
    }
    float _2623;
    float _2625;
    float _2627;
    if (_2245)
    {
        _2623 = _2517;
        _2625 = _2519;
        _2627 = _2521;
    }
    else
    {
        uint _2634 = _2060 + 3u;
        uint _2638 = _2060 + 11u;
        float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2634].w)) * _617) * 0.949999988079071044921875);
        float _2653 = _2652 * _2652;
        float _2654 = cbLight._m0[_2634].x + _694;
        float _2655 = cbLight._m0[_2634].y + _695;
        float _2656 = cbLight._m0[_2634].z + _696;
        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
        float _2661 = _2660 * _2654;
        float _2662 = _2660 * _2655;
        float _2663 = _2660 * _2656;
        float _2664 = dot(vec3(_614, _615, _616), vec3(cbLight._m0[_2634].xyz));
        float _4479 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2668 = dot(vec3(_614, _615, _616), vec3(_2661, _2662, _2663));
        float _4490 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2672 = dot(vec3(cbLight._m0[_2634].xyz), vec3(_2661, _2662, _2663));
        float _4501 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2676 = _2653 * _2653;
        float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
        float _2689 = (exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2690 = 1.0 - _2653;
        float _2700 = (0.5 / (((_2336 * ((_2667 * _2690) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2690) + _2653) * _2667))) * _2667;
        float _4512 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        float _2702 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
        float _2703 = isnan(1.0) ? _2076 : (isnan(_2076) ? 1.0 : min(_2076, 1.0));
        _2623 = (((_2689 * cbLight._m0[_2638].x) * _2702) * _2703) + _2517;
        _2625 = (((_2689 * cbLight._m0[_2638].y) * _2702) * _2703) + _2519;
        _2627 = (((_2689 * cbLight._m0[_2638].z) * _2702) * _2703) + _2521;
    }
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    float _2779;
    if (_2058.y == 0u)
    {
        uvec4 _2724 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2725 = _2724.x;
        uint _2736 = uint((float(_2724.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _2725))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _2725)));
        float _2746 = (log2(_1836 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2747 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        uint _2750 = uint(isnan(14.0) ? _2747 : (isnan(_2747) ? 14.0 : min(_2747, 14.0)));
        uvec4 _2755 = texelFetch(g_lightClusterGridBuffer, int(((_2750 << 2u) + (_2736 << 6u)) >> 2u));
        uint _2756 = _2755.x;
        uint _2757 = _2724.z;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        if (((((1u << ((_2757 >> 4u) & 15u)) + 4294967295u) & _2756) == 0u) || ((_2757 & 240u) == 0u))
        {
            _2836 = 0.0;
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
        }
        else
        {
            float _2837;
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            uint _2987 = 0u;
            uint _2996;
            bool _2997;
            for (;;)
            {
                _2996 = texelFetch(g_lightClassification, int((((_2750 << 5u) + (_2736 << 9u)) + (_2987 << 2u)) >> 2u)).x;
                _2997 = _2996 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2997)
                {
                    frontier_phi_66_pred = _2986;
                    frontier_phi_66_pred_1 = _2985;
                    frontier_phi_66_pred_2 = _2984;
                    frontier_phi_66_pred_3 = _2983;
                    frontier_phi_66_pred_4 = _2982;
                    frontier_phi_66_pred_5 = _2981;
                }
                else
                {
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    uint _3111;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2985;
                    _3110 = _2986;
                    _3111 = _2996;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    for (;;)
                    {
                        uint _3115 = uint(findLSB(_3111)) + (_2987 << 5u);
                        uint _3112 = (_3111 + 4294967295u) & _3111;
                        uint _3117 = _3115 * 48u;
                        vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 3u)).x));
                        uint _3137 = (_3115 * 48u) + 4u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3156 = (_3115 * 48u) + 8u;
                        vec3 _3167 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x));
                        float _3171 = _3131.x - _1834;
                        float _3172 = _3131.y - _1835;
                        float _3173 = _3131.z - _1836;
                        float _3174 = dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173));
                        float _3177 = inversesqrt(_3174);
                        float _3178 = _3177 * _3171;
                        float _3179 = _3177 * _3172;
                        float _3180 = _3177 * _3173;
                        float _3181 = dot(vec3(_721, _724, _727), vec3(_3178, _3179, _3180));
                        float _3186 = 1.0 - (_3174 * _3131.w);
                        float _4538 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                        float _3187 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3188 = sqrt(_3174) * _3150.w;
                        float _3191 = 1.39999997615814208984375 / (_3188 + 1.39999997615814208984375);
                        float _3192 = _3191 * _3191;
                        float _3195 = ((1.0 - _3192) * _3181) + _3192;
                        float _3198 = _3188 * _3188;
                        float _3202 = ((isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0))) * _3187) / ((_3198 * 0.699999988079071044921875) + 1.0);
                        float _3206 = (-0.0) - _1834;
                        float _3207 = (-0.0) - _1835;
                        float _3208 = (-0.0) - _1836;
                        float _3212 = inversesqrt(dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208)));
                        float _3213 = _3212 * _3206;
                        float _3214 = _3212 * _3207;
                        float _3215 = _3212 * _3208;
                        float _3222 = exp2(log2(1.0 / ((_3198 * 3.5) + 5.0)) * 0.25);
                        float _3223 = 1.0 - _781;
                        float _3230 = sqrt(1.0 - ((1.0 - (_3223 * _3223)) * (1.0 - (_3222 * _3222))));
                        float _3231 = _3230 * _3230;
                        float _3232 = _3231 * _3231;
                        float _3233 = _3213 + _3178;
                        float _3234 = _3214 + _3179;
                        float _3235 = _3215 + _3180;
                        float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                        float _3243 = dot(vec3(_721, _724, _727), vec3(_3213, _3214, _3215));
                        float _4554 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3246 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3247 = dot(vec3(_721, _724, _727), vec3(_3239 * _3233, _3239 * _3234, _3239 * _3235));
                        float _4565 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3250 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3254 = ((_3250 * _3250) * (_3232 + (-1.0))) + 1.0;
                        float _3255 = _3191 * _3231;
                        float _3256 = _3255 * _3255;
                        float _3259 = ((1.0 - _3256) * _3181) + _3256;
                        float _4576 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3260 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3261 = 1.0 - _3231;
                        float _3271 = (0.5 / (((_3260 * ((_3246 * _3261) + _3231)) + 9.9999999392252902907785028219223e-09) + (((_3260 * _3261) + _3231) * _3246))) * _3260;
                        float _4587 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3282 = (((_3232 * 3.1415927410125732421875) * (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) / ((_3254 * _3254) * ((_3198 * 2.1991131305694580078125) + 3.141590118408203125))) * _3187;
                        _3040 = (_3202 * _3150.x) + _3108;
                        _3041 = (_3202 * _3150.y) + _3109;
                        _3042 = (_3202 * _3150.z) + _3110;
                        _3037 = (_3282 * _3167.x) + _3105;
                        _3038 = (_3282 * _3167.y) + _3106;
                        _3039 = (_3282 * _3167.z) + _3107;
                        if (_3112 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3041;
                            _3110 = _3042;
                            _3111 = _3112;
                        }
                    }
                    frontier_phi_66_pred = _3042;
                    frontier_phi_66_pred_1 = _3041;
                    frontier_phi_66_pred_2 = _3040;
                    frontier_phi_66_pred_3 = _3039;
                    frontier_phi_66_pred_4 = _3038;
                    frontier_phi_66_pred_5 = _3037;
                }
                _2847 = frontier_phi_66_pred;
                _2845 = frontier_phi_66_pred_1;
                _2843 = frontier_phi_66_pred_2;
                _2841 = frontier_phi_66_pred_3;
                _2839 = frontier_phi_66_pred_4;
                _2837 = frontier_phi_66_pred_5;
                uint _2988 = _2987 + 1u;
                if (_2988 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2981 = _2837;
                    _2982 = _2839;
                    _2983 = _2841;
                    _2984 = _2843;
                    _2985 = _2845;
                    _2986 = _2847;
                    _2987 = _2988;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2836 = _2837;
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
        }
        uvec4 _2850 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2851 = _2850.z;
        uint _2853 = (_2851 >> 8u) & 15u;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        if (((4294967295u << _2853) & _2756) == 0u)
        {
            _2949 = _2836;
            _2951 = _2838;
            _2953 = _2840;
            _2955 = _2842;
            _2957 = _2844;
            _2959 = _2846;
        }
        else
        {
            float _2974 = inversesqrt(dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836)));
            float _2975 = _2974 * _1834;
            float _2976 = _2974 * _1835;
            float _2977 = _2974 * _1836;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2853 < ((_2851 >> 12u) & 15u))
            {
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _3088 = _2836;
                float _3089 = _2838;
                float _3090 = _2840;
                float _3091 = _2842;
                float _3092 = _2844;
                float _3093 = _2846;
                uint _3094 = _2853;
                uint _3103;
                bool _3104;
                for (;;)
                {
                    _3103 = texelFetch(g_lightClassification, int((((_2750 << 5u) + (_2736 << 9u)) + (_3094 << 2u)) >> 2u)).x;
                    _3104 = _3103 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3104)
                    {
                        frontier_phi_72_pred = _3093;
                        frontier_phi_72_pred_1 = _3092;
                        frontier_phi_72_pred_2 = _3091;
                        frontier_phi_72_pred_3 = _3090;
                        frontier_phi_72_pred_4 = _3089;
                        frontier_phi_72_pred_5 = _3088;
                    }
                    else
                    {
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3300 = _3088;
                        float _3301 = _3089;
                        float _3302 = _3090;
                        float _3303 = _3091;
                        float _3304 = _3092;
                        float _3305 = _3093;
                        uint _3306 = _3103;
                        uint _3307;
                        vec4 _3332;
                        float _3333;
                        vec4 _3348;
                        vec3 _3360;
                        vec4 _3375;
                        vec4 _3391;
                        float _3437;
                        bool _3438;
                        for (;;)
                        {
                            uint _3317 = ((_3094 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3306));
                            _3307 = (_3306 + 4294967295u) & _3306;
                            uint _3319 = _3317 * 40u;
                            _3332 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3319)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3319 + 3u)).x));
                            _3333 = _3332.w;
                            uint _3335 = (_3317 * 40u) + 4u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3317 * 40u) + 8u;
                            _3360 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x));
                            uint _3362 = (_3317 * 40u) + 16u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3378 = (_3317 * 40u) + 20u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3393 = (_3317 * 40u) + 24u;
                            vec4 _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3412 = (_3317 * 40u) + 28u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            _3437 = fma(_1836, _3425.z, fma(_1835, _3425.y, _3425.x * _1834)) + _3425.w;
                            _3438 = !((fma(_1836, _3406.z, fma(_1835, _3406.y, _3406.x * _1834)) + _3406.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3438)
                            {
                                float _3465 = _3332.x - _1834;
                                float _3466 = _3332.y - _1835;
                                float _3467 = _3332.z - _1836;
                                float _3468 = dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467));
                                float _3471 = inversesqrt(_3468);
                                float _3472 = _3471 * _3465;
                                float _3473 = _3471 * _3466;
                                float _3474 = _3471 * _3467;
                                float _3478 = 1.0 - (_3468 / (_3333 * _3333));
                                float _4598 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3483 = sqrt(_3468) * _3348.w;
                                float _3485 = 1.39999997615814208984375 / (_3483 + 1.39999997615814208984375);
                                float _3486 = _3485 * _3485;
                                float _3489 = ((1.0 - _3486) * dot(vec3(_3472, _3473, _3474), vec3(_721, _724, _727))) + _3486;
                                float _3492 = _3483 * _3483;
                                float _3496 = (fma(_1836, _3375.z, fma(_1835, _3375.y, _3375.x * _1834)) + _3375.w) / _3437;
                                float _3497 = (fma(_1836, _3391.z, fma(_1835, _3391.y, _3391.x * _1834)) + _3391.w) / _3437;
                                float _3501 = 1.0 - dot(vec2(_3496, _3497), vec2(_3496, _3497));
                                float _4614 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3502 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3503 = _3502 * (((isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0))) * _3479) / ((_3492 * 0.699999988079071044921875) + 1.0));
                                float _3515 = exp2(log2(1.0 / ((_3492 * 3.5) + 5.0)) * 0.25);
                                float _3516 = 1.0 - _781;
                                float _3523 = sqrt(1.0 - ((1.0 - (_3516 * _3516)) * (1.0 - (_3515 * _3515))));
                                float _3524 = _3523 * _3523;
                                float _3525 = _3524 * _3524;
                                float _3526 = _3472 - _2975;
                                float _3527 = _3473 - _2976;
                                float _3528 = _3474 - _2977;
                                float _3532 = inversesqrt(dot(vec3(_3526, _3527, _3528), vec3(_3526, _3527, _3528)));
                                float _3536 = dot(vec3(_721, _724, _727), vec3((-0.0) - _2975, (-0.0) - _2976, (-0.0) - _2977));
                                float _4625 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3540 = dot(vec3(_721, _724, _727), vec3(_3532 * _3526, _3532 * _3527, _3532 * _3528));
                                float _4636 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3543 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3547 = ((_3543 * _3543) * (_3525 + (-1.0))) + 1.0;
                                float _3548 = _3485 * _3524;
                                float _3549 = _3548 * _3548;
                                float _3555 = ((1.0 - _3549) * dot(vec3(_721, _724, _727), vec3(_3472, _3473, _3474))) + _3549;
                                float _4647 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3557 = 1.0 - _3524;
                                float _3567 = (0.5 / (((_3556 * ((_3539 * _3557) + _3524)) + 9.9999999392252902907785028219223e-09) + (((_3556 * _3557) + _3524) * _3539))) * _3556;
                                float _4658 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3577 = (_3502 * _3479) * (((_3525 * 3.1415927410125732421875) * (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) / ((_3547 * _3547) * ((_3492 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3503 * _3348.y;
                                frontier_phi_78_pred_1 = _3503 * _3348.x;
                                frontier_phi_78_pred_2 = _3577 * _3360.z;
                                frontier_phi_78_pred_3 = _3577 * _3360.y;
                                frontier_phi_78_pred_4 = _3577 * _3360.x;
                                frontier_phi_78_pred_5 = _3503 * _3348.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3585 = frontier_phi_78_pred;
                            _3584 = frontier_phi_78_pred_1;
                            _3583 = frontier_phi_78_pred_2;
                            _3582 = frontier_phi_78_pred_3;
                            _3581 = frontier_phi_78_pred_4;
                            _3586 = frontier_phi_78_pred_5;
                            _3290 = _3584 + _3303;
                            _3291 = _3585 + _3304;
                            _3292 = _3586 + _3305;
                            _3287 = _3581 + _3300;
                            _3288 = _3582 + _3301;
                            _3289 = _3583 + _3302;
                            if (_3307 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3307;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3292;
                        frontier_phi_72_pred_1 = _3291;
                        frontier_phi_72_pred_2 = _3290;
                        frontier_phi_72_pred_3 = _3289;
                        frontier_phi_72_pred_4 = _3288;
                        frontier_phi_72_pred_5 = _3287;
                    }
                    _2960 = frontier_phi_72_pred;
                    _2958 = frontier_phi_72_pred_1;
                    _2956 = frontier_phi_72_pred_2;
                    _2954 = frontier_phi_72_pred_3;
                    _2952 = frontier_phi_72_pred_4;
                    _2950 = frontier_phi_72_pred_5;
                    uint _3095 = _3094 + 1u;
                    if (_3095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3088 = _2950;
                        _3089 = _2952;
                        _3090 = _2954;
                        _3091 = _2956;
                        _3092 = _2958;
                        _3093 = _2960;
                        _3094 = _3095;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2960;
                frontier_phi_60_61_ladder_1 = _2958;
                frontier_phi_60_61_ladder_2 = _2954;
                frontier_phi_60_61_ladder_3 = _2952;
                frontier_phi_60_61_ladder_4 = _2950;
                frontier_phi_60_61_ladder_5 = _2956;
            }
            else
            {
                frontier_phi_60_61_ladder = _2846;
                frontier_phi_60_61_ladder_1 = _2844;
                frontier_phi_60_61_ladder_2 = _2840;
                frontier_phi_60_61_ladder_3 = _2838;
                frontier_phi_60_61_ladder_4 = _2836;
                frontier_phi_60_61_ladder_5 = _2842;
            }
            _2949 = frontier_phi_60_61_ladder_4;
            _2951 = frontier_phi_60_61_ladder_3;
            _2953 = frontier_phi_60_61_ladder_2;
            _2955 = frontier_phi_60_61_ladder_5;
            _2957 = frontier_phi_60_61_ladder_1;
            _2959 = frontier_phi_60_61_ladder;
        }
        float _2964 = isnan(1.0) ? _765 : (isnan(_765) ? 1.0 : min(_765, 1.0));
        _2769 = (_2964 * _2955) + _2300;
        _2771 = (_2964 * _2957) + _2302;
        _2773 = (_2964 * _2959) + _2304;
        _2775 = ((_2949 * 0.039999999105930328369140625) * _2964) + _2623;
        _2777 = ((_2951 * 0.039999999105930328369140625) * _2964) + _2625;
        _2779 = ((_2953 * 0.039999999105930328369140625) * _2964) + _2627;
    }
    else
    {
        _2769 = _2300;
        _2771 = _2302;
        _2773 = _2304;
        _2775 = _2623;
        _2777 = _2625;
        _2779 = _2627;
    }
    float _4674 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4685 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4696 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    uint _2799 = _232 + 6u;
    float _2807 = _702 / cbSceneParam._m0[86u].x;
    float _2808 = _703 / cbSceneParam._m0[86u].y;
    vec4 _2822 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, (log2((isnan(cbSceneParam._m0[77u].w) ? _635 : (isnan(_635) ? cbSceneParam._m0[77u].w : min(_635, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2824 = _2822.x;
    float _2825 = _2822.y;
    float _2826 = _2822.z;
    float _2827 = _2822.w;
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    if (_635 > cbSceneParam._m0[78u].w)
    {
        float _2861 = isnan(_635) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _635 : min(cbSceneParam._m0[80u].w, _635));
        float _2862 = _2861 / _635;
        float _2873 = _2862 * _687;
        float _2874 = _688 * _2862;
        float _2875 = (-0.0) - _2874;
        float _2877 = _2862 * _689;
        float _2879 = (cbSceneParam._m0[77u].w * _2875) / _2861;
        float _2880 = _2879 + cbSceneParam._m0[79u].w;
        float _2881 = cbSceneParam._m0[79u].w - _2874;
        float _2887 = sqrt(((_2873 * _2873) + (_2874 * _2874)) + (_2877 * _2877));
        float _2890 = (1.0 - (cbSceneParam._m0[77u].w / _2861)) * _2887;
        float _2895 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2897 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3050;
        if (abs((_2875 - _2879) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3050 = ((((_2880 > 0.0) ? exp2(_2895 * _2880) : (2.0 - exp2(_2897 * _2880))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2890;
        }
        else
        {
            float _3010 = 1.0 / cbSceneParam._m0[80u].x;
            float _3011 = isnan(_2881) ? _2880 : (isnan(_2880) ? _2881 : max(_2880, _2881));
            float _3012 = isnan(_2881) ? _2880 : (isnan(_2880) ? _2881 : min(_2880, _2881));
            float _3021 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : min(_3011, 0.0));
            float _3022 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : min(_3012, 0.0));
            _3050 = ((abs(_2887 / _2875) * cbSceneParam._m0[80u].y) * ((((_3021 - _3022) * 2.0) - ((exp2(_2895 * (isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0)))) - exp2(_2895 * (isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))))) * _3010)) - ((exp2(_2897 * _3021) - exp2(_2897 * _3022)) * _3010))) + (_2890 * cbSceneParam._m0[80u].z);
        }
        vec4 _3052 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2807, _2808, 1.0), 0.0);
        float _3061 = exp2((_3050 * (-1.44269502162933349609375)) * (1.0 - _3052.w));
        float _3062 = log2(_3061);
        float _3078 = log2(_2827);
        _2899 = (exp2(_3078 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].x)) * _3052.x) / cbSceneParam._m0[78u].x)) + _2824;
        _2901 = (exp2(_3078 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].y)) * _3052.y) / cbSceneParam._m0[78u].y)) + _2825;
        _2903 = (exp2(_3078 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3062 * cbSceneParam._m0[78u].z)) * _3052.z) / cbSceneParam._m0[78u].z)) + _2826;
        _2905 = _3061 * _2827;
    }
    else
    {
        _2899 = _2824;
        _2901 = _2825;
        _2903 = _2826;
        _2905 = _2827;
    }
    float _2917 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2918 = _2917 == 3.0;
    float _2919 = log2(_2905);
    float _2926 = exp2(_2919 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2769 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _765))) + ((_2775 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1570)) * cbPerFrame._m0[3u].x));
    float _2927 = exp2(_2919 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2771 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _765))) + ((_2777 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1570)) * cbPerFrame._m0[3u].x));
    float _2928 = exp2(_2919 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2773 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _765))) + ((_2779 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1570)) * cbPerFrame._m0[3u].x));
    float _2937 = (_2917 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2937 * (_2918 ? _2926 : (_2926 + (cbSceneParam._m0[72u].w * _2899)));
    SV_Target.y = _2937 * (_2918 ? _2927 : (_2927 + (cbSceneParam._m0[72u].w * _2901)));
    SV_Target.z = _2937 * (_2918 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2903)));
    SV_Target.w = cbInstanceData._m0[_2799].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2799].w;
}


