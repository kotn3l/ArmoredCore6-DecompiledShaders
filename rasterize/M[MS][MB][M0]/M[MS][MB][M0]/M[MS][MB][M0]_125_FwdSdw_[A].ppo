#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1186;
float _3827;
float _3828;
float _3829;
float _3830;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _291 = _285.x * cbMtdParam._m0[11u].x;
    float _292 = _285.y * cbMtdParam._m0[11u].y;
    float _293 = _285.z * cbMtdParam._m0[11u].z;
    vec4 _312 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _350 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _352 = _350.x;
    float _362 = dot(vec4(_352, _350.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _379 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_352 - _362) * cbMtdParam._m0[24u].x) + _362) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3839 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _387 = (_380 * ((_312.x * cbMtdParam._m0[12u].x) - _291)) + _291;
    float _388 = (_380 * ((_312.y * cbMtdParam._m0[12u].y) - _292)) + _292;
    float _389 = (_380 * ((_312.z * cbMtdParam._m0[12u].z) - _293)) + _293;
    vec4 _408 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _428 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _264) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _265) + cbTextureTilingScale._m0[20u].w));
    vec4 _453 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _470 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _472 = _470.x;
    float _473 = _470.y;
    float _474 = _470.z;
    float _483 = ((_453.z - _474) * _380) + _474;
    float _486 = ((((_453.x - _472) * _380) + _472) * 2.0) + (-1.0);
    float _487 = ((((_453.y - _473) * _380) + _473) * 2.0) + (-1.0);
    float _488 = dot(vec2(_486, _487), vec2(_486, _487));
    float _3850 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _493 = sqrt(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))));
    vec4 _506 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _524 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _526 = _524.x;
    float _527 = 1.0 - _526;
    float _540 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_526 - _527) * cbMtdParam._m0[24u].z) + _527) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3861 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _548 = (_541 * ((_408.x * cbMtdParam._m0[18u].x) - _387)) + _387;
    float _549 = (_541 * ((_408.y * cbMtdParam._m0[18u].y) - _388)) + _388;
    float _550 = (_541 * ((_408.z * cbMtdParam._m0[18u].z) - _389)) + _389;
    float _555 = (((_428.z - _483) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _483;
    vec4 _568 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _575 = (_568.x * 2.0) + (-1.0);
    float _576 = (_568.y * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _3872 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _585 = (_541 * (_568.z - _555)) + _555;
    float _590 = _486 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_428.x * 2.0) + (-1.0)));
    float _591 = _487 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_428.y * 2.0) + (-1.0)));
    float _603 = (((_575 - _590) + (cbMtdParam._m0[21u].x * _590)) * _541) + _590;
    float _604 = (((_576 - _591) + (cbMtdParam._m0[21u].x * _591)) * _541) + _591;
    float _605 = (_541 * (sqrt(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) - _493)) + _493;
    float _610 = cbMtdParam._m0[22u].x + _506.w;
    float _613 = fma(_605, _231 * NORMAL.x, fma(_604, _238 * TANGENT.x, (_224 * _216) * _603));
    float _616 = fma(_605, _231 * NORMAL.y, fma(_604, _238 * TANGENT.y, (_224 * _217) * _603));
    float _619 = fma(_605, _231 * NORMAL.z, fma(_604, _238 * TANGENT.z, (_224 * _218) * _603));
    float _623 = inversesqrt(dot(vec3(_613, _616, _619), vec3(_613, _616, _619)));
    float _624 = _623 * _613;
    float _625 = _623 * _616;
    float _626 = _623 * _619;
    float _3883 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _627 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3905 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _3916 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _3927 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _645 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _697 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _687);
    float _698 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _687);
    float _699 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _687);
    float _703 = inversesqrt(dot(vec3(_697, _698, _699), vec3(_697, _698, _699)));
    float _704 = _697 * _703;
    float _705 = _698 * _703;
    float _706 = _699 * _703;
    vec4 _711 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _713 = _711.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _867 = sqrt(((_697 * _697) + (_698 * _698)) + (_699 * _699));
        float _873 = (cbMatDynParam._m0[5u].x * _867) + cbMatDynParam._m0[5u].y;
        float _3938 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _878 = (cbMatDynParam._m0[5u].z * _867) + cbMatDynParam._m0[5u].w;
        float _3949 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) - _874)) + _874) < ((_713 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _724 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _725 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _743 = fma(_626, cbSceneParam._m0[5u].z, fma(_625, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _624));
    float _746 = fma(_626, cbSceneParam._m0[6u].z, fma(_625, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _624));
    float _749 = fma(_626, cbSceneParam._m0[7u].z, fma(_625, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _624));
    uint _762 = _244 + 9u;
    uint _763 = _762 + uint(cbMatDynParam._m0[0u].w);
    float _769 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_763].x;
    float _770 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_763].y;
    float _771 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * cbInstanceData._m0[_763].z;
    float _3960 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _772 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    vec4 _783 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _724, cbSceneParam._m0[86u].y * _725));
    float _787 = ((isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * TEXCOORD_5.w) * _783.x;
    float _788 = dot(vec3(_624, _625, _626), vec3(_704, _705, _706));
    float _791 = _788 * 2.0;
    float _795 = (_791 * _624) - _704;
    float _796 = (_791 * _625) - _705;
    float _797 = (_791 * _626) - _706;
    float _801 = abs(dot(vec3(_704, _705, _706), vec3(_624, _625, _626)));
    float _3993 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _803 = sqrt(_627);
    float _816 = exp2((_803 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_803 * 3.0));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1185;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _910 = fma(_856, cbModelParam._m0[26u].z, fma(_852, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _848));
        float _914 = fma(_856, cbModelParam._m0[27u].z, fma(_852, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _848));
        float _918 = fma(_856, cbModelParam._m0[28u].z, fma(_852, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _848));
        float _943 = _848 + _624;
        float _944 = _852 + _625;
        float _945 = _856 + _626;
        float _955 = fma(_945, cbModelParam._m0[26u].z, fma(_944, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _943)) - _910;
        float _956 = fma(_945, cbModelParam._m0[27u].z, fma(_944, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _943)) - _914;
        float _957 = fma(_945, cbModelParam._m0[28u].z, fma(_944, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _943)) - _918;
        float _961 = inversesqrt(dot(vec3(_955, _956, _957), vec3(_955, _956, _957)));
        float _974 = ((_961 * _955) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_910 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_961 * _956) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_914 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_961 * _957) / cbModelParam._m0[34u].z) + ((((((_918 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _993 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_974, _975, _976), 0.0);
        float _1013 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_979.x + (-0.5));
        float _1015 = _1013 * (_979.y + (-0.5));
        float _1016 = _1013 * (_979.z + (-0.5));
        float _1023 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_986.x + (-0.5));
        float _1025 = _1023 * (_986.y + (-0.5));
        float _1026 = _1023 * (_986.z + (-0.5));
        float _1033 = exp2((_993.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_993.x + (-0.5));
        float _1035 = _1033 * (_993.y + (-0.5));
        float _1036 = _1033 * (_993.z + (-0.5));
        float _1043 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1000.x + (-0.5));
        float _1045 = _1043 * (_1000.y + (-0.5));
        float _1046 = _1043 * (_1000.z + (-0.5));
        float _1047 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = _1014 * 0.5;
        float _1051 = _1024 * 0.5;
        float _1052 = _1034 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1067 = (dot(vec3(_624, _625, _626), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1077 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1047 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _4041 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1079 + 1.0))) + _1084) * _1047;
        float _1094 = _1015 * 0.5;
        float _1095 = _1025 * 0.5;
        float _1096 = _1035 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1110 = (dot(vec3(_624, _625, _626), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1119 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1121 = _1120 * 2.0;
        float _1125 = (1.0 - _1120) / (_1120 + 1.0);
        float _4074 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1135 = ((((1.0 - _1126) * (_1121 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1121 + 1.0))) + _1126) * _1048;
        float _1136 = _1016 * 0.5;
        float _1137 = _1026 * 0.5;
        float _1138 = _1036 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1152 = (dot(vec3(_624, _625, _626), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1161 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _4107 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1163 + 1.0))) + _1168) * _1049;
        _1185 = _1016;
        _1187 = _1015;
        _1188 = _1014;
        _1189 = _1026;
        _1190 = _1025;
        _1191 = _1024;
        _1192 = _1036;
        _1193 = _1035;
        _1194 = _1034;
        _1195 = _1049;
        _1196 = _1048;
        _1197 = _1047;
        _1198 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0)));
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
    }
    else
    {
        _1185 = _1186;
        _1187 = _1186;
        _1188 = _1186;
        _1189 = _1186;
        _1190 = _1186;
        _1191 = _1186;
        _1192 = _1186;
        _1193 = _1186;
        _1194 = _1186;
        _1195 = _1186;
        _1196 = _1186;
        _1197 = _1186;
        _1198 = 0.0;
        _1199 = 0.0;
        _1200 = 0.0;
    }
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1228 = fma(_856, cbModelParam._m0[30u].z, fma(_852, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _848));
        float _1232 = fma(_856, cbModelParam._m0[31u].z, fma(_852, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _848));
        float _1236 = fma(_856, cbModelParam._m0[32u].z, fma(_852, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _848));
        float _1259 = _848 + _624;
        float _1260 = _852 + _625;
        float _1261 = _856 + _626;
        float _1271 = fma(_1261, cbModelParam._m0[30u].z, fma(_1260, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1259)) - _1228;
        float _1272 = fma(_1261, cbModelParam._m0[31u].z, fma(_1260, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1259)) - _1232;
        float _1273 = fma(_1261, cbModelParam._m0[32u].z, fma(_1260, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1259)) - _1236;
        float _1277 = inversesqrt(dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273)));
        float _1290 = ((_1277 * _1271) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1228 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1277 * _1272) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1232 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1277 * _1273) / cbModelParam._m0[35u].z) + ((((((_1236 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1290, _1291, _1292), 0.0);
        float _1327 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1294.x + (-0.5));
        float _1329 = _1327 * (_1294.y + (-0.5));
        float _1330 = _1327 * (_1294.z + (-0.5));
        float _1337 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1301.x + (-0.5));
        float _1339 = _1337 * (_1301.y + (-0.5));
        float _1340 = _1337 * (_1301.z + (-0.5));
        float _1347 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1308.x + (-0.5));
        float _1349 = _1347 * (_1308.y + (-0.5));
        float _1350 = _1347 * (_1308.z + (-0.5));
        float _1357 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1315.x + (-0.5));
        float _1359 = _1357 * (_1315.y + (-0.5));
        float _1360 = _1357 * (_1315.z + (-0.5));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = _1328 * 0.5;
        float _1365 = _1338 * 0.5;
        float _1366 = _1348 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1380 = (dot(vec3(_624, _625, _626), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1389 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1391 = _1390 * 2.0;
        float _1395 = (1.0 - _1390) / (_1390 + 1.0);
        float _4170 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1396 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1405 = ((((1.0 - _1396) * (_1391 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1391 + 1.0))) + _1396) * _1361;
        float _1406 = _1329 * 0.5;
        float _1407 = _1339 * 0.5;
        float _1408 = _1349 * 0.5;
        float _1409 = dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408));
        float _1414 = (_1409 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1409);
        float _1422 = (dot(vec3(_624, _625, _626), vec3(_1414 * _1406, _1414 * _1407, _1414 * _1408)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1431 = sqrt(((_1407 * _1407) + (_1406 * _1406)) + (_1408 * _1408)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1433 = _1432 * 2.0;
        float _1437 = (1.0 - _1432) / (_1432 + 1.0);
        float _4203 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1447 = ((((1.0 - _1438) * (_1433 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1433 + 1.0))) + _1438) * _1362;
        float _1448 = _1330 * 0.5;
        float _1449 = _1340 * 0.5;
        float _1450 = _1350 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_624, _625, _626), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _4236 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1475 + 1.0))) + _1480) * _1363;
        _1497 = _1330;
        _1498 = _1329;
        _1499 = _1328;
        _1500 = _1340;
        _1501 = _1339;
        _1502 = _1338;
        _1503 = _1350;
        _1504 = _1349;
        _1505 = _1348;
        _1506 = _1363;
        _1507 = _1362;
        _1508 = _1361;
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)));
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)));
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
    }
    else
    {
        _1497 = _1186;
        _1498 = _1186;
        _1499 = _1186;
        _1500 = _1186;
        _1501 = _1186;
        _1502 = _1186;
        _1503 = _1186;
        _1504 = _1186;
        _1505 = _1186;
        _1506 = _1186;
        _1507 = _1186;
        _1508 = _1186;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1198)) + _1198;
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1199)) + _1199;
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1200)) + _1200;
    float _1544 = fma(_1523, cbSceneParam._m0[89u].z, fma(_1522, cbSceneParam._m0[89u].y, _1521 * cbSceneParam._m0[89u].x));
    float _1547 = fma(_1523, cbSceneParam._m0[90u].z, fma(_1522, cbSceneParam._m0[90u].y, _1521 * cbSceneParam._m0[90u].x));
    float _1550 = fma(_1523, cbSceneParam._m0[91u].z, fma(_1522, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1521));
    float _1565 = _795 * 0.5;
    float _1566 = _796 * 0.5;
    float _1567 = _797 * 0.5;
    float _1568 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1571 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1574 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1608;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1581 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1185, _1189, _1192, _1195));
        float _1585 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1187, _1190, _1193, _1196));
        float _1589 = dot(vec4(_1565, _1566, _1567, 1.0), vec4(_1188, _1191, _1194, _1197));
        float _1596 = dot(vec4(cbModelParam._m0[39u]), vec4(_1565, _1566, _1567, 1.0));
        _1608 = dot(vec3(isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)), isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)), isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1608 = 1.0;
    }
    float _1619;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1610 = dot(vec4(cbModelParam._m0[40u]), vec4(_1565, _1566, _1567, 1.0));
        _1619 = dot(vec3(isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1610) ? 0.0 : (isnan(0.0) ? _1610 : max(0.0, _1610))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1619 = 1.0;
    }
    float _1623 = (_1619 * cbModelParam._m0[1u].x) + (_1608 * (1.0 - cbModelParam._m0[1u].x));
    float _1633 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _627);
    float _1634 = isnan(_1633) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1633 : min(cbModelParam._m0[25u].z, _1633));
    float _1714;
    float _1716;
    float _1718;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1681 = fma(_856, cbModelParam._m0[13u].z, fma(_852, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _848)) + cbModelParam._m0[13u].w;
        float _1685 = fma(_856, cbModelParam._m0[14u].z, fma(_852, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _848)) + cbModelParam._m0[14u].w;
        float _1689 = fma(_856, cbModelParam._m0[15u].z, fma(_852, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _848)) + cbModelParam._m0[15u].w;
        float _1692 = fma(_797, cbModelParam._m0[13u].z, fma(_796, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _795));
        float _1695 = fma(_797, cbModelParam._m0[14u].z, fma(_796, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _795));
        float _1698 = fma(_797, cbModelParam._m0[15u].z, fma(_796, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _795));
        float _1726;
        if (_1692 > 0.0)
        {
            _1726 = abs((1.0 - _1681) / _1692);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1681 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1726 = frontier_phi_17_15_ladder;
        }
        float _1895;
        if (_1695 > 0.0)
        {
            _1895 = abs((1.0 - _1685) / _1695);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1685 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1895 = frontier_phi_26_22_ladder;
        }
        float _2190;
        if (_1698 > 0.0)
        {
            _2190 = abs((1.0 - _1689) / _1698);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1689 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2190 = frontier_phi_38_33_ladder;
        }
        float _2192 = isnan(_1895) ? _1726 : (isnan(_1726) ? _1895 : min(_1726, _1895));
        float _2193 = isnan(_2190) ? _2192 : (isnan(_2192) ? _2190 : min(_2192, _2190));
        float _2197 = (_2193 * _1692) + _1681;
        float _2198 = (_2193 * _1695) + _1685;
        float _2199 = (_2193 * _1698) + _1689;
        float _2200 = _2193 * 9.9999997473787516355514526367188e-05;
        float _2202 = (-1.0) - _2200;
        float _2204 = _2200 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2199 > _2204) || ((_2199 < _2202) || ((_2198 > _2204) || ((_2198 < _2202) || ((_2197 < _2202) || (_2197 > _2204))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2344 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2199, cbModelParam._m0[9u].z, fma(_2198, cbModelParam._m0[9u].y, _2197 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2199, cbModelParam._m0[10u].z, fma(_2198, cbModelParam._m0[10u].y, _2197 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2199, cbModelParam._m0[11u].z, fma(_2198, cbModelParam._m0[11u].y, _2197 * cbModelParam._m0[11u].x))), _1634);
            frontier_phi_16_38_ladder = _2344.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2344.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2344.x * cbModelParam._m0[1u].y;
        }
        _1714 = frontier_phi_16_38_ladder_2;
        _1716 = frontier_phi_16_38_ladder_1;
        _1718 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1702 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_795, _796, _797), _1634);
        _1714 = _1702.x * cbModelParam._m0[1u].y;
        _1716 = _1702.y * cbModelParam._m0[1u].y;
        _1718 = _1702.z * cbModelParam._m0[1u].y;
    }
    float _1722 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _627);
    float _1723 = isnan(_1722) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1722 : min(cbModelParam._m0[25u].w, _1722));
    float _1812;
    float _1814;
    float _1816;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1776 = fma(_856, cbModelParam._m0[21u].z, fma(_852, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _848)) + cbModelParam._m0[21u].w;
        float _1780 = fma(_856, cbModelParam._m0[22u].z, fma(_852, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _848)) + cbModelParam._m0[22u].w;
        float _1784 = fma(_856, cbModelParam._m0[23u].z, fma(_852, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _848)) + cbModelParam._m0[23u].w;
        float _1787 = fma(_797, cbModelParam._m0[21u].z, fma(_796, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _795));
        float _1790 = fma(_797, cbModelParam._m0[22u].z, fma(_796, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _795));
        float _1793 = fma(_797, cbModelParam._m0[23u].z, fma(_796, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _795));
        float _1900;
        if (_1787 > 0.0)
        {
            _1900 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1900 = frontier_phi_28_24_ladder;
        }
        float _2217;
        if (_1790 > 0.0)
        {
            _2217 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2217 = frontier_phi_40_35_ladder;
        }
        float _2544;
        if (_1793 > 0.0)
        {
            _2544 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2544 = frontier_phi_50_47_ladder;
        }
        float _2546 = isnan(_2217) ? _1900 : (isnan(_1900) ? _2217 : min(_1900, _2217));
        float _2547 = isnan(_2544) ? _2546 : (isnan(_2546) ? _2544 : min(_2546, _2544));
        float _2551 = (_2547 * _1787) + _1776;
        float _2552 = (_2547 * _1790) + _1780;
        float _2553 = (_2547 * _1793) + _1784;
        float _2554 = _2547 * 9.9999997473787516355514526367188e-05;
        float _2555 = (-1.0) - _2554;
        float _2557 = _2554 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2553 > _2557) || ((_2553 < _2555) || ((_2552 > _2557) || ((_2552 < _2555) || ((_2551 < _2555) || (_2551 > _2557))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2671 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2553, cbModelParam._m0[17u].z, fma(_2552, cbModelParam._m0[17u].y, _2551 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2553, cbModelParam._m0[18u].z, fma(_2552, cbModelParam._m0[18u].y, _2551 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2553, cbModelParam._m0[19u].z, fma(_2552, cbModelParam._m0[19u].y, _2551 * cbModelParam._m0[19u].x))), _1723);
            frontier_phi_25_50_ladder = _2671.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2671.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2671.x * cbModelParam._m0[1u].z;
        }
        _1812 = frontier_phi_25_50_ladder_2;
        _1814 = frontier_phi_25_50_ladder_1;
        _1816 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_795, _796, _797), _1723);
        _1812 = _1796.x * cbModelParam._m0[1u].z;
        _1814 = _1796.y * cbModelParam._m0[1u].z;
        _1816 = _1796.z * cbModelParam._m0[1u].z;
    }
    float _1828 = ((((1.0 - _816) * ((_803 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_816 * _803)) * _787;
    float _1829 = _1828 * ((cbModelParam._m0[1u].w * (_1812 - _1714)) + _1714);
    float _1830 = _1828 * ((cbModelParam._m0[1u].w * (_1814 - _1716)) + _1716);
    float _1831 = _1828 * ((cbModelParam._m0[1u].w * (_1816 - _1718)) + _1718);
    float _1834 = fma(_1831, cbSceneParam._m0[89u].z, fma(_1830, cbSceneParam._m0[89u].y, _1829 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1831, cbSceneParam._m0[90u].z, fma(_1830, cbSceneParam._m0[90u].y, _1829 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1831, cbSceneParam._m0[91u].z, fma(_1830, cbSceneParam._m0[91u].y, _1829 * cbSceneParam._m0[91u].x));
    float _1874 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1878 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1882 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1886 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1887 = _1874 / _1886;
    float _1888 = _1878 / _1886;
    float _1889 = _1882 / _1886;
    float _2036;
    float _2037;
    float _2038;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1916 = ((uint(_1889 > cbSceneParam._m0[59u].y) + uint(_1889 > cbSceneParam._m0[59u].x)) + uint(_1889 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1917 = _1916 + 43u;
        uint _1925 = _1916 + 44u;
        uint _1933 = _1916 + 45u;
        uint _1941 = _1916 + 46u;
        float _1952 = fma(_1886, cbSceneParam._m0[_1917].w, fma(_1882, cbSceneParam._m0[_1917].z, fma(_1878, cbSceneParam._m0[_1917].y, _1874 * cbSceneParam._m0[_1917].x)));
        float _1956 = fma(_1886, cbSceneParam._m0[_1925].w, fma(_1882, cbSceneParam._m0[_1925].z, fma(_1878, cbSceneParam._m0[_1925].y, _1874 * cbSceneParam._m0[_1925].x)));
        float _1964 = fma(_1886, cbSceneParam._m0[_1941].w, fma(_1882, cbSceneParam._m0[_1941].z, fma(_1878, cbSceneParam._m0[_1941].y, _1874 * cbSceneParam._m0[_1941].x)));
        float _1969 = cbSceneParam._m0[33u].z * _1964;
        float _1971 = cbSceneParam._m0[33u].w * _1964;
        float _1974 = fma(_1886, cbSceneParam._m0[_1933].w, fma(_1882, cbSceneParam._m0[_1933].z, fma(_1878, cbSceneParam._m0[_1933].y, _1874 * cbSceneParam._m0[_1933].x))) / _1964;
        float _2022 = (cbSceneParam._m0[33u].x - sqrt(((_1888 * _1888) + (_1887 * _1887)) + (_1889 * _1889))) * cbSceneParam._m0[33u].y;
        float _4362 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2029 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1969 + _1952) / _1964, (_1971 + _1956) / _1964), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1971 + _1952) / _1964, (_1956 - _1969) / _1964), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1952 - _1969) / _1964, (_1956 - _1971) / _1964), _1974), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1952 - _1971) / _1964, (_1969 + _1956) / _1964), _1974), 0.0)).x), vec4(0.25)));
        _2036 = 1.0 - (_2029 * cbSceneParam._m0[34u].x);
        _2037 = 1.0 - (_2029 * cbSceneParam._m0[34u].y);
        _2038 = 1.0 - (_2029 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2036 = 1.0;
        _2037 = 1.0;
        _2038 = 1.0;
    }
    float _2102;
    float _2104;
    float _2106;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2090 = fma(_1886, cbSceneParam._m0[63u].w, fma(_1882, cbSceneParam._m0[63u].z, fma(_1878, cbSceneParam._m0[63u].y, _1874 * cbSceneParam._m0[63u].x)));
        float _2091 = fma(_1886, cbSceneParam._m0[60u].w, fma(_1882, cbSceneParam._m0[60u].z, fma(_1878, cbSceneParam._m0[60u].y, _1874 * cbSceneParam._m0[60u].x))) / _2090;
        float _2092 = fma(_1886, cbSceneParam._m0[61u].w, fma(_1882, cbSceneParam._m0[61u].z, fma(_1878, cbSceneParam._m0[61u].y, _1874 * cbSceneParam._m0[61u].x))) / _2090;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2091 >= cbSceneParam._m0[64u].x) && (_2092 >= cbSceneParam._m0[64u].y)) && (_2091 <= cbSceneParam._m0[64u].z)) && (_2092 <= cbSceneParam._m0[64u].w))
        {
            float _2230 = fma(_1886, cbSceneParam._m0[62u].w, fma(_1882, cbSceneParam._m0[62u].z, fma(_1878, cbSceneParam._m0[62u].y, _1874 * cbSceneParam._m0[62u].x))) / _2090;
            float _2234 = isnan(cbSceneParam._m0[41u].w) ? _2230 : (isnan(_2230) ? cbSceneParam._m0[41u].w : max(_2230, cbSceneParam._m0[41u].w));
            float _2277 = (cbSceneParam._m0[33u].x - sqrt(((_1888 * _1888) + (_1887 * _1887)) + (_1889 * _1889))) * cbSceneParam._m0[33u].y;
            float _4378 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
            float _2284 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2091, cbSceneParam._m0[33u].w + _2092), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2091, _2092 - cbSceneParam._m0[33u].z), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2091 - cbSceneParam._m0[33u].z, _2092 - cbSceneParam._m0[33u].w), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2091 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2092), _2234), 0.0)).x), vec4(0.25)));
            float _2288 = 1.0 - (_2284 * cbSceneParam._m0[34u].x);
            float _2289 = 1.0 - (_2284 * cbSceneParam._m0[34u].y);
            float _2290 = 1.0 - (_2284 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2290) ? _2038 : (isnan(_2038) ? _2290 : min(_2038, _2290));
            frontier_phi_37_36_ladder_1 = isnan(_2289) ? _2037 : (isnan(_2037) ? _2289 : min(_2037, _2289));
            frontier_phi_37_36_ladder_2 = isnan(_2288) ? _2036 : (isnan(_2036) ? _2288 : min(_2036, _2288));
        }
        else
        {
            frontier_phi_37_36_ladder = _2038;
            frontier_phi_37_36_ladder_1 = _2037;
            frontier_phi_37_36_ladder_2 = _2036;
        }
        _2102 = frontier_phi_37_36_ladder_2;
        _2104 = frontier_phi_37_36_ladder_1;
        _2106 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2102 = _2036;
        _2104 = _2037;
        _2106 = _2038;
    }
    uvec4 _2111 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2113 = _2111.x * 14u;
    uint _2114 = _2113 + 13u;
    float _2121 = _787 + (-1.0);
    float _2126 = (cbLight._m0[_2114].x * _2121) + 1.0;
    float _2127 = (cbLight._m0[_2114].y * _2121) + 1.0;
    float _2128 = (cbLight._m0[_2114].z * _2121) + 1.0;
    float _2129 = (cbLight._m0[_2114].w * _2121) + 1.0;
    uint _2130 = _2113 + 5u;
    float _2136 = isnan(1.0) ? _2127 : (isnan(_2127) ? 1.0 : min(_2127, 1.0));
    uint _2140 = _2113 + 4u;
    float _2149 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
    uint _2153 = _2113 | 1u;
    float _2164 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_624, _625, _626));
    float _2167 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_624, _625, _626));
    float _4414 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _4425 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2172 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * 0.3183098733425140380859375;
    float _2174 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * 0.3183098733425140380859375;
    float _2181 = ((cbLight._m0[_2130].x * _2136) * _2174) + (((cbLight._m0[_2140].x * _2102) * _2149) * _2172);
    float _2182 = ((_2136 * cbLight._m0[_2130].y) * _2174) + (((cbLight._m0[_2140].y * _2104) * _2149) * _2172);
    float _2183 = ((_2136 * cbLight._m0[_2130].z) * _2174) + (((cbLight._m0[_2140].z * _2106) * _2149) * _2172);
    uvec4 _2187 = floatBitsToUint(cbLight._m0[_2113 + 12u]);
    bool _2189 = _2187.x == 0u;
    float _2291;
    float _2293;
    float _2295;
    if (_2189)
    {
        _2291 = _2181;
        _2293 = _2182;
        _2295 = _2183;
    }
    else
    {
        uint _2299 = _2113 + 6u;
        float _2315 = (dot(vec3(cbLight._m0[_2113 + 2u].xyz), vec3(_624, _625, _626)) * 0.5) + 0.5;
        float _2316 = _2315 * _2315;
        float _4436 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2317 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2318 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2291 = (((cbLight._m0[_2299].x * 0.3183098733425140380859375) * _2317) * _2318) + _2181;
        _2293 = (((cbLight._m0[_2299].y * 0.3183098733425140380859375) * _2317) * _2318) + _2182;
        _2295 = (((cbLight._m0[_2299].z * 0.3183098733425140380859375) * _2317) * _2318) + _2183;
    }
    bool _2298 = _2187.y == 0u;
    float _2353;
    float _2355;
    float _2357;
    if (_2298)
    {
        _2353 = _2291;
        _2355 = _2293;
        _2357 = _2295;
    }
    else
    {
        uint _2515 = _2113 + 7u;
        float _2531 = (dot(vec3(cbLight._m0[_2113 + 3u].xyz), vec3(_624, _625, _626)) * 0.5) + 0.5;
        float _2532 = _2531 * _2531;
        float _4452 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2533 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2534 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2353 = (((cbLight._m0[_2515].x * 0.3183098733425140380859375) * _2533) * _2534) + _2291;
        _2355 = (((cbLight._m0[_2515].y * 0.3183098733425140380859375) * _2533) * _2534) + _2293;
        _2357 = (((cbLight._m0[_2515].z * 0.3183098733425140380859375) * _2533) * _2534) + _2295;
    }
    uint _2360 = _2113 + 8u;
    float _2373 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _627) * 0.949999988079071044921875);
    float _2374 = _2373 * _2373;
    float _2375 = cbLight._m0[_2113].x + _704;
    float _2376 = cbLight._m0[_2113].y + _705;
    float _2377 = cbLight._m0[_2113].z + _706;
    float _2381 = inversesqrt(dot(vec3(_2375, _2376, _2377), vec3(_2375, _2376, _2377)));
    float _2382 = _2381 * _2375;
    float _2383 = _2381 * _2376;
    float _2384 = _2381 * _2377;
    float _2385 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2113].xyz));
    float _4468 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _4479 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _2389 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2390 = dot(vec3(_624, _625, _626), vec3(_2382, _2383, _2384));
    float _4490 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2394 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2382, _2383, _2384));
    float _4501 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2398 = _2374 * _2374;
    float _2402 = ((_2393 * _2393) * (_2398 + (-1.0))) + 1.0;
    float _2413 = (exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2414 = 1.0 - _2374;
    float _2425 = (0.5 / (((_2389 * ((_2388 * _2414) + _2374)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2414) + _2374) * _2388))) * _2388;
    float _4512 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2427 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2398 / ((_2402 * _2402) * 3.141590118408203125));
    uint _2441 = _2113 + 9u;
    float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2153].w)) * _627) * 0.949999988079071044921875);
    float _2453 = _2452 * _2452;
    float _2454 = cbLight._m0[_2153].x + _704;
    float _2455 = cbLight._m0[_2153].y + _705;
    float _2456 = cbLight._m0[_2153].z + _706;
    float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
    float _2461 = _2460 * _2454;
    float _2462 = _2460 * _2455;
    float _2463 = _2460 * _2456;
    float _2464 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2153].xyz));
    float _4523 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2468 = dot(vec3(_624, _625, _626), vec3(_2461, _2462, _2463));
    float _4534 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2472 = dot(vec3(cbLight._m0[_2153].xyz), vec3(_2461, _2462, _2463));
    float _4545 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2476 = _2453 * _2453;
    float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
    float _2489 = (exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2490 = 1.0 - _2453;
    float _2500 = (0.5 / (((_2389 * ((_2467 * _2490) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2490) + _2453) * _2467))) * _2467;
    float _4556 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2502 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
    float _2512 = (((_2489 * cbLight._m0[_2441].x) * _2502) * _2136) + ((((cbLight._m0[_2360].x * _2102) * _2413) * _2427) * _2149);
    float _2513 = (((_2489 * cbLight._m0[_2441].y) * _2502) * _2136) + ((((cbLight._m0[_2360].y * _2104) * _2413) * _2427) * _2149);
    float _2514 = (((_2489 * cbLight._m0[_2441].z) * _2502) * _2136) + ((((cbLight._m0[_2360].z * _2106) * _2413) * _2427) * _2149);
    float _2570;
    float _2572;
    float _2574;
    if (_2189)
    {
        _2570 = _2512;
        _2572 = _2513;
        _2574 = _2514;
    }
    else
    {
        uint _2576 = _2113 + 2u;
        uint _2580 = _2113 + 10u;
        float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2576].w)) * _627) * 0.949999988079071044921875);
        float _2595 = _2594 * _2594;
        float _2596 = cbLight._m0[_2576].x + _704;
        float _2597 = cbLight._m0[_2576].y + _705;
        float _2598 = cbLight._m0[_2576].z + _706;
        float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
        float _2603 = _2602 * _2596;
        float _2604 = _2602 * _2597;
        float _2605 = _2602 * _2598;
        float _2606 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2576].xyz));
        float _4567 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2610 = dot(vec3(_624, _625, _626), vec3(_2603, _2604, _2605));
        float _4578 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2613 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2614 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_2603, _2604, _2605));
        float _4589 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
        float _2618 = _2595 * _2595;
        float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
        float _2631 = (exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2632 = 1.0 - _2595;
        float _2642 = (0.5 / (((_2389 * ((_2609 * _2632) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2632) + _2595) * _2609))) * _2609;
        float _4600 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2644 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
        float _2645 = isnan(1.0) ? _2128 : (isnan(_2128) ? 1.0 : min(_2128, 1.0));
        _2570 = (((_2631 * cbLight._m0[_2580].x) * _2644) * _2645) + _2512;
        _2572 = (((_2631 * cbLight._m0[_2580].y) * _2644) * _2645) + _2513;
        _2574 = (((_2631 * cbLight._m0[_2580].z) * _2644) * _2645) + _2514;
    }
    float _2676;
    float _2678;
    float _2680;
    if (_2298)
    {
        _2676 = _2570;
        _2678 = _2572;
        _2680 = _2574;
    }
    else
    {
        uint _2687 = _2113 + 3u;
        uint _2691 = _2113 + 11u;
        float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2687].w)) * _627) * 0.949999988079071044921875);
        float _2706 = _2705 * _2705;
        float _2707 = cbLight._m0[_2687].x + _704;
        float _2708 = cbLight._m0[_2687].y + _705;
        float _2709 = cbLight._m0[_2687].z + _706;
        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
        float _2714 = _2713 * _2707;
        float _2715 = _2713 * _2708;
        float _2716 = _2713 * _2709;
        float _2717 = dot(vec3(_624, _625, _626), vec3(cbLight._m0[_2687].xyz));
        float _4616 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2721 = dot(vec3(_624, _625, _626), vec3(_2714, _2715, _2716));
        float _4627 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2725 = dot(vec3(cbLight._m0[_2687].xyz), vec3(_2714, _2715, _2716));
        float _4638 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2729 = _2706 * _2706;
        float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
        float _2742 = (exp2(log2(1.0 - (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2743 = 1.0 - _2706;
        float _2753 = (0.5 / (((_2389 * ((_2720 * _2743) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2389 * _2743) + _2706) * _2720))) * _2720;
        float _4649 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2755 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
        float _2756 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
        _2676 = (((_2742 * cbLight._m0[_2691].x) * _2755) * _2756) + _2570;
        _2678 = (((_2742 * cbLight._m0[_2691].y) * _2755) * _2756) + _2572;
        _2680 = (((_2742 * cbLight._m0[_2691].z) * _2755) * _2756) + _2574;
    }
    float _2822;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    if (_2111.y == 0u)
    {
        uvec4 _2777 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2778 = _2777.x;
        uint _2789 = uint((float(_2777.y) * floor(float(uint(cbSceneParam._m0[85u].y * _725) / _2778))) + floor(float(uint(cbSceneParam._m0[85u].x * _724) / _2778)));
        float _2799 = (log2(_1889 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2800 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        uint _2803 = uint(isnan(14.0) ? _2800 : (isnan(_2800) ? 14.0 : min(_2800, 14.0)));
        uvec4 _2808 = texelFetch(g_lightClusterGridBuffer, int(((_2803 << 2u) + (_2789 << 6u)) >> 2u));
        uint _2809 = _2808.x;
        uint _2810 = _2777.z;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((((1u << ((_2810 >> 4u) & 15u)) + 4294967295u) & _2809) == 0u) || ((_2810 & 240u) == 0u))
        {
            _2889 = 0.0;
            _2891 = 0.0;
            _2893 = 0.0;
            _2895 = 0.0;
            _2897 = 0.0;
            _2899 = 0.0;
        }
        else
        {
            float _2890;
            float _2892;
            float _2894;
            float _2896;
            float _2898;
            float _2900;
            float _3042 = 0.0;
            float _3043 = 0.0;
            float _3044 = 0.0;
            float _3045 = 0.0;
            float _3046 = 0.0;
            float _3047 = 0.0;
            uint _3048 = 0u;
            uint _3057;
            bool _3058;
            for (;;)
            {
                _3057 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3048 << 2u)) >> 2u)).x;
                _3058 = _3057 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3058)
                {
                    frontier_phi_71_pred = _3047;
                    frontier_phi_71_pred_1 = _3046;
                    frontier_phi_71_pred_2 = _3045;
                    frontier_phi_71_pred_3 = _3044;
                    frontier_phi_71_pred_4 = _3043;
                    frontier_phi_71_pred_5 = _3042;
                }
                else
                {
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    uint _3193;
                    _3187 = _3042;
                    _3188 = _3043;
                    _3189 = _3044;
                    _3190 = _3045;
                    _3191 = _3046;
                    _3192 = _3047;
                    _3193 = _3057;
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    for (;;)
                    {
                        uint _3197 = uint(findLSB(_3193)) + (_3048 << 5u);
                        uint _3194 = (_3193 + 4294967295u) & _3193;
                        uint _3199 = _3197 * 48u;
                        vec4 _3213 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3199)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3199 + 3u)).x));
                        uint _3219 = (_3197 * 48u) + 4u;
                        vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3219)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3219 + 3u)).x));
                        uint _3238 = (_3197 * 48u) + 8u;
                        vec3 _3249 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3238)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3238 + 2u)).x));
                        float _3253 = _3213.x - _1887;
                        float _3254 = _3213.y - _1888;
                        float _3255 = _3213.z - _1889;
                        float _3256 = dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255));
                        float _3259 = inversesqrt(_3256);
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3263 = dot(vec3(_743, _746, _749), vec3(_3260, _3261, _3262));
                        float _3268 = 1.0 - (_3256 * _3213.w);
                        float _4675 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3269 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3270 = sqrt(_3256) * _3232.w;
                        float _3273 = 1.39999997615814208984375 / (_3270 + 1.39999997615814208984375);
                        float _3274 = _3273 * _3273;
                        float _3277 = ((1.0 - _3274) * _3263) + _3274;
                        float _3280 = _3270 * _3270;
                        float _3284 = ((isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0))) * _3269) / ((_3280 * 0.699999988079071044921875) + 1.0);
                        float _3288 = (-0.0) - _1887;
                        float _3289 = (-0.0) - _1888;
                        float _3290 = (-0.0) - _1889;
                        float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                        float _3295 = _3294 * _3288;
                        float _3296 = _3294 * _3289;
                        float _3297 = _3294 * _3290;
                        float _3304 = exp2(log2(1.0 / ((_3280 * 3.5) + 5.0)) * 0.25);
                        float _3305 = 1.0 - _803;
                        float _3312 = sqrt(1.0 - ((1.0 - (_3305 * _3305)) * (1.0 - (_3304 * _3304))));
                        float _3313 = _3312 * _3312;
                        float _3314 = _3313 * _3313;
                        float _3315 = _3295 + _3260;
                        float _3316 = _3296 + _3261;
                        float _3317 = _3297 + _3262;
                        float _3321 = inversesqrt(dot(vec3(_3315, _3316, _3317), vec3(_3315, _3316, _3317)));
                        float _3325 = dot(vec3(_743, _746, _749), vec3(_3295, _3296, _3297));
                        float _4691 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3328 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3329 = dot(vec3(_743, _746, _749), vec3(_3321 * _3315, _3321 * _3316, _3321 * _3317));
                        float _4702 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                        float _3332 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3336 = ((_3332 * _3332) * (_3314 + (-1.0))) + 1.0;
                        float _3337 = _3273 * _3313;
                        float _3338 = _3337 * _3337;
                        float _3341 = ((1.0 - _3338) * _3263) + _3338;
                        float _4713 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3343 = 1.0 - _3313;
                        float _3353 = (0.5 / (((_3342 * ((_3328 * _3343) + _3313)) + 9.9999999392252902907785028219223e-09) + (((_3342 * _3343) + _3313) * _3328))) * _3342;
                        float _4724 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3364 = (((_3314 * 3.1415927410125732421875) * (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) / ((_3336 * _3336) * ((_3280 * 2.1991131305694580078125) + 3.141590118408203125))) * _3269;
                        _3117 = (_3284 * _3232.x) + _3190;
                        _3118 = (_3284 * _3232.y) + _3191;
                        _3119 = (_3284 * _3232.z) + _3192;
                        _3114 = (_3364 * _3249.x) + _3187;
                        _3115 = (_3364 * _3249.y) + _3188;
                        _3116 = (_3364 * _3249.z) + _3189;
                        if (_3194 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3187 = _3114;
                            _3188 = _3115;
                            _3189 = _3116;
                            _3190 = _3117;
                            _3191 = _3118;
                            _3192 = _3119;
                            _3193 = _3194;
                        }
                    }
                    frontier_phi_71_pred = _3119;
                    frontier_phi_71_pred_1 = _3118;
                    frontier_phi_71_pred_2 = _3117;
                    frontier_phi_71_pred_3 = _3116;
                    frontier_phi_71_pred_4 = _3115;
                    frontier_phi_71_pred_5 = _3114;
                }
                _2900 = frontier_phi_71_pred;
                _2898 = frontier_phi_71_pred_1;
                _2896 = frontier_phi_71_pred_2;
                _2894 = frontier_phi_71_pred_3;
                _2892 = frontier_phi_71_pred_4;
                _2890 = frontier_phi_71_pred_5;
                uint _3049 = _3048 + 1u;
                if (_3049 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3042 = _2890;
                    _3043 = _2892;
                    _3044 = _2894;
                    _3045 = _2896;
                    _3046 = _2898;
                    _3047 = _2900;
                    _3048 = _3049;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2889 = _2890;
            _2891 = _2892;
            _2893 = _2894;
            _2895 = _2896;
            _2897 = _2898;
            _2899 = _2900;
        }
        uvec4 _2903 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2904 = _2903.z;
        uint _2906 = (_2904 >> 8u) & 15u;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((4294967295u << _2906) & _2809) == 0u)
        {
            _3010 = _2889;
            _3012 = _2891;
            _3014 = _2893;
            _3016 = _2895;
            _3018 = _2897;
            _3020 = _2899;
        }
        else
        {
            float _3035 = inversesqrt(dot(vec3(_1887, _1888, _1889), vec3(_1887, _1888, _1889)));
            float _3036 = _3035 * _1887;
            float _3037 = _3035 * _1888;
            float _3038 = _3035 * _1889;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2906 < ((_2904 >> 12u) & 15u))
            {
                float _3011;
                float _3013;
                float _3015;
                float _3017;
                float _3019;
                float _3021;
                float _3170 = _2889;
                float _3171 = _2891;
                float _3172 = _2893;
                float _3173 = _2895;
                float _3174 = _2897;
                float _3175 = _2899;
                uint _3176 = _2906;
                uint _3185;
                bool _3186;
                for (;;)
                {
                    _3185 = texelFetch(g_lightClassification, int((((_2803 << 5u) + (_2789 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                    _3186 = _3185 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3186)
                    {
                        frontier_phi_82_pred = _3175;
                        frontier_phi_82_pred_1 = _3174;
                        frontier_phi_82_pred_2 = _3173;
                        frontier_phi_82_pred_3 = _3172;
                        frontier_phi_82_pred_4 = _3171;
                        frontier_phi_82_pred_5 = _3170;
                    }
                    else
                    {
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3391 = _3170;
                        float _3392 = _3171;
                        float _3393 = _3172;
                        float _3394 = _3173;
                        float _3395 = _3174;
                        float _3396 = _3175;
                        uint _3397 = _3185;
                        uint _3398;
                        vec4 _3423;
                        float _3424;
                        vec4 _3439;
                        vec3 _3451;
                        vec4 _3466;
                        vec4 _3481;
                        float _3527;
                        bool _3528;
                        for (;;)
                        {
                            uint _3408 = ((_3176 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3397));
                            _3398 = (_3397 + 4294967295u) & _3397;
                            uint _3410 = _3408 * 40u;
                            _3423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3410 + 3u)).x));
                            _3424 = _3423.w;
                            uint _3426 = (_3408 * 40u) + 4u;
                            _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            uint _3441 = (_3408 * 40u) + 8u;
                            _3451 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x));
                            uint _3453 = (_3408 * 40u) + 16u;
                            _3466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 3u)).x));
                            uint _3468 = (_3408 * 40u) + 20u;
                            _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3483 = (_3408 * 40u) + 24u;
                            vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3502 = (_3408 * 40u) + 28u;
                            vec4 _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3527 = fma(_1889, _3515.z, fma(_1888, _3515.y, _3515.x * _1887)) + _3515.w;
                            _3528 = !((fma(_1889, _3496.z, fma(_1888, _3496.y, _3496.x * _1887)) + _3496.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3528)
                            {
                                float _3555 = _3423.x - _1887;
                                float _3556 = _3423.y - _1888;
                                float _3557 = _3423.z - _1889;
                                float _3558 = dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557));
                                float _3561 = inversesqrt(_3558);
                                float _3562 = _3561 * _3555;
                                float _3563 = _3561 * _3556;
                                float _3564 = _3561 * _3557;
                                float _3568 = 1.0 - (_3558 / (_3424 * _3424));
                                float _4735 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3569 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3573 = sqrt(_3558) * _3439.w;
                                float _3575 = 1.39999997615814208984375 / (_3573 + 1.39999997615814208984375);
                                float _3576 = _3575 * _3575;
                                float _3579 = ((1.0 - _3576) * dot(vec3(_3562, _3563, _3564), vec3(_743, _746, _749))) + _3576;
                                float _3582 = _3573 * _3573;
                                float _3586 = (fma(_1889, _3466.z, fma(_1888, _3466.y, _3466.x * _1887)) + _3466.w) / _3527;
                                float _3587 = (fma(_1889, _3481.z, fma(_1888, _3481.y, _3481.x * _1887)) + _3481.w) / _3527;
                                float _3591 = 1.0 - dot(vec2(_3586, _3587), vec2(_3586, _3587));
                                float _4751 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3592 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3593 = _3592 * (((isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0))) * _3569) / ((_3582 * 0.699999988079071044921875) + 1.0));
                                float _3605 = exp2(log2(1.0 / ((_3582 * 3.5) + 5.0)) * 0.25);
                                float _3606 = 1.0 - _803;
                                float _3613 = sqrt(1.0 - ((1.0 - (_3606 * _3606)) * (1.0 - (_3605 * _3605))));
                                float _3614 = _3613 * _3613;
                                float _3615 = _3614 * _3614;
                                float _3616 = _3562 - _3036;
                                float _3617 = _3563 - _3037;
                                float _3618 = _3564 - _3038;
                                float _3622 = inversesqrt(dot(vec3(_3616, _3617, _3618), vec3(_3616, _3617, _3618)));
                                float _3626 = dot(vec3(_743, _746, _749), vec3((-0.0) - _3036, (-0.0) - _3037, (-0.0) - _3038));
                                float _4762 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3630 = dot(vec3(_743, _746, _749), vec3(_3622 * _3616, _3622 * _3617, _3622 * _3618));
                                float _4773 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3633 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3637 = ((_3633 * _3633) * (_3615 + (-1.0))) + 1.0;
                                float _3638 = _3575 * _3614;
                                float _3639 = _3638 * _3638;
                                float _3645 = ((1.0 - _3639) * dot(vec3(_743, _746, _749), vec3(_3562, _3563, _3564))) + _3639;
                                float _4784 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3646 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3647 = 1.0 - _3614;
                                float _3657 = (0.5 / (((_3646 * ((_3629 * _3647) + _3614)) + 9.9999999392252902907785028219223e-09) + (((_3646 * _3647) + _3614) * _3629))) * _3646;
                                float _4795 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3667 = (_3592 * _3569) * (((_3615 * 3.1415927410125732421875) * (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) / ((_3637 * _3637) * ((_3582 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3593 * _3439.z;
                                frontier_phi_88_pred_1 = _3593 * _3439.y;
                                frontier_phi_88_pred_2 = _3593 * _3439.x;
                                frontier_phi_88_pred_3 = _3667 * _3451.z;
                                frontier_phi_88_pred_4 = _3667 * _3451.y;
                                frontier_phi_88_pred_5 = _3667 * _3451.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3676 = frontier_phi_88_pred;
                            _3675 = frontier_phi_88_pred_1;
                            _3674 = frontier_phi_88_pred_2;
                            _3673 = frontier_phi_88_pred_3;
                            _3672 = frontier_phi_88_pred_4;
                            _3671 = frontier_phi_88_pred_5;
                            _3381 = _3674 + _3394;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            if (_3398 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3398;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3383;
                        frontier_phi_82_pred_1 = _3382;
                        frontier_phi_82_pred_2 = _3381;
                        frontier_phi_82_pred_3 = _3380;
                        frontier_phi_82_pred_4 = _3379;
                        frontier_phi_82_pred_5 = _3378;
                    }
                    _3021 = frontier_phi_82_pred;
                    _3019 = frontier_phi_82_pred_1;
                    _3017 = frontier_phi_82_pred_2;
                    _3015 = frontier_phi_82_pred_3;
                    _3013 = frontier_phi_82_pred_4;
                    _3011 = frontier_phi_82_pred_5;
                    uint _3177 = _3176 + 1u;
                    if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3170 = _3011;
                        _3171 = _3013;
                        _3172 = _3015;
                        _3173 = _3017;
                        _3174 = _3019;
                        _3175 = _3021;
                        _3176 = _3177;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3017;
                frontier_phi_63_64_ladder_1 = _3021;
                frontier_phi_63_64_ladder_2 = _3019;
                frontier_phi_63_64_ladder_3 = _3015;
                frontier_phi_63_64_ladder_4 = _3013;
                frontier_phi_63_64_ladder_5 = _3011;
            }
            else
            {
                frontier_phi_63_64_ladder = _2895;
                frontier_phi_63_64_ladder_1 = _2899;
                frontier_phi_63_64_ladder_2 = _2897;
                frontier_phi_63_64_ladder_3 = _2893;
                frontier_phi_63_64_ladder_4 = _2891;
                frontier_phi_63_64_ladder_5 = _2889;
            }
            _3010 = frontier_phi_63_64_ladder_5;
            _3012 = frontier_phi_63_64_ladder_4;
            _3014 = frontier_phi_63_64_ladder_3;
            _3016 = frontier_phi_63_64_ladder;
            _3018 = frontier_phi_63_64_ladder_2;
            _3020 = frontier_phi_63_64_ladder_1;
        }
        float _3025 = isnan(1.0) ? _787 : (isnan(_787) ? 1.0 : min(_787, 1.0));
        _2822 = (_3025 * _3016) + _2353;
        _2824 = (_3025 * _3018) + _2355;
        _2826 = (_3025 * _3020) + _2357;
        _2828 = ((_3010 * 0.039999999105930328369140625) * _3025) + _2676;
        _2830 = ((_3012 * 0.039999999105930328369140625) * _3025) + _2678;
        _2832 = ((_3014 * 0.039999999105930328369140625) * _3025) + _2680;
    }
    else
    {
        _2822 = _2353;
        _2824 = _2355;
        _2826 = _2357;
        _2828 = _2676;
        _2830 = _2678;
        _2832 = _2680;
    }
    float _4811 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4822 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4833 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2849 = ((isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2822 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _787))) + ((_2828 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1623)) * cbPerFrame._m0[3u].x);
    float _2850 = ((isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2824 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _787))) + ((_2830 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1623)) * cbPerFrame._m0[3u].x);
    float _2851 = ((isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2826 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _787))) + ((_2832 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1623)) * cbPerFrame._m0[3u].x);
    uint _2852 = _244 + 6u;
    float _2860 = _724 / cbSceneParam._m0[86u].x;
    float _2861 = _725 / cbSceneParam._m0[86u].y;
    vec4 _2875 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2860, _2861, (log2((isnan(cbSceneParam._m0[77u].w) ? _645 : (isnan(_645) ? cbSceneParam._m0[77u].w : min(_645, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2877 = _2875.x;
    float _2878 = _2875.y;
    float _2879 = _2875.z;
    float _2880 = _2875.w;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    if (_645 > cbSceneParam._m0[78u].w)
    {
        float _2914 = isnan(_645) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _645 : min(cbSceneParam._m0[80u].w, _645));
        float _2915 = _2914 / _645;
        float _2926 = _2915 * _697;
        float _2927 = _698 * _2915;
        float _2928 = (-0.0) - _2927;
        float _2930 = _2915 * _699;
        float _2932 = (cbSceneParam._m0[77u].w * _2928) / _2914;
        float _2933 = _2932 + cbSceneParam._m0[79u].w;
        float _2934 = cbSceneParam._m0[79u].w - _2927;
        float _2940 = sqrt(((_2926 * _2926) + (_2927 * _2927)) + (_2930 * _2930));
        float _2943 = (1.0 - (cbSceneParam._m0[77u].w / _2914)) * _2940;
        float _2948 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2950 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3127;
        if (abs((_2928 - _2932) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3127 = ((((_2933 > 0.0) ? exp2(_2948 * _2933) : (2.0 - exp2(_2950 * _2933))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2943;
        }
        else
        {
            float _3071 = 1.0 / cbSceneParam._m0[80u].x;
            float _3072 = isnan(_2934) ? _2933 : (isnan(_2933) ? _2934 : max(_2933, _2934));
            float _3073 = isnan(_2934) ? _2933 : (isnan(_2933) ? _2934 : min(_2933, _2934));
            float _3082 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : min(_3072, 0.0));
            float _3083 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : min(_3073, 0.0));
            _3127 = ((abs(_2940 / _2928) * cbSceneParam._m0[80u].y) * ((((_3082 - _3083) * 2.0) - ((exp2(_2948 * (isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0)))) - exp2(_2948 * (isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0))))) * _3071)) - ((exp2(_2950 * _3082) - exp2(_2950 * _3083)) * _3071))) + (_2943 * cbSceneParam._m0[80u].z);
        }
        vec4 _3129 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2860, _2861, 1.0), 0.0);
        float _3138 = exp2((_3127 * (-1.44269502162933349609375)) * (1.0 - _3129.w));
        float _3139 = log2(_3138);
        float _3155 = log2(_2880);
        _2952 = (exp2(_3155 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].x)) * _3129.x) / cbSceneParam._m0[78u].x)) + _2877;
        _2954 = (exp2(_3155 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].y)) * _3129.y) / cbSceneParam._m0[78u].y)) + _2878;
        _2956 = (exp2(_3155 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3139 * cbSceneParam._m0[78u].z)) * _3129.z) / cbSceneParam._m0[78u].z)) + _2879;
        _2958 = _3138 * _2880;
    }
    else
    {
        _2952 = _2877;
        _2954 = _2878;
        _2956 = _2879;
        _2958 = _2880;
    }
    bool _3165;
    vec4 _2968;
    vec4 _2990;
    float _2992;
    float _2996;
    float _2997;
    float _2998;
    float _2999;
    bool _3009;
    for (;;)
    {
        _2968 = cbMatDynParam._m0[0u];
        float _2970 = roundEven(_2968.y);
        bool _2971 = _2970 == 3.0;
        float _2972 = log2(_2958);
        float _2979 = exp2(_2972 * cbSceneParam._m0[78u].x) * _2849;
        float _2980 = exp2(_2972 * cbSceneParam._m0[78u].y) * _2850;
        float _2981 = exp2(_2972 * cbSceneParam._m0[78u].z) * _2851;
        float _2988 = _713 + (-0.5);
        _2990 = cbMtdParam._m0[1u];
        _2992 = _2990.y * _2988;
        float _2995 = (_2970 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2996 = _2995 * (_2971 ? _2979 : (_2979 + (cbSceneParam._m0[72u].w * _2952)));
        _2997 = _2995 * (_2971 ? _2980 : (_2980 + (cbSceneParam._m0[72u].w * _2954)));
        _2998 = _2995 * (_2971 ? _2981 : (_2981 + (cbSceneParam._m0[72u].w * _2956)));
        _2999 = _2988 * 0.999000012874603271484375;
        _3009 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3009)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _2999) < 0.5)
            {
                _3165 = true;
                break;
            }
        }
        uint _3106 = _762 + uint(_2968.w);
        if ((cbInstanceData._m0[_3106].w < 1.0) && ((cbInstanceData._m0[_3106].w + _2999) < 0.5))
        {
            _3165 = true;
            break;
        }
        if ((_2992 + 1.0) < _2990.x)
        {
            _3165 = true;
            break;
        }
        _3165 = false;
        break;
    }
    float _3369;
    if (_3165)
    {
        discard_state = true;
        _3369 = 0.0;
    }
    else
    {
        _3369 = cbInstanceData._m0[_2852].w;
    }
    SV_Target.x = _2996;
    SV_Target.y = _2997;
    SV_Target.z = _2998;
    SV_Target.w = _3369;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2852].w;
    discard_exit();
}


