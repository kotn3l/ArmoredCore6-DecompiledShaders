#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1021;
float _3385;
float _3386;
float _3387;
float _3388;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _203 = _202 * _194;
    float _204 = _202 * _195;
    float _205 = _202 * _196;
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217 = _216 * TANGENT.x;
    float _218 = _216 * TANGENT.y;
    float _219 = _216 * TANGENT.z;
    uint _222 = uint(roundEven(NORMAL.w)) * 13u;
    uint _228 = _222 + 1u;
    uint _232 = _222 + 2u;
    float _241 = sqrt(((cbInstanceData._m0[_228].x * cbInstanceData._m0[_228].x) + (cbInstanceData._m0[_222].x * cbInstanceData._m0[_222].x)) + (cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x));
    float _242 = _241 * TEXCOORD.z;
    float _243 = _241 * TEXCOORD.w;
    vec4 _262 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _268 = _262.x * cbMtdParam._m0[9u].x;
    float _269 = _262.y * cbMtdParam._m0[9u].y;
    float _270 = _262.z * cbMtdParam._m0[9u].z;
    vec4 _288 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _292 = _288.z;
    float _297 = (_288.x * 2.0) + (-1.0);
    float _299 = (_288.y * 2.0) + (-1.0);
    float _300 = dot(vec2(_297, _299), vec2(_297, _299));
    float _3397 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _306 = sqrt(1.0 - (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))));
    float _309 = fma(_306, _210, fma(_299, _217, _297 * _203));
    float _312 = fma(_306, _211, fma(_299, _218, _297 * _204));
    float _315 = fma(_306, _212, fma(_299, _219, _297 * _205));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    vec4 _355 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _242) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _243) + cbTextureTilingScale._m0[11u].w));
    float _357 = _355.x;
    float _358 = 1.0 - _357;
    float _365 = ((_357 - _358) * cbMtdParam._m0[24u].z) + _358;
    float _367 = (cbMtdParam._m0[19u].x + dot(vec4(_319 * _309, _319 * _312, _319 * _315, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_365 * cbMtdParam._m0[21u].z);
    float _3408 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _383 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_365 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3419 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _388 = ((_368 * (cbMtdParam._m0[17u].x - _268)) * _384) + _268;
    float _389 = ((_368 * (cbMtdParam._m0[17u].y - _269)) * _384) + _269;
    float _390 = ((_368 * (cbMtdParam._m0[17u].z - _270)) * _384) + _270;
    vec4 _403 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _242) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _243) + cbTextureTilingScale._m0[15u].w));
    float _410 = (_403.x * 2.0) + (-1.0);
    float _411 = (_403.y * 2.0) + (-1.0);
    float _412 = dot(vec2(_410, _411), vec2(_410, _411));
    float _3430 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _421 = (((_403.z - _292) * _368) * _384) + _292;
    float _436 = (((cbMtdParam._m0[21u].x * _297) + ((_410 - _297) * _368)) * _384) + _297;
    float _437 = (((cbMtdParam._m0[21u].x * _299) + ((_411 - _299) * _368)) * _384) + _299;
    float _438 = (((sqrt(1.0 - (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) - _306) * _368) * _384) + _306;
    float _443 = cbMtdParam._m0[22u].x + _288.w;
    float _446 = fma(_438, _210, fma(_437, _217, _436 * _203));
    float _449 = fma(_438, _211, fma(_437, _218, _436 * _204));
    float _452 = fma(_438, _212, fma(_437, _219, _436 * _205));
    float _456 = inversesqrt(dot(vec3(_446, _449, _452), vec3(_446, _449, _452)));
    float _457 = _456 * _446;
    float _458 = _456 * _449;
    float _459 = _456 * _452;
    float _3441 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _460 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3463 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3474 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _3485 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _478 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _529 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _519);
    float _530 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _519);
    float _531 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _519);
    float _535 = inversesqrt(dot(vec3(_529, _530, _531), vec3(_529, _530, _531)));
    float _536 = _529 * _535;
    float _537 = _530 * _535;
    float _538 = _531 * _535;
    vec4 _543 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _545 = _543.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _702 = sqrt(((_529 * _529) + (_530 * _530)) + (_531 * _531));
        float _708 = (cbMatDynParam._m0[5u].x * _702) + cbMatDynParam._m0[5u].y;
        float _3496 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _713 = (cbMatDynParam._m0[5u].z * _702) + cbMatDynParam._m0[5u].w;
        float _3507 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) - _709)) + _709) < ((_545 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _557 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _558 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _578 = fma(_459, cbSceneParam._m0[5u].z, fma(_458, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _457));
    float _581 = fma(_459, cbSceneParam._m0[6u].z, fma(_458, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _457));
    float _584 = fma(_459, cbSceneParam._m0[7u].z, fma(_458, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _457));
    uint _597 = _222 + 9u;
    uint _598 = _597 + uint(cbMatDynParam._m0[0u].w);
    float _604 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_598].x;
    float _605 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_598].y;
    float _606 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbInstanceData._m0[_598].z;
    float _3518 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _609 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    vec4 _618 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _557, cbSceneParam._m0[86u].y * _558));
    float _622 = ((isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * TEXCOORD_5.w) * _618.x;
    float _623 = dot(vec3(_457, _458, _459), vec3(_536, _537, _538));
    float _626 = _623 * 2.0;
    float _630 = (_626 * _457) - _536;
    float _631 = (_626 * _458) - _537;
    float _632 = (_626 * _459) - _538;
    float _636 = abs(dot(vec3(_536, _537, _538), vec3(_457, _458, _459)));
    float _3551 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _638 = sqrt(_460);
    float _651 = exp2((_638 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_638 * 3.0));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1020;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _745 = fma(_691, cbModelParam._m0[26u].z, fma(_687, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _683));
        float _749 = fma(_691, cbModelParam._m0[27u].z, fma(_687, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _683));
        float _753 = fma(_691, cbModelParam._m0[28u].z, fma(_687, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _683));
        float _778 = _683 + _457;
        float _779 = _687 + _458;
        float _780 = _691 + _459;
        float _790 = fma(_780, cbModelParam._m0[26u].z, fma(_779, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _778)) - _745;
        float _791 = fma(_780, cbModelParam._m0[27u].z, fma(_779, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _778)) - _749;
        float _792 = fma(_780, cbModelParam._m0[28u].z, fma(_779, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _778)) - _753;
        float _796 = inversesqrt(dot(vec3(_790, _791, _792), vec3(_790, _791, _792)));
        float _809 = ((_796 * _790) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_745 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _810 = ((_796 * _791) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_749 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _811 = ((_796 * _792) / cbModelParam._m0[34u].z) + ((((((_753 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_809, _810, _811), 0.0);
        float _848 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_814.x + (-0.5));
        float _850 = _848 * (_814.y + (-0.5));
        float _851 = _848 * (_814.z + (-0.5));
        float _858 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_821.x + (-0.5));
        float _860 = _858 * (_821.y + (-0.5));
        float _861 = _858 * (_821.z + (-0.5));
        float _868 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_828.x + (-0.5));
        float _870 = _868 * (_828.y + (-0.5));
        float _871 = _868 * (_828.z + (-0.5));
        float _878 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_835.x + (-0.5));
        float _880 = _878 * (_835.y + (-0.5));
        float _881 = _878 * (_835.z + (-0.5));
        float _882 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _883 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _884 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _885 = _849 * 0.5;
        float _886 = _859 * 0.5;
        float _887 = _869 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _902 = (dot(vec3(_457, _458, _459), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _912 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_882 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3599 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_914 + 1.0))) + _919) * _882;
        float _929 = _850 * 0.5;
        float _930 = _860 * 0.5;
        float _931 = _870 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _945 = (dot(vec3(_457, _458, _459), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _954 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_883 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3632 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_956 + 1.0))) + _961) * _883;
        float _971 = _851 * 0.5;
        float _972 = _861 * 0.5;
        float _973 = _871 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_457, _458, _459), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_884 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3665 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_998 + 1.0))) + _1003) * _884;
        _1020 = _851;
        _1022 = _850;
        _1023 = _849;
        _1024 = _861;
        _1025 = _860;
        _1026 = _859;
        _1027 = _871;
        _1028 = _870;
        _1029 = _869;
        _1030 = _884;
        _1031 = _883;
        _1032 = _882;
        _1033 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
        _1034 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
    }
    else
    {
        _1020 = _1021;
        _1022 = _1021;
        _1023 = _1021;
        _1024 = _1021;
        _1025 = _1021;
        _1026 = _1021;
        _1027 = _1021;
        _1028 = _1021;
        _1029 = _1021;
        _1030 = _1021;
        _1031 = _1021;
        _1032 = _1021;
        _1033 = 0.0;
        _1034 = 0.0;
        _1035 = 0.0;
    }
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1063 = fma(_691, cbModelParam._m0[30u].z, fma(_687, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _683));
        float _1067 = fma(_691, cbModelParam._m0[31u].z, fma(_687, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _683));
        float _1071 = fma(_691, cbModelParam._m0[32u].z, fma(_687, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _683));
        float _1094 = _683 + _457;
        float _1095 = _687 + _458;
        float _1096 = _691 + _459;
        float _1106 = fma(_1096, cbModelParam._m0[30u].z, fma(_1095, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1094)) - _1063;
        float _1107 = fma(_1096, cbModelParam._m0[31u].z, fma(_1095, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1094)) - _1067;
        float _1108 = fma(_1096, cbModelParam._m0[32u].z, fma(_1095, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1094)) - _1071;
        float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
        float _1125 = ((_1112 * _1106) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1063 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1112 * _1107) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1067 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1112 * _1108) / cbModelParam._m0[35u].z) + ((((((_1071 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        float _1162 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1129.x + (-0.5));
        float _1164 = _1162 * (_1129.y + (-0.5));
        float _1165 = _1162 * (_1129.z + (-0.5));
        float _1172 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1136.x + (-0.5));
        float _1174 = _1172 * (_1136.y + (-0.5));
        float _1175 = _1172 * (_1136.z + (-0.5));
        float _1182 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1143.x + (-0.5));
        float _1184 = _1182 * (_1143.y + (-0.5));
        float _1185 = _1182 * (_1143.z + (-0.5));
        float _1192 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1150.x + (-0.5));
        float _1194 = _1192 * (_1150.y + (-0.5));
        float _1195 = _1192 * (_1150.z + (-0.5));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = _1163 * 0.5;
        float _1200 = _1173 * 0.5;
        float _1201 = _1183 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_457, _458, _459), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3728 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1226 + 1.0))) + _1231) * _1196;
        float _1241 = _1164 * 0.5;
        float _1242 = _1174 * 0.5;
        float _1243 = _1184 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_457, _458, _459), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3761 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1268 + 1.0))) + _1273) * _1197;
        float _1283 = _1165 * 0.5;
        float _1284 = _1175 * 0.5;
        float _1285 = _1185 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_457, _458, _459), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _3794 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1310 + 1.0))) + _1315) * _1198;
        _1332 = _1165;
        _1333 = _1164;
        _1334 = _1163;
        _1335 = _1175;
        _1336 = _1174;
        _1337 = _1173;
        _1338 = _1185;
        _1339 = _1184;
        _1340 = _1183;
        _1341 = _1198;
        _1342 = _1197;
        _1343 = _1196;
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _1021;
        _1333 = _1021;
        _1334 = _1021;
        _1335 = _1021;
        _1336 = _1021;
        _1337 = _1021;
        _1338 = _1021;
        _1339 = _1021;
        _1340 = _1021;
        _1341 = _1021;
        _1342 = _1021;
        _1343 = _1021;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1033)) + _1033;
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1034)) + _1034;
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1035)) + _1035;
    float _1379 = fma(_1358, cbSceneParam._m0[89u].z, fma(_1357, cbSceneParam._m0[89u].y, _1356 * cbSceneParam._m0[89u].x));
    float _1382 = fma(_1358, cbSceneParam._m0[90u].z, fma(_1357, cbSceneParam._m0[90u].y, _1356 * cbSceneParam._m0[90u].x));
    float _1385 = fma(_1358, cbSceneParam._m0[91u].z, fma(_1357, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1356));
    float _1400 = _630 * 0.5;
    float _1401 = _631 * 0.5;
    float _1402 = _632 * 0.5;
    float _1403 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1406 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1409 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1443;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1416 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1020, _1024, _1027, _1030));
        float _1420 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1022, _1025, _1028, _1031));
        float _1424 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1431 = dot(vec4(cbModelParam._m0[39u]), vec4(_1400, _1401, _1402, 1.0));
        _1443 = dot(vec3(isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1431) ? 0.0 : (isnan(0.0) ? _1431 : max(0.0, _1431))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1443 = 1.0;
    }
    float _1454;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1445 = dot(vec4(cbModelParam._m0[40u]), vec4(_1400, _1401, _1402, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1445) ? 0.0 : (isnan(0.0) ? _1445 : max(0.0, _1445))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1458 = (_1454 * cbModelParam._m0[1u].x) + (_1443 * (1.0 - cbModelParam._m0[1u].x));
    float _1468 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _460);
    float _1469 = isnan(_1468) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1468 : min(cbModelParam._m0[25u].z, _1468));
    float _1550;
    float _1552;
    float _1554;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1517 = fma(_691, cbModelParam._m0[13u].z, fma(_687, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _683)) + cbModelParam._m0[13u].w;
        float _1521 = fma(_691, cbModelParam._m0[14u].z, fma(_687, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _683)) + cbModelParam._m0[14u].w;
        float _1525 = fma(_691, cbModelParam._m0[15u].z, fma(_687, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _683)) + cbModelParam._m0[15u].w;
        float _1528 = fma(_632, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _630));
        float _1531 = fma(_632, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _630));
        float _1534 = fma(_632, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _630));
        float _1562;
        if (_1528 > 0.0)
        {
            _1562 = abs((1.0 - _1517) / _1528);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1528 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1517 + 1.0) / _1528);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1562 = frontier_phi_17_15_ladder;
        }
        float _1765;
        if (_1531 > 0.0)
        {
            _1765 = abs((1.0 - _1521) / _1531);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1521 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1765 = frontier_phi_26_22_ladder;
        }
        float _2008;
        if (_1534 > 0.0)
        {
            _2008 = abs((1.0 - _1525) / _1534);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1525 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2008 = frontier_phi_38_33_ladder;
        }
        float _2010 = isnan(_1765) ? _1562 : (isnan(_1562) ? _1765 : min(_1562, _1765));
        float _2011 = isnan(_2008) ? _2010 : (isnan(_2010) ? _2008 : min(_2010, _2008));
        float _2015 = (_2011 * _1528) + _1517;
        float _2016 = (_2011 * _1531) + _1521;
        float _2017 = (_2011 * _1534) + _1525;
        float _2018 = _2011 * 9.9999997473787516355514526367188e-05;
        float _2020 = (-1.0) - _2018;
        float _2022 = _2018 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2017 > _2022) || ((_2017 < _2020) || ((_2016 > _2022) || ((_2016 < _2020) || ((_2015 < _2020) || (_2015 > _2022))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2141 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2017, cbModelParam._m0[9u].z, fma(_2016, cbModelParam._m0[9u].y, _2015 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2017, cbModelParam._m0[10u].z, fma(_2016, cbModelParam._m0[10u].y, _2015 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2017, cbModelParam._m0[11u].z, fma(_2016, cbModelParam._m0[11u].y, _2015 * cbModelParam._m0[11u].x))), _1469);
            frontier_phi_16_38_ladder = _2141.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2141.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2141.x * cbModelParam._m0[1u].y;
        }
        _1550 = frontier_phi_16_38_ladder_2;
        _1552 = frontier_phi_16_38_ladder_1;
        _1554 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_630, _631, _632), _1469);
        _1550 = _1538.x * cbModelParam._m0[1u].y;
        _1552 = _1538.y * cbModelParam._m0[1u].y;
        _1554 = _1538.z * cbModelParam._m0[1u].y;
    }
    float _1558 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _460);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1558 : min(cbModelParam._m0[25u].w, _1558));
    float _1649;
    float _1651;
    float _1653;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1613 = fma(_691, cbModelParam._m0[21u].z, fma(_687, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _683)) + cbModelParam._m0[21u].w;
        float _1617 = fma(_691, cbModelParam._m0[22u].z, fma(_687, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _683)) + cbModelParam._m0[22u].w;
        float _1621 = fma(_691, cbModelParam._m0[23u].z, fma(_687, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _683)) + cbModelParam._m0[23u].w;
        float _1624 = fma(_632, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _630));
        float _1627 = fma(_632, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _630));
        float _1630 = fma(_632, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _630));
        float _1770;
        if (_1624 > 0.0)
        {
            _1770 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1770 = frontier_phi_28_24_ladder;
        }
        float _2035;
        if (_1627 > 0.0)
        {
            _2035 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2035 = frontier_phi_40_35_ladder;
        }
        float _2240;
        if (_1630 > 0.0)
        {
            _2240 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2240 = frontier_phi_49_46_ladder;
        }
        float _2242 = isnan(_2035) ? _1770 : (isnan(_1770) ? _2035 : min(_1770, _2035));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1624) + _1613;
        float _2248 = (_2243 * _1627) + _1617;
        float _2249 = (_2243 * _1630) + _1621;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2251 = (-1.0) - _2250;
        float _2253 = _2250 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2249 > _2253) || ((_2249 < _2251) || ((_2248 > _2253) || ((_2248 < _2251) || ((_2247 < _2251) || (_2247 > _2253))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2249, cbModelParam._m0[17u].z, fma(_2248, cbModelParam._m0[17u].y, _2247 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2249, cbModelParam._m0[18u].z, fma(_2248, cbModelParam._m0[18u].y, _2247 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2249, cbModelParam._m0[19u].z, fma(_2248, cbModelParam._m0[19u].y, _2247 * cbModelParam._m0[19u].x))), _1559);
            frontier_phi_25_49_ladder = _2448.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2448.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2448.x * cbModelParam._m0[1u].z;
        }
        _1649 = frontier_phi_25_49_ladder_2;
        _1651 = frontier_phi_25_49_ladder_1;
        _1653 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1633 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_630, _631, _632), _1559);
        _1649 = _1633.x * cbModelParam._m0[1u].z;
        _1651 = _1633.y * cbModelParam._m0[1u].z;
        _1653 = _1633.z * cbModelParam._m0[1u].z;
    }
    float _1665 = ((((1.0 - _651) * ((_638 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_651 * _638)) * _622;
    float _1666 = _1665 * ((cbModelParam._m0[1u].w * (_1649 - _1550)) + _1550);
    float _1667 = _1665 * ((cbModelParam._m0[1u].w * (_1651 - _1552)) + _1552);
    float _1668 = _1665 * ((cbModelParam._m0[1u].w * (_1653 - _1554)) + _1554);
    float _1671 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1674 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1677 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, _1666 * cbSceneParam._m0[91u].x));
    uvec4 _1687 = floatBitsToUint(cbInstanceData._m0[_222 + 5u]);
    uint _1689 = _1687.x * 14u;
    uint _1690 = _1689 + 13u;
    float _1697 = _622 + (-1.0);
    float _1702 = (cbLight._m0[_1690].x * _1697) + 1.0;
    float _1703 = (cbLight._m0[_1690].y * _1697) + 1.0;
    float _1704 = (cbLight._m0[_1690].z * _1697) + 1.0;
    float _1705 = (cbLight._m0[_1690].w * _1697) + 1.0;
    uint _1706 = _1689 + 5u;
    float _1712 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1716 = _1689 + 4u;
    float _1723 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
    uint _1727 = _1689 | 1u;
    float _1738 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_457, _458, _459));
    float _1741 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_457, _458, _459));
    float _3930 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _3941 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1746 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.3183098733425140380859375;
    float _1748 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 0.3183098733425140380859375;
    float _1755 = ((cbLight._m0[_1706].x * _1712) * _1748) + ((cbLight._m0[_1716].x * _1723) * _1746);
    float _1756 = ((_1712 * cbLight._m0[_1706].y) * _1748) + ((_1723 * cbLight._m0[_1716].y) * _1746);
    float _1757 = ((_1712 * cbLight._m0[_1706].z) * _1748) + ((_1723 * cbLight._m0[_1716].z) * _1746);
    uvec4 _1762 = floatBitsToUint(cbLight._m0[_1689 + 12u]);
    bool _1764 = _1762.x == 0u;
    float _1775;
    float _1777;
    float _1779;
    if (_1764)
    {
        _1775 = _1755;
        _1777 = _1756;
        _1779 = _1757;
    }
    else
    {
        uint _1783 = _1689 + 6u;
        float _1799 = (dot(vec3(cbLight._m0[_1689 + 2u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _1800 = _1799 * _1799;
        float _3952 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1802 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _1775 = (((cbLight._m0[_1783].x * 0.3183098733425140380859375) * _1801) * _1802) + _1755;
        _1777 = (((cbLight._m0[_1783].y * 0.3183098733425140380859375) * _1801) * _1802) + _1756;
        _1779 = (((cbLight._m0[_1783].z * 0.3183098733425140380859375) * _1801) * _1802) + _1757;
    }
    bool _1782 = _1762.y == 0u;
    float _1820;
    float _1822;
    float _1824;
    if (_1782)
    {
        _1820 = _1775;
        _1822 = _1777;
        _1824 = _1779;
    }
    else
    {
        uint _1979 = _1689 + 7u;
        float _1995 = (dot(vec3(cbLight._m0[_1689 + 3u].xyz), vec3(_457, _458, _459)) * 0.5) + 0.5;
        float _1996 = _1995 * _1995;
        float _3968 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1998 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _1820 = (((cbLight._m0[_1979].x * 0.3183098733425140380859375) * _1997) * _1998) + _1775;
        _1822 = (((cbLight._m0[_1979].y * 0.3183098733425140380859375) * _1997) * _1998) + _1777;
        _1824 = (((cbLight._m0[_1979].z * 0.3183098733425140380859375) * _1997) * _1998) + _1779;
    }
    uint _1827 = _1689 + 8u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1689].w)) * _460) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1689].x + _536;
    float _1843 = cbLight._m0[_1689].y + _537;
    float _1844 = cbLight._m0[_1689].z + _538;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1689].xyz));
    float _3984 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _1856 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1857 = dot(vec3(_457, _458, _459), vec3(_1849, _1850, _1851));
    float _4006 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1689].xyz), vec3(_1849, _1850, _1851));
    float _4017 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1841 * _1841;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1880 = (exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1881 = 1.0 - _1841;
    float _1892 = (0.5 / (((_1856 * ((_1855 * _1881) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1881) + _1841) * _1855))) * _1855;
    float _4028 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    uint _1905 = _1689 + 9u;
    float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1727].w)) * _460) * 0.949999988079071044921875);
    float _1917 = _1916 * _1916;
    float _1918 = cbLight._m0[_1727].x + _536;
    float _1919 = cbLight._m0[_1727].y + _537;
    float _1920 = cbLight._m0[_1727].z + _538;
    float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
    float _1925 = _1924 * _1918;
    float _1926 = _1924 * _1919;
    float _1927 = _1924 * _1920;
    float _1928 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_1727].xyz));
    float _4039 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _1932 = dot(vec3(_457, _458, _459), vec3(_1925, _1926, _1927));
    float _4050 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1935 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _1936 = dot(vec3(cbLight._m0[_1727].xyz), vec3(_1925, _1926, _1927));
    float _4061 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1940 = _1917 * _1917;
    float _1944 = ((_1935 * _1935) * (_1940 + (-1.0))) + 1.0;
    float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1954 = 1.0 - _1917;
    float _1964 = (0.5 / (((_1856 * ((_1931 * _1954) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1954) + _1917) * _1931))) * _1931;
    float _4072 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1940 / ((_1944 * _1944) * 3.141590118408203125));
    float _1976 = (((_1953 * cbLight._m0[_1905].x) * _1966) * _1712) + (((_1880 * cbLight._m0[_1827].x) * _1894) * _1723);
    float _1977 = (((_1953 * cbLight._m0[_1905].y) * _1966) * _1712) + (((_1880 * cbLight._m0[_1827].y) * _1894) * _1723);
    float _1978 = (((_1953 * cbLight._m0[_1905].z) * _1966) * _1712) + (((_1880 * cbLight._m0[_1827].z) * _1894) * _1723);
    float _2040;
    float _2042;
    float _2044;
    if (_1764)
    {
        _2040 = _1976;
        _2042 = _1977;
        _2044 = _1978;
    }
    else
    {
        uint _2046 = _1689 + 2u;
        uint _2050 = _1689 + 10u;
        float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _460) * 0.949999988079071044921875);
        float _2065 = _2064 * _2064;
        float _2066 = cbLight._m0[_2046].x + _536;
        float _2067 = cbLight._m0[_2046].y + _537;
        float _2068 = cbLight._m0[_2046].z + _538;
        float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
        float _2073 = _2072 * _2066;
        float _2074 = _2072 * _2067;
        float _2075 = _2072 * _2068;
        float _2076 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2046].xyz));
        float _4083 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2079 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2080 = dot(vec3(_457, _458, _459), vec3(_2073, _2074, _2075));
        float _4094 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2084 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2073, _2074, _2075));
        float _4105 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2088 = _2065 * _2065;
        float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
        float _2101 = (exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2102 = 1.0 - _2065;
        float _2112 = (0.5 / (((_1856 * ((_2079 * _2102) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _2102) + _2065) * _2079))) * _2079;
        float _4116 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2114 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
        float _2115 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
        _2040 = (((_2101 * cbLight._m0[_2050].x) * _2114) * _2115) + _1976;
        _2042 = (((_2101 * cbLight._m0[_2050].y) * _2114) * _2115) + _1977;
        _2044 = (((_2101 * cbLight._m0[_2050].z) * _2114) * _2115) + _1978;
    }
    float _2150;
    float _2152;
    float _2154;
    if (_1782)
    {
        _2150 = _2040;
        _2152 = _2042;
        _2154 = _2044;
    }
    else
    {
        uint _2161 = _1689 + 3u;
        uint _2165 = _1689 + 11u;
        float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2161].w)) * _460) * 0.949999988079071044921875);
        float _2180 = _2179 * _2179;
        float _2181 = cbLight._m0[_2161].x + _536;
        float _2182 = cbLight._m0[_2161].y + _537;
        float _2183 = cbLight._m0[_2161].z + _538;
        float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
        float _2188 = _2187 * _2181;
        float _2189 = _2187 * _2182;
        float _2190 = _2187 * _2183;
        float _2191 = dot(vec3(_457, _458, _459), vec3(cbLight._m0[_2161].xyz));
        float _4132 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
        float _2194 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2195 = dot(vec3(_457, _458, _459), vec3(_2188, _2189, _2190));
        float _4143 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2198 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2199 = dot(vec3(cbLight._m0[_2161].xyz), vec3(_2188, _2189, _2190));
        float _4154 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2203 = _2180 * _2180;
        float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
        float _2216 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2217 = 1.0 - _2180;
        float _2227 = (0.5 / (((_1856 * ((_2194 * _2217) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _2217) + _2180) * _2194))) * _2194;
        float _4165 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2229 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
        float _2230 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _2150 = (((_2216 * cbLight._m0[_2165].x) * _2229) * _2230) + _2040;
        _2152 = (((_2216 * cbLight._m0[_2165].y) * _2229) * _2230) + _2042;
        _2154 = (((_2216 * cbLight._m0[_2165].z) * _2229) * _2230) + _2044;
    }
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    float _2375;
    if (_1687.y == 0u)
    {
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2305;
        float _2307 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2305;
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2305;
        uvec4 _2320 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2321 = _2320.x;
        uint _2332 = uint((float(_2320.y) * floor(float(uint(cbSceneParam._m0[85u].y * _558) / _2321))) + floor(float(uint(cbSceneParam._m0[85u].x * _557) / _2321)));
        float _2342 = (log2(_2308 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2343 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        uint _2346 = uint(isnan(14.0) ? _2343 : (isnan(_2343) ? 14.0 : min(_2343, 14.0)));
        uvec4 _2351 = texelFetch(g_lightClusterGridBuffer, int(((_2346 << 2u) + (_2332 << 6u)) >> 2u));
        uint _2352 = _2351.x;
        uint _2353 = _2320.z;
        float _2453;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        if (((((1u << ((_2353 >> 4u) & 15u)) + 4294967295u) & _2352) == 0u) || ((_2353 & 240u) == 0u))
        {
            _2453 = 0.0;
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
            _2463 = 0.0;
        }
        else
        {
            float _2454;
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2464;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            uint _2612 = 0u;
            uint _2621;
            bool _2622;
            for (;;)
            {
                _2621 = texelFetch(g_lightClassification, int((((_2346 << 5u) + (_2332 << 9u)) + (_2612 << 2u)) >> 2u)).x;
                _2622 = _2621 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2622)
                {
                    frontier_phi_66_pred = _2606;
                    frontier_phi_66_pred_1 = _2611;
                    frontier_phi_66_pred_2 = _2610;
                    frontier_phi_66_pred_3 = _2609;
                    frontier_phi_66_pred_4 = _2608;
                    frontier_phi_66_pred_5 = _2607;
                }
                else
                {
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    uint _2757;
                    _2751 = _2606;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2621;
                    float _2678;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    for (;;)
                    {
                        uint _2761 = uint(findLSB(_2757)) + (_2612 << 5u);
                        uint _2758 = (_2757 + 4294967295u) & _2757;
                        uint _2763 = _2761 * 48u;
                        vec4 _2777 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 3u)).x));
                        uint _2783 = (_2761 * 48u) + 4u;
                        vec4 _2796 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2783)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2783 + 3u)).x));
                        uint _2802 = (_2761 * 48u) + 8u;
                        vec3 _2813 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2802)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2802 + 2u)).x));
                        float _2817 = _2777.x - _2306;
                        float _2818 = _2777.y - _2307;
                        float _2819 = _2777.z - _2308;
                        float _2820 = dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819));
                        float _2823 = inversesqrt(_2820);
                        float _2824 = _2823 * _2817;
                        float _2825 = _2823 * _2818;
                        float _2826 = _2823 * _2819;
                        float _2827 = dot(vec3(_578, _581, _584), vec3(_2824, _2825, _2826));
                        float _2832 = 1.0 - (_2820 * _2777.w);
                        float _4191 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2833 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2834 = sqrt(_2820) * _2796.w;
                        float _2837 = 1.39999997615814208984375 / (_2834 + 1.39999997615814208984375);
                        float _2838 = _2837 * _2837;
                        float _2841 = ((1.0 - _2838) * _2827) + _2838;
                        float _2844 = _2834 * _2834;
                        float _2848 = ((isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0))) * _2833) / ((_2844 * 0.699999988079071044921875) + 1.0);
                        float _2852 = (-0.0) - _2306;
                        float _2853 = (-0.0) - _2307;
                        float _2854 = (-0.0) - _2308;
                        float _2858 = inversesqrt(dot(vec3(_2852, _2853, _2854), vec3(_2852, _2853, _2854)));
                        float _2859 = _2858 * _2852;
                        float _2860 = _2858 * _2853;
                        float _2861 = _2858 * _2854;
                        float _2869 = exp2(log2(1.0 / ((_2844 * 3.5) + 5.0)) * 0.25);
                        float _2870 = 1.0 - _638;
                        float _2877 = sqrt(1.0 - ((1.0 - (_2870 * _2870)) * (1.0 - (_2869 * _2869))));
                        float _2878 = _2877 * _2877;
                        float _2879 = _2878 * _2878;
                        float _2880 = _2859 + _2824;
                        float _2881 = _2860 + _2825;
                        float _2882 = _2861 + _2826;
                        float _2886 = inversesqrt(dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882)));
                        float _2890 = dot(vec3(_578, _581, _584), vec3(_2859, _2860, _2861));
                        float _4207 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2893 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2894 = dot(vec3(_578, _581, _584), vec3(_2886 * _2880, _2886 * _2881, _2886 * _2882));
                        float _4218 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2897 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                        float _2901 = ((_2897 * _2897) * (_2879 + (-1.0))) + 1.0;
                        float _2902 = _2837 * _2878;
                        float _2903 = _2902 * _2902;
                        float _2906 = ((1.0 - _2903) * _2827) + _2903;
                        float _4229 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                        float _2907 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2908 = 1.0 - _2878;
                        float _2918 = (0.5 / (((_2907 * ((_2893 * _2908) + _2878)) + 9.9999999392252902907785028219223e-09) + (((_2907 * _2908) + _2878) * _2893))) * _2907;
                        float _4240 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2929 = (((_2879 * 3.1415927410125732421875) * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) / ((_2901 * _2901) * ((_2844 * 2.1991131305694580078125) + 3.141590118408203125))) * _2833;
                        _2681 = (_2848 * _2796.x) + _2754;
                        _2682 = (_2848 * _2796.y) + _2755;
                        _2683 = (_2848 * _2796.z) + _2756;
                        _2678 = (_2929 * _2813.x) + _2751;
                        _2679 = (_2929 * _2813.y) + _2752;
                        _2680 = (_2929 * _2813.z) + _2753;
                        if (_2758 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2751 = _2678;
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2758;
                        }
                    }
                    frontier_phi_66_pred = _2678;
                    frontier_phi_66_pred_1 = _2683;
                    frontier_phi_66_pred_2 = _2682;
                    frontier_phi_66_pred_3 = _2681;
                    frontier_phi_66_pred_4 = _2680;
                    frontier_phi_66_pred_5 = _2679;
                }
                _2454 = frontier_phi_66_pred;
                _2464 = frontier_phi_66_pred_1;
                _2462 = frontier_phi_66_pred_2;
                _2460 = frontier_phi_66_pred_3;
                _2458 = frontier_phi_66_pred_4;
                _2456 = frontier_phi_66_pred_5;
                uint _2613 = _2612 + 1u;
                if (_2613 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2606 = _2454;
                    _2607 = _2456;
                    _2608 = _2458;
                    _2609 = _2460;
                    _2610 = _2462;
                    _2611 = _2464;
                    _2612 = _2613;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2453 = _2454;
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
            _2463 = _2464;
        }
        uvec4 _2467 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2468 = _2467.z;
        uint _2470 = (_2468 >> 8u) & 15u;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        if (((4294967295u << _2470) & _2352) == 0u)
        {
            _2574 = _2453;
            _2576 = _2455;
            _2578 = _2457;
            _2580 = _2459;
            _2582 = _2461;
            _2584 = _2463;
        }
        else
        {
            float _2599 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
            float _2600 = _2599 * _2306;
            float _2601 = _2599 * _2307;
            float _2602 = _2599 * _2308;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2470 < ((_2468 >> 12u) & 15u))
            {
                float _2575;
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2585;
                float _2734 = _2453;
                float _2735 = _2455;
                float _2736 = _2457;
                float _2737 = _2459;
                float _2738 = _2461;
                float _2739 = _2463;
                uint _2740 = _2470;
                uint _2749;
                bool _2750;
                for (;;)
                {
                    _2749 = texelFetch(g_lightClassification, int((((_2346 << 5u) + (_2332 << 9u)) + (_2740 << 2u)) >> 2u)).x;
                    _2750 = _2749 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2750)
                    {
                        frontier_phi_77_pred = _2739;
                        frontier_phi_77_pred_1 = _2738;
                        frontier_phi_77_pred_2 = _2737;
                        frontier_phi_77_pred_3 = _2736;
                        frontier_phi_77_pred_4 = _2735;
                        frontier_phi_77_pred_5 = _2734;
                    }
                    else
                    {
                        float _2943;
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _2956 = _2734;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        float _2959 = _2737;
                        float _2960 = _2738;
                        float _2961 = _2739;
                        uint _2962 = _2749;
                        uint _2963;
                        vec4 _2988;
                        float _2989;
                        vec4 _3004;
                        vec3 _3016;
                        vec4 _3032;
                        vec4 _3048;
                        float _3094;
                        bool _3095;
                        for (;;)
                        {
                            uint _2973 = ((_2740 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2962));
                            _2963 = (_2962 + 4294967295u) & _2962;
                            uint _2975 = _2973 * 40u;
                            _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            _2989 = _2988.w;
                            uint _2991 = (_2973 * 40u) + 4u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3006 = (_2973 * 40u) + 8u;
                            _3016 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x));
                            uint _3019 = (_2973 * 40u) + 16u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3035 = (_2973 * 40u) + 20u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3050 = (_2973 * 40u) + 24u;
                            vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3069 = (_2973 * 40u) + 28u;
                            vec4 _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            _3094 = fma(_2308, _3082.z, fma(_2307, _3082.y, _3082.x * _2306)) + _3082.w;
                            _3095 = !((fma(_2308, _3063.z, fma(_2307, _3063.y, _3063.x * _2306)) + _3063.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3095)
                            {
                                float _3122 = _2988.x - _2306;
                                float _3123 = _2988.y - _2307;
                                float _3124 = _2988.z - _2308;
                                float _3125 = dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124));
                                float _3128 = inversesqrt(_3125);
                                float _3129 = _3128 * _3122;
                                float _3130 = _3128 * _3123;
                                float _3131 = _3128 * _3124;
                                float _3135 = 1.0 - (_3125 / (_2989 * _2989));
                                float _4251 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3140 = sqrt(_3125) * _3004.w;
                                float _3142 = 1.39999997615814208984375 / (_3140 + 1.39999997615814208984375);
                                float _3143 = _3142 * _3142;
                                float _3146 = ((1.0 - _3143) * dot(vec3(_3129, _3130, _3131), vec3(_578, _581, _584))) + _3143;
                                float _3149 = _3140 * _3140;
                                float _3153 = (fma(_2308, _3032.z, fma(_2307, _3032.y, _3032.x * _2306)) + _3032.w) / _3094;
                                float _3154 = (fma(_2308, _3048.z, fma(_2307, _3048.y, _3048.x * _2306)) + _3048.w) / _3094;
                                float _3158 = 1.0 - dot(vec2(_3153, _3154), vec2(_3153, _3154));
                                float _4267 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3159 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3160 = _3159 * (((isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))) * _3136) / ((_3149 * 0.699999988079071044921875) + 1.0));
                                float _3172 = exp2(log2(1.0 / ((_3149 * 3.5) + 5.0)) * 0.25);
                                float _3173 = 1.0 - _638;
                                float _3180 = sqrt(1.0 - ((1.0 - (_3173 * _3173)) * (1.0 - (_3172 * _3172))));
                                float _3181 = _3180 * _3180;
                                float _3182 = _3181 * _3181;
                                float _3183 = _3129 - _2600;
                                float _3184 = _3130 - _2601;
                                float _3185 = _3131 - _2602;
                                float _3189 = inversesqrt(dot(vec3(_3183, _3184, _3185), vec3(_3183, _3184, _3185)));
                                float _3193 = dot(vec3(_578, _581, _584), vec3((-0.0) - _2600, (-0.0) - _2601, (-0.0) - _2602));
                                float _4278 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3196 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3197 = dot(vec3(_578, _581, _584), vec3(_3189 * _3183, _3189 * _3184, _3189 * _3185));
                                float _4289 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3200 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3204 = ((_3200 * _3200) * (_3182 + (-1.0))) + 1.0;
                                float _3205 = _3142 * _3181;
                                float _3206 = _3205 * _3205;
                                float _3212 = ((1.0 - _3206) * dot(vec3(_578, _581, _584), vec3(_3129, _3130, _3131))) + _3206;
                                float _4300 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3214 = 1.0 - _3181;
                                float _3224 = (0.5 / (((_3213 * ((_3196 * _3214) + _3181)) + 9.9999999392252902907785028219223e-09) + (((_3213 * _3214) + _3181) * _3196))) * _3213;
                                float _4311 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3234 = (_3159 * _3136) * (((_3182 * 3.1415927410125732421875) * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) / ((_3204 * _3204) * ((_3149 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3160 * _3004.y;
                                frontier_phi_83_pred_1 = _3160 * _3004.x;
                                frontier_phi_83_pred_2 = _3234 * _3016.z;
                                frontier_phi_83_pred_3 = _3234 * _3016.y;
                                frontier_phi_83_pred_4 = _3234 * _3016.x;
                                frontier_phi_83_pred_5 = _3160 * _3004.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3242 = frontier_phi_83_pred;
                            _3241 = frontier_phi_83_pred_1;
                            _3240 = frontier_phi_83_pred_2;
                            _3239 = frontier_phi_83_pred_3;
                            _3238 = frontier_phi_83_pred_4;
                            _3243 = frontier_phi_83_pred_5;
                            _2946 = _3241 + _2959;
                            _2947 = _3242 + _2960;
                            _2948 = _3243 + _2961;
                            _2943 = _3238 + _2956;
                            _2944 = _3239 + _2957;
                            _2945 = _3240 + _2958;
                            if (_2963 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2956 = _2943;
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2963;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2948;
                        frontier_phi_77_pred_1 = _2947;
                        frontier_phi_77_pred_2 = _2946;
                        frontier_phi_77_pred_3 = _2945;
                        frontier_phi_77_pred_4 = _2944;
                        frontier_phi_77_pred_5 = _2943;
                    }
                    _2585 = frontier_phi_77_pred;
                    _2583 = frontier_phi_77_pred_1;
                    _2581 = frontier_phi_77_pred_2;
                    _2579 = frontier_phi_77_pred_3;
                    _2577 = frontier_phi_77_pred_4;
                    _2575 = frontier_phi_77_pred_5;
                    uint _2741 = _2740 + 1u;
                    if (_2741 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2734 = _2575;
                        _2735 = _2577;
                        _2736 = _2579;
                        _2737 = _2581;
                        _2738 = _2583;
                        _2739 = _2585;
                        _2740 = _2741;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2579;
                frontier_phi_58_59_ladder_1 = _2585;
                frontier_phi_58_59_ladder_2 = _2583;
                frontier_phi_58_59_ladder_3 = _2581;
                frontier_phi_58_59_ladder_4 = _2577;
                frontier_phi_58_59_ladder_5 = _2575;
            }
            else
            {
                frontier_phi_58_59_ladder = _2457;
                frontier_phi_58_59_ladder_1 = _2463;
                frontier_phi_58_59_ladder_2 = _2461;
                frontier_phi_58_59_ladder_3 = _2459;
                frontier_phi_58_59_ladder_4 = _2455;
                frontier_phi_58_59_ladder_5 = _2453;
            }
            _2574 = frontier_phi_58_59_ladder_5;
            _2576 = frontier_phi_58_59_ladder_4;
            _2578 = frontier_phi_58_59_ladder;
            _2580 = frontier_phi_58_59_ladder_3;
            _2582 = frontier_phi_58_59_ladder_2;
            _2584 = frontier_phi_58_59_ladder_1;
        }
        float _2589 = isnan(1.0) ? _622 : (isnan(_622) ? 1.0 : min(_622, 1.0));
        _2365 = (_2589 * _2580) + _1820;
        _2367 = (_2589 * _2582) + _1822;
        _2369 = (_2589 * _2584) + _1824;
        _2371 = ((_2574 * 0.039999999105930328369140625) * _2589) + _2150;
        _2373 = ((_2576 * 0.039999999105930328369140625) * _2589) + _2152;
        _2375 = ((_2578 * 0.039999999105930328369140625) * _2589) + _2154;
    }
    else
    {
        _2365 = _1820;
        _2367 = _1822;
        _2369 = _1824;
        _2371 = _2150;
        _2373 = _2152;
        _2375 = _2154;
    }
    float _4327 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4338 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _4349 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _2392 = ((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2365 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _622))) + ((_2371 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1458)) * cbPerFrame._m0[3u].x);
    float _2393 = ((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2367 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _622))) + ((_2373 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _1458)) * cbPerFrame._m0[3u].x);
    float _2394 = ((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2369 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _622))) + ((_2375 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1458)) * cbPerFrame._m0[3u].x);
    uint _2395 = _222 + 6u;
    float _2403 = _557 / cbSceneParam._m0[86u].x;
    float _2404 = _558 / cbSceneParam._m0[86u].y;
    vec4 _2418 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2403, _2404, (log2((isnan(cbSceneParam._m0[77u].w) ? _478 : (isnan(_478) ? cbSceneParam._m0[77u].w : min(_478, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2420 = _2418.x;
    float _2421 = _2418.y;
    float _2422 = _2418.z;
    float _2423 = _2418.w;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    if (_478 > cbSceneParam._m0[78u].w)
    {
        float _2478 = isnan(_478) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _478 : min(cbSceneParam._m0[80u].w, _478));
        float _2479 = _2478 / _478;
        float _2490 = _2479 * _529;
        float _2491 = _530 * _2479;
        float _2492 = (-0.0) - _2491;
        float _2494 = _2479 * _531;
        float _2496 = (cbSceneParam._m0[77u].w * _2492) / _2478;
        float _2497 = _2496 + cbSceneParam._m0[79u].w;
        float _2498 = cbSceneParam._m0[79u].w - _2491;
        float _2504 = sqrt(((_2490 * _2490) + (_2491 * _2491)) + (_2494 * _2494));
        float _2507 = (1.0 - (cbSceneParam._m0[77u].w / _2478)) * _2504;
        float _2512 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2514 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2691;
        if (abs((_2492 - _2496) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2691 = ((((_2497 > 0.0) ? exp2(_2512 * _2497) : (2.0 - exp2(_2514 * _2497))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2507;
        }
        else
        {
            float _2635 = 1.0 / cbSceneParam._m0[80u].x;
            float _2636 = isnan(_2498) ? _2497 : (isnan(_2497) ? _2498 : max(_2497, _2498));
            float _2637 = isnan(_2498) ? _2497 : (isnan(_2497) ? _2498 : min(_2497, _2498));
            float _2646 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : min(_2636, 0.0));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            _2691 = ((abs(_2504 / _2492) * cbSceneParam._m0[80u].y) * ((((_2646 - _2647) * 2.0) - ((exp2(_2512 * (isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0)))) - exp2(_2512 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0))))) * _2635)) - ((exp2(_2514 * _2646) - exp2(_2514 * _2647)) * _2635))) + (_2507 * cbSceneParam._m0[80u].z);
        }
        vec4 _2693 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2403, _2404, 1.0), 0.0);
        float _2702 = exp2((_2691 * (-1.44269502162933349609375)) * (1.0 - _2693.w));
        float _2703 = log2(_2702);
        float _2719 = log2(_2423);
        _2516 = (exp2(_2719 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].x)) * _2693.x) / cbSceneParam._m0[78u].x)) + _2420;
        _2518 = (exp2(_2719 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].y)) * _2693.y) / cbSceneParam._m0[78u].y)) + _2421;
        _2520 = (exp2(_2719 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2703 * cbSceneParam._m0[78u].z)) * _2693.z) / cbSceneParam._m0[78u].z)) + _2422;
        _2522 = _2702 * _2423;
    }
    else
    {
        _2516 = _2420;
        _2518 = _2421;
        _2520 = _2422;
        _2522 = _2423;
    }
    bool _2729;
    vec4 _2532;
    vec4 _2554;
    float _2556;
    float _2560;
    float _2561;
    float _2562;
    float _2563;
    bool _2573;
    for (;;)
    {
        _2532 = cbMatDynParam._m0[0u];
        float _2534 = roundEven(_2532.y);
        bool _2535 = _2534 == 3.0;
        float _2536 = log2(_2522);
        float _2543 = exp2(_2536 * cbSceneParam._m0[78u].x) * _2392;
        float _2544 = exp2(_2536 * cbSceneParam._m0[78u].y) * _2393;
        float _2545 = exp2(_2536 * cbSceneParam._m0[78u].z) * _2394;
        float _2552 = _545 + (-0.5);
        _2554 = cbMtdParam._m0[1u];
        _2556 = _2554.y * _2552;
        float _2559 = (_2534 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2560 = _2559 * (_2535 ? _2543 : (_2543 + (cbSceneParam._m0[72u].w * _2516)));
        _2561 = _2559 * (_2535 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2518)));
        _2562 = _2559 * (_2535 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2520)));
        _2563 = _2552 * 0.999000012874603271484375;
        _2573 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2573)
        {
            if ((cbInstanceData._m0[_222 + 7u].x + _2563) < 0.5)
            {
                _2729 = true;
                break;
            }
        }
        uint _2670 = _597 + uint(_2532.w);
        if ((cbInstanceData._m0[_2670].w < 1.0) && ((cbInstanceData._m0[_2670].w + _2563) < 0.5))
        {
            _2729 = true;
            break;
        }
        if ((_2556 + 1.0) < _2554.x)
        {
            _2729 = true;
            break;
        }
        _2729 = false;
        break;
    }
    float _2934;
    if (_2729)
    {
        discard_state = true;
        _2934 = 0.0;
    }
    else
    {
        _2934 = cbInstanceData._m0[_2395].w;
    }
    SV_Target.x = _2560;
    SV_Target.y = _2561;
    SV_Target.z = _2562;
    SV_Target.w = _2934;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2395].w;
    discard_exit();
}


