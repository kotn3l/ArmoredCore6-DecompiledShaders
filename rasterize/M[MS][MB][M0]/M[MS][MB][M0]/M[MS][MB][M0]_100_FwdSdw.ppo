#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1154;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _217 = _216 * _208;
    float _218 = _216 * _209;
    float _219 = _216 * _210;
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = _223 * NORMAL.x;
    float _225 = _223 * NORMAL.y;
    float _226 = _223 * NORMAL.z;
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231 = _230 * TANGENT.x;
    float _232 = _230 * TANGENT.y;
    float _233 = _230 * TANGENT.z;
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _344 = _342.x;
    float _354 = dot(vec4(_344, _342.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _371 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_344 - _354) * cbMtdParam._m0[24u].x) + _354) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3743 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _372 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _379 = (_372 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _380 = (_372 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _381 = (_372 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _399 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _256) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _257) + cbTextureTilingScale._m0[20u].w));
    vec4 _426 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _443 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _445 = _443.x;
    float _446 = _443.y;
    float _447 = _443.z;
    float _456 = ((_426.z - _447) * _372) + _447;
    float _459 = ((((_426.x - _445) * _372) + _445) * 2.0) + (-1.0);
    float _460 = ((((_426.y - _446) * _372) + _446) * 2.0) + (-1.0);
    float _461 = dot(vec2(_459, _460), vec2(_459, _460));
    float _3754 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _466 = sqrt(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _498 = (_459 + ((((_399.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_486.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _499 = (_460 + ((((_399.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_486.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _502 = fma(_466, _224, fma(_499, _231, _498 * _217));
    float _505 = fma(_466, _225, fma(_499, _232, _498 * _218));
    float _508 = fma(_466, _226, fma(_499, _233, _498 * _219));
    float _512 = inversesqrt(dot(vec3(_502, _505, _508), vec3(_502, _505, _508)));
    vec4 _541 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _543 = _541.x;
    float _544 = 1.0 - _543;
    float _550 = (cbMtdParam._m0[19u].x + dot(vec4(_512 * _502, _512 * _505, _512 * _508, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_543 - _544) * cbMtdParam._m0[24u].z) + _544) * cbMtdParam._m0[21u].z);
    float _3765 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _558 = (_551 * (cbMtdParam._m0[17u].x - _379)) + _379;
    float _559 = (_551 * (cbMtdParam._m0[17u].y - _380)) + _380;
    float _560 = (_551 * (cbMtdParam._m0[17u].z - _381)) + _381;
    float _565 = (((_399.z - _456) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _456;
    float _569 = ((_486.z - _565) * cbMtdParam._m0[19u].w) + _565;
    vec4 _582 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _589 = (_582.x * 2.0) + (-1.0);
    float _590 = (_582.y * 2.0) + (-1.0);
    float _591 = dot(vec2(_589, _590), vec2(_589, _590));
    float _3776 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _599 = ((_582.z - _569) * _551) + _569;
    float _609 = ((sqrt(1.0 - (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) - _466) * _551) + _466;
    float _612 = (((_589 - _498) * _551) + _498) + (cbMtdParam._m0[21u].x * _498);
    float _613 = (((_590 - _499) * _551) + _499) + (cbMtdParam._m0[21u].x * _499);
    float _618 = cbMtdParam._m0[22u].x + _486.w;
    float _621 = fma(_609, _224, fma(_613, _231, _612 * _217));
    float _624 = fma(_609, _225, fma(_613, _232, _612 * _218));
    float _627 = fma(_609, _226, fma(_613, _233, _612 * _219));
    float _631 = inversesqrt(dot(vec3(_621, _624, _627), vec3(_621, _624, _627)));
    float _632 = _631 * _621;
    float _633 = _631 * _624;
    float _634 = _631 * _627;
    float _3787 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _635 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3809 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3820 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3831 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _705 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _695);
    float _706 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _695);
    float _707 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _695);
    float _711 = inversesqrt(dot(vec3(_705, _706, _707), vec3(_705, _706, _707)));
    float _712 = _705 * _711;
    float _713 = _706 * _711;
    float _714 = _707 * _711;
    float _720 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _721 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _739 = fma(_634, cbSceneParam._m0[5u].z, fma(_633, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _632));
    float _742 = fma(_634, cbSceneParam._m0[6u].z, fma(_633, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _632));
    float _745 = fma(_634, cbSceneParam._m0[7u].z, fma(_633, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _632));
    uint _759 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _765 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * cbInstanceData._m0[_759].x;
    float _766 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * cbInstanceData._m0[_759].y;
    float _767 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * cbInstanceData._m0[_759].z;
    float _3842 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _3864 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    vec4 _779 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _720, cbSceneParam._m0[86u].y * _721));
    float _783 = ((isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * TEXCOORD_5.w) * _779.x;
    float _784 = dot(vec3(_632, _633, _634), vec3(_712, _713, _714));
    float _787 = _784 * 2.0;
    float _791 = (_787 * _632) - _712;
    float _792 = (_787 * _633) - _713;
    float _793 = (_787 * _634) - _714;
    float _797 = abs(dot(vec3(_712, _713, _714), vec3(_632, _633, _634)));
    float _3875 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _799 = sqrt(_635);
    float _812 = exp2((_799 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_799 * 3.0));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1153;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _878 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _882 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _886 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _911 = _844 + _632;
        float _912 = _848 + _633;
        float _913 = _852 + _634;
        float _923 = fma(_913, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _911)) - _878;
        float _924 = fma(_913, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _911)) - _882;
        float _925 = fma(_913, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _911)) - _886;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_878 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_882 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[34u].z) + ((((((_886 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _981 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_947.x + (-0.5));
        float _983 = _981 * (_947.y + (-0.5));
        float _984 = _981 * (_947.z + (-0.5));
        float _991 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_954.x + (-0.5));
        float _993 = _991 * (_954.y + (-0.5));
        float _994 = _991 * (_954.z + (-0.5));
        float _1001 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_961.x + (-0.5));
        float _1003 = _1001 * (_961.y + (-0.5));
        float _1004 = _1001 * (_961.z + (-0.5));
        float _1011 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_968.x + (-0.5));
        float _1013 = _1011 * (_968.y + (-0.5));
        float _1014 = _1011 * (_968.z + (-0.5));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = _982 * 0.5;
        float _1019 = _992 * 0.5;
        float _1020 = _1002 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1035 = (dot(vec3(_632, _633, _634), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1045 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3923 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1047 + 1.0))) + _1052) * _1015;
        float _1062 = _983 * 0.5;
        float _1063 = _993 * 0.5;
        float _1064 = _1003 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_632, _633, _634), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3934 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1016 + 9.9999997473787516355514526367188e-06);
        float _3945 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3956 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_1089 + 1.0))) + _1094) * _1016;
        float _1104 = _984 * 0.5;
        float _1105 = _994 * 0.5;
        float _1106 = _1004 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_632, _633, _634), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3989 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1131 + 1.0))) + _1136) * _1017;
        _1153 = _984;
        _1155 = _983;
        _1156 = _982;
        _1157 = _994;
        _1158 = _993;
        _1159 = _992;
        _1160 = _1004;
        _1161 = _1003;
        _1162 = _1002;
        _1163 = _1017;
        _1164 = _1016;
        _1165 = _1015;
        _1166 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1167 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _1154;
        _1155 = _1154;
        _1156 = _1154;
        _1157 = _1154;
        _1158 = _1154;
        _1159 = _1154;
        _1160 = _1154;
        _1161 = _1154;
        _1162 = _1154;
        _1163 = _1154;
        _1164 = _1154;
        _1165 = _1154;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1193 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1197 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1201 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1224 = _844 + _632;
        float _1225 = _848 + _633;
        float _1226 = _852 + _634;
        float _1236 = fma(_1226, cbModelParam._m0[30u].z, fma(_1225, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1224)) - _1193;
        float _1237 = fma(_1226, cbModelParam._m0[31u].z, fma(_1225, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1224)) - _1197;
        float _1238 = fma(_1226, cbModelParam._m0[32u].z, fma(_1225, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1224)) - _1201;
        float _1242 = inversesqrt(dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238)));
        float _1255 = ((_1242 * _1236) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1193 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1242 * _1237) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1197 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1242 * _1238) / cbModelParam._m0[35u].z) + ((((((_1201 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        float _1292 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1259.x + (-0.5));
        float _1294 = _1292 * (_1259.y + (-0.5));
        float _1295 = _1292 * (_1259.z + (-0.5));
        float _1302 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1266.x + (-0.5));
        float _1304 = _1302 * (_1266.y + (-0.5));
        float _1305 = _1302 * (_1266.z + (-0.5));
        float _1312 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1273.x + (-0.5));
        float _1314 = _1312 * (_1273.y + (-0.5));
        float _1315 = _1312 * (_1273.z + (-0.5));
        float _1322 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1280.x + (-0.5));
        float _1324 = _1322 * (_1280.y + (-0.5));
        float _1325 = _1322 * (_1280.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_632, _633, _634), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4052 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1356 + 1.0))) + _1361) * _1326;
        float _1371 = _1294 * 0.5;
        float _1372 = _1304 * 0.5;
        float _1373 = _1314 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_632, _633, _634), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4085 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1398 + 1.0))) + _1403) * _1327;
        float _1413 = _1295 * 0.5;
        float _1414 = _1305 * 0.5;
        float _1415 = _1315 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_632, _633, _634), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4118 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1440 + 1.0))) + _1445) * _1328;
        _1462 = _1295;
        _1463 = _1294;
        _1464 = _1293;
        _1465 = _1305;
        _1466 = _1304;
        _1467 = _1303;
        _1468 = _1315;
        _1469 = _1314;
        _1470 = _1313;
        _1471 = _1328;
        _1472 = _1327;
        _1473 = _1326;
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1154;
        _1463 = _1154;
        _1464 = _1154;
        _1465 = _1154;
        _1466 = _1154;
        _1467 = _1154;
        _1468 = _1154;
        _1469 = _1154;
        _1470 = _1154;
        _1471 = _1154;
        _1472 = _1154;
        _1473 = _1154;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1166)) + _1166;
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1167)) + _1167;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1168)) + _1168;
    float _1509 = fma(_1488, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1486 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1488, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1486 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1488, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1486));
    float _1530 = _791 * 0.5;
    float _1531 = _792 * 0.5;
    float _1532 = _793 * 0.5;
    float _1533 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1536 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1539 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1573;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1546 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1153, _1157, _1160, _1163));
        float _1550 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1155, _1158, _1161, _1164));
        float _1554 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1561 = dot(vec4(cbModelParam._m0[39u]), vec4(_1530, _1531, _1532, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1584;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1575 = dot(vec4(cbModelParam._m0[40u]), vec4(_1530, _1531, _1532, 1.0));
        _1584 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1584 = 1.0;
    }
    float _1588 = (_1584 * cbModelParam._m0[1u].x) + (_1573 * (1.0 - cbModelParam._m0[1u].x));
    float _1598 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _635);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1598 : min(cbModelParam._m0[25u].z, _1598));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1647 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1651 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1655 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1658 = fma(_793, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791));
        float _1661 = fma(_793, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791));
        float _1664 = fma(_793, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791));
        float _1692;
        if (_1658 > 0.0)
        {
            _1692 = abs((1.0 - _1647) / _1658);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1647 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1692 = frontier_phi_14_12_ladder;
        }
        float _1862;
        if (_1661 > 0.0)
        {
            _1862 = abs((1.0 - _1651) / _1661);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1651 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1862 = frontier_phi_23_19_ladder;
        }
        float _2157;
        if (_1664 > 0.0)
        {
            _2157 = abs((1.0 - _1655) / _1664);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1655 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2157 = frontier_phi_35_30_ladder;
        }
        float _2159 = isnan(_1862) ? _1692 : (isnan(_1692) ? _1862 : min(_1692, _1862));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1658) + _1647;
        float _2165 = (_2160 * _1661) + _1651;
        float _2166 = (_2160 * _1664) + _1655;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2169 = (-1.0) - _2167;
        float _2171 = _2167 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2166 > _2171) || ((_2166 < _2169) || ((_2165 > _2171) || ((_2165 < _2169) || ((_2164 < _2169) || (_2164 > _2171))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2311 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2166, cbModelParam._m0[9u].z, fma(_2165, cbModelParam._m0[9u].y, _2164 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2166, cbModelParam._m0[10u].z, fma(_2165, cbModelParam._m0[10u].y, _2164 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2166, cbModelParam._m0[11u].z, fma(_2165, cbModelParam._m0[11u].y, _2164 * cbModelParam._m0[11u].x))), _1599);
            frontier_phi_13_35_ladder = _2311.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2311.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2311.x * cbModelParam._m0[1u].y;
        }
        _1680 = frontier_phi_13_35_ladder_2;
        _1682 = frontier_phi_13_35_ladder_1;
        _1684 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_791, _792, _793), _1599);
        _1680 = _1668.x * cbModelParam._m0[1u].y;
        _1682 = _1668.y * cbModelParam._m0[1u].y;
        _1684 = _1668.z * cbModelParam._m0[1u].y;
    }
    float _1688 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _635);
    float _1689 = isnan(_1688) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1688 : min(cbModelParam._m0[25u].w, _1688));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1743 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1747 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1751 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1754 = fma(_793, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791));
        float _1757 = fma(_793, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791));
        float _1760 = fma(_793, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791));
        float _1867;
        if (_1754 > 0.0)
        {
            _1867 = abs((1.0 - _1743) / _1754);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1743 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1867 = frontier_phi_25_21_ladder;
        }
        float _2184;
        if (_1757 > 0.0)
        {
            _2184 = abs((1.0 - _1747) / _1757);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1747 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2184 = frontier_phi_37_32_ladder;
        }
        float _2511;
        if (_1760 > 0.0)
        {
            _2511 = abs((1.0 - _1751) / _1760);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1751 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2511 = frontier_phi_47_44_ladder;
        }
        float _2513 = isnan(_2184) ? _1867 : (isnan(_1867) ? _2184 : min(_1867, _2184));
        float _2514 = isnan(_2511) ? _2513 : (isnan(_2513) ? _2511 : min(_2513, _2511));
        float _2518 = (_2514 * _1754) + _1743;
        float _2519 = (_2514 * _1757) + _1747;
        float _2520 = (_2514 * _1760) + _1751;
        float _2521 = _2514 * 9.9999997473787516355514526367188e-05;
        float _2522 = (-1.0) - _2521;
        float _2524 = _2521 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2520 > _2524) || ((_2520 < _2522) || ((_2519 > _2524) || ((_2519 < _2522) || ((_2518 < _2522) || (_2518 > _2524))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2520, cbModelParam._m0[17u].z, fma(_2519, cbModelParam._m0[17u].y, _2518 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2520, cbModelParam._m0[18u].z, fma(_2519, cbModelParam._m0[18u].y, _2518 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2520, cbModelParam._m0[19u].z, fma(_2519, cbModelParam._m0[19u].y, _2518 * cbModelParam._m0[19u].x))), _1689);
            frontier_phi_22_47_ladder = _2638.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2638.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2638.x * cbModelParam._m0[1u].z;
        }
        _1779 = frontier_phi_22_47_ladder_2;
        _1781 = frontier_phi_22_47_ladder_1;
        _1783 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_791, _792, _793), _1689);
        _1779 = _1763.x * cbModelParam._m0[1u].z;
        _1781 = _1763.y * cbModelParam._m0[1u].z;
        _1783 = _1763.z * cbModelParam._m0[1u].z;
    }
    float _1795 = ((((1.0 - _812) * ((_799 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_812 * _799)) * _783;
    float _1796 = _1795 * ((cbModelParam._m0[1u].w * (_1779 - _1680)) + _1680);
    float _1797 = _1795 * ((cbModelParam._m0[1u].w * (_1781 - _1682)) + _1682);
    float _1798 = _1795 * ((cbModelParam._m0[1u].w * (_1783 - _1684)) + _1684);
    float _1801 = fma(_1798, cbSceneParam._m0[89u].z, fma(_1797, cbSceneParam._m0[89u].y, _1796 * cbSceneParam._m0[89u].x));
    float _1804 = fma(_1798, cbSceneParam._m0[90u].z, fma(_1797, cbSceneParam._m0[90u].y, _1796 * cbSceneParam._m0[90u].x));
    float _1807 = fma(_1798, cbSceneParam._m0[91u].z, fma(_1797, cbSceneParam._m0[91u].y, _1796 * cbSceneParam._m0[91u].x));
    float _1841 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1845 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1849 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1853 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1854 = _1841 / _1853;
    float _1855 = _1845 / _1853;
    float _1856 = _1849 / _1853;
    float _2003;
    float _2004;
    float _2005;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1883 = ((uint(_1856 > cbSceneParam._m0[59u].y) + uint(_1856 > cbSceneParam._m0[59u].x)) + uint(_1856 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1884 = _1883 + 43u;
        uint _1892 = _1883 + 44u;
        uint _1900 = _1883 + 45u;
        uint _1908 = _1883 + 46u;
        float _1919 = fma(_1853, cbSceneParam._m0[_1884].w, fma(_1849, cbSceneParam._m0[_1884].z, fma(_1845, cbSceneParam._m0[_1884].y, _1841 * cbSceneParam._m0[_1884].x)));
        float _1923 = fma(_1853, cbSceneParam._m0[_1892].w, fma(_1849, cbSceneParam._m0[_1892].z, fma(_1845, cbSceneParam._m0[_1892].y, _1841 * cbSceneParam._m0[_1892].x)));
        float _1931 = fma(_1853, cbSceneParam._m0[_1908].w, fma(_1849, cbSceneParam._m0[_1908].z, fma(_1845, cbSceneParam._m0[_1908].y, _1841 * cbSceneParam._m0[_1908].x)));
        float _1936 = cbSceneParam._m0[33u].z * _1931;
        float _1938 = cbSceneParam._m0[33u].w * _1931;
        float _1941 = fma(_1853, cbSceneParam._m0[_1900].w, fma(_1849, cbSceneParam._m0[_1900].z, fma(_1845, cbSceneParam._m0[_1900].y, _1841 * cbSceneParam._m0[_1900].x))) / _1931;
        float _1989 = (cbSceneParam._m0[33u].x - sqrt(((_1855 * _1855) + (_1854 * _1854)) + (_1856 * _1856))) * cbSceneParam._m0[33u].y;
        float _4244 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1996 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1936 + _1919) / _1931, (_1938 + _1923) / _1931), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1938 + _1919) / _1931, (_1923 - _1936) / _1931), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 - _1936) / _1931, (_1923 - _1938) / _1931), _1941), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1919 - _1938) / _1931, (_1936 + _1923) / _1931), _1941), 0.0)).x), vec4(0.25)));
        _2003 = 1.0 - (_1996 * cbSceneParam._m0[34u].x);
        _2004 = 1.0 - (_1996 * cbSceneParam._m0[34u].y);
        _2005 = 1.0 - (_1996 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2003 = 1.0;
        _2004 = 1.0;
        _2005 = 1.0;
    }
    float _2069;
    float _2071;
    float _2073;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2057 = fma(_1853, cbSceneParam._m0[63u].w, fma(_1849, cbSceneParam._m0[63u].z, fma(_1845, cbSceneParam._m0[63u].y, _1841 * cbSceneParam._m0[63u].x)));
        float _2058 = fma(_1853, cbSceneParam._m0[60u].w, fma(_1849, cbSceneParam._m0[60u].z, fma(_1845, cbSceneParam._m0[60u].y, _1841 * cbSceneParam._m0[60u].x))) / _2057;
        float _2059 = fma(_1853, cbSceneParam._m0[61u].w, fma(_1849, cbSceneParam._m0[61u].z, fma(_1845, cbSceneParam._m0[61u].y, _1841 * cbSceneParam._m0[61u].x))) / _2057;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2058 >= cbSceneParam._m0[64u].x) && (_2059 >= cbSceneParam._m0[64u].y)) && (_2058 <= cbSceneParam._m0[64u].z)) && (_2059 <= cbSceneParam._m0[64u].w))
        {
            float _2197 = fma(_1853, cbSceneParam._m0[62u].w, fma(_1849, cbSceneParam._m0[62u].z, fma(_1845, cbSceneParam._m0[62u].y, _1841 * cbSceneParam._m0[62u].x))) / _2057;
            float _2201 = isnan(cbSceneParam._m0[41u].w) ? _2197 : (isnan(_2197) ? cbSceneParam._m0[41u].w : max(_2197, cbSceneParam._m0[41u].w));
            float _2244 = (cbSceneParam._m0[33u].x - sqrt(((_1855 * _1855) + (_1854 * _1854)) + (_1856 * _1856))) * cbSceneParam._m0[33u].y;
            float _4260 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
            float _2251 = (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2058, cbSceneParam._m0[33u].w + _2059), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2058, _2059 - cbSceneParam._m0[33u].z), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2058 - cbSceneParam._m0[33u].z, _2059 - cbSceneParam._m0[33u].w), _2201), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2058 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2059), _2201), 0.0)).x), vec4(0.25)));
            float _2255 = 1.0 - (_2251 * cbSceneParam._m0[34u].x);
            float _2256 = 1.0 - (_2251 * cbSceneParam._m0[34u].y);
            float _2257 = 1.0 - (_2251 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2257) ? _2005 : (isnan(_2005) ? _2257 : min(_2005, _2257));
            frontier_phi_34_33_ladder_1 = isnan(_2256) ? _2004 : (isnan(_2004) ? _2256 : min(_2004, _2256));
            frontier_phi_34_33_ladder_2 = isnan(_2255) ? _2003 : (isnan(_2003) ? _2255 : min(_2003, _2255));
        }
        else
        {
            frontier_phi_34_33_ladder = _2005;
            frontier_phi_34_33_ladder_1 = _2004;
            frontier_phi_34_33_ladder_2 = _2003;
        }
        _2069 = frontier_phi_34_33_ladder_2;
        _2071 = frontier_phi_34_33_ladder_1;
        _2073 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2069 = _2003;
        _2071 = _2004;
        _2073 = _2005;
    }
    uvec4 _2078 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _2080 = _2078.x * 14u;
    uint _2081 = _2080 + 13u;
    float _2088 = _783 + (-1.0);
    float _2093 = (cbLight._m0[_2081].x * _2088) + 1.0;
    float _2094 = (cbLight._m0[_2081].y * _2088) + 1.0;
    float _2095 = (cbLight._m0[_2081].z * _2088) + 1.0;
    float _2096 = (cbLight._m0[_2081].w * _2088) + 1.0;
    uint _2097 = _2080 + 5u;
    float _2103 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
    uint _2107 = _2080 + 4u;
    float _2116 = isnan(1.0) ? _2093 : (isnan(_2093) ? 1.0 : min(_2093, 1.0));
    uint _2120 = _2080 | 1u;
    float _2131 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_632, _633, _634));
    float _2134 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_632, _633, _634));
    float _4296 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _4307 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2139 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * 0.3183098733425140380859375;
    float _2141 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * 0.3183098733425140380859375;
    float _2148 = ((cbLight._m0[_2097].x * _2103) * _2141) + (((cbLight._m0[_2107].x * _2069) * _2116) * _2139);
    float _2149 = ((_2103 * cbLight._m0[_2097].y) * _2141) + (((cbLight._m0[_2107].y * _2071) * _2116) * _2139);
    float _2150 = ((_2103 * cbLight._m0[_2097].z) * _2141) + (((cbLight._m0[_2107].z * _2073) * _2116) * _2139);
    uvec4 _2154 = floatBitsToUint(cbLight._m0[_2080 + 12u]);
    bool _2156 = _2154.x == 0u;
    float _2258;
    float _2260;
    float _2262;
    if (_2156)
    {
        _2258 = _2148;
        _2260 = _2149;
        _2262 = _2150;
    }
    else
    {
        uint _2266 = _2080 + 6u;
        float _2282 = (dot(vec3(cbLight._m0[_2080 + 2u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _2283 = _2282 * _2282;
        float _4318 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2284 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2285 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2258 = (((cbLight._m0[_2266].x * 0.3183098733425140380859375) * _2284) * _2285) + _2148;
        _2260 = (((cbLight._m0[_2266].y * 0.3183098733425140380859375) * _2284) * _2285) + _2149;
        _2262 = (((cbLight._m0[_2266].z * 0.3183098733425140380859375) * _2284) * _2285) + _2150;
    }
    bool _2265 = _2154.y == 0u;
    float _2320;
    float _2322;
    float _2324;
    if (_2265)
    {
        _2320 = _2258;
        _2322 = _2260;
        _2324 = _2262;
    }
    else
    {
        uint _2482 = _2080 + 7u;
        float _2498 = (dot(vec3(cbLight._m0[_2080 + 3u].xyz), vec3(_632, _633, _634)) * 0.5) + 0.5;
        float _2499 = _2498 * _2498;
        float _4334 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2500 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2501 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2320 = (((cbLight._m0[_2482].x * 0.3183098733425140380859375) * _2500) * _2501) + _2258;
        _2322 = (((cbLight._m0[_2482].y * 0.3183098733425140380859375) * _2500) * _2501) + _2260;
        _2324 = (((cbLight._m0[_2482].z * 0.3183098733425140380859375) * _2500) * _2501) + _2262;
    }
    uint _2327 = _2080 + 8u;
    float _2340 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _635) * 0.949999988079071044921875);
    float _2341 = _2340 * _2340;
    float _2342 = cbLight._m0[_2080].x + _712;
    float _2343 = cbLight._m0[_2080].y + _713;
    float _2344 = cbLight._m0[_2080].z + _714;
    float _2348 = inversesqrt(dot(vec3(_2342, _2343, _2344), vec3(_2342, _2343, _2344)));
    float _2349 = _2348 * _2342;
    float _2350 = _2348 * _2343;
    float _2351 = _2348 * _2344;
    float _2352 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2080].xyz));
    float _4350 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _4361 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _2356 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2357 = dot(vec3(_632, _633, _634), vec3(_2349, _2350, _2351));
    float _4372 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
    float _2360 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2361 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2349, _2350, _2351));
    float _4383 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2365 = _2341 * _2341;
    float _2369 = ((_2360 * _2360) * (_2365 + (-1.0))) + 1.0;
    float _2380 = (exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2381 = 1.0 - _2341;
    float _2392 = (0.5 / (((_2356 * ((_2355 * _2381) + _2341)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2381) + _2341) * _2355))) * _2355;
    float _4394 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2394 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2365 / ((_2369 * _2369) * 3.141590118408203125));
    uint _2408 = _2080 + 9u;
    float _2419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2120].w)) * _635) * 0.949999988079071044921875);
    float _2420 = _2419 * _2419;
    float _2421 = cbLight._m0[_2120].x + _712;
    float _2422 = cbLight._m0[_2120].y + _713;
    float _2423 = cbLight._m0[_2120].z + _714;
    float _2427 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
    float _2428 = _2427 * _2421;
    float _2429 = _2427 * _2422;
    float _2430 = _2427 * _2423;
    float _2431 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2120].xyz));
    float _4405 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2434 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2435 = dot(vec3(_632, _633, _634), vec3(_2428, _2429, _2430));
    float _4416 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2438 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2439 = dot(vec3(cbLight._m0[_2120].xyz), vec3(_2428, _2429, _2430));
    float _4427 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2443 = _2420 * _2420;
    float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
    float _2456 = (exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2457 = 1.0 - _2420;
    float _2467 = (0.5 / (((_2356 * ((_2434 * _2457) + _2420)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2457) + _2420) * _2434))) * _2434;
    float _4438 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2469 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
    float _2479 = (((_2456 * cbLight._m0[_2408].x) * _2469) * _2103) + ((((cbLight._m0[_2327].x * _2069) * _2380) * _2394) * _2116);
    float _2480 = (((_2456 * cbLight._m0[_2408].y) * _2469) * _2103) + ((((cbLight._m0[_2327].y * _2071) * _2380) * _2394) * _2116);
    float _2481 = (((_2456 * cbLight._m0[_2408].z) * _2469) * _2103) + ((((cbLight._m0[_2327].z * _2073) * _2380) * _2394) * _2116);
    float _2537;
    float _2539;
    float _2541;
    if (_2156)
    {
        _2537 = _2479;
        _2539 = _2480;
        _2541 = _2481;
    }
    else
    {
        uint _2543 = _2080 + 2u;
        uint _2547 = _2080 + 10u;
        float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2543].w)) * _635) * 0.949999988079071044921875);
        float _2562 = _2561 * _2561;
        float _2563 = cbLight._m0[_2543].x + _712;
        float _2564 = cbLight._m0[_2543].y + _713;
        float _2565 = cbLight._m0[_2543].z + _714;
        float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
        float _2570 = _2569 * _2563;
        float _2571 = _2569 * _2564;
        float _2572 = _2569 * _2565;
        float _2573 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2543].xyz));
        float _4449 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2577 = dot(vec3(_632, _633, _634), vec3(_2570, _2571, _2572));
        float _4460 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2580 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2581 = dot(vec3(cbLight._m0[_2543].xyz), vec3(_2570, _2571, _2572));
        float _4471 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2585 = _2562 * _2562;
        float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
        float _2598 = (exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2599 = 1.0 - _2562;
        float _2609 = (0.5 / (((_2356 * ((_2576 * _2599) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2599) + _2562) * _2576))) * _2576;
        float _4482 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2611 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
        float _2612 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
        _2537 = (((_2598 * cbLight._m0[_2547].x) * _2611) * _2612) + _2479;
        _2539 = (((_2598 * cbLight._m0[_2547].y) * _2611) * _2612) + _2480;
        _2541 = (((_2598 * cbLight._m0[_2547].z) * _2611) * _2612) + _2481;
    }
    float _2643;
    float _2645;
    float _2647;
    if (_2265)
    {
        _2643 = _2537;
        _2645 = _2539;
        _2647 = _2541;
    }
    else
    {
        uint _2654 = _2080 + 3u;
        uint _2658 = _2080 + 11u;
        float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2654].w)) * _635) * 0.949999988079071044921875);
        float _2673 = _2672 * _2672;
        float _2674 = cbLight._m0[_2654].x + _712;
        float _2675 = cbLight._m0[_2654].y + _713;
        float _2676 = cbLight._m0[_2654].z + _714;
        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
        float _2681 = _2680 * _2674;
        float _2682 = _2680 * _2675;
        float _2683 = _2680 * _2676;
        float _2684 = dot(vec3(_632, _633, _634), vec3(cbLight._m0[_2654].xyz));
        float _4498 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2687 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2688 = dot(vec3(_632, _633, _634), vec3(_2681, _2682, _2683));
        float _4509 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2692 = dot(vec3(cbLight._m0[_2654].xyz), vec3(_2681, _2682, _2683));
        float _4520 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2696 = _2673 * _2673;
        float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
        float _2709 = (exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2710 = 1.0 - _2673;
        float _2720 = (0.5 / (((_2356 * ((_2687 * _2710) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2356 * _2710) + _2673) * _2687))) * _2687;
        float _4531 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2722 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
        float _2723 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2643 = (((_2709 * cbLight._m0[_2658].x) * _2722) * _2723) + _2537;
        _2645 = (((_2709 * cbLight._m0[_2658].y) * _2722) * _2723) + _2539;
        _2647 = (((_2709 * cbLight._m0[_2658].z) * _2722) * _2723) + _2541;
    }
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    float _2799;
    if (_2078.y == 0u)
    {
        uvec4 _2744 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2745 = _2744.x;
        uint _2756 = uint((float(_2744.y) * floor(float(uint(cbSceneParam._m0[85u].y * _721) / _2745))) + floor(float(uint(cbSceneParam._m0[85u].x * _720) / _2745)));
        float _2766 = (log2(_1856 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2767 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        uint _2770 = uint(isnan(14.0) ? _2767 : (isnan(_2767) ? 14.0 : min(_2767, 14.0)));
        uvec4 _2775 = texelFetch(g_lightClusterGridBuffer, int(((_2770 << 2u) + (_2756 << 6u)) >> 2u));
        uint _2776 = _2775.x;
        uint _2777 = _2744.z;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((((1u << ((_2777 >> 4u) & 15u)) + 4294967295u) & _2776) == 0u) || ((_2777 & 240u) == 0u))
        {
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
        }
        else
        {
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _3001 = 0.0;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            uint _3007 = 0u;
            uint _3016;
            bool _3017;
            for (;;)
            {
                _3016 = texelFetch(g_lightClassification, int((((_2770 << 5u) + (_2756 << 9u)) + (_3007 << 2u)) >> 2u)).x;
                _3017 = _3016 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3017)
                {
                    frontier_phi_66_pred = _3006;
                    frontier_phi_66_pred_1 = _3005;
                    frontier_phi_66_pred_2 = _3004;
                    frontier_phi_66_pred_3 = _3003;
                    frontier_phi_66_pred_4 = _3002;
                    frontier_phi_66_pred_5 = _3001;
                }
                else
                {
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    uint _3131;
                    _3125 = _3001;
                    _3126 = _3002;
                    _3127 = _3003;
                    _3128 = _3004;
                    _3129 = _3005;
                    _3130 = _3006;
                    _3131 = _3016;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    for (;;)
                    {
                        uint _3135 = uint(findLSB(_3131)) + (_3007 << 5u);
                        uint _3132 = (_3131 + 4294967295u) & _3131;
                        uint _3137 = _3135 * 48u;
                        vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3137)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3137 + 3u)).x));
                        uint _3157 = (_3135 * 48u) + 4u;
                        vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 3u)).x));
                        uint _3176 = (_3135 * 48u) + 8u;
                        vec3 _3187 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3176)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3176 + 2u)).x));
                        float _3191 = _3151.x - _1854;
                        float _3192 = _3151.y - _1855;
                        float _3193 = _3151.z - _1856;
                        float _3194 = dot(vec3(_3191, _3192, _3193), vec3(_3191, _3192, _3193));
                        float _3197 = inversesqrt(_3194);
                        float _3198 = _3197 * _3191;
                        float _3199 = _3197 * _3192;
                        float _3200 = _3197 * _3193;
                        float _3201 = dot(vec3(_739, _742, _745), vec3(_3198, _3199, _3200));
                        float _3206 = 1.0 - (_3194 * _3151.w);
                        float _4557 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3207 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3208 = sqrt(_3194) * _3170.w;
                        float _3211 = 1.39999997615814208984375 / (_3208 + 1.39999997615814208984375);
                        float _3212 = _3211 * _3211;
                        float _3215 = ((1.0 - _3212) * _3201) + _3212;
                        float _3218 = _3208 * _3208;
                        float _3222 = ((isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * _3207) / ((_3218 * 0.699999988079071044921875) + 1.0);
                        float _3226 = (-0.0) - _1854;
                        float _3227 = (-0.0) - _1855;
                        float _3228 = (-0.0) - _1856;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3233 = _3232 * _3226;
                        float _3234 = _3232 * _3227;
                        float _3235 = _3232 * _3228;
                        float _3242 = exp2(log2(1.0 / ((_3218 * 3.5) + 5.0)) * 0.25);
                        float _3243 = 1.0 - _799;
                        float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                        float _3251 = _3250 * _3250;
                        float _3252 = _3251 * _3251;
                        float _3253 = _3233 + _3198;
                        float _3254 = _3234 + _3199;
                        float _3255 = _3235 + _3200;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3263 = dot(vec3(_739, _742, _745), vec3(_3233, _3234, _3235));
                        float _4573 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                        float _3267 = dot(vec3(_739, _742, _745), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                        float _4584 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                        float _3275 = _3211 * _3251;
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3201) + _3276;
                        float _4595 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3280 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3281 = 1.0 - _3251;
                        float _3291 = (0.5 / (((_3280 * ((_3266 * _3281) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3251) * _3266))) * _3280;
                        float _4606 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3302 = (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) / ((_3274 * _3274) * ((_3218 * 2.1991131305694580078125) + 3.141590118408203125))) * _3207;
                        _3060 = (_3222 * _3170.x) + _3128;
                        _3061 = (_3222 * _3170.y) + _3129;
                        _3062 = (_3222 * _3170.z) + _3130;
                        _3057 = (_3302 * _3187.x) + _3125;
                        _3058 = (_3302 * _3187.y) + _3126;
                        _3059 = (_3302 * _3187.z) + _3127;
                        if (_3132 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3125 = _3057;
                            _3126 = _3058;
                            _3127 = _3059;
                            _3128 = _3060;
                            _3129 = _3061;
                            _3130 = _3062;
                            _3131 = _3132;
                        }
                    }
                    frontier_phi_66_pred = _3062;
                    frontier_phi_66_pred_1 = _3061;
                    frontier_phi_66_pred_2 = _3060;
                    frontier_phi_66_pred_3 = _3059;
                    frontier_phi_66_pred_4 = _3058;
                    frontier_phi_66_pred_5 = _3057;
                }
                _2867 = frontier_phi_66_pred;
                _2865 = frontier_phi_66_pred_1;
                _2863 = frontier_phi_66_pred_2;
                _2861 = frontier_phi_66_pred_3;
                _2859 = frontier_phi_66_pred_4;
                _2857 = frontier_phi_66_pred_5;
                uint _3008 = _3007 + 1u;
                if (_3008 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3001 = _2857;
                    _3002 = _2859;
                    _3003 = _2861;
                    _3004 = _2863;
                    _3005 = _2865;
                    _3006 = _2867;
                    _3007 = _3008;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
        }
        uvec4 _2870 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2871 = _2870.z;
        uint _2873 = (_2871 >> 8u) & 15u;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        if (((4294967295u << _2873) & _2776) == 0u)
        {
            _2969 = _2856;
            _2971 = _2858;
            _2973 = _2860;
            _2975 = _2862;
            _2977 = _2864;
            _2979 = _2866;
        }
        else
        {
            float _2994 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
            float _2995 = _2994 * _1854;
            float _2996 = _2994 * _1855;
            float _2997 = _2994 * _1856;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2873 < ((_2871 >> 12u) & 15u))
            {
                float _2970;
                float _2972;
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _3108 = _2856;
                float _3109 = _2858;
                float _3110 = _2860;
                float _3111 = _2862;
                float _3112 = _2864;
                float _3113 = _2866;
                uint _3114 = _2873;
                uint _3123;
                bool _3124;
                for (;;)
                {
                    _3123 = texelFetch(g_lightClassification, int((((_2770 << 5u) + (_2756 << 9u)) + (_3114 << 2u)) >> 2u)).x;
                    _3124 = _3123 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3124)
                    {
                        frontier_phi_72_pred = _3113;
                        frontier_phi_72_pred_1 = _3112;
                        frontier_phi_72_pred_2 = _3111;
                        frontier_phi_72_pred_3 = _3110;
                        frontier_phi_72_pred_4 = _3109;
                        frontier_phi_72_pred_5 = _3108;
                    }
                    else
                    {
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3320 = _3108;
                        float _3321 = _3109;
                        float _3322 = _3110;
                        float _3323 = _3111;
                        float _3324 = _3112;
                        float _3325 = _3113;
                        uint _3326 = _3123;
                        uint _3327;
                        vec4 _3352;
                        float _3353;
                        vec4 _3368;
                        vec3 _3380;
                        vec4 _3395;
                        vec4 _3410;
                        float _3456;
                        bool _3457;
                        for (;;)
                        {
                            uint _3337 = ((_3114 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3326));
                            _3327 = (_3326 + 4294967295u) & _3326;
                            uint _3339 = _3337 * 40u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            _3353 = _3352.w;
                            uint _3355 = (_3337 * 40u) + 4u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3370 = (_3337 * 40u) + 8u;
                            _3380 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x));
                            uint _3382 = (_3337 * 40u) + 16u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3337 * 40u) + 20u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            uint _3412 = (_3337 * 40u) + 24u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3431 = (_3337 * 40u) + 28u;
                            vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            _3456 = fma(_1856, _3444.z, fma(_1855, _3444.y, _3444.x * _1854)) + _3444.w;
                            _3457 = !((fma(_1856, _3425.z, fma(_1855, _3425.y, _3425.x * _1854)) + _3425.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3457)
                            {
                                float _3484 = _3352.x - _1854;
                                float _3485 = _3352.y - _1855;
                                float _3486 = _3352.z - _1856;
                                float _3487 = dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486));
                                float _3490 = inversesqrt(_3487);
                                float _3491 = _3490 * _3484;
                                float _3492 = _3490 * _3485;
                                float _3493 = _3490 * _3486;
                                float _3497 = 1.0 - (_3487 / (_3353 * _3353));
                                float _4617 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3502 = sqrt(_3487) * _3368.w;
                                float _3504 = 1.39999997615814208984375 / (_3502 + 1.39999997615814208984375);
                                float _3505 = _3504 * _3504;
                                float _3508 = ((1.0 - _3505) * dot(vec3(_3491, _3492, _3493), vec3(_739, _742, _745))) + _3505;
                                float _3511 = _3502 * _3502;
                                float _3515 = (fma(_1856, _3395.z, fma(_1855, _3395.y, _3395.x * _1854)) + _3395.w) / _3456;
                                float _3516 = (fma(_1856, _3410.z, fma(_1855, _3410.y, _3410.x * _1854)) + _3410.w) / _3456;
                                float _3520 = 1.0 - dot(vec2(_3515, _3516), vec2(_3515, _3516));
                                float _4633 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3522 = _3521 * (((isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))) * _3498) / ((_3511 * 0.699999988079071044921875) + 1.0));
                                float _3534 = exp2(log2(1.0 / ((_3511 * 3.5) + 5.0)) * 0.25);
                                float _3535 = 1.0 - _799;
                                float _3542 = sqrt(1.0 - ((1.0 - (_3535 * _3535)) * (1.0 - (_3534 * _3534))));
                                float _3543 = _3542 * _3542;
                                float _3544 = _3543 * _3543;
                                float _3545 = _3491 - _2995;
                                float _3546 = _3492 - _2996;
                                float _3547 = _3493 - _2997;
                                float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                                float _3555 = dot(vec3(_739, _742, _745), vec3((-0.0) - _2995, (-0.0) - _2996, (-0.0) - _2997));
                                float _4644 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3558 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3559 = dot(vec3(_739, _742, _745), vec3(_3551 * _3545, _3551 * _3546, _3551 * _3547));
                                float _4655 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3562 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3566 = ((_3562 * _3562) * (_3544 + (-1.0))) + 1.0;
                                float _3567 = _3504 * _3543;
                                float _3568 = _3567 * _3567;
                                float _3574 = ((1.0 - _3568) * dot(vec3(_739, _742, _745), vec3(_3491, _3492, _3493))) + _3568;
                                float _4666 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3576 = 1.0 - _3543;
                                float _3586 = (0.5 / (((_3575 * ((_3558 * _3576) + _3543)) + 9.9999999392252902907785028219223e-09) + (((_3575 * _3576) + _3543) * _3558))) * _3575;
                                float _4677 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3596 = (_3521 * _3498) * (((_3544 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3566 * _3566) * ((_3511 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3522 * _3368.y;
                                frontier_phi_78_pred_1 = _3522 * _3368.x;
                                frontier_phi_78_pred_2 = _3596 * _3380.z;
                                frontier_phi_78_pred_3 = _3596 * _3380.y;
                                frontier_phi_78_pred_4 = _3596 * _3380.x;
                                frontier_phi_78_pred_5 = _3522 * _3368.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3604 = frontier_phi_78_pred;
                            _3603 = frontier_phi_78_pred_1;
                            _3602 = frontier_phi_78_pred_2;
                            _3601 = frontier_phi_78_pred_3;
                            _3600 = frontier_phi_78_pred_4;
                            _3605 = frontier_phi_78_pred_5;
                            _3310 = _3603 + _3323;
                            _3311 = _3604 + _3324;
                            _3312 = _3605 + _3325;
                            _3307 = _3600 + _3320;
                            _3308 = _3601 + _3321;
                            _3309 = _3602 + _3322;
                            if (_3327 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3327;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3312;
                        frontier_phi_72_pred_1 = _3311;
                        frontier_phi_72_pred_2 = _3310;
                        frontier_phi_72_pred_3 = _3309;
                        frontier_phi_72_pred_4 = _3308;
                        frontier_phi_72_pred_5 = _3307;
                    }
                    _2980 = frontier_phi_72_pred;
                    _2978 = frontier_phi_72_pred_1;
                    _2976 = frontier_phi_72_pred_2;
                    _2974 = frontier_phi_72_pred_3;
                    _2972 = frontier_phi_72_pred_4;
                    _2970 = frontier_phi_72_pred_5;
                    uint _3115 = _3114 + 1u;
                    if (_3115 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3108 = _2970;
                        _3109 = _2972;
                        _3110 = _2974;
                        _3111 = _2976;
                        _3112 = _2978;
                        _3113 = _2980;
                        _3114 = _3115;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2980;
                frontier_phi_60_61_ladder_1 = _2978;
                frontier_phi_60_61_ladder_2 = _2974;
                frontier_phi_60_61_ladder_3 = _2972;
                frontier_phi_60_61_ladder_4 = _2970;
                frontier_phi_60_61_ladder_5 = _2976;
            }
            else
            {
                frontier_phi_60_61_ladder = _2866;
                frontier_phi_60_61_ladder_1 = _2864;
                frontier_phi_60_61_ladder_2 = _2860;
                frontier_phi_60_61_ladder_3 = _2858;
                frontier_phi_60_61_ladder_4 = _2856;
                frontier_phi_60_61_ladder_5 = _2862;
            }
            _2969 = frontier_phi_60_61_ladder_4;
            _2971 = frontier_phi_60_61_ladder_3;
            _2973 = frontier_phi_60_61_ladder_2;
            _2975 = frontier_phi_60_61_ladder_5;
            _2977 = frontier_phi_60_61_ladder_1;
            _2979 = frontier_phi_60_61_ladder;
        }
        float _2984 = isnan(1.0) ? _783 : (isnan(_783) ? 1.0 : min(_783, 1.0));
        _2789 = (_2984 * _2975) + _2320;
        _2791 = (_2984 * _2977) + _2322;
        _2793 = (_2984 * _2979) + _2324;
        _2795 = ((_2969 * 0.039999999105930328369140625) * _2984) + _2643;
        _2797 = ((_2971 * 0.039999999105930328369140625) * _2984) + _2645;
        _2799 = ((_2973 * 0.039999999105930328369140625) * _2984) + _2647;
    }
    else
    {
        _2789 = _2320;
        _2791 = _2322;
        _2793 = _2324;
        _2795 = _2643;
        _2797 = _2645;
        _2799 = _2647;
    }
    float _4693 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4704 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4715 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    uint _2819 = _236 + 6u;
    float _2827 = _720 / cbSceneParam._m0[86u].x;
    float _2828 = _721 / cbSceneParam._m0[86u].y;
    vec4 _2842 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2844 = _2842.x;
    float _2845 = _2842.y;
    float _2846 = _2842.z;
    float _2847 = _2842.w;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2881 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2882 = _2881 / _653;
        float _2893 = _2882 * _705;
        float _2894 = _706 * _2882;
        float _2895 = (-0.0) - _2894;
        float _2897 = _2882 * _707;
        float _2899 = (cbSceneParam._m0[77u].w * _2895) / _2881;
        float _2900 = _2899 + cbSceneParam._m0[79u].w;
        float _2901 = cbSceneParam._m0[79u].w - _2894;
        float _2907 = sqrt(((_2893 * _2893) + (_2894 * _2894)) + (_2897 * _2897));
        float _2910 = (1.0 - (cbSceneParam._m0[77u].w / _2881)) * _2907;
        float _2915 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2917 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3070;
        if (abs((_2895 - _2899) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3070 = ((((_2900 > 0.0) ? exp2(_2915 * _2900) : (2.0 - exp2(_2917 * _2900))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2910;
        }
        else
        {
            float _3030 = 1.0 / cbSceneParam._m0[80u].x;
            float _3031 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : max(_2900, _2901));
            float _3032 = isnan(_2901) ? _2900 : (isnan(_2900) ? _2901 : min(_2900, _2901));
            float _3041 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : min(_3031, 0.0));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            _3070 = ((abs(_2907 / _2895) * cbSceneParam._m0[80u].y) * ((((_3041 - _3042) * 2.0) - ((exp2(_2915 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0)))) - exp2(_2915 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))))) * _3030)) - ((exp2(_2917 * _3041) - exp2(_2917 * _3042)) * _3030))) + (_2910 * cbSceneParam._m0[80u].z);
        }
        vec4 _3072 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2827, _2828, 1.0), 0.0);
        float _3081 = exp2((_3070 * (-1.44269502162933349609375)) * (1.0 - _3072.w));
        float _3082 = log2(_3081);
        float _3098 = log2(_2847);
        _2919 = (exp2(_3098 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].x)) * _3072.x) / cbSceneParam._m0[78u].x)) + _2844;
        _2921 = (exp2(_3098 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].y)) * _3072.y) / cbSceneParam._m0[78u].y)) + _2845;
        _2923 = (exp2(_3098 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3082 * cbSceneParam._m0[78u].z)) * _3072.z) / cbSceneParam._m0[78u].z)) + _2846;
        _2925 = _3081 * _2847;
    }
    else
    {
        _2919 = _2844;
        _2921 = _2845;
        _2923 = _2846;
        _2925 = _2847;
    }
    float _2937 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2938 = _2937 == 3.0;
    float _2939 = log2(_2925);
    float _2946 = exp2(_2939 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2789 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _783))) + ((_2795 + ((isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2947 = exp2(_2939 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2791 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _783))) + ((_2797 + ((isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2948 = exp2(_2939 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2793 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _783))) + ((_2799 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1588)) * cbPerFrame._m0[3u].x));
    float _2957 = (_2937 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2957 * (_2938 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2919)));
    SV_Target.y = _2957 * (_2938 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2921)));
    SV_Target.z = _2957 * (_2938 ? _2948 : (_2948 + (cbSceneParam._m0[72u].w * _2923)));
    SV_Target.w = cbInstanceData._m0[_2819].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2819].w;
}


