#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1091;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _243 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _244 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3399 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3410 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3421 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _259 = _254 + 1u;
    uint _263 = _254 + 2u;
    float _272 = sqrt(((cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x));
    float _273 = _272 * TEXCOORD.z;
    float _274 = _272 * TEXCOORD.w;
    vec4 _287 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _273) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    vec4 _311 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _316 = _311.x * cbMtdParam._m0[11u].x;
    float _317 = _311.y * cbMtdParam._m0[11u].y;
    float _318 = _311.z * cbMtdParam._m0[11u].z;
    vec4 _337 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _273) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _274) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _375 = _373.x;
    float _385 = dot(vec4(_375, _373.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _402 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_375 - _385) * cbMtdParam._m0[24u].x) + _385) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3432 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
    float _410 = (_403 * ((_337.x * cbMtdParam._m0[12u].x) - _316)) + _316;
    float _411 = (_403 * ((_337.y * cbMtdParam._m0[12u].y) - _317)) + _317;
    float _412 = (_403 * ((_337.z * cbMtdParam._m0[12u].z) - _318)) + _318;
    float _416 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _287.x) * _410;
    float _419 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _287.y) * _411;
    float _422 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _287.z) * _412;
    float _429 = ((_410 - _416) * (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) + _416;
    float _430 = ((_411 - _419) * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) + _419;
    float _431 = ((_412 - _422) * (isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0)))) + _422;
    vec4 _444 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _273) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _274) + cbTextureTilingScale._m0[20u].w));
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _273) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _274) + cbTextureTilingScale._m0[4u].w));
    vec4 _486 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _488 = _486.x;
    float _489 = _486.y;
    float _490 = _486.z;
    float _499 = ((_469.z - _490) * _403) + _490;
    float _502 = ((((_469.x - _488) * _403) + _488) * 2.0) + (-1.0);
    float _503 = ((((_469.y - _489) * _403) + _489) * 2.0) + (-1.0);
    float _504 = dot(vec2(_502, _503), vec2(_502, _503));
    float _3443 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _509 = sqrt(1.0 - (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))));
    vec4 _531 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _543 = (_502 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_444.x * 2.0) + (-1.0)))) + (((_531.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _544 = (_503 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_444.y * 2.0) + (-1.0)))) + (((_531.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _549 = (((_444.z - _499) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _499;
    float _553 = ((_531.z - _549) * cbMtdParam._m0[19u].w) + _549;
    float _555 = cbMtdParam._m0[22u].x + _531.w;
    float _558 = fma(_509, _220 * NORMAL.x, fma(_544, _227 * TANGENT.x, (_213 * _205) * _543));
    float _561 = fma(_509, _220 * NORMAL.y, fma(_544, _227 * TANGENT.y, (_213 * _206) * _543));
    float _564 = fma(_509, _220 * NORMAL.z, fma(_544, _227 * TANGENT.z, (_213 * _207) * _543));
    float _568 = inversesqrt(dot(vec3(_558, _561, _564), vec3(_558, _561, _564)));
    float _569 = _568 * _558;
    float _570 = _568 * _561;
    float _571 = _568 * _564;
    float _3454 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _572 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3476 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _3487 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3498 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _590 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _642 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _632);
    float _643 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _632);
    float _644 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _632);
    float _648 = inversesqrt(dot(vec3(_642, _643, _644), vec3(_642, _643, _644)));
    float _649 = _642 * _648;
    float _650 = _643 * _648;
    float _651 = _644 * _648;
    float _657 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _658 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _676 = fma(_571, cbSceneParam._m0[5u].z, fma(_570, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _569));
    float _679 = fma(_571, cbSceneParam._m0[6u].z, fma(_570, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _569));
    float _682 = fma(_571, cbSceneParam._m0[7u].z, fma(_570, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _569));
    uint _696 = (_254 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _702 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0)))) * cbInstanceData._m0[_696].x;
    float _703 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * cbInstanceData._m0[_696].y;
    float _704 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * cbInstanceData._m0[_696].z;
    float _3509 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _3520 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
    float _3531 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
    vec4 _716 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _657, cbSceneParam._m0[86u].y * _658));
    float _720 = ((isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * TEXCOORD_5.w) * _716.x;
    float _721 = dot(vec3(_569, _570, _571), vec3(_649, _650, _651));
    float _724 = _721 * 2.0;
    float _728 = (_724 * _569) - _649;
    float _729 = (_724 * _570) - _650;
    float _730 = (_724 * _571) - _651;
    float _734 = abs(dot(vec3(_649, _650, _651), vec3(_569, _570, _571)));
    float _3542 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _736 = sqrt(_572);
    float _749 = exp2((_736 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_736 * 3.0));
    float _781 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1090;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _815 = fma(_789, cbModelParam._m0[26u].z, fma(_785, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781));
        float _819 = fma(_789, cbModelParam._m0[27u].z, fma(_785, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781));
        float _823 = fma(_789, cbModelParam._m0[28u].z, fma(_785, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781));
        float _848 = _781 + _569;
        float _849 = _785 + _570;
        float _850 = _789 + _571;
        float _860 = fma(_850, cbModelParam._m0[26u].z, fma(_849, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _848)) - _815;
        float _861 = fma(_850, cbModelParam._m0[27u].z, fma(_849, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _848)) - _819;
        float _862 = fma(_850, cbModelParam._m0[28u].z, fma(_849, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _848)) - _823;
        float _866 = inversesqrt(dot(vec3(_860, _861, _862), vec3(_860, _861, _862)));
        float _879 = ((_866 * _860) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_815 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_866 * _861) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_819 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_866 * _862) / cbModelParam._m0[34u].z) + ((((((_823 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_879, _880, _881), 0.0);
        float _918 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_884.x + (-0.5));
        float _920 = _918 * (_884.y + (-0.5));
        float _921 = _918 * (_884.z + (-0.5));
        float _928 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_891.x + (-0.5));
        float _930 = _928 * (_891.y + (-0.5));
        float _931 = _928 * (_891.z + (-0.5));
        float _938 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _939 = _938 * (_898.x + (-0.5));
        float _940 = _938 * (_898.y + (-0.5));
        float _941 = _938 * (_898.z + (-0.5));
        float _948 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_905.x + (-0.5));
        float _950 = _948 * (_905.y + (-0.5));
        float _951 = _948 * (_905.z + (-0.5));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = _919 * 0.5;
        float _956 = _929 * 0.5;
        float _957 = _939 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _972 = (dot(vec3(_569, _570, _571), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _982 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3590 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_984 + 1.0))) + _989) * _952;
        float _999 = _920 * 0.5;
        float _1000 = _930 * 0.5;
        float _1001 = _940 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(_569, _570, _571), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3623 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1026 + 1.0))) + _1031) * _953;
        float _1041 = _921 * 0.5;
        float _1042 = _931 * 0.5;
        float _1043 = _941 * 0.5;
        float _1044 = dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043));
        float _1049 = (_1044 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1044);
        float _1057 = (dot(vec3(_569, _570, _571), vec3(_1049 * _1041, _1049 * _1042, _1049 * _1043)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1066 = sqrt(((_1042 * _1042) + (_1041 * _1041)) + (_1043 * _1043)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3656 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1068 + 1.0))) + _1073) * _954;
        _1090 = _921;
        _1092 = _920;
        _1093 = _919;
        _1094 = _931;
        _1095 = _930;
        _1096 = _929;
        _1097 = _941;
        _1098 = _940;
        _1099 = _939;
        _1100 = _954;
        _1101 = _953;
        _1102 = _952;
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
    }
    else
    {
        _1090 = _1091;
        _1092 = _1091;
        _1093 = _1091;
        _1094 = _1091;
        _1095 = _1091;
        _1096 = _1091;
        _1097 = _1091;
        _1098 = _1091;
        _1099 = _1091;
        _1100 = _1091;
        _1101 = _1091;
        _1102 = _1091;
        _1103 = 0.0;
        _1104 = 0.0;
        _1105 = 0.0;
    }
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1130 = fma(_789, cbModelParam._m0[30u].z, fma(_785, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _781));
        float _1134 = fma(_789, cbModelParam._m0[31u].z, fma(_785, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _781));
        float _1138 = fma(_789, cbModelParam._m0[32u].z, fma(_785, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _781));
        float _1161 = _781 + _569;
        float _1162 = _785 + _570;
        float _1163 = _789 + _571;
        float _1173 = fma(_1163, cbModelParam._m0[30u].z, fma(_1162, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161)) - _1130;
        float _1174 = fma(_1163, cbModelParam._m0[31u].z, fma(_1162, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161)) - _1134;
        float _1175 = fma(_1163, cbModelParam._m0[32u].z, fma(_1162, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161)) - _1138;
        float _1179 = inversesqrt(dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175)));
        float _1192 = ((_1179 * _1173) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1130 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1193 = ((_1179 * _1174) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1134 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1194 = ((_1179 * _1175) / cbModelParam._m0[35u].z) + ((((((_1138 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1192, _1193, _1194), 0.0);
        float _1229 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1196.x + (-0.5));
        float _1231 = _1229 * (_1196.y + (-0.5));
        float _1232 = _1229 * (_1196.z + (-0.5));
        float _1239 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1203.x + (-0.5));
        float _1241 = _1239 * (_1203.y + (-0.5));
        float _1242 = _1239 * (_1203.z + (-0.5));
        float _1249 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1250 = _1249 * (_1210.x + (-0.5));
        float _1251 = _1249 * (_1210.y + (-0.5));
        float _1252 = _1249 * (_1210.z + (-0.5));
        float _1259 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1217.x + (-0.5));
        float _1261 = _1259 * (_1217.y + (-0.5));
        float _1262 = _1259 * (_1217.z + (-0.5));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1266 = _1230 * 0.5;
        float _1267 = _1240 * 0.5;
        float _1268 = _1250 * 0.5;
        float _1269 = dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268));
        float _1274 = (_1269 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1269);
        float _1282 = (dot(vec3(_569, _570, _571), vec3(_1274 * _1266, _1274 * _1267, _1274 * _1268)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1291 = sqrt(((_1267 * _1267) + (_1266 * _1266)) + (_1268 * _1268)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1293 = _1292 * 2.0;
        float _1297 = (1.0 - _1292) / (_1292 + 1.0);
        float _3719 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1307 = ((((1.0 - _1298) * (_1293 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1293 + 1.0))) + _1298) * _1263;
        float _1308 = _1231 * 0.5;
        float _1309 = _1241 * 0.5;
        float _1310 = _1251 * 0.5;
        float _1311 = dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310));
        float _1316 = (_1311 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1311);
        float _1324 = (dot(vec3(_569, _570, _571), vec3(_1316 * _1308, _1316 * _1309, _1316 * _1310)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1333 = sqrt(((_1309 * _1309) + (_1308 * _1308)) + (_1310 * _1310)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1335 = _1334 * 2.0;
        float _1339 = (1.0 - _1334) / (_1334 + 1.0);
        float _3752 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1349 = ((((1.0 - _1340) * (_1335 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1335 + 1.0))) + _1340) * _1264;
        float _1350 = _1232 * 0.5;
        float _1351 = _1242 * 0.5;
        float _1352 = _1252 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_569, _570, _571), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1265 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3785 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1377 + 1.0))) + _1382) * _1265;
        _1399 = _1232;
        _1400 = _1231;
        _1401 = _1230;
        _1402 = _1242;
        _1403 = _1241;
        _1404 = _1240;
        _1405 = _1252;
        _1406 = _1251;
        _1407 = _1250;
        _1408 = _1265;
        _1409 = _1264;
        _1410 = _1263;
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)));
        _1412 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)));
        _1413 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
    }
    else
    {
        _1399 = _1091;
        _1400 = _1091;
        _1401 = _1091;
        _1402 = _1091;
        _1403 = _1091;
        _1404 = _1091;
        _1405 = _1091;
        _1406 = _1091;
        _1407 = _1091;
        _1408 = _1091;
        _1409 = _1091;
        _1410 = _1091;
        _1411 = 0.0;
        _1412 = 0.0;
        _1413 = 0.0;
    }
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1103)) + _1103;
    float _1424 = (cbModelParam._m0[1u].x * (_1412 - _1104)) + _1104;
    float _1425 = (cbModelParam._m0[1u].x * (_1413 - _1105)) + _1105;
    float _1446 = fma(_1425, cbSceneParam._m0[89u].z, fma(_1424, cbSceneParam._m0[89u].y, _1423 * cbSceneParam._m0[89u].x));
    float _1449 = fma(_1425, cbSceneParam._m0[90u].z, fma(_1424, cbSceneParam._m0[90u].y, _1423 * cbSceneParam._m0[90u].x));
    float _1452 = fma(_1425, cbSceneParam._m0[91u].z, fma(_1424, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1423));
    float _1467 = _728 * 0.5;
    float _1468 = _729 * 0.5;
    float _1469 = _730 * 0.5;
    float _1470 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1401, _1404, _1407, _1410));
    float _1473 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1400, _1403, _1406, _1409));
    float _1476 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1510;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1483 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1090, _1094, _1097, _1100));
        float _1487 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1491 = dot(vec4(_1467, _1468, _1469, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1498 = dot(vec4(cbModelParam._m0[39u]), vec4(_1467, _1468, _1469, 1.0));
        _1510 = dot(vec3(isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1498) ? 0.0 : (isnan(0.0) ? _1498 : max(0.0, _1498))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1510 = 1.0;
    }
    float _1521;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1512 = dot(vec4(cbModelParam._m0[40u]), vec4(_1467, _1468, _1469, 1.0));
        _1521 = dot(vec3(isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1512) ? 0.0 : (isnan(0.0) ? _1512 : max(0.0, _1512))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1521 = 1.0;
    }
    float _1525 = (_1521 * cbModelParam._m0[1u].x) + (_1510 * (1.0 - cbModelParam._m0[1u].x));
    float _1535 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _572);
    float _1536 = isnan(_1535) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1535 : min(cbModelParam._m0[25u].z, _1535));
    float _1618;
    float _1620;
    float _1622;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1585 = fma(_789, cbModelParam._m0[13u].z, fma(_785, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781)) + cbModelParam._m0[13u].w;
        float _1589 = fma(_789, cbModelParam._m0[14u].z, fma(_785, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781)) + cbModelParam._m0[14u].w;
        float _1593 = fma(_789, cbModelParam._m0[15u].z, fma(_785, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781)) + cbModelParam._m0[15u].w;
        float _1596 = fma(_730, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _728));
        float _1599 = fma(_730, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _728));
        float _1602 = fma(_730, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _728));
        float _1630;
        if (_1596 > 0.0)
        {
            _1630 = abs((1.0 - _1585) / _1596);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1585 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1630 = frontier_phi_14_12_ladder;
        }
        float _1832;
        if (_1599 > 0.0)
        {
            _1832 = abs((1.0 - _1589) / _1599);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1589 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1832 = frontier_phi_23_19_ladder;
        }
        float _2075;
        if (_1602 > 0.0)
        {
            _2075 = abs((1.0 - _1593) / _1602);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1593 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2075 = frontier_phi_35_30_ladder;
        }
        float _2077 = isnan(_1832) ? _1630 : (isnan(_1630) ? _1832 : min(_1630, _1832));
        float _2078 = isnan(_2075) ? _2077 : (isnan(_2077) ? _2075 : min(_2077, _2075));
        float _2082 = (_2078 * _1596) + _1585;
        float _2083 = (_2078 * _1599) + _1589;
        float _2084 = (_2078 * _1602) + _1593;
        float _2085 = _2078 * 9.9999997473787516355514526367188e-05;
        float _2087 = (-1.0) - _2085;
        float _2089 = _2085 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2084 > _2089) || ((_2084 < _2087) || ((_2083 > _2089) || ((_2083 < _2087) || ((_2082 < _2087) || (_2082 > _2089))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2208 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2084, cbModelParam._m0[9u].z, fma(_2083, cbModelParam._m0[9u].y, _2082 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2084, cbModelParam._m0[10u].z, fma(_2083, cbModelParam._m0[10u].y, _2082 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2084, cbModelParam._m0[11u].z, fma(_2083, cbModelParam._m0[11u].y, _2082 * cbModelParam._m0[11u].x))), _1536);
            frontier_phi_13_35_ladder = _2208.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2208.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2208.x * cbModelParam._m0[1u].y;
        }
        _1618 = frontier_phi_13_35_ladder_2;
        _1620 = frontier_phi_13_35_ladder_1;
        _1622 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1606 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_728, _729, _730), _1536);
        _1618 = _1606.x * cbModelParam._m0[1u].y;
        _1620 = _1606.y * cbModelParam._m0[1u].y;
        _1622 = _1606.z * cbModelParam._m0[1u].y;
    }
    float _1626 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _572);
    float _1627 = isnan(_1626) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1626 : min(cbModelParam._m0[25u].w, _1626));
    float _1718;
    float _1720;
    float _1722;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1682 = fma(_789, cbModelParam._m0[21u].z, fma(_785, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781)) + cbModelParam._m0[21u].w;
        float _1686 = fma(_789, cbModelParam._m0[22u].z, fma(_785, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781)) + cbModelParam._m0[22u].w;
        float _1690 = fma(_789, cbModelParam._m0[23u].z, fma(_785, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781)) + cbModelParam._m0[23u].w;
        float _1693 = fma(_730, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _728));
        float _1696 = fma(_730, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _728));
        float _1699 = fma(_730, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _728));
        float _1837;
        if (_1693 > 0.0)
        {
            _1837 = abs((1.0 - _1682) / _1693);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1682 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1837 = frontier_phi_25_21_ladder;
        }
        float _2102;
        if (_1696 > 0.0)
        {
            _2102 = abs((1.0 - _1686) / _1696);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1686 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2102 = frontier_phi_37_32_ladder;
        }
        float _2307;
        if (_1699 > 0.0)
        {
            _2307 = abs((1.0 - _1690) / _1699);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1690 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2307 = frontier_phi_46_43_ladder;
        }
        float _2309 = isnan(_2102) ? _1837 : (isnan(_1837) ? _2102 : min(_1837, _2102));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1693) + _1682;
        float _2315 = (_2310 * _1696) + _1686;
        float _2316 = (_2310 * _1699) + _1690;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2317;
        float _2320 = _2317 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2316 > _2320) || ((_2316 < _2318) || ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 < _2318) || (_2314 > _2320))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2316, cbModelParam._m0[17u].z, fma(_2315, cbModelParam._m0[17u].y, _2314 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2316, cbModelParam._m0[18u].z, fma(_2315, cbModelParam._m0[18u].y, _2314 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2316, cbModelParam._m0[19u].z, fma(_2315, cbModelParam._m0[19u].y, _2314 * cbModelParam._m0[19u].x))), _1627);
            frontier_phi_22_46_ladder = _2515.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2515.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2515.x * cbModelParam._m0[1u].z;
        }
        _1718 = frontier_phi_22_46_ladder_2;
        _1720 = frontier_phi_22_46_ladder_1;
        _1722 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1702 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_728, _729, _730), _1627);
        _1718 = _1702.x * cbModelParam._m0[1u].z;
        _1720 = _1702.y * cbModelParam._m0[1u].z;
        _1722 = _1702.z * cbModelParam._m0[1u].z;
    }
    float _1734 = ((((1.0 - _749) * ((_736 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_749 * _736)) * _720;
    float _1735 = _1734 * ((cbModelParam._m0[1u].w * (_1718 - _1618)) + _1618);
    float _1736 = _1734 * ((cbModelParam._m0[1u].w * (_1720 - _1620)) + _1620);
    float _1737 = _1734 * ((cbModelParam._m0[1u].w * (_1722 - _1622)) + _1622);
    float _1740 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1743 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1746 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, _1735 * cbSceneParam._m0[91u].x));
    uvec4 _1756 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _1758 = _1756.x * 14u;
    uint _1759 = _1758 + 13u;
    float _1766 = _720 + (-1.0);
    float _1771 = (cbLight._m0[_1759].x * _1766) + 1.0;
    float _1772 = (cbLight._m0[_1759].y * _1766) + 1.0;
    float _1773 = (cbLight._m0[_1759].z * _1766) + 1.0;
    float _1774 = (cbLight._m0[_1759].w * _1766) + 1.0;
    uint _1775 = _1758 + 5u;
    float _1781 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
    uint _1785 = _1758 + 4u;
    float _1791 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
    uint _1795 = _1758 | 1u;
    float _1806 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_569, _570, _571));
    float _1809 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_569, _570, _571));
    float _3921 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _3932 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1814 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * 0.3183098733425140380859375;
    float _1816 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * 0.3183098733425140380859375;
    float _1823 = ((cbLight._m0[_1775].x * _1781) * _1816) + ((cbLight._m0[_1785].x * _1791) * _1814);
    float _1824 = ((_1781 * cbLight._m0[_1775].y) * _1816) + ((_1791 * cbLight._m0[_1785].y) * _1814);
    float _1825 = ((_1781 * cbLight._m0[_1775].z) * _1816) + ((_1791 * cbLight._m0[_1785].z) * _1814);
    uvec4 _1829 = floatBitsToUint(cbLight._m0[_1758 + 12u]);
    bool _1831 = _1829.x == 0u;
    float _1842;
    float _1844;
    float _1846;
    if (_1831)
    {
        _1842 = _1823;
        _1844 = _1824;
        _1846 = _1825;
    }
    else
    {
        uint _1850 = _1758 + 6u;
        float _1866 = (dot(vec3(cbLight._m0[_1758 + 2u].xyz), vec3(_569, _570, _571)) * 0.5) + 0.5;
        float _1867 = _1866 * _1866;
        float _3943 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1869 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
        _1842 = (((cbLight._m0[_1850].x * 0.3183098733425140380859375) * _1868) * _1869) + _1823;
        _1844 = (((cbLight._m0[_1850].y * 0.3183098733425140380859375) * _1868) * _1869) + _1824;
        _1846 = (((cbLight._m0[_1850].z * 0.3183098733425140380859375) * _1868) * _1869) + _1825;
    }
    bool _1849 = _1829.y == 0u;
    float _1887;
    float _1889;
    float _1891;
    if (_1849)
    {
        _1887 = _1842;
        _1889 = _1844;
        _1891 = _1846;
    }
    else
    {
        uint _2046 = _1758 + 7u;
        float _2062 = (dot(vec3(cbLight._m0[_1758 + 3u].xyz), vec3(_569, _570, _571)) * 0.5) + 0.5;
        float _2063 = _2062 * _2062;
        float _3959 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2064 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _2065 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _1887 = (((cbLight._m0[_2046].x * 0.3183098733425140380859375) * _2064) * _2065) + _1842;
        _1889 = (((cbLight._m0[_2046].y * 0.3183098733425140380859375) * _2064) * _2065) + _1844;
        _1891 = (((cbLight._m0[_2046].z * 0.3183098733425140380859375) * _2064) * _2065) + _1846;
    }
    uint _1894 = _1758 + 8u;
    float _1907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1758].w)) * _572) * 0.949999988079071044921875);
    float _1908 = _1907 * _1907;
    float _1909 = cbLight._m0[_1758].x + _649;
    float _1910 = cbLight._m0[_1758].y + _650;
    float _1911 = cbLight._m0[_1758].z + _651;
    float _1915 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
    float _1916 = _1915 * _1909;
    float _1917 = _1915 * _1910;
    float _1918 = _1915 * _1911;
    float _1919 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_1758].xyz));
    float _3975 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _1923 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
    float _1924 = dot(vec3(_569, _570, _571), vec3(_1916, _1917, _1918));
    float _3997 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1927 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _1928 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_1916, _1917, _1918));
    float _4008 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1932 = _1908 * _1908;
    float _1936 = ((_1927 * _1927) * (_1932 + (-1.0))) + 1.0;
    float _1947 = (exp2(log2(1.0 - (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1948 = 1.0 - _1908;
    float _1959 = (0.5 / (((_1923 * ((_1922 * _1948) + _1908)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _1948) + _1908) * _1922))) * _1922;
    float _4019 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1961 = (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1932 / ((_1936 * _1936) * 3.141590118408203125));
    uint _1972 = _1758 + 9u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1795].w)) * _572) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1795].x + _649;
    float _1986 = cbLight._m0[_1795].y + _650;
    float _1987 = cbLight._m0[_1795].z + _651;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_1795].xyz));
    float _4030 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _1999 = dot(vec3(_569, _570, _571), vec3(_1992, _1993, _1994));
    float _4041 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2002 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _2003 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_1992, _1993, _1994));
    float _4052 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2007 = _1984 * _1984;
    float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
    float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2021 = 1.0 - _1984;
    float _2031 = (0.5 / (((_1923 * ((_1998 * _2021) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _2021) + _1984) * _1998))) * _1998;
    float _4063 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2033 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
    float _2043 = (((_2020 * cbLight._m0[_1972].x) * _2033) * _1781) + (((_1947 * cbLight._m0[_1894].x) * _1961) * _1791);
    float _2044 = (((_2020 * cbLight._m0[_1972].y) * _2033) * _1781) + (((_1947 * cbLight._m0[_1894].y) * _1961) * _1791);
    float _2045 = (((_2020 * cbLight._m0[_1972].z) * _2033) * _1781) + (((_1947 * cbLight._m0[_1894].z) * _1961) * _1791);
    float _2107;
    float _2109;
    float _2111;
    if (_1831)
    {
        _2107 = _2043;
        _2109 = _2044;
        _2111 = _2045;
    }
    else
    {
        uint _2113 = _1758 + 2u;
        uint _2117 = _1758 + 10u;
        float _2131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2113].w)) * _572) * 0.949999988079071044921875);
        float _2132 = _2131 * _2131;
        float _2133 = cbLight._m0[_2113].x + _649;
        float _2134 = cbLight._m0[_2113].y + _650;
        float _2135 = cbLight._m0[_2113].z + _651;
        float _2139 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
        float _2140 = _2139 * _2133;
        float _2141 = _2139 * _2134;
        float _2142 = _2139 * _2135;
        float _2143 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_2113].xyz));
        float _4074 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        float _2146 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _2147 = dot(vec3(_569, _570, _571), vec3(_2140, _2141, _2142));
        float _4085 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
        float _2150 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2151 = dot(vec3(cbLight._m0[_2113].xyz), vec3(_2140, _2141, _2142));
        float _4096 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2155 = _2132 * _2132;
        float _2159 = ((_2150 * _2150) * (_2155 + (-1.0))) + 1.0;
        float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2169 = 1.0 - _2132;
        float _2179 = (0.5 / (((_1923 * ((_2146 * _2169) + _2132)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _2169) + _2132) * _2146))) * _2146;
        float _4107 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        float _2181 = (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))) * (_2155 / ((_2159 * _2159) * 3.141590118408203125));
        float _2182 = isnan(1.0) ? _1773 : (isnan(_1773) ? 1.0 : min(_1773, 1.0));
        _2107 = (((_2168 * cbLight._m0[_2117].x) * _2181) * _2182) + _2043;
        _2109 = (((_2168 * cbLight._m0[_2117].y) * _2181) * _2182) + _2044;
        _2111 = (((_2168 * cbLight._m0[_2117].z) * _2181) * _2182) + _2045;
    }
    float _2217;
    float _2219;
    float _2221;
    if (_1849)
    {
        _2217 = _2107;
        _2219 = _2109;
        _2221 = _2111;
    }
    else
    {
        uint _2228 = _1758 + 3u;
        uint _2232 = _1758 + 11u;
        float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _572) * 0.949999988079071044921875);
        float _2247 = _2246 * _2246;
        float _2248 = cbLight._m0[_2228].x + _649;
        float _2249 = cbLight._m0[_2228].y + _650;
        float _2250 = cbLight._m0[_2228].z + _651;
        float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
        float _2255 = _2254 * _2248;
        float _2256 = _2254 * _2249;
        float _2257 = _2254 * _2250;
        float _2258 = dot(vec3(_569, _570, _571), vec3(cbLight._m0[_2228].xyz));
        float _4123 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2261 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2262 = dot(vec3(_569, _570, _571), vec3(_2255, _2256, _2257));
        float _4134 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2265 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _2266 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2255, _2256, _2257));
        float _4145 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        float _2270 = _2247 * _2247;
        float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
        float _2283 = (exp2(log2(1.0 - (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2284 = 1.0 - _2247;
        float _2294 = (0.5 / (((_1923 * ((_2261 * _2284) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_1923 * _2284) + _2247) * _2261))) * _2261;
        float _4156 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2296 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
        float _2297 = isnan(1.0) ? _1774 : (isnan(_1774) ? 1.0 : min(_1774, 1.0));
        _2217 = (((_2283 * cbLight._m0[_2232].x) * _2296) * _2297) + _2107;
        _2219 = (((_2283 * cbLight._m0[_2232].y) * _2296) * _2297) + _2109;
        _2221 = (((_2283 * cbLight._m0[_2232].z) * _2296) * _2297) + _2111;
    }
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    float _2442;
    if (_1756.y == 0u)
    {
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2372;
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2372;
        float _2375 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2372;
        uvec4 _2387 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2388 = _2387.x;
        uint _2399 = uint((float(_2387.y) * floor(float(uint(cbSceneParam._m0[85u].y * _658) / _2388))) + floor(float(uint(cbSceneParam._m0[85u].x * _657) / _2388)));
        float _2409 = (log2(_2375 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2410 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        uint _2413 = uint(isnan(14.0) ? _2410 : (isnan(_2410) ? 14.0 : min(_2410, 14.0)));
        uvec4 _2418 = texelFetch(g_lightClusterGridBuffer, int(((_2413 << 2u) + (_2399 << 6u)) >> 2u));
        uint _2419 = _2418.x;
        uint _2420 = _2387.z;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((((1u << ((_2420 >> 4u) & 15u)) + 4294967295u) & _2419) == 0u) || ((_2420 & 240u) == 0u))
        {
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
        }
        else
        {
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            float _2670 = 0.0;
            uint _2671 = 0u;
            uint _2680;
            bool _2681;
            for (;;)
            {
                _2680 = texelFetch(g_lightClassification, int((((_2413 << 5u) + (_2399 << 9u)) + (_2671 << 2u)) >> 2u)).x;
                _2681 = _2680 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2681)
                {
                    frontier_phi_61_pred = _2665;
                    frontier_phi_61_pred_1 = _2670;
                    frontier_phi_61_pred_2 = _2669;
                    frontier_phi_61_pred_3 = _2668;
                    frontier_phi_61_pred_4 = _2667;
                    frontier_phi_61_pred_5 = _2666;
                }
                else
                {
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    uint _2795;
                    _2789 = _2665;
                    _2790 = _2666;
                    _2791 = _2667;
                    _2792 = _2668;
                    _2793 = _2669;
                    _2794 = _2670;
                    _2795 = _2680;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    for (;;)
                    {
                        uint _2799 = uint(findLSB(_2795)) + (_2671 << 5u);
                        uint _2796 = (_2795 + 4294967295u) & _2795;
                        uint _2801 = _2799 * 48u;
                        vec4 _2815 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2801)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 3u)).x));
                        uint _2821 = (_2799 * 48u) + 4u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 3u)).x));
                        uint _2840 = (_2799 * 48u) + 8u;
                        vec3 _2851 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x));
                        float _2855 = _2815.x - _2373;
                        float _2856 = _2815.y - _2374;
                        float _2857 = _2815.z - _2375;
                        float _2858 = dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857));
                        float _2861 = inversesqrt(_2858);
                        float _2862 = _2861 * _2855;
                        float _2863 = _2861 * _2856;
                        float _2864 = _2861 * _2857;
                        float _2865 = dot(vec3(_676, _679, _682), vec3(_2862, _2863, _2864));
                        float _2870 = 1.0 - (_2858 * _2815.w);
                        float _4182 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2871 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2872 = sqrt(_2858) * _2834.w;
                        float _2875 = 1.39999997615814208984375 / (_2872 + 1.39999997615814208984375);
                        float _2876 = _2875 * _2875;
                        float _2879 = ((1.0 - _2876) * _2865) + _2876;
                        float _2882 = _2872 * _2872;
                        float _2886 = ((isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0))) * _2871) / ((_2882 * 0.699999988079071044921875) + 1.0);
                        float _2890 = (-0.0) - _2373;
                        float _2891 = (-0.0) - _2374;
                        float _2892 = (-0.0) - _2375;
                        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
                        float _2897 = _2896 * _2890;
                        float _2898 = _2896 * _2891;
                        float _2899 = _2896 * _2892;
                        float _2907 = exp2(log2(1.0 / ((_2882 * 3.5) + 5.0)) * 0.25);
                        float _2908 = 1.0 - _736;
                        float _2915 = sqrt(1.0 - ((1.0 - (_2908 * _2908)) * (1.0 - (_2907 * _2907))));
                        float _2916 = _2915 * _2915;
                        float _2917 = _2916 * _2916;
                        float _2918 = _2897 + _2862;
                        float _2919 = _2898 + _2863;
                        float _2920 = _2899 + _2864;
                        float _2924 = inversesqrt(dot(vec3(_2918, _2919, _2920), vec3(_2918, _2919, _2920)));
                        float _2928 = dot(vec3(_676, _679, _682), vec3(_2897, _2898, _2899));
                        float _4198 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2931 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2932 = dot(vec3(_676, _679, _682), vec3(_2924 * _2918, _2924 * _2919, _2924 * _2920));
                        float _4209 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2935 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2939 = ((_2935 * _2935) * (_2917 + (-1.0))) + 1.0;
                        float _2940 = _2875 * _2916;
                        float _2941 = _2940 * _2940;
                        float _2944 = ((1.0 - _2941) * _2865) + _2941;
                        float _4220 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2945 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2946 = 1.0 - _2916;
                        float _2956 = (0.5 / (((_2945 * ((_2931 * _2946) + _2916)) + 9.9999999392252902907785028219223e-09) + (((_2945 * _2946) + _2916) * _2931))) * _2945;
                        float _4231 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2967 = (((_2917 * 3.1415927410125732421875) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) / ((_2939 * _2939) * ((_2882 * 2.1991131305694580078125) + 3.141590118408203125))) * _2871;
                        _2724 = (_2886 * _2834.x) + _2792;
                        _2725 = (_2886 * _2834.y) + _2793;
                        _2726 = (_2886 * _2834.z) + _2794;
                        _2721 = (_2967 * _2851.x) + _2789;
                        _2722 = (_2967 * _2851.y) + _2790;
                        _2723 = (_2967 * _2851.z) + _2791;
                        if (_2796 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2789 = _2721;
                            _2790 = _2722;
                            _2791 = _2723;
                            _2792 = _2724;
                            _2793 = _2725;
                            _2794 = _2726;
                            _2795 = _2796;
                        }
                    }
                    frontier_phi_61_pred = _2721;
                    frontier_phi_61_pred_1 = _2726;
                    frontier_phi_61_pred_2 = _2725;
                    frontier_phi_61_pred_3 = _2724;
                    frontier_phi_61_pred_4 = _2723;
                    frontier_phi_61_pred_5 = _2722;
                }
                _2521 = frontier_phi_61_pred;
                _2531 = frontier_phi_61_pred_1;
                _2529 = frontier_phi_61_pred_2;
                _2527 = frontier_phi_61_pred_3;
                _2525 = frontier_phi_61_pred_4;
                _2523 = frontier_phi_61_pred_5;
                uint _2672 = _2671 + 1u;
                if (_2672 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2665 = _2521;
                    _2666 = _2523;
                    _2667 = _2525;
                    _2668 = _2527;
                    _2669 = _2529;
                    _2670 = _2531;
                    _2671 = _2672;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
        }
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.z;
        uint _2537 = (_2535 >> 8u) & 15u;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        if (((4294967295u << _2537) & _2419) == 0u)
        {
            _2633 = _2520;
            _2635 = _2522;
            _2637 = _2524;
            _2639 = _2526;
            _2641 = _2528;
            _2643 = _2530;
        }
        else
        {
            float _2658 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
            float _2659 = _2658 * _2373;
            float _2660 = _2658 * _2374;
            float _2661 = _2658 * _2375;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2537 < ((_2535 >> 12u) & 15u))
            {
                float _2634;
                float _2636;
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2772 = _2520;
                float _2773 = _2522;
                float _2774 = _2524;
                float _2775 = _2526;
                float _2776 = _2528;
                float _2777 = _2530;
                uint _2778 = _2537;
                uint _2787;
                bool _2788;
                for (;;)
                {
                    _2787 = texelFetch(g_lightClassification, int((((_2413 << 5u) + (_2399 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                    _2788 = _2787 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2788)
                    {
                        frontier_phi_67_pred = _2775;
                        frontier_phi_67_pred_1 = _2776;
                        frontier_phi_67_pred_2 = _2777;
                        frontier_phi_67_pred_3 = _2774;
                        frontier_phi_67_pred_4 = _2773;
                        frontier_phi_67_pred_5 = _2772;
                    }
                    else
                    {
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2976;
                        float _2977;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _2985 = _2772;
                        float _2986 = _2773;
                        float _2987 = _2774;
                        float _2988 = _2775;
                        float _2989 = _2776;
                        float _2990 = _2777;
                        uint _2991 = _2787;
                        uint _2992;
                        vec4 _3017;
                        float _3018;
                        vec4 _3033;
                        vec3 _3045;
                        vec4 _3060;
                        vec4 _3075;
                        float _3121;
                        bool _3122;
                        for (;;)
                        {
                            uint _3002 = ((_2778 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2991));
                            _2992 = (_2991 + 4294967295u) & _2991;
                            uint _3004 = _3002 * 40u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            _3018 = _3017.w;
                            uint _3020 = (_3002 * 40u) + 4u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3035 = (_3002 * 40u) + 8u;
                            _3045 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x));
                            uint _3047 = (_3002 * 40u) + 16u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3062 = (_3002 * 40u) + 20u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            uint _3077 = (_3002 * 40u) + 24u;
                            vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3096 = (_3002 * 40u) + 28u;
                            vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            _3121 = fma(_2375, _3109.z, fma(_2374, _3109.y, _3109.x * _2373)) + _3109.w;
                            _3122 = !((fma(_2375, _3090.z, fma(_2374, _3090.y, _3090.x * _2373)) + _3090.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3122)
                            {
                                float _3149 = _3017.x - _2373;
                                float _3150 = _3017.y - _2374;
                                float _3151 = _3017.z - _2375;
                                float _3152 = dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151));
                                float _3155 = inversesqrt(_3152);
                                float _3156 = _3155 * _3149;
                                float _3157 = _3155 * _3150;
                                float _3158 = _3155 * _3151;
                                float _3162 = 1.0 - (_3152 / (_3018 * _3018));
                                float _4242 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3163 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3167 = sqrt(_3152) * _3033.w;
                                float _3169 = 1.39999997615814208984375 / (_3167 + 1.39999997615814208984375);
                                float _3170 = _3169 * _3169;
                                float _3173 = ((1.0 - _3170) * dot(vec3(_3156, _3157, _3158), vec3(_676, _679, _682))) + _3170;
                                float _3176 = _3167 * _3167;
                                float _3180 = (fma(_2375, _3060.z, fma(_2374, _3060.y, _3060.x * _2373)) + _3060.w) / _3121;
                                float _3181 = (fma(_2375, _3075.z, fma(_2374, _3075.y, _3075.x * _2373)) + _3075.w) / _3121;
                                float _3185 = 1.0 - dot(vec2(_3180, _3181), vec2(_3180, _3181));
                                float _4258 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3186 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3187 = _3186 * (((isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0))) * _3163) / ((_3176 * 0.699999988079071044921875) + 1.0));
                                float _3199 = exp2(log2(1.0 / ((_3176 * 3.5) + 5.0)) * 0.25);
                                float _3200 = 1.0 - _736;
                                float _3207 = sqrt(1.0 - ((1.0 - (_3200 * _3200)) * (1.0 - (_3199 * _3199))));
                                float _3208 = _3207 * _3207;
                                float _3209 = _3208 * _3208;
                                float _3210 = _3156 - _2659;
                                float _3211 = _3157 - _2660;
                                float _3212 = _3158 - _2661;
                                float _3216 = inversesqrt(dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212)));
                                float _3220 = dot(vec3(_676, _679, _682), vec3((-0.0) - _2659, (-0.0) - _2660, (-0.0) - _2661));
                                float _4269 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3223 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3224 = dot(vec3(_676, _679, _682), vec3(_3216 * _3210, _3216 * _3211, _3216 * _3212));
                                float _4280 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3227 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3231 = ((_3227 * _3227) * (_3209 + (-1.0))) + 1.0;
                                float _3232 = _3169 * _3208;
                                float _3233 = _3232 * _3232;
                                float _3239 = ((1.0 - _3233) * dot(vec3(_676, _679, _682), vec3(_3156, _3157, _3158))) + _3233;
                                float _4291 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3241 = 1.0 - _3208;
                                float _3251 = (0.5 / (((_3240 * ((_3223 * _3241) + _3208)) + 9.9999999392252902907785028219223e-09) + (((_3240 * _3241) + _3208) * _3223))) * _3240;
                                float _4302 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3261 = (_3186 * _3163) * (((_3209 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3231 * _3231) * ((_3176 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3261 * _3045.x;
                                frontier_phi_73_pred_1 = _3261 * _3045.y;
                                frontier_phi_73_pred_2 = _3187 * _3033.z;
                                frontier_phi_73_pred_3 = _3187 * _3033.y;
                                frontier_phi_73_pred_4 = _3187 * _3033.x;
                                frontier_phi_73_pred_5 = _3261 * _3045.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3265 = frontier_phi_73_pred;
                            _3266 = frontier_phi_73_pred_1;
                            _3270 = frontier_phi_73_pred_2;
                            _3269 = frontier_phi_73_pred_3;
                            _3268 = frontier_phi_73_pred_4;
                            _3267 = frontier_phi_73_pred_5;
                            _2975 = _3268 + _2988;
                            _2976 = _3269 + _2989;
                            _2977 = _3270 + _2990;
                            _2972 = _3265 + _2985;
                            _2973 = _3266 + _2986;
                            _2974 = _3267 + _2987;
                            if (_2992 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2977;
                                _2991 = _2992;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2975;
                        frontier_phi_67_pred_1 = _2976;
                        frontier_phi_67_pred_2 = _2977;
                        frontier_phi_67_pred_3 = _2974;
                        frontier_phi_67_pred_4 = _2973;
                        frontier_phi_67_pred_5 = _2972;
                    }
                    _2640 = frontier_phi_67_pred;
                    _2642 = frontier_phi_67_pred_1;
                    _2644 = frontier_phi_67_pred_2;
                    _2638 = frontier_phi_67_pred_3;
                    _2636 = frontier_phi_67_pred_4;
                    _2634 = frontier_phi_67_pred_5;
                    uint _2779 = _2778 + 1u;
                    if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2772 = _2634;
                        _2773 = _2636;
                        _2774 = _2638;
                        _2775 = _2640;
                        _2776 = _2642;
                        _2777 = _2644;
                        _2778 = _2779;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2642;
                frontier_phi_55_56_ladder_1 = _2644;
                frontier_phi_55_56_ladder_2 = _2640;
                frontier_phi_55_56_ladder_3 = _2638;
                frontier_phi_55_56_ladder_4 = _2636;
                frontier_phi_55_56_ladder_5 = _2634;
            }
            else
            {
                frontier_phi_55_56_ladder = _2528;
                frontier_phi_55_56_ladder_1 = _2530;
                frontier_phi_55_56_ladder_2 = _2526;
                frontier_phi_55_56_ladder_3 = _2524;
                frontier_phi_55_56_ladder_4 = _2522;
                frontier_phi_55_56_ladder_5 = _2520;
            }
            _2633 = frontier_phi_55_56_ladder_5;
            _2635 = frontier_phi_55_56_ladder_4;
            _2637 = frontier_phi_55_56_ladder_3;
            _2639 = frontier_phi_55_56_ladder_2;
            _2641 = frontier_phi_55_56_ladder;
            _2643 = frontier_phi_55_56_ladder_1;
        }
        float _2648 = isnan(1.0) ? _720 : (isnan(_720) ? 1.0 : min(_720, 1.0));
        _2432 = (_2648 * _2639) + _1887;
        _2434 = (_2648 * _2641) + _1889;
        _2436 = (_2648 * _2643) + _1891;
        _2438 = ((_2633 * 0.039999999105930328369140625) * _2648) + _2217;
        _2440 = ((_2635 * 0.039999999105930328369140625) * _2648) + _2219;
        _2442 = ((_2637 * 0.039999999105930328369140625) * _2648) + _2221;
    }
    else
    {
        _2432 = _1887;
        _2434 = _1889;
        _2436 = _1891;
        _2438 = _2217;
        _2440 = _2219;
        _2442 = _2221;
    }
    float _4318 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _4329 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4340 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    uint _2462 = _254 + 6u;
    float _2470 = _657 / cbSceneParam._m0[86u].x;
    float _2471 = _658 / cbSceneParam._m0[86u].y;
    vec4 _2485 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2470, _2471, (log2((isnan(cbSceneParam._m0[77u].w) ? _590 : (isnan(_590) ? cbSceneParam._m0[77u].w : min(_590, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2487 = _2485.x;
    float _2488 = _2485.y;
    float _2489 = _2485.z;
    float _2490 = _2485.w;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    if (_590 > cbSceneParam._m0[78u].w)
    {
        float _2545 = isnan(_590) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _590 : min(cbSceneParam._m0[80u].w, _590));
        float _2546 = _2545 / _590;
        float _2557 = _2546 * _642;
        float _2558 = _643 * _2546;
        float _2559 = (-0.0) - _2558;
        float _2561 = _2546 * _644;
        float _2563 = (cbSceneParam._m0[77u].w * _2559) / _2545;
        float _2564 = _2563 + cbSceneParam._m0[79u].w;
        float _2565 = cbSceneParam._m0[79u].w - _2558;
        float _2571 = sqrt(((_2557 * _2557) + (_2558 * _2558)) + (_2561 * _2561));
        float _2574 = (1.0 - (cbSceneParam._m0[77u].w / _2545)) * _2571;
        float _2579 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2581 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2734;
        if (abs((_2559 - _2563) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2734 = ((((_2564 > 0.0) ? exp2(_2579 * _2564) : (2.0 - exp2(_2581 * _2564))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2574;
        }
        else
        {
            float _2694 = 1.0 / cbSceneParam._m0[80u].x;
            float _2695 = isnan(_2565) ? _2564 : (isnan(_2564) ? _2565 : max(_2564, _2565));
            float _2696 = isnan(_2565) ? _2564 : (isnan(_2564) ? _2565 : min(_2564, _2565));
            float _2705 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : min(_2695, 0.0));
            float _2706 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : min(_2696, 0.0));
            _2734 = ((abs(_2571 / _2559) * cbSceneParam._m0[80u].y) * ((((_2705 - _2706) * 2.0) - ((exp2(_2579 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0)))) - exp2(_2579 * (isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0))))) * _2694)) - ((exp2(_2581 * _2705) - exp2(_2581 * _2706)) * _2694))) + (_2574 * cbSceneParam._m0[80u].z);
        }
        vec4 _2736 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2470, _2471, 1.0), 0.0);
        float _2745 = exp2((_2734 * (-1.44269502162933349609375)) * (1.0 - _2736.w));
        float _2746 = log2(_2745);
        float _2762 = log2(_2490);
        _2583 = (exp2(_2762 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].x)) * _2736.x) / cbSceneParam._m0[78u].x)) + _2487;
        _2585 = (exp2(_2762 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].y)) * _2736.y) / cbSceneParam._m0[78u].y)) + _2488;
        _2587 = (exp2(_2762 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2746 * cbSceneParam._m0[78u].z)) * _2736.z) / cbSceneParam._m0[78u].z)) + _2489;
        _2589 = _2745 * _2490;
    }
    else
    {
        _2583 = _2487;
        _2585 = _2488;
        _2587 = _2489;
        _2589 = _2490;
    }
    float _2601 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2602 = _2601 == 3.0;
    float _2603 = log2(_2589);
    float _2610 = exp2(_2603 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2432 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _720))) + ((_2438 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1525)) * cbPerFrame._m0[3u].x));
    float _2611 = exp2(_2603 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2434 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _720))) + ((_2440 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1525)) * cbPerFrame._m0[3u].x));
    float _2612 = exp2(_2603 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2436 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _720))) + ((_2442 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1525)) * cbPerFrame._m0[3u].x));
    float _2621 = (_2601 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2621 * (_2602 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2583)));
    SV_Target.y = _2621 * (_2602 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2585)));
    SV_Target.z = _2621 * (_2602 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.w = cbInstanceData._m0[_2462].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2462].w;
}


