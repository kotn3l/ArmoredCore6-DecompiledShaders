#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _937;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _237 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _238 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3532 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3543 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3554 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    uint _248 = uint(roundEven(NORMAL.w)) * 13u;
    uint _253 = _248 + 1u;
    uint _257 = _248 + 2u;
    float _266 = sqrt(((cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x) + (cbInstanceData._m0[_248].x * cbInstanceData._m0[_248].x)) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x));
    float _267 = _266 * TEXCOORD.z;
    float _268 = _266 * TEXCOORD.w;
    vec4 _281 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _267) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _268) + cbTextureTilingScale._m0[13u].w));
    vec4 _304 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _309 = _304.x * cbMtdParam._m0[9u].x;
    float _310 = _304.y * cbMtdParam._m0[9u].y;
    float _311 = _304.z * cbMtdParam._m0[9u].z;
    float _315 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _281.x) * _309;
    float _318 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _281.y) * _310;
    float _321 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _281.z) * _311;
    float _328 = ((_309 - _315) * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) + _315;
    float _329 = ((_310 - _318) * (isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0)))) + _318;
    float _330 = ((_311 - _321) * (isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0)))) + _321;
    vec4 _343 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _267) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _268) + cbTextureTilingScale._m0[20u].w));
    vec4 _369 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _373 = _369.z;
    float _377 = (_369.x * 2.0) + (-1.0);
    float _378 = (_369.y * 2.0) + (-1.0);
    float _379 = dot(vec2(_377, _378), vec2(_377, _378));
    float _3565 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _384 = sqrt(1.0 - (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))));
    float _389 = _377 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_343.x * 2.0) + (-1.0)));
    float _390 = _378 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_343.y * 2.0) + (-1.0)));
    float _395 = (((_343.z - _373) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _373;
    float _397 = cbMtdParam._m0[22u].x + _369.w;
    float _400 = fma(_384, _214 * NORMAL.x, fma(_390, _221 * TANGENT.x, (_207 * _199) * _389));
    float _403 = fma(_384, _214 * NORMAL.y, fma(_390, _221 * TANGENT.y, (_207 * _200) * _389));
    float _406 = fma(_384, _214 * NORMAL.z, fma(_390, _221 * TANGENT.z, (_207 * _201) * _389));
    float _410 = inversesqrt(dot(vec3(_400, _403, _406), vec3(_400, _403, _406)));
    float _411 = _410 * _400;
    float _412 = _410 * _403;
    float _413 = _410 * _406;
    float _3576 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _414 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _3587 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _3598 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3609 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _3620 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _432 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _474 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _484 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _474);
    float _485 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _474);
    float _486 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _474);
    float _490 = inversesqrt(dot(vec3(_484, _485, _486), vec3(_484, _485, _486)));
    float _491 = _484 * _490;
    float _492 = _485 * _490;
    float _493 = _486 * _490;
    float _499 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _500 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _521 = fma(_413, cbSceneParam._m0[5u].z, fma(_412, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _411));
    float _524 = fma(_413, cbSceneParam._m0[6u].z, fma(_412, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _411));
    float _527 = fma(_413, cbSceneParam._m0[7u].z, fma(_412, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _411));
    uint _541 = (_248 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _547 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0)))) * cbInstanceData._m0[_541].x;
    float _548 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0)))) * cbInstanceData._m0[_541].y;
    float _549 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * cbInstanceData._m0[_541].z;
    float _3631 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _550 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _3642 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _551 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _3653 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _552 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    vec4 _561 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _499, cbSceneParam._m0[86u].y * _500));
    float _565 = ((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * TEXCOORD_5.w) * _561.x;
    float _566 = dot(vec3(_411, _412, _413), vec3(_491, _492, _493));
    float _569 = _566 * 2.0;
    float _573 = (_569 * _411) - _491;
    float _574 = (_569 * _412) - _492;
    float _575 = (_569 * _413) - _493;
    float _579 = abs(dot(vec3(_491, _492, _493), vec3(_411, _412, _413)));
    float _3664 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _581 = sqrt(_414);
    float _594 = exp2((_581 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_581 * 3.0));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _936;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _661 = fma(_634, cbModelParam._m0[26u].z, fma(_630, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _626));
        float _665 = fma(_634, cbModelParam._m0[27u].z, fma(_630, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _626));
        float _669 = fma(_634, cbModelParam._m0[28u].z, fma(_630, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _626));
        float _694 = _626 + _411;
        float _695 = _630 + _412;
        float _696 = _634 + _413;
        float _706 = fma(_696, cbModelParam._m0[26u].z, fma(_695, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694)) - _661;
        float _707 = fma(_696, cbModelParam._m0[27u].z, fma(_695, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694)) - _665;
        float _708 = fma(_696, cbModelParam._m0[28u].z, fma(_695, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694)) - _669;
        float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
        float _725 = ((_712 * _706) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_661 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _726 = ((_712 * _707) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_665 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _727 = ((_712 * _708) / cbModelParam._m0[34u].z) + ((((((_669 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_725, _726, _727), 0.0);
        float _764 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _765 = _764 * (_730.x + (-0.5));
        float _766 = _764 * (_730.y + (-0.5));
        float _767 = _764 * (_730.z + (-0.5));
        float _774 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_737.x + (-0.5));
        float _776 = _774 * (_737.y + (-0.5));
        float _777 = _774 * (_737.z + (-0.5));
        float _784 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_744.x + (-0.5));
        float _786 = _784 * (_744.y + (-0.5));
        float _787 = _784 * (_744.z + (-0.5));
        float _794 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_751.x + (-0.5));
        float _796 = _794 * (_751.y + (-0.5));
        float _797 = _794 * (_751.z + (-0.5));
        float _798 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _799 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _800 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _801 = _765 * 0.5;
        float _802 = _775 * 0.5;
        float _803 = _785 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _818 = (dot(vec3(_411, _412, _413), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3690 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
        float _828 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_798 + 9.9999997473787516355514526367188e-06);
        float _3701 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3712 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * (_830 + 1.0))) + _835) * _798;
        float _845 = _766 * 0.5;
        float _846 = _776 * 0.5;
        float _847 = _786 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _861 = (dot(vec3(_411, _412, _413), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3723 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _870 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_799 + 9.9999997473787516355514526367188e-06);
        float _3734 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3745 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))) * (_872 + 1.0))) + _877) * _799;
        float _887 = _767 * 0.5;
        float _888 = _777 * 0.5;
        float _889 = _787 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _903 = (dot(vec3(_411, _412, _413), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3756 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _912 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_800 + 9.9999997473787516355514526367188e-06);
        float _3767 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3778 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_914 + 1.0))) + _919) * _800;
        _936 = _767;
        _938 = _766;
        _939 = _765;
        _940 = _777;
        _941 = _776;
        _942 = _775;
        _943 = _787;
        _944 = _786;
        _945 = _785;
        _946 = _800;
        _947 = _799;
        _948 = _798;
        _949 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
        _950 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
        _951 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
    }
    else
    {
        _936 = _937;
        _938 = _937;
        _939 = _937;
        _940 = _937;
        _941 = _937;
        _942 = _937;
        _943 = _937;
        _944 = _937;
        _945 = _937;
        _946 = _937;
        _947 = _937;
        _948 = _937;
        _949 = 0.0;
        _950 = 0.0;
        _951 = 0.0;
    }
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _976 = fma(_634, cbModelParam._m0[30u].z, fma(_630, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _626));
        float _980 = fma(_634, cbModelParam._m0[31u].z, fma(_630, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _626));
        float _984 = fma(_634, cbModelParam._m0[32u].z, fma(_630, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _626));
        float _1007 = _626 + _411;
        float _1008 = _630 + _412;
        float _1009 = _634 + _413;
        float _1019 = fma(_1009, cbModelParam._m0[30u].z, fma(_1008, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1007)) - _976;
        float _1020 = fma(_1009, cbModelParam._m0[31u].z, fma(_1008, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1007)) - _980;
        float _1021 = fma(_1009, cbModelParam._m0[32u].z, fma(_1008, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1007)) - _984;
        float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
        float _1038 = ((_1025 * _1019) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_976 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1025 * _1020) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_980 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1040 = ((_1025 * _1021) / cbModelParam._m0[35u].z) + ((((((_984 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1038, _1039, _1040), 0.0);
        float _1075 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1042.x + (-0.5));
        float _1077 = _1075 * (_1042.y + (-0.5));
        float _1078 = _1075 * (_1042.z + (-0.5));
        float _1085 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1049.x + (-0.5));
        float _1087 = _1085 * (_1049.y + (-0.5));
        float _1088 = _1085 * (_1049.z + (-0.5));
        float _1095 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1056.x + (-0.5));
        float _1097 = _1095 * (_1056.y + (-0.5));
        float _1098 = _1095 * (_1056.z + (-0.5));
        float _1105 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1063.x + (-0.5));
        float _1107 = _1105 * (_1063.y + (-0.5));
        float _1108 = _1105 * (_1063.z + (-0.5));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = _1076 * 0.5;
        float _1113 = _1086 * 0.5;
        float _1114 = _1096 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_411, _412, _413), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3841 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1139 + 1.0))) + _1144) * _1109;
        float _1154 = _1077 * 0.5;
        float _1155 = _1087 * 0.5;
        float _1156 = _1097 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_411, _412, _413), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3874 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1181 + 1.0))) + _1186) * _1110;
        float _1196 = _1078 * 0.5;
        float _1197 = _1088 * 0.5;
        float _1198 = _1098 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_411, _412, _413), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3885 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3896 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3907 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_1223 + 1.0))) + _1228) * _1111;
        _1245 = _1078;
        _1246 = _1077;
        _1247 = _1076;
        _1248 = _1088;
        _1249 = _1087;
        _1250 = _1086;
        _1251 = _1098;
        _1252 = _1097;
        _1253 = _1096;
        _1254 = _1111;
        _1255 = _1110;
        _1256 = _1109;
        _1257 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1258 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1259 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
    }
    else
    {
        _1245 = _937;
        _1246 = _937;
        _1247 = _937;
        _1248 = _937;
        _1249 = _937;
        _1250 = _937;
        _1251 = _937;
        _1252 = _937;
        _1253 = _937;
        _1254 = _937;
        _1255 = _937;
        _1256 = _937;
        _1257 = 0.0;
        _1258 = 0.0;
        _1259 = 0.0;
    }
    float _1269 = (cbModelParam._m0[1u].x * (_1257 - _949)) + _949;
    float _1270 = (cbModelParam._m0[1u].x * (_1258 - _950)) + _950;
    float _1271 = (cbModelParam._m0[1u].x * (_1259 - _951)) + _951;
    float _1292 = fma(_1271, cbSceneParam._m0[89u].z, fma(_1270, cbSceneParam._m0[89u].y, _1269 * cbSceneParam._m0[89u].x));
    float _1295 = fma(_1271, cbSceneParam._m0[90u].z, fma(_1270, cbSceneParam._m0[90u].y, _1269 * cbSceneParam._m0[90u].x));
    float _1298 = fma(_1271, cbSceneParam._m0[91u].z, fma(_1270, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1269));
    float _1313 = _573 * 0.5;
    float _1314 = _574 * 0.5;
    float _1315 = _575 * 0.5;
    float _1316 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1247, _1250, _1253, _1256));
    float _1319 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1246, _1249, _1252, _1255));
    float _1322 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_1245, _1248, _1251, _1254));
    float _1356;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1329 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_936, _940, _943, _946));
        float _1333 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_938, _941, _944, _947));
        float _1337 = dot(vec4(_1313, _1314, _1315, 1.0), vec4(_939, _942, _945, _948));
        float _1344 = dot(vec4(cbModelParam._m0[39u]), vec4(_1313, _1314, _1315, 1.0));
        _1356 = dot(vec3(isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)), isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1344) ? 0.0 : (isnan(0.0) ? _1344 : max(0.0, _1344))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1356 = 1.0;
    }
    float _1367;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1358 = dot(vec4(cbModelParam._m0[40u]), vec4(_1313, _1314, _1315, 1.0));
        _1367 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)), isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1358) ? 0.0 : (isnan(0.0) ? _1358 : max(0.0, _1358))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1367 = 1.0;
    }
    float _1371 = (_1367 * cbModelParam._m0[1u].x) + (_1356 * (1.0 - cbModelParam._m0[1u].x));
    float _1381 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _414);
    float _1382 = isnan(_1381) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1381 : min(cbModelParam._m0[25u].z, _1381));
    float _1464;
    float _1466;
    float _1468;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1431 = fma(_634, cbModelParam._m0[13u].z, fma(_630, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _626)) + cbModelParam._m0[13u].w;
        float _1435 = fma(_634, cbModelParam._m0[14u].z, fma(_630, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _626)) + cbModelParam._m0[14u].w;
        float _1439 = fma(_634, cbModelParam._m0[15u].z, fma(_630, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _626)) + cbModelParam._m0[15u].w;
        float _1442 = fma(_575, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _573));
        float _1445 = fma(_575, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _573));
        float _1448 = fma(_575, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _573));
        float _1476;
        if (_1442 > 0.0)
        {
            _1476 = abs((1.0 - _1431) / _1442);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1431 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1476 = frontier_phi_14_12_ladder;
        }
        float _1649;
        if (_1445 > 0.0)
        {
            _1649 = abs((1.0 - _1435) / _1445);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1435 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1649 = frontier_phi_23_19_ladder;
        }
        float _1945;
        if (_1448 > 0.0)
        {
            _1945 = abs((1.0 - _1439) / _1448);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1439 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1945 = frontier_phi_35_30_ladder;
        }
        float _1947 = isnan(_1649) ? _1476 : (isnan(_1476) ? _1649 : min(_1476, _1649));
        float _1948 = isnan(_1945) ? _1947 : (isnan(_1947) ? _1945 : min(_1947, _1945));
        float _1952 = (_1948 * _1442) + _1431;
        float _1953 = (_1948 * _1445) + _1435;
        float _1954 = (_1948 * _1448) + _1439;
        float _1955 = _1948 * 9.9999997473787516355514526367188e-05;
        float _1957 = (-1.0) - _1955;
        float _1959 = _1955 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1954 > _1959) || ((_1954 < _1957) || ((_1953 > _1959) || ((_1953 < _1957) || ((_1952 < _1957) || (_1952 > _1959))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2099 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1954, cbModelParam._m0[9u].z, fma(_1953, cbModelParam._m0[9u].y, _1952 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1954, cbModelParam._m0[10u].z, fma(_1953, cbModelParam._m0[10u].y, _1952 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1954, cbModelParam._m0[11u].z, fma(_1953, cbModelParam._m0[11u].y, _1952 * cbModelParam._m0[11u].x))), _1382);
            frontier_phi_13_35_ladder = _2099.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2099.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2099.x * cbModelParam._m0[1u].y;
        }
        _1464 = frontier_phi_13_35_ladder_2;
        _1466 = frontier_phi_13_35_ladder_1;
        _1468 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_573, _574, _575), _1382);
        _1464 = _1452.x * cbModelParam._m0[1u].y;
        _1466 = _1452.y * cbModelParam._m0[1u].y;
        _1468 = _1452.z * cbModelParam._m0[1u].y;
    }
    float _1472 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _414);
    float _1473 = isnan(_1472) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1472 : min(cbModelParam._m0[25u].w, _1472));
    float _1565;
    float _1567;
    float _1569;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1529 = fma(_634, cbModelParam._m0[21u].z, fma(_630, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _626)) + cbModelParam._m0[21u].w;
        float _1533 = fma(_634, cbModelParam._m0[22u].z, fma(_630, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _626)) + cbModelParam._m0[22u].w;
        float _1537 = fma(_634, cbModelParam._m0[23u].z, fma(_630, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _626)) + cbModelParam._m0[23u].w;
        float _1540 = fma(_575, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _573));
        float _1543 = fma(_575, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _573));
        float _1546 = fma(_575, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _573));
        float _1654;
        if (_1540 > 0.0)
        {
            _1654 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1654 = frontier_phi_25_21_ladder;
        }
        float _1972;
        if (_1543 > 0.0)
        {
            _1972 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1972 = frontier_phi_37_32_ladder;
        }
        float _2299;
        if (_1546 > 0.0)
        {
            _2299 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2299 = frontier_phi_47_44_ladder;
        }
        float _2301 = isnan(_1972) ? _1654 : (isnan(_1654) ? _1972 : min(_1654, _1972));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1540) + _1529;
        float _2307 = (_2302 * _1543) + _1533;
        float _2308 = (_2302 * _1546) + _1537;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2310 = (-1.0) - _2309;
        float _2312 = _2309 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2308 > _2312) || ((_2308 < _2310) || ((_2307 > _2312) || ((_2307 < _2310) || ((_2306 < _2310) || (_2306 > _2312))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2308, cbModelParam._m0[17u].z, fma(_2307, cbModelParam._m0[17u].y, _2306 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2308, cbModelParam._m0[18u].z, fma(_2307, cbModelParam._m0[18u].y, _2306 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2308, cbModelParam._m0[19u].z, fma(_2307, cbModelParam._m0[19u].y, _2306 * cbModelParam._m0[19u].x))), _1473);
            frontier_phi_22_47_ladder = _2426.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2426.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2426.x * cbModelParam._m0[1u].z;
        }
        _1565 = frontier_phi_22_47_ladder_2;
        _1567 = frontier_phi_22_47_ladder_1;
        _1569 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1549 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_573, _574, _575), _1473);
        _1565 = _1549.x * cbModelParam._m0[1u].z;
        _1567 = _1549.y * cbModelParam._m0[1u].z;
        _1569 = _1549.z * cbModelParam._m0[1u].z;
    }
    float _1581 = ((((1.0 - _594) * ((_581 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_594 * _581)) * _565;
    float _1582 = _1581 * ((cbModelParam._m0[1u].w * (_1565 - _1464)) + _1464);
    float _1583 = _1581 * ((cbModelParam._m0[1u].w * (_1567 - _1466)) + _1466);
    float _1584 = _1581 * ((cbModelParam._m0[1u].w * (_1569 - _1468)) + _1468);
    float _1587 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1590 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1593 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, _1582 * cbSceneParam._m0[91u].x));
    float _1628 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1632 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1636 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1640 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1641 = _1628 / _1640;
    float _1642 = _1632 / _1640;
    float _1643 = _1636 / _1640;
    float _1790;
    float _1791;
    float _1792;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1670 = ((uint(_1643 > cbSceneParam._m0[59u].y) + uint(_1643 > cbSceneParam._m0[59u].x)) + uint(_1643 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1671 = _1670 + 43u;
        uint _1679 = _1670 + 44u;
        uint _1687 = _1670 + 45u;
        uint _1695 = _1670 + 46u;
        float _1706 = fma(_1640, cbSceneParam._m0[_1671].w, fma(_1636, cbSceneParam._m0[_1671].z, fma(_1632, cbSceneParam._m0[_1671].y, _1628 * cbSceneParam._m0[_1671].x)));
        float _1710 = fma(_1640, cbSceneParam._m0[_1679].w, fma(_1636, cbSceneParam._m0[_1679].z, fma(_1632, cbSceneParam._m0[_1679].y, _1628 * cbSceneParam._m0[_1679].x)));
        float _1718 = fma(_1640, cbSceneParam._m0[_1695].w, fma(_1636, cbSceneParam._m0[_1695].z, fma(_1632, cbSceneParam._m0[_1695].y, _1628 * cbSceneParam._m0[_1695].x)));
        float _1723 = cbSceneParam._m0[33u].z * _1718;
        float _1725 = cbSceneParam._m0[33u].w * _1718;
        float _1728 = fma(_1640, cbSceneParam._m0[_1687].w, fma(_1636, cbSceneParam._m0[_1687].z, fma(_1632, cbSceneParam._m0[_1687].y, _1628 * cbSceneParam._m0[_1687].x))) / _1718;
        float _1776 = (cbSceneParam._m0[33u].x - sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643))) * cbSceneParam._m0[33u].y;
        float _4033 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1783 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1723 + _1706) / _1718, (_1725 + _1710) / _1718), _1728), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1725 + _1706) / _1718, (_1710 - _1723) / _1718), _1728), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1706 - _1723) / _1718, (_1710 - _1725) / _1718), _1728), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1706 - _1725) / _1718, (_1723 + _1710) / _1718), _1728), 0.0)).x), vec4(0.25)));
        _1790 = 1.0 - (_1783 * cbSceneParam._m0[34u].x);
        _1791 = 1.0 - (_1783 * cbSceneParam._m0[34u].y);
        _1792 = 1.0 - (_1783 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1790 = 1.0;
        _1791 = 1.0;
        _1792 = 1.0;
    }
    float _1856;
    float _1858;
    float _1860;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1844 = fma(_1640, cbSceneParam._m0[63u].w, fma(_1636, cbSceneParam._m0[63u].z, fma(_1632, cbSceneParam._m0[63u].y, _1628 * cbSceneParam._m0[63u].x)));
        float _1845 = fma(_1640, cbSceneParam._m0[60u].w, fma(_1636, cbSceneParam._m0[60u].z, fma(_1632, cbSceneParam._m0[60u].y, _1628 * cbSceneParam._m0[60u].x))) / _1844;
        float _1846 = fma(_1640, cbSceneParam._m0[61u].w, fma(_1636, cbSceneParam._m0[61u].z, fma(_1632, cbSceneParam._m0[61u].y, _1628 * cbSceneParam._m0[61u].x))) / _1844;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1845 >= cbSceneParam._m0[64u].x) && (_1846 >= cbSceneParam._m0[64u].y)) && (_1845 <= cbSceneParam._m0[64u].z)) && (_1846 <= cbSceneParam._m0[64u].w))
        {
            float _1985 = fma(_1640, cbSceneParam._m0[62u].w, fma(_1636, cbSceneParam._m0[62u].z, fma(_1632, cbSceneParam._m0[62u].y, _1628 * cbSceneParam._m0[62u].x))) / _1844;
            float _1989 = isnan(cbSceneParam._m0[41u].w) ? _1985 : (isnan(_1985) ? cbSceneParam._m0[41u].w : max(_1985, cbSceneParam._m0[41u].w));
            float _2032 = (cbSceneParam._m0[33u].x - sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643))) * cbSceneParam._m0[33u].y;
            float _4049 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
            float _2039 = (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1845, cbSceneParam._m0[33u].w + _1846), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1845, _1846 - cbSceneParam._m0[33u].z), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1845 - cbSceneParam._m0[33u].z, _1846 - cbSceneParam._m0[33u].w), _1989), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1845 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1846), _1989), 0.0)).x), vec4(0.25)));
            float _2043 = 1.0 - (_2039 * cbSceneParam._m0[34u].x);
            float _2044 = 1.0 - (_2039 * cbSceneParam._m0[34u].y);
            float _2045 = 1.0 - (_2039 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2045) ? _1792 : (isnan(_1792) ? _2045 : min(_1792, _2045));
            frontier_phi_34_33_ladder_1 = isnan(_2044) ? _1791 : (isnan(_1791) ? _2044 : min(_1791, _2044));
            frontier_phi_34_33_ladder_2 = isnan(_2043) ? _1790 : (isnan(_1790) ? _2043 : min(_1790, _2043));
        }
        else
        {
            frontier_phi_34_33_ladder = _1792;
            frontier_phi_34_33_ladder_1 = _1791;
            frontier_phi_34_33_ladder_2 = _1790;
        }
        _1856 = frontier_phi_34_33_ladder_2;
        _1858 = frontier_phi_34_33_ladder_1;
        _1860 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1856 = _1790;
        _1858 = _1791;
        _1860 = _1792;
    }
    uvec4 _1865 = floatBitsToUint(cbInstanceData._m0[_248 + 5u]);
    uint _1867 = _1865.x * 14u;
    uint _1868 = _1867 + 13u;
    float _1875 = _565 + (-1.0);
    float _1880 = (cbLight._m0[_1868].x * _1875) + 1.0;
    float _1881 = (cbLight._m0[_1868].y * _1875) + 1.0;
    float _1882 = (cbLight._m0[_1868].z * _1875) + 1.0;
    float _1883 = (cbLight._m0[_1868].w * _1875) + 1.0;
    uint _1884 = _1867 + 5u;
    float _1890 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
    uint _1894 = _1867 + 4u;
    float _1904 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
    uint _1908 = _1867 | 1u;
    float _1919 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_411, _412, _413));
    float _1922 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_411, _412, _413));
    float _4085 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _4096 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1927 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * 0.3183098733425140380859375;
    float _1929 = (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.3183098733425140380859375;
    float _1936 = ((cbLight._m0[_1884].x * _1890) * _1929) + (((cbLight._m0[_1894].x * _1856) * _1904) * _1927);
    float _1937 = ((_1890 * cbLight._m0[_1884].y) * _1929) + (((cbLight._m0[_1894].y * _1858) * _1904) * _1927);
    float _1938 = ((_1890 * cbLight._m0[_1884].z) * _1929) + (((cbLight._m0[_1894].z * _1860) * _1904) * _1927);
    uvec4 _1942 = floatBitsToUint(cbLight._m0[_1867 + 12u]);
    bool _1944 = _1942.x == 0u;
    float _2046;
    float _2048;
    float _2050;
    if (_1944)
    {
        _2046 = _1936;
        _2048 = _1937;
        _2050 = _1938;
    }
    else
    {
        uint _2054 = _1867 + 6u;
        float _2070 = (dot(vec3(cbLight._m0[_1867 + 2u].xyz), vec3(_411, _412, _413)) * 0.5) + 0.5;
        float _2071 = _2070 * _2070;
        float _4107 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2072 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2073 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2046 = (((cbLight._m0[_2054].x * 0.3183098733425140380859375) * _2072) * _2073) + _1936;
        _2048 = (((cbLight._m0[_2054].y * 0.3183098733425140380859375) * _2072) * _2073) + _1937;
        _2050 = (((cbLight._m0[_2054].z * 0.3183098733425140380859375) * _2072) * _2073) + _1938;
    }
    bool _2053 = _1942.y == 0u;
    float _2108;
    float _2110;
    float _2112;
    if (_2053)
    {
        _2108 = _2046;
        _2110 = _2048;
        _2112 = _2050;
    }
    else
    {
        uint _2270 = _1867 + 7u;
        float _2286 = (dot(vec3(cbLight._m0[_1867 + 3u].xyz), vec3(_411, _412, _413)) * 0.5) + 0.5;
        float _2287 = _2286 * _2286;
        float _4123 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2288 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _2289 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _2108 = (((cbLight._m0[_2270].x * 0.3183098733425140380859375) * _2288) * _2289) + _2046;
        _2110 = (((cbLight._m0[_2270].y * 0.3183098733425140380859375) * _2288) * _2289) + _2048;
        _2112 = (((cbLight._m0[_2270].z * 0.3183098733425140380859375) * _2288) * _2289) + _2050;
    }
    uint _2115 = _1867 + 8u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1867].w)) * _414) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1867].x + _491;
    float _2131 = cbLight._m0[_1867].y + _492;
    float _2132 = cbLight._m0[_1867].z + _493;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1867].xyz));
    float _4139 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _4150 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _2144 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2145 = dot(vec3(_411, _412, _413), vec3(_2137, _2138, _2139));
    float _4161 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2149 = dot(vec3(cbLight._m0[_1867].xyz), vec3(_2137, _2138, _2139));
    float _4172 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2153 = _2129 * _2129;
    float _2157 = ((_2148 * _2148) * (_2153 + (-1.0))) + 1.0;
    float _2168 = (exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2169 = 1.0 - _2129;
    float _2180 = (0.5 / (((_2144 * ((_2143 * _2169) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2169) + _2129) * _2143))) * _2143;
    float _4183 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2182 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2153 / ((_2157 * _2157) * 3.141590118408203125));
    uint _2196 = _1867 + 9u;
    float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1908].w)) * _414) * 0.949999988079071044921875);
    float _2208 = _2207 * _2207;
    float _2209 = cbLight._m0[_1908].x + _491;
    float _2210 = cbLight._m0[_1908].y + _492;
    float _2211 = cbLight._m0[_1908].z + _493;
    float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
    float _2216 = _2215 * _2209;
    float _2217 = _2215 * _2210;
    float _2218 = _2215 * _2211;
    float _2219 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_1908].xyz));
    float _4194 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _2223 = dot(vec3(_411, _412, _413), vec3(_2216, _2217, _2218));
    float _4205 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_1908].xyz), vec3(_2216, _2217, _2218));
    float _4216 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2208 * _2208;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2244 = (exp2(log2(1.0 - (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2245 = 1.0 - _2208;
    float _2255 = (0.5 / (((_2144 * ((_2222 * _2245) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2245) + _2208) * _2222))) * _2222;
    float _4227 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2257 = (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    float _2267 = (((_2244 * cbLight._m0[_2196].x) * _2257) * _1890) + ((((cbLight._m0[_2115].x * _1856) * _2168) * _2182) * _1904);
    float _2268 = (((_2244 * cbLight._m0[_2196].y) * _2257) * _1890) + ((((cbLight._m0[_2115].y * _1858) * _2168) * _2182) * _1904);
    float _2269 = (((_2244 * cbLight._m0[_2196].z) * _2257) * _1890) + ((((cbLight._m0[_2115].z * _1860) * _2168) * _2182) * _1904);
    float _2325;
    float _2327;
    float _2329;
    if (_1944)
    {
        _2325 = _2267;
        _2327 = _2268;
        _2329 = _2269;
    }
    else
    {
        uint _2331 = _1867 + 2u;
        uint _2335 = _1867 + 10u;
        float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _414) * 0.949999988079071044921875);
        float _2350 = _2349 * _2349;
        float _2351 = cbLight._m0[_2331].x + _491;
        float _2352 = cbLight._m0[_2331].y + _492;
        float _2353 = cbLight._m0[_2331].z + _493;
        float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
        float _2358 = _2357 * _2351;
        float _2359 = _2357 * _2352;
        float _2360 = _2357 * _2353;
        float _2361 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_2331].xyz));
        float _4238 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _2365 = dot(vec3(_411, _412, _413), vec3(_2358, _2359, _2360));
        float _4249 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2369 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2358, _2359, _2360));
        float _4260 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _2350 * _2350;
        float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
        float _2386 = (exp2(log2(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2387 = 1.0 - _2350;
        float _2397 = (0.5 / (((_2144 * ((_2364 * _2387) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2387) + _2350) * _2364))) * _2364;
        float _4271 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2325 = (((_2386 * cbLight._m0[_2335].x) * _2399) * _2400) + _2267;
        _2327 = (((_2386 * cbLight._m0[_2335].y) * _2399) * _2400) + _2268;
        _2329 = (((_2386 * cbLight._m0[_2335].z) * _2399) * _2400) + _2269;
    }
    float _2431;
    float _2433;
    float _2435;
    if (_2053)
    {
        _2431 = _2325;
        _2433 = _2327;
        _2435 = _2329;
    }
    else
    {
        uint _2442 = _1867 + 3u;
        uint _2446 = _1867 + 11u;
        float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _414) * 0.949999988079071044921875);
        float _2461 = _2460 * _2460;
        float _2462 = cbLight._m0[_2442].x + _491;
        float _2463 = cbLight._m0[_2442].y + _492;
        float _2464 = cbLight._m0[_2442].z + _493;
        float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
        float _2469 = _2468 * _2462;
        float _2470 = _2468 * _2463;
        float _2471 = _2468 * _2464;
        float _2472 = dot(vec3(_411, _412, _413), vec3(cbLight._m0[_2442].xyz));
        float _4287 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2475 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2476 = dot(vec3(_411, _412, _413), vec3(_2469, _2470, _2471));
        float _4298 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2480 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2469, _2470, _2471));
        float _4309 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2484 = _2461 * _2461;
        float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
        float _2497 = (exp2(log2(1.0 - (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2498 = 1.0 - _2461;
        float _2508 = (0.5 / (((_2144 * ((_2475 * _2498) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2144 * _2498) + _2461) * _2475))) * _2475;
        float _4320 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
        float _2510 = (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
        float _2511 = isnan(1.0) ? _1883 : (isnan(_1883) ? 1.0 : min(_1883, 1.0));
        _2431 = (((_2497 * cbLight._m0[_2446].x) * _2510) * _2511) + _2325;
        _2433 = (((_2497 * cbLight._m0[_2446].y) * _2510) * _2511) + _2327;
        _2435 = (((_2497 * cbLight._m0[_2446].z) * _2510) * _2511) + _2329;
    }
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    if (_1865.y == 0u)
    {
        uvec4 _2532 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2533 = _2532.x;
        uint _2544 = uint((float(_2532.y) * floor(float(uint(cbSceneParam._m0[85u].y * _500) / _2533))) + floor(float(uint(cbSceneParam._m0[85u].x * _499) / _2533)));
        float _2554 = (log2(_1643 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2555 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        uint _2558 = uint(isnan(14.0) ? _2555 : (isnan(_2555) ? 14.0 : min(_2555, 14.0)));
        uvec4 _2563 = texelFetch(g_lightClusterGridBuffer, int(((_2558 << 2u) + (_2544 << 6u)) >> 2u));
        uint _2564 = _2563.x;
        uint _2565 = _2532.z;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        float _2654;
        if (((((1u << ((_2565 >> 4u) & 15u)) + 4294967295u) & _2564) == 0u) || ((_2565 & 240u) == 0u))
        {
            _2644 = 0.0;
            _2646 = 0.0;
            _2648 = 0.0;
            _2650 = 0.0;
            _2652 = 0.0;
            _2654 = 0.0;
        }
        else
        {
            float _2645;
            float _2647;
            float _2649;
            float _2651;
            float _2653;
            float _2655;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            float _2793 = 0.0;
            float _2794 = 0.0;
            uint _2795 = 0u;
            uint _2804;
            bool _2805;
            for (;;)
            {
                _2804 = texelFetch(g_lightClassification, int((((_2558 << 5u) + (_2544 << 9u)) + (_2795 << 2u)) >> 2u)).x;
                _2805 = _2804 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2805)
                {
                    frontier_phi_66_pred = _2794;
                    frontier_phi_66_pred_1 = _2793;
                    frontier_phi_66_pred_2 = _2792;
                    frontier_phi_66_pred_3 = _2791;
                    frontier_phi_66_pred_4 = _2790;
                    frontier_phi_66_pred_5 = _2789;
                }
                else
                {
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    float _2917;
                    float _2918;
                    uint _2919;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2793;
                    _2918 = _2794;
                    _2919 = _2804;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    for (;;)
                    {
                        uint _2923 = uint(findLSB(_2919)) + (_2795 << 5u);
                        uint _2920 = (_2919 + 4294967295u) & _2919;
                        uint _2925 = _2923 * 48u;
                        vec4 _2939 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2925)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2925 + 3u)).x));
                        uint _2945 = (_2923 * 48u) + 4u;
                        vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2945)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2945 + 3u)).x));
                        uint _2964 = (_2923 * 48u) + 8u;
                        vec3 _2975 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x));
                        float _2979 = _2939.x - _1641;
                        float _2980 = _2939.y - _1642;
                        float _2981 = _2939.z - _1643;
                        float _2982 = dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981));
                        float _2985 = inversesqrt(_2982);
                        float _2986 = _2985 * _2979;
                        float _2987 = _2985 * _2980;
                        float _2988 = _2985 * _2981;
                        float _2989 = dot(vec3(_521, _524, _527), vec3(_2986, _2987, _2988));
                        float _2994 = 1.0 - (_2982 * _2939.w);
                        float _4346 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _2996 = sqrt(_2982) * _2958.w;
                        float _2999 = 1.39999997615814208984375 / (_2996 + 1.39999997615814208984375);
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2989) + _3000;
                        float _3006 = _2996 * _2996;
                        float _3010 = ((isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0))) * _2995) / ((_3006 * 0.699999988079071044921875) + 1.0);
                        float _3014 = (-0.0) - _1641;
                        float _3015 = (-0.0) - _1642;
                        float _3016 = (-0.0) - _1643;
                        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
                        float _3021 = _3020 * _3014;
                        float _3022 = _3020 * _3015;
                        float _3023 = _3020 * _3016;
                        float _3030 = exp2(log2(1.0 / ((_3006 * 3.5) + 5.0)) * 0.25);
                        float _3031 = 1.0 - _581;
                        float _3038 = sqrt(1.0 - ((1.0 - (_3031 * _3031)) * (1.0 - (_3030 * _3030))));
                        float _3039 = _3038 * _3038;
                        float _3040 = _3039 * _3039;
                        float _3041 = _3021 + _2986;
                        float _3042 = _3022 + _2987;
                        float _3043 = _3023 + _2988;
                        float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
                        float _3051 = dot(vec3(_521, _524, _527), vec3(_3021, _3022, _3023));
                        float _4362 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                        float _3054 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _3055 = dot(vec3(_521, _524, _527), vec3(_3047 * _3041, _3047 * _3042, _3047 * _3043));
                        float _4373 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3058 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3062 = ((_3058 * _3058) * (_3040 + (-1.0))) + 1.0;
                        float _3063 = _2999 * _3039;
                        float _3064 = _3063 * _3063;
                        float _3067 = ((1.0 - _3064) * _2989) + _3064;
                        float _4384 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3068 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3069 = 1.0 - _3039;
                        float _3079 = (0.5 / (((_3068 * ((_3054 * _3069) + _3039)) + 9.9999999392252902907785028219223e-09) + (((_3068 * _3069) + _3039) * _3054))) * _3068;
                        float _4395 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                        float _3090 = (((_3040 * 3.1415927410125732421875) * (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) / ((_3062 * _3062) * ((_3006 * 2.1991131305694580078125) + 3.141590118408203125))) * _2995;
                        _2848 = (_3010 * _2958.x) + _2916;
                        _2849 = (_3010 * _2958.y) + _2917;
                        _2850 = (_3010 * _2958.z) + _2918;
                        _2845 = (_3090 * _2975.x) + _2913;
                        _2846 = (_3090 * _2975.y) + _2914;
                        _2847 = (_3090 * _2975.z) + _2915;
                        if (_2920 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2849;
                            _2918 = _2850;
                            _2919 = _2920;
                        }
                    }
                    frontier_phi_66_pred = _2850;
                    frontier_phi_66_pred_1 = _2849;
                    frontier_phi_66_pred_2 = _2848;
                    frontier_phi_66_pred_3 = _2847;
                    frontier_phi_66_pred_4 = _2846;
                    frontier_phi_66_pred_5 = _2845;
                }
                _2655 = frontier_phi_66_pred;
                _2653 = frontier_phi_66_pred_1;
                _2651 = frontier_phi_66_pred_2;
                _2649 = frontier_phi_66_pred_3;
                _2647 = frontier_phi_66_pred_4;
                _2645 = frontier_phi_66_pred_5;
                uint _2796 = _2795 + 1u;
                if (_2796 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2789 = _2645;
                    _2790 = _2647;
                    _2791 = _2649;
                    _2792 = _2651;
                    _2793 = _2653;
                    _2794 = _2655;
                    _2795 = _2796;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2644 = _2645;
            _2646 = _2647;
            _2648 = _2649;
            _2650 = _2651;
            _2652 = _2653;
            _2654 = _2655;
        }
        uvec4 _2658 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2659 = _2658.z;
        uint _2661 = (_2659 >> 8u) & 15u;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        float _2767;
        if (((4294967295u << _2661) & _2564) == 0u)
        {
            _2757 = _2644;
            _2759 = _2646;
            _2761 = _2648;
            _2763 = _2650;
            _2765 = _2652;
            _2767 = _2654;
        }
        else
        {
            float _2782 = inversesqrt(dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643)));
            float _2783 = _2782 * _1641;
            float _2784 = _2782 * _1642;
            float _2785 = _2782 * _1643;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2661 < ((_2659 >> 12u) & 15u))
            {
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2768;
                float _2896 = _2644;
                float _2897 = _2646;
                float _2898 = _2648;
                float _2899 = _2650;
                float _2900 = _2652;
                float _2901 = _2654;
                uint _2902 = _2661;
                uint _2911;
                bool _2912;
                for (;;)
                {
                    _2911 = texelFetch(g_lightClassification, int((((_2558 << 5u) + (_2544 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                    _2912 = _2911 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2912)
                    {
                        frontier_phi_72_pred = _2901;
                        frontier_phi_72_pred_1 = _2900;
                        frontier_phi_72_pred_2 = _2899;
                        frontier_phi_72_pred_3 = _2898;
                        frontier_phi_72_pred_4 = _2897;
                        frontier_phi_72_pred_5 = _2896;
                    }
                    else
                    {
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3108 = _2896;
                        float _3109 = _2897;
                        float _3110 = _2898;
                        float _3111 = _2899;
                        float _3112 = _2900;
                        float _3113 = _2901;
                        uint _3114 = _2911;
                        uint _3115;
                        vec4 _3140;
                        float _3141;
                        vec4 _3156;
                        vec3 _3168;
                        vec4 _3183;
                        vec4 _3198;
                        float _3245;
                        bool _3246;
                        for (;;)
                        {
                            uint _3125 = ((_2902 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3114));
                            _3115 = (_3114 + 4294967295u) & _3114;
                            uint _3127 = _3125 * 40u;
                            _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            _3141 = _3140.w;
                            uint _3143 = (_3125 * 40u) + 4u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3158 = (_3125 * 40u) + 8u;
                            _3168 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x));
                            uint _3170 = (_3125 * 40u) + 16u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3185 = (_3125 * 40u) + 20u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3201 = (_3125 * 40u) + 24u;
                            vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3220 = (_3125 * 40u) + 28u;
                            vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            _3245 = fma(_1643, _3233.z, fma(_1642, _3233.y, _3233.x * _1641)) + _3233.w;
                            _3246 = !((fma(_1643, _3214.z, fma(_1642, _3214.y, _3214.x * _1641)) + _3214.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3246)
                            {
                                float _3273 = _3140.x - _1641;
                                float _3274 = _3140.y - _1642;
                                float _3275 = _3140.z - _1643;
                                float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                                float _3279 = inversesqrt(_3276);
                                float _3280 = _3279 * _3273;
                                float _3281 = _3279 * _3274;
                                float _3282 = _3279 * _3275;
                                float _3286 = 1.0 - (_3276 / (_3141 * _3141));
                                float _4406 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3291 = sqrt(_3276) * _3156.w;
                                float _3293 = 1.39999997615814208984375 / (_3291 + 1.39999997615814208984375);
                                float _3294 = _3293 * _3293;
                                float _3297 = ((1.0 - _3294) * dot(vec3(_3280, _3281, _3282), vec3(_521, _524, _527))) + _3294;
                                float _3300 = _3291 * _3291;
                                float _3304 = (fma(_1643, _3183.z, fma(_1642, _3183.y, _3183.x * _1641)) + _3183.w) / _3245;
                                float _3305 = (fma(_1643, _3198.z, fma(_1642, _3198.y, _3198.x * _1641)) + _3198.w) / _3245;
                                float _3309 = 1.0 - dot(vec2(_3304, _3305), vec2(_3304, _3305));
                                float _4422 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3311 = _3310 * (((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3287) / ((_3300 * 0.699999988079071044921875) + 1.0));
                                float _3323 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                                float _3324 = 1.0 - _581;
                                float _3331 = sqrt(1.0 - ((1.0 - (_3324 * _3324)) * (1.0 - (_3323 * _3323))));
                                float _3332 = _3331 * _3331;
                                float _3333 = _3332 * _3332;
                                float _3334 = _3280 - _2783;
                                float _3335 = _3281 - _2784;
                                float _3336 = _3282 - _2785;
                                float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                                float _3344 = dot(vec3(_521, _524, _527), vec3((-0.0) - _2783, (-0.0) - _2784, (-0.0) - _2785));
                                float _4433 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3348 = dot(vec3(_521, _524, _527), vec3(_3340 * _3334, _3340 * _3335, _3340 * _3336));
                                float _4444 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3351 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3355 = ((_3351 * _3351) * (_3333 + (-1.0))) + 1.0;
                                float _3356 = _3293 * _3332;
                                float _3357 = _3356 * _3356;
                                float _3363 = ((1.0 - _3357) * dot(vec3(_521, _524, _527), vec3(_3280, _3281, _3282))) + _3357;
                                float _4455 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3365 = 1.0 - _3332;
                                float _3375 = (0.5 / (((_3364 * ((_3347 * _3365) + _3332)) + 9.9999999392252902907785028219223e-09) + (((_3364 * _3365) + _3332) * _3347))) * _3364;
                                float _4466 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3385 = (_3310 * _3287) * (((_3333 * 3.1415927410125732421875) * (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) / ((_3355 * _3355) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3311 * _3156.y;
                                frontier_phi_78_pred_1 = _3311 * _3156.x;
                                frontier_phi_78_pred_2 = _3385 * _3168.z;
                                frontier_phi_78_pred_3 = _3385 * _3168.y;
                                frontier_phi_78_pred_4 = _3385 * _3168.x;
                                frontier_phi_78_pred_5 = _3311 * _3156.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3393 = frontier_phi_78_pred;
                            _3392 = frontier_phi_78_pred_1;
                            _3391 = frontier_phi_78_pred_2;
                            _3390 = frontier_phi_78_pred_3;
                            _3389 = frontier_phi_78_pred_4;
                            _3394 = frontier_phi_78_pred_5;
                            _3098 = _3392 + _3111;
                            _3099 = _3393 + _3112;
                            _3100 = _3394 + _3113;
                            _3095 = _3389 + _3108;
                            _3096 = _3390 + _3109;
                            _3097 = _3391 + _3110;
                            if (_3115 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3100;
                                _3114 = _3115;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3100;
                        frontier_phi_72_pred_1 = _3099;
                        frontier_phi_72_pred_2 = _3098;
                        frontier_phi_72_pred_3 = _3097;
                        frontier_phi_72_pred_4 = _3096;
                        frontier_phi_72_pred_5 = _3095;
                    }
                    _2768 = frontier_phi_72_pred;
                    _2766 = frontier_phi_72_pred_1;
                    _2764 = frontier_phi_72_pred_2;
                    _2762 = frontier_phi_72_pred_3;
                    _2760 = frontier_phi_72_pred_4;
                    _2758 = frontier_phi_72_pred_5;
                    uint _2903 = _2902 + 1u;
                    if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2896 = _2758;
                        _2897 = _2760;
                        _2898 = _2762;
                        _2899 = _2764;
                        _2900 = _2766;
                        _2901 = _2768;
                        _2902 = _2903;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2768;
                frontier_phi_60_61_ladder_1 = _2766;
                frontier_phi_60_61_ladder_2 = _2762;
                frontier_phi_60_61_ladder_3 = _2760;
                frontier_phi_60_61_ladder_4 = _2758;
                frontier_phi_60_61_ladder_5 = _2764;
            }
            else
            {
                frontier_phi_60_61_ladder = _2654;
                frontier_phi_60_61_ladder_1 = _2652;
                frontier_phi_60_61_ladder_2 = _2648;
                frontier_phi_60_61_ladder_3 = _2646;
                frontier_phi_60_61_ladder_4 = _2644;
                frontier_phi_60_61_ladder_5 = _2650;
            }
            _2757 = frontier_phi_60_61_ladder_4;
            _2759 = frontier_phi_60_61_ladder_3;
            _2761 = frontier_phi_60_61_ladder_2;
            _2763 = frontier_phi_60_61_ladder_5;
            _2765 = frontier_phi_60_61_ladder_1;
            _2767 = frontier_phi_60_61_ladder;
        }
        float _2772 = isnan(1.0) ? _565 : (isnan(_565) ? 1.0 : min(_565, 1.0));
        _2577 = (_2772 * _2763) + _2108;
        _2579 = (_2772 * _2765) + _2110;
        _2581 = (_2772 * _2767) + _2112;
        _2583 = ((_2757 * 0.039999999105930328369140625) * _2772) + _2431;
        _2585 = ((_2759 * 0.039999999105930328369140625) * _2772) + _2433;
        _2587 = ((_2761 * 0.039999999105930328369140625) * _2772) + _2435;
    }
    else
    {
        _2577 = _2108;
        _2579 = _2110;
        _2581 = _2112;
        _2583 = _2431;
        _2585 = _2433;
        _2587 = _2435;
    }
    float _4482 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _4493 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _4504 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    uint _2607 = _248 + 6u;
    float _2615 = _499 / cbSceneParam._m0[86u].x;
    float _2616 = _500 / cbSceneParam._m0[86u].y;
    vec4 _2630 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2615, _2616, (log2((isnan(cbSceneParam._m0[77u].w) ? _432 : (isnan(_432) ? cbSceneParam._m0[77u].w : min(_432, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2632 = _2630.x;
    float _2633 = _2630.y;
    float _2634 = _2630.z;
    float _2635 = _2630.w;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    if (_432 > cbSceneParam._m0[78u].w)
    {
        float _2669 = isnan(_432) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _432 : min(cbSceneParam._m0[80u].w, _432));
        float _2670 = _2669 / _432;
        float _2681 = _2670 * _484;
        float _2682 = _485 * _2670;
        float _2683 = (-0.0) - _2682;
        float _2685 = _2670 * _486;
        float _2687 = (cbSceneParam._m0[77u].w * _2683) / _2669;
        float _2688 = _2687 + cbSceneParam._m0[79u].w;
        float _2689 = cbSceneParam._m0[79u].w - _2682;
        float _2695 = sqrt(((_2681 * _2681) + (_2682 * _2682)) + (_2685 * _2685));
        float _2698 = (1.0 - (cbSceneParam._m0[77u].w / _2669)) * _2695;
        float _2703 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2705 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2858;
        if (abs((_2683 - _2687) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2858 = ((((_2688 > 0.0) ? exp2(_2703 * _2688) : (2.0 - exp2(_2705 * _2688))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2698;
        }
        else
        {
            float _2818 = 1.0 / cbSceneParam._m0[80u].x;
            float _2819 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : max(_2688, _2689));
            float _2820 = isnan(_2689) ? _2688 : (isnan(_2688) ? _2689 : min(_2688, _2689));
            float _2829 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : min(_2819, 0.0));
            float _2830 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : min(_2820, 0.0));
            _2858 = ((abs(_2695 / _2683) * cbSceneParam._m0[80u].y) * ((((_2829 - _2830) * 2.0) - ((exp2(_2703 * (isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0)))) - exp2(_2703 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))))) * _2818)) - ((exp2(_2705 * _2829) - exp2(_2705 * _2830)) * _2818))) + (_2698 * cbSceneParam._m0[80u].z);
        }
        vec4 _2860 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2615, _2616, 1.0), 0.0);
        float _2869 = exp2((_2858 * (-1.44269502162933349609375)) * (1.0 - _2860.w));
        float _2870 = log2(_2869);
        float _2886 = log2(_2635);
        _2707 = (exp2(_2886 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].x)) * _2860.x) / cbSceneParam._m0[78u].x)) + _2632;
        _2709 = (exp2(_2886 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].y)) * _2860.y) / cbSceneParam._m0[78u].y)) + _2633;
        _2711 = (exp2(_2886 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2870 * cbSceneParam._m0[78u].z)) * _2860.z) / cbSceneParam._m0[78u].z)) + _2634;
        _2713 = _2869 * _2635;
    }
    else
    {
        _2707 = _2632;
        _2709 = _2633;
        _2711 = _2634;
        _2713 = _2635;
    }
    float _2725 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2726 = _2725 == 3.0;
    float _2727 = log2(_2713);
    float _2734 = exp2(_2727 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2577 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _565))) + ((_2583 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1371)) * cbPerFrame._m0[3u].x));
    float _2735 = exp2(_2727 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2579 + ((isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))) * _565))) + ((_2585 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1371)) * cbPerFrame._m0[3u].x));
    float _2736 = exp2(_2727 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2581 + ((isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0))) * _565))) + ((_2587 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _1371)) * cbPerFrame._m0[3u].x));
    float _2745 = (_2725 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2745 * (_2726 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.y = _2745 * (_2726 ? _2735 : (_2735 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.z = _2745 * (_2726 ? _2736 : (_2736 + (cbSceneParam._m0[72u].w * _2711)));
    SV_Target.w = cbInstanceData._m0[_2607].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2607].w;
}


