#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1005;
float _3392;
float _3393;
float _3394;
float _3395;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _226 = uint(roundEven(NORMAL.w)) * 13u;
    uint _232 = _226 + 1u;
    uint _236 = _226 + 2u;
    float _245 = sqrt(((cbInstanceData._m0[_232].x * cbInstanceData._m0[_232].x) + (cbInstanceData._m0[_226].x * cbInstanceData._m0[_226].x)) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x));
    float _246 = _245 * TEXCOORD.z;
    float _247 = _245 * TEXCOORD.w;
    vec4 _266 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _266.x * cbMtdParam._m0[9u].x;
    float _273 = _266.y * cbMtdParam._m0[9u].y;
    float _274 = _266.z * cbMtdParam._m0[9u].z;
    vec4 _293 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _246) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _247) + cbTextureTilingScale._m0[14u].w));
    vec4 _313 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _317 = _313.z;
    float _322 = (_313.x * 2.0) + (-1.0);
    float _324 = (_313.y * 2.0) + (-1.0);
    float _325 = dot(vec2(_322, _324), vec2(_322, _324));
    float _3404 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _331 = sqrt(1.0 - (isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))));
    vec4 _348 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _246) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _247) + cbTextureTilingScale._m0[11u].w));
    float _350 = _348.x;
    float _351 = 1.0 - _350;
    float _367 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_350 - _351) * cbMtdParam._m0[24u].z) + _351) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3415 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _368 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    float _375 = (_368 * ((_293.x * cbMtdParam._m0[18u].x) - _272)) + _272;
    float _376 = (_368 * ((_293.y * cbMtdParam._m0[18u].y) - _273)) + _273;
    float _377 = (_368 * ((_293.z * cbMtdParam._m0[18u].z) - _274)) + _274;
    vec4 _390 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _246) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _247) + cbTextureTilingScale._m0[15u].w));
    float _397 = (_390.x * 2.0) + (-1.0);
    float _398 = (_390.y * 2.0) + (-1.0);
    float _399 = dot(vec2(_397, _398), vec2(_397, _398));
    float _3426 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _407 = (_368 * (_390.z - _317)) + _317;
    float _419 = (((_397 - _322) + (cbMtdParam._m0[21u].x * _322)) * _368) + _322;
    float _420 = (((_398 - _324) + (cbMtdParam._m0[21u].x * _324)) * _368) + _324;
    float _421 = (_368 * (sqrt(1.0 - (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0)))) - _331)) + _331;
    float _426 = cbMtdParam._m0[22u].x + _313.w;
    float _429 = fma(_421, _213 * NORMAL.x, fma(_420, _220 * TANGENT.x, (_206 * _198) * _419));
    float _432 = fma(_421, _213 * NORMAL.y, fma(_420, _220 * TANGENT.y, (_206 * _199) * _419));
    float _435 = fma(_421, _213 * NORMAL.z, fma(_420, _220 * TANGENT.z, (_206 * _200) * _419));
    float _439 = inversesqrt(dot(vec3(_429, _432, _435), vec3(_429, _432, _435)));
    float _440 = _439 * _429;
    float _441 = _439 * _432;
    float _442 = _439 * _435;
    float _3437 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _443 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _3448 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3459 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _3470 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _3481 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _461 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _512 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _502);
    float _513 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _502);
    float _514 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _502);
    float _518 = inversesqrt(dot(vec3(_512, _513, _514), vec3(_512, _513, _514)));
    float _519 = _512 * _518;
    float _520 = _513 * _518;
    float _521 = _514 * _518;
    vec4 _526 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _528 = _526.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _685 = sqrt(((_512 * _512) + (_513 * _513)) + (_514 * _514));
        float _691 = (cbMatDynParam._m0[5u].x * _685) + cbMatDynParam._m0[5u].y;
        float _3492 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _692 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _696 = (cbMatDynParam._m0[5u].z * _685) + cbMatDynParam._m0[5u].w;
        float _3503 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) - _692)) + _692) < ((_528 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _540 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _541 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _561 = fma(_442, cbSceneParam._m0[5u].z, fma(_441, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _440));
    float _564 = fma(_442, cbSceneParam._m0[6u].z, fma(_441, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _440));
    float _567 = fma(_442, cbSceneParam._m0[7u].z, fma(_441, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _440));
    uint _580 = _226 + 9u;
    uint _581 = _580 + uint(cbMatDynParam._m0[0u].w);
    float _587 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * cbInstanceData._m0[_581].x;
    float _588 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_581].y;
    float _589 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_581].z;
    float _3514 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    vec4 _601 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _540, cbSceneParam._m0[86u].y * _541));
    float _605 = ((isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * TEXCOORD_5.w) * _601.x;
    float _606 = dot(vec3(_440, _441, _442), vec3(_519, _520, _521));
    float _609 = _606 * 2.0;
    float _613 = (_609 * _440) - _519;
    float _614 = (_609 * _441) - _520;
    float _615 = (_609 * _442) - _521;
    float _619 = abs(dot(vec3(_519, _520, _521), vec3(_440, _441, _442)));
    float _3547 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _621 = sqrt(_443);
    float _634 = exp2((_621 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_621 * 3.0));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _670 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _674 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1004;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _729 = fma(_674, cbModelParam._m0[26u].z, fma(_670, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _666));
        float _733 = fma(_674, cbModelParam._m0[27u].z, fma(_670, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _666));
        float _737 = fma(_674, cbModelParam._m0[28u].z, fma(_670, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _666));
        float _762 = _666 + _440;
        float _763 = _670 + _441;
        float _764 = _674 + _442;
        float _774 = fma(_764, cbModelParam._m0[26u].z, fma(_763, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _762)) - _729;
        float _775 = fma(_764, cbModelParam._m0[27u].z, fma(_763, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _762)) - _733;
        float _776 = fma(_764, cbModelParam._m0[28u].z, fma(_763, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _762)) - _737;
        float _780 = inversesqrt(dot(vec3(_774, _775, _776), vec3(_774, _775, _776)));
        float _793 = ((_780 * _774) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_729 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_780 * _775) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_733 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_780 * _776) / cbModelParam._m0[34u].z) + ((((((_737 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        float _832 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_798.x + (-0.5));
        float _834 = _832 * (_798.y + (-0.5));
        float _835 = _832 * (_798.z + (-0.5));
        float _842 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_805.x + (-0.5));
        float _844 = _842 * (_805.y + (-0.5));
        float _845 = _842 * (_805.z + (-0.5));
        float _852 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_812.x + (-0.5));
        float _854 = _852 * (_812.y + (-0.5));
        float _855 = _852 * (_812.z + (-0.5));
        float _862 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_819.x + (-0.5));
        float _864 = _862 * (_819.y + (-0.5));
        float _865 = _862 * (_819.z + (-0.5));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = _833 * 0.5;
        float _870 = _843 * 0.5;
        float _871 = _853 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _886 = (dot(vec3(_440, _441, _442), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _896 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3595 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_898 + 1.0))) + _903) * _866;
        float _913 = _834 * 0.5;
        float _914 = _844 * 0.5;
        float _915 = _854 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(_440, _441, _442), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3628 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_940 + 1.0))) + _945) * _867;
        float _955 = _835 * 0.5;
        float _956 = _845 * 0.5;
        float _957 = _855 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_440, _441, _442), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3661 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_982 + 1.0))) + _987) * _868;
        _1004 = _835;
        _1006 = _834;
        _1007 = _833;
        _1008 = _845;
        _1009 = _844;
        _1010 = _843;
        _1011 = _855;
        _1012 = _854;
        _1013 = _853;
        _1014 = _868;
        _1015 = _867;
        _1016 = _866;
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
    }
    else
    {
        _1004 = _1005;
        _1006 = _1005;
        _1007 = _1005;
        _1008 = _1005;
        _1009 = _1005;
        _1010 = _1005;
        _1011 = _1005;
        _1012 = _1005;
        _1013 = _1005;
        _1014 = _1005;
        _1015 = _1005;
        _1016 = _1005;
        _1017 = 0.0;
        _1018 = 0.0;
        _1019 = 0.0;
    }
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1047 = fma(_674, cbModelParam._m0[30u].z, fma(_670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _666));
        float _1051 = fma(_674, cbModelParam._m0[31u].z, fma(_670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _666));
        float _1055 = fma(_674, cbModelParam._m0[32u].z, fma(_670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _666));
        float _1078 = _666 + _440;
        float _1079 = _670 + _441;
        float _1080 = _674 + _442;
        float _1090 = fma(_1080, cbModelParam._m0[30u].z, fma(_1079, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1078)) - _1047;
        float _1091 = fma(_1080, cbModelParam._m0[31u].z, fma(_1079, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1078)) - _1051;
        float _1092 = fma(_1080, cbModelParam._m0[32u].z, fma(_1079, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1078)) - _1055;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1047 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1051 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[35u].z) + ((((((_1055 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1146 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1113.x + (-0.5));
        float _1148 = _1146 * (_1113.y + (-0.5));
        float _1149 = _1146 * (_1113.z + (-0.5));
        float _1156 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1120.x + (-0.5));
        float _1158 = _1156 * (_1120.y + (-0.5));
        float _1159 = _1156 * (_1120.z + (-0.5));
        float _1166 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1127.x + (-0.5));
        float _1168 = _1166 * (_1127.y + (-0.5));
        float _1169 = _1166 * (_1127.z + (-0.5));
        float _1176 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1134.x + (-0.5));
        float _1178 = _1176 * (_1134.y + (-0.5));
        float _1179 = _1176 * (_1134.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1199 = (dot(vec3(_440, _441, _442), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1208 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3724 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1210 + 1.0))) + _1215) * _1180;
        float _1225 = _1148 * 0.5;
        float _1226 = _1158 * 0.5;
        float _1227 = _1168 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_440, _441, _442), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3757 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1252 + 1.0))) + _1257) * _1181;
        float _1267 = _1149 * 0.5;
        float _1268 = _1159 * 0.5;
        float _1269 = _1169 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_440, _441, _442), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3790 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1294 + 1.0))) + _1299) * _1182;
        _1316 = _1149;
        _1317 = _1148;
        _1318 = _1147;
        _1319 = _1159;
        _1320 = _1158;
        _1321 = _1157;
        _1322 = _1169;
        _1323 = _1168;
        _1324 = _1167;
        _1325 = _1182;
        _1326 = _1181;
        _1327 = _1180;
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1329 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1330 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1005;
        _1317 = _1005;
        _1318 = _1005;
        _1319 = _1005;
        _1320 = _1005;
        _1321 = _1005;
        _1322 = _1005;
        _1323 = _1005;
        _1324 = _1005;
        _1325 = _1005;
        _1326 = _1005;
        _1327 = _1005;
        _1328 = 0.0;
        _1329 = 0.0;
        _1330 = 0.0;
    }
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1017)) + _1017;
    float _1341 = (cbModelParam._m0[1u].x * (_1329 - _1018)) + _1018;
    float _1342 = (cbModelParam._m0[1u].x * (_1330 - _1019)) + _1019;
    float _1363 = fma(_1342, cbSceneParam._m0[89u].z, fma(_1341, cbSceneParam._m0[89u].y, _1340 * cbSceneParam._m0[89u].x));
    float _1366 = fma(_1342, cbSceneParam._m0[90u].z, fma(_1341, cbSceneParam._m0[90u].y, _1340 * cbSceneParam._m0[90u].x));
    float _1369 = fma(_1342, cbSceneParam._m0[91u].z, fma(_1341, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1340));
    float _1384 = _613 * 0.5;
    float _1385 = _614 * 0.5;
    float _1386 = _615 * 0.5;
    float _1387 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1318, _1321, _1324, _1327));
    float _1390 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1317, _1320, _1323, _1326));
    float _1393 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1427;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1400 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1004, _1008, _1011, _1014));
        float _1404 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1408 = dot(vec4(_1384, _1385, _1386, 1.0), vec4(_1007, _1010, _1013, _1016));
        float _1415 = dot(vec4(cbModelParam._m0[39u]), vec4(_1384, _1385, _1386, 1.0));
        _1427 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1415) ? 0.0 : (isnan(0.0) ? _1415 : max(0.0, _1415))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1427 = 1.0;
    }
    float _1438;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1429 = dot(vec4(cbModelParam._m0[40u]), vec4(_1384, _1385, _1386, 1.0));
        _1438 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)), isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1438 = 1.0;
    }
    float _1442 = (_1438 * cbModelParam._m0[1u].x) + (_1427 * (1.0 - cbModelParam._m0[1u].x));
    float _1452 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _443);
    float _1453 = isnan(_1452) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1452 : min(cbModelParam._m0[25u].z, _1452));
    float _1533;
    float _1535;
    float _1537;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1500 = fma(_674, cbModelParam._m0[13u].z, fma(_670, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _666)) + cbModelParam._m0[13u].w;
        float _1504 = fma(_674, cbModelParam._m0[14u].z, fma(_670, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _666)) + cbModelParam._m0[14u].w;
        float _1508 = fma(_674, cbModelParam._m0[15u].z, fma(_670, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _666)) + cbModelParam._m0[15u].w;
        float _1511 = fma(_615, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613));
        float _1514 = fma(_615, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613));
        float _1517 = fma(_615, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613));
        float _1545;
        if (_1511 > 0.0)
        {
            _1545 = abs((1.0 - _1500) / _1511);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1500 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1545 = frontier_phi_17_15_ladder;
        }
        float _1769;
        if (_1514 > 0.0)
        {
            _1769 = abs((1.0 - _1504) / _1514);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1504 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1769 = frontier_phi_26_22_ladder;
        }
        float _2015;
        if (_1517 > 0.0)
        {
            _2015 = abs((1.0 - _1508) / _1517);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1508 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2015 = frontier_phi_38_33_ladder;
        }
        float _2017 = isnan(_1769) ? _1545 : (isnan(_1545) ? _1769 : min(_1545, _1769));
        float _2018 = isnan(_2015) ? _2017 : (isnan(_2017) ? _2015 : min(_2017, _2015));
        float _2022 = (_2018 * _1511) + _1500;
        float _2023 = (_2018 * _1514) + _1504;
        float _2024 = (_2018 * _1517) + _1508;
        float _2025 = _2018 * 9.9999997473787516355514526367188e-05;
        float _2027 = (-1.0) - _2025;
        float _2029 = _2025 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2024 > _2029) || ((_2024 < _2027) || ((_2023 > _2029) || ((_2023 < _2027) || ((_2022 < _2027) || (_2022 > _2029))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2148 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2024, cbModelParam._m0[9u].z, fma(_2023, cbModelParam._m0[9u].y, _2022 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2024, cbModelParam._m0[10u].z, fma(_2023, cbModelParam._m0[10u].y, _2022 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2024, cbModelParam._m0[11u].z, fma(_2023, cbModelParam._m0[11u].y, _2022 * cbModelParam._m0[11u].x))), _1453);
            frontier_phi_16_38_ladder = _2148.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2148.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2148.x * cbModelParam._m0[1u].y;
        }
        _1533 = frontier_phi_16_38_ladder_2;
        _1535 = frontier_phi_16_38_ladder_1;
        _1537 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_613, _614, _615), _1453);
        _1533 = _1521.x * cbModelParam._m0[1u].y;
        _1535 = _1521.y * cbModelParam._m0[1u].y;
        _1537 = _1521.z * cbModelParam._m0[1u].y;
    }
    float _1541 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _443);
    float _1542 = isnan(_1541) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1541 : min(cbModelParam._m0[25u].w, _1541));
    float _1632;
    float _1634;
    float _1636;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1596 = fma(_674, cbModelParam._m0[21u].z, fma(_670, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _666)) + cbModelParam._m0[21u].w;
        float _1600 = fma(_674, cbModelParam._m0[22u].z, fma(_670, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _666)) + cbModelParam._m0[22u].w;
        float _1604 = fma(_674, cbModelParam._m0[23u].z, fma(_670, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _666)) + cbModelParam._m0[23u].w;
        float _1607 = fma(_615, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613));
        float _1610 = fma(_615, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613));
        float _1613 = fma(_615, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613));
        float _1774;
        if (_1607 > 0.0)
        {
            _1774 = abs((1.0 - _1596) / _1607);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1596 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1774 = frontier_phi_28_24_ladder;
        }
        float _2042;
        if (_1610 > 0.0)
        {
            _2042 = abs((1.0 - _1600) / _1610);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1600 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2042 = frontier_phi_40_35_ladder;
        }
        float _2247;
        if (_1613 > 0.0)
        {
            _2247 = abs((1.0 - _1604) / _1613);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1604 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2247 = frontier_phi_49_46_ladder;
        }
        float _2249 = isnan(_2042) ? _1774 : (isnan(_1774) ? _2042 : min(_1774, _2042));
        float _2250 = isnan(_2247) ? _2249 : (isnan(_2249) ? _2247 : min(_2249, _2247));
        float _2254 = (_2250 * _1607) + _1596;
        float _2255 = (_2250 * _1610) + _1600;
        float _2256 = (_2250 * _1613) + _1604;
        float _2257 = _2250 * 9.9999997473787516355514526367188e-05;
        float _2258 = (-1.0) - _2257;
        float _2260 = _2257 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2256 > _2260) || ((_2256 < _2258) || ((_2255 > _2260) || ((_2255 < _2258) || ((_2254 < _2258) || (_2254 > _2260))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2455 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2256, cbModelParam._m0[17u].z, fma(_2255, cbModelParam._m0[17u].y, _2254 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2256, cbModelParam._m0[18u].z, fma(_2255, cbModelParam._m0[18u].y, _2254 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2256, cbModelParam._m0[19u].z, fma(_2255, cbModelParam._m0[19u].y, _2254 * cbModelParam._m0[19u].x))), _1542);
            frontier_phi_25_49_ladder = _2455.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2455.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2455.x * cbModelParam._m0[1u].z;
        }
        _1632 = frontier_phi_25_49_ladder_2;
        _1634 = frontier_phi_25_49_ladder_1;
        _1636 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_613, _614, _615), _1542);
        _1632 = _1616.x * cbModelParam._m0[1u].z;
        _1634 = _1616.y * cbModelParam._m0[1u].z;
        _1636 = _1616.z * cbModelParam._m0[1u].z;
    }
    float _1648 = ((((1.0 - _634) * ((_621 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_634 * _621)) * _605;
    float _1649 = _1648 * ((cbModelParam._m0[1u].w * (_1632 - _1533)) + _1533);
    float _1650 = _1648 * ((cbModelParam._m0[1u].w * (_1634 - _1535)) + _1535);
    float _1651 = _1648 * ((cbModelParam._m0[1u].w * (_1636 - _1537)) + _1537);
    float _1654 = fma(_1651, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1649 * cbSceneParam._m0[89u].x));
    float _1657 = fma(_1651, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1649 * cbSceneParam._m0[90u].x));
    float _1660 = fma(_1651, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, _1649 * cbSceneParam._m0[91u].x));
    vec4 _1668 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_540, _541));
    float _1670 = _1668.w;
    float _1682 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1670);
    float _1683 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1670);
    float _1684 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1670);
    uvec4 _1688 = floatBitsToUint(cbInstanceData._m0[_226 + 5u]);
    uint _1690 = _1688.x * 14u;
    uint _1691 = _1690 + 13u;
    float _1698 = _605 + (-1.0);
    float _1703 = (cbLight._m0[_1691].x * _1698) + 1.0;
    float _1704 = (cbLight._m0[_1691].y * _1698) + 1.0;
    float _1705 = (cbLight._m0[_1691].z * _1698) + 1.0;
    float _1706 = (cbLight._m0[_1691].w * _1698) + 1.0;
    uint _1707 = _1690 + 5u;
    float _1713 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
    uint _1717 = _1690 + 4u;
    float _1727 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1731 = _1690 | 1u;
    float _1742 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_440, _441, _442));
    float _1745 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_440, _441, _442));
    float _3926 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _3937 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1750 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _1752 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.3183098733425140380859375;
    float _1759 = ((cbLight._m0[_1707].x * _1713) * _1752) + (((cbLight._m0[_1717].x * _1682) * _1727) * _1750);
    float _1760 = ((_1713 * cbLight._m0[_1707].y) * _1752) + (((cbLight._m0[_1717].y * _1683) * _1727) * _1750);
    float _1761 = ((_1713 * cbLight._m0[_1707].z) * _1752) + (((cbLight._m0[_1717].z * _1684) * _1727) * _1750);
    uvec4 _1766 = floatBitsToUint(cbLight._m0[_1690 + 12u]);
    bool _1768 = _1766.x == 0u;
    float _1779;
    float _1781;
    float _1783;
    if (_1768)
    {
        _1779 = _1759;
        _1781 = _1760;
        _1783 = _1761;
    }
    else
    {
        uint _1787 = _1690 + 6u;
        float _1803 = (dot(vec3(cbLight._m0[_1690 + 2u].xyz), vec3(_440, _441, _442)) * 0.5) + 0.5;
        float _1804 = _1803 * _1803;
        float _3948 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1806 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _1779 = (((cbLight._m0[_1787].x * 0.3183098733425140380859375) * _1805) * _1806) + _1759;
        _1781 = (((cbLight._m0[_1787].y * 0.3183098733425140380859375) * _1805) * _1806) + _1760;
        _1783 = (((cbLight._m0[_1787].z * 0.3183098733425140380859375) * _1805) * _1806) + _1761;
    }
    bool _1786 = _1766.y == 0u;
    float _1824;
    float _1826;
    float _1828;
    if (_1786)
    {
        _1824 = _1779;
        _1826 = _1781;
        _1828 = _1783;
    }
    else
    {
        uint _1986 = _1690 + 7u;
        float _2002 = (dot(vec3(cbLight._m0[_1690 + 3u].xyz), vec3(_440, _441, _442)) * 0.5) + 0.5;
        float _2003 = _2002 * _2002;
        float _3964 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2004 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _2005 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _1824 = (((cbLight._m0[_1986].x * 0.3183098733425140380859375) * _2004) * _2005) + _1779;
        _1826 = (((cbLight._m0[_1986].y * 0.3183098733425140380859375) * _2004) * _2005) + _1781;
        _1828 = (((cbLight._m0[_1986].z * 0.3183098733425140380859375) * _2004) * _2005) + _1783;
    }
    uint _1831 = _1690 + 8u;
    float _1844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1690].w)) * _443) * 0.949999988079071044921875);
    float _1845 = _1844 * _1844;
    float _1846 = cbLight._m0[_1690].x + _519;
    float _1847 = cbLight._m0[_1690].y + _520;
    float _1848 = cbLight._m0[_1690].z + _521;
    float _1852 = inversesqrt(dot(vec3(_1846, _1847, _1848), vec3(_1846, _1847, _1848)));
    float _1853 = _1852 * _1846;
    float _1854 = _1852 * _1847;
    float _1855 = _1852 * _1848;
    float _1856 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_1690].xyz));
    float _3980 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _3991 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _1860 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _1861 = dot(vec3(_440, _441, _442), vec3(_1853, _1854, _1855));
    float _4002 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1864 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _1865 = dot(vec3(cbLight._m0[_1690].xyz), vec3(_1853, _1854, _1855));
    float _4013 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1869 = _1845 * _1845;
    float _1873 = ((_1864 * _1864) * (_1869 + (-1.0))) + 1.0;
    float _1884 = (exp2(log2(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1885 = 1.0 - _1845;
    float _1896 = (0.5 / (((_1860 * ((_1859 * _1885) + _1845)) + 9.9999999392252902907785028219223e-09) + (((_1860 * _1885) + _1845) * _1859))) * _1859;
    float _4024 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1898 = (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1869 / ((_1873 * _1873) * 3.141590118408203125));
    uint _1912 = _1690 + 9u;
    float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1731].w)) * _443) * 0.949999988079071044921875);
    float _1924 = _1923 * _1923;
    float _1925 = cbLight._m0[_1731].x + _519;
    float _1926 = cbLight._m0[_1731].y + _520;
    float _1927 = cbLight._m0[_1731].z + _521;
    float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
    float _1932 = _1931 * _1925;
    float _1933 = _1931 * _1926;
    float _1934 = _1931 * _1927;
    float _1935 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_1731].xyz));
    float _4035 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _1939 = dot(vec3(_440, _441, _442), vec3(_1932, _1933, _1934));
    float _4046 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1942 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _1943 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_1932, _1933, _1934));
    float _4057 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1947 = _1924 * _1924;
    float _1951 = ((_1942 * _1942) * (_1947 + (-1.0))) + 1.0;
    float _1960 = (exp2(log2(1.0 - (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1961 = 1.0 - _1924;
    float _1971 = (0.5 / (((_1860 * ((_1938 * _1961) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1860 * _1961) + _1924) * _1938))) * _1938;
    float _4068 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1973 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1947 / ((_1951 * _1951) * 3.141590118408203125));
    float _1983 = (((_1960 * cbLight._m0[_1912].x) * _1973) * _1713) + ((((cbLight._m0[_1831].x * _1682) * _1884) * _1898) * _1727);
    float _1984 = (((_1960 * cbLight._m0[_1912].y) * _1973) * _1713) + ((((cbLight._m0[_1831].y * _1683) * _1884) * _1898) * _1727);
    float _1985 = (((_1960 * cbLight._m0[_1912].z) * _1973) * _1713) + ((((cbLight._m0[_1831].z * _1684) * _1884) * _1898) * _1727);
    float _2047;
    float _2049;
    float _2051;
    if (_1768)
    {
        _2047 = _1983;
        _2049 = _1984;
        _2051 = _1985;
    }
    else
    {
        uint _2053 = _1690 + 2u;
        uint _2057 = _1690 + 10u;
        float _2071 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2053].w)) * _443) * 0.949999988079071044921875);
        float _2072 = _2071 * _2071;
        float _2073 = cbLight._m0[_2053].x + _519;
        float _2074 = cbLight._m0[_2053].y + _520;
        float _2075 = cbLight._m0[_2053].z + _521;
        float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
        float _2080 = _2079 * _2073;
        float _2081 = _2079 * _2074;
        float _2082 = _2079 * _2075;
        float _2083 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_2053].xyz));
        float _4079 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2086 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _2087 = dot(vec3(_440, _441, _442), vec3(_2080, _2081, _2082));
        float _4090 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2090 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2091 = dot(vec3(cbLight._m0[_2053].xyz), vec3(_2080, _2081, _2082));
        float _4101 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
        float _2095 = _2072 * _2072;
        float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
        float _2108 = (exp2(log2(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2109 = 1.0 - _2072;
        float _2119 = (0.5 / (((_1860 * ((_2086 * _2109) + _2072)) + 9.9999999392252902907785028219223e-09) + (((_1860 * _2109) + _2072) * _2086))) * _2086;
        float _4112 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2121 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
        float _2122 = isnan(1.0) ? _1705 : (isnan(_1705) ? 1.0 : min(_1705, 1.0));
        _2047 = (((_2108 * cbLight._m0[_2057].x) * _2121) * _2122) + _1983;
        _2049 = (((_2108 * cbLight._m0[_2057].y) * _2121) * _2122) + _1984;
        _2051 = (((_2108 * cbLight._m0[_2057].z) * _2121) * _2122) + _1985;
    }
    float _2157;
    float _2159;
    float _2161;
    if (_1786)
    {
        _2157 = _2047;
        _2159 = _2049;
        _2161 = _2051;
    }
    else
    {
        uint _2168 = _1690 + 3u;
        uint _2172 = _1690 + 11u;
        float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _443) * 0.949999988079071044921875);
        float _2187 = _2186 * _2186;
        float _2188 = cbLight._m0[_2168].x + _519;
        float _2189 = cbLight._m0[_2168].y + _520;
        float _2190 = cbLight._m0[_2168].z + _521;
        float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
        float _2195 = _2194 * _2188;
        float _2196 = _2194 * _2189;
        float _2197 = _2194 * _2190;
        float _2198 = dot(vec3(_440, _441, _442), vec3(cbLight._m0[_2168].xyz));
        float _4128 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2201 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2202 = dot(vec3(_440, _441, _442), vec3(_2195, _2196, _2197));
        float _4139 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
        float _2205 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2206 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2195, _2196, _2197));
        float _4150 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2210 = _2187 * _2187;
        float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
        float _2223 = (exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2224 = 1.0 - _2187;
        float _2234 = (0.5 / (((_1860 * ((_2201 * _2224) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_1860 * _2224) + _2187) * _2201))) * _2201;
        float _4161 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2236 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
        float _2237 = isnan(1.0) ? _1706 : (isnan(_1706) ? 1.0 : min(_1706, 1.0));
        _2157 = (((_2223 * cbLight._m0[_2172].x) * _2236) * _2237) + _2047;
        _2159 = (((_2223 * cbLight._m0[_2172].y) * _2236) * _2237) + _2049;
        _2161 = (((_2223 * cbLight._m0[_2172].z) * _2236) * _2237) + _2051;
    }
    float _2372;
    float _2374;
    float _2376;
    float _2378;
    float _2380;
    float _2382;
    if (_1688.y == 0u)
    {
        float _2312 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2313 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2312;
        float _2314 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2312;
        float _2315 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2312;
        uvec4 _2327 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2328 = _2327.x;
        uint _2339 = uint((float(_2327.y) * floor(float(uint(cbSceneParam._m0[85u].y * _541) / _2328))) + floor(float(uint(cbSceneParam._m0[85u].x * _540) / _2328)));
        float _2349 = (log2(_2315 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2350 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        uint _2353 = uint(isnan(14.0) ? _2350 : (isnan(_2350) ? 14.0 : min(_2350, 14.0)));
        uvec4 _2358 = texelFetch(g_lightClusterGridBuffer, int(((_2353 << 2u) + (_2339 << 6u)) >> 2u));
        uint _2359 = _2358.x;
        uint _2360 = _2327.z;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        if (((((1u << ((_2360 >> 4u) & 15u)) + 4294967295u) & _2359) == 0u) || ((_2360 & 240u) == 0u))
        {
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
        }
        else
        {
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2613 = 0.0;
            float _2614 = 0.0;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            uint _2619 = 0u;
            uint _2628;
            bool _2629;
            for (;;)
            {
                _2628 = texelFetch(g_lightClassification, int((((_2353 << 5u) + (_2339 << 9u)) + (_2619 << 2u)) >> 2u)).x;
                _2629 = _2628 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2629)
                {
                    frontier_phi_66_pred = _2613;
                    frontier_phi_66_pred_1 = _2618;
                    frontier_phi_66_pred_2 = _2617;
                    frontier_phi_66_pred_3 = _2616;
                    frontier_phi_66_pred_4 = _2615;
                    frontier_phi_66_pred_5 = _2614;
                }
                else
                {
                    float _2758;
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    uint _2764;
                    _2758 = _2613;
                    _2759 = _2614;
                    _2760 = _2615;
                    _2761 = _2616;
                    _2762 = _2617;
                    _2763 = _2618;
                    _2764 = _2628;
                    float _2685;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    for (;;)
                    {
                        uint _2768 = uint(findLSB(_2764)) + (_2619 << 5u);
                        uint _2765 = (_2764 + 4294967295u) & _2764;
                        uint _2770 = _2768 * 48u;
                        vec4 _2784 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2770)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2770 + 3u)).x));
                        uint _2790 = (_2768 * 48u) + 4u;
                        vec4 _2803 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2790)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 3u)).x));
                        uint _2809 = (_2768 * 48u) + 8u;
                        vec3 _2820 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x));
                        float _2824 = _2784.x - _2313;
                        float _2825 = _2784.y - _2314;
                        float _2826 = _2784.z - _2315;
                        float _2827 = dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826));
                        float _2830 = inversesqrt(_2827);
                        float _2831 = _2830 * _2824;
                        float _2832 = _2830 * _2825;
                        float _2833 = _2830 * _2826;
                        float _2834 = dot(vec3(_561, _564, _567), vec3(_2831, _2832, _2833));
                        float _2839 = 1.0 - (_2827 * _2784.w);
                        float _4187 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2840 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2841 = sqrt(_2827) * _2803.w;
                        float _2844 = 1.39999997615814208984375 / (_2841 + 1.39999997615814208984375);
                        float _2845 = _2844 * _2844;
                        float _2848 = ((1.0 - _2845) * _2834) + _2845;
                        float _2851 = _2841 * _2841;
                        float _2855 = ((isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0))) * _2840) / ((_2851 * 0.699999988079071044921875) + 1.0);
                        float _2859 = (-0.0) - _2313;
                        float _2860 = (-0.0) - _2314;
                        float _2861 = (-0.0) - _2315;
                        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
                        float _2866 = _2865 * _2859;
                        float _2867 = _2865 * _2860;
                        float _2868 = _2865 * _2861;
                        float _2876 = exp2(log2(1.0 / ((_2851 * 3.5) + 5.0)) * 0.25);
                        float _2877 = 1.0 - _621;
                        float _2884 = sqrt(1.0 - ((1.0 - (_2877 * _2877)) * (1.0 - (_2876 * _2876))));
                        float _2885 = _2884 * _2884;
                        float _2886 = _2885 * _2885;
                        float _2887 = _2866 + _2831;
                        float _2888 = _2867 + _2832;
                        float _2889 = _2868 + _2833;
                        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
                        float _2897 = dot(vec3(_561, _564, _567), vec3(_2866, _2867, _2868));
                        float _4203 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2900 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2901 = dot(vec3(_561, _564, _567), vec3(_2893 * _2887, _2893 * _2888, _2893 * _2889));
                        float _4214 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2904 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2908 = ((_2904 * _2904) * (_2886 + (-1.0))) + 1.0;
                        float _2909 = _2844 * _2885;
                        float _2910 = _2909 * _2909;
                        float _2913 = ((1.0 - _2910) * _2834) + _2910;
                        float _4225 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2914 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2915 = 1.0 - _2885;
                        float _2925 = (0.5 / (((_2914 * ((_2900 * _2915) + _2885)) + 9.9999999392252902907785028219223e-09) + (((_2914 * _2915) + _2885) * _2900))) * _2914;
                        float _4236 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                        float _2936 = (((_2886 * 3.1415927410125732421875) * (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) / ((_2908 * _2908) * ((_2851 * 2.1991131305694580078125) + 3.141590118408203125))) * _2840;
                        _2688 = (_2855 * _2803.x) + _2761;
                        _2689 = (_2855 * _2803.y) + _2762;
                        _2690 = (_2855 * _2803.z) + _2763;
                        _2685 = (_2936 * _2820.x) + _2758;
                        _2686 = (_2936 * _2820.y) + _2759;
                        _2687 = (_2936 * _2820.z) + _2760;
                        if (_2765 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2758 = _2685;
                            _2759 = _2686;
                            _2760 = _2687;
                            _2761 = _2688;
                            _2762 = _2689;
                            _2763 = _2690;
                            _2764 = _2765;
                        }
                    }
                    frontier_phi_66_pred = _2685;
                    frontier_phi_66_pred_1 = _2690;
                    frontier_phi_66_pred_2 = _2689;
                    frontier_phi_66_pred_3 = _2688;
                    frontier_phi_66_pred_4 = _2687;
                    frontier_phi_66_pred_5 = _2686;
                }
                _2461 = frontier_phi_66_pred;
                _2471 = frontier_phi_66_pred_1;
                _2469 = frontier_phi_66_pred_2;
                _2467 = frontier_phi_66_pred_3;
                _2465 = frontier_phi_66_pred_4;
                _2463 = frontier_phi_66_pred_5;
                uint _2620 = _2619 + 1u;
                if (_2620 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2613 = _2461;
                    _2614 = _2463;
                    _2615 = _2465;
                    _2616 = _2467;
                    _2617 = _2469;
                    _2618 = _2471;
                    _2619 = _2620;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
        }
        uvec4 _2474 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2475 = _2474.z;
        uint _2477 = (_2475 >> 8u) & 15u;
        float _2581;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        if (((4294967295u << _2477) & _2359) == 0u)
        {
            _2581 = _2460;
            _2583 = _2462;
            _2585 = _2464;
            _2587 = _2466;
            _2589 = _2468;
            _2591 = _2470;
        }
        else
        {
            float _2606 = inversesqrt(dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315)));
            float _2607 = _2606 * _2313;
            float _2608 = _2606 * _2314;
            float _2609 = _2606 * _2315;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2477 < ((_2475 >> 12u) & 15u))
            {
                float _2582;
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2741 = _2460;
                float _2742 = _2462;
                float _2743 = _2464;
                float _2744 = _2466;
                float _2745 = _2468;
                float _2746 = _2470;
                uint _2747 = _2477;
                uint _2756;
                bool _2757;
                for (;;)
                {
                    _2756 = texelFetch(g_lightClassification, int((((_2353 << 5u) + (_2339 << 9u)) + (_2747 << 2u)) >> 2u)).x;
                    _2757 = _2756 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2757)
                    {
                        frontier_phi_77_pred = _2746;
                        frontier_phi_77_pred_1 = _2745;
                        frontier_phi_77_pred_2 = _2744;
                        frontier_phi_77_pred_3 = _2743;
                        frontier_phi_77_pred_4 = _2742;
                        frontier_phi_77_pred_5 = _2741;
                    }
                    else
                    {
                        float _2950;
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _3245;
                        float _3246;
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _2963 = _2741;
                        float _2964 = _2742;
                        float _2965 = _2743;
                        float _2966 = _2744;
                        float _2967 = _2745;
                        float _2968 = _2746;
                        uint _2969 = _2756;
                        uint _2970;
                        vec4 _2995;
                        float _2996;
                        vec4 _3011;
                        vec3 _3023;
                        vec4 _3039;
                        vec4 _3055;
                        float _3101;
                        bool _3102;
                        for (;;)
                        {
                            uint _2980 = ((_2747 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2969));
                            _2970 = (_2969 + 4294967295u) & _2969;
                            uint _2982 = _2980 * 40u;
                            _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            _2996 = _2995.w;
                            uint _2998 = (_2980 * 40u) + 4u;
                            _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3013 = (_2980 * 40u) + 8u;
                            _3023 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3013)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3013 + 2u)).x));
                            uint _3026 = (_2980 * 40u) + 16u;
                            _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3042 = (_2980 * 40u) + 20u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            uint _3057 = (_2980 * 40u) + 24u;
                            vec4 _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3076 = (_2980 * 40u) + 28u;
                            vec4 _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            _3101 = fma(_2315, _3089.z, fma(_2314, _3089.y, _3089.x * _2313)) + _3089.w;
                            _3102 = !((fma(_2315, _3070.z, fma(_2314, _3070.y, _3070.x * _2313)) + _3070.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3102)
                            {
                                float _3129 = _2995.x - _2313;
                                float _3130 = _2995.y - _2314;
                                float _3131 = _2995.z - _2315;
                                float _3132 = dot(vec3(_3129, _3130, _3131), vec3(_3129, _3130, _3131));
                                float _3135 = inversesqrt(_3132);
                                float _3136 = _3135 * _3129;
                                float _3137 = _3135 * _3130;
                                float _3138 = _3135 * _3131;
                                float _3142 = 1.0 - (_3132 / (_2996 * _2996));
                                float _4247 = isnan(0.0) ? _3142 : (isnan(_3142) ? 0.0 : max(_3142, 0.0));
                                float _3143 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3147 = sqrt(_3132) * _3011.w;
                                float _3149 = 1.39999997615814208984375 / (_3147 + 1.39999997615814208984375);
                                float _3150 = _3149 * _3149;
                                float _3153 = ((1.0 - _3150) * dot(vec3(_3136, _3137, _3138), vec3(_561, _564, _567))) + _3150;
                                float _3156 = _3147 * _3147;
                                float _3160 = (fma(_2315, _3039.z, fma(_2314, _3039.y, _3039.x * _2313)) + _3039.w) / _3101;
                                float _3161 = (fma(_2315, _3055.z, fma(_2314, _3055.y, _3055.x * _2313)) + _3055.w) / _3101;
                                float _3165 = 1.0 - dot(vec2(_3160, _3161), vec2(_3160, _3161));
                                float _4263 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3166 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3167 = _3166 * (((isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0))) * _3143) / ((_3156 * 0.699999988079071044921875) + 1.0));
                                float _3179 = exp2(log2(1.0 / ((_3156 * 3.5) + 5.0)) * 0.25);
                                float _3180 = 1.0 - _621;
                                float _3187 = sqrt(1.0 - ((1.0 - (_3180 * _3180)) * (1.0 - (_3179 * _3179))));
                                float _3188 = _3187 * _3187;
                                float _3189 = _3188 * _3188;
                                float _3190 = _3136 - _2607;
                                float _3191 = _3137 - _2608;
                                float _3192 = _3138 - _2609;
                                float _3196 = inversesqrt(dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192)));
                                float _3200 = dot(vec3(_561, _564, _567), vec3((-0.0) - _2607, (-0.0) - _2608, (-0.0) - _2609));
                                float _4274 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3203 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3204 = dot(vec3(_561, _564, _567), vec3(_3196 * _3190, _3196 * _3191, _3196 * _3192));
                                float _4285 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3207 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3211 = ((_3207 * _3207) * (_3189 + (-1.0))) + 1.0;
                                float _3212 = _3149 * _3188;
                                float _3213 = _3212 * _3212;
                                float _3219 = ((1.0 - _3213) * dot(vec3(_561, _564, _567), vec3(_3136, _3137, _3138))) + _3213;
                                float _4296 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                                float _3220 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3221 = 1.0 - _3188;
                                float _3231 = (0.5 / (((_3220 * ((_3203 * _3221) + _3188)) + 9.9999999392252902907785028219223e-09) + (((_3220 * _3221) + _3188) * _3203))) * _3220;
                                float _4307 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3241 = (_3166 * _3143) * (((_3189 * 3.1415927410125732421875) * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) / ((_3211 * _3211) * ((_3156 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3167 * _3011.y;
                                frontier_phi_83_pred_1 = _3167 * _3011.x;
                                frontier_phi_83_pred_2 = _3241 * _3023.z;
                                frontier_phi_83_pred_3 = _3241 * _3023.y;
                                frontier_phi_83_pred_4 = _3241 * _3023.x;
                                frontier_phi_83_pred_5 = _3167 * _3011.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3249 = frontier_phi_83_pred;
                            _3248 = frontier_phi_83_pred_1;
                            _3247 = frontier_phi_83_pred_2;
                            _3246 = frontier_phi_83_pred_3;
                            _3245 = frontier_phi_83_pred_4;
                            _3250 = frontier_phi_83_pred_5;
                            _2953 = _3248 + _2966;
                            _2954 = _3249 + _2967;
                            _2955 = _3250 + _2968;
                            _2950 = _3245 + _2963;
                            _2951 = _3246 + _2964;
                            _2952 = _3247 + _2965;
                            if (_2970 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2963 = _2950;
                                _2964 = _2951;
                                _2965 = _2952;
                                _2966 = _2953;
                                _2967 = _2954;
                                _2968 = _2955;
                                _2969 = _2970;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2955;
                        frontier_phi_77_pred_1 = _2954;
                        frontier_phi_77_pred_2 = _2953;
                        frontier_phi_77_pred_3 = _2952;
                        frontier_phi_77_pred_4 = _2951;
                        frontier_phi_77_pred_5 = _2950;
                    }
                    _2592 = frontier_phi_77_pred;
                    _2590 = frontier_phi_77_pred_1;
                    _2588 = frontier_phi_77_pred_2;
                    _2586 = frontier_phi_77_pred_3;
                    _2584 = frontier_phi_77_pred_4;
                    _2582 = frontier_phi_77_pred_5;
                    uint _2748 = _2747 + 1u;
                    if (_2748 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2741 = _2582;
                        _2742 = _2584;
                        _2743 = _2586;
                        _2744 = _2588;
                        _2745 = _2590;
                        _2746 = _2592;
                        _2747 = _2748;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2586;
                frontier_phi_58_59_ladder_1 = _2592;
                frontier_phi_58_59_ladder_2 = _2590;
                frontier_phi_58_59_ladder_3 = _2588;
                frontier_phi_58_59_ladder_4 = _2584;
                frontier_phi_58_59_ladder_5 = _2582;
            }
            else
            {
                frontier_phi_58_59_ladder = _2464;
                frontier_phi_58_59_ladder_1 = _2470;
                frontier_phi_58_59_ladder_2 = _2468;
                frontier_phi_58_59_ladder_3 = _2466;
                frontier_phi_58_59_ladder_4 = _2462;
                frontier_phi_58_59_ladder_5 = _2460;
            }
            _2581 = frontier_phi_58_59_ladder_5;
            _2583 = frontier_phi_58_59_ladder_4;
            _2585 = frontier_phi_58_59_ladder;
            _2587 = frontier_phi_58_59_ladder_3;
            _2589 = frontier_phi_58_59_ladder_2;
            _2591 = frontier_phi_58_59_ladder_1;
        }
        float _2596 = isnan(1.0) ? _605 : (isnan(_605) ? 1.0 : min(_605, 1.0));
        _2372 = (_2596 * _2587) + _1824;
        _2374 = (_2596 * _2589) + _1826;
        _2376 = (_2596 * _2591) + _1828;
        _2378 = ((_2581 * 0.039999999105930328369140625) * _2596) + _2157;
        _2380 = ((_2583 * 0.039999999105930328369140625) * _2596) + _2159;
        _2382 = ((_2585 * 0.039999999105930328369140625) * _2596) + _2161;
    }
    else
    {
        _2372 = _1824;
        _2374 = _1826;
        _2376 = _1828;
        _2378 = _2157;
        _2380 = _2159;
        _2382 = _2161;
    }
    float _4323 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _4334 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _4345 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _2399 = ((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2372 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _605))) + ((_2378 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    float _2400 = ((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2374 + ((isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))) * _605))) + ((_2380 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    float _2401 = ((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2376 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _605))) + ((_2382 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1442)) * cbPerFrame._m0[3u].x);
    uint _2402 = _226 + 6u;
    float _2410 = _540 / cbSceneParam._m0[86u].x;
    float _2411 = _541 / cbSceneParam._m0[86u].y;
    vec4 _2425 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2410, _2411, (log2((isnan(cbSceneParam._m0[77u].w) ? _461 : (isnan(_461) ? cbSceneParam._m0[77u].w : min(_461, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2427 = _2425.x;
    float _2428 = _2425.y;
    float _2429 = _2425.z;
    float _2430 = _2425.w;
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    if (_461 > cbSceneParam._m0[78u].w)
    {
        float _2485 = isnan(_461) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _461 : min(cbSceneParam._m0[80u].w, _461));
        float _2486 = _2485 / _461;
        float _2497 = _2486 * _512;
        float _2498 = _513 * _2486;
        float _2499 = (-0.0) - _2498;
        float _2501 = _2486 * _514;
        float _2503 = (cbSceneParam._m0[77u].w * _2499) / _2485;
        float _2504 = _2503 + cbSceneParam._m0[79u].w;
        float _2505 = cbSceneParam._m0[79u].w - _2498;
        float _2511 = sqrt(((_2497 * _2497) + (_2498 * _2498)) + (_2501 * _2501));
        float _2514 = (1.0 - (cbSceneParam._m0[77u].w / _2485)) * _2511;
        float _2519 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2521 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2698;
        if (abs((_2499 - _2503) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2698 = ((((_2504 > 0.0) ? exp2(_2519 * _2504) : (2.0 - exp2(_2521 * _2504))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2514;
        }
        else
        {
            float _2642 = 1.0 / cbSceneParam._m0[80u].x;
            float _2643 = isnan(_2505) ? _2504 : (isnan(_2504) ? _2505 : max(_2504, _2505));
            float _2644 = isnan(_2505) ? _2504 : (isnan(_2504) ? _2505 : min(_2504, _2505));
            float _2653 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : min(_2643, 0.0));
            float _2654 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : min(_2644, 0.0));
            _2698 = ((abs(_2511 / _2499) * cbSceneParam._m0[80u].y) * ((((_2653 - _2654) * 2.0) - ((exp2(_2519 * (isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0)))) - exp2(_2519 * (isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0))))) * _2642)) - ((exp2(_2521 * _2653) - exp2(_2521 * _2654)) * _2642))) + (_2514 * cbSceneParam._m0[80u].z);
        }
        vec4 _2700 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2410, _2411, 1.0), 0.0);
        float _2709 = exp2((_2698 * (-1.44269502162933349609375)) * (1.0 - _2700.w));
        float _2710 = log2(_2709);
        float _2726 = log2(_2430);
        _2523 = (exp2(_2726 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].x)) * _2700.x) / cbSceneParam._m0[78u].x)) + _2427;
        _2525 = (exp2(_2726 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].y)) * _2700.y) / cbSceneParam._m0[78u].y)) + _2428;
        _2527 = (exp2(_2726 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2710 * cbSceneParam._m0[78u].z)) * _2700.z) / cbSceneParam._m0[78u].z)) + _2429;
        _2529 = _2709 * _2430;
    }
    else
    {
        _2523 = _2427;
        _2525 = _2428;
        _2527 = _2429;
        _2529 = _2430;
    }
    bool _2736;
    vec4 _2539;
    vec4 _2561;
    float _2563;
    float _2567;
    float _2568;
    float _2569;
    float _2570;
    bool _2580;
    for (;;)
    {
        _2539 = cbMatDynParam._m0[0u];
        float _2541 = roundEven(_2539.y);
        bool _2542 = _2541 == 3.0;
        float _2543 = log2(_2529);
        float _2550 = exp2(_2543 * cbSceneParam._m0[78u].x) * _2399;
        float _2551 = exp2(_2543 * cbSceneParam._m0[78u].y) * _2400;
        float _2552 = exp2(_2543 * cbSceneParam._m0[78u].z) * _2401;
        float _2559 = _528 + (-0.5);
        _2561 = cbMtdParam._m0[1u];
        _2563 = _2561.y * _2559;
        float _2566 = (_2541 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2567 = _2566 * (_2542 ? _2550 : (_2550 + (cbSceneParam._m0[72u].w * _2523)));
        _2568 = _2566 * (_2542 ? _2551 : (_2551 + (cbSceneParam._m0[72u].w * _2525)));
        _2569 = _2566 * (_2542 ? _2552 : (_2552 + (cbSceneParam._m0[72u].w * _2527)));
        _2570 = _2559 * 0.999000012874603271484375;
        _2580 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2580)
        {
            if ((cbInstanceData._m0[_226 + 7u].x + _2570) < 0.5)
            {
                _2736 = true;
                break;
            }
        }
        uint _2677 = _580 + uint(_2539.w);
        if ((cbInstanceData._m0[_2677].w < 1.0) && ((cbInstanceData._m0[_2677].w + _2570) < 0.5))
        {
            _2736 = true;
            break;
        }
        if ((_2563 + 1.0) < _2561.x)
        {
            _2736 = true;
            break;
        }
        _2736 = false;
        break;
    }
    float _2941;
    if (_2736)
    {
        discard_state = true;
        _2941 = 0.0;
    }
    else
    {
        _2941 = cbInstanceData._m0[_2402].w;
    }
    SV_Target.x = _2567;
    SV_Target.y = _2568;
    SV_Target.z = _2569;
    SV_Target.w = _2941;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2402].w;
    discard_exit();
}


