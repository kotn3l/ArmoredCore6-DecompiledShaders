#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1122;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _241 = uint(roundEven(NORMAL.w)) * 13u;
    uint _246 = _241 + 1u;
    uint _250 = _241 + 2u;
    float _259 = sqrt(((cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x) + (cbInstanceData._m0[_241].x * cbInstanceData._m0[_241].x)) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x));
    float _260 = _259 * TEXCOORD.z;
    float _261 = _259 * TEXCOORD.w;
    vec4 _280 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _286 = _280.x * cbMtdParam._m0[9u].x;
    float _287 = _280.y * cbMtdParam._m0[9u].y;
    float _288 = _280.z * cbMtdParam._m0[9u].z;
    vec4 _307 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _260) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _261) + cbTextureTilingScale._m0[14u].w));
    vec4 _327 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _260) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _261) + cbTextureTilingScale._m0[20u].w));
    vec4 _353 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _357 = _353.z;
    float _361 = (_353.x * 2.0) + (-1.0);
    float _362 = (_353.y * 2.0) + (-1.0);
    float _363 = dot(vec2(_361, _362), vec2(_361, _362));
    float _3429 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _369 = sqrt(1.0 - (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))));
    float _374 = _361 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_327.x * 2.0) + (-1.0)));
    float _375 = _362 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_327.y * 2.0) + (-1.0)));
    vec4 _392 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _260) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _394 = _392.x;
    float _395 = 1.0 - _394;
    float _404 = isnan(-1.0) ? cbMtdParam._m0[24u].y : (isnan(cbMtdParam._m0[24u].y) ? (-1.0) : max(cbMtdParam._m0[24u].y, -1.0));
    float _407 = ((isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : min(_404, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _416 = (_407 - ((((((_394 - _395) * cbMtdParam._m0[24u].z) + _395) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _407))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3450 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _417 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _424 = (_417 * ((_307.x * cbMtdParam._m0[18u].x) - _286)) + _286;
    float _425 = (_417 * ((_307.y * cbMtdParam._m0[18u].y) - _287)) + _287;
    float _426 = (_417 * ((_307.z * cbMtdParam._m0[18u].z) - _288)) + _288;
    vec4 _439 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _260) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _261) + cbTextureTilingScale._m0[19u].w));
    float _441 = _439.x;
    float _442 = 1.0 - _441;
    float _471 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_441 - _442) * cbMtdParam._m0[24u].w) + _442) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3461 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _472 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _480 = ((((cbMtdParam._m0[10u].x - _424) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _472) + _424;
    float _481 = ((((cbMtdParam._m0[10u].y - _425) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _472) + _425;
    float _482 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _426)) * _472) + _426;
    float _487 = (((_327.z - _357) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _357;
    vec4 _501 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _260) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _261) + cbTextureTilingScale._m0[15u].w));
    float _508 = (_501.x * 2.0) + (-1.0);
    float _509 = (_501.y * 2.0) + (-1.0);
    float _510 = dot(vec2(_508, _509), vec2(_508, _509));
    float _3472 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _518 = (_417 * (_501.z - _487)) + _487;
    float _521 = ((cbMtdParam._m0[23u].y - _518) * _472) + _518;
    vec4 _543 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _260) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _261) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _549 = (_543.x * 2.0) + (-1.0);
    float _550 = (_543.y * 2.0) + (-1.0);
    float _551 = dot(vec2(_549, _550), vec2(_549, _550));
    float _3483 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    float _568 = (((_508 - _374) + (cbMtdParam._m0[21u].x * _374)) * _417) + _374;
    float _569 = (((_509 - _375) + (cbMtdParam._m0[21u].x * _375)) * _417) + _375;
    float _570 = (_417 * (sqrt(1.0 - (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0)))) - _369)) + _369;
    float _581 = (((_549 - _568) + (_568 * cbMtdParam._m0[22u].z)) * _472) + _568;
    float _582 = (((_550 - _569) + (_569 * cbMtdParam._m0[22u].z)) * _472) + _569;
    float _583 = ((sqrt(1.0 - (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) - _570) * _472) + _570;
    float _585 = cbMtdParam._m0[22u].x + _353.w;
    float _588 = fma(_583, _228 * NORMAL.x, fma(_582, _235 * TANGENT.x, (_221 * _213) * _581));
    float _591 = fma(_583, _228 * NORMAL.y, fma(_582, _235 * TANGENT.y, (_221 * _214) * _581));
    float _594 = fma(_583, _228 * NORMAL.z, fma(_582, _235 * TANGENT.z, (_221 * _215) * _581));
    float _598 = inversesqrt(dot(vec3(_588, _591, _594), vec3(_588, _591, _594)));
    float _599 = _598 * _588;
    float _600 = _598 * _591;
    float _601 = _598 * _594;
    float _3494 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _602 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
    float _3505 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _3516 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3527 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3538 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _620 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _670 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _660);
    float _671 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _660);
    float _672 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _660);
    float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
    float _677 = _670 * _676;
    float _678 = _671 * _676;
    float _679 = _672 * _676;
    float _685 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _686 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _707 = fma(_601, cbSceneParam._m0[5u].z, fma(_600, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _599));
    float _710 = fma(_601, cbSceneParam._m0[6u].z, fma(_600, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _599));
    float _713 = fma(_601, cbSceneParam._m0[7u].z, fma(_600, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _599));
    uint _727 = (_241 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _733 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0)))) * cbInstanceData._m0[_727].x;
    float _734 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * cbInstanceData._m0[_727].y;
    float _735 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0)))) * cbInstanceData._m0[_727].z;
    float _3549 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _736 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _3560 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _737 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
    float _3571 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _738 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
    vec4 _747 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _685, cbSceneParam._m0[86u].y * _686));
    float _751 = ((isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * TEXCOORD_5.w) * _747.x;
    float _752 = dot(vec3(_599, _600, _601), vec3(_677, _678, _679));
    float _755 = _752 * 2.0;
    float _759 = (_755 * _599) - _677;
    float _760 = (_755 * _600) - _678;
    float _761 = (_755 * _601) - _679;
    float _765 = abs(dot(vec3(_677, _678, _679), vec3(_599, _600, _601)));
    float _3582 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _767 = sqrt(_602);
    float _780 = exp2((_767 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_767 * 3.0));
    float _812 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1121;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _846 = fma(_820, cbModelParam._m0[26u].z, fma(_816, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _812));
        float _850 = fma(_820, cbModelParam._m0[27u].z, fma(_816, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _812));
        float _854 = fma(_820, cbModelParam._m0[28u].z, fma(_816, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _812));
        float _879 = _812 + _599;
        float _880 = _816 + _600;
        float _881 = _820 + _601;
        float _891 = fma(_881, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _879)) - _846;
        float _892 = fma(_881, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _879)) - _850;
        float _893 = fma(_881, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _879)) - _854;
        float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
        float _910 = ((_897 * _891) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_846 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_897 * _892) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_850 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_897 * _893) / cbModelParam._m0[34u].z) + ((((((_854 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        float _949 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_915.x + (-0.5));
        float _951 = _949 * (_915.y + (-0.5));
        float _952 = _949 * (_915.z + (-0.5));
        float _959 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_922.x + (-0.5));
        float _961 = _959 * (_922.y + (-0.5));
        float _962 = _959 * (_922.z + (-0.5));
        float _969 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_929.x + (-0.5));
        float _971 = _969 * (_929.y + (-0.5));
        float _972 = _969 * (_929.z + (-0.5));
        float _979 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_936.x + (-0.5));
        float _981 = _979 * (_936.y + (-0.5));
        float _982 = _979 * (_936.z + (-0.5));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = _950 * 0.5;
        float _987 = _960 * 0.5;
        float _988 = _970 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1003 = (dot(vec3(_599, _600, _601), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1013 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1015 = _1014 * 2.0;
        float _1019 = (1.0 - _1014) / (_1014 + 1.0);
        float _3630 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1029 = ((((1.0 - _1020) * (_1015 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1015 + 1.0))) + _1020) * _983;
        float _1030 = _951 * 0.5;
        float _1031 = _961 * 0.5;
        float _1032 = _971 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1046 = (dot(vec3(_599, _600, _601), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1055 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1057 = _1056 * 2.0;
        float _1061 = (1.0 - _1056) / (_1056 + 1.0);
        float _3663 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1071 = ((((1.0 - _1062) * (_1057 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_1057 + 1.0))) + _1062) * _984;
        float _1072 = _952 * 0.5;
        float _1073 = _962 * 0.5;
        float _1074 = _972 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_599, _600, _601), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3696 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1099 + 1.0))) + _1104) * _985;
        _1121 = _952;
        _1123 = _951;
        _1124 = _950;
        _1125 = _962;
        _1126 = _961;
        _1127 = _960;
        _1128 = _972;
        _1129 = _971;
        _1130 = _970;
        _1131 = _985;
        _1132 = _984;
        _1133 = _983;
        _1134 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0)));
        _1135 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)));
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
    }
    else
    {
        _1121 = _1122;
        _1123 = _1122;
        _1124 = _1122;
        _1125 = _1122;
        _1126 = _1122;
        _1127 = _1122;
        _1128 = _1122;
        _1129 = _1122;
        _1130 = _1122;
        _1131 = _1122;
        _1132 = _1122;
        _1133 = _1122;
        _1134 = 0.0;
        _1135 = 0.0;
        _1136 = 0.0;
    }
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1161 = fma(_820, cbModelParam._m0[30u].z, fma(_816, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _812));
        float _1165 = fma(_820, cbModelParam._m0[31u].z, fma(_816, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _812));
        float _1169 = fma(_820, cbModelParam._m0[32u].z, fma(_816, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _812));
        float _1192 = _812 + _599;
        float _1193 = _816 + _600;
        float _1194 = _820 + _601;
        float _1204 = fma(_1194, cbModelParam._m0[30u].z, fma(_1193, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1192)) - _1161;
        float _1205 = fma(_1194, cbModelParam._m0[31u].z, fma(_1193, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1192)) - _1165;
        float _1206 = fma(_1194, cbModelParam._m0[32u].z, fma(_1193, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1192)) - _1169;
        float _1210 = inversesqrt(dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206)));
        float _1223 = ((_1210 * _1204) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1161 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1210 * _1205) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1165 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1225 = ((_1210 * _1206) / cbModelParam._m0[35u].z) + ((((((_1169 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1223, _1224, _1225), 0.0);
        float _1260 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1227.x + (-0.5));
        float _1262 = _1260 * (_1227.y + (-0.5));
        float _1263 = _1260 * (_1227.z + (-0.5));
        float _1270 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1234.x + (-0.5));
        float _1272 = _1270 * (_1234.y + (-0.5));
        float _1273 = _1270 * (_1234.z + (-0.5));
        float _1280 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1241.x + (-0.5));
        float _1282 = _1280 * (_1241.y + (-0.5));
        float _1283 = _1280 * (_1241.z + (-0.5));
        float _1290 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1248.x + (-0.5));
        float _1292 = _1290 * (_1248.y + (-0.5));
        float _1293 = _1290 * (_1248.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_599, _600, _601), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3759 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1324 + 1.0))) + _1329) * _1294;
        float _1339 = _1262 * 0.5;
        float _1340 = _1272 * 0.5;
        float _1341 = _1282 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_599, _600, _601), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3792 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1366 + 1.0))) + _1371) * _1295;
        float _1381 = _1263 * 0.5;
        float _1382 = _1273 * 0.5;
        float _1383 = _1283 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_599, _600, _601), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _3803 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _3814 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _3825 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1408 + 1.0))) + _1413) * _1296;
        _1430 = _1263;
        _1431 = _1262;
        _1432 = _1261;
        _1433 = _1273;
        _1434 = _1272;
        _1435 = _1271;
        _1436 = _1283;
        _1437 = _1282;
        _1438 = _1281;
        _1439 = _1296;
        _1440 = _1295;
        _1441 = _1294;
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1444 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1122;
        _1431 = _1122;
        _1432 = _1122;
        _1433 = _1122;
        _1434 = _1122;
        _1435 = _1122;
        _1436 = _1122;
        _1437 = _1122;
        _1438 = _1122;
        _1439 = _1122;
        _1440 = _1122;
        _1441 = _1122;
        _1442 = 0.0;
        _1443 = 0.0;
        _1444 = 0.0;
    }
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1134)) + _1134;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1135)) + _1135;
    float _1456 = (cbModelParam._m0[1u].x * (_1444 - _1136)) + _1136;
    float _1477 = fma(_1456, cbSceneParam._m0[89u].z, fma(_1455, cbSceneParam._m0[89u].y, _1454 * cbSceneParam._m0[89u].x));
    float _1480 = fma(_1456, cbSceneParam._m0[90u].z, fma(_1455, cbSceneParam._m0[90u].y, _1454 * cbSceneParam._m0[90u].x));
    float _1483 = fma(_1456, cbSceneParam._m0[91u].z, fma(_1455, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1454));
    float _1498 = _759 * 0.5;
    float _1499 = _760 * 0.5;
    float _1500 = _761 * 0.5;
    float _1501 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1432, _1435, _1438, _1441));
    float _1504 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1507 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1541;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1514 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1121, _1125, _1128, _1131));
        float _1518 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1123, _1126, _1129, _1132));
        float _1522 = dot(vec4(_1498, _1499, _1500, 1.0), vec4(_1124, _1127, _1130, _1133));
        float _1529 = dot(vec4(cbModelParam._m0[39u]), vec4(_1498, _1499, _1500, 1.0));
        _1541 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1529) ? 0.0 : (isnan(0.0) ? _1529 : max(0.0, _1529))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1541 = 1.0;
    }
    float _1552;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1543 = dot(vec4(cbModelParam._m0[40u]), vec4(_1498, _1499, _1500, 1.0));
        _1552 = dot(vec3(isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1552 = 1.0;
    }
    float _1556 = (_1552 * cbModelParam._m0[1u].x) + (_1541 * (1.0 - cbModelParam._m0[1u].x));
    float _1566 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _602);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1566 : min(cbModelParam._m0[25u].z, _1566));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1614 = fma(_820, cbModelParam._m0[13u].z, fma(_816, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _812)) + cbModelParam._m0[13u].w;
        float _1618 = fma(_820, cbModelParam._m0[14u].z, fma(_816, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _812)) + cbModelParam._m0[14u].w;
        float _1622 = fma(_820, cbModelParam._m0[15u].z, fma(_816, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _812)) + cbModelParam._m0[15u].w;
        float _1625 = fma(_761, cbModelParam._m0[13u].z, fma(_760, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _759));
        float _1628 = fma(_761, cbModelParam._m0[14u].z, fma(_760, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _759));
        float _1631 = fma(_761, cbModelParam._m0[15u].z, fma(_760, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _759));
        float _1659;
        if (_1625 > 0.0)
        {
            _1659 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1659 = frontier_phi_14_12_ladder;
        }
        float _1861;
        if (_1628 > 0.0)
        {
            _1861 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1861 = frontier_phi_23_19_ladder;
        }
        float _2104;
        if (_1631 > 0.0)
        {
            _2104 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2104 = frontier_phi_35_30_ladder;
        }
        float _2106 = isnan(_1861) ? _1659 : (isnan(_1659) ? _1861 : min(_1659, _1861));
        float _2107 = isnan(_2104) ? _2106 : (isnan(_2106) ? _2104 : min(_2106, _2104));
        float _2111 = (_2107 * _1625) + _1614;
        float _2112 = (_2107 * _1628) + _1618;
        float _2113 = (_2107 * _1631) + _1622;
        float _2114 = _2107 * 9.9999997473787516355514526367188e-05;
        float _2116 = (-1.0) - _2114;
        float _2118 = _2114 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2113 > _2118) || ((_2113 < _2116) || ((_2112 > _2118) || ((_2112 < _2116) || ((_2111 < _2116) || (_2111 > _2118))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2237 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2113, cbModelParam._m0[9u].z, fma(_2112, cbModelParam._m0[9u].y, _2111 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2113, cbModelParam._m0[10u].z, fma(_2112, cbModelParam._m0[10u].y, _2111 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2113, cbModelParam._m0[11u].z, fma(_2112, cbModelParam._m0[11u].y, _2111 * cbModelParam._m0[11u].x))), _1567);
            frontier_phi_13_35_ladder = _2237.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2237.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2237.x * cbModelParam._m0[1u].y;
        }
        _1647 = frontier_phi_13_35_ladder_2;
        _1649 = frontier_phi_13_35_ladder_1;
        _1651 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_759, _760, _761), _1567);
        _1647 = _1635.x * cbModelParam._m0[1u].y;
        _1649 = _1635.y * cbModelParam._m0[1u].y;
        _1651 = _1635.z * cbModelParam._m0[1u].y;
    }
    float _1655 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _602);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1655 : min(cbModelParam._m0[25u].w, _1655));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1709 = fma(_820, cbModelParam._m0[21u].z, fma(_816, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _812)) + cbModelParam._m0[21u].w;
        float _1713 = fma(_820, cbModelParam._m0[22u].z, fma(_816, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _812)) + cbModelParam._m0[22u].w;
        float _1717 = fma(_820, cbModelParam._m0[23u].z, fma(_816, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _812)) + cbModelParam._m0[23u].w;
        float _1720 = fma(_761, cbModelParam._m0[21u].z, fma(_760, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _759));
        float _1723 = fma(_761, cbModelParam._m0[22u].z, fma(_760, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _759));
        float _1726 = fma(_761, cbModelParam._m0[23u].z, fma(_760, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _759));
        float _1866;
        if (_1720 > 0.0)
        {
            _1866 = abs((1.0 - _1709) / _1720);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1709 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1866 = frontier_phi_25_21_ladder;
        }
        float _2131;
        if (_1723 > 0.0)
        {
            _2131 = abs((1.0 - _1713) / _1723);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1713 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2131 = frontier_phi_37_32_ladder;
        }
        float _2336;
        if (_1726 > 0.0)
        {
            _2336 = abs((1.0 - _1717) / _1726);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1717 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2336 = frontier_phi_46_43_ladder;
        }
        float _2338 = isnan(_2131) ? _1866 : (isnan(_1866) ? _2131 : min(_1866, _2131));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1720) + _1709;
        float _2344 = (_2339 * _1723) + _1713;
        float _2345 = (_2339 * _1726) + _1717;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2347 = (-1.0) - _2346;
        float _2349 = _2346 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2345 > _2349) || ((_2345 < _2347) || ((_2344 > _2349) || ((_2344 < _2347) || ((_2343 < _2347) || (_2343 > _2349))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2544 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2345, cbModelParam._m0[17u].z, fma(_2344, cbModelParam._m0[17u].y, _2343 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2345, cbModelParam._m0[18u].z, fma(_2344, cbModelParam._m0[18u].y, _2343 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2345, cbModelParam._m0[19u].z, fma(_2344, cbModelParam._m0[19u].y, _2343 * cbModelParam._m0[19u].x))), _1656);
            frontier_phi_22_46_ladder = _2544.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2544.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2544.x * cbModelParam._m0[1u].z;
        }
        _1745 = frontier_phi_22_46_ladder_2;
        _1747 = frontier_phi_22_46_ladder_1;
        _1749 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1729 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_759, _760, _761), _1656);
        _1745 = _1729.x * cbModelParam._m0[1u].z;
        _1747 = _1729.y * cbModelParam._m0[1u].z;
        _1749 = _1729.z * cbModelParam._m0[1u].z;
    }
    float _1761 = ((((1.0 - _780) * ((_767 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_780 * _767)) * _751;
    float _1762 = _1761 * ((cbModelParam._m0[1u].w * (_1745 - _1647)) + _1647);
    float _1763 = _1761 * ((cbModelParam._m0[1u].w * (_1747 - _1649)) + _1649);
    float _1764 = _1761 * ((cbModelParam._m0[1u].w * (_1749 - _1651)) + _1651);
    float _1767 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1763, cbSceneParam._m0[89u].y, _1762 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1763, cbSceneParam._m0[90u].y, _1762 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1763, cbSceneParam._m0[91u].y, _1762 * cbSceneParam._m0[91u].x));
    uvec4 _1783 = floatBitsToUint(cbInstanceData._m0[_241 + 5u]);
    uint _1785 = _1783.x * 14u;
    uint _1786 = _1785 + 13u;
    float _1793 = _751 + (-1.0);
    float _1798 = (cbLight._m0[_1786].x * _1793) + 1.0;
    float _1799 = (cbLight._m0[_1786].y * _1793) + 1.0;
    float _1800 = (cbLight._m0[_1786].z * _1793) + 1.0;
    float _1801 = (cbLight._m0[_1786].w * _1793) + 1.0;
    uint _1802 = _1785 + 5u;
    float _1808 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1812 = _1785 + 4u;
    float _1819 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1823 = _1785 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_599, _600, _601));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_599, _600, _601));
    float _3961 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _3972 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1802].x * _1808) * _1844) + ((cbLight._m0[_1812].x * _1819) * _1842);
    float _1852 = ((_1808 * cbLight._m0[_1802].y) * _1844) + ((_1819 * cbLight._m0[_1812].y) * _1842);
    float _1853 = ((_1808 * cbLight._m0[_1802].z) * _1844) + ((_1819 * cbLight._m0[_1812].z) * _1842);
    uvec4 _1858 = floatBitsToUint(cbLight._m0[_1785 + 12u]);
    bool _1860 = _1858.x == 0u;
    float _1871;
    float _1873;
    float _1875;
    if (_1860)
    {
        _1871 = _1851;
        _1873 = _1852;
        _1875 = _1853;
    }
    else
    {
        uint _1879 = _1785 + 6u;
        float _1895 = (dot(vec3(cbLight._m0[_1785 + 2u].xyz), vec3(_599, _600, _601)) * 0.5) + 0.5;
        float _1896 = _1895 * _1895;
        float _3983 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1898 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _1871 = (((cbLight._m0[_1879].x * 0.3183098733425140380859375) * _1897) * _1898) + _1851;
        _1873 = (((cbLight._m0[_1879].y * 0.3183098733425140380859375) * _1897) * _1898) + _1852;
        _1875 = (((cbLight._m0[_1879].z * 0.3183098733425140380859375) * _1897) * _1898) + _1853;
    }
    bool _1878 = _1858.y == 0u;
    float _1916;
    float _1918;
    float _1920;
    if (_1878)
    {
        _1916 = _1871;
        _1918 = _1873;
        _1920 = _1875;
    }
    else
    {
        uint _2075 = _1785 + 7u;
        float _2091 = (dot(vec3(cbLight._m0[_1785 + 3u].xyz), vec3(_599, _600, _601)) * 0.5) + 0.5;
        float _2092 = _2091 * _2091;
        float _3999 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2093 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _2094 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _1916 = (((cbLight._m0[_2075].x * 0.3183098733425140380859375) * _2093) * _2094) + _1871;
        _1918 = (((cbLight._m0[_2075].y * 0.3183098733425140380859375) * _2093) * _2094) + _1873;
        _1920 = (((cbLight._m0[_2075].z * 0.3183098733425140380859375) * _2093) * _2094) + _1875;
    }
    uint _1923 = _1785 + 8u;
    float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _602) * 0.949999988079071044921875);
    float _1937 = _1936 * _1936;
    float _1938 = cbLight._m0[_1785].x + _677;
    float _1939 = cbLight._m0[_1785].y + _678;
    float _1940 = cbLight._m0[_1785].z + _679;
    float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
    float _1945 = _1944 * _1938;
    float _1946 = _1944 * _1939;
    float _1947 = _1944 * _1940;
    float _1948 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_1785].xyz));
    float _4015 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
    float _4026 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _1952 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _1953 = dot(vec3(_599, _600, _601), vec3(_1945, _1946, _1947));
    float _4037 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_1945, _1946, _1947));
    float _4048 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1937 * _1937;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1976 = (exp2(log2(1.0 - (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1977 = 1.0 - _1937;
    float _1988 = (0.5 / (((_1952 * ((_1951 * _1977) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _1977) + _1937) * _1951))) * _1951;
    float _4059 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1990 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    uint _2001 = _1785 + 9u;
    float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _602) * 0.949999988079071044921875);
    float _2013 = _2012 * _2012;
    float _2014 = cbLight._m0[_1823].x + _677;
    float _2015 = cbLight._m0[_1823].y + _678;
    float _2016 = cbLight._m0[_1823].z + _679;
    float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
    float _2021 = _2020 * _2014;
    float _2022 = _2020 * _2015;
    float _2023 = _2020 * _2016;
    float _2024 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_1823].xyz));
    float _4070 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
    float _2028 = dot(vec3(_599, _600, _601), vec3(_2021, _2022, _2023));
    float _4081 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2031 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _2032 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_2021, _2022, _2023));
    float _4092 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _2036 = _2013 * _2013;
    float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
    float _2049 = (exp2(log2(1.0 - (isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2050 = 1.0 - _2013;
    float _2060 = (0.5 / (((_1952 * ((_2027 * _2050) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2050) + _2013) * _2027))) * _2027;
    float _4103 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2062 = (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
    float _2072 = (((_2049 * cbLight._m0[_2001].x) * _2062) * _1808) + (((_1976 * cbLight._m0[_1923].x) * _1990) * _1819);
    float _2073 = (((_2049 * cbLight._m0[_2001].y) * _2062) * _1808) + (((_1976 * cbLight._m0[_1923].y) * _1990) * _1819);
    float _2074 = (((_2049 * cbLight._m0[_2001].z) * _2062) * _1808) + (((_1976 * cbLight._m0[_1923].z) * _1990) * _1819);
    float _2136;
    float _2138;
    float _2140;
    if (_1860)
    {
        _2136 = _2072;
        _2138 = _2073;
        _2140 = _2074;
    }
    else
    {
        uint _2142 = _1785 + 2u;
        uint _2146 = _1785 + 10u;
        float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2142].w)) * _602) * 0.949999988079071044921875);
        float _2161 = _2160 * _2160;
        float _2162 = cbLight._m0[_2142].x + _677;
        float _2163 = cbLight._m0[_2142].y + _678;
        float _2164 = cbLight._m0[_2142].z + _679;
        float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
        float _2169 = _2168 * _2162;
        float _2170 = _2168 * _2163;
        float _2171 = _2168 * _2164;
        float _2172 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_2142].xyz));
        float _4114 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2175 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _2176 = dot(vec3(_599, _600, _601), vec3(_2169, _2170, _2171));
        float _4125 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2180 = dot(vec3(cbLight._m0[_2142].xyz), vec3(_2169, _2170, _2171));
        float _4136 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2184 = _2161 * _2161;
        float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
        float _2197 = (exp2(log2(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2198 = 1.0 - _2161;
        float _2208 = (0.5 / (((_1952 * ((_2175 * _2198) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2198) + _2161) * _2175))) * _2175;
        float _4147 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2210 = (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
        float _2211 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2136 = (((_2197 * cbLight._m0[_2146].x) * _2210) * _2211) + _2072;
        _2138 = (((_2197 * cbLight._m0[_2146].y) * _2210) * _2211) + _2073;
        _2140 = (((_2197 * cbLight._m0[_2146].z) * _2210) * _2211) + _2074;
    }
    float _2246;
    float _2248;
    float _2250;
    if (_1878)
    {
        _2246 = _2136;
        _2248 = _2138;
        _2250 = _2140;
    }
    else
    {
        uint _2257 = _1785 + 3u;
        uint _2261 = _1785 + 11u;
        float _2275 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _602) * 0.949999988079071044921875);
        float _2276 = _2275 * _2275;
        float _2277 = cbLight._m0[_2257].x + _677;
        float _2278 = cbLight._m0[_2257].y + _678;
        float _2279 = cbLight._m0[_2257].z + _679;
        float _2283 = inversesqrt(dot(vec3(_2277, _2278, _2279), vec3(_2277, _2278, _2279)));
        float _2284 = _2283 * _2277;
        float _2285 = _2283 * _2278;
        float _2286 = _2283 * _2279;
        float _2287 = dot(vec3(_599, _600, _601), vec3(cbLight._m0[_2257].xyz));
        float _4163 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2290 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _2291 = dot(vec3(_599, _600, _601), vec3(_2284, _2285, _2286));
        float _4174 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2294 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _2295 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2284, _2285, _2286));
        float _4185 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2299 = _2276 * _2276;
        float _2303 = ((_2294 * _2294) * (_2299 + (-1.0))) + 1.0;
        float _2312 = (exp2(log2(1.0 - (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2313 = 1.0 - _2276;
        float _2323 = (0.5 / (((_1952 * ((_2290 * _2313) + _2276)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2313) + _2276) * _2290))) * _2290;
        float _4196 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2325 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2299 / ((_2303 * _2303) * 3.141590118408203125));
        float _2326 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2246 = (((_2312 * cbLight._m0[_2261].x) * _2325) * _2326) + _2136;
        _2248 = (((_2312 * cbLight._m0[_2261].y) * _2325) * _2326) + _2138;
        _2250 = (((_2312 * cbLight._m0[_2261].z) * _2325) * _2326) + _2140;
    }
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    if (_1783.y == 0u)
    {
        float _2401 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2402 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2401;
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2401;
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2401;
        uvec4 _2416 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2417 = _2416.x;
        uint _2428 = uint((float(_2416.y) * floor(float(uint(cbSceneParam._m0[85u].y * _686) / _2417))) + floor(float(uint(cbSceneParam._m0[85u].x * _685) / _2417)));
        float _2438 = (log2(_2404 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2439 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        uint _2442 = uint(isnan(14.0) ? _2439 : (isnan(_2439) ? 14.0 : min(_2439, 14.0)));
        uvec4 _2447 = texelFetch(g_lightClusterGridBuffer, int(((_2442 << 2u) + (_2428 << 6u)) >> 2u));
        uint _2448 = _2447.x;
        uint _2449 = _2416.z;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        if (((((1u << ((_2449 >> 4u) & 15u)) + 4294967295u) & _2448) == 0u) || ((_2449 & 240u) == 0u))
        {
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
        }
        else
        {
            float _2550;
            float _2552;
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            float _2699 = 0.0;
            uint _2700 = 0u;
            uint _2709;
            bool _2710;
            for (;;)
            {
                _2709 = texelFetch(g_lightClassification, int((((_2442 << 5u) + (_2428 << 9u)) + (_2700 << 2u)) >> 2u)).x;
                _2710 = _2709 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2710)
                {
                    frontier_phi_61_pred = _2694;
                    frontier_phi_61_pred_1 = _2699;
                    frontier_phi_61_pred_2 = _2698;
                    frontier_phi_61_pred_3 = _2697;
                    frontier_phi_61_pred_4 = _2696;
                    frontier_phi_61_pred_5 = _2695;
                }
                else
                {
                    float _2818;
                    float _2819;
                    float _2820;
                    float _2821;
                    float _2822;
                    float _2823;
                    uint _2824;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2697;
                    _2822 = _2698;
                    _2823 = _2699;
                    _2824 = _2709;
                    float _2750;
                    float _2751;
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    for (;;)
                    {
                        uint _2828 = uint(findLSB(_2824)) + (_2700 << 5u);
                        uint _2825 = (_2824 + 4294967295u) & _2824;
                        uint _2830 = _2828 * 48u;
                        vec4 _2844 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2830)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2830 + 3u)).x));
                        uint _2850 = (_2828 * 48u) + 4u;
                        vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 3u)).x));
                        uint _2869 = (_2828 * 48u) + 8u;
                        vec3 _2880 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x));
                        float _2884 = _2844.x - _2402;
                        float _2885 = _2844.y - _2403;
                        float _2886 = _2844.z - _2404;
                        float _2887 = dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886));
                        float _2890 = inversesqrt(_2887);
                        float _2891 = _2890 * _2884;
                        float _2892 = _2890 * _2885;
                        float _2893 = _2890 * _2886;
                        float _2894 = dot(vec3(_707, _710, _713), vec3(_2891, _2892, _2893));
                        float _2899 = 1.0 - (_2887 * _2844.w);
                        float _4222 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                        float _2900 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2901 = sqrt(_2887) * _2863.w;
                        float _2904 = 1.39999997615814208984375 / (_2901 + 1.39999997615814208984375);
                        float _2905 = _2904 * _2904;
                        float _2908 = ((1.0 - _2905) * _2894) + _2905;
                        float _2911 = _2901 * _2901;
                        float _2915 = ((isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0))) * _2900) / ((_2911 * 0.699999988079071044921875) + 1.0);
                        float _2919 = (-0.0) - _2402;
                        float _2920 = (-0.0) - _2403;
                        float _2921 = (-0.0) - _2404;
                        float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
                        float _2926 = _2925 * _2919;
                        float _2927 = _2925 * _2920;
                        float _2928 = _2925 * _2921;
                        float _2936 = exp2(log2(1.0 / ((_2911 * 3.5) + 5.0)) * 0.25);
                        float _2937 = 1.0 - _767;
                        float _2944 = sqrt(1.0 - ((1.0 - (_2937 * _2937)) * (1.0 - (_2936 * _2936))));
                        float _2945 = _2944 * _2944;
                        float _2946 = _2945 * _2945;
                        float _2947 = _2926 + _2891;
                        float _2948 = _2927 + _2892;
                        float _2949 = _2928 + _2893;
                        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
                        float _2957 = dot(vec3(_707, _710, _713), vec3(_2926, _2927, _2928));
                        float _4238 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2960 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
                        float _2961 = dot(vec3(_707, _710, _713), vec3(_2953 * _2947, _2953 * _2948, _2953 * _2949));
                        float _4249 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
                        float _2968 = ((_2964 * _2964) * (_2946 + (-1.0))) + 1.0;
                        float _2969 = _2904 * _2945;
                        float _2970 = _2969 * _2969;
                        float _2973 = ((1.0 - _2970) * _2894) + _2970;
                        float _4260 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                        float _2974 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                        float _2975 = 1.0 - _2945;
                        float _2985 = (0.5 / (((_2974 * ((_2960 * _2975) + _2945)) + 9.9999999392252902907785028219223e-09) + (((_2974 * _2975) + _2945) * _2960))) * _2974;
                        float _4271 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2996 = (((_2946 * 3.1415927410125732421875) * (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) / ((_2968 * _2968) * ((_2911 * 2.1991131305694580078125) + 3.141590118408203125))) * _2900;
                        _2753 = (_2915 * _2863.x) + _2821;
                        _2754 = (_2915 * _2863.y) + _2822;
                        _2755 = (_2915 * _2863.z) + _2823;
                        _2750 = (_2996 * _2880.x) + _2818;
                        _2751 = (_2996 * _2880.y) + _2819;
                        _2752 = (_2996 * _2880.z) + _2820;
                        if (_2825 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2753;
                            _2822 = _2754;
                            _2823 = _2755;
                            _2824 = _2825;
                        }
                    }
                    frontier_phi_61_pred = _2750;
                    frontier_phi_61_pred_1 = _2755;
                    frontier_phi_61_pred_2 = _2754;
                    frontier_phi_61_pred_3 = _2753;
                    frontier_phi_61_pred_4 = _2752;
                    frontier_phi_61_pred_5 = _2751;
                }
                _2550 = frontier_phi_61_pred;
                _2560 = frontier_phi_61_pred_1;
                _2558 = frontier_phi_61_pred_2;
                _2556 = frontier_phi_61_pred_3;
                _2554 = frontier_phi_61_pred_4;
                _2552 = frontier_phi_61_pred_5;
                uint _2701 = _2700 + 1u;
                if (_2701 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2694 = _2550;
                    _2695 = _2552;
                    _2696 = _2554;
                    _2697 = _2556;
                    _2698 = _2558;
                    _2699 = _2560;
                    _2700 = _2701;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
        }
        uvec4 _2563 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2564 = _2563.z;
        uint _2566 = (_2564 >> 8u) & 15u;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        if (((4294967295u << _2566) & _2448) == 0u)
        {
            _2662 = _2549;
            _2664 = _2551;
            _2666 = _2553;
            _2668 = _2555;
            _2670 = _2557;
            _2672 = _2559;
        }
        else
        {
            float _2687 = inversesqrt(dot(vec3(_2402, _2403, _2404), vec3(_2402, _2403, _2404)));
            float _2688 = _2687 * _2402;
            float _2689 = _2687 * _2403;
            float _2690 = _2687 * _2404;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2566 < ((_2564 >> 12u) & 15u))
            {
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2801 = _2549;
                float _2802 = _2551;
                float _2803 = _2553;
                float _2804 = _2555;
                float _2805 = _2557;
                float _2806 = _2559;
                uint _2807 = _2566;
                uint _2816;
                bool _2817;
                for (;;)
                {
                    _2816 = texelFetch(g_lightClassification, int((((_2442 << 5u) + (_2428 << 9u)) + (_2807 << 2u)) >> 2u)).x;
                    _2817 = _2816 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2817)
                    {
                        frontier_phi_67_pred = _2804;
                        frontier_phi_67_pred_1 = _2805;
                        frontier_phi_67_pred_2 = _2806;
                        frontier_phi_67_pred_3 = _2803;
                        frontier_phi_67_pred_4 = _2802;
                        frontier_phi_67_pred_5 = _2801;
                    }
                    else
                    {
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        float _3017 = _2804;
                        float _3018 = _2805;
                        float _3019 = _2806;
                        uint _3020 = _2816;
                        uint _3021;
                        vec4 _3046;
                        float _3047;
                        vec4 _3062;
                        vec3 _3074;
                        vec4 _3090;
                        vec4 _3105;
                        float _3151;
                        bool _3152;
                        for (;;)
                        {
                            uint _3031 = ((_2807 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3020));
                            _3021 = (_3020 + 4294967295u) & _3020;
                            uint _3033 = _3031 * 40u;
                            _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3047 = _3046.w;
                            uint _3049 = (_3031 * 40u) + 4u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3064 = (_3031 * 40u) + 8u;
                            _3074 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x));
                            uint _3077 = (_3031 * 40u) + 16u;
                            _3090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3077 + 3u)).x));
                            uint _3092 = (_3031 * 40u) + 20u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3107 = (_3031 * 40u) + 24u;
                            vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3126 = (_3031 * 40u) + 28u;
                            vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            _3151 = fma(_2404, _3139.z, fma(_2403, _3139.y, _3139.x * _2402)) + _3139.w;
                            _3152 = !((fma(_2404, _3120.z, fma(_2403, _3120.y, _3120.x * _2402)) + _3120.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3152)
                            {
                                float _3179 = _3046.x - _2402;
                                float _3180 = _3046.y - _2403;
                                float _3181 = _3046.z - _2404;
                                float _3182 = dot(vec3(_3179, _3180, _3181), vec3(_3179, _3180, _3181));
                                float _3185 = inversesqrt(_3182);
                                float _3186 = _3185 * _3179;
                                float _3187 = _3185 * _3180;
                                float _3188 = _3185 * _3181;
                                float _3192 = 1.0 - (_3182 / (_3047 * _3047));
                                float _4282 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3197 = sqrt(_3182) * _3062.w;
                                float _3199 = 1.39999997615814208984375 / (_3197 + 1.39999997615814208984375);
                                float _3200 = _3199 * _3199;
                                float _3203 = ((1.0 - _3200) * dot(vec3(_3186, _3187, _3188), vec3(_707, _710, _713))) + _3200;
                                float _3206 = _3197 * _3197;
                                float _3210 = (fma(_2404, _3090.z, fma(_2403, _3090.y, _3090.x * _2402)) + _3090.w) / _3151;
                                float _3211 = (fma(_2404, _3105.z, fma(_2403, _3105.y, _3105.x * _2402)) + _3105.w) / _3151;
                                float _3215 = 1.0 - dot(vec2(_3210, _3211), vec2(_3210, _3211));
                                float _4298 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3216 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                                float _3217 = _3216 * (((isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0))) * _3193) / ((_3206 * 0.699999988079071044921875) + 1.0));
                                float _3229 = exp2(log2(1.0 / ((_3206 * 3.5) + 5.0)) * 0.25);
                                float _3230 = 1.0 - _767;
                                float _3237 = sqrt(1.0 - ((1.0 - (_3230 * _3230)) * (1.0 - (_3229 * _3229))));
                                float _3238 = _3237 * _3237;
                                float _3239 = _3238 * _3238;
                                float _3240 = _3186 - _2688;
                                float _3241 = _3187 - _2689;
                                float _3242 = _3188 - _2690;
                                float _3246 = inversesqrt(dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242)));
                                float _3250 = dot(vec3(_707, _710, _713), vec3((-0.0) - _2688, (-0.0) - _2689, (-0.0) - _2690));
                                float _4309 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3253 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
                                float _3254 = dot(vec3(_707, _710, _713), vec3(_3246 * _3240, _3246 * _3241, _3246 * _3242));
                                float _4320 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                                float _3257 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                                float _3261 = ((_3257 * _3257) * (_3239 + (-1.0))) + 1.0;
                                float _3262 = _3199 * _3238;
                                float _3263 = _3262 * _3262;
                                float _3269 = ((1.0 - _3263) * dot(vec3(_707, _710, _713), vec3(_3186, _3187, _3188))) + _3263;
                                float _4331 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
                                float _3271 = 1.0 - _3238;
                                float _3281 = (0.5 / (((_3270 * ((_3253 * _3271) + _3238)) + 9.9999999392252902907785028219223e-09) + (((_3270 * _3271) + _3238) * _3253))) * _3270;
                                float _4342 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3291 = (_3216 * _3193) * (((_3239 * 3.1415927410125732421875) * (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) / ((_3261 * _3261) * ((_3206 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3291 * _3074.x;
                                frontier_phi_73_pred_1 = _3291 * _3074.y;
                                frontier_phi_73_pred_2 = _3217 * _3062.z;
                                frontier_phi_73_pred_3 = _3217 * _3062.y;
                                frontier_phi_73_pred_4 = _3217 * _3062.x;
                                frontier_phi_73_pred_5 = _3291 * _3074.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3295 = frontier_phi_73_pred;
                            _3296 = frontier_phi_73_pred_1;
                            _3300 = frontier_phi_73_pred_2;
                            _3299 = frontier_phi_73_pred_3;
                            _3298 = frontier_phi_73_pred_4;
                            _3297 = frontier_phi_73_pred_5;
                            _3004 = _3298 + _3017;
                            _3005 = _3299 + _3018;
                            _3006 = _3300 + _3019;
                            _3001 = _3295 + _3014;
                            _3002 = _3296 + _3015;
                            _3003 = _3297 + _3016;
                            if (_3021 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3021;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3004;
                        frontier_phi_67_pred_1 = _3005;
                        frontier_phi_67_pred_2 = _3006;
                        frontier_phi_67_pred_3 = _3003;
                        frontier_phi_67_pred_4 = _3002;
                        frontier_phi_67_pred_5 = _3001;
                    }
                    _2669 = frontier_phi_67_pred;
                    _2671 = frontier_phi_67_pred_1;
                    _2673 = frontier_phi_67_pred_2;
                    _2667 = frontier_phi_67_pred_3;
                    _2665 = frontier_phi_67_pred_4;
                    _2663 = frontier_phi_67_pred_5;
                    uint _2808 = _2807 + 1u;
                    if (_2808 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2801 = _2663;
                        _2802 = _2665;
                        _2803 = _2667;
                        _2804 = _2669;
                        _2805 = _2671;
                        _2806 = _2673;
                        _2807 = _2808;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2671;
                frontier_phi_55_56_ladder_1 = _2673;
                frontier_phi_55_56_ladder_2 = _2669;
                frontier_phi_55_56_ladder_3 = _2667;
                frontier_phi_55_56_ladder_4 = _2665;
                frontier_phi_55_56_ladder_5 = _2663;
            }
            else
            {
                frontier_phi_55_56_ladder = _2557;
                frontier_phi_55_56_ladder_1 = _2559;
                frontier_phi_55_56_ladder_2 = _2555;
                frontier_phi_55_56_ladder_3 = _2553;
                frontier_phi_55_56_ladder_4 = _2551;
                frontier_phi_55_56_ladder_5 = _2549;
            }
            _2662 = frontier_phi_55_56_ladder_5;
            _2664 = frontier_phi_55_56_ladder_4;
            _2666 = frontier_phi_55_56_ladder_3;
            _2668 = frontier_phi_55_56_ladder_2;
            _2670 = frontier_phi_55_56_ladder;
            _2672 = frontier_phi_55_56_ladder_1;
        }
        float _2677 = isnan(1.0) ? _751 : (isnan(_751) ? 1.0 : min(_751, 1.0));
        _2461 = (_2677 * _2668) + _1916;
        _2463 = (_2677 * _2670) + _1918;
        _2465 = (_2677 * _2672) + _1920;
        _2467 = ((_2662 * 0.039999999105930328369140625) * _2677) + _2246;
        _2469 = ((_2664 * 0.039999999105930328369140625) * _2677) + _2248;
        _2471 = ((_2666 * 0.039999999105930328369140625) * _2677) + _2250;
    }
    else
    {
        _2461 = _1916;
        _2463 = _1918;
        _2465 = _1920;
        _2467 = _2246;
        _2469 = _2248;
        _2471 = _2250;
    }
    float _4358 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4369 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4380 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    uint _2491 = _241 + 6u;
    float _2499 = _685 / cbSceneParam._m0[86u].x;
    float _2500 = _686 / cbSceneParam._m0[86u].y;
    vec4 _2514 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2499, _2500, (log2((isnan(cbSceneParam._m0[77u].w) ? _620 : (isnan(_620) ? cbSceneParam._m0[77u].w : min(_620, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2516 = _2514.x;
    float _2517 = _2514.y;
    float _2518 = _2514.z;
    float _2519 = _2514.w;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    if (_620 > cbSceneParam._m0[78u].w)
    {
        float _2574 = isnan(_620) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _620 : min(cbSceneParam._m0[80u].w, _620));
        float _2575 = _2574 / _620;
        float _2586 = _2575 * _670;
        float _2587 = _671 * _2575;
        float _2588 = (-0.0) - _2587;
        float _2590 = _2575 * _672;
        float _2592 = (cbSceneParam._m0[77u].w * _2588) / _2574;
        float _2593 = _2592 + cbSceneParam._m0[79u].w;
        float _2594 = cbSceneParam._m0[79u].w - _2587;
        float _2600 = sqrt(((_2586 * _2586) + (_2587 * _2587)) + (_2590 * _2590));
        float _2603 = (1.0 - (cbSceneParam._m0[77u].w / _2574)) * _2600;
        float _2608 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2610 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2763;
        if (abs((_2588 - _2592) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2763 = ((((_2593 > 0.0) ? exp2(_2608 * _2593) : (2.0 - exp2(_2610 * _2593))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2603;
        }
        else
        {
            float _2723 = 1.0 / cbSceneParam._m0[80u].x;
            float _2724 = isnan(_2594) ? _2593 : (isnan(_2593) ? _2594 : max(_2593, _2594));
            float _2725 = isnan(_2594) ? _2593 : (isnan(_2593) ? _2594 : min(_2593, _2594));
            float _2734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : min(_2724, 0.0));
            float _2735 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : min(_2725, 0.0));
            _2763 = ((abs(_2600 / _2588) * cbSceneParam._m0[80u].y) * ((((_2734 - _2735) * 2.0) - ((exp2(_2608 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0)))) - exp2(_2608 * (isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))))) * _2723)) - ((exp2(_2610 * _2734) - exp2(_2610 * _2735)) * _2723))) + (_2603 * cbSceneParam._m0[80u].z);
        }
        vec4 _2765 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2499, _2500, 1.0), 0.0);
        float _2774 = exp2((_2763 * (-1.44269502162933349609375)) * (1.0 - _2765.w));
        float _2775 = log2(_2774);
        float _2791 = log2(_2519);
        _2612 = (exp2(_2791 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2775 * cbSceneParam._m0[78u].x)) * _2765.x) / cbSceneParam._m0[78u].x)) + _2516;
        _2614 = (exp2(_2791 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2775 * cbSceneParam._m0[78u].y)) * _2765.y) / cbSceneParam._m0[78u].y)) + _2517;
        _2616 = (exp2(_2791 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2775 * cbSceneParam._m0[78u].z)) * _2765.z) / cbSceneParam._m0[78u].z)) + _2518;
        _2618 = _2774 * _2519;
    }
    else
    {
        _2612 = _2516;
        _2614 = _2517;
        _2616 = _2518;
        _2618 = _2519;
    }
    float _2630 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2631 = _2630 == 3.0;
    float _2632 = log2(_2618);
    float _2639 = exp2(_2632 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_2461 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _751))) + ((_2467 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1556)) * cbPerFrame._m0[3u].x));
    float _2640 = exp2(_2632 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_2463 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _751))) + ((_2469 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1556)) * cbPerFrame._m0[3u].x));
    float _2641 = exp2(_2632 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2465 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _751))) + ((_2471 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1556)) * cbPerFrame._m0[3u].x));
    float _2650 = (_2630 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2650 * (_2631 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2612)));
    SV_Target.y = _2650 * (_2631 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2614)));
    SV_Target.z = _2650 * (_2631 ? _2641 : (_2641 + (cbSceneParam._m0[72u].w * _2616)));
    SV_Target.w = cbInstanceData._m0[_2491].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2491].w;
}


