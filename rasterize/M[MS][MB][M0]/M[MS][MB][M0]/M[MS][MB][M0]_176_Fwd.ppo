#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 3) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1288;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _260 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _262 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3595 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3606 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3617 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _292) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _293) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _405 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _422 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_395 - _405) * cbMtdParam._m0[24u].x) + _405) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3628 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _430 = (_423 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _431 = (_423 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _432 = (_423 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _449 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    vec4 _469 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _471 = _469.x;
    float _481 = dot(vec4(_471, _469.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _495 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.y) * 2.0) - ((((_471 - _481) * cbMtdParam._m0[24u].x) + _481) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3639 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _496 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _503 = (_496 * ((_449.x * cbMtdParam._m0[13u].x) - _430)) + _430;
    float _504 = (_496 * ((_449.y * cbMtdParam._m0[13u].y) - _431)) + _431;
    float _505 = (_496 * ((_449.z * cbMtdParam._m0[13u].z) - _432)) + _432;
    float _509 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _306.x) * _503;
    float _512 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _306.y) * _504;
    float _515 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _306.z) * _505;
    float _522 = ((_503 - _509) * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) + _509;
    float _523 = ((_504 - _512) * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) + _512;
    float _524 = ((_505 - _515) * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) + _515;
    vec4 _536 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _292) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _293) + cbTextureTilingScale._m0[20u].w));
    vec4 _559 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _576 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _578 = _576.x;
    float _579 = _576.y;
    float _580 = _576.z;
    float _587 = ((_559.x - _578) * _423) + _578;
    float _588 = ((_559.y - _579) * _423) + _579;
    float _589 = ((_559.z - _580) * _423) + _580;
    vec4 _601 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w));
    float _614 = ((_601.z - _589) * _496) + _589;
    float _617 = ((((_601.x - _587) * _496) + _587) * 2.0) + (-1.0);
    float _618 = ((((_601.y - _588) * _496) + _588) * 2.0) + (-1.0);
    float _619 = dot(vec2(_617, _618), vec2(_617, _618));
    float _3650 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _624 = sqrt(1.0 - (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))));
    float _629 = _617 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_536.x * 2.0) + (-1.0)));
    float _630 = _618 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_536.y * 2.0) + (-1.0)));
    vec4 _643 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _657 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _659 = _657.x;
    float _660 = 1.0 - _659;
    float _686 = (TEXCOORD_8.x - ((cbMtdParam._m0[22u].w * (1.0 - TEXCOORD_8.x)) * ((((_659 - _660) * cbMtdParam._m0[24u].w) + _660) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].z + 1.0);
    float _3661 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _687 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _695 = ((((cbMtdParam._m0[10u].x - _522) * TEXCOORD_8.x) * cbMtdParam._m0[23u].w) * _687) + _522;
    float _696 = ((((cbMtdParam._m0[10u].y - _523) * TEXCOORD_8.y) * cbMtdParam._m0[23u].w) * _687) + _523;
    float _697 = (((cbMtdParam._m0[23u].w * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _524)) * _687) + _524;
    float _702 = (((_536.z - _614) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _614;
    float _706 = ((cbMtdParam._m0[23u].y - _702) * _687) + _702;
    vec4 _725 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _731 = (_725.x * 2.0) + (-1.0);
    float _732 = (_725.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_731, _732), vec2(_731, _732));
    float _3672 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _749 = (_687 * (((cbMtdParam._m0[22u].z * _629) - _629) + _731)) + _629;
    float _750 = (_687 * (((cbMtdParam._m0[22u].z * _630) - _630) + _732)) + _630;
    float _751 = (_687 * (sqrt(1.0 - (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) - _624)) + _624;
    float _753 = cbMtdParam._m0[22u].x + _643.w;
    float _756 = fma(_751, _241 * NORMAL.x, fma(_750, _248 * TANGENT.x, (_234 * _226) * _749));
    float _759 = fma(_751, _241 * NORMAL.y, fma(_750, _248 * TANGENT.y, (_234 * _227) * _749));
    float _762 = fma(_751, _241 * NORMAL.z, fma(_750, _248 * TANGENT.z, (_234 * _228) * _749));
    float _766 = inversesqrt(dot(vec3(_756, _759, _762), vec3(_756, _759, _762)));
    float _767 = _766 * _756;
    float _768 = _766 * _759;
    float _769 = _766 * _762;
    float _3683 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _770 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _3705 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _3716 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _3727 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _788 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _839 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _829);
    float _840 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _829);
    float _841 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _829);
    float _845 = inversesqrt(dot(vec3(_839, _840, _841), vec3(_839, _840, _841)));
    float _846 = _839 * _845;
    float _847 = _840 * _845;
    float _848 = _841 * _845;
    float _854 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _855 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _873 = fma(_769, cbSceneParam._m0[5u].z, fma(_768, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _767));
    float _876 = fma(_769, cbSceneParam._m0[6u].z, fma(_768, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _767));
    float _879 = fma(_769, cbSceneParam._m0[7u].z, fma(_768, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _767));
    uint _893 = (_273 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * cbInstanceData._m0[_893].z;
    float _3738 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _3760 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    vec4 _913 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _854, cbSceneParam._m0[86u].y * _855));
    float _917 = ((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * TEXCOORD_5.w) * _913.x;
    float _918 = dot(vec3(_767, _768, _769), vec3(_846, _847, _848));
    float _921 = _918 * 2.0;
    float _925 = (_921 * _767) - _846;
    float _926 = (_921 * _768) - _847;
    float _927 = (_921 * _769) - _848;
    float _931 = abs(dot(vec3(_846, _847, _848), vec3(_767, _768, _769)));
    float _3771 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _933 = sqrt(_770);
    float _946 = exp2((_933 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_933 * 3.0));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1287;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1012 = fma(_986, cbModelParam._m0[26u].z, fma(_982, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _978));
        float _1016 = fma(_986, cbModelParam._m0[27u].z, fma(_982, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _978));
        float _1020 = fma(_986, cbModelParam._m0[28u].z, fma(_982, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _978));
        float _1045 = _978 + _767;
        float _1046 = _982 + _768;
        float _1047 = _986 + _769;
        float _1057 = fma(_1047, cbModelParam._m0[26u].z, fma(_1046, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1045)) - _1012;
        float _1058 = fma(_1047, cbModelParam._m0[27u].z, fma(_1046, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1045)) - _1016;
        float _1059 = fma(_1047, cbModelParam._m0[28u].z, fma(_1046, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1045)) - _1020;
        float _1063 = inversesqrt(dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059)));
        float _1076 = ((_1063 * _1057) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1012 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1063 * _1058) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1016 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1078 = ((_1063 * _1059) / cbModelParam._m0[34u].z) + ((((((_1020 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1088 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1076, _1077, _1078), 0.0);
        float _1115 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1081.x + (-0.5));
        float _1117 = _1115 * (_1081.y + (-0.5));
        float _1118 = _1115 * (_1081.z + (-0.5));
        float _1125 = exp2((_1088.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1088.x + (-0.5));
        float _1127 = _1125 * (_1088.y + (-0.5));
        float _1128 = _1125 * (_1088.z + (-0.5));
        float _1135 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1095.x + (-0.5));
        float _1137 = _1135 * (_1095.y + (-0.5));
        float _1138 = _1135 * (_1095.z + (-0.5));
        float _1145 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1102.x + (-0.5));
        float _1147 = _1145 * (_1102.y + (-0.5));
        float _1148 = _1145 * (_1102.z + (-0.5));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = _1116 * 0.5;
        float _1153 = _1126 * 0.5;
        float _1154 = _1136 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1169 = (dot(vec3(_767, _768, _769), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3797 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1179 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3808 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3819 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1181 + 1.0))) + _1186) * _1149;
        float _1196 = _1117 * 0.5;
        float _1197 = _1127 * 0.5;
        float _1198 = _1137 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_767, _768, _769), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3830 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3841 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3852 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * (_1223 + 1.0))) + _1228) * _1150;
        float _1238 = _1118 * 0.5;
        float _1239 = _1128 * 0.5;
        float _1240 = _1138 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_767, _768, _769), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3863 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3874 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3885 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1265 + 1.0))) + _1270) * _1151;
        _1287 = _1118;
        _1289 = _1117;
        _1290 = _1116;
        _1291 = _1128;
        _1292 = _1127;
        _1293 = _1126;
        _1294 = _1138;
        _1295 = _1137;
        _1296 = _1136;
        _1297 = _1151;
        _1298 = _1150;
        _1299 = _1149;
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
    }
    else
    {
        _1287 = _1288;
        _1289 = _1288;
        _1290 = _1288;
        _1291 = _1288;
        _1292 = _1288;
        _1293 = _1288;
        _1294 = _1288;
        _1295 = _1288;
        _1296 = _1288;
        _1297 = _1288;
        _1298 = _1288;
        _1299 = _1288;
        _1300 = 0.0;
        _1301 = 0.0;
        _1302 = 0.0;
    }
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1326 = fma(_986, cbModelParam._m0[30u].z, fma(_982, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _978));
        float _1330 = fma(_986, cbModelParam._m0[31u].z, fma(_982, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _978));
        float _1334 = fma(_986, cbModelParam._m0[32u].z, fma(_982, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _978));
        float _1357 = _978 + _767;
        float _1358 = _982 + _768;
        float _1359 = _986 + _769;
        float _1369 = fma(_1359, cbModelParam._m0[30u].z, fma(_1358, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1357)) - _1326;
        float _1370 = fma(_1359, cbModelParam._m0[31u].z, fma(_1358, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1357)) - _1330;
        float _1371 = fma(_1359, cbModelParam._m0[32u].z, fma(_1358, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1357)) - _1334;
        float _1375 = inversesqrt(dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371)));
        float _1388 = ((_1375 * _1369) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1326 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1375 * _1370) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1330 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1375 * _1371) / cbModelParam._m0[35u].z) + ((((((_1334 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        float _1425 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1392.x + (-0.5));
        float _1427 = _1425 * (_1392.y + (-0.5));
        float _1428 = _1425 * (_1392.z + (-0.5));
        float _1435 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1399.x + (-0.5));
        float _1437 = _1435 * (_1399.y + (-0.5));
        float _1438 = _1435 * (_1399.z + (-0.5));
        float _1445 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1406.x + (-0.5));
        float _1447 = _1445 * (_1406.y + (-0.5));
        float _1448 = _1445 * (_1406.z + (-0.5));
        float _1455 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1413.x + (-0.5));
        float _1457 = _1455 * (_1413.y + (-0.5));
        float _1458 = _1455 * (_1413.z + (-0.5));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = _1426 * 0.5;
        float _1463 = _1436 * 0.5;
        float _1464 = _1446 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_767, _768, _769), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _3926 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _3937 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _3948 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * (_1489 + 1.0))) + _1494) * _1459;
        float _1504 = _1427 * 0.5;
        float _1505 = _1437 * 0.5;
        float _1506 = _1447 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_767, _768, _769), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _3981 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1531 + 1.0))) + _1536) * _1460;
        float _1546 = _1428 * 0.5;
        float _1547 = _1438 * 0.5;
        float _1548 = _1448 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_767, _768, _769), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4014 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1573 + 1.0))) + _1578) * _1461;
        _1595 = _1428;
        _1596 = _1427;
        _1597 = _1426;
        _1598 = _1438;
        _1599 = _1437;
        _1600 = _1436;
        _1601 = _1448;
        _1602 = _1447;
        _1603 = _1446;
        _1604 = _1461;
        _1605 = _1460;
        _1606 = _1459;
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
    }
    else
    {
        _1595 = _1288;
        _1596 = _1288;
        _1597 = _1288;
        _1598 = _1288;
        _1599 = _1288;
        _1600 = _1288;
        _1601 = _1288;
        _1602 = _1288;
        _1603 = _1288;
        _1604 = _1288;
        _1605 = _1288;
        _1606 = _1288;
        _1607 = 0.0;
        _1608 = 0.0;
        _1609 = 0.0;
    }
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1300)) + _1300;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1301)) + _1301;
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1302)) + _1302;
    float _1642 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1619));
    float _1663 = _925 * 0.5;
    float _1664 = _926 * 0.5;
    float _1665 = _927 * 0.5;
    float _1666 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1669 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1672 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1706;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1679 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1287, _1291, _1294, _1297));
        float _1683 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1289, _1292, _1295, _1298));
        float _1687 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1290, _1293, _1296, _1299));
        float _1694 = dot(vec4(cbModelParam._m0[39u]), vec4(_1663, _1664, _1665, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1717;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1708 = dot(vec4(cbModelParam._m0[40u]), vec4(_1663, _1664, _1665, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1708) ? 0.0 : (isnan(0.0) ? _1708 : max(0.0, _1708))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1721 = (_1717 * cbModelParam._m0[1u].x) + (_1706 * (1.0 - cbModelParam._m0[1u].x));
    float _1731 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _770);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1731 : min(cbModelParam._m0[25u].z, _1731));
    float _1814;
    float _1816;
    float _1818;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1781 = fma(_986, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _978)) + cbModelParam._m0[13u].w;
        float _1785 = fma(_986, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _978)) + cbModelParam._m0[14u].w;
        float _1789 = fma(_986, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _978)) + cbModelParam._m0[15u].w;
        float _1792 = fma(_927, cbModelParam._m0[13u].z, fma(_926, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _925));
        float _1795 = fma(_927, cbModelParam._m0[14u].z, fma(_926, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _925));
        float _1798 = fma(_927, cbModelParam._m0[15u].z, fma(_926, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _925));
        float _1826;
        if (_1792 > 0.0)
        {
            _1826 = abs((1.0 - _1781) / _1792);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1781 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1826 = frontier_phi_14_12_ladder;
        }
        float _2028;
        if (_1795 > 0.0)
        {
            _2028 = abs((1.0 - _1785) / _1795);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1785 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2028 = frontier_phi_23_19_ladder;
        }
        float _2271;
        if (_1798 > 0.0)
        {
            _2271 = abs((1.0 - _1789) / _1798);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1789 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2271 = frontier_phi_35_30_ladder;
        }
        float _2273 = isnan(_2028) ? _1826 : (isnan(_1826) ? _2028 : min(_1826, _2028));
        float _2274 = isnan(_2271) ? _2273 : (isnan(_2273) ? _2271 : min(_2273, _2271));
        float _2278 = (_2274 * _1792) + _1781;
        float _2279 = (_2274 * _1795) + _1785;
        float _2280 = (_2274 * _1798) + _1789;
        float _2281 = _2274 * 9.9999997473787516355514526367188e-05;
        float _2283 = (-1.0) - _2281;
        float _2285 = _2281 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2280 > _2285) || ((_2280 < _2283) || ((_2279 > _2285) || ((_2279 < _2283) || ((_2278 < _2283) || (_2278 > _2285))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2280, cbModelParam._m0[9u].z, fma(_2279, cbModelParam._m0[9u].y, _2278 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2280, cbModelParam._m0[10u].z, fma(_2279, cbModelParam._m0[10u].y, _2278 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2280, cbModelParam._m0[11u].z, fma(_2279, cbModelParam._m0[11u].y, _2278 * cbModelParam._m0[11u].x))), _1732);
            frontier_phi_13_35_ladder = _2404.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2404.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2404.x * cbModelParam._m0[1u].y;
        }
        _1814 = frontier_phi_13_35_ladder_2;
        _1816 = frontier_phi_13_35_ladder_1;
        _1818 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_925, _926, _927), _1732);
        _1814 = _1802.x * cbModelParam._m0[1u].y;
        _1816 = _1802.y * cbModelParam._m0[1u].y;
        _1818 = _1802.z * cbModelParam._m0[1u].y;
    }
    float _1822 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _770);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1822 : min(cbModelParam._m0[25u].w, _1822));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1878 = fma(_986, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _978)) + cbModelParam._m0[21u].w;
        float _1882 = fma(_986, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _978)) + cbModelParam._m0[22u].w;
        float _1886 = fma(_986, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _978)) + cbModelParam._m0[23u].w;
        float _1889 = fma(_927, cbModelParam._m0[21u].z, fma(_926, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _925));
        float _1892 = fma(_927, cbModelParam._m0[22u].z, fma(_926, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _925));
        float _1895 = fma(_927, cbModelParam._m0[23u].z, fma(_926, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _925));
        float _2033;
        if (_1889 > 0.0)
        {
            _2033 = abs((1.0 - _1878) / _1889);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1878 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2033 = frontier_phi_25_21_ladder;
        }
        float _2298;
        if (_1892 > 0.0)
        {
            _2298 = abs((1.0 - _1882) / _1892);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1882 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2298 = frontier_phi_37_32_ladder;
        }
        float _2503;
        if (_1895 > 0.0)
        {
            _2503 = abs((1.0 - _1886) / _1895);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1886 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2503 = frontier_phi_46_43_ladder;
        }
        float _2505 = isnan(_2298) ? _2033 : (isnan(_2033) ? _2298 : min(_2033, _2298));
        float _2506 = isnan(_2503) ? _2505 : (isnan(_2505) ? _2503 : min(_2505, _2503));
        float _2510 = (_2506 * _1889) + _1878;
        float _2511 = (_2506 * _1892) + _1882;
        float _2512 = (_2506 * _1895) + _1886;
        float _2513 = _2506 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2513;
        float _2516 = _2513 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2512 > _2516) || ((_2512 < _2514) || ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 < _2514) || (_2510 > _2516))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2711 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2512, cbModelParam._m0[17u].z, fma(_2511, cbModelParam._m0[17u].y, _2510 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2512, cbModelParam._m0[18u].z, fma(_2511, cbModelParam._m0[18u].y, _2510 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2512, cbModelParam._m0[19u].z, fma(_2511, cbModelParam._m0[19u].y, _2510 * cbModelParam._m0[19u].x))), _1823);
            frontier_phi_22_46_ladder = _2711.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2711.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2711.x * cbModelParam._m0[1u].z;
        }
        _1914 = frontier_phi_22_46_ladder_2;
        _1916 = frontier_phi_22_46_ladder_1;
        _1918 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_925, _926, _927), _1823);
        _1914 = _1898.x * cbModelParam._m0[1u].z;
        _1916 = _1898.y * cbModelParam._m0[1u].z;
        _1918 = _1898.z * cbModelParam._m0[1u].z;
    }
    float _1930 = ((((1.0 - _946) * ((_933 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_946 * _933)) * _917;
    float _1931 = _1930 * ((cbModelParam._m0[1u].w * (_1914 - _1814)) + _1814);
    float _1932 = _1930 * ((cbModelParam._m0[1u].w * (_1916 - _1816)) + _1816);
    float _1933 = _1930 * ((cbModelParam._m0[1u].w * (_1918 - _1818)) + _1818);
    float _1936 = fma(_1933, cbSceneParam._m0[89u].z, fma(_1932, cbSceneParam._m0[89u].y, _1931 * cbSceneParam._m0[89u].x));
    float _1939 = fma(_1933, cbSceneParam._m0[90u].z, fma(_1932, cbSceneParam._m0[90u].y, _1931 * cbSceneParam._m0[90u].x));
    float _1942 = fma(_1933, cbSceneParam._m0[91u].z, fma(_1932, cbSceneParam._m0[91u].y, _1931 * cbSceneParam._m0[91u].x));
    uvec4 _1952 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _1954 = _1952.x * 14u;
    uint _1955 = _1954 + 13u;
    float _1962 = _917 + (-1.0);
    float _1967 = (cbLight._m0[_1955].x * _1962) + 1.0;
    float _1968 = (cbLight._m0[_1955].y * _1962) + 1.0;
    float _1969 = (cbLight._m0[_1955].z * _1962) + 1.0;
    float _1970 = (cbLight._m0[_1955].w * _1962) + 1.0;
    uint _1971 = _1954 + 5u;
    float _1977 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1981 = _1954 + 4u;
    float _1987 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1991 = _1954 | 1u;
    float _2002 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_767, _768, _769));
    float _2005 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_767, _768, _769));
    float _4150 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _4161 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2010 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.3183098733425140380859375;
    float _2012 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.3183098733425140380859375;
    float _2019 = ((cbLight._m0[_1971].x * _1977) * _2012) + ((cbLight._m0[_1981].x * _1987) * _2010);
    float _2020 = ((_1977 * cbLight._m0[_1971].y) * _2012) + ((_1987 * cbLight._m0[_1981].y) * _2010);
    float _2021 = ((_1977 * cbLight._m0[_1971].z) * _2012) + ((_1987 * cbLight._m0[_1981].z) * _2010);
    uvec4 _2025 = floatBitsToUint(cbLight._m0[_1954 + 12u]);
    bool _2027 = _2025.x == 0u;
    float _2038;
    float _2040;
    float _2042;
    if (_2027)
    {
        _2038 = _2019;
        _2040 = _2020;
        _2042 = _2021;
    }
    else
    {
        uint _2046 = _1954 + 6u;
        float _2062 = (dot(vec3(cbLight._m0[_1954 + 2u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2063 = _2062 * _2062;
        float _4172 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2064 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2065 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2038 = (((cbLight._m0[_2046].x * 0.3183098733425140380859375) * _2064) * _2065) + _2019;
        _2040 = (((cbLight._m0[_2046].y * 0.3183098733425140380859375) * _2064) * _2065) + _2020;
        _2042 = (((cbLight._m0[_2046].z * 0.3183098733425140380859375) * _2064) * _2065) + _2021;
    }
    bool _2045 = _2025.y == 0u;
    float _2083;
    float _2085;
    float _2087;
    if (_2045)
    {
        _2083 = _2038;
        _2085 = _2040;
        _2087 = _2042;
    }
    else
    {
        uint _2242 = _1954 + 7u;
        float _2258 = (dot(vec3(cbLight._m0[_1954 + 3u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2259 = _2258 * _2258;
        float _4188 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2260 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2261 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2083 = (((cbLight._m0[_2242].x * 0.3183098733425140380859375) * _2260) * _2261) + _2038;
        _2085 = (((cbLight._m0[_2242].y * 0.3183098733425140380859375) * _2260) * _2261) + _2040;
        _2087 = (((cbLight._m0[_2242].z * 0.3183098733425140380859375) * _2260) * _2261) + _2042;
    }
    uint _2090 = _1954 + 8u;
    float _2103 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _770) * 0.949999988079071044921875);
    float _2104 = _2103 * _2103;
    float _2105 = cbLight._m0[_1954].x + _846;
    float _2106 = cbLight._m0[_1954].y + _847;
    float _2107 = cbLight._m0[_1954].z + _848;
    float _2111 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
    float _2112 = _2111 * _2105;
    float _2113 = _2111 * _2106;
    float _2114 = _2111 * _2107;
    float _2115 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_1954].xyz));
    float _4204 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _2119 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2120 = dot(vec3(_767, _768, _769), vec3(_2112, _2113, _2114));
    float _4226 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2124 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2112, _2113, _2114));
    float _4237 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2128 = _2104 * _2104;
    float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
    float _2143 = (exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2144 = 1.0 - _2104;
    float _2155 = (0.5 / (((_2119 * ((_2118 * _2144) + _2104)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2144) + _2104) * _2118))) * _2118;
    float _4248 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2157 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
    uint _2168 = _1954 + 9u;
    float _2179 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _770) * 0.949999988079071044921875);
    float _2180 = _2179 * _2179;
    float _2181 = cbLight._m0[_1991].x + _846;
    float _2182 = cbLight._m0[_1991].y + _847;
    float _2183 = cbLight._m0[_1991].z + _848;
    float _2187 = inversesqrt(dot(vec3(_2181, _2182, _2183), vec3(_2181, _2182, _2183)));
    float _2188 = _2187 * _2181;
    float _2189 = _2187 * _2182;
    float _2190 = _2187 * _2183;
    float _2191 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_1991].xyz));
    float _4259 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2195 = dot(vec3(_767, _768, _769), vec3(_2188, _2189, _2190));
    float _4270 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2199 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2188, _2189, _2190));
    float _4281 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2203 = _2180 * _2180;
    float _2207 = ((_2198 * _2198) * (_2203 + (-1.0))) + 1.0;
    float _2216 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2217 = 1.0 - _2180;
    float _2227 = (0.5 / (((_2119 * ((_2194 * _2217) + _2180)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2217) + _2180) * _2194))) * _2194;
    float _4292 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2229 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2203 / ((_2207 * _2207) * 3.141590118408203125));
    float _2239 = (((_2216 * cbLight._m0[_2168].x) * _2229) * _1977) + (((_2143 * cbLight._m0[_2090].x) * _2157) * _1987);
    float _2240 = (((_2216 * cbLight._m0[_2168].y) * _2229) * _1977) + (((_2143 * cbLight._m0[_2090].y) * _2157) * _1987);
    float _2241 = (((_2216 * cbLight._m0[_2168].z) * _2229) * _1977) + (((_2143 * cbLight._m0[_2090].z) * _2157) * _1987);
    float _2303;
    float _2305;
    float _2307;
    if (_2027)
    {
        _2303 = _2239;
        _2305 = _2240;
        _2307 = _2241;
    }
    else
    {
        uint _2309 = _1954 + 2u;
        uint _2313 = _1954 + 10u;
        float _2327 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2309].w)) * _770) * 0.949999988079071044921875);
        float _2328 = _2327 * _2327;
        float _2329 = cbLight._m0[_2309].x + _846;
        float _2330 = cbLight._m0[_2309].y + _847;
        float _2331 = cbLight._m0[_2309].z + _848;
        float _2335 = inversesqrt(dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331)));
        float _2336 = _2335 * _2329;
        float _2337 = _2335 * _2330;
        float _2338 = _2335 * _2331;
        float _2339 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2309].xyz));
        float _4303 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2343 = dot(vec3(_767, _768, _769), vec3(_2336, _2337, _2338));
        float _4314 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2346 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2347 = dot(vec3(cbLight._m0[_2309].xyz), vec3(_2336, _2337, _2338));
        float _4325 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2351 = _2328 * _2328;
        float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
        float _2364 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2365 = 1.0 - _2328;
        float _2375 = (0.5 / (((_2119 * ((_2342 * _2365) + _2328)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2365) + _2328) * _2342))) * _2342;
        float _4336 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2377 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
        float _2378 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2303 = (((_2364 * cbLight._m0[_2313].x) * _2377) * _2378) + _2239;
        _2305 = (((_2364 * cbLight._m0[_2313].y) * _2377) * _2378) + _2240;
        _2307 = (((_2364 * cbLight._m0[_2313].z) * _2377) * _2378) + _2241;
    }
    float _2413;
    float _2415;
    float _2417;
    if (_2045)
    {
        _2413 = _2303;
        _2415 = _2305;
        _2417 = _2307;
    }
    else
    {
        uint _2424 = _1954 + 3u;
        uint _2428 = _1954 + 11u;
        float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _770) * 0.949999988079071044921875);
        float _2443 = _2442 * _2442;
        float _2444 = cbLight._m0[_2424].x + _846;
        float _2445 = cbLight._m0[_2424].y + _847;
        float _2446 = cbLight._m0[_2424].z + _848;
        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
        float _2451 = _2450 * _2444;
        float _2452 = _2450 * _2445;
        float _2453 = _2450 * _2446;
        float _2454 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2424].xyz));
        float _4352 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2458 = dot(vec3(_767, _768, _769), vec3(_2451, _2452, _2453));
        float _4363 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2462 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2451, _2452, _2453));
        float _4374 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2466 = _2443 * _2443;
        float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
        float _2479 = (exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2480 = 1.0 - _2443;
        float _2490 = (0.5 / (((_2119 * ((_2457 * _2480) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2480) + _2443) * _2457))) * _2457;
        float _4385 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2492 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
        float _2493 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2413 = (((_2479 * cbLight._m0[_2428].x) * _2492) * _2493) + _2303;
        _2415 = (((_2479 * cbLight._m0[_2428].y) * _2492) * _2493) + _2305;
        _2417 = (((_2479 * cbLight._m0[_2428].z) * _2492) * _2493) + _2307;
    }
    float _2628;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    if (_1952.y == 0u)
    {
        float _2568 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2569 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2568;
        float _2570 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2568;
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2568;
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.x;
        uint _2595 = uint((float(_2583.y) * floor(float(uint(cbSceneParam._m0[85u].y * _855) / _2584))) + floor(float(uint(cbSceneParam._m0[85u].x * _854) / _2584)));
        float _2605 = (log2(_2571 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2606 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        uint _2609 = uint(isnan(14.0) ? _2606 : (isnan(_2606) ? 14.0 : min(_2606, 14.0)));
        uvec4 _2614 = texelFetch(g_lightClusterGridBuffer, int(((_2609 << 2u) + (_2595 << 6u)) >> 2u));
        uint _2615 = _2614.x;
        uint _2616 = _2583.z;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        if (((((1u << ((_2616 >> 4u) & 15u)) + 4294967295u) & _2615) == 0u) || ((_2616 & 240u) == 0u))
        {
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
        }
        else
        {
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            uint _2867 = 0u;
            uint _2876;
            bool _2877;
            for (;;)
            {
                _2876 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2867 << 2u)) >> 2u)).x;
                _2877 = _2876 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2877)
                {
                    frontier_phi_61_pred = _2861;
                    frontier_phi_61_pred_1 = _2866;
                    frontier_phi_61_pred_2 = _2865;
                    frontier_phi_61_pred_3 = _2864;
                    frontier_phi_61_pred_4 = _2863;
                    frontier_phi_61_pred_5 = _2862;
                }
                else
                {
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    uint _2991;
                    _2985 = _2861;
                    _2986 = _2862;
                    _2987 = _2863;
                    _2988 = _2864;
                    _2989 = _2865;
                    _2990 = _2866;
                    _2991 = _2876;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    for (;;)
                    {
                        uint _2995 = uint(findLSB(_2991)) + (_2867 << 5u);
                        uint _2992 = (_2991 + 4294967295u) & _2991;
                        uint _2997 = _2995 * 48u;
                        vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2997)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2997 + 3u)).x));
                        uint _3017 = (_2995 * 48u) + 4u;
                        vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 3u)).x));
                        uint _3036 = (_2995 * 48u) + 8u;
                        vec3 _3047 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3036)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3036 + 2u)).x));
                        float _3051 = _3011.x - _2569;
                        float _3052 = _3011.y - _2570;
                        float _3053 = _3011.z - _2571;
                        float _3054 = dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053));
                        float _3057 = inversesqrt(_3054);
                        float _3058 = _3057 * _3051;
                        float _3059 = _3057 * _3052;
                        float _3060 = _3057 * _3053;
                        float _3061 = dot(vec3(_873, _876, _879), vec3(_3058, _3059, _3060));
                        float _3066 = 1.0 - (_3054 * _3011.w);
                        float _4411 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3067 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3068 = sqrt(_3054) * _3030.w;
                        float _3071 = 1.39999997615814208984375 / (_3068 + 1.39999997615814208984375);
                        float _3072 = _3071 * _3071;
                        float _3075 = ((1.0 - _3072) * _3061) + _3072;
                        float _3078 = _3068 * _3068;
                        float _3082 = ((isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))) * _3067) / ((_3078 * 0.699999988079071044921875) + 1.0);
                        float _3086 = (-0.0) - _2569;
                        float _3087 = (-0.0) - _2570;
                        float _3088 = (-0.0) - _2571;
                        float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                        float _3093 = _3092 * _3086;
                        float _3094 = _3092 * _3087;
                        float _3095 = _3092 * _3088;
                        float _3103 = exp2(log2(1.0 / ((_3078 * 3.5) + 5.0)) * 0.25);
                        float _3104 = 1.0 - _933;
                        float _3111 = sqrt(1.0 - ((1.0 - (_3104 * _3104)) * (1.0 - (_3103 * _3103))));
                        float _3112 = _3111 * _3111;
                        float _3113 = _3112 * _3112;
                        float _3114 = _3093 + _3058;
                        float _3115 = _3094 + _3059;
                        float _3116 = _3095 + _3060;
                        float _3120 = inversesqrt(dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116)));
                        float _3124 = dot(vec3(_873, _876, _879), vec3(_3093, _3094, _3095));
                        float _4427 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3127 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3128 = dot(vec3(_873, _876, _879), vec3(_3120 * _3114, _3120 * _3115, _3120 * _3116));
                        float _4438 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3135 = ((_3131 * _3131) * (_3113 + (-1.0))) + 1.0;
                        float _3136 = _3071 * _3112;
                        float _3137 = _3136 * _3136;
                        float _3140 = ((1.0 - _3137) * _3061) + _3137;
                        float _4449 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3141 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3142 = 1.0 - _3112;
                        float _3152 = (0.5 / (((_3141 * ((_3127 * _3142) + _3112)) + 9.9999999392252902907785028219223e-09) + (((_3141 * _3142) + _3112) * _3127))) * _3141;
                        float _4460 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3163 = (((_3113 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3135 * _3135) * ((_3078 * 2.1991131305694580078125) + 3.141590118408203125))) * _3067;
                        _2920 = (_3082 * _3030.x) + _2988;
                        _2921 = (_3082 * _3030.y) + _2989;
                        _2922 = (_3082 * _3030.z) + _2990;
                        _2917 = (_3163 * _3047.x) + _2985;
                        _2918 = (_3163 * _3047.y) + _2986;
                        _2919 = (_3163 * _3047.z) + _2987;
                        if (_2992 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2985 = _2917;
                            _2986 = _2918;
                            _2987 = _2919;
                            _2988 = _2920;
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2992;
                        }
                    }
                    frontier_phi_61_pred = _2917;
                    frontier_phi_61_pred_1 = _2922;
                    frontier_phi_61_pred_2 = _2921;
                    frontier_phi_61_pred_3 = _2920;
                    frontier_phi_61_pred_4 = _2919;
                    frontier_phi_61_pred_5 = _2918;
                }
                _2717 = frontier_phi_61_pred;
                _2727 = frontier_phi_61_pred_1;
                _2725 = frontier_phi_61_pred_2;
                _2723 = frontier_phi_61_pred_3;
                _2721 = frontier_phi_61_pred_4;
                _2719 = frontier_phi_61_pred_5;
                uint _2868 = _2867 + 1u;
                if (_2868 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2861 = _2717;
                    _2862 = _2719;
                    _2863 = _2721;
                    _2864 = _2723;
                    _2865 = _2725;
                    _2866 = _2727;
                    _2867 = _2868;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
        }
        uvec4 _2730 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2731 = _2730.z;
        uint _2733 = (_2731 >> 8u) & 15u;
        float _2829;
        float _2831;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        if (((4294967295u << _2733) & _2615) == 0u)
        {
            _2829 = _2716;
            _2831 = _2718;
            _2833 = _2720;
            _2835 = _2722;
            _2837 = _2724;
            _2839 = _2726;
        }
        else
        {
            float _2854 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
            float _2855 = _2854 * _2569;
            float _2856 = _2854 * _2570;
            float _2857 = _2854 * _2571;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2733 < ((_2731 >> 12u) & 15u))
            {
                float _2830;
                float _2832;
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2968 = _2716;
                float _2969 = _2718;
                float _2970 = _2720;
                float _2971 = _2722;
                float _2972 = _2724;
                float _2973 = _2726;
                uint _2974 = _2733;
                uint _2983;
                bool _2984;
                for (;;)
                {
                    _2983 = texelFetch(g_lightClassification, int((((_2609 << 5u) + (_2595 << 9u)) + (_2974 << 2u)) >> 2u)).x;
                    _2984 = _2983 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2984)
                    {
                        frontier_phi_67_pred = _2971;
                        frontier_phi_67_pred_1 = _2972;
                        frontier_phi_67_pred_2 = _2973;
                        frontier_phi_67_pred_3 = _2970;
                        frontier_phi_67_pred_4 = _2969;
                        frontier_phi_67_pred_5 = _2968;
                    }
                    else
                    {
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3461;
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3181 = _2968;
                        float _3182 = _2969;
                        float _3183 = _2970;
                        float _3184 = _2971;
                        float _3185 = _2972;
                        float _3186 = _2973;
                        uint _3187 = _2983;
                        uint _3188;
                        vec4 _3213;
                        float _3214;
                        vec4 _3229;
                        vec3 _3241;
                        vec4 _3256;
                        vec4 _3271;
                        float _3317;
                        bool _3318;
                        for (;;)
                        {
                            uint _3198 = ((_2974 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3187));
                            _3188 = (_3187 + 4294967295u) & _3187;
                            uint _3200 = _3198 * 40u;
                            _3213 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3200)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3200 + 3u)).x));
                            _3214 = _3213.w;
                            uint _3216 = (_3198 * 40u) + 4u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3231 = (_3198 * 40u) + 8u;
                            _3241 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3231)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3231 + 2u)).x));
                            uint _3243 = (_3198 * 40u) + 16u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            uint _3258 = (_3198 * 40u) + 20u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            uint _3273 = (_3198 * 40u) + 24u;
                            vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3292 = (_3198 * 40u) + 28u;
                            vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3317 = fma(_2571, _3305.z, fma(_2570, _3305.y, _3305.x * _2569)) + _3305.w;
                            _3318 = !((fma(_2571, _3286.z, fma(_2570, _3286.y, _3286.x * _2569)) + _3286.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3318)
                            {
                                float _3345 = _3213.x - _2569;
                                float _3346 = _3213.y - _2570;
                                float _3347 = _3213.z - _2571;
                                float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                                float _3351 = inversesqrt(_3348);
                                float _3352 = _3351 * _3345;
                                float _3353 = _3351 * _3346;
                                float _3354 = _3351 * _3347;
                                float _3358 = 1.0 - (_3348 / (_3214 * _3214));
                                float _4471 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                                float _3359 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3363 = sqrt(_3348) * _3229.w;
                                float _3365 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                                float _3366 = _3365 * _3365;
                                float _3369 = ((1.0 - _3366) * dot(vec3(_3352, _3353, _3354), vec3(_873, _876, _879))) + _3366;
                                float _3372 = _3363 * _3363;
                                float _3376 = (fma(_2571, _3256.z, fma(_2570, _3256.y, _3256.x * _2569)) + _3256.w) / _3317;
                                float _3377 = (fma(_2571, _3271.z, fma(_2570, _3271.y, _3271.x * _2569)) + _3271.w) / _3317;
                                float _3381 = 1.0 - dot(vec2(_3376, _3377), vec2(_3376, _3377));
                                float _4487 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3383 = _3382 * (((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3359) / ((_3372 * 0.699999988079071044921875) + 1.0));
                                float _3395 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                                float _3396 = 1.0 - _933;
                                float _3403 = sqrt(1.0 - ((1.0 - (_3396 * _3396)) * (1.0 - (_3395 * _3395))));
                                float _3404 = _3403 * _3403;
                                float _3405 = _3404 * _3404;
                                float _3406 = _3352 - _2855;
                                float _3407 = _3353 - _2856;
                                float _3408 = _3354 - _2857;
                                float _3412 = inversesqrt(dot(vec3(_3406, _3407, _3408), vec3(_3406, _3407, _3408)));
                                float _3416 = dot(vec3(_873, _876, _879), vec3((-0.0) - _2855, (-0.0) - _2856, (-0.0) - _2857));
                                float _4498 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3419 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3420 = dot(vec3(_873, _876, _879), vec3(_3412 * _3406, _3412 * _3407, _3412 * _3408));
                                float _4509 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3423 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3427 = ((_3423 * _3423) * (_3405 + (-1.0))) + 1.0;
                                float _3428 = _3365 * _3404;
                                float _3429 = _3428 * _3428;
                                float _3435 = ((1.0 - _3429) * dot(vec3(_873, _876, _879), vec3(_3352, _3353, _3354))) + _3429;
                                float _4520 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3437 = 1.0 - _3404;
                                float _3447 = (0.5 / (((_3436 * ((_3419 * _3437) + _3404)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3404) * _3419))) * _3436;
                                float _4531 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3457 = (_3382 * _3359) * (((_3405 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3427 * _3427) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3457 * _3241.x;
                                frontier_phi_73_pred_1 = _3457 * _3241.y;
                                frontier_phi_73_pred_2 = _3383 * _3229.z;
                                frontier_phi_73_pred_3 = _3383 * _3229.y;
                                frontier_phi_73_pred_4 = _3383 * _3229.x;
                                frontier_phi_73_pred_5 = _3457 * _3241.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3461 = frontier_phi_73_pred;
                            _3462 = frontier_phi_73_pred_1;
                            _3466 = frontier_phi_73_pred_2;
                            _3465 = frontier_phi_73_pred_3;
                            _3464 = frontier_phi_73_pred_4;
                            _3463 = frontier_phi_73_pred_5;
                            _3171 = _3464 + _3184;
                            _3172 = _3465 + _3185;
                            _3173 = _3466 + _3186;
                            _3168 = _3461 + _3181;
                            _3169 = _3462 + _3182;
                            _3170 = _3463 + _3183;
                            if (_3188 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3181 = _3168;
                                _3182 = _3169;
                                _3183 = _3170;
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3188;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3171;
                        frontier_phi_67_pred_1 = _3172;
                        frontier_phi_67_pred_2 = _3173;
                        frontier_phi_67_pred_3 = _3170;
                        frontier_phi_67_pred_4 = _3169;
                        frontier_phi_67_pred_5 = _3168;
                    }
                    _2836 = frontier_phi_67_pred;
                    _2838 = frontier_phi_67_pred_1;
                    _2840 = frontier_phi_67_pred_2;
                    _2834 = frontier_phi_67_pred_3;
                    _2832 = frontier_phi_67_pred_4;
                    _2830 = frontier_phi_67_pred_5;
                    uint _2975 = _2974 + 1u;
                    if (_2975 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2968 = _2830;
                        _2969 = _2832;
                        _2970 = _2834;
                        _2971 = _2836;
                        _2972 = _2838;
                        _2973 = _2840;
                        _2974 = _2975;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2838;
                frontier_phi_55_56_ladder_1 = _2840;
                frontier_phi_55_56_ladder_2 = _2836;
                frontier_phi_55_56_ladder_3 = _2834;
                frontier_phi_55_56_ladder_4 = _2832;
                frontier_phi_55_56_ladder_5 = _2830;
            }
            else
            {
                frontier_phi_55_56_ladder = _2724;
                frontier_phi_55_56_ladder_1 = _2726;
                frontier_phi_55_56_ladder_2 = _2722;
                frontier_phi_55_56_ladder_3 = _2720;
                frontier_phi_55_56_ladder_4 = _2718;
                frontier_phi_55_56_ladder_5 = _2716;
            }
            _2829 = frontier_phi_55_56_ladder_5;
            _2831 = frontier_phi_55_56_ladder_4;
            _2833 = frontier_phi_55_56_ladder_3;
            _2835 = frontier_phi_55_56_ladder_2;
            _2837 = frontier_phi_55_56_ladder;
            _2839 = frontier_phi_55_56_ladder_1;
        }
        float _2844 = isnan(1.0) ? _917 : (isnan(_917) ? 1.0 : min(_917, 1.0));
        _2628 = (_2844 * _2835) + _2083;
        _2630 = (_2844 * _2837) + _2085;
        _2632 = (_2844 * _2839) + _2087;
        _2634 = ((_2829 * 0.039999999105930328369140625) * _2844) + _2413;
        _2636 = ((_2831 * 0.039999999105930328369140625) * _2844) + _2415;
        _2638 = ((_2833 * 0.039999999105930328369140625) * _2844) + _2417;
    }
    else
    {
        _2628 = _2083;
        _2630 = _2085;
        _2632 = _2087;
        _2634 = _2413;
        _2636 = _2415;
        _2638 = _2417;
    }
    float _4547 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4558 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4569 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    uint _2658 = _273 + 6u;
    float _2666 = _854 / cbSceneParam._m0[86u].x;
    float _2667 = _855 / cbSceneParam._m0[86u].y;
    vec4 _2681 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2666, _2667, (log2((isnan(cbSceneParam._m0[77u].w) ? _788 : (isnan(_788) ? cbSceneParam._m0[77u].w : min(_788, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2683 = _2681.x;
    float _2684 = _2681.y;
    float _2685 = _2681.z;
    float _2686 = _2681.w;
    float _2779;
    float _2781;
    float _2783;
    float _2785;
    if (_788 > cbSceneParam._m0[78u].w)
    {
        float _2741 = isnan(_788) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _788 : min(cbSceneParam._m0[80u].w, _788));
        float _2742 = _2741 / _788;
        float _2753 = _2742 * _839;
        float _2754 = _840 * _2742;
        float _2755 = (-0.0) - _2754;
        float _2757 = _2742 * _841;
        float _2759 = (cbSceneParam._m0[77u].w * _2755) / _2741;
        float _2760 = _2759 + cbSceneParam._m0[79u].w;
        float _2761 = cbSceneParam._m0[79u].w - _2754;
        float _2767 = sqrt(((_2753 * _2753) + (_2754 * _2754)) + (_2757 * _2757));
        float _2770 = (1.0 - (cbSceneParam._m0[77u].w / _2741)) * _2767;
        float _2775 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2777 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2930;
        if (abs((_2755 - _2759) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2930 = ((((_2760 > 0.0) ? exp2(_2775 * _2760) : (2.0 - exp2(_2777 * _2760))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2770;
        }
        else
        {
            float _2890 = 1.0 / cbSceneParam._m0[80u].x;
            float _2891 = isnan(_2761) ? _2760 : (isnan(_2760) ? _2761 : max(_2760, _2761));
            float _2892 = isnan(_2761) ? _2760 : (isnan(_2760) ? _2761 : min(_2760, _2761));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            float _2902 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : min(_2892, 0.0));
            _2930 = ((abs(_2767 / _2755) * cbSceneParam._m0[80u].y) * ((((_2901 - _2902) * 2.0) - ((exp2(_2775 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0)))) - exp2(_2775 * (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0))))) * _2890)) - ((exp2(_2777 * _2901) - exp2(_2777 * _2902)) * _2890))) + (_2770 * cbSceneParam._m0[80u].z);
        }
        vec4 _2932 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2666, _2667, 1.0), 0.0);
        float _2941 = exp2((_2930 * (-1.44269502162933349609375)) * (1.0 - _2932.w));
        float _2942 = log2(_2941);
        float _2958 = log2(_2686);
        _2779 = (exp2(_2958 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].x)) * _2932.x) / cbSceneParam._m0[78u].x)) + _2683;
        _2781 = (exp2(_2958 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].y)) * _2932.y) / cbSceneParam._m0[78u].y)) + _2684;
        _2783 = (exp2(_2958 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].z)) * _2932.z) / cbSceneParam._m0[78u].z)) + _2685;
        _2785 = _2941 * _2686;
    }
    else
    {
        _2779 = _2683;
        _2781 = _2684;
        _2783 = _2685;
        _2785 = _2686;
    }
    float _2797 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2798 = _2797 == 3.0;
    float _2799 = log2(_2785);
    float _2806 = exp2(_2799 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2628 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _917))) + ((_2634 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1721)) * cbPerFrame._m0[3u].x));
    float _2807 = exp2(_2799 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2630 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _917))) + ((_2636 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1721)) * cbPerFrame._m0[3u].x));
    float _2808 = exp2(_2799 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2632 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _917))) + ((_2638 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1721)) * cbPerFrame._m0[3u].x));
    float _2817 = (_2797 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2817 * (_2798 ? _2806 : (_2806 + (cbSceneParam._m0[72u].w * _2779)));
    SV_Target.y = _2817 * (_2798 ? _2807 : (_2807 + (cbSceneParam._m0[72u].w * _2781)));
    SV_Target.z = _2817 * (_2798 ? _2808 : (_2808 + (cbSceneParam._m0[72u].w * _2783)));
    SV_Target.w = cbInstanceData._m0[_2658].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2658].w;
}


