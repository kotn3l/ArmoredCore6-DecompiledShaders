#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 11) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_19;
layout(set = 0, binding = 14) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_26;
layout(set = 0, binding = 4) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1195;
float _3554;
float _3555;
float _3556;
float _3557;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _215 = _214 * _206;
    float _216 = _214 * _207;
    float _217 = _214 * _208;
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = _221 * NORMAL.x;
    float _223 = _221 * NORMAL.y;
    float _224 = _221 * NORMAL.z;
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229 = _228 * TANGENT.x;
    float _230 = _228 * TANGENT.y;
    float _231 = _228 * TANGENT.z;
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _342 = _340.x;
    float _352 = dot(vec4(_342, _340.yzw), vec4(cbMtdParam._m0[29u].yzw, 0.0));
    float _369 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * (((1.0 - TEXCOORD_5.x) * 2.0) - ((((_342 - _352) * cbMtdParam._m0[24u].x) + _352) * cbMtdParam._m0[23u].x))) + 1.0;
    float _3566 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    float _370 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _377 = (_370 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _378 = (_370 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _379 = (_370 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _398 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _254) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _255) + cbTextureTilingScale._m0[14u].w));
    vec4 _418 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _435 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _437 = _435.x;
    float _438 = _435.y;
    float _439 = _435.z;
    float _448 = ((_418.z - _439) * _370) + _439;
    float _451 = ((((_418.x - _437) * _370) + _437) * 2.0) + (-1.0);
    float _453 = ((((_418.y - _438) * _370) + _438) * 2.0) + (-1.0);
    float _454 = dot(vec2(_451, _453), vec2(_451, _453));
    float _3577 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _459 = sqrt(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))));
    vec4 _475 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _487 = (((_475.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _451;
    float _488 = (((_475.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _453;
    float _491 = fma(_459, _222, fma(_488, _229, _487 * _215));
    float _494 = fma(_459, _223, fma(_488, _230, _487 * _216));
    float _497 = fma(_459, _224, fma(_488, _231, _487 * _217));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    vec4 _530 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _254) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _255) + cbTextureTilingScale._m0[11u].w));
    float _532 = _530.x;
    float _533 = 1.0 - _532;
    float _537 = ((_532 - _533) * cbMtdParam._m0[24u].z) + _533;
    float _539 = (cbMtdParam._m0[19u].x + dot(vec4(_501 * _491, _501 * _494, _501 * _497, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - (_537 * cbMtdParam._m0[21u].z);
    float _3588 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _555 = (TEXCOORD_14.x - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_14.x)) * (_537 + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3599 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _560 = ((_540 * ((_398.x * cbMtdParam._m0[18u].x) - _377)) * _556) + _377;
    float _561 = ((_540 * ((_398.y * cbMtdParam._m0[18u].y) - _378)) * _556) + _378;
    float _562 = ((_540 * ((_398.z * cbMtdParam._m0[18u].z) - _379)) * _556) + _379;
    float _566 = (cbMtdParam._m0[19u].w * (_475.z - _448)) + _448;
    vec4 _579 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _254) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _255) + cbTextureTilingScale._m0[15u].w));
    float _586 = (_579.x * 2.0) + (-1.0);
    float _587 = (_579.y * 2.0) + (-1.0);
    float _588 = dot(vec2(_586, _587), vec2(_586, _587));
    float _3610 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _597 = (((_579.z - _566) * _540) * _556) + _566;
    float _612 = (((cbMtdParam._m0[21u].x * _487) + ((_586 - _487) * _540)) * _556) + _487;
    float _613 = (((cbMtdParam._m0[21u].x * _488) + ((_587 - _488) * _540)) * _556) + _488;
    float _614 = (((sqrt(1.0 - (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) - _459) * _540) * _556) + _459;
    float _619 = cbMtdParam._m0[22u].x + _475.w;
    float _622 = fma(_614, _222, fma(_613, _229, _612 * _215));
    float _625 = fma(_614, _223, fma(_613, _230, _612 * _216));
    float _628 = fma(_614, _224, fma(_613, _231, _612 * _217));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    float _633 = _632 * _622;
    float _634 = _632 * _625;
    float _635 = _632 * _628;
    float _3621 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _636 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3643 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3654 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3665 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _654 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _706 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _696);
    float _707 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _696);
    float _708 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _696);
    float _712 = inversesqrt(dot(vec3(_706, _707, _708), vec3(_706, _707, _708)));
    float _713 = _706 * _712;
    float _714 = _707 * _712;
    float _715 = _708 * _712;
    vec4 _720 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _722 = _720.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _876 = sqrt(((_706 * _706) + (_707 * _707)) + (_708 * _708));
        float _882 = (cbMatDynParam._m0[5u].x * _876) + cbMatDynParam._m0[5u].y;
        float _3676 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _887 = (cbMatDynParam._m0[5u].z * _876) + cbMatDynParam._m0[5u].w;
        float _3687 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) - _883)) + _883) < ((_722 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _733 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _734 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _752 = fma(_635, cbSceneParam._m0[5u].z, fma(_634, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _633));
    float _755 = fma(_635, cbSceneParam._m0[6u].z, fma(_634, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _633));
    float _758 = fma(_635, cbSceneParam._m0[7u].z, fma(_634, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _633));
    uint _771 = _234 + 9u;
    uint _772 = _771 + uint(cbMatDynParam._m0[0u].w);
    float _778 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_772].x;
    float _779 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * cbInstanceData._m0[_772].y;
    float _780 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) * cbInstanceData._m0[_772].z;
    float _3698 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    vec4 _792 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _733, cbSceneParam._m0[86u].y * _734));
    float _796 = ((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * TEXCOORD_5.w) * _792.x;
    float _797 = dot(vec3(_633, _634, _635), vec3(_713, _714, _715));
    float _800 = _797 * 2.0;
    float _804 = (_800 * _633) - _713;
    float _805 = (_800 * _634) - _714;
    float _806 = (_800 * _635) - _715;
    float _810 = abs(dot(vec3(_713, _714, _715), vec3(_633, _634, _635)));
    float _3731 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _812 = sqrt(_636);
    float _825 = exp2((_812 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_812 * 3.0));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1194;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _919 = fma(_865, cbModelParam._m0[26u].z, fma(_861, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _857));
        float _923 = fma(_865, cbModelParam._m0[27u].z, fma(_861, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _857));
        float _927 = fma(_865, cbModelParam._m0[28u].z, fma(_861, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _857));
        float _952 = _857 + _633;
        float _953 = _861 + _634;
        float _954 = _865 + _635;
        float _964 = fma(_954, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952)) - _919;
        float _965 = fma(_954, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952)) - _923;
        float _966 = fma(_954, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952)) - _927;
        float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
        float _983 = ((_970 * _964) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_919 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _984 = ((_970 * _965) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_923 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _985 = ((_970 * _966) / cbModelParam._m0[34u].z) + ((((((_927 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_983, _984, _985), 0.0);
        float _1022 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_988.x + (-0.5));
        float _1024 = _1022 * (_988.y + (-0.5));
        float _1025 = _1022 * (_988.z + (-0.5));
        float _1032 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_995.x + (-0.5));
        float _1034 = _1032 * (_995.y + (-0.5));
        float _1035 = _1032 * (_995.z + (-0.5));
        float _1042 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1002.x + (-0.5));
        float _1044 = _1042 * (_1002.y + (-0.5));
        float _1045 = _1042 * (_1002.z + (-0.5));
        float _1052 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1009.x + (-0.5));
        float _1054 = _1052 * (_1009.y + (-0.5));
        float _1055 = _1052 * (_1009.z + (-0.5));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1059 = _1023 * 0.5;
        float _1060 = _1033 * 0.5;
        float _1061 = _1043 * 0.5;
        float _1062 = dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061));
        float _1067 = (_1062 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1062);
        float _1076 = (dot(vec3(_633, _634, _635), vec3(_1067 * _1059, _1067 * _1060, _1067 * _1061)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1086 = sqrt(((_1060 * _1060) + (_1059 * _1059)) + (_1061 * _1061)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1088 = _1087 * 2.0;
        float _1092 = (1.0 - _1087) / (_1087 + 1.0);
        float _3779 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1102 = ((((1.0 - _1093) * (_1088 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1088 + 1.0))) + _1093) * _1056;
        float _1103 = _1024 * 0.5;
        float _1104 = _1034 * 0.5;
        float _1105 = _1044 * 0.5;
        float _1106 = dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105));
        float _1111 = (_1106 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1106);
        float _1119 = (dot(vec3(_633, _634, _635), vec3(_1111 * _1103, _1111 * _1104, _1111 * _1105)) + 1.0) * 0.5;
        float _3790 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1128 = sqrt(((_1104 * _1104) + (_1103 * _1103)) + (_1105 * _1105)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3801 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
        float _1130 = _1129 * 2.0;
        float _1134 = (1.0 - _1129) / (_1129 + 1.0);
        float _3812 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1144 = ((((1.0 - _1135) * (_1130 + 2.0)) * exp2(log2(isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * (_1130 + 1.0))) + _1135) * _1057;
        float _1145 = _1025 * 0.5;
        float _1146 = _1035 * 0.5;
        float _1147 = _1045 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(_633, _634, _635), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1058 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3845 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1172 + 1.0))) + _1177) * _1058;
        _1194 = _1025;
        _1196 = _1024;
        _1197 = _1023;
        _1198 = _1035;
        _1199 = _1034;
        _1200 = _1033;
        _1201 = _1045;
        _1202 = _1044;
        _1203 = _1043;
        _1204 = _1058;
        _1205 = _1057;
        _1206 = _1056;
        _1207 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)));
        _1208 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0)));
        _1209 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
    }
    else
    {
        _1194 = _1195;
        _1196 = _1195;
        _1197 = _1195;
        _1198 = _1195;
        _1199 = _1195;
        _1200 = _1195;
        _1201 = _1195;
        _1202 = _1195;
        _1203 = _1195;
        _1204 = _1195;
        _1205 = _1195;
        _1206 = _1195;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1237 = fma(_865, cbModelParam._m0[30u].z, fma(_861, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _857));
        float _1241 = fma(_865, cbModelParam._m0[31u].z, fma(_861, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _857));
        float _1245 = fma(_865, cbModelParam._m0[32u].z, fma(_861, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _857));
        float _1268 = _857 + _633;
        float _1269 = _861 + _634;
        float _1270 = _865 + _635;
        float _1280 = fma(_1270, cbModelParam._m0[30u].z, fma(_1269, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1268)) - _1237;
        float _1281 = fma(_1270, cbModelParam._m0[31u].z, fma(_1269, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1268)) - _1241;
        float _1282 = fma(_1270, cbModelParam._m0[32u].z, fma(_1269, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1268)) - _1245;
        float _1286 = inversesqrt(dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282)));
        float _1299 = ((_1286 * _1280) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1237 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1286 * _1281) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1241 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1286 * _1282) / cbModelParam._m0[35u].z) + ((((((_1245 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        float _1336 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1303.x + (-0.5));
        float _1338 = _1336 * (_1303.y + (-0.5));
        float _1339 = _1336 * (_1303.z + (-0.5));
        float _1346 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1310.x + (-0.5));
        float _1348 = _1346 * (_1310.y + (-0.5));
        float _1349 = _1346 * (_1310.z + (-0.5));
        float _1356 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1317.x + (-0.5));
        float _1358 = _1356 * (_1317.y + (-0.5));
        float _1359 = _1356 * (_1317.z + (-0.5));
        float _1366 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1324.x + (-0.5));
        float _1368 = _1366 * (_1324.y + (-0.5));
        float _1369 = _1366 * (_1324.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_633, _634, _635), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _3908 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1400 + 1.0))) + _1405) * _1370;
        float _1415 = _1338 * 0.5;
        float _1416 = _1348 * 0.5;
        float _1417 = _1358 * 0.5;
        float _1418 = dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417));
        float _1423 = (_1418 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1418);
        float _1431 = (dot(vec3(_633, _634, _635), vec3(_1423 * _1415, _1423 * _1416, _1423 * _1417)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1440 = sqrt(((_1416 * _1416) + (_1415 * _1415)) + (_1417 * _1417)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1442 = _1441 * 2.0;
        float _1446 = (1.0 - _1441) / (_1441 + 1.0);
        float _3941 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1456 = ((((1.0 - _1447) * (_1442 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1442 + 1.0))) + _1447) * _1371;
        float _1457 = _1339 * 0.5;
        float _1458 = _1349 * 0.5;
        float _1459 = _1359 * 0.5;
        float _1460 = dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459));
        float _1465 = (_1460 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1460);
        float _1473 = (dot(vec3(_633, _634, _635), vec3(_1465 * _1457, _1465 * _1458, _1465 * _1459)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1482 = sqrt(((_1458 * _1458) + (_1457 * _1457)) + (_1459 * _1459)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1484 = _1483 * 2.0;
        float _1488 = (1.0 - _1483) / (_1483 + 1.0);
        float _3974 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1489 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1498 = ((((1.0 - _1489) * (_1484 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1484 + 1.0))) + _1489) * _1372;
        _1506 = _1339;
        _1507 = _1338;
        _1508 = _1337;
        _1509 = _1349;
        _1510 = _1348;
        _1511 = _1347;
        _1512 = _1359;
        _1513 = _1358;
        _1514 = _1357;
        _1515 = _1372;
        _1516 = _1371;
        _1517 = _1370;
        _1518 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
        _1519 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)));
        _1520 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    }
    else
    {
        _1506 = _1195;
        _1507 = _1195;
        _1508 = _1195;
        _1509 = _1195;
        _1510 = _1195;
        _1511 = _1195;
        _1512 = _1195;
        _1513 = _1195;
        _1514 = _1195;
        _1515 = _1195;
        _1516 = _1195;
        _1517 = _1195;
        _1518 = 0.0;
        _1519 = 0.0;
        _1520 = 0.0;
    }
    float _1530 = (cbModelParam._m0[1u].x * (_1518 - _1207)) + _1207;
    float _1531 = (cbModelParam._m0[1u].x * (_1519 - _1208)) + _1208;
    float _1532 = (cbModelParam._m0[1u].x * (_1520 - _1209)) + _1209;
    float _1553 = fma(_1532, cbSceneParam._m0[89u].z, fma(_1531, cbSceneParam._m0[89u].y, _1530 * cbSceneParam._m0[89u].x));
    float _1556 = fma(_1532, cbSceneParam._m0[90u].z, fma(_1531, cbSceneParam._m0[90u].y, _1530 * cbSceneParam._m0[90u].x));
    float _1559 = fma(_1532, cbSceneParam._m0[91u].z, fma(_1531, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1530));
    float _1574 = _804 * 0.5;
    float _1575 = _805 * 0.5;
    float _1576 = _806 * 0.5;
    float _1577 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1508, _1511, _1514, _1517));
    float _1580 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1507, _1510, _1513, _1516));
    float _1583 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1506, _1509, _1512, _1515));
    float _1617;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1590 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1194, _1198, _1201, _1204));
        float _1594 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1196, _1199, _1202, _1205));
        float _1598 = dot(vec4(_1574, _1575, _1576, 1.0), vec4(_1197, _1200, _1203, _1206));
        float _1605 = dot(vec4(cbModelParam._m0[39u]), vec4(_1574, _1575, _1576, 1.0));
        _1617 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1617 = 1.0;
    }
    float _1628;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1619 = dot(vec4(cbModelParam._m0[40u]), vec4(_1574, _1575, _1576, 1.0));
        _1628 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1619) ? 0.0 : (isnan(0.0) ? _1619 : max(0.0, _1619))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1628 = 1.0;
    }
    float _1632 = (_1628 * cbModelParam._m0[1u].x) + (_1617 * (1.0 - cbModelParam._m0[1u].x));
    float _1642 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _636);
    float _1643 = isnan(_1642) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1642 : min(cbModelParam._m0[25u].z, _1642));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1690 = fma(_865, cbModelParam._m0[13u].z, fma(_861, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857)) + cbModelParam._m0[13u].w;
        float _1694 = fma(_865, cbModelParam._m0[14u].z, fma(_861, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857)) + cbModelParam._m0[14u].w;
        float _1698 = fma(_865, cbModelParam._m0[15u].z, fma(_861, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857)) + cbModelParam._m0[15u].w;
        float _1701 = fma(_806, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804));
        float _1704 = fma(_806, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804));
        float _1707 = fma(_806, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804));
        float _1735;
        if (_1701 > 0.0)
        {
            _1735 = abs((1.0 - _1690) / _1701);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1690 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1735 = frontier_phi_17_15_ladder;
        }
        float _1935;
        if (_1704 > 0.0)
        {
            _1935 = abs((1.0 - _1694) / _1704);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1694 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1935 = frontier_phi_26_22_ladder;
        }
        float _2178;
        if (_1707 > 0.0)
        {
            _2178 = abs((1.0 - _1698) / _1707);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1698 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2178 = frontier_phi_38_33_ladder;
        }
        float _2180 = isnan(_1935) ? _1735 : (isnan(_1735) ? _1935 : min(_1735, _1935));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1701) + _1690;
        float _2186 = (_2181 * _1704) + _1694;
        float _2187 = (_2181 * _1707) + _1698;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2190 = (-1.0) - _2188;
        float _2192 = _2188 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2187 > _2192) || ((_2187 < _2190) || ((_2186 > _2192) || ((_2186 < _2190) || ((_2185 < _2190) || (_2185 > _2192))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2311 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2187, cbModelParam._m0[9u].z, fma(_2186, cbModelParam._m0[9u].y, _2185 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2187, cbModelParam._m0[10u].z, fma(_2186, cbModelParam._m0[10u].y, _2185 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2187, cbModelParam._m0[11u].z, fma(_2186, cbModelParam._m0[11u].y, _2185 * cbModelParam._m0[11u].x))), _1643);
            frontier_phi_16_38_ladder = _2311.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2311.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2311.x * cbModelParam._m0[1u].y;
        }
        _1723 = frontier_phi_16_38_ladder_2;
        _1725 = frontier_phi_16_38_ladder_1;
        _1727 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1711 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_804, _805, _806), _1643);
        _1723 = _1711.x * cbModelParam._m0[1u].y;
        _1725 = _1711.y * cbModelParam._m0[1u].y;
        _1727 = _1711.z * cbModelParam._m0[1u].y;
    }
    float _1731 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _636);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1731 : min(cbModelParam._m0[25u].w, _1731));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1785 = fma(_865, cbModelParam._m0[21u].z, fma(_861, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857)) + cbModelParam._m0[21u].w;
        float _1789 = fma(_865, cbModelParam._m0[22u].z, fma(_861, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857)) + cbModelParam._m0[22u].w;
        float _1793 = fma(_865, cbModelParam._m0[23u].z, fma(_861, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857)) + cbModelParam._m0[23u].w;
        float _1796 = fma(_806, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804));
        float _1799 = fma(_806, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804));
        float _1802 = fma(_806, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804));
        float _1940;
        if (_1796 > 0.0)
        {
            _1940 = abs((1.0 - _1785) / _1796);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1785 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1940 = frontier_phi_28_24_ladder;
        }
        float _2205;
        if (_1799 > 0.0)
        {
            _2205 = abs((1.0 - _1789) / _1799);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1789 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2205 = frontier_phi_40_35_ladder;
        }
        float _2410;
        if (_1802 > 0.0)
        {
            _2410 = abs((1.0 - _1793) / _1802);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1793 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2410 = frontier_phi_49_46_ladder;
        }
        float _2412 = isnan(_2205) ? _1940 : (isnan(_1940) ? _2205 : min(_1940, _2205));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1796) + _1785;
        float _2418 = (_2413 * _1799) + _1789;
        float _2419 = (_2413 * _1802) + _1793;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2420;
        float _2423 = _2420 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2419 > _2423) || ((_2419 < _2421) || ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 < _2421) || (_2417 > _2423))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2419, cbModelParam._m0[17u].z, fma(_2418, cbModelParam._m0[17u].y, _2417 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2419, cbModelParam._m0[18u].z, fma(_2418, cbModelParam._m0[18u].y, _2417 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2419, cbModelParam._m0[19u].z, fma(_2418, cbModelParam._m0[19u].y, _2417 * cbModelParam._m0[19u].x))), _1732);
            frontier_phi_25_49_ladder = _2618.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2618.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2618.x * cbModelParam._m0[1u].z;
        }
        _1821 = frontier_phi_25_49_ladder_2;
        _1823 = frontier_phi_25_49_ladder_1;
        _1825 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1805 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_804, _805, _806), _1732);
        _1821 = _1805.x * cbModelParam._m0[1u].z;
        _1823 = _1805.y * cbModelParam._m0[1u].z;
        _1825 = _1805.z * cbModelParam._m0[1u].z;
    }
    float _1837 = ((((1.0 - _825) * ((_812 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_825 * _812)) * _796;
    float _1838 = _1837 * ((cbModelParam._m0[1u].w * (_1821 - _1723)) + _1723);
    float _1839 = _1837 * ((cbModelParam._m0[1u].w * (_1823 - _1725)) + _1725);
    float _1840 = _1837 * ((cbModelParam._m0[1u].w * (_1825 - _1727)) + _1727);
    float _1843 = fma(_1840, cbSceneParam._m0[89u].z, fma(_1839, cbSceneParam._m0[89u].y, _1838 * cbSceneParam._m0[89u].x));
    float _1846 = fma(_1840, cbSceneParam._m0[90u].z, fma(_1839, cbSceneParam._m0[90u].y, _1838 * cbSceneParam._m0[90u].x));
    float _1849 = fma(_1840, cbSceneParam._m0[91u].z, fma(_1839, cbSceneParam._m0[91u].y, _1838 * cbSceneParam._m0[91u].x));
    uvec4 _1859 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _1861 = _1859.x * 14u;
    uint _1862 = _1861 + 13u;
    float _1869 = _796 + (-1.0);
    float _1874 = (cbLight._m0[_1862].x * _1869) + 1.0;
    float _1875 = (cbLight._m0[_1862].y * _1869) + 1.0;
    float _1876 = (cbLight._m0[_1862].z * _1869) + 1.0;
    float _1877 = (cbLight._m0[_1862].w * _1869) + 1.0;
    uint _1878 = _1861 + 5u;
    float _1884 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
    uint _1888 = _1861 + 4u;
    float _1894 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1898 = _1861 | 1u;
    float _1909 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_633, _634, _635));
    float _1912 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_633, _634, _635));
    float _4110 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _4121 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1917 = (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * 0.3183098733425140380859375;
    float _1919 = (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * 0.3183098733425140380859375;
    float _1926 = ((cbLight._m0[_1878].x * _1884) * _1919) + ((cbLight._m0[_1888].x * _1894) * _1917);
    float _1927 = ((_1884 * cbLight._m0[_1878].y) * _1919) + ((_1894 * cbLight._m0[_1888].y) * _1917);
    float _1928 = ((_1884 * cbLight._m0[_1878].z) * _1919) + ((_1894 * cbLight._m0[_1888].z) * _1917);
    uvec4 _1932 = floatBitsToUint(cbLight._m0[_1861 + 12u]);
    bool _1934 = _1932.x == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1934)
    {
        _1945 = _1926;
        _1947 = _1927;
        _1949 = _1928;
    }
    else
    {
        uint _1953 = _1861 + 6u;
        float _1969 = (dot(vec3(cbLight._m0[_1861 + 2u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _1970 = _1969 * _1969;
        float _4132 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1971 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1972 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _1945 = (((cbLight._m0[_1953].x * 0.3183098733425140380859375) * _1971) * _1972) + _1926;
        _1947 = (((cbLight._m0[_1953].y * 0.3183098733425140380859375) * _1971) * _1972) + _1927;
        _1949 = (((cbLight._m0[_1953].z * 0.3183098733425140380859375) * _1971) * _1972) + _1928;
    }
    bool _1952 = _1932.y == 0u;
    float _1990;
    float _1992;
    float _1994;
    if (_1952)
    {
        _1990 = _1945;
        _1992 = _1947;
        _1994 = _1949;
    }
    else
    {
        uint _2149 = _1861 + 7u;
        float _2165 = (dot(vec3(cbLight._m0[_1861 + 3u].xyz), vec3(_633, _634, _635)) * 0.5) + 0.5;
        float _2166 = _2165 * _2165;
        float _4148 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2167 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _2168 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _1990 = (((cbLight._m0[_2149].x * 0.3183098733425140380859375) * _2167) * _2168) + _1945;
        _1992 = (((cbLight._m0[_2149].y * 0.3183098733425140380859375) * _2167) * _2168) + _1947;
        _1994 = (((cbLight._m0[_2149].z * 0.3183098733425140380859375) * _2167) * _2168) + _1949;
    }
    uint _1997 = _1861 + 8u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1861].w)) * _636) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1861].x + _713;
    float _2013 = cbLight._m0[_1861].y + _714;
    float _2014 = cbLight._m0[_1861].z + _715;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1861].xyz));
    float _4164 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _4175 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2026 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _2027 = dot(vec3(_633, _634, _635), vec3(_2019, _2020, _2021));
    float _4186 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _2031 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_2019, _2020, _2021));
    float _4197 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2035 = _2011 * _2011;
    float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
    float _2050 = (exp2(log2(1.0 - (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2051 = 1.0 - _2011;
    float _2062 = (0.5 / (((_2026 * ((_2025 * _2051) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2051) + _2011) * _2025))) * _2025;
    float _4208 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
    uint _2075 = _1861 + 9u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1898].w)) * _636) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1898].x + _713;
    float _2089 = cbLight._m0[_1898].y + _714;
    float _2090 = cbLight._m0[_1898].z + _715;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_1898].xyz));
    float _4219 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _2102 = dot(vec3(_633, _634, _635), vec3(_2095, _2096, _2097));
    float _4230 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1898].xyz), vec3(_2095, _2096, _2097));
    float _4241 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2087 * _2087;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2124 = 1.0 - _2087;
    float _2134 = (0.5 / (((_2026 * ((_2101 * _2124) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2124) + _2087) * _2101))) * _2101;
    float _4252 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2136 = (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    float _2146 = (((_2123 * cbLight._m0[_2075].x) * _2136) * _1884) + (((_2050 * cbLight._m0[_1997].x) * _2064) * _1894);
    float _2147 = (((_2123 * cbLight._m0[_2075].y) * _2136) * _1884) + (((_2050 * cbLight._m0[_1997].y) * _2064) * _1894);
    float _2148 = (((_2123 * cbLight._m0[_2075].z) * _2136) * _1884) + (((_2050 * cbLight._m0[_1997].z) * _2064) * _1894);
    float _2210;
    float _2212;
    float _2214;
    if (_1934)
    {
        _2210 = _2146;
        _2212 = _2147;
        _2214 = _2148;
    }
    else
    {
        uint _2216 = _1861 + 2u;
        uint _2220 = _1861 + 10u;
        float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _636) * 0.949999988079071044921875);
        float _2235 = _2234 * _2234;
        float _2236 = cbLight._m0[_2216].x + _713;
        float _2237 = cbLight._m0[_2216].y + _714;
        float _2238 = cbLight._m0[_2216].z + _715;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2243 = _2242 * _2236;
        float _2244 = _2242 * _2237;
        float _2245 = _2242 * _2238;
        float _2246 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2216].xyz));
        float _4263 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2250 = dot(vec3(_633, _634, _635), vec3(_2243, _2244, _2245));
        float _4274 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _2254 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2243, _2244, _2245));
        float _4285 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2258 = _2235 * _2235;
        float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
        float _2271 = (exp2(log2(1.0 - (isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2272 = 1.0 - _2235;
        float _2282 = (0.5 / (((_2026 * ((_2249 * _2272) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2272) + _2235) * _2249))) * _2249;
        float _4296 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2284 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
        float _2285 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2210 = (((_2271 * cbLight._m0[_2220].x) * _2284) * _2285) + _2146;
        _2212 = (((_2271 * cbLight._m0[_2220].y) * _2284) * _2285) + _2147;
        _2214 = (((_2271 * cbLight._m0[_2220].z) * _2284) * _2285) + _2148;
    }
    float _2320;
    float _2322;
    float _2324;
    if (_1952)
    {
        _2320 = _2210;
        _2322 = _2212;
        _2324 = _2214;
    }
    else
    {
        uint _2331 = _1861 + 3u;
        uint _2335 = _1861 + 11u;
        float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _636) * 0.949999988079071044921875);
        float _2350 = _2349 * _2349;
        float _2351 = cbLight._m0[_2331].x + _713;
        float _2352 = cbLight._m0[_2331].y + _714;
        float _2353 = cbLight._m0[_2331].z + _715;
        float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
        float _2358 = _2357 * _2351;
        float _2359 = _2357 * _2352;
        float _2360 = _2357 * _2353;
        float _2361 = dot(vec3(_633, _634, _635), vec3(cbLight._m0[_2331].xyz));
        float _4312 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2365 = dot(vec3(_633, _634, _635), vec3(_2358, _2359, _2360));
        float _4323 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2369 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2358, _2359, _2360));
        float _4334 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _2350 * _2350;
        float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
        float _2386 = (exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2387 = 1.0 - _2350;
        float _2397 = (0.5 / (((_2026 * ((_2364 * _2387) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2387) + _2350) * _2364))) * _2364;
        float _4345 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _2320 = (((_2386 * cbLight._m0[_2335].x) * _2399) * _2400) + _2210;
        _2322 = (((_2386 * cbLight._m0[_2335].y) * _2399) * _2400) + _2212;
        _2324 = (((_2386 * cbLight._m0[_2335].z) * _2399) * _2400) + _2214;
    }
    float _2535;
    float _2537;
    float _2539;
    float _2541;
    float _2543;
    float _2545;
    if (_1859.y == 0u)
    {
        float _2475 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2476 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2475;
        float _2477 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2475;
        float _2478 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2475;
        uvec4 _2490 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2491 = _2490.x;
        uint _2502 = uint((float(_2490.y) * floor(float(uint(cbSceneParam._m0[85u].y * _734) / _2491))) + floor(float(uint(cbSceneParam._m0[85u].x * _733) / _2491)));
        float _2512 = (log2(_2478 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2513 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        uint _2516 = uint(isnan(14.0) ? _2513 : (isnan(_2513) ? 14.0 : min(_2513, 14.0)));
        uvec4 _2521 = texelFetch(g_lightClusterGridBuffer, int(((_2516 << 2u) + (_2502 << 6u)) >> 2u));
        uint _2522 = _2521.x;
        uint _2523 = _2490.z;
        float _2623;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        if (((((1u << ((_2523 >> 4u) & 15u)) + 4294967295u) & _2522) == 0u) || ((_2523 & 240u) == 0u))
        {
            _2623 = 0.0;
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
        }
        else
        {
            float _2624;
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            uint _2782 = 0u;
            uint _2791;
            bool _2792;
            for (;;)
            {
                _2791 = texelFetch(g_lightClassification, int((((_2516 << 5u) + (_2502 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                _2792 = _2791 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2792)
                {
                    frontier_phi_66_pred = _2776;
                    frontier_phi_66_pred_1 = _2781;
                    frontier_phi_66_pred_2 = _2780;
                    frontier_phi_66_pred_3 = _2779;
                    frontier_phi_66_pred_4 = _2778;
                    frontier_phi_66_pred_5 = _2777;
                }
                else
                {
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    uint _2927;
                    _2921 = _2776;
                    _2922 = _2777;
                    _2923 = _2778;
                    _2924 = _2779;
                    _2925 = _2780;
                    _2926 = _2781;
                    _2927 = _2791;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    for (;;)
                    {
                        uint _2931 = uint(findLSB(_2927)) + (_2782 << 5u);
                        uint _2928 = (_2927 + 4294967295u) & _2927;
                        uint _2933 = _2931 * 48u;
                        vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2933)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2933 + 3u)).x));
                        uint _2953 = (_2931 * 48u) + 4u;
                        vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2953)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2953 + 3u)).x));
                        uint _2972 = (_2931 * 48u) + 8u;
                        vec3 _2983 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2972)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 2u)).x));
                        float _2987 = _2947.x - _2476;
                        float _2988 = _2947.y - _2477;
                        float _2989 = _2947.z - _2478;
                        float _2990 = dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989));
                        float _2993 = inversesqrt(_2990);
                        float _2994 = _2993 * _2987;
                        float _2995 = _2993 * _2988;
                        float _2996 = _2993 * _2989;
                        float _2997 = dot(vec3(_752, _755, _758), vec3(_2994, _2995, _2996));
                        float _3002 = 1.0 - (_2990 * _2947.w);
                        float _4371 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3003 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
                        float _3004 = sqrt(_2990) * _2966.w;
                        float _3007 = 1.39999997615814208984375 / (_3004 + 1.39999997615814208984375);
                        float _3008 = _3007 * _3007;
                        float _3011 = ((1.0 - _3008) * _2997) + _3008;
                        float _3014 = _3004 * _3004;
                        float _3018 = ((isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0))) * _3003) / ((_3014 * 0.699999988079071044921875) + 1.0);
                        float _3022 = (-0.0) - _2476;
                        float _3023 = (-0.0) - _2477;
                        float _3024 = (-0.0) - _2478;
                        float _3028 = inversesqrt(dot(vec3(_3022, _3023, _3024), vec3(_3022, _3023, _3024)));
                        float _3029 = _3028 * _3022;
                        float _3030 = _3028 * _3023;
                        float _3031 = _3028 * _3024;
                        float _3039 = exp2(log2(1.0 / ((_3014 * 3.5) + 5.0)) * 0.25);
                        float _3040 = 1.0 - _812;
                        float _3047 = sqrt(1.0 - ((1.0 - (_3040 * _3040)) * (1.0 - (_3039 * _3039))));
                        float _3048 = _3047 * _3047;
                        float _3049 = _3048 * _3048;
                        float _3050 = _3029 + _2994;
                        float _3051 = _3030 + _2995;
                        float _3052 = _3031 + _2996;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3060 = dot(vec3(_752, _755, _758), vec3(_3029, _3030, _3031));
                        float _4387 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                        float _3063 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3064 = dot(vec3(_752, _755, _758), vec3(_3056 * _3050, _3056 * _3051, _3056 * _3052));
                        float _4398 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
                        float _3071 = ((_3067 * _3067) * (_3049 + (-1.0))) + 1.0;
                        float _3072 = _3007 * _3048;
                        float _3073 = _3072 * _3072;
                        float _3076 = ((1.0 - _3073) * _2997) + _3073;
                        float _4409 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3077 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                        float _3078 = 1.0 - _3048;
                        float _3088 = (0.5 / (((_3077 * ((_3063 * _3078) + _3048)) + 9.9999999392252902907785028219223e-09) + (((_3077 * _3078) + _3048) * _3063))) * _3077;
                        float _4420 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3099 = (((_3049 * 3.1415927410125732421875) * (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) / ((_3071 * _3071) * ((_3014 * 2.1991131305694580078125) + 3.141590118408203125))) * _3003;
                        _2851 = (_3018 * _2966.x) + _2924;
                        _2852 = (_3018 * _2966.y) + _2925;
                        _2853 = (_3018 * _2966.z) + _2926;
                        _2848 = (_3099 * _2983.x) + _2921;
                        _2849 = (_3099 * _2983.y) + _2922;
                        _2850 = (_3099 * _2983.z) + _2923;
                        if (_2928 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2921 = _2848;
                            _2922 = _2849;
                            _2923 = _2850;
                            _2924 = _2851;
                            _2925 = _2852;
                            _2926 = _2853;
                            _2927 = _2928;
                        }
                    }
                    frontier_phi_66_pred = _2848;
                    frontier_phi_66_pred_1 = _2853;
                    frontier_phi_66_pred_2 = _2852;
                    frontier_phi_66_pred_3 = _2851;
                    frontier_phi_66_pred_4 = _2850;
                    frontier_phi_66_pred_5 = _2849;
                }
                _2624 = frontier_phi_66_pred;
                _2634 = frontier_phi_66_pred_1;
                _2632 = frontier_phi_66_pred_2;
                _2630 = frontier_phi_66_pred_3;
                _2628 = frontier_phi_66_pred_4;
                _2626 = frontier_phi_66_pred_5;
                uint _2783 = _2782 + 1u;
                if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2776 = _2624;
                    _2777 = _2626;
                    _2778 = _2628;
                    _2779 = _2630;
                    _2780 = _2632;
                    _2781 = _2634;
                    _2782 = _2783;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2623 = _2624;
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
        }
        uvec4 _2637 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2638 = _2637.z;
        uint _2640 = (_2638 >> 8u) & 15u;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        if (((4294967295u << _2640) & _2522) == 0u)
        {
            _2744 = _2623;
            _2746 = _2625;
            _2748 = _2627;
            _2750 = _2629;
            _2752 = _2631;
            _2754 = _2633;
        }
        else
        {
            float _2769 = inversesqrt(dot(vec3(_2476, _2477, _2478), vec3(_2476, _2477, _2478)));
            float _2770 = _2769 * _2476;
            float _2771 = _2769 * _2477;
            float _2772 = _2769 * _2478;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2640 < ((_2638 >> 12u) & 15u))
            {
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2904 = _2623;
                float _2905 = _2625;
                float _2906 = _2627;
                float _2907 = _2629;
                float _2908 = _2631;
                float _2909 = _2633;
                uint _2910 = _2640;
                uint _2919;
                bool _2920;
                for (;;)
                {
                    _2919 = texelFetch(g_lightClassification, int((((_2516 << 5u) + (_2502 << 9u)) + (_2910 << 2u)) >> 2u)).x;
                    _2920 = _2919 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2920)
                    {
                        frontier_phi_77_pred = _2909;
                        frontier_phi_77_pred_1 = _2908;
                        frontier_phi_77_pred_2 = _2907;
                        frontier_phi_77_pred_3 = _2906;
                        frontier_phi_77_pred_4 = _2905;
                        frontier_phi_77_pred_5 = _2904;
                    }
                    else
                    {
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3126 = _2904;
                        float _3127 = _2905;
                        float _3128 = _2906;
                        float _3129 = _2907;
                        float _3130 = _2908;
                        float _3131 = _2909;
                        uint _3132 = _2919;
                        uint _3133;
                        vec4 _3158;
                        float _3159;
                        vec4 _3174;
                        vec3 _3186;
                        vec4 _3201;
                        vec4 _3217;
                        float _3263;
                        bool _3264;
                        for (;;)
                        {
                            uint _3143 = ((_2910 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3132));
                            _3133 = (_3132 + 4294967295u) & _3132;
                            uint _3145 = _3143 * 40u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            _3159 = _3158.w;
                            uint _3161 = (_3143 * 40u) + 4u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3176 = (_3143 * 40u) + 8u;
                            _3186 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x));
                            uint _3188 = (_3143 * 40u) + 16u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3204 = (_3143 * 40u) + 20u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3219 = (_3143 * 40u) + 24u;
                            vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3238 = (_3143 * 40u) + 28u;
                            vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            _3263 = fma(_2478, _3251.z, fma(_2477, _3251.y, _3251.x * _2476)) + _3251.w;
                            _3264 = !((fma(_2478, _3232.z, fma(_2477, _3232.y, _3232.x * _2476)) + _3232.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3264)
                            {
                                float _3291 = _3158.x - _2476;
                                float _3292 = _3158.y - _2477;
                                float _3293 = _3158.z - _2478;
                                float _3294 = dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293));
                                float _3297 = inversesqrt(_3294);
                                float _3298 = _3297 * _3291;
                                float _3299 = _3297 * _3292;
                                float _3300 = _3297 * _3293;
                                float _3304 = 1.0 - (_3294 / (_3159 * _3159));
                                float _4431 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
                                float _3309 = sqrt(_3294) * _3174.w;
                                float _3311 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                                float _3312 = _3311 * _3311;
                                float _3315 = ((1.0 - _3312) * dot(vec3(_3298, _3299, _3300), vec3(_752, _755, _758))) + _3312;
                                float _3318 = _3309 * _3309;
                                float _3322 = (fma(_2478, _3201.z, fma(_2477, _3201.y, _3201.x * _2476)) + _3201.w) / _3263;
                                float _3323 = (fma(_2478, _3217.z, fma(_2477, _3217.y, _3217.x * _2476)) + _3217.w) / _3263;
                                float _3327 = 1.0 - dot(vec2(_3322, _3323), vec2(_3322, _3323));
                                float _4447 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3329 = _3328 * (((isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))) * _3305) / ((_3318 * 0.699999988079071044921875) + 1.0));
                                float _3341 = exp2(log2(1.0 / ((_3318 * 3.5) + 5.0)) * 0.25);
                                float _3342 = 1.0 - _812;
                                float _3349 = sqrt(1.0 - ((1.0 - (_3342 * _3342)) * (1.0 - (_3341 * _3341))));
                                float _3350 = _3349 * _3349;
                                float _3351 = _3350 * _3350;
                                float _3352 = _3298 - _2770;
                                float _3353 = _3299 - _2771;
                                float _3354 = _3300 - _2772;
                                float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                                float _3362 = dot(vec3(_752, _755, _758), vec3((-0.0) - _2770, (-0.0) - _2771, (-0.0) - _2772));
                                float _4458 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3365 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3366 = dot(vec3(_752, _755, _758), vec3(_3358 * _3352, _3358 * _3353, _3358 * _3354));
                                float _4469 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3369 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
                                float _3373 = ((_3369 * _3369) * (_3351 + (-1.0))) + 1.0;
                                float _3374 = _3311 * _3350;
                                float _3375 = _3374 * _3374;
                                float _3381 = ((1.0 - _3375) * dot(vec3(_752, _755, _758), vec3(_3298, _3299, _3300))) + _3375;
                                float _4480 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3383 = 1.0 - _3350;
                                float _3393 = (0.5 / (((_3382 * ((_3365 * _3383) + _3350)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3350) * _3365))) * _3382;
                                float _4491 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3403 = (_3328 * _3305) * (((_3351 * 3.1415927410125732421875) * (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) / ((_3373 * _3373) * ((_3318 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3329 * _3174.y;
                                frontier_phi_83_pred_1 = _3329 * _3174.x;
                                frontier_phi_83_pred_2 = _3403 * _3186.z;
                                frontier_phi_83_pred_3 = _3403 * _3186.y;
                                frontier_phi_83_pred_4 = _3403 * _3186.x;
                                frontier_phi_83_pred_5 = _3329 * _3174.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3411 = frontier_phi_83_pred;
                            _3410 = frontier_phi_83_pred_1;
                            _3409 = frontier_phi_83_pred_2;
                            _3408 = frontier_phi_83_pred_3;
                            _3407 = frontier_phi_83_pred_4;
                            _3412 = frontier_phi_83_pred_5;
                            _3116 = _3410 + _3129;
                            _3117 = _3411 + _3130;
                            _3118 = _3412 + _3131;
                            _3113 = _3407 + _3126;
                            _3114 = _3408 + _3127;
                            _3115 = _3409 + _3128;
                            if (_3133 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3133;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3118;
                        frontier_phi_77_pred_1 = _3117;
                        frontier_phi_77_pred_2 = _3116;
                        frontier_phi_77_pred_3 = _3115;
                        frontier_phi_77_pred_4 = _3114;
                        frontier_phi_77_pred_5 = _3113;
                    }
                    _2755 = frontier_phi_77_pred;
                    _2753 = frontier_phi_77_pred_1;
                    _2751 = frontier_phi_77_pred_2;
                    _2749 = frontier_phi_77_pred_3;
                    _2747 = frontier_phi_77_pred_4;
                    _2745 = frontier_phi_77_pred_5;
                    uint _2911 = _2910 + 1u;
                    if (_2911 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2904 = _2745;
                        _2905 = _2747;
                        _2906 = _2749;
                        _2907 = _2751;
                        _2908 = _2753;
                        _2909 = _2755;
                        _2910 = _2911;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2749;
                frontier_phi_58_59_ladder_1 = _2755;
                frontier_phi_58_59_ladder_2 = _2753;
                frontier_phi_58_59_ladder_3 = _2751;
                frontier_phi_58_59_ladder_4 = _2747;
                frontier_phi_58_59_ladder_5 = _2745;
            }
            else
            {
                frontier_phi_58_59_ladder = _2627;
                frontier_phi_58_59_ladder_1 = _2633;
                frontier_phi_58_59_ladder_2 = _2631;
                frontier_phi_58_59_ladder_3 = _2629;
                frontier_phi_58_59_ladder_4 = _2625;
                frontier_phi_58_59_ladder_5 = _2623;
            }
            _2744 = frontier_phi_58_59_ladder_5;
            _2746 = frontier_phi_58_59_ladder_4;
            _2748 = frontier_phi_58_59_ladder;
            _2750 = frontier_phi_58_59_ladder_3;
            _2752 = frontier_phi_58_59_ladder_2;
            _2754 = frontier_phi_58_59_ladder_1;
        }
        float _2759 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
        _2535 = (_2759 * _2750) + _1990;
        _2537 = (_2759 * _2752) + _1992;
        _2539 = (_2759 * _2754) + _1994;
        _2541 = ((_2744 * 0.039999999105930328369140625) * _2759) + _2320;
        _2543 = ((_2746 * 0.039999999105930328369140625) * _2759) + _2322;
        _2545 = ((_2748 * 0.039999999105930328369140625) * _2759) + _2324;
    }
    else
    {
        _2535 = _1990;
        _2537 = _1992;
        _2539 = _1994;
        _2541 = _2320;
        _2543 = _2322;
        _2545 = _2324;
    }
    float _4507 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4518 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4529 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _2562 = ((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2535 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _796))) + ((_2541 + ((isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))) * _1632)) * cbPerFrame._m0[3u].x);
    float _2563 = ((isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2537 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _796))) + ((_2543 + ((isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) * _1632)) * cbPerFrame._m0[3u].x);
    float _2564 = ((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_2539 + ((isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))) * _796))) + ((_2545 + ((isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0))) * _1632)) * cbPerFrame._m0[3u].x);
    uint _2565 = _234 + 6u;
    float _2573 = _733 / cbSceneParam._m0[86u].x;
    float _2574 = _734 / cbSceneParam._m0[86u].y;
    vec4 _2588 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2573, _2574, (log2((isnan(cbSceneParam._m0[77u].w) ? _654 : (isnan(_654) ? cbSceneParam._m0[77u].w : min(_654, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2590 = _2588.x;
    float _2591 = _2588.y;
    float _2592 = _2588.z;
    float _2593 = _2588.w;
    float _2686;
    float _2688;
    float _2690;
    float _2692;
    if (_654 > cbSceneParam._m0[78u].w)
    {
        float _2648 = isnan(_654) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _654 : min(cbSceneParam._m0[80u].w, _654));
        float _2649 = _2648 / _654;
        float _2660 = _2649 * _706;
        float _2661 = _707 * _2649;
        float _2662 = (-0.0) - _2661;
        float _2664 = _2649 * _708;
        float _2666 = (cbSceneParam._m0[77u].w * _2662) / _2648;
        float _2667 = _2666 + cbSceneParam._m0[79u].w;
        float _2668 = cbSceneParam._m0[79u].w - _2661;
        float _2674 = sqrt(((_2660 * _2660) + (_2661 * _2661)) + (_2664 * _2664));
        float _2677 = (1.0 - (cbSceneParam._m0[77u].w / _2648)) * _2674;
        float _2682 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2684 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2861;
        if (abs((_2662 - _2666) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2861 = ((((_2667 > 0.0) ? exp2(_2682 * _2667) : (2.0 - exp2(_2684 * _2667))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2677;
        }
        else
        {
            float _2805 = 1.0 / cbSceneParam._m0[80u].x;
            float _2806 = isnan(_2668) ? _2667 : (isnan(_2667) ? _2668 : max(_2667, _2668));
            float _2807 = isnan(_2668) ? _2667 : (isnan(_2667) ? _2668 : min(_2667, _2668));
            float _2816 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : min(_2806, 0.0));
            float _2817 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : min(_2807, 0.0));
            _2861 = ((abs(_2674 / _2662) * cbSceneParam._m0[80u].y) * ((((_2816 - _2817) * 2.0) - ((exp2(_2682 * (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0)))) - exp2(_2682 * (isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0))))) * _2805)) - ((exp2(_2684 * _2816) - exp2(_2684 * _2817)) * _2805))) + (_2677 * cbSceneParam._m0[80u].z);
        }
        vec4 _2863 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2573, _2574, 1.0), 0.0);
        float _2872 = exp2((_2861 * (-1.44269502162933349609375)) * (1.0 - _2863.w));
        float _2873 = log2(_2872);
        float _2889 = log2(_2593);
        _2686 = (exp2(_2889 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].x)) * _2863.x) / cbSceneParam._m0[78u].x)) + _2590;
        _2688 = (exp2(_2889 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].y)) * _2863.y) / cbSceneParam._m0[78u].y)) + _2591;
        _2690 = (exp2(_2889 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2873 * cbSceneParam._m0[78u].z)) * _2863.z) / cbSceneParam._m0[78u].z)) + _2592;
        _2692 = _2872 * _2593;
    }
    else
    {
        _2686 = _2590;
        _2688 = _2591;
        _2690 = _2592;
        _2692 = _2593;
    }
    bool _2899;
    vec4 _2702;
    vec4 _2724;
    float _2726;
    float _2730;
    float _2731;
    float _2732;
    float _2733;
    bool _2743;
    for (;;)
    {
        _2702 = cbMatDynParam._m0[0u];
        float _2704 = roundEven(_2702.y);
        bool _2705 = _2704 == 3.0;
        float _2706 = log2(_2692);
        float _2713 = exp2(_2706 * cbSceneParam._m0[78u].x) * _2562;
        float _2714 = exp2(_2706 * cbSceneParam._m0[78u].y) * _2563;
        float _2715 = exp2(_2706 * cbSceneParam._m0[78u].z) * _2564;
        float _2722 = _722 + (-0.5);
        _2724 = cbMtdParam._m0[1u];
        _2726 = _2724.y * _2722;
        float _2729 = (_2704 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2730 = _2729 * (_2705 ? _2713 : (_2713 + (cbSceneParam._m0[72u].w * _2686)));
        _2731 = _2729 * (_2705 ? _2714 : (_2714 + (cbSceneParam._m0[72u].w * _2688)));
        _2732 = _2729 * (_2705 ? _2715 : (_2715 + (cbSceneParam._m0[72u].w * _2690)));
        _2733 = _2722 * 0.999000012874603271484375;
        _2743 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2743)
        {
            if ((cbInstanceData._m0[_234 + 7u].x + _2733) < 0.5)
            {
                _2899 = true;
                break;
            }
        }
        uint _2840 = _771 + uint(_2702.w);
        if ((cbInstanceData._m0[_2840].w < 1.0) && ((cbInstanceData._m0[_2840].w + _2733) < 0.5))
        {
            _2899 = true;
            break;
        }
        if ((_2726 + 1.0) < _2724.x)
        {
            _2899 = true;
            break;
        }
        _2899 = false;
        break;
    }
    float _3104;
    if (_2899)
    {
        discard_state = true;
        _3104 = 0.0;
    }
    else
    {
        _3104 = cbInstanceData._m0[_2565].w;
    }
    SV_Target.x = _2730;
    SV_Target.y = _2731;
    SV_Target.z = _2732;
    SV_Target.w = _3104;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2565].w;
    discard_exit();
}


