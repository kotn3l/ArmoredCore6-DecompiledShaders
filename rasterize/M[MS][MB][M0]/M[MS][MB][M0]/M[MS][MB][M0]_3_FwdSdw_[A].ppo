#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_0;
layout(set = 0, binding = 13) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_22;
layout(set = 0, binding = 20) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_MS_MB_M0_snp_0_Texture2D_16;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _982;
float _3631;
float _3632;
float _3633;
float _3634;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _241 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _242 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3643 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3654 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3665 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _257 = _252 + 1u;
    uint _261 = _252 + 2u;
    float _270 = sqrt(((cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x));
    float _271 = _270 * TEXCOORD.z;
    float _272 = _270 * TEXCOORD.w;
    vec4 _285 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _271) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    vec4 _308 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _313 = _308.x * cbMtdParam._m0[9u].x;
    float _314 = _308.y * cbMtdParam._m0[9u].y;
    float _315 = _308.z * cbMtdParam._m0[9u].z;
    float _319 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _285.x) * _313;
    float _322 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _285.y) * _314;
    float _325 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _285.z) * _315;
    float _332 = ((_313 - _319) * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) + _319;
    float _333 = ((_314 - _322) * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) + _322;
    float _334 = ((_315 - _325) * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) + _325;
    vec4 _347 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _271) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _272) + cbTextureTilingScale._m0[20u].w));
    vec4 _373 = texture(sampler2D(M_MS_MB_M0_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _377 = _373.z;
    float _381 = (_373.x * 2.0) + (-1.0);
    float _382 = (_373.y * 2.0) + (-1.0);
    float _383 = dot(vec2(_381, _382), vec2(_381, _382));
    float _3676 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _388 = sqrt(1.0 - (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))));
    float _393 = _381 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_347.x * 2.0) + (-1.0)));
    float _394 = _382 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_347.y * 2.0) + (-1.0)));
    float _399 = (((_347.z - _377) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _377;
    float _401 = cbMtdParam._m0[22u].x + _373.w;
    float _404 = fma(_388, _218 * NORMAL.x, fma(_394, _225 * TANGENT.x, (_211 * _203) * _393));
    float _407 = fma(_388, _218 * NORMAL.y, fma(_394, _225 * TANGENT.y, (_211 * _204) * _393));
    float _410 = fma(_388, _218 * NORMAL.z, fma(_394, _225 * TANGENT.z, (_211 * _205) * _393));
    float _414 = inversesqrt(dot(vec3(_404, _407, _410), vec3(_404, _407, _410)));
    float _415 = _414 * _404;
    float _416 = _414 * _407;
    float _417 = _414 * _410;
    float _3687 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _418 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _3709 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3720 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _3731 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _436 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _478 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _488 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _478);
    float _489 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _478);
    float _490 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _478);
    float _494 = inversesqrt(dot(vec3(_488, _489, _490), vec3(_488, _489, _490)));
    float _495 = _488 * _494;
    float _496 = _489 * _494;
    float _497 = _490 * _494;
    vec4 _502 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _504 = _502.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _661 = sqrt(((_488 * _488) + (_489 * _489)) + (_490 * _490));
        float _667 = (cbMatDynParam._m0[5u].x * _661) + cbMatDynParam._m0[5u].y;
        float _3742 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _668 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _672 = (cbMatDynParam._m0[5u].z * _661) + cbMatDynParam._m0[5u].w;
        float _3753 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) - _668)) + _668) < ((_504 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _516 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _517 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _537 = fma(_417, cbSceneParam._m0[5u].z, fma(_416, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _415));
    float _540 = fma(_417, cbSceneParam._m0[6u].z, fma(_416, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _415));
    float _543 = fma(_417, cbSceneParam._m0[7u].z, fma(_416, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _415));
    uint _556 = _252 + 9u;
    uint _557 = _556 + uint(cbMatDynParam._m0[0u].w);
    float _563 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0)))) * cbInstanceData._m0[_557].x;
    float _564 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0)))) * cbInstanceData._m0[_557].y;
    float _565 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_557].z;
    float _3764 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _3775 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _567 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _3786 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _568 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    vec4 _577 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _516, cbSceneParam._m0[86u].y * _517));
    float _581 = ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * TEXCOORD_5.w) * _577.x;
    float _582 = dot(vec3(_415, _416, _417), vec3(_495, _496, _497));
    float _585 = _582 * 2.0;
    float _589 = (_585 * _415) - _495;
    float _590 = (_585 * _416) - _496;
    float _591 = (_585 * _417) - _497;
    float _595 = abs(dot(vec3(_495, _496, _497), vec3(_415, _416, _417)));
    float _3797 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _597 = sqrt(_418);
    float _610 = exp2((_597 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_597 * 3.0));
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _646 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _981;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _706 = fma(_650, cbModelParam._m0[26u].z, fma(_646, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _642));
        float _710 = fma(_650, cbModelParam._m0[27u].z, fma(_646, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _642));
        float _714 = fma(_650, cbModelParam._m0[28u].z, fma(_646, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _642));
        float _739 = _642 + _415;
        float _740 = _646 + _416;
        float _741 = _650 + _417;
        float _751 = fma(_741, cbModelParam._m0[26u].z, fma(_740, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _739)) - _706;
        float _752 = fma(_741, cbModelParam._m0[27u].z, fma(_740, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _739)) - _710;
        float _753 = fma(_741, cbModelParam._m0[28u].z, fma(_740, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _739)) - _714;
        float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
        float _770 = ((_757 * _751) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_706 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_757 * _752) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_710 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _772 = ((_757 * _753) / cbModelParam._m0[34u].z) + ((((((_714 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        vec4 _796 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_770, _771, _772), 0.0);
        float _809 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _810 = _809 * (_775.x + (-0.5));
        float _811 = _809 * (_775.y + (-0.5));
        float _812 = _809 * (_775.z + (-0.5));
        float _819 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_782.x + (-0.5));
        float _821 = _819 * (_782.y + (-0.5));
        float _822 = _819 * (_782.z + (-0.5));
        float _829 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_789.x + (-0.5));
        float _831 = _829 * (_789.y + (-0.5));
        float _832 = _829 * (_789.z + (-0.5));
        float _839 = exp2((_796.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_796.x + (-0.5));
        float _841 = _839 * (_796.y + (-0.5));
        float _842 = _839 * (_796.z + (-0.5));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = _810 * 0.5;
        float _847 = _820 * 0.5;
        float _848 = _830 * 0.5;
        float _849 = dot(vec3(_846, _847, _848), vec3(_846, _847, _848));
        float _854 = (_849 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_849);
        float _863 = (dot(vec3(_415, _416, _417), vec3(_854 * _846, _854 * _847, _854 * _848)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _873 = sqrt(((_847 * _847) + (_846 * _846)) + (_848 * _848)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _875 = _874 * 2.0;
        float _879 = (1.0 - _874) / (_874 + 1.0);
        float _3845 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _889 = ((((1.0 - _880) * (_875 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_875 + 1.0))) + _880) * _843;
        float _890 = _811 * 0.5;
        float _891 = _821 * 0.5;
        float _892 = _831 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _906 = (dot(vec3(_415, _416, _417), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _915 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3878 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_917 + 1.0))) + _922) * _844;
        float _932 = _812 * 0.5;
        float _933 = _822 * 0.5;
        float _934 = _832 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_415, _416, _417), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3911 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_959 + 1.0))) + _964) * _845;
        _981 = _812;
        _983 = _811;
        _984 = _810;
        _985 = _822;
        _986 = _821;
        _987 = _820;
        _988 = _832;
        _989 = _831;
        _990 = _830;
        _991 = _845;
        _992 = _844;
        _993 = _843;
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0)));
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
    }
    else
    {
        _981 = _982;
        _983 = _982;
        _984 = _982;
        _985 = _982;
        _986 = _982;
        _987 = _982;
        _988 = _982;
        _989 = _982;
        _990 = _982;
        _991 = _982;
        _992 = _982;
        _993 = _982;
        _994 = 0.0;
        _995 = 0.0;
        _996 = 0.0;
    }
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1024 = fma(_650, cbModelParam._m0[30u].z, fma(_646, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _642));
        float _1028 = fma(_650, cbModelParam._m0[31u].z, fma(_646, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _642));
        float _1032 = fma(_650, cbModelParam._m0[32u].z, fma(_646, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _642));
        float _1055 = _642 + _415;
        float _1056 = _646 + _416;
        float _1057 = _650 + _417;
        float _1067 = fma(_1057, cbModelParam._m0[30u].z, fma(_1056, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1055)) - _1024;
        float _1068 = fma(_1057, cbModelParam._m0[31u].z, fma(_1056, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1055)) - _1028;
        float _1069 = fma(_1057, cbModelParam._m0[32u].z, fma(_1056, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1055)) - _1032;
        float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
        float _1086 = ((_1073 * _1067) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1024 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1073 * _1068) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1028 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1073 * _1069) / cbModelParam._m0[35u].z) + ((((((_1032 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        float _1123 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1090.x + (-0.5));
        float _1125 = _1123 * (_1090.y + (-0.5));
        float _1126 = _1123 * (_1090.z + (-0.5));
        float _1133 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1097.x + (-0.5));
        float _1135 = _1133 * (_1097.y + (-0.5));
        float _1136 = _1133 * (_1097.z + (-0.5));
        float _1143 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1104.x + (-0.5));
        float _1145 = _1143 * (_1104.y + (-0.5));
        float _1146 = _1143 * (_1104.z + (-0.5));
        float _1153 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1111.x + (-0.5));
        float _1155 = _1153 * (_1111.y + (-0.5));
        float _1156 = _1153 * (_1111.z + (-0.5));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = _1124 * 0.5;
        float _1161 = _1134 * 0.5;
        float _1162 = _1144 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_415, _416, _417), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3974 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1187 + 1.0))) + _1192) * _1157;
        float _1202 = _1125 * 0.5;
        float _1203 = _1135 * 0.5;
        float _1204 = _1145 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_415, _416, _417), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4007 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1229 + 1.0))) + _1234) * _1158;
        float _1244 = _1126 * 0.5;
        float _1245 = _1136 * 0.5;
        float _1246 = _1146 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_415, _416, _417), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4040 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1271 + 1.0))) + _1276) * _1159;
        _1293 = _1126;
        _1294 = _1125;
        _1295 = _1124;
        _1296 = _1136;
        _1297 = _1135;
        _1298 = _1134;
        _1299 = _1146;
        _1300 = _1145;
        _1301 = _1144;
        _1302 = _1159;
        _1303 = _1158;
        _1304 = _1157;
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1306 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
    }
    else
    {
        _1293 = _982;
        _1294 = _982;
        _1295 = _982;
        _1296 = _982;
        _1297 = _982;
        _1298 = _982;
        _1299 = _982;
        _1300 = _982;
        _1301 = _982;
        _1302 = _982;
        _1303 = _982;
        _1304 = _982;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _994)) + _994;
    float _1318 = (cbModelParam._m0[1u].x * (_1306 - _995)) + _995;
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _996)) + _996;
    float _1340 = fma(_1319, cbSceneParam._m0[89u].z, fma(_1318, cbSceneParam._m0[89u].y, _1317 * cbSceneParam._m0[89u].x));
    float _1343 = fma(_1319, cbSceneParam._m0[90u].z, fma(_1318, cbSceneParam._m0[90u].y, _1317 * cbSceneParam._m0[90u].x));
    float _1346 = fma(_1319, cbSceneParam._m0[91u].z, fma(_1318, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1317));
    float _1361 = _589 * 0.5;
    float _1362 = _590 * 0.5;
    float _1363 = _591 * 0.5;
    float _1364 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1367 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1294, _1297, _1300, _1303));
    float _1370 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1404;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1377 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_981, _985, _988, _991));
        float _1381 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_983, _986, _989, _992));
        float _1385 = dot(vec4(_1361, _1362, _1363, 1.0), vec4(_984, _987, _990, _993));
        float _1392 = dot(vec4(cbModelParam._m0[39u]), vec4(_1361, _1362, _1363, 1.0));
        _1404 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1392) ? 0.0 : (isnan(0.0) ? _1392 : max(0.0, _1392))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1404 = 1.0;
    }
    float _1415;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1406 = dot(vec4(cbModelParam._m0[40u]), vec4(_1361, _1362, _1363, 1.0));
        _1415 = dot(vec3(isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1406) ? 0.0 : (isnan(0.0) ? _1406 : max(0.0, _1406))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1415 = 1.0;
    }
    float _1419 = (_1415 * cbModelParam._m0[1u].x) + (_1404 * (1.0 - cbModelParam._m0[1u].x));
    float _1429 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _418);
    float _1430 = isnan(_1429) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1429 : min(cbModelParam._m0[25u].z, _1429));
    float _1512;
    float _1514;
    float _1516;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1479 = fma(_650, cbModelParam._m0[13u].z, fma(_646, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _642)) + cbModelParam._m0[13u].w;
        float _1483 = fma(_650, cbModelParam._m0[14u].z, fma(_646, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _642)) + cbModelParam._m0[14u].w;
        float _1487 = fma(_650, cbModelParam._m0[15u].z, fma(_646, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _642)) + cbModelParam._m0[15u].w;
        float _1490 = fma(_591, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _589));
        float _1493 = fma(_591, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _589));
        float _1496 = fma(_591, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _589));
        float _1524;
        if (_1490 > 0.0)
        {
            _1524 = abs((1.0 - _1479) / _1490);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1479 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1524 = frontier_phi_17_15_ladder;
        }
        float _1697;
        if (_1493 > 0.0)
        {
            _1697 = abs((1.0 - _1483) / _1493);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1493 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1483 + 1.0) / _1493);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1697 = frontier_phi_26_22_ladder;
        }
        float _1993;
        if (_1496 > 0.0)
        {
            _1993 = abs((1.0 - _1487) / _1496);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1487 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1993 = frontier_phi_38_33_ladder;
        }
        float _1995 = isnan(_1697) ? _1524 : (isnan(_1524) ? _1697 : min(_1524, _1697));
        float _1996 = isnan(_1993) ? _1995 : (isnan(_1995) ? _1993 : min(_1995, _1993));
        float _2000 = (_1996 * _1490) + _1479;
        float _2001 = (_1996 * _1493) + _1483;
        float _2002 = (_1996 * _1496) + _1487;
        float _2003 = _1996 * 9.9999997473787516355514526367188e-05;
        float _2005 = (-1.0) - _2003;
        float _2007 = _2003 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2002 > _2007) || ((_2002 < _2005) || ((_2001 > _2007) || ((_2001 < _2005) || ((_2000 < _2005) || (_2000 > _2007))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2147 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2002, cbModelParam._m0[9u].z, fma(_2001, cbModelParam._m0[9u].y, _2000 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2002, cbModelParam._m0[10u].z, fma(_2001, cbModelParam._m0[10u].y, _2000 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2002, cbModelParam._m0[11u].z, fma(_2001, cbModelParam._m0[11u].y, _2000 * cbModelParam._m0[11u].x))), _1430);
            frontier_phi_16_38_ladder = _2147.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2147.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2147.x * cbModelParam._m0[1u].y;
        }
        _1512 = frontier_phi_16_38_ladder_2;
        _1514 = frontier_phi_16_38_ladder_1;
        _1516 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1500 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_589, _590, _591), _1430);
        _1512 = _1500.x * cbModelParam._m0[1u].y;
        _1514 = _1500.y * cbModelParam._m0[1u].y;
        _1516 = _1500.z * cbModelParam._m0[1u].y;
    }
    float _1520 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _418);
    float _1521 = isnan(_1520) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1520 : min(cbModelParam._m0[25u].w, _1520));
    float _1613;
    float _1615;
    float _1617;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1577 = fma(_650, cbModelParam._m0[21u].z, fma(_646, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _642)) + cbModelParam._m0[21u].w;
        float _1581 = fma(_650, cbModelParam._m0[22u].z, fma(_646, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _642)) + cbModelParam._m0[22u].w;
        float _1585 = fma(_650, cbModelParam._m0[23u].z, fma(_646, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _642)) + cbModelParam._m0[23u].w;
        float _1588 = fma(_591, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _589));
        float _1591 = fma(_591, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _589));
        float _1594 = fma(_591, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _589));
        float _1702;
        if (_1588 > 0.0)
        {
            _1702 = abs((1.0 - _1577) / _1588);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1577 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1702 = frontier_phi_28_24_ladder;
        }
        float _2020;
        if (_1591 > 0.0)
        {
            _2020 = abs((1.0 - _1581) / _1591);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1581 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2020 = frontier_phi_40_35_ladder;
        }
        float _2347;
        if (_1594 > 0.0)
        {
            _2347 = abs((1.0 - _1585) / _1594);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1585 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2347 = frontier_phi_50_47_ladder;
        }
        float _2349 = isnan(_2020) ? _1702 : (isnan(_1702) ? _2020 : min(_1702, _2020));
        float _2350 = isnan(_2347) ? _2349 : (isnan(_2349) ? _2347 : min(_2349, _2347));
        float _2354 = (_2350 * _1588) + _1577;
        float _2355 = (_2350 * _1591) + _1581;
        float _2356 = (_2350 * _1594) + _1585;
        float _2357 = _2350 * 9.9999997473787516355514526367188e-05;
        float _2358 = (-1.0) - _2357;
        float _2360 = _2357 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2356 > _2360) || ((_2356 < _2358) || ((_2355 > _2360) || ((_2355 < _2358) || ((_2354 < _2358) || (_2354 > _2360))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2474 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2356, cbModelParam._m0[17u].z, fma(_2355, cbModelParam._m0[17u].y, _2354 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2356, cbModelParam._m0[18u].z, fma(_2355, cbModelParam._m0[18u].y, _2354 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2356, cbModelParam._m0[19u].z, fma(_2355, cbModelParam._m0[19u].y, _2354 * cbModelParam._m0[19u].x))), _1521);
            frontier_phi_25_50_ladder = _2474.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2474.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2474.x * cbModelParam._m0[1u].z;
        }
        _1613 = frontier_phi_25_50_ladder_2;
        _1615 = frontier_phi_25_50_ladder_1;
        _1617 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1597 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_589, _590, _591), _1521);
        _1613 = _1597.x * cbModelParam._m0[1u].z;
        _1615 = _1597.y * cbModelParam._m0[1u].z;
        _1617 = _1597.z * cbModelParam._m0[1u].z;
    }
    float _1629 = ((((1.0 - _610) * ((_597 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_610 * _597)) * _581;
    float _1630 = _1629 * ((cbModelParam._m0[1u].w * (_1613 - _1512)) + _1512);
    float _1631 = _1629 * ((cbModelParam._m0[1u].w * (_1615 - _1514)) + _1514);
    float _1632 = _1629 * ((cbModelParam._m0[1u].w * (_1617 - _1516)) + _1516);
    float _1635 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1638 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1641 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, _1630 * cbSceneParam._m0[91u].x));
    float _1676 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1680 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1684 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1688 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1689 = _1676 / _1688;
    float _1690 = _1680 / _1688;
    float _1691 = _1684 / _1688;
    float _1838;
    float _1839;
    float _1840;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1718 = ((uint(_1691 > cbSceneParam._m0[59u].y) + uint(_1691 > cbSceneParam._m0[59u].x)) + uint(_1691 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1719 = _1718 + 43u;
        uint _1727 = _1718 + 44u;
        uint _1735 = _1718 + 45u;
        uint _1743 = _1718 + 46u;
        float _1754 = fma(_1688, cbSceneParam._m0[_1719].w, fma(_1684, cbSceneParam._m0[_1719].z, fma(_1680, cbSceneParam._m0[_1719].y, _1676 * cbSceneParam._m0[_1719].x)));
        float _1758 = fma(_1688, cbSceneParam._m0[_1727].w, fma(_1684, cbSceneParam._m0[_1727].z, fma(_1680, cbSceneParam._m0[_1727].y, _1676 * cbSceneParam._m0[_1727].x)));
        float _1766 = fma(_1688, cbSceneParam._m0[_1743].w, fma(_1684, cbSceneParam._m0[_1743].z, fma(_1680, cbSceneParam._m0[_1743].y, _1676 * cbSceneParam._m0[_1743].x)));
        float _1771 = cbSceneParam._m0[33u].z * _1766;
        float _1773 = cbSceneParam._m0[33u].w * _1766;
        float _1776 = fma(_1688, cbSceneParam._m0[_1735].w, fma(_1684, cbSceneParam._m0[_1735].z, fma(_1680, cbSceneParam._m0[_1735].y, _1676 * cbSceneParam._m0[_1735].x))) / _1766;
        float _1824 = (cbSceneParam._m0[33u].x - sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691))) * cbSceneParam._m0[33u].y;
        float _4166 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1831 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1771 + _1754) / _1766, (_1773 + _1758) / _1766), _1776), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1773 + _1754) / _1766, (_1758 - _1771) / _1766), _1776), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1754 - _1771) / _1766, (_1758 - _1773) / _1766), _1776), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1754 - _1773) / _1766, (_1771 + _1758) / _1766), _1776), 0.0)).x), vec4(0.25)));
        _1838 = 1.0 - (_1831 * cbSceneParam._m0[34u].x);
        _1839 = 1.0 - (_1831 * cbSceneParam._m0[34u].y);
        _1840 = 1.0 - (_1831 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1838 = 1.0;
        _1839 = 1.0;
        _1840 = 1.0;
    }
    float _1904;
    float _1906;
    float _1908;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1892 = fma(_1688, cbSceneParam._m0[63u].w, fma(_1684, cbSceneParam._m0[63u].z, fma(_1680, cbSceneParam._m0[63u].y, _1676 * cbSceneParam._m0[63u].x)));
        float _1893 = fma(_1688, cbSceneParam._m0[60u].w, fma(_1684, cbSceneParam._m0[60u].z, fma(_1680, cbSceneParam._m0[60u].y, _1676 * cbSceneParam._m0[60u].x))) / _1892;
        float _1894 = fma(_1688, cbSceneParam._m0[61u].w, fma(_1684, cbSceneParam._m0[61u].z, fma(_1680, cbSceneParam._m0[61u].y, _1676 * cbSceneParam._m0[61u].x))) / _1892;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1893 >= cbSceneParam._m0[64u].x) && (_1894 >= cbSceneParam._m0[64u].y)) && (_1893 <= cbSceneParam._m0[64u].z)) && (_1894 <= cbSceneParam._m0[64u].w))
        {
            float _2033 = fma(_1688, cbSceneParam._m0[62u].w, fma(_1684, cbSceneParam._m0[62u].z, fma(_1680, cbSceneParam._m0[62u].y, _1676 * cbSceneParam._m0[62u].x))) / _1892;
            float _2037 = isnan(cbSceneParam._m0[41u].w) ? _2033 : (isnan(_2033) ? cbSceneParam._m0[41u].w : max(_2033, cbSceneParam._m0[41u].w));
            float _2080 = (cbSceneParam._m0[33u].x - sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691))) * cbSceneParam._m0[33u].y;
            float _4182 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
            float _2087 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1893, cbSceneParam._m0[33u].w + _1894), _2037), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1893, _1894 - cbSceneParam._m0[33u].z), _2037), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1893 - cbSceneParam._m0[33u].z, _1894 - cbSceneParam._m0[33u].w), _2037), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1893 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1894), _2037), 0.0)).x), vec4(0.25)));
            float _2091 = 1.0 - (_2087 * cbSceneParam._m0[34u].x);
            float _2092 = 1.0 - (_2087 * cbSceneParam._m0[34u].y);
            float _2093 = 1.0 - (_2087 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2093) ? _1840 : (isnan(_1840) ? _2093 : min(_1840, _2093));
            frontier_phi_37_36_ladder_1 = isnan(_2092) ? _1839 : (isnan(_1839) ? _2092 : min(_1839, _2092));
            frontier_phi_37_36_ladder_2 = isnan(_2091) ? _1838 : (isnan(_1838) ? _2091 : min(_1838, _2091));
        }
        else
        {
            frontier_phi_37_36_ladder = _1840;
            frontier_phi_37_36_ladder_1 = _1839;
            frontier_phi_37_36_ladder_2 = _1838;
        }
        _1904 = frontier_phi_37_36_ladder_2;
        _1906 = frontier_phi_37_36_ladder_1;
        _1908 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1904 = _1838;
        _1906 = _1839;
        _1908 = _1840;
    }
    uvec4 _1913 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _1915 = _1913.x * 14u;
    uint _1916 = _1915 + 13u;
    float _1923 = _581 + (-1.0);
    float _1928 = (cbLight._m0[_1916].x * _1923) + 1.0;
    float _1929 = (cbLight._m0[_1916].y * _1923) + 1.0;
    float _1930 = (cbLight._m0[_1916].z * _1923) + 1.0;
    float _1931 = (cbLight._m0[_1916].w * _1923) + 1.0;
    uint _1932 = _1915 + 5u;
    float _1938 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
    uint _1942 = _1915 + 4u;
    float _1952 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
    uint _1956 = _1915 | 1u;
    float _1967 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_415, _416, _417));
    float _1970 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_415, _416, _417));
    float _4218 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _4229 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1975 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _1977 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _1984 = ((cbLight._m0[_1932].x * _1938) * _1977) + (((cbLight._m0[_1942].x * _1904) * _1952) * _1975);
    float _1985 = ((_1938 * cbLight._m0[_1932].y) * _1977) + (((cbLight._m0[_1942].y * _1906) * _1952) * _1975);
    float _1986 = ((_1938 * cbLight._m0[_1932].z) * _1977) + (((cbLight._m0[_1942].z * _1908) * _1952) * _1975);
    uvec4 _1990 = floatBitsToUint(cbLight._m0[_1915 + 12u]);
    bool _1992 = _1990.x == 0u;
    float _2094;
    float _2096;
    float _2098;
    if (_1992)
    {
        _2094 = _1984;
        _2096 = _1985;
        _2098 = _1986;
    }
    else
    {
        uint _2102 = _1915 + 6u;
        float _2118 = (dot(vec3(cbLight._m0[_1915 + 2u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _2119 = _2118 * _2118;
        float _4240 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
        float _2120 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2121 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        _2094 = (((cbLight._m0[_2102].x * 0.3183098733425140380859375) * _2120) * _2121) + _1984;
        _2096 = (((cbLight._m0[_2102].y * 0.3183098733425140380859375) * _2120) * _2121) + _1985;
        _2098 = (((cbLight._m0[_2102].z * 0.3183098733425140380859375) * _2120) * _2121) + _1986;
    }
    bool _2101 = _1990.y == 0u;
    float _2156;
    float _2158;
    float _2160;
    if (_2101)
    {
        _2156 = _2094;
        _2158 = _2096;
        _2160 = _2098;
    }
    else
    {
        uint _2318 = _1915 + 7u;
        float _2334 = (dot(vec3(cbLight._m0[_1915 + 3u].xyz), vec3(_415, _416, _417)) * 0.5) + 0.5;
        float _2335 = _2334 * _2334;
        float _4256 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2336 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2337 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
        _2156 = (((cbLight._m0[_2318].x * 0.3183098733425140380859375) * _2336) * _2337) + _2094;
        _2158 = (((cbLight._m0[_2318].y * 0.3183098733425140380859375) * _2336) * _2337) + _2096;
        _2160 = (((cbLight._m0[_2318].z * 0.3183098733425140380859375) * _2336) * _2337) + _2098;
    }
    uint _2163 = _1915 + 8u;
    float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1915].w)) * _418) * 0.949999988079071044921875);
    float _2177 = _2176 * _2176;
    float _2178 = cbLight._m0[_1915].x + _495;
    float _2179 = cbLight._m0[_1915].y + _496;
    float _2180 = cbLight._m0[_1915].z + _497;
    float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
    float _2185 = _2184 * _2178;
    float _2186 = _2184 * _2179;
    float _2187 = _2184 * _2180;
    float _2188 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1915].xyz));
    float _4272 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _2192 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2193 = dot(vec3(_415, _416, _417), vec3(_2185, _2186, _2187));
    float _4294 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2196 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2197 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_2185, _2186, _2187));
    float _4305 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2201 = _2177 * _2177;
    float _2205 = ((_2196 * _2196) * (_2201 + (-1.0))) + 1.0;
    float _2216 = (exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2217 = 1.0 - _2177;
    float _2228 = (0.5 / (((_2192 * ((_2191 * _2217) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2217) + _2177) * _2191))) * _2191;
    float _4316 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2230 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2201 / ((_2205 * _2205) * 3.141590118408203125));
    uint _2244 = _1915 + 9u;
    float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _418) * 0.949999988079071044921875);
    float _2256 = _2255 * _2255;
    float _2257 = cbLight._m0[_1956].x + _495;
    float _2258 = cbLight._m0[_1956].y + _496;
    float _2259 = cbLight._m0[_1956].z + _497;
    float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
    float _2264 = _2263 * _2257;
    float _2265 = _2263 * _2258;
    float _2266 = _2263 * _2259;
    float _2267 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_1956].xyz));
    float _4327 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2270 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2271 = dot(vec3(_415, _416, _417), vec3(_2264, _2265, _2266));
    float _4338 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2274 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2275 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2264, _2265, _2266));
    float _4349 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2279 = _2256 * _2256;
    float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
    float _2292 = (exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2293 = 1.0 - _2256;
    float _2303 = (0.5 / (((_2192 * ((_2270 * _2293) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2293) + _2256) * _2270))) * _2270;
    float _4360 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2305 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
    float _2315 = (((_2292 * cbLight._m0[_2244].x) * _2305) * _1938) + ((((cbLight._m0[_2163].x * _1904) * _2216) * _2230) * _1952);
    float _2316 = (((_2292 * cbLight._m0[_2244].y) * _2305) * _1938) + ((((cbLight._m0[_2163].y * _1906) * _2216) * _2230) * _1952);
    float _2317 = (((_2292 * cbLight._m0[_2244].z) * _2305) * _1938) + ((((cbLight._m0[_2163].z * _1908) * _2216) * _2230) * _1952);
    float _2373;
    float _2375;
    float _2377;
    if (_1992)
    {
        _2373 = _2315;
        _2375 = _2316;
        _2377 = _2317;
    }
    else
    {
        uint _2379 = _1915 + 2u;
        uint _2383 = _1915 + 10u;
        float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _418) * 0.949999988079071044921875);
        float _2398 = _2397 * _2397;
        float _2399 = cbLight._m0[_2379].x + _495;
        float _2400 = cbLight._m0[_2379].y + _496;
        float _2401 = cbLight._m0[_2379].z + _497;
        float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
        float _2406 = _2405 * _2399;
        float _2407 = _2405 * _2400;
        float _2408 = _2405 * _2401;
        float _2409 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2379].xyz));
        float _4371 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2413 = dot(vec3(_415, _416, _417), vec3(_2406, _2407, _2408));
        float _4382 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2417 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2406, _2407, _2408));
        float _4393 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2421 = _2398 * _2398;
        float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
        float _2434 = (exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2435 = 1.0 - _2398;
        float _2445 = (0.5 / (((_2192 * ((_2412 * _2435) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2435) + _2398) * _2412))) * _2412;
        float _4404 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2447 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
        float _2448 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        _2373 = (((_2434 * cbLight._m0[_2383].x) * _2447) * _2448) + _2315;
        _2375 = (((_2434 * cbLight._m0[_2383].y) * _2447) * _2448) + _2316;
        _2377 = (((_2434 * cbLight._m0[_2383].z) * _2447) * _2448) + _2317;
    }
    float _2479;
    float _2481;
    float _2483;
    if (_2101)
    {
        _2479 = _2373;
        _2481 = _2375;
        _2483 = _2377;
    }
    else
    {
        uint _2490 = _1915 + 3u;
        uint _2494 = _1915 + 11u;
        float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2490].w)) * _418) * 0.949999988079071044921875);
        float _2509 = _2508 * _2508;
        float _2510 = cbLight._m0[_2490].x + _495;
        float _2511 = cbLight._m0[_2490].y + _496;
        float _2512 = cbLight._m0[_2490].z + _497;
        float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
        float _2517 = _2516 * _2510;
        float _2518 = _2516 * _2511;
        float _2519 = _2516 * _2512;
        float _2520 = dot(vec3(_415, _416, _417), vec3(cbLight._m0[_2490].xyz));
        float _4420 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2524 = dot(vec3(_415, _416, _417), vec3(_2517, _2518, _2519));
        float _4431 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2528 = dot(vec3(cbLight._m0[_2490].xyz), vec3(_2517, _2518, _2519));
        float _4442 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2532 = _2509 * _2509;
        float _2536 = ((_2527 * _2527) * (_2532 + (-1.0))) + 1.0;
        float _2545 = (exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2546 = 1.0 - _2509;
        float _2556 = (0.5 / (((_2192 * ((_2523 * _2546) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2192 * _2546) + _2509) * _2523))) * _2523;
        float _4453 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0));
        float _2558 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2532 / ((_2536 * _2536) * 3.141590118408203125));
        float _2559 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
        _2479 = (((_2545 * cbLight._m0[_2494].x) * _2558) * _2559) + _2373;
        _2481 = (((_2545 * cbLight._m0[_2494].y) * _2558) * _2559) + _2375;
        _2483 = (((_2545 * cbLight._m0[_2494].z) * _2558) * _2559) + _2377;
    }
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    if (_1913.y == 0u)
    {
        uvec4 _2580 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2581 = _2580.x;
        uint _2592 = uint((float(_2580.y) * floor(float(uint(cbSceneParam._m0[85u].y * _517) / _2581))) + floor(float(uint(cbSceneParam._m0[85u].x * _516) / _2581)));
        float _2602 = (log2(_1691 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2603 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        uint _2606 = uint(isnan(14.0) ? _2603 : (isnan(_2603) ? 14.0 : min(_2603, 14.0)));
        uvec4 _2611 = texelFetch(g_lightClusterGridBuffer, int(((_2606 << 2u) + (_2592 << 6u)) >> 2u));
        uint _2612 = _2611.x;
        uint _2613 = _2580.z;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        if (((((1u << ((_2613 >> 4u) & 15u)) + 4294967295u) & _2612) == 0u) || ((_2613 & 240u) == 0u))
        {
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
            _2698 = 0.0;
            _2700 = 0.0;
            _2702 = 0.0;
        }
        else
        {
            float _2693;
            float _2695;
            float _2697;
            float _2699;
            float _2701;
            float _2703;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            float _2850 = 0.0;
            uint _2851 = 0u;
            uint _2860;
            bool _2861;
            for (;;)
            {
                _2860 = texelFetch(g_lightClassification, int((((_2606 << 5u) + (_2592 << 9u)) + (_2851 << 2u)) >> 2u)).x;
                _2861 = _2860 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2861)
                {
                    frontier_phi_71_pred = _2850;
                    frontier_phi_71_pred_1 = _2849;
                    frontier_phi_71_pred_2 = _2848;
                    frontier_phi_71_pred_3 = _2847;
                    frontier_phi_71_pred_4 = _2846;
                    frontier_phi_71_pred_5 = _2845;
                }
                else
                {
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    uint _2996;
                    _2990 = _2845;
                    _2991 = _2846;
                    _2992 = _2847;
                    _2993 = _2848;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2860;
                    float _2917;
                    float _2918;
                    float _2919;
                    float _2920;
                    float _2921;
                    float _2922;
                    for (;;)
                    {
                        uint _3000 = uint(findLSB(_2996)) + (_2851 << 5u);
                        uint _2997 = (_2996 + 4294967295u) & _2996;
                        uint _3002 = _3000 * 48u;
                        vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 3u)).x));
                        uint _3022 = (_3000 * 48u) + 4u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3022)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3022 + 3u)).x));
                        uint _3041 = (_3000 * 48u) + 8u;
                        vec3 _3052 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x));
                        float _3056 = _3016.x - _1689;
                        float _3057 = _3016.y - _1690;
                        float _3058 = _3016.z - _1691;
                        float _3059 = dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058));
                        float _3062 = inversesqrt(_3059);
                        float _3063 = _3062 * _3056;
                        float _3064 = _3062 * _3057;
                        float _3065 = _3062 * _3058;
                        float _3066 = dot(vec3(_537, _540, _543), vec3(_3063, _3064, _3065));
                        float _3071 = 1.0 - (_3059 * _3016.w);
                        float _4479 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3072 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3073 = sqrt(_3059) * _3035.w;
                        float _3076 = 1.39999997615814208984375 / (_3073 + 1.39999997615814208984375);
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3066) + _3077;
                        float _3083 = _3073 * _3073;
                        float _3087 = ((isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))) * _3072) / ((_3083 * 0.699999988079071044921875) + 1.0);
                        float _3091 = (-0.0) - _1689;
                        float _3092 = (-0.0) - _1690;
                        float _3093 = (-0.0) - _1691;
                        float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                        float _3098 = _3097 * _3091;
                        float _3099 = _3097 * _3092;
                        float _3100 = _3097 * _3093;
                        float _3107 = exp2(log2(1.0 / ((_3083 * 3.5) + 5.0)) * 0.25);
                        float _3108 = 1.0 - _597;
                        float _3115 = sqrt(1.0 - ((1.0 - (_3108 * _3108)) * (1.0 - (_3107 * _3107))));
                        float _3116 = _3115 * _3115;
                        float _3117 = _3116 * _3116;
                        float _3118 = _3098 + _3063;
                        float _3119 = _3099 + _3064;
                        float _3120 = _3100 + _3065;
                        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                        float _3128 = dot(vec3(_537, _540, _543), vec3(_3098, _3099, _3100));
                        float _4495 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3132 = dot(vec3(_537, _540, _543), vec3(_3124 * _3118, _3124 * _3119, _3124 * _3120));
                        float _4506 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3139 = ((_3135 * _3135) * (_3117 + (-1.0))) + 1.0;
                        float _3140 = _3076 * _3116;
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3066) + _3141;
                        float _4517 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3146 = 1.0 - _3116;
                        float _3156 = (0.5 / (((_3145 * ((_3131 * _3146) + _3116)) + 9.9999999392252902907785028219223e-09) + (((_3145 * _3146) + _3116) * _3131))) * _3145;
                        float _4528 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3167 = (((_3117 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3139 * _3139) * ((_3083 * 2.1991131305694580078125) + 3.141590118408203125))) * _3072;
                        _2920 = (_3087 * _3035.x) + _2993;
                        _2921 = (_3087 * _3035.y) + _2994;
                        _2922 = (_3087 * _3035.z) + _2995;
                        _2917 = (_3167 * _3052.x) + _2990;
                        _2918 = (_3167 * _3052.y) + _2991;
                        _2919 = (_3167 * _3052.z) + _2992;
                        if (_2997 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2990 = _2917;
                            _2991 = _2918;
                            _2992 = _2919;
                            _2993 = _2920;
                            _2994 = _2921;
                            _2995 = _2922;
                            _2996 = _2997;
                        }
                    }
                    frontier_phi_71_pred = _2922;
                    frontier_phi_71_pred_1 = _2921;
                    frontier_phi_71_pred_2 = _2920;
                    frontier_phi_71_pred_3 = _2919;
                    frontier_phi_71_pred_4 = _2918;
                    frontier_phi_71_pred_5 = _2917;
                }
                _2703 = frontier_phi_71_pred;
                _2701 = frontier_phi_71_pred_1;
                _2699 = frontier_phi_71_pred_2;
                _2697 = frontier_phi_71_pred_3;
                _2695 = frontier_phi_71_pred_4;
                _2693 = frontier_phi_71_pred_5;
                uint _2852 = _2851 + 1u;
                if (_2852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2845 = _2693;
                    _2846 = _2695;
                    _2847 = _2697;
                    _2848 = _2699;
                    _2849 = _2701;
                    _2850 = _2703;
                    _2851 = _2852;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
            _2698 = _2699;
            _2700 = _2701;
            _2702 = _2703;
        }
        uvec4 _2706 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2707 = _2706.z;
        uint _2709 = (_2707 >> 8u) & 15u;
        float _2813;
        float _2815;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        if (((4294967295u << _2709) & _2612) == 0u)
        {
            _2813 = _2692;
            _2815 = _2694;
            _2817 = _2696;
            _2819 = _2698;
            _2821 = _2700;
            _2823 = _2702;
        }
        else
        {
            float _2838 = inversesqrt(dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691)));
            float _2839 = _2838 * _1689;
            float _2840 = _2838 * _1690;
            float _2841 = _2838 * _1691;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2709 < ((_2707 >> 12u) & 15u))
            {
                float _2814;
                float _2816;
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2973 = _2692;
                float _2974 = _2694;
                float _2975 = _2696;
                float _2976 = _2698;
                float _2977 = _2700;
                float _2978 = _2702;
                uint _2979 = _2709;
                uint _2988;
                bool _2989;
                for (;;)
                {
                    _2988 = texelFetch(g_lightClassification, int((((_2606 << 5u) + (_2592 << 9u)) + (_2979 << 2u)) >> 2u)).x;
                    _2989 = _2988 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2989)
                    {
                        frontier_phi_82_pred = _2978;
                        frontier_phi_82_pred_1 = _2977;
                        frontier_phi_82_pred_2 = _2976;
                        frontier_phi_82_pred_3 = _2975;
                        frontier_phi_82_pred_4 = _2974;
                        frontier_phi_82_pred_5 = _2973;
                    }
                    else
                    {
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3194 = _2973;
                        float _3195 = _2974;
                        float _3196 = _2975;
                        float _3197 = _2976;
                        float _3198 = _2977;
                        float _3199 = _2978;
                        uint _3200 = _2988;
                        uint _3201;
                        vec4 _3226;
                        float _3227;
                        vec4 _3242;
                        vec3 _3254;
                        vec4 _3269;
                        vec4 _3284;
                        float _3331;
                        bool _3332;
                        for (;;)
                        {
                            uint _3211 = ((_2979 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3200));
                            _3201 = (_3200 + 4294967295u) & _3200;
                            uint _3213 = _3211 * 40u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            _3227 = _3226.w;
                            uint _3229 = (_3211 * 40u) + 4u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3244 = (_3211 * 40u) + 8u;
                            _3254 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x));
                            uint _3256 = (_3211 * 40u) + 16u;
                            _3269 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3256)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3256 + 3u)).x));
                            uint _3271 = (_3211 * 40u) + 20u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3287 = (_3211 * 40u) + 24u;
                            vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3287)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3287 + 3u)).x));
                            uint _3306 = (_3211 * 40u) + 28u;
                            vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            _3331 = fma(_1691, _3319.z, fma(_1690, _3319.y, _3319.x * _1689)) + _3319.w;
                            _3332 = !((fma(_1691, _3300.z, fma(_1690, _3300.y, _3300.x * _1689)) + _3300.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3332)
                            {
                                float _3359 = _3226.x - _1689;
                                float _3360 = _3226.y - _1690;
                                float _3361 = _3226.z - _1691;
                                float _3362 = dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361));
                                float _3365 = inversesqrt(_3362);
                                float _3366 = _3365 * _3359;
                                float _3367 = _3365 * _3360;
                                float _3368 = _3365 * _3361;
                                float _3372 = 1.0 - (_3362 / (_3227 * _3227));
                                float _4539 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3373 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3377 = sqrt(_3362) * _3242.w;
                                float _3379 = 1.39999997615814208984375 / (_3377 + 1.39999997615814208984375);
                                float _3380 = _3379 * _3379;
                                float _3383 = ((1.0 - _3380) * dot(vec3(_3366, _3367, _3368), vec3(_537, _540, _543))) + _3380;
                                float _3386 = _3377 * _3377;
                                float _3390 = (fma(_1691, _3269.z, fma(_1690, _3269.y, _3269.x * _1689)) + _3269.w) / _3331;
                                float _3391 = (fma(_1691, _3284.z, fma(_1690, _3284.y, _3284.x * _1689)) + _3284.w) / _3331;
                                float _3395 = 1.0 - dot(vec2(_3390, _3391), vec2(_3390, _3391));
                                float _4555 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3396 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3397 = _3396 * (((isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0))) * _3373) / ((_3386 * 0.699999988079071044921875) + 1.0));
                                float _3409 = exp2(log2(1.0 / ((_3386 * 3.5) + 5.0)) * 0.25);
                                float _3410 = 1.0 - _597;
                                float _3417 = sqrt(1.0 - ((1.0 - (_3410 * _3410)) * (1.0 - (_3409 * _3409))));
                                float _3418 = _3417 * _3417;
                                float _3419 = _3418 * _3418;
                                float _3420 = _3366 - _2839;
                                float _3421 = _3367 - _2840;
                                float _3422 = _3368 - _2841;
                                float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                                float _3430 = dot(vec3(_537, _540, _543), vec3((-0.0) - _2839, (-0.0) - _2840, (-0.0) - _2841));
                                float _4566 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3433 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3434 = dot(vec3(_537, _540, _543), vec3(_3426 * _3420, _3426 * _3421, _3426 * _3422));
                                float _4577 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                                float _3437 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3441 = ((_3437 * _3437) * (_3419 + (-1.0))) + 1.0;
                                float _3442 = _3379 * _3418;
                                float _3443 = _3442 * _3442;
                                float _3449 = ((1.0 - _3443) * dot(vec3(_537, _540, _543), vec3(_3366, _3367, _3368))) + _3443;
                                float _4588 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3451 = 1.0 - _3418;
                                float _3461 = (0.5 / (((_3450 * ((_3433 * _3451) + _3418)) + 9.9999999392252902907785028219223e-09) + (((_3450 * _3451) + _3418) * _3433))) * _3450;
                                float _4599 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3471 = (_3396 * _3373) * (((_3419 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3441 * _3441) * ((_3386 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3397 * _3242.z;
                                frontier_phi_88_pred_1 = _3397 * _3242.y;
                                frontier_phi_88_pred_2 = _3397 * _3242.x;
                                frontier_phi_88_pred_3 = _3471 * _3254.z;
                                frontier_phi_88_pred_4 = _3471 * _3254.y;
                                frontier_phi_88_pred_5 = _3471 * _3254.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3480 = frontier_phi_88_pred;
                            _3479 = frontier_phi_88_pred_1;
                            _3478 = frontier_phi_88_pred_2;
                            _3477 = frontier_phi_88_pred_3;
                            _3476 = frontier_phi_88_pred_4;
                            _3475 = frontier_phi_88_pred_5;
                            _3184 = _3478 + _3197;
                            _3185 = _3479 + _3198;
                            _3186 = _3480 + _3199;
                            _3181 = _3475 + _3194;
                            _3182 = _3476 + _3195;
                            _3183 = _3477 + _3196;
                            if (_3201 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3201;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3186;
                        frontier_phi_82_pred_1 = _3185;
                        frontier_phi_82_pred_2 = _3184;
                        frontier_phi_82_pred_3 = _3183;
                        frontier_phi_82_pred_4 = _3182;
                        frontier_phi_82_pred_5 = _3181;
                    }
                    _2824 = frontier_phi_82_pred;
                    _2822 = frontier_phi_82_pred_1;
                    _2820 = frontier_phi_82_pred_2;
                    _2818 = frontier_phi_82_pred_3;
                    _2816 = frontier_phi_82_pred_4;
                    _2814 = frontier_phi_82_pred_5;
                    uint _2980 = _2979 + 1u;
                    if (_2980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2973 = _2814;
                        _2974 = _2816;
                        _2975 = _2818;
                        _2976 = _2820;
                        _2977 = _2822;
                        _2978 = _2824;
                        _2979 = _2980;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2820;
                frontier_phi_63_64_ladder_1 = _2824;
                frontier_phi_63_64_ladder_2 = _2822;
                frontier_phi_63_64_ladder_3 = _2818;
                frontier_phi_63_64_ladder_4 = _2816;
                frontier_phi_63_64_ladder_5 = _2814;
            }
            else
            {
                frontier_phi_63_64_ladder = _2698;
                frontier_phi_63_64_ladder_1 = _2702;
                frontier_phi_63_64_ladder_2 = _2700;
                frontier_phi_63_64_ladder_3 = _2696;
                frontier_phi_63_64_ladder_4 = _2694;
                frontier_phi_63_64_ladder_5 = _2692;
            }
            _2813 = frontier_phi_63_64_ladder_5;
            _2815 = frontier_phi_63_64_ladder_4;
            _2817 = frontier_phi_63_64_ladder_3;
            _2819 = frontier_phi_63_64_ladder;
            _2821 = frontier_phi_63_64_ladder_2;
            _2823 = frontier_phi_63_64_ladder_1;
        }
        float _2828 = isnan(1.0) ? _581 : (isnan(_581) ? 1.0 : min(_581, 1.0));
        _2625 = (_2828 * _2819) + _2156;
        _2627 = (_2828 * _2821) + _2158;
        _2629 = (_2828 * _2823) + _2160;
        _2631 = ((_2813 * 0.039999999105930328369140625) * _2828) + _2479;
        _2633 = ((_2815 * 0.039999999105930328369140625) * _2828) + _2481;
        _2635 = ((_2817 * 0.039999999105930328369140625) * _2828) + _2483;
    }
    else
    {
        _2625 = _2156;
        _2627 = _2158;
        _2629 = _2160;
        _2631 = _2479;
        _2633 = _2481;
        _2635 = _2483;
    }
    float _4615 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4626 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4637 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _2652 = ((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2625 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _581))) + ((_2631 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1419)) * cbPerFrame._m0[3u].x);
    float _2653 = ((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2627 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _581))) + ((_2633 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1419)) * cbPerFrame._m0[3u].x);
    float _2654 = ((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2629 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _581))) + ((_2635 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1419)) * cbPerFrame._m0[3u].x);
    uint _2655 = _252 + 6u;
    float _2663 = _516 / cbSceneParam._m0[86u].x;
    float _2664 = _517 / cbSceneParam._m0[86u].y;
    vec4 _2678 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, (log2((isnan(cbSceneParam._m0[77u].w) ? _436 : (isnan(_436) ? cbSceneParam._m0[77u].w : min(_436, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2680 = _2678.x;
    float _2681 = _2678.y;
    float _2682 = _2678.z;
    float _2683 = _2678.w;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    if (_436 > cbSceneParam._m0[78u].w)
    {
        float _2717 = isnan(_436) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _436 : min(cbSceneParam._m0[80u].w, _436));
        float _2718 = _2717 / _436;
        float _2729 = _2718 * _488;
        float _2730 = _489 * _2718;
        float _2731 = (-0.0) - _2730;
        float _2733 = _2718 * _490;
        float _2735 = (cbSceneParam._m0[77u].w * _2731) / _2717;
        float _2736 = _2735 + cbSceneParam._m0[79u].w;
        float _2737 = cbSceneParam._m0[79u].w - _2730;
        float _2743 = sqrt(((_2729 * _2729) + (_2730 * _2730)) + (_2733 * _2733));
        float _2746 = (1.0 - (cbSceneParam._m0[77u].w / _2717)) * _2743;
        float _2751 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2753 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2930;
        if (abs((_2731 - _2735) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2930 = ((((_2736 > 0.0) ? exp2(_2751 * _2736) : (2.0 - exp2(_2753 * _2736))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2746;
        }
        else
        {
            float _2874 = 1.0 / cbSceneParam._m0[80u].x;
            float _2875 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : max(_2736, _2737));
            float _2876 = isnan(_2737) ? _2736 : (isnan(_2736) ? _2737 : min(_2736, _2737));
            float _2885 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : min(_2875, 0.0));
            float _2886 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : min(_2876, 0.0));
            _2930 = ((abs(_2743 / _2731) * cbSceneParam._m0[80u].y) * ((((_2885 - _2886) * 2.0) - ((exp2(_2751 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0)))) - exp2(_2751 * (isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0))))) * _2874)) - ((exp2(_2753 * _2885) - exp2(_2753 * _2886)) * _2874))) + (_2746 * cbSceneParam._m0[80u].z);
        }
        vec4 _2932 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2663, _2664, 1.0), 0.0);
        float _2941 = exp2((_2930 * (-1.44269502162933349609375)) * (1.0 - _2932.w));
        float _2942 = log2(_2941);
        float _2958 = log2(_2683);
        _2755 = (exp2(_2958 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].x)) * _2932.x) / cbSceneParam._m0[78u].x)) + _2680;
        _2757 = (exp2(_2958 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].y)) * _2932.y) / cbSceneParam._m0[78u].y)) + _2681;
        _2759 = (exp2(_2958 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2942 * cbSceneParam._m0[78u].z)) * _2932.z) / cbSceneParam._m0[78u].z)) + _2682;
        _2761 = _2941 * _2683;
    }
    else
    {
        _2755 = _2680;
        _2757 = _2681;
        _2759 = _2682;
        _2761 = _2683;
    }
    bool _2968;
    vec4 _2771;
    vec4 _2793;
    float _2795;
    float _2799;
    float _2800;
    float _2801;
    float _2802;
    bool _2812;
    for (;;)
    {
        _2771 = cbMatDynParam._m0[0u];
        float _2773 = roundEven(_2771.y);
        bool _2774 = _2773 == 3.0;
        float _2775 = log2(_2761);
        float _2782 = exp2(_2775 * cbSceneParam._m0[78u].x) * _2652;
        float _2783 = exp2(_2775 * cbSceneParam._m0[78u].y) * _2653;
        float _2784 = exp2(_2775 * cbSceneParam._m0[78u].z) * _2654;
        float _2791 = _504 + (-0.5);
        _2793 = cbMtdParam._m0[1u];
        _2795 = _2793.y * _2791;
        float _2798 = (_2773 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2799 = _2798 * (_2774 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2755)));
        _2800 = _2798 * (_2774 ? _2783 : (_2783 + (cbSceneParam._m0[72u].w * _2757)));
        _2801 = _2798 * (_2774 ? _2784 : (_2784 + (cbSceneParam._m0[72u].w * _2759)));
        _2802 = _2791 * 0.999000012874603271484375;
        _2812 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2812)
        {
            if ((cbInstanceData._m0[_252 + 7u].x + _2802) < 0.5)
            {
                _2968 = true;
                break;
            }
        }
        uint _2909 = _556 + uint(_2771.w);
        if ((cbInstanceData._m0[_2909].w < 1.0) && ((cbInstanceData._m0[_2909].w + _2802) < 0.5))
        {
            _2968 = true;
            break;
        }
        if ((_2795 + 1.0) < _2793.x)
        {
            _2968 = true;
            break;
        }
        _2968 = false;
        break;
    }
    float _3172;
    if (_2968)
    {
        discard_state = true;
        _3172 = 0.0;
    }
    else
    {
        _3172 = cbInstanceData._m0[_2655].w;
    }
    SV_Target.x = _2799;
    SV_Target.y = _2800;
    SV_Target.z = _2801;
    SV_Target.w = _3172;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2655].w;
    discard_exit();
}


